.include "asm/macros.inc"
.include "constants/constants.inc"

.text
.syntax unified
.arm

	thumb_func_start sub_8065FAC
sub_8065FAC: @ 0x08065FAC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	ldr r0, _0806607C @ =gCurTask
	ldr r0, [r0]
	ldrh r2, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r0, r2, r0
	ldrb r0, [r0, #1]
	str r0, [sp]
	movs r0, #0
	mov r8, r0
	ldr r1, _08066080 @ =gUnknown_080D5248
	ldr r3, [sp]
	lsls r0, r3, #1
	adds r0, r0, r1
	mov sl, r1
	ldrh r0, [r0]
	cmp r8, r0
	blo _08065FDE
	b _080660FC
_08065FDE:
	ldr r0, _08066084 @ =0x03000002
	adds r0, r2, r0
	str r0, [sp, #8]
	ldr r1, _08066088 @ =0x03000014
	adds r1, r2, r1
	str r1, [sp, #0xc]
_08065FEA:
	ldr r1, _0806608C @ =gUnknown_08E2EC98
	ldr r2, [sp]
	lsls r0, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	mov r3, r8
	lsls r0, r3, #1
	add r0, r8
	lsls r0, r0, #2
	adds r5, r0, r1
	ldrh r0, [r5]
	mov sb, r0
	ldrh r1, [r5, #2]
	mov ip, r1
	ldrh r2, [r5, #4]
	str r2, [sp, #4]
	ldr r0, [sp, #8]
	add r0, r8
	ldrb r6, [r0]
	mov r0, ip
	adds r0, #1
	muls r0, r6, r0
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	ldr r7, [r5, #8]
	lsls r0, r4, #1
	adds r0, r0, r7
	ldrh r0, [r0]
	str r0, [sp, #0x14]
	lsls r3, r3, #2
	ldr r1, [sp, #0xc]
	adds r0, r1, r3
	ldr r2, _08066090 @ =gStageData
	ldr r1, [r2, #0x1c]
	ldr r0, [r0]
	subs r1, r1, r0
	ldr r2, [sp, #0x14]
	adds r2, #1
	str r3, [sp, #0x10]
	cmp r1, r2
	bls _080660E4
	ldr r3, _08066094 @ =gFlags
	ldr r2, [r3]
	movs r0, #1
	mov sl, r0
	orrs r2, r0
	str r2, [r3]
	adds r0, r4, #1
	ldrh r5, [r5, #2]
	adds r0, r0, r5
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	adds r5, r6, #1
	ldr r1, [sp, #4]
	cmp r5, r1
	blt _0806605C
	movs r4, #0
_0806605C:
	movs r0, #0x80
	lsls r0, r0, #9
	ands r0, r2
	cmp r0, #0
	beq _08066098
	lsls r0, r4, #1
	adds r0, #2
	adds r0, r7, r0
	mov r2, sb
	lsls r1, r2, #0x18
	lsrs r1, r1, #0x18
	mov r2, ip
	bl sub_80C460C
	b _080660C2
	.align 2, 0
_0806607C: .4byte gCurTask
_08066080: .4byte gUnknown_080D5248
_08066084: .4byte 0x03000002
_08066088: .4byte 0x03000014
_0806608C: .4byte gUnknown_08E2EC98
_08066090: .4byte gStageData
_08066094: .4byte gFlags
_08066098:
	lsls r0, r4, #1
	adds r0, #2
	adds r0, r7, r0
	ldr r1, _0806610C @ =0x040000D4
	str r0, [r1]
	mov r1, sb
	lsls r0, r1, #1
	ldr r1, _08066110 @ =gBgPalette
	adds r0, r0, r1
	ldr r1, _0806610C @ =0x040000D4
	str r0, [r1, #4]
	movs r0, #0x80
	lsls r0, r0, #0x18
	mov r1, ip
	orrs r1, r0
	ldr r0, _0806610C @ =0x040000D4
	str r1, [r0, #8]
	ldr r0, [r0, #8]
	mov r1, sl
	orrs r2, r1
	str r2, [r3]
_080660C2:
	ldr r2, [sp, #0xc]
	ldr r3, [sp, #0x10]
	adds r0, r2, r3
	ldr r2, _08066114 @ =gStageData
	ldr r1, [r2, #0x1c]
	str r1, [r0]
	lsls r0, r5, #0x18
	lsrs r6, r0, #0x18
	ldr r3, [sp, #4]
	cmp r6, r3
	blo _080660DA
	movs r6, #0
_080660DA:
	ldr r0, [sp, #8]
	add r0, r8
	strb r6, [r0]
	ldr r0, _08066118 @ =gUnknown_080D5248
	mov sl, r0
_080660E4:
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	ldr r1, [sp]
	lsls r0, r1, #1
	add r0, sl
	ldrh r0, [r0]
	cmp r8, r0
	bhs _080660FC
	b _08065FEA
_080660FC:
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806610C: .4byte 0x040000D4
_08066110: .4byte gBgPalette
_08066114: .4byte gStageData
_08066118: .4byte gUnknown_080D5248

	thumb_func_start sub_806611C
sub_806611C: @ 0x0806611C
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #8
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _08066180 @ =gStageData
	mov r8, r0
	ldr r0, _08066184 @ =sub_8065FAC
	movs r2, #0x84
	lsls r2, r2, #6
	ldr r1, _08066188 @ =sub_806619C
	str r1, [sp]
	movs r1, #0x54
	movs r3, #0
	bl TaskCreate
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r0, r5, r0
	movs r6, #0
	strb r4, [r0, #1]
	add r1, sp, #4
	mov r2, r8
	ldr r0, [r2, #0x1c]
	strh r0, [r1]
	ldr r0, _0806618C @ =0x03000014
	adds r1, r5, r0
	ldr r2, _08066190 @ =0x01000020
	add r0, sp, #4
	bl CpuSet
	mov r0, sp
	adds r0, #6
	strh r6, [r0]
	ldr r1, _08066194 @ =0x03000002
	adds r5, r5, r1
	ldr r2, _08066198 @ =0x01000008
	adds r1, r5, #0
	bl CpuSet
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08066180: .4byte gStageData
_08066184: .4byte sub_8065FAC
_08066188: .4byte sub_806619C
_0806618C: .4byte 0x03000014
_08066190: .4byte 0x01000020
_08066194: .4byte 0x03000002
_08066198: .4byte 0x01000008

    thumb_func_start sub_806619C
sub_806619C:
    bx lr
    .align 2 , 0

    @ Called on init of Gmerl (in Boss 1 and Extra Boss)
    @ struct Task CreateGmerl1(u8 *param0, s32 worldX, s32 worldY);
	thumb_func_start CreateGmerl1
CreateGmerl1: @ 0x080661A0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	mov sb, r0
	adds r4, r1, #0
	mov r8, r2
	ldr r0, _08066208 @ =sub_8068860
	movs r2, #0x84
	lsls r2, r2, #6
	ldr r1, _0806620C @ =sub_8068828
	str r1, [sp]
	movs r1, #0xf0
	movs r3, #0
	bl TaskCreate
	str r0, [sp, #4]
	ldr r2, _08066210 @ =gStageData
	adds r0, r2, #0
	adds r0, #0x88
	ldr r1, [sp, #4]
	str r1, [r0]
	ldrh r0, [r1, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r6, r0, r1
	ldr r3, _08066214 @ =0x0300003C
	adds r5, r0, r3
	adds r1, #0x78
	adds r1, r0, r1
	str r1, [sp, #8]
	adds r3, #0x64
	adds r3, r0, r3
	str r3, [sp, #0xc]
	ldr r1, _08066218 @ =0x0300006C
	adds r7, r0, r1
	strh r4, [r5, #0x10]
	ldrb r0, [r2, #9]
	cmp r0, #7
	beq _08066202
	ldr r0, [r2, #8]
	ldr r1, _0806621C @ =0x00FFFF00
	ands r0, r1
	movs r1, #0xe0
	lsls r1, r1, #0xb
	cmp r0, r1
	bne _08066224
_08066202:
	ldr r0, _08066220 @ =gCamera
	ldr r0, [r0, #0x10]
	b _08066228
	.align 2, 0
_08066208: .4byte sub_8068860
_0806620C: .4byte sub_8068828
_08066210: .4byte gStageData
_08066214: .4byte 0x0300003C
_08066218: .4byte 0x0300006C
_0806621C: .4byte 0x00FFFF00
_08066220: .4byte gCamera
_08066224:
	mov r0, r8
	subs r0, #0x74
_08066228:
	strh r0, [r5, #0x12]
	movs r0, #0x78
	bl VramMalloc
	str r0, [r6, #4]
	movs r2, #0
	movs r1, #0
	strh r1, [r6, #0x18]
	movs r3, #0x10
	ldrsh r0, [r5, r3]
	lsls r0, r0, #8
	str r0, [r6, #8]
	movs r3, #0x12
	ldrsh r0, [r5, r3]
	lsls r0, r0, #8
	str r0, [r6, #0xc]
	movs r0, #0xfc
	lsls r0, r0, #8
	strh r0, [r6, #0x14]
	strh r1, [r6, #0x16]
	adds r0, r6, #0
	adds r0, #0x21
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	ldr r0, _0806626C @ =gStageData
	ldrb r0, [r0, #1]
	cmp r0, #0
	bne _08066270
	adds r1, r6, #0
	adds r1, #0x20
	movs r0, #4
	b _08066276
	.align 2, 0
_0806626C: .4byte gStageData
_08066270:
	adds r1, r6, #0
	adds r1, #0x20
	movs r0, #2
_08066276:
	strb r0, [r1]
	mov r0, sb
	str r0, [r6, #0x1c]
	movs r4, #0
	adds r1, r6, #0
	adds r1, #0x23
	str r1, [sp, #0x14]
	adds r3, r6, #0
	adds r3, #0x2e
	movs r2, #0x2f
	adds r2, r2, r6
	mov ip, r2
	movs r0, #0x30
	adds r0, r0, r6
	mov r8, r0
	movs r1, #0x31
	adds r1, r1, r6
	mov sb, r1
	movs r2, #0x32
	adds r2, r2, r6
	mov sl, r2
	adds r0, r6, #0
	adds r0, #0x33
	str r0, [sp, #0x18]
	adds r1, r6, #0
	adds r1, #0xc8
	str r1, [sp, #0x10]
	subs r1, #0xa4
	movs r2, #0
_080662B0:
	adds r0, r1, r4
	strb r2, [r0]
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #9
	bls _080662B0
	ldr r2, _0806630C @ =gStageData
	ldrb r1, [r2, #9]
	movs r0, #0
	ldr r2, [sp, #0x14]
	strb r1, [r2]
	strb r0, [r3]
	mov r3, ip
	strb r0, [r3]
	movs r1, #2
	mov r2, r8
	strb r1, [r2]
	mov r3, sb
	strb r0, [r3]
	mov r1, sl
	strb r0, [r1]
	movs r1, #1
	ldr r2, [sp, #0x18]
	strb r1, [r2]
	strh r0, [r7]
	strh r0, [r7, #6]
	strh r0, [r7, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r7, #2]
	strh r0, [r7, #4]
	adds r0, r5, #0
	ldr r1, [sp, #8]
	ldr r2, [sp, #0xc]
	bl sub_80678C0
	ldr r3, [sp, #0x14]
	ldrb r0, [r3]
	cmp r0, #7
	bhi _0806634C
	lsls r0, r0, #2
	ldr r1, _08066310 @ =_08066314
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0806630C: .4byte gStageData
_08066310: .4byte _08066314
_08066314: @ jump table
	.4byte _0806634C @ case 0
	.4byte _0806634C @ case 1
	.4byte _0806634C @ case 2
	.4byte _08066334 @ case 3
	.4byte _0806634C @ case 4
	.4byte _08066338 @ case 5
	.4byte _0806634C @ case 6
	.4byte _0806633C @ case 7
_08066334:
	movs r7, #0xc
	b _0806634E
_08066338:
	movs r7, #0xe
	b _0806634E
_0806633C:
	movs r7, #0xe
	ldr r1, _08066348 @ =gStageData
	movs r0, #3
	strb r0, [r1, #0xa]
	b _0806634E
	.align 2, 0
_08066348: .4byte gStageData
_0806634C:
	movs r7, #0xa
_0806634E:
	movs r4, #0
	ldr r0, _080663E8 @ =gPlayers
	mov sl, r0
	movs r5, #0
	movs r1, #0x9e
	lsls r1, r1, #1
	mov r8, r1
	movs r2, #0xbf
	mov sb, r2
_08066360:
	lsls r1, r4, #2
	adds r1, r1, r4
	lsls r1, r1, #2
	adds r1, r1, r4
	lsls r1, r1, #4
	add r1, sl
	adds r0, r1, #0
	adds r0, #0x4c
	strh r5, [r0]
	mov r0, r8
	adds r3, r1, r0
	ldrb r2, [r3]
	mov r0, sb
	ands r0, r2
	strb r0, [r3]
	adds r0, r1, #0
	adds r0, #0x4a
	strh r5, [r0]
	adds r1, #0x5e
	strh r5, [r1]
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #3
	bls _08066360
	adds r0, r6, #0
	adds r1, r7, #0
	bl sub_80676D4
	bl sub_807A4BC
	ldr r5, [sp, #0x10]
	ldr r0, [r6, #4]
	adds r0, #0x80
	str r0, [r5]
	movs r2, #0
	movs r1, #0
	ldr r0, _080663EC @ =0x000004F9
	strh r0, [r5, #0xc]
	movs r0, #1
	strb r0, [r5, #0x1a]
	movs r0, #0xa0
	lsls r0, r0, #2
	strh r0, [r5, #0x14]
	strh r1, [r5, #0xe]
	strh r1, [r5, #0x16]
	movs r0, #0xff
	strb r0, [r5, #0x1b]
	movs r0, #0x10
	strb r0, [r5, #0x1c]
	strb r2, [r5, #0x1f]
	subs r0, #0x11
	str r0, [r5, #0x20]
	str r1, [r5, #8]
	strh r1, [r5, #0x10]
	strh r1, [r5, #0x12]
	adds r0, r5, #0
	bl UpdateSpriteAnimation
	ldr r0, [sp, #4]
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080663E8: .4byte gPlayers
_080663EC: .4byte 0x000004F9

	thumb_func_start sub_80663F0
sub_80663F0: @ 0x080663F0
	push {r4, r5, r6, r7, lr}
	ldr r0, _08066410 @ =gCurTask
	ldr r2, [r0]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, [r4, #0x1c]
	ldrb r0, [r0]
	cmp r0, #3
	bne _08066414
	adds r0, r2, #0
	bl TaskDestroy
	b _0806655E
	.align 2, 0
_08066410: .4byte gCurTask
_08066414:
	adds r0, r4, #0
	bl sub_8068954
	adds r0, r4, #0
	bl sub_806799C
	movs r2, #0
	ldr r7, _08066488 @ =gPlayers
	adds r6, r7, #0
	movs r5, #0
_08066428:
	lsls r1, r2, #0x10
	asrs r1, r1, #0x10
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r2, r0, r6
	adds r0, r2, #0
	adds r0, #0x4c
	strh r5, [r0]
	movs r0, #0x9e
	lsls r0, r0, #1
	adds r3, r2, r0
	ldrb r2, [r3]
	movs r0, #0xbf
	ands r0, r2
	strb r0, [r3]
	adds r1, #1
	lsls r1, r1, #0x10
	lsrs r2, r1, #0x10
	asrs r1, r1, #0x10
	cmp r1, #1
	ble _08066428
	ldr r0, [r4, #0x1c]
	ldrb r0, [r0]
	cmp r0, #2
	beq _08066462
	b _0806655E
_08066462:
	movs r2, #0
	ldr r5, _0806648C @ =gStageData
_08066466:
	lsls r2, r2, #0x10
	asrs r1, r2, #0x10
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r3, r0, r7
	ldrb r0, [r5, #9]
	cmp r0, #7
	bhi _08066538
	lsls r0, r0, #2
	ldr r1, _08066490 @ =_08066494
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08066488: .4byte gPlayers
_0806648C: .4byte gStageData
_08066490: .4byte _08066494
_08066494: @ jump table
	.4byte _080664B4 @ case 0
	.4byte _080664C0 @ case 1
	.4byte _08066538 @ case 2
	.4byte _080664E4 @ case 3
	.4byte _08066538 @ case 4
	.4byte _08066504 @ case 5
	.4byte _08066538 @ case 6
	.4byte _0806652C @ case 7
_080664B4:
	ldr r0, [r3, #0x10]
	asrs r0, r0, #8
	ldr r1, _080664BC @ =0xFFFFFB5F
	b _08066532
	.align 2, 0
_080664BC: .4byte 0xFFFFFB5F
_080664C0:
	ldr r0, [r3, #0x10]
	asrs r0, r0, #8
	ldr r1, _080664DC @ =0xFFFFE537
	adds r0, r0, r1
	cmp r0, #0xee
	bhi _0806655E
	ldr r0, [r3, #0x14]
	asrs r1, r0, #8
	ldr r0, _080664E0 @ =0x00000642
	cmp r1, r0
	ble _0806655E
	adds r0, #0x8a
	b _0806651C
	.align 2, 0
_080664DC: .4byte 0xFFFFE537
_080664E0: .4byte 0x00000642
_080664E4:
	ldr r0, [r3, #0x10]
	asrs r0, r0, #8
	ldr r1, _08066500 @ =0xFFFFE297
	adds r0, r0, r1
	cmp r0, #0xee
	bhi _0806655E
	ldr r0, [r3, #0x14]
	asrs r1, r0, #8
	movs r0, #0xa0
	lsls r0, r0, #2
	cmp r1, r0
	ble _0806655E
	adds r0, #0x82
	b _0806651C
	.align 2, 0
_08066500: .4byte 0xFFFFE297
_08066504:
	ldr r0, [r3, #0x10]
	asrs r0, r0, #8
	ldr r1, _08066524 @ =0xFFFFD157
	adds r0, r0, r1
	cmp r0, #0xee
	bhi _0806655E
	ldr r0, [r3, #0x14]
	asrs r1, r0, #8
	ldr r0, _08066528 @ =0x0000015D
	cmp r1, r0
	ble _0806655E
	adds r0, #0x97
_0806651C:
	cmp r1, r0
	bgt _0806655E
	b _08066538
	.align 2, 0
_08066524: .4byte 0xFFFFD157
_08066528: .4byte 0x0000015D
_0806652C:
	ldr r0, [r3, #0x10]
	asrs r0, r0, #8
	ldr r1, _08066564 @ =0xFFFFFBAF
_08066532:
	adds r0, r0, r1
	cmp r0, #0xee
	bhi _0806655E
_08066538:
	movs r1, #0x80
	lsls r1, r1, #9
	adds r0, r2, r1
	lsrs r2, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	ble _08066466
	bl sub_807A4A8
	ldr r1, [r4]
	adds r0, r4, #0
	bl _call_via_r1
	cmp r0, #0
	bne _0806655E
	ldr r0, _08066568 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0806656C @ =sub_8068908
	str r0, [r1, #8]
_0806655E:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08066564: .4byte 0xFFFFFBAF
_08066568: .4byte gCurTask
_0806656C: .4byte sub_8068908

	thumb_func_start sub_8066570
sub_8066570: @ 0x08066570
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r3, r4, #0
	adds r3, #0x3c
	ldrh r2, [r4, #0x18]
	movs r0, #0x18
	ldrsh r1, [r4, r0]
	movs r0, #1
	eors r1, r0
	rsbs r0, r1, #0
	orrs r0, r1
	lsrs r5, r0, #0x1f
	subs r2, #1
	strh r2, [r4, #0x18]
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	cmp r2, #0
	bne _080665C0
	ldr r1, _080665C8 @ =gUnknown_080D52E0
	ldr r0, [r1]
	str r0, [r4]
	ldrh r0, [r1, #4]
	strh r0, [r4, #0x18]
	strh r2, [r4, #0x16]
	ldrh r0, [r1, #0xe]
	strh r0, [r3, #0xc]
	ldrb r0, [r1, #0x10]
	strb r0, [r3, #0x1a]
	ldr r0, _080665CC @ =0x0000FFFF
	strh r0, [r3, #0x18]
	movs r0, #0xff
	strb r0, [r3, #0x1b]
	adds r0, r4, #0
	bl sub_8068AD8
	ldr r0, [r4, #0xc]
	str r0, [r4, #0x10]
	ldr r0, _080665D0 @ =0x00000223
	bl m4aSongNumStart
_080665C0:
	adds r0, r5, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080665C8: .4byte gUnknown_080D52E0
_080665CC: .4byte 0x0000FFFF
_080665D0: .4byte 0x00000223

	thumb_func_start sub_80665D4
sub_80665D4: @ 0x080665D4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x44]
	movs r1, #0x80
	lsls r1, r1, #3
	ands r0, r1
	cmp r0, #0
	beq _08066618
	ldr r0, _08066610 @ =gCamera
	ldr r0, [r0, #0x1c]
	subs r0, #0x2e
	lsls r0, r0, #8
	ldr r1, [r4, #8]
	cmp r0, r1
	bge _08066642
	adds r0, r4, #0
	movs r1, #6
	bl sub_80676D4
	ldr r0, _08066614 @ =0x00000223
	bl m4aSongNumStop
	ldrh r0, [r4, #0x14]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x11
	strh r0, [r4, #0x14]
	adds r0, r4, #0
	bl sub_8068ACC
	b _08066642
	.align 2, 0
_08066610: .4byte gCamera
_08066614: .4byte 0x00000223
_08066618:
	ldr r0, _08066668 @ =gCamera
	ldr r0, [r0, #0x18]
	adds r0, #0x2e
	lsls r0, r0, #8
	ldr r1, [r4, #8]
	cmp r0, r1
	ble _08066642
	adds r0, r4, #0
	movs r1, #6
	bl sub_80676D4
	ldr r0, _0806666C @ =0x00000223
	bl m4aSongNumStop
	ldrh r0, [r4, #0x14]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x11
	strh r0, [r4, #0x14]
	adds r0, r4, #0
	bl sub_8068ACC
_08066642:
	adds r0, r4, #0
	movs r1, #1
	bl sub_8067B94
	cmp r0, #0
	beq _0806665A
	adds r0, r4, #0
	bl sub_8068AAC
	adds r0, r4, #0
	bl sub_8067590
_0806665A:
	adds r0, r4, #0
	bl sub_8067A64
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08066668: .4byte gCamera
_0806666C: .4byte 0x00000223

	thumb_func_start sub_8066670
sub_8066670: @ 0x08066670
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x3c
	ldr r1, _080666AC @ =gUnknown_080D56DC
	adds r0, #0x20
	movs r2, #0
	ldrsb r2, [r0, r2]
	movs r0, #4
	subs r0, r0, r2
	lsls r0, r0, #2
	adds r1, #2
	adds r0, r0, r1
	movs r6, #0
	movs r2, #0
	ldrsh r1, [r0, r2]
	adds r0, r5, #0
	movs r2, #0
	bl sub_8068A6C
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	ands r0, r1
	cmp r0, #0
	beq _080666B0
	movs r1, #0x14
	ldrsh r0, [r5, r1]
	lsrs r6, r0, #0x1f
	b _080666BA
	.align 2, 0
_080666AC: .4byte gUnknown_080D56DC
_080666B0:
	movs r2, #0x14
	ldrsh r0, [r5, r2]
	cmp r0, #0
	ble _080666BA
	movs r6, #1
_080666BA:
	cmp r6, #0
	beq _080666CC
	adds r0, r5, #0
	movs r1, #0
	movs r2, #0
	bl sub_8068A38
	movs r0, #1
	strh r0, [r5, #0x18]
_080666CC:
	ldrh r0, [r5, #0x18]
	subs r0, #1
	strh r0, [r5, #0x18]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _08066702
	adds r0, r5, #0
	adds r0, #0x23
	ldrb r0, [r0]
	cmp r0, #5
	beq _080666F0
	cmp r0, #5
	bgt _080666EC
	cmp r0, #3
	beq _080666F0
	b _080666FA
_080666EC:
	cmp r0, #7
	bne _080666FA
_080666F0:
	adds r0, r5, #0
	movs r1, #0x32
	bl sub_80676D4
	b _08066702
_080666FA:
	adds r0, r5, #0
	movs r1, #7
	bl sub_80676D4
_08066702:
	adds r0, r5, #0
	movs r1, #1
	bl sub_8067B94
	cmp r0, #0
	beq _0806671A
	adds r0, r5, #0
	bl sub_8068AAC
	adds r0, r5, #0
	bl sub_8067590
_0806671A:
	adds r0, r5, #0
	bl sub_8067A64
	movs r0, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_8066728
sub_8066728: @ 0x08066728
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x10
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x3c
	movs r1, #0x18
	ldrsh r0, [r5, r1]
	cmp r0, #0xa
	beq _08066778
	cmp r0, #0xa
	bgt _08066748
	cmp r0, #1
	beq _08066750
	b _0806687E
_08066748:
	cmp r0, #0x64
	bne _0806674E
	b _0806684C
_0806674E:
	b _0806687E
_08066750:
	ldr r0, _0806682C @ =gCamera
	ldr r0, [r0]
	adds r0, #0x78
	lsls r0, r0, #8
	ldr r1, [r5, #8]
	subs r2, r0, r1
	adds r0, r2, #0
	cmp r2, #0
	bge _08066764
	adds r0, #0x3f
_08066764:
	asrs r0, r0, #6
	movs r1, #0
	strh r0, [r5, #0x14]
	ldr r0, [r5, #0xc]
	asrs r0, r0, #8
	strh r0, [r5, #0x3a]
	strh r1, [r5, #0x16]
	movs r0, #0xa
	strh r0, [r5, #0x18]
	strh r1, [r5, #0x1a]
_08066778:
	ldr r0, _08066830 @ =gSineTable
	mov ip, r0
	ldrh r0, [r5, #0x1a]
	lsls r0, r0, #1
	add r0, ip
	movs r1, #0
	ldrsh r6, [r0, r1]
	movs r1, #0x3a
	ldrsh r0, [r5, r1]
	lsls r0, r0, #8
	subs r0, r0, r6
	str r0, [r5, #0xc]
	ldrh r0, [r5, #0x1a]
	adds r0, #8
	strh r0, [r5, #0x1a]
	lsls r0, r0, #0x10
	movs r1, #0x80
	lsls r1, r1, #0x12
	cmp r0, r1
	bls _080667AC
	movs r0, #0
	strh r0, [r5, #0x14]
	movs r0, #0x64
	strh r0, [r5, #0x18]
	movs r0, #0x78
	strh r0, [r5, #0x1a]
_080667AC:
	ldr r0, _08066834 @ =gStageData
	mov r8, r0
	ldr r7, [r0, #0x1c]
	movs r0, #3
	ands r7, r0
	cmp r7, #0
	bne _08066816
	ldr r3, _08066838 @ =gPseudoRandom
	ldr r0, [r3]
	ldr r2, _0806683C @ =0x00196225
	muls r0, r2, r0
	ldr r1, _08066840 @ =0x3C6EF35F
	adds r0, r0, r1
	ldr r4, _08066844 @ =0x000003FF
	ands r4, r0
	muls r0, r2, r0
	adds r0, r0, r1
	str r0, [r3]
	movs r6, #0xf
	ands r6, r0
	movs r3, #0x80
	lsls r3, r3, #1
	adds r0, r4, r3
	lsls r0, r0, #1
	add r0, ip
	movs r1, #0
	ldrsh r0, [r0, r1]
	muls r0, r6, r0
	lsrs r2, r0, #6
	lsls r0, r4, #1
	add r0, ip
	movs r1, #0
	ldrsh r0, [r0, r1]
	muls r0, r6, r0
	lsrs r6, r0, #6
	ldr r1, [r5, #8]
	adds r1, r1, r2
	lsls r1, r1, #8
	asrs r1, r1, #0x10
	ldr r2, [r5, #0xc]
	adds r2, r2, r6
	lsls r2, r2, #8
	asrs r2, r2, #0x10
	str r4, [sp]
	movs r0, #0x1e
	str r0, [sp, #4]
	str r7, [sp, #8]
	ldr r0, [r5, #4]
	adds r0, #0x80
	str r0, [sp, #0xc]
	movs r0, #9
	bl sub_8079758
_08066816:
	mov r1, r8
	ldr r0, [r1, #0x1c]
	movs r1, #0x3f
	ands r0, r1
	cmp r0, #0
	bne _0806687E
	ldr r0, _08066848 @ =0x00000221
	bl m4aSongNumStart
	b _0806687E
	.align 2, 0
_0806682C: .4byte gCamera
_08066830: .4byte gSineTable
_08066834: .4byte gStageData
_08066838: .4byte gPseudoRandom
_0806683C: .4byte 0x00196225
_08066840: .4byte 0x3C6EF35F
_08066844: .4byte 0x000003FF
_08066848: .4byte 0x00000221
_0806684C:
	ldrh r0, [r5, #0x1a]
	subs r0, #1
	strh r0, [r5, #0x1a]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _0806687E
	strh r0, [r5, #0x18]
	ldr r6, [r4, #8]
	adds r0, r5, #0
	movs r1, #9
	bl sub_80676D4
	movs r1, #0x80
	lsls r1, r1, #3
	ands r6, r1
	cmp r6, #0
	beq _08066876
	ldr r0, [r4, #8]
	orrs r0, r1
	b _0806687C
_08066876:
	ldr r0, [r4, #8]
	ldr r1, _0806688C @ =0xFFFFFBFF
	ands r0, r1
_0806687C:
	str r0, [r4, #8]
_0806687E:
	movs r0, #0
	add sp, #0x10
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0806688C: .4byte 0xFFFFFBFF

	thumb_func_start sub_8066890
sub_8066890: @ 0x08066890
	push {r4, r5, r6, lr}
	sub sp, #0x10
	adds r5, r0, #0
	adds r2, r5, #0
	adds r2, #0x3c
	ldr r0, _080668E4 @ =gCamera
	ldr r0, [r0, #0x1c]
	adds r0, #0x10
	lsls r0, r0, #8
	ldr r1, [r5, #8]
	cmp r1, r0
	ble _080668E8
	adds r4, r5, #0
	adds r4, #0x33
	ldrb r0, [r4]
	cmp r0, #0
	beq _080668D4
	ldr r0, [r5, #0x3c]
	bl VramFree
	ldr r0, [r5, #0x78]
	bl VramFree
	adds r0, r5, #0
	adds r0, #0xa0
	ldr r0, [r0]
	bl VramFree
	ldr r0, [r5, #4]
	bl VramFree
	movs r0, #0
	str r0, [r5, #4]
	strb r0, [r4]
_080668D4:
	ldrh r0, [r5, #0x18]
	subs r0, #1
	strh r0, [r5, #0x18]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _08066968
	movs r0, #1
	b _0806696A
	.align 2, 0
_080668E4: .4byte gCamera
_080668E8:
	ldr r0, [r2, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	str r0, [r2, #8]
	movs r1, #0x80
	lsls r1, r1, #2
	adds r0, r5, #0
	movs r2, #0
	bl sub_8068A38
	ldr r0, _08066974 @ =gStageData
	ldr r6, [r0, #0x1c]
	movs r0, #7
	ands r6, r0
	cmp r6, #0
	bne _08066968
	ldr r4, _08066978 @ =gPseudoRandom
	ldr r0, [r4]
	ldr r2, _0806697C @ =0x00196225
	muls r0, r2, r0
	ldr r1, _08066980 @ =0x3C6EF35F
	adds r0, r0, r1
	ldr r3, _08066984 @ =0x000003FF
	ands r3, r0
	muls r0, r2, r0
	adds r0, r0, r1
	str r0, [r4]
	movs r1, #0xf
	ands r1, r0
	ldr r4, _08066988 @ =gSineTable
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r3, r2
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r2, #0
	ldrsh r0, [r0, r2]
	adds r2, r0, #0
	muls r2, r1, r2
	lsrs r2, r2, #6
	lsls r0, r3, #1
	adds r0, r0, r4
	movs r4, #0
	ldrsh r0, [r0, r4]
	muls r0, r1, r0
	lsrs r0, r0, #6
	ldr r1, [r5, #8]
	adds r1, r1, r2
	lsls r1, r1, #8
	asrs r1, r1, #0x10
	ldr r2, [r5, #0xc]
	adds r2, r2, r0
	lsls r2, r2, #8
	asrs r2, r2, #0x10
	str r3, [sp]
	movs r0, #0x10
	str r0, [sp, #4]
	str r6, [sp, #8]
	str r6, [sp, #0xc]
	movs r0, #8
	movs r3, #0x10
	bl sub_8079758
_08066968:
	movs r0, #0
_0806696A:
	add sp, #0x10
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_08066974: .4byte gStageData
_08066978: .4byte gPseudoRandom
_0806697C: .4byte 0x00196225
_08066980: .4byte 0x3C6EF35F
_08066984: .4byte 0x000003FF
_08066988: .4byte gSineTable

	thumb_func_start sub_806698C
sub_806698C: @ 0x0806698C
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldr r4, _080669F8 @ =gPlayers
	adds r6, r5, #0
	adds r6, #0x3c
	ldr r2, _080669FC @ =gUnknown_080D56F0
	adds r0, #0x20
	movs r1, #0
	ldrsb r1, [r0, r1]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r2, #2
	adds r0, r0, r2
	movs r1, #0
	ldrsh r2, [r0, r1]
	rsbs r2, r2, #0
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	adds r0, r5, #0
	movs r1, #0
	bl sub_8068A6C
	movs r3, #0x16
	ldrsh r1, [r5, r3]
	ldr r0, _08066A00 @ =0xFFFFFD00
	cmp r1, r0
	bge _08066AA0
	ldr r0, [r4, #0x14]
	ldr r1, [r5, #0xc]
	subs r0, r0, r1
	lsls r0, r0, #8
	asrs r0, r0, #0x10
	ldr r1, [r4, #0x10]
	ldr r2, [r5, #8]
	subs r1, r1, r2
	lsls r1, r1, #8
	asrs r1, r1, #0x10
	bl sa2__sub_8004418
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	ldr r0, [r6, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	ands r0, r1
	cmp r0, #0
	beq _08066A0E
	ldr r0, _08066A04 @ =0x000001FF
	cmp r4, r0
	bls _08066A08
	movs r4, #0
	b _08066A22
	.align 2, 0
_080669F8: .4byte gPlayers
_080669FC: .4byte gUnknown_080D56F0
_08066A00: .4byte 0xFFFFFD00
_08066A04: .4byte 0x000001FF
_08066A08:
	cmp r4, #0xff
	bls _08066A22
	b _08066A1E
_08066A0E:
	movs r0, #0x80
	lsls r0, r0, #2
	cmp r4, r0
	bls _08066A1A
	adds r4, r0, #0
	b _08066A22
_08066A1A:
	cmp r4, #0xff
	bhi _08066A22
_08066A1E:
	movs r4, #0x80
	lsls r4, r4, #1
_08066A22:
	ldr r7, _08066AB0 @ =gSineTable
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r4, r1
	lsls r0, r0, #1
	adds r0, r0, r7
	movs r1, #0
	ldrsh r3, [r0, r1]
	ldr r2, _08066AB4 @ =gUnknown_080D56F0
	adds r0, r5, #0
	adds r0, #0x20
	movs r1, #0
	ldrsb r1, [r0, r1]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r2, #4
	adds r0, r0, r2
	movs r1, #0
	ldrsh r2, [r0, r1]
	adds r0, r3, #0
	muls r0, r2, r0
	asrs r1, r0, #0xe
	cmp r1, #0
	bge _08066A56
	rsbs r1, r1, #0
_08066A56:
	lsls r0, r4, #1
	adds r0, r0, r7
	movs r3, #0
	ldrsh r0, [r0, r3]
	adds r4, r0, #0
	muls r4, r2, r4
	lsls r4, r4, #2
	lsrs r4, r4, #0x10
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	adds r0, r5, #0
	movs r2, #0
	bl sub_8068A38
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	adds r0, r5, #0
	adds r1, r4, #0
	movs r2, #1
	bl sub_8068A38
	adds r0, r5, #0
	movs r1, #0x15
	bl sub_80676D4
	ldr r0, [r6, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	ands r0, r1
	cmp r0, #0
	beq _08066A9A
	ldrb r0, [r6, #0x1a]
	adds r0, #1
	strb r0, [r6, #0x1a]
_08066A9A:
	movs r0, #0xe7
	bl m4aSongNumStart
_08066AA0:
	adds r0, r5, #0
	movs r1, #0
	bl sub_8067B94
	movs r0, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08066AB0: .4byte gSineTable
_08066AB4: .4byte gUnknown_080D56F0

	thumb_func_start sub_8066AB8
sub_8066AB8: @ 0x08066AB8
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x3c
	adds r6, r5, #0
	adds r6, #0x6c
	ldr r2, _08066B2C @ =gUnknown_080D56DC
	adds r7, r5, #0
	adds r7, #0x20
	movs r1, #0
	ldrsb r1, [r7, r1]
	movs r0, #4
	subs r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r2
	ldrh r0, [r0]
	mov r8, r0
	mov sb, r8
	adds r0, r5, #0
	movs r1, #0
	bl sub_8068984
	mov ip, r0
	ldr r3, [r4, #8]
	movs r0, #0x80
	lsls r0, r0, #3
	ands r3, r0
	cmp r3, #0
	beq _08066B62
	ldr r2, _08066B30 @ =gUnknown_080D56F0
	movs r1, #0
	ldrsb r1, [r7, r1]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r2, #8
	adds r0, r0, r2
	ldrh r0, [r0]
	ldrh r1, [r6]
	adds r0, r0, r1
	ldr r2, _08066B34 @ =0x000003FF
	adds r1, r2, #0
	ands r0, r1
	movs r2, #0
	strh r0, [r6]
	ldr r0, _08066B38 @ =gCamera
	ldr r0, [r0, #0x1c]
	subs r0, #0x2e
	lsls r0, r0, #8
	ldr r1, [r5, #8]
	cmp r0, r1
	bge _08066B3C
	strh r2, [r6]
	b _08066B90
	.align 2, 0
_08066B2C: .4byte gUnknown_080D56DC
_08066B30: .4byte gUnknown_080D56F0
_08066B34: .4byte 0x000003FF
_08066B38: .4byte gCamera
_08066B3C:
	mov r0, ip
	cmp r0, #0
	beq _08066BD4
	strh r2, [r6]
	adds r0, r5, #0
	bl sub_8068AD8
	adds r0, r5, #0
	movs r1, #0x17
	bl sub_80676D4
	mov r2, r8
	lsls r1, r2, #0x10
	asrs r1, r1, #0x10
	adds r0, r5, #0
	movs r2, #0
	bl sub_8068A38
	b _08066BD4
_08066B62:
	ldr r2, _08066BA4 @ =gUnknown_080D56F0
	movs r1, #0
	ldrsb r1, [r7, r1]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r2, #8
	adds r0, r0, r2
	ldrh r1, [r6]
	ldrh r0, [r0]
	subs r1, r1, r0
	ldr r2, _08066BA8 @ =0x000003FF
	adds r0, r2, #0
	ands r1, r0
	strh r1, [r6]
	ldr r0, _08066BAC @ =gCamera
	ldr r0, [r0, #0x18]
	adds r0, #0x2e
	lsls r0, r0, #8
	ldr r1, [r5, #8]
	cmp r0, r1
	ble _08066BB0
	strh r3, [r6]
_08066B90:
	ldrh r0, [r5, #0x14]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x11
	strh r0, [r5, #0x14]
	adds r0, r5, #0
	movs r1, #0x16
	bl sub_80676D4
	b _08066BD4
	.align 2, 0
_08066BA4: .4byte gUnknown_080D56F0
_08066BA8: .4byte 0x000003FF
_08066BAC: .4byte gCamera
_08066BB0:
	mov r0, ip
	cmp r0, #0
	beq _08066BD4
	strh r3, [r6]
	adds r0, r5, #0
	bl sub_8068AD8
	adds r0, r5, #0
	movs r1, #0x17
	bl sub_80676D4
	mov r2, sb
	lsls r1, r2, #0x10
	asrs r1, r1, #0x10
	adds r0, r5, #0
	movs r2, #0
	bl sub_8068A38
_08066BD4:
	adds r0, r5, #0
	movs r1, #0
	bl sub_8067B94
	movs r0, #0
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8066BEC
sub_8066BEC: @ 0x08066BEC
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r3, r4, #0
	adds r3, #0x2e
	ldrb r1, [r3]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	ldr r1, _08066C2C @ =gUnknown_080D5B00
	adds r2, r0, r1
	ldrh r0, [r4, #0x18]
	subs r0, #1
	strh r0, [r4, #0x18]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bne _08066C3A
	adds r1, r4, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldrb r2, [r2, #8]
	cmp r0, r2
	bne _08066C30
	adds r0, r4, #0
	movs r1, #0x1a
	bl sub_80676D4
	b _08066C76
	.align 2, 0
_08066C2C: .4byte gUnknown_080D5B00
_08066C30:
	adds r0, r4, #0
	movs r1, #0x19
	bl sub_80676D4
	b _08066C76
_08066C3A:
	cmp r0, #9
	bne _08066C76
	adds r2, r4, #0
	adds r2, #0x2f
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r1, [r2]
	adds r0, r0, r1
	movs r1, #1
	strb r1, [r0]
	ldrb r1, [r3]
	ldrb r2, [r2]
	adds r5, r4, #0
	adds r5, #0x30
	ldrb r3, [r5]
	adds r0, r4, #0
	bl sub_807A574
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xa
	bne _08066C70
	movs r0, #0
	strb r0, [r5]
_08066C70:
	adds r0, r4, #0
	bl sub_08068B10
_08066C76:
	adds r0, r4, #0
	movs r1, #1
	bl sub_8067B94
	cmp r0, #0
	beq _08066C8E
	adds r0, r4, #0
	bl sub_8068AAC
	adds r0, r4, #0
	bl sub_8067590
_08066C8E:
	adds r0, r4, #0
	bl sub_8067B20
	movs r0, #0
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_8066C9C
sub_8066C9C: @ 0x08066C9C
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r6, _08066CF0 @ =gUnknown_080D54C0
	ldr r2, _08066CF4 @ =gUnknown_080D56DC
	adds r5, r4, #0
	adds r5, #0x20
	movs r1, #0
	ldrsb r1, [r5, r1]
	movs r0, #4
	subs r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r2
	ldrh r1, [r0]
	ldrh r0, [r4, #0x18]
	subs r0, #1
	strh r0, [r4, #0x18]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _08066D02
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	adds r0, r4, #0
	movs r2, #0
	bl sub_8068A38
	adds r0, r4, #0
	movs r1, #0
	movs r2, #1
	bl sub_8068A38
	ldr r0, [r6]
	str r0, [r4]
	movs r0, #0
	ldrsb r0, [r5, r0]
	cmp r0, #0
	beq _08066CF8
	subs r0, #1
	lsls r0, r0, #1
	adds r1, r6, #4
	adds r0, r0, r1
	ldrh r0, [r0]
	b _08066CFA
	.align 2, 0
_08066CF0: .4byte gUnknown_080D54C0
_08066CF4: .4byte gUnknown_080D56DC
_08066CF8:
	ldrh r0, [r6, #4]
_08066CFA:
	strh r0, [r4, #0x18]
	adds r0, r4, #0
	bl sub_8068AD8
_08066D02:
	movs r0, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8066D0C
sub_8066D0C: @ 0x08066D0C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	adds r7, r0, #0
	movs r0, #0
	mov sb, r0
	movs r1, #0x3c
	adds r1, r1, r7
	mov r8, r1
	ldr r0, [r1, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	ands r0, r1
	cmp r0, #0
	beq _08066D48
	ldr r0, _08066D44 @ =gCamera
	ldr r0, [r0, #0x1c]
	subs r0, #0xc
	lsls r0, r0, #8
	ldr r1, [r7, #8]
	cmp r0, r1
	bge _08066D5A
	movs r0, #1
	mov sb, r0
	b _08066D5A
	.align 2, 0
_08066D44: .4byte gCamera
_08066D48:
	ldr r0, _08066D98 @ =gCamera
	ldr r0, [r0, #0x18]
	adds r0, #0xc
	lsls r0, r0, #8
	ldr r1, [r7, #8]
	cmp r0, r1
	ble _08066D5A
	movs r1, #1
	mov sb, r1
_08066D5A:
	adds r0, r7, #0
	bl sub_8067A64
	movs r6, #0
_08066D62:
	lsls r0, r6, #2
	adds r0, r0, r6
	lsls r0, r0, #2
	adds r0, r0, r6
	lsls r0, r0, #4
	ldr r1, _08066D9C @ =gPlayers
	adds r4, r0, r1
	adds r0, r4, #0
	bl sub_802C080
	cmp r0, #0
	beq _08066DA0
	ldr r1, [r4, #4]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _08066DEA
	ldr r0, [r4, #0x6c]
	cmp r0, r8
	bne _08066DEA
	movs r0, #0x21
	rsbs r0, r0, #0
	ands r1, r0
	str r1, [r4, #4]
	movs r0, #0
	b _08066DE8
	.align 2, 0
_08066D98: .4byte gCamera
_08066D9C: .4byte gPlayers
_08066DA0:
	ldr r1, [r7, #8]
	asrs r1, r1, #8
	ldr r2, [r7, #0xc]
	asrs r2, r2, #8
	str r4, [sp]
	str r0, [sp, #4]
	mov r0, r8
	movs r3, #1
	bl sub_8020700
	adds r5, r0, #0
	cmp r5, #1
	bne _08066DEA
	adds r0, r4, #0
	bl sub_8009850
	mov r1, r8
	ldr r0, [r1, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	ands r0, r1
	cmp r0, #0
	beq _08066DD8
	ldr r0, [r4, #4]
	movs r1, #2
	rsbs r1, r1, #0
	ands r0, r1
	b _08066DDC
_08066DD8:
	ldr r0, [r4, #4]
	orrs r0, r5
_08066DDC:
	str r0, [r4, #4]
	ldr r0, [r4, #4]
	movs r1, #0x20
	orrs r0, r1
	str r0, [r4, #4]
	mov r0, r8
_08066DE8:
	str r0, [r4, #0x6c]
_08066DEA:
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #1
	bls _08066D62
	movs r6, #0
	ldr r3, _08066E2C @ =gPlayers
_08066DF8:
	lsls r0, r6, #2
	adds r0, r0, r6
	lsls r0, r0, #2
	adds r0, r0, r6
	lsls r0, r0, #4
	adds r4, r0, r3
	ldr r0, [r4, #4]
	movs r1, #0x20
	ands r0, r1
	cmp r0, #0
	beq _08066E6C
	ldr r0, [r4, #0x6c]
	cmp r0, r8
	bne _08066E6C
	mov r1, r8
	ldr r0, [r1, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	ands r0, r1
	cmp r0, #0
	beq _08066E30
	ldr r0, [r7, #8]
	movs r1, #0xf0
	lsls r1, r1, #5
	b _08066E34
	.align 2, 0
_08066E2C: .4byte gPlayers
_08066E30:
	ldr r0, [r7, #8]
	ldr r1, _08066E54 @ =0xFFFFE200
_08066E34:
	adds r0, r0, r1
	str r0, [r4, #0x10]
	ldr r0, [r7, #0xc]
	str r0, [r4, #0x14]
	ldr r0, [r4, #0x10]
	asrs r1, r0, #8
	ldr r2, _08066E58 @ =gCamera
	ldr r0, [r2, #0x1c]
	subs r0, #1
	cmp r1, r0
	blt _08066E5C
	lsls r0, r0, #8
	str r0, [r4, #0x10]
	movs r0, #1
	mov sb, r0
	b _08066E6C
	.align 2, 0
_08066E54: .4byte 0xFFFFE200
_08066E58: .4byte gCamera
_08066E5C:
	ldr r0, [r2, #0x18]
	adds r0, #1
	cmp r1, r0
	bgt _08066E6C
	lsls r0, r0, #8
	str r0, [r4, #0x10]
	movs r1, #1
	mov sb, r1
_08066E6C:
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #1
	bls _08066DF8
	mov r0, sb
	cmp r0, #1
	bne _08066ED0
	adds r0, r7, #0
	movs r1, #0x1e
	bl sub_80676D4
	adds r0, r7, #0
	movs r1, #0
	movs r2, #0
	bl sub_8068A38
	adds r0, r7, #0
	bl sub_8068ACC
	movs r6, #0
	movs r5, #0
_08066E98:
	lsls r0, r6, #2
	adds r0, r0, r6
	lsls r0, r0, #2
	adds r0, r0, r6
	lsls r0, r0, #4
	ldr r1, _08066EE0 @ =gPlayers
	adds r4, r0, r1
	ldr r0, [r4, #4]
	movs r1, #0x20
	ands r0, r1
	cmp r0, #0
	beq _08066EC6
	ldr r0, [r4, #0x6c]
	cmp r0, r8
	bne _08066EC6
	adds r0, r4, #0
	adds r0, #0x4a
	strh r5, [r0]
	adds r0, #2
	strh r5, [r0]
	adds r0, r4, #0
	bl sub_80213F0
_08066EC6:
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #1
	bls _08066E98
_08066ED0:
	movs r0, #0
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08066EE0: .4byte gPlayers

	thumb_func_start sub_8066EE4
sub_8066EE4: @ 0x08066EE4
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, _08066F60 @ =gUnknown_080D56F0
	adds r0, #0x20
	movs r1, #0
	ldrsb r1, [r0, r1]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r2, #2
	adds r0, r0, r2
	movs r1, #0
	ldrsh r2, [r0, r1]
	adds r0, r4, #0
	movs r1, #0
	bl sub_8068A6C
	movs r0, #0x16
	ldrsh r1, [r4, r0]
	movs r0, #0x80
	lsls r0, r0, #2
	cmp r1, r0
	ble _08066F3E
	adds r0, r4, #0
	movs r1, #0x22
	bl sub_80676D4
	adds r0, r4, #0
	adds r0, #0x2f
	movs r1, #0
	strb r1, [r0]
	adds r0, #2
	strb r1, [r0]
	subs r0, #1
	strb r1, [r0]
	adds r2, r4, #0
	adds r2, #0x24
	movs r3, #0
_08066F30:
	adds r0, r2, r1
	strb r3, [r0]
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #9
	bls _08066F30
_08066F3E:
	adds r0, r4, #0
	movs r1, #1
	bl sub_8067B94
	cmp r0, #0
	beq _08066F56
	adds r0, r4, #0
	bl sub_8068AAC
	adds r0, r4, #0
	bl sub_8067590
_08066F56:
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08066F60: .4byte gUnknown_080D56F0

	thumb_func_start sub_8066F64
sub_8066F64: @ 0x08066F64
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r5, r0, #0
	adds r6, r5, #0
	adds r6, #0x3c
	ldr r0, _08067044 @ =gUnknown_080D56F0
	mov r8, r0
	adds r7, r5, #0
	adds r7, #0x20
	movs r1, #0
	ldrsb r1, [r7, r1]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	mov r1, r8
	adds r1, #2
	adds r0, r0, r1
	movs r1, #0
	ldrsh r2, [r0, r1]
	rsbs r2, r2, #0
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	adds r0, r5, #0
	movs r1, #0
	bl sub_8068A6C
	movs r2, #0x16
	ldrsh r1, [r5, r2]
	ldr r0, _08067048 @ =0xFFFFFD00
	cmp r1, r0
	bge _0806702E
	ldr r0, [r6, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	mov sb, r1
	ands r0, r1
	movs r4, #0x80
	lsls r4, r4, #2
	cmp r0, #0
	beq _08066FBA
	movs r4, #0
_08066FBA:
	ldr r2, _0806704C @ =gSineTable
	mov ip, r2
	movs r0, #0x80
	lsls r0, r0, #1
	adds r0, r4, r0
	lsls r0, r0, #1
	add r0, ip
	movs r1, #0
	ldrsh r2, [r0, r1]
	movs r1, #0
	ldrsb r1, [r7, r1]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	mov r1, r8
	adds r1, #4
	adds r0, r0, r1
	movs r1, #0
	ldrsh r3, [r0, r1]
	adds r0, r2, #0
	muls r0, r3, r0
	asrs r1, r0, #0xe
	cmp r1, #0
	bge _08066FEC
	rsbs r1, r1, #0
_08066FEC:
	lsls r0, r4, #1
	add r0, ip
	movs r2, #0
	ldrsh r0, [r0, r2]
	adds r4, r0, #0
	muls r4, r3, r4
	lsls r4, r4, #2
	lsrs r4, r4, #0x10
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	adds r0, r5, #0
	movs r2, #0
	bl sub_8068A38
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	adds r0, r5, #0
	adds r1, r4, #0
	movs r2, #1
	bl sub_8068A38
	adds r0, r5, #0
	movs r1, #0x23
	bl sub_80676D4
	ldr r0, [r6, #8]
	mov r1, sb
	ands r0, r1
	cmp r0, #0
	beq _0806702E
	ldrb r0, [r6, #0x1a]
	adds r0, #1
	strb r0, [r6, #0x1a]
_0806702E:
	adds r0, r5, #0
	movs r1, #0
	bl sub_8067B94
	movs r0, #0
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08067044: .4byte gUnknown_080D56F0
_08067048: .4byte 0xFFFFFD00
_0806704C: .4byte gSineTable

	thumb_func_start sub_8067050
sub_8067050: @ 0x08067050
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r4, r0, #0
	adds r5, r4, #0
	adds r5, #0x3c
	adds r7, r4, #0
	adds r7, #0x6c
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #2
	ldr r0, _080670C8 @ =gUnknown_080D5B48
	adds r1, r1, r0
	str r1, [sp]
	movs r0, #0
	mov sl, r0
	mov sb, r0
	adds r0, r4, #0
	movs r1, #0
	bl sub_8068984
	ldr r0, [r5, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	ands r0, r1
	cmp r0, #0
	beq _080670D8
	ldr r2, _080670CC @ =gUnknown_080D56F0
	adds r0, r4, #0
	adds r0, #0x20
	movs r1, #0
	ldrsb r1, [r0, r1]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r2, #8
	adds r0, r0, r2
	ldrh r0, [r0]
	ldrh r1, [r7]
	adds r0, r0, r1
	ldr r2, _080670D0 @ =0x000003FF
	adds r1, r2, #0
	ands r0, r1
	strh r0, [r7]
	ldr r2, _080670D4 @ =gCamera
	ldr r0, [r2, #0x1c]
	subs r0, #0x2e
	lsls r0, r0, #8
	ldr r1, [r4, #8]
	cmp r0, r1
	bge _0806710C
	b _08067108
	.align 2, 0
_080670C8: .4byte gUnknown_080D5B48
_080670CC: .4byte gUnknown_080D56F0
_080670D0: .4byte 0x000003FF
_080670D4: .4byte gCamera
_080670D8:
	ldr r2, _0806714C @ =gUnknown_080D56F0
	adds r0, r4, #0
	adds r0, #0x20
	movs r1, #0
	ldrsb r1, [r0, r1]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r2, #8
	adds r0, r0, r2
	ldrh r1, [r7]
	ldrh r0, [r0]
	subs r1, r1, r0
	ldr r2, _08067150 @ =0x000003FF
	adds r0, r2, #0
	ands r1, r0
	strh r1, [r7]
	ldr r2, _08067154 @ =gCamera
	ldr r0, [r2, #0x18]
	adds r0, #0x2e
	lsls r0, r0, #8
	ldr r1, [r4, #8]
	cmp r0, r1
	ble _0806710C
_08067108:
	movs r3, #1
	mov sl, r3
_0806710C:
	ldr r0, [r4, #8]
	mov r8, r0
	asrs r0, r0, #8
	ldr r6, [r2, #0x18]
	subs r0, r0, r6
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	ldr r0, [r5, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	ands r0, r1
	cmp r0, #0
	beq _0806715C
	lsls r0, r2, #0x10
	ldr r1, _08067158 @ =0xFFD80000
	adds r0, r0, r1
	asrs r0, r0, #0x10
	adds r2, r4, #0
	adds r2, #0x2f
	ldrb r1, [r2]
	movs r3, #0x1c
	muls r1, r3, r1
	adds r5, r2, #0
	cmp r0, r1
	ble _08067184
	movs r0, #1
	mov sb, r0
	adds r0, r6, #0
	adds r0, #0x28
	adds r0, r1, r0
	b _08067180
	.align 2, 0
_0806714C: .4byte gUnknown_080D56F0
_08067150: .4byte 0x000003FF
_08067154: .4byte gCamera
_08067158: .4byte 0xFFD80000
_0806715C:
	lsls r1, r2, #0x10
	asrs r1, r1, #0x10
	adds r2, r4, #0
	adds r2, #0x2f
	ldrb r0, [r2]
	movs r5, #0x1c
	adds r3, r5, #0
	muls r3, r0, r3
	movs r0, #0xc8
	subs r0, r0, r3
	adds r5, r2, #0
	cmp r1, r0
	bge _08067184
	movs r0, #1
	mov sb, r0
	adds r0, r6, #0
	adds r0, #0xc8
	subs r0, r0, r3
_08067180:
	lsls r0, r0, #8
	str r0, [r4, #8]
_08067184:
	mov r1, sb
	cmp r1, #0
	beq _080671EA
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r2, [r5]
	adds r0, r0, r2
	movs r6, #1
	strb r6, [r0]
	adds r3, r4, #0
	adds r3, #0x30
	ldrb r0, [r3]
	adds r1, r6, #0
	ands r1, r0
	adds r1, #6
	ldrb r2, [r5]
	ldrb r3, [r3]
	adds r0, r4, #0
	bl sub_807A574
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	mov r3, r8
	str r3, [r4, #8]
	ldrb r0, [r5]
	ldr r5, [sp]
	ldrb r5, [r5, #8]
	cmp r0, r5
	bne _080671EA
	mov r0, sl
	cmp r0, #0
	beq _080671EA
	ldrh r0, [r4, #0x14]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x11
	strh r0, [r4, #0x14]
	adds r0, r4, #0
	adds r0, #0x31
	strb r6, [r0]
	movs r0, #0
	strh r0, [r7]
	adds r0, r4, #0
	movs r1, #0x24
	bl sub_80676D4
	adds r0, r4, #0
	movs r1, #0
	movs r2, #1
	bl sub_8068A38
_080671EA:
	adds r0, r4, #0
	movs r1, #0
	bl sub_8067B94
	movs r0, #0
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_8067204
sub_8067204: @ 0x08067204
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #2
	ldr r0, _08067240 @ =gUnknown_080D5B48
	adds r5, r1, r0
	ldr r0, _08067244 @ =gUnknown_080D56F0
	ldrh r0, [r0, #0x2a]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x14
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	movs r6, #1
	adds r0, r4, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #7
	beq _08067248
	lsls r2, r2, #0x10
	asrs r2, r2, #0x13
	adds r0, r4, #0
	movs r1, #0
	bl sub_8068A6C
	b _08067254
	.align 2, 0
_08067240: .4byte gUnknown_080D5B48
_08067244: .4byte gUnknown_080D56F0
_08067248:
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	adds r0, r4, #0
	movs r1, #0
	bl sub_8068A6C
_08067254:
	ldrh r0, [r4, #0x14]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x11
	strh r0, [r4, #0x14]
	movs r2, #0
	ldrb r0, [r5, #8]
	cmp r2, r0
	bhs _08067286
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r1, [r0]
	adds r3, r0, #0
	cmp r1, #0
	bne _080672D8
_08067270:
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	ldrb r0, [r5, #8]
	cmp r2, r0
	bhs _08067286
	adds r0, r3, r2
	ldrb r0, [r0]
	cmp r0, #0
	beq _08067270
	movs r6, #0
_08067286:
	cmp r6, #0
	beq _080672D8
	adds r2, r4, #0
	adds r2, #0x30
	ldrb r0, [r2]
	cmp r0, #1
	bne _0806729E
	adds r0, r4, #0
	movs r1, #0x25
	bl sub_80676D4
	b _080672D8
_0806729E:
	movs r1, #0
	movs r0, #1
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x2f
	strb r1, [r0]
	adds r0, #2
	strb r1, [r0]
	movs r2, #0
	adds r1, r4, #0
	adds r1, #0x24
	movs r3, #0
_080672B6:
	adds r0, r1, r2
	strb r3, [r0]
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #9
	bls _080672B6
	movs r1, #0x94
	lsls r1, r1, #2
	adds r0, r4, #0
	movs r2, #1
	bl sub_8068A38
	adds r0, r4, #0
	movs r1, #0x22
	bl sub_80676D4
_080672D8:
	movs r0, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_80672E0
sub_80672E0: @ 0x080672E0
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r2, _0806736C @ =gUnknown_080D56F0
	adds r0, #0x20
	movs r1, #0
	ldrsb r1, [r0, r1]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r1, [r0]
	ldrh r0, [r4, #0x18]
	subs r0, #1
	movs r2, #0
	strh r0, [r4, #0x18]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0806734A
	adds r0, r4, #0
	adds r0, #0x2f
	strb r2, [r0]
	adds r0, #2
	strb r2, [r0]
	subs r0, #1
	strb r2, [r0]
	movs r2, #0
	lsls r5, r1, #0x10
	adds r3, r4, #0
	adds r3, #0x24
	movs r1, #0
_0806731C:
	adds r0, r3, r2
	strb r1, [r0]
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #9
	bls _0806731C
	ldr r0, [r4, #0xc]
	ldr r1, _08067370 @ =0xFFFFF800
	adds r0, r0, r1
	str r0, [r4, #0xc]
	asrs r1, r5, #0x10
	adds r0, r4, #0
	movs r2, #1
	bl sub_8068A38
	adds r0, r4, #0
	movs r1, #0x28
	bl sub_80676D4
	ldr r0, _08067374 @ =0x00000219
	bl m4aSongNumStart
_0806734A:
	adds r0, r4, #0
	movs r1, #1
	bl sub_8067B94
	cmp r0, #0
	beq _08067362
	adds r0, r4, #0
	bl sub_8068AAC
	adds r0, r4, #0
	bl sub_8067590
_08067362:
	movs r0, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_0806736C: .4byte gUnknown_080D56F0
_08067370: .4byte 0xFFFFF800
_08067374: .4byte 0x00000219

	thumb_func_start sub_8067378
sub_8067378: @ 0x08067378
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, _080673F4 @ =gUnknown_080D56F0
	adds r0, #0x20
	movs r1, #0
	ldrsb r1, [r0, r1]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r2, #2
	adds r0, r0, r2
	movs r1, #0
	ldrsh r2, [r0, r1]
	adds r0, r4, #0
	movs r1, #0
	bl sub_8068A6C
	movs r0, #0x16
	ldrsh r1, [r4, r0]
	movs r0, #0x80
	lsls r0, r0, #2
	cmp r1, r0
	ble _080673D2
	adds r0, r4, #0
	movs r1, #0x29
	bl sub_80676D4
	adds r0, r4, #0
	adds r0, #0x2f
	movs r1, #0
	strb r1, [r0]
	adds r0, #2
	strb r1, [r0]
	subs r0, #1
	strb r1, [r0]
	adds r2, r4, #0
	adds r2, #0x24
	movs r3, #0
_080673C4:
	adds r0, r2, r1
	strb r3, [r0]
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #9
	bls _080673C4
_080673D2:
	adds r0, r4, #0
	movs r1, #1
	bl sub_8067B94
	cmp r0, #0
	beq _080673EA
	adds r0, r4, #0
	bl sub_8068AAC
	adds r0, r4, #0
	bl sub_8067590
_080673EA:
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080673F4: .4byte gUnknown_080D56F0

	thumb_func_start sub_80673F8
sub_80673F8: @ 0x080673F8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	ldr r0, _08067438 @ =gUnknown_080D5B60
	mov r8, r0
	adds r7, r5, #0
	adds r7, #0x6c
	ldr r0, [r5, #0x44]
	movs r1, #0x80
	lsls r1, r1, #3
	ands r0, r1
	cmp r0, #0
	beq _08067444
	ldr r2, _0806743C @ =gUnknown_080D56F0
	adds r0, r5, #0
	adds r0, #0x20
	movs r1, #0
	ldrsb r1, [r0, r1]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r2, #8
	adds r0, r0, r2
	ldrh r0, [r0]
	ldrh r1, [r7]
	adds r0, r0, r1
	ldr r2, _08067440 @ =0x000003FF
	adds r1, r2, #0
	ands r0, r1
	strh r0, [r7]
	b _08067466
	.align 2, 0
_08067438: .4byte gUnknown_080D5B60
_0806743C: .4byte gUnknown_080D56F0
_08067440: .4byte 0x000003FF
_08067444:
	ldr r2, _080674B0 @ =gUnknown_080D56F0
	adds r0, r5, #0
	adds r0, #0x20
	movs r1, #0
	ldrsb r1, [r0, r1]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r2, #8
	adds r0, r0, r2
	ldrh r1, [r7]
	ldrh r0, [r0]
	subs r1, r1, r0
	ldr r2, _080674B4 @ =0x000003FF
	adds r0, r2, #0
	ands r1, r0
	strh r1, [r7]
_08067466:
	movs r1, #0x18
	ldrsh r0, [r5, r1]
	cmp r0, #0x5a
	bne _080674B8
	movs r6, #0
	mov r2, r8
	ldrb r2, [r2, #8]
	cmp r6, r2
	bhs _080674C4
	adds r4, r5, #0
	adds r4, #0x2f
_0806747C:
	adds r0, r5, #0
	adds r0, #0x24
	ldrb r1, [r4]
	adds r0, r0, r1
	movs r1, #1
	strb r1, [r0]
	ldrb r2, [r4]
	adds r0, r5, #0
	adds r0, #0x30
	ldrb r3, [r0]
	adds r0, r5, #0
	movs r1, #8
	bl sub_807A574
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	mov r2, r8
	ldrb r2, [r2, #8]
	cmp r6, r2
	blo _0806747C
	b _080674C4
	.align 2, 0
_080674B0: .4byte gUnknown_080D56F0
_080674B4: .4byte 0x000003FF
_080674B8:
	cmp r0, #0x1e
	bne _080674C4
	adds r1, r5, #0
	adds r1, #0x31
	movs r0, #1
	strb r0, [r1]
_080674C4:
	adds r0, r5, #0
	movs r1, #0x2d
	bl sub_80689DC
	cmp r0, #0
	beq _080674DE
	movs r0, #0
	strh r0, [r7]
	ldr r0, [r5, #0xc]
	movs r1, #0x80
	lsls r1, r1, #4
	adds r0, r0, r1
	str r0, [r5, #0xc]
_080674DE:
	movs r0, #0
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80674EC
sub_80674EC: @ 0x080674EC
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	ldr r2, _08067588 @ =gUnknown_080D56F0
	adds r0, #0x20
	movs r1, #0
	ldrsb r1, [r0, r1]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r2, #2
	adds r0, r0, r2
	movs r1, #0
	ldrsh r0, [r0, r1]
	rsbs r0, r0, #0
	lsls r0, r0, #0xe
	lsrs r7, r0, #0x10
	ldr r5, _0806758C @ =gUnknown_080D5B60
	movs r6, #1
	movs r2, #0
	ldrb r0, [r5, #8]
	cmp r2, r0
	bhs _0806753A
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r1, [r0]
	adds r3, r0, #0
	cmp r1, #0
	bne _08067538
_08067524:
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	ldrb r1, [r5, #8]
	cmp r2, r1
	bhs _0806753A
	adds r0, r3, r2
	ldrb r0, [r0]
	cmp r0, #0
	beq _08067524
_08067538:
	movs r6, #0
_0806753A:
	lsls r1, r7, #0x10
	asrs r1, r1, #0x10
	adds r0, r4, #0
	bl sub_8068984
	cmp r0, #1
	bne _08067568
	cmp r6, #0
	beq _08067568
	adds r0, r4, #0
	movs r1, #0x30
	bl sub_80676D4
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0
	bl sub_8068A38
	adds r0, r4, #0
	movs r1, #0
	movs r2, #1
	bl sub_8068A38
_08067568:
	adds r0, r4, #0
	movs r1, #1
	bl sub_8067B94
	cmp r0, #0
	beq _08067580
	adds r0, r4, #0
	bl sub_8068AAC
	adds r0, r4, #0
	bl sub_8067590
_08067580:
	movs r0, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08067588: .4byte gUnknown_080D56F0
_0806758C: .4byte gUnknown_080D5B60

	thumb_func_start sub_8067590
sub_8067590: @ 0x08067590
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r7, r5, #0
	adds r7, #0x3c
	adds r3, r5, #0
	adds r3, #0x21
	movs r0, #0
	ldrsb r0, [r3, r0]
	cmp r0, #0
	beq _080675AA
	b _080676C8
_080675AA:
	adds r0, r5, #0
	adds r0, #0x20
	ldrb r2, [r0]
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r6, r0, #0
	cmp r1, #0
	bne _080675BC
	b _080676C8
_080675BC:
	subs r0, r2, #1
	strb r0, [r6]
	adds r1, r5, #0
	adds r1, #0x22
	movs r0, #2
	strb r0, [r1]
	movs r0, #0x78
	strb r0, [r3]
	ldr r0, _08067608 @ =0x00000222
	bl m4aSongNumStart
	movs r0, #0xa3
	lsls r0, r0, #3
	movs r1, #0
	movs r2, #0x78
	movs r3, #0
	bl sub_8078DB0
	movs r0, #0
	ldrsb r0, [r6, r0]
	cmp r0, #0
	beq _08067620
	ldr r1, _0806760C @ =gStageData
	ldrb r0, [r1, #3]
	cmp r0, #5
	bne _080676C8
	ldrb r0, [r1, #6]
	cmp r0, #0
	bne _08067610
	movs r1, #0
	ldrsb r1, [r6, r1]
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	movs r0, #0x83
	bl sub_8027674
	b _080676C8
	.align 2, 0
_08067608: .4byte 0x00000222
_0806760C: .4byte gStageData
_08067610:
	movs r1, #0
	ldrsb r1, [r6, r1]
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	movs r0, #0x84
	bl sub_8027674
	b _080676C8
_08067620:
	movs r4, #0
	movs r0, #0x6c
	adds r0, r0, r5
	mov r8, r0
_08067628:
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #2
	adds r0, r0, r4
	lsls r0, r0, #4
	ldr r1, _08067688 @ =gPlayers
	adds r2, r0, r1
	ldr r0, [r2, #0x6c]
	cmp r0, r7
	bne _08067650
	ldr r1, [r2, #4]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r1, r0
	cmp r1, #0
	bne _08067650
	str r1, [r2, #0x6c]
	adds r0, r2, #0
	bl Player_8005380
_08067650:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #1
	bls _08067628
	movs r2, #0
	movs r0, #0x10
	strb r0, [r7, #0x1c]
	mov r0, r8
	strh r2, [r0]
	ldr r1, _0806768C @ =gStageData
	ldrb r0, [r1, #3]
	cmp r0, #5
	bne _080676A8
	strh r2, [r5, #0x1a]
	ldr r0, [r5, #0x10]
	str r0, [r5, #0xc]
	ldrb r0, [r1, #6]
	cmp r0, #0
	bne _08067690
	ldr r1, [r5, #8]
	lsls r1, r1, #8
	lsrs r1, r1, #0x10
	movs r0, #0x81
	bl sub_8027674
	b _080676B6
	.align 2, 0
_08067688: .4byte gPlayers
_0806768C: .4byte gStageData
_08067690:
	movs r1, #0
	ldrsb r1, [r6, r1]
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	movs r0, #0x84
	bl sub_8027674
	adds r0, r5, #0
	movs r1, #0x36
	bl sub_80676D4
	b _080676C8
_080676A8:
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r5, #0
	bl sub_8068984
	cmp r0, #1
	bne _080676C0
_080676B6:
	adds r0, r5, #0
	movs r1, #0x33
	bl sub_80676D4
	b _080676C8
_080676C0:
	adds r0, r5, #0
	movs r1, #0x35
	bl sub_80676D4
_080676C8:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80676D4
sub_80676D4: @ 0x080676D4
	push {r4, lr}
	adds r4, r0, #0
	adds r3, r4, #0
	adds r3, #0x3c
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	ldr r1, _08067704 @ =gUnknown_080D527C
	adds r2, r0, r1
	ldr r0, [r2]
	str r0, [r4]
	adds r1, r4, #0
	adds r1, #0x20
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	beq _08067708
	subs r0, #1
	lsls r0, r0, #1
	adds r1, r2, #4
	adds r1, r1, r0
	ldrh r0, [r1]
	b _0806770A
	.align 2, 0
_08067704: .4byte gUnknown_080D527C
_08067708:
	ldrh r0, [r2, #4]
_0806770A:
	strh r0, [r4, #0x18]
	ldrh r0, [r2, #0xe]
	strh r0, [r3, #0xc]
	ldrb r0, [r2, #0x10]
	strb r0, [r3, #0x1a]
	ldr r0, _08067738 @ =0x0000FFFF
	strh r0, [r3, #0x18]
	movs r0, #0xff
	strb r0, [r3, #0x1b]
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r3, #0x20]
	str r0, [r3, #0x28]
	ldrb r0, [r2, #0xc]
	cmp r0, #0
	beq _08067730
	adds r0, r4, #0
	bl sub_8068A00
_08067730:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08067738: .4byte 0x0000FFFF

	thumb_func_start sub_806773C
sub_806773C: @ 0x0806773C
	push {lr}
	adds r3, r0, #0
	ldr r0, _08067754 @ =gStageData
	ldrb r0, [r0, #9]
	cmp r0, #7
	bhi _08067828
	lsls r0, r0, #2
	ldr r1, _08067758 @ =_0806775C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08067754: .4byte gStageData
_08067758: .4byte _0806775C
_0806775C: @ jump table
	.4byte _0806777C @ case 0
	.4byte _08067780 @ case 1
	.4byte _08067828 @ case 2
	.4byte _080677A8 @ case 3
	.4byte _08067828 @ case 4
	.4byte _080677D0 @ case 5
	.4byte _08067828 @ case 6
	.4byte _080677F8 @ case 7
_0806777C:
	movs r1, #0x31
	b _0806782A
_08067780:
	ldr r2, _08067798 @ =gPseudoRandom
	ldr r1, [r2]
	ldr r0, _0806779C @ =0x00196225
	muls r0, r1, r0
	ldr r1, _080677A0 @ =0x3C6EF35F
	adds r0, r0, r1
	str r0, [r2]
	lsrs r0, r0, #0x10
	movs r1, #1
	ldr r2, _080677A4 @ =gUnknown_080D5724
	b _0806780C
	.align 2, 0
_08067798: .4byte gPseudoRandom
_0806779C: .4byte 0x00196225
_080677A0: .4byte 0x3C6EF35F
_080677A4: .4byte gUnknown_080D5724
_080677A8:
	ldr r2, _080677C0 @ =gPseudoRandom
	ldr r1, [r2]
	ldr r0, _080677C4 @ =0x00196225
	muls r0, r1, r0
	ldr r1, _080677C8 @ =0x3C6EF35F
	adds r0, r0, r1
	str r0, [r2]
	lsrs r0, r0, #0x10
	movs r1, #3
	ldr r2, _080677CC @ =gUnknown_080D572C
	b _0806780C
	.align 2, 0
_080677C0: .4byte gPseudoRandom
_080677C4: .4byte 0x00196225
_080677C8: .4byte 0x3C6EF35F
_080677CC: .4byte gUnknown_080D572C
_080677D0:
	ldr r2, _080677E8 @ =gPseudoRandom
	ldr r1, [r2]
	ldr r0, _080677EC @ =0x00196225
	muls r0, r1, r0
	ldr r1, _080677F0 @ =0x3C6EF35F
	adds r0, r0, r1
	str r0, [r2]
	lsrs r0, r0, #0x10
	movs r1, #3
	ldr r2, _080677F4 @ =gUnknown_080D573C
	b _0806780C
	.align 2, 0
_080677E8: .4byte gPseudoRandom
_080677EC: .4byte 0x00196225
_080677F0: .4byte 0x3C6EF35F
_080677F4: .4byte gUnknown_080D573C
_080677F8:
	ldr r2, _08067818 @ =gPseudoRandom
	ldr r1, [r2]
	ldr r0, _0806781C @ =0x00196225
	muls r0, r1, r0
	ldr r1, _08067820 @ =0x3C6EF35F
	adds r0, r0, r1
	str r0, [r2]
	lsrs r0, r0, #0x10
	movs r1, #3
	ldr r2, _08067824 @ =gUnknown_080D574C
_0806780C:
	ands r0, r1
	lsls r0, r0, #2
	adds r0, r0, r2
	ldr r1, [r0]
	b _0806782A
	.align 2, 0
_08067818: .4byte gPseudoRandom
_0806781C: .4byte 0x00196225
_08067820: .4byte 0x3C6EF35F
_08067824: .4byte gUnknown_080D574C
_08067828:
	movs r1, #1
_0806782A:
	ldrh r0, [r3, #0x18]
	subs r0, #1
	strh r0, [r3, #0x18]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0806783C
	adds r0, r3, #0
	bl sub_80676D4
_0806783C:
	pop {r0}
	bx r0

	thumb_func_start sub_8067840
sub_8067840: @ 0x08067840
	push {r4, r5, lr}
	sub sp, #8
	adds r4, r0, #0
	movs r1, #0x14
	ldrsh r0, [r4, r1]
	ldr r1, [r4, #8]
	adds r1, r1, r0
	str r1, [r4, #8]
	movs r0, #0x16
	ldrsh r2, [r4, r0]
	ldr r0, [r4, #0xc]
	adds r0, r0, r2
	str r0, [r4, #0xc]
	movs r5, #0
	movs r2, #0xb0
	lsls r2, r2, #4
	adds r0, r0, r2
	asrs r0, r0, #8
	asrs r1, r1, #8
	str r5, [sp]
	ldr r2, _080678B0 @ =sub_805217C
	str r2, [sp, #4]
	movs r2, #1
	movs r3, #8
	bl sub_80517FC
	cmp r0, #0
	bgt _0806788A
	adds r0, #1
	lsls r0, r0, #8
	ldr r1, [r4, #0xc]
	adds r1, r1, r0
	ldr r0, _080678B4 @ =0xFFFFFF00
	ands r1, r0
	subs r1, #1
	str r1, [r4, #0xc]
	strh r5, [r4, #0x16]
_0806788A:
	ldr r1, [r4]
	ldr r0, _080678B8 @ =sub_8066890
	cmp r1, r0
	beq _080678A8
	ldr r2, _080678BC @ =gCamera
	ldr r0, [r2, #0x18]
	lsls r0, r0, #8
	ldr r1, [r4, #8]
	cmp r1, r0
	blt _080678A6
	ldr r0, [r2, #0x1c]
	lsls r0, r0, #8
	cmp r1, r0
	ble _080678A8
_080678A6:
	str r0, [r4, #8]
_080678A8:
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080678B0: .4byte sub_805217C
_080678B4: .4byte 0xFFFFFF00
_080678B8: .4byte sub_8066890
_080678BC: .4byte gCamera

	thumb_func_start sub_80678C0
sub_80678C0: @ 0x080678C0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	movs r0, #0x40
	bl VramMalloc
	str r0, [r4]
	movs r0, #0
	mov sb, r0
	movs r0, #0
	mov r8, r0
	ldr r0, _08067990 @ =0x00000506
	strh r0, [r4, #0xc]
	mov r0, sb
	strb r0, [r4, #0x1a]
	movs r0, #0x98
	lsls r0, r0, #3
	mov sl, r0
	mov r0, sl
	strh r0, [r4, #0x14]
	mov r0, r8
	strh r0, [r4, #0xe]
	strh r0, [r4, #0x16]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	movs r0, #0x10
	strb r0, [r4, #0x1c]
	mov r0, sb
	strb r0, [r4, #0x1f]
	movs r7, #1
	rsbs r7, r7, #0
	str r7, [r4, #0x20]
	movs r0, #0x80
	lsls r0, r0, #5
	str r0, [r4, #8]
	movs r0, #0xf
	bl VramMalloc
	str r0, [r5]
	ldr r0, _08067994 @ =0x0000050C
	strh r0, [r5, #0xc]
	mov r0, sb
	strb r0, [r5, #0x1a]
	mov r0, sl
	strh r0, [r5, #0x14]
	mov r0, r8
	strh r0, [r5, #0xe]
	strh r0, [r5, #0x16]
	adds r0, r7, #0
	strb r0, [r5, #0x1b]
	movs r0, #0x10
	strb r0, [r5, #0x1c]
	mov r0, sb
	strb r0, [r5, #0x1f]
	str r7, [r5, #0x20]
	movs r0, #0x80
	lsls r0, r0, #5
	str r0, [r5, #8]
	movs r0, #0x24
	bl VramMalloc
	str r0, [r6]
	ldr r0, _08067998 @ =0x0000050E
	strh r0, [r6, #0xc]
	mov r0, sb
	strb r0, [r6, #0x1a]
	movs r0, #0x90
	lsls r0, r0, #3
	strh r0, [r6, #0x14]
	mov r0, r8
	strh r0, [r6, #0xe]
	strh r0, [r6, #0x16]
	adds r0, r7, #0
	strb r0, [r6, #0x1b]
	movs r0, #0x10
	strb r0, [r6, #0x1c]
	mov r0, sb
	strb r0, [r6, #0x1f]
	str r7, [r6, #0x20]
	movs r0, #0x80
	lsls r0, r0, #5
	str r0, [r6, #8]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r5, #0
	bl UpdateSpriteAnimation
	adds r0, r6, #0
	bl UpdateSpriteAnimation
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08067990: .4byte 0x00000506
_08067994: .4byte 0x0000050C
_08067998: .4byte 0x0000050E

	thumb_func_start sub_806799C
sub_806799C: @ 0x0806799C
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r5, r4, #0
	adds r5, #0x3c
	adds r6, r4, #0
	adds r6, #0x6c
	movs r7, #0
	adds r0, #0x33
	ldrb r0, [r0]
	cmp r0, #0
	bne _080679B6
	movs r0, #0
	b _08067A5E
_080679B6:
	ldr r0, [r4, #8]
	asrs r0, r0, #8
	ldr r2, _08067A44 @ =gCamera
	ldr r1, [r2]
	subs r0, r0, r1
	strh r0, [r5, #0x10]
	ldr r0, [r4, #0xc]
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	strh r0, [r5, #0x12]
	adds r1, r4, #0
	adds r1, #0x21
	ldrb r2, [r1]
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	beq _080679DE
	subs r0, r2, #1
	strb r0, [r1]
_080679DE:
	ldrb r0, [r5, #0x1b]
	cmp r0, #0xff
	beq _08067A00
	adds r0, r4, #0
	adds r0, #0x22
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _08067A00
	adds r0, r4, #0
	adds r0, #0x20
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bgt _08067A08
_08067A00:
	adds r0, r5, #0
	bl UpdateSpriteAnimation
	adds r7, r0, #0
_08067A08:
	ldrh r0, [r6]
	cmp r0, #0
	beq _08067A4C
	adds r0, r4, #0
	adds r0, #0x20
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	ble _08067A4C
	ldr r2, _08067A48 @ =gUnknown_03002C24
	ldrb r1, [r2]
	adds r0, r1, #1
	strb r0, [r2]
	movs r0, #0x60
	orrs r1, r0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	ldr r0, [r5, #8]
	orrs r0, r1
	str r0, [r5, #8]
	ldrh r0, [r5, #0x10]
	strh r0, [r6, #6]
	ldrh r0, [r5, #0x12]
	strh r0, [r6, #8]
	adds r0, r5, #0
	adds r1, r6, #0
	bl TransformSprite
	b _08067A56
	.align 2, 0
_08067A44: .4byte gCamera
_08067A48: .4byte gUnknown_03002C24
_08067A4C:
	ldr r0, [r5, #8]
	movs r1, #0x80
	rsbs r1, r1, #0
	ands r0, r1
	str r0, [r5, #8]
_08067A56:
	adds r0, r5, #0
	bl DisplaySprite
	adds r0, r7, #0
_08067A5E:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_8067A64
sub_8067A64: @ 0x08067A64
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x78
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	cmp r0, #0
	beq _08067AC0
	ldr r0, [r5, #8]
	asrs r0, r0, #8
	ldr r2, _08067A9C @ =gCamera
	ldr r1, [r2]
	subs r3, r0, r1
	strh r3, [r4, #0x10]
	ldr r0, [r5, #0x44]
	movs r1, #0x80
	lsls r1, r1, #3
	ands r0, r1
	cmp r0, #0
	beq _08067AA0
	ldr r0, [r4, #8]
	orrs r0, r1
	str r0, [r4, #8]
	adds r0, r3, #0
	subs r0, #0x10
	b _08067AAC
	.align 2, 0
_08067A9C: .4byte gCamera
_08067AA0:
	ldr r0, [r4, #8]
	ldr r1, _08067AC8 @ =0xFFFFFBFF
	ands r0, r1
	str r0, [r4, #8]
	adds r0, r3, #0
	adds r0, #0x10
_08067AAC:
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0xc]
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	subs r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl DisplaySprite
_08067AC0:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08067AC8: .4byte 0xFFFFFBFF

	thumb_func_start sub_8067ACC
sub_8067ACC: @ 0x08067ACC
	push {r4, lr}
	adds r3, r0, #0
	adds r4, r3, #0
	adds r4, #0xa0
	movs r0, #0x32
	adds r0, r0, r3
	mov ip, r0
	ldrb r2, [r0]
	cmp r2, #0
	beq _08067B12
	ldrh r1, [r4, #0xc]
	ldr r0, _08067B18 @ =0x0000050E
	cmp r1, r0
	bne _08067B12
	subs r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldr r0, [r3, #8]
	asrs r0, r0, #8
	ldr r2, _08067B1C @ =gCamera
	ldr r1, [r2]
	subs r0, r0, r1
	strh r0, [r4, #0x10]
	ldr r0, [r3, #0xc]
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	adds r0, #0xc
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
_08067B12:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08067B18: .4byte 0x0000050E
_08067B1C: .4byte gCamera

	thumb_func_start sub_8067B20
sub_8067B20: @ 0x08067B20
	push {r4, lr}
	adds r3, r0, #0
	adds r4, r3, #0
	adds r4, #0xa0
	movs r0, #0x32
	adds r0, r0, r3
	mov ip, r0
	ldrb r2, [r0]
	cmp r2, #0
	beq _08067B8A
	ldrh r1, [r4, #0xc]
	ldr r0, _08067B5C @ =0x00000514
	cmp r1, r0
	bne _08067B8A
	subs r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldr r0, [r3, #0x44]
	movs r1, #0x80
	lsls r1, r1, #3
	ands r0, r1
	cmp r0, #0
	beq _08067B64
	ldr r0, [r3, #8]
	asrs r0, r0, #8
	ldr r2, _08067B60 @ =gCamera
	ldr r1, [r2]
	subs r0, r0, r1
	subs r0, #4
	b _08067B70
	.align 2, 0
_08067B5C: .4byte 0x00000514
_08067B60: .4byte gCamera
_08067B64:
	ldr r0, [r3, #8]
	asrs r0, r0, #8
	ldr r2, _08067B90 @ =gCamera
	ldr r1, [r2]
	subs r0, r0, r1
	adds r0, #4
_08067B70:
	strh r0, [r4, #0x10]
	ldr r0, [r3, #0xc]
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	subs r0, #0x10
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
_08067B8A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08067B90: .4byte gCamera

	thumb_func_start sub_8067B94
sub_8067B94: @ 0x08067B94
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r5, r0, #0
	mov sl, r1
	movs r0, #0
	mov sb, r0
	movs r0, #1
	mov r8, r0
	adds r7, r5, #0
	adds r7, #0x3c
	adds r0, r5, #0
	adds r0, #0x21
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _08067C10
	cmp r0, #0x3b
	ble _08067BC4
	b _08067D0E
_08067BC4:
	movs r6, #0
_08067BC6:
	lsls r0, r6, #2
	adds r0, r0, r6
	lsls r0, r0, #2
	adds r0, r0, r6
	lsls r0, r0, #4
	ldr r1, _08067C0C @ =gPlayers
	adds r4, r0, r1
	adds r0, r4, #0
	bl sub_802C080
	cmp r0, #0
	bne _08067C00
	ldr r1, [r7, #0x28]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	beq _08067C00
	mov r0, r8
	cmp r0, #0
	beq _08067C00
	ldr r1, [r5, #8]
	asrs r1, r1, #8
	ldr r2, [r5, #0xc]
	asrs r2, r2, #8
	str r4, [sp]
	adds r0, r7, #0
	movs r3, #1
	bl sub_8020CE0
_08067C00:
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #1
	bls _08067BC6
	b _08067D0E
	.align 2, 0
_08067C0C: .4byte gPlayers
_08067C10:
	ldr r0, [r5, #8]
	ldr r1, [r5, #0xc]
	bl sub_8004D68
	ldr r2, _08067CC0 @ =gPlayers
	ldr r0, _08067CC4 @ =gStageData
	ldrb r1, [r0, #6]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r1, r0, r2
	adds r0, r1, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	cmp r0, #1
	beq _08067C5A
	adds r0, r1, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	lsls r1, r1, #0x1e
	lsrs r1, r1, #0x1e
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r2
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	cmp r0, #1
	bne _08067C68
_08067C5A:
	adds r0, r7, #0
	bl sub_807A1DC
	cmp r0, #1
	bne _08067C68
	movs r0, #1
	mov sb, r0
_08067C68:
	movs r6, #0
_08067C6A:
	lsls r0, r6, #2
	adds r0, r0, r6
	lsls r0, r0, #2
	adds r0, r0, r6
	lsls r0, r0, #4
	ldr r1, _08067CC0 @ =gPlayers
	adds r4, r0, r1
	adds r0, r4, #0
	bl sub_802C080
	cmp r0, #0
	bne _08067D04
	ldr r1, [r7, #0x20]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	beq _08067CE2
	mov r0, r8
	cmp r0, #0
	beq _08067CE2
	ldr r1, [r5, #8]
	asrs r1, r1, #8
	ldr r2, [r5, #0xc]
	asrs r2, r2, #8
	str r4, [sp]
	adds r0, r7, #0
	movs r3, #0
	bl sub_8020E3C
	cmp r0, #1
	bne _08067CC8
	mov r0, sl
	cmp r0, #0
	beq _08067CC8
	movs r0, #1
	mov sb, r0
	movs r0, #0
	mov r8, r0
	adds r0, r4, #0
	bl sub_80044CC
	b _08067CE2
	.align 2, 0
_08067CC0: .4byte gPlayers
_08067CC4: .4byte gStageData
_08067CC8:
	ldr r1, [r5, #8]
	asrs r1, r1, #8
	ldr r2, [r5, #0xc]
	asrs r2, r2, #8
	str r4, [sp]
	adds r0, r7, #0
	movs r3, #0
	bl sub_8020CE0
	cmp r0, #0
	beq _08067CE2
	movs r0, #0
	mov r8, r0
_08067CE2:
	ldr r1, [r7, #0x28]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	beq _08067D04
	mov r0, r8
	cmp r0, #0
	beq _08067D04
	ldr r1, [r5, #8]
	asrs r1, r1, #8
	ldr r2, [r5, #0xc]
	asrs r2, r2, #8
	str r4, [sp]
	adds r0, r7, #0
	movs r3, #1
	bl sub_8020CE0
_08067D04:
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #1
	bls _08067C6A
_08067D0E:
	mov r0, sb
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_8067D20
sub_8067D20: @ 0x08067D20
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r5, r0, #0
	mov sl, r1
	movs r0, #0
	mov sb, r0
	movs r0, #1
	mov r8, r0
	adds r7, r5, #0
	adds r7, #0x3c
	adds r0, r5, #0
	adds r0, #0x21
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _08067D98
	movs r6, #0
_08067D4C:
	lsls r0, r6, #2
	adds r0, r0, r6
	lsls r0, r0, #2
	adds r0, r0, r6
	lsls r0, r0, #4
	ldr r1, _08067D94 @ =gPlayers
	adds r4, r0, r1
	adds r0, r4, #0
	bl sub_802C080
	cmp r0, #0
	bne _08067D86
	ldr r1, [r7, #0x28]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	beq _08067D86
	mov r0, r8
	cmp r0, #0
	beq _08067D86
	ldr r1, [r5, #8]
	asrs r1, r1, #8
	ldr r2, [r5, #0xc]
	asrs r2, r2, #8
	str r4, [sp]
	adds r0, r7, #0
	movs r3, #1
	bl sub_8020CE0
_08067D86:
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #1
	bls _08067D4C
	b _08067E8C
	.align 2, 0
_08067D94: .4byte gPlayers
_08067D98:
	ldr r0, [r5, #8]
	ldr r1, [r5, #0xc]
	bl sub_8004D68
	ldr r2, _08067E68 @ =gPlayers
	ldr r0, _08067E6C @ =gStageData
	ldrb r1, [r0, #6]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r1, r0, r2
	adds r0, r1, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	cmp r0, #1
	beq _08067DE2
	adds r0, r1, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	lsls r1, r1, #0x1e
	lsrs r1, r1, #0x1e
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r2
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	cmp r0, #1
	bne _08067DF0
_08067DE2:
	adds r0, r7, #0
	bl sub_807A1DC
	cmp r0, #1
	bne _08067DF0
	movs r0, #1
	mov sb, r0
_08067DF0:
	movs r6, #0
_08067DF2:
	lsls r0, r6, #2
	adds r0, r0, r6
	lsls r0, r0, #2
	adds r0, r0, r6
	lsls r0, r0, #4
	ldr r1, _08067E68 @ =gPlayers
	adds r4, r0, r1
	adds r0, r4, #0
	bl sub_802C080
	cmp r0, #0
	bne _08067E82
	ldr r1, [r7, #0x28]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	beq _08067E2E
	ldr r1, [r5, #8]
	asrs r1, r1, #8
	ldr r2, [r5, #0xc]
	asrs r2, r2, #8
	str r4, [sp]
	adds r0, r7, #0
	movs r3, #1
	bl sub_8020CE0
	cmp r0, #0
	beq _08067E2E
	movs r0, #0
	mov r8, r0
_08067E2E:
	ldr r1, [r7, #0x20]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	beq _08067E82
	mov r0, r8
	cmp r0, #0
	beq _08067E82
	ldr r1, [r5, #8]
	asrs r1, r1, #8
	ldr r2, [r5, #0xc]
	asrs r2, r2, #8
	str r4, [sp]
	adds r0, r7, #0
	movs r3, #0
	bl sub_8020E3C
	cmp r0, #1
	bne _08067E70
	mov r0, sl
	cmp r0, #0
	beq _08067E70
	adds r0, r4, #0
	bl sub_80044CC
	movs r0, #1
	mov sb, r0
	b _08067E82
	.align 2, 0
_08067E68: .4byte gPlayers
_08067E6C: .4byte gStageData
_08067E70:
	ldr r1, [r5, #8]
	asrs r1, r1, #8
	ldr r2, [r5, #0xc]
	asrs r2, r2, #8
	str r4, [sp]
	adds r0, r7, #0
	movs r3, #0
	bl sub_8020CE0
_08067E82:
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #1
	bls _08067DF2
_08067E8C:
	mov r0, sb
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08067EA0
sub_08067EA0: @ 0x08067EA0
	push {r4, r5, r6, lr}
	ldr r1, _08067EE8 @ =gStageData
	adds r1, #0x88
	ldr r1, [r1]
	ldrh r3, [r1, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r4, r3, r1
	adds r1, #0x3c
	adds r6, r3, r1
	ldrb r2, [r0, #2]
	movs r1, #0x7f
	ands r1, r2
	ldrb r2, [r0, #3]
	ldrb r0, [r0, #4]
	lsls r0, r0, #8
	orrs r2, r0
	adds r5, r2, #0
	cmp r1, #1
	bne _08067EF0
	ldr r0, _08067EEC @ =0x03000020
	adds r1, r3, r0
	movs r0, #0
	strb r0, [r1]
	lsls r0, r2, #8
	str r0, [r4, #8]
	ldr r0, [r4, #0x10]
	str r0, [r4, #0xc]
	movs r0, #0x10
	strb r0, [r6, #0x1c]
	adds r0, r4, #0
	movs r1, #0x33
	bl sub_80676D4
	b _08067F12
	.align 2, 0
_08067EE8: .4byte gStageData
_08067EEC: .4byte 0x03000020
_08067EF0:
	cmp r1, #1
	blt _08067F12
	cmp r1, #4
	bgt _08067F12
	cmp r1, #3
	blt _08067F12
	ldr r1, _08067F18 @ =0x03000020
	adds r0, r3, r1
	movs r1, #0
	ldrsb r1, [r0, r1]
	lsls r0, r5, #0x18
	lsrs r0, r0, #0x18
	cmp r1, r0
	beq _08067F12
	adds r0, r4, #0
	bl sub_8067590
_08067F12:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08067F18: .4byte 0x03000020

	thumb_func_start sub_8067F1C
sub_8067F1C: @ 0x08067F1C
	push {lr}
	movs r1, #1
	bl sub_80689DC
	movs r0, #0
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8067F2C
sub_8067F2C: @ 0x08067F2C
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #3
	bl sub_80689DC
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r0, [r0]
	cmp r0, #5
	bne _08067F4A
	adds r0, r4, #0
	movs r1, #1
	bl sub_8067D20
	b _08067F52
_08067F4A:
	adds r0, r4, #0
	movs r1, #1
	bl sub_8067B94
_08067F52:
	cmp r0, #0
	beq _08067F74
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r0, [r0]
	cmp r0, #5
	bne _08067F68
	adds r0, r4, #0
	bl sub_8068AE4
	b _08067F74
_08067F68:
	adds r0, r4, #0
	bl sub_8068AAC
	adds r0, r4, #0
	bl sub_8067590
_08067F74:
	adds r0, r4, #0
	bl sub_8067ACC
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8067F84
sub_8067F84: @ 0x08067F84
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #3
	bl sub_80689DC
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r0, [r0]
	cmp r0, #5
	bne _08067FA2
	adds r0, r4, #0
	movs r1, #1
	bl sub_8067D20
	b _08067FAA
_08067FA2:
	adds r0, r4, #0
	movs r1, #1
	bl sub_8067B94
_08067FAA:
	cmp r0, #0
	beq _08067FCC
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r0, [r0]
	cmp r0, #5
	bne _08067FC0
	adds r0, r4, #0
	bl sub_8068AE4
	b _08067FCC
_08067FC0:
	adds r0, r4, #0
	bl sub_8068AAC
	adds r0, r4, #0
	bl sub_8067590
_08067FCC:
	adds r0, r4, #0
	bl sub_8067ACC
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8067FDC
sub_8067FDC: @ 0x08067FDC
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #3
	bl sub_80689DC
	adds r0, r4, #0
	movs r1, #1
	bl sub_8067B94
	cmp r0, #0
	beq _08067FFE
	adds r0, r4, #0
	bl sub_8068AAC
	adds r0, r4, #0
	bl sub_8067590
_08067FFE:
	adds r0, r4, #0
	bl sub_8067ACC
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_806800C
sub_806800C: @ 0x0806800C
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r2, _0806805C @ =gUnknown_080D56DC
	adds r0, #0x20
	movs r1, #0
	ldrsb r1, [r0, r1]
	movs r0, #4
	subs r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r2
	ldrh r5, [r0]
	ldrh r0, [r4, #0x18]
	subs r0, #1
	strh r0, [r4, #0x18]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _08068064
	ldr r0, _08068060 @ =0x00000223
	bl m4aSongNumStart
	adds r0, r4, #0
	movs r1, #5
	bl sub_80676D4
	lsls r1, r5, #0x10
	asrs r1, r1, #0x10
	adds r0, r4, #0
	movs r2, #0
	bl sub_8068A38
	adds r0, r4, #0
	movs r1, #0
	movs r2, #1
	bl sub_8068A38
	adds r0, r4, #0
	bl sub_8068AD8
	b _0806807C
	.align 2, 0
_0806805C: .4byte gUnknown_080D56DC
_08068060: .4byte 0x00000223
_08068064:
	adds r0, r4, #0
	movs r1, #1
	bl sub_8067B94
	cmp r0, #0
	beq _0806807C
	adds r0, r4, #0
	bl sub_8068AAC
	adds r0, r4, #0
	bl sub_8067590
_0806807C:
	movs r0, #0
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_8068084
sub_8068084: @ 0x08068084
	push {lr}
	adds r1, r0, #0
	ldrh r0, [r1, #0x18]
	subs r0, #1
	strh r0, [r1, #0x18]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _080680B4
	adds r0, r1, #0
	adds r0, #0x20
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080680AC
	adds r0, r1, #0
	movs r1, #9
	bl sub_80676D4
	b _080680B4
_080680AC:
	adds r0, r1, #0
	movs r1, #8
	bl sub_80676D4
_080680B4:
	movs r0, #0
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80680BC
sub_80680BC: @ 0x080680BC
	push {r4, lr}
	adds r1, r0, #0
	adds r4, r1, #0
	adds r4, #0x3c
	ldrh r0, [r1, #0x18]
	subs r0, #1
	strh r0, [r1, #0x18]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _080680E2
	adds r0, r1, #0
	movs r1, #8
	bl sub_80676D4
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	str r0, [r4, #8]
_080680E2:
	ldr r0, _08068100 @ =gStageData
	ldr r0, [r0, #0x1c]
	movs r1, #0x3f
	ands r0, r1
	cmp r0, #0
	bne _080680F6
	movs r0, #0x89
	lsls r0, r0, #2
	bl m4aSongNumStart
_080680F6:
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08068100: .4byte gStageData

	thumb_func_start sub_8068104
sub_8068104: @ 0x08068104
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0x80
	lsls r1, r1, #2
	bl sub_8068984
	cmp r0, #1
	bne _0806811C
	adds r0, r4, #0
	movs r1, #0x33
	bl sub_80676D4
_0806811C:
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_8068124
sub_8068124: @ 0x08068124
    movs r0, #0
	bx lr
	.align 2, 0

	thumb_func_start sub_8068128
sub_8068128: @ 0x08068128
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r4, #0
	adds r5, #0x3c
	movs r1, #1
	bl sub_8067B94
	cmp r0, #0
	beq _08068166
	adds r0, r4, #0
	bl sub_8068AAC
	adds r0, r4, #0
	bl sub_8067590
	ldr r1, [r5, #8]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r1, #0
	ands r0, r2
	cmp r0, #0
	beq _08068160
	ldr r0, _0806815C @ =0xFFFFFBFF
	ands r1, r0
	str r1, [r5, #8]
	b _0806816C
	.align 2, 0
_0806815C: .4byte 0xFFFFFBFF
_08068160:
	orrs r1, r2
	str r1, [r5, #8]
	b _0806816C
_08068166:
	adds r0, r4, #0
	bl sub_806773C
_0806816C:
	movs r0, #0
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_8068174
sub_8068174: @ 0x08068174
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #1
	bl sub_8067B94
	cmp r0, #0
	beq _08068190
	adds r0, r4, #0
	bl sub_8068AAC
	adds r0, r4, #0
	bl sub_8067590
	b _08068196
_08068190:
	adds r0, r4, #0
	bl sub_806773C
_08068196:
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80681A0
sub_80681A0: @ 0x080681A0
	push {r4, r5, lr}
	adds r1, r0, #0
	adds r5, r1, #0
	adds r5, #0x3c
	ldrh r0, [r1, #0x18]
	subs r0, #1
	strh r0, [r1, #0x18]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _080681F0
	adds r0, r1, #0
	adds r0, #0x20
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080681CE
	movs r0, #1
	strh r0, [r1, #0x18]
	adds r0, r1, #0
	bl sub_806773C
	b _080681F0
_080681CE:
	ldr r4, [r5, #8]
	adds r0, r1, #0
	movs r1, #0x34
	bl sub_80676D4
	movs r1, #0x80
	lsls r1, r1, #3
	ands r4, r1
	cmp r4, #0
	beq _080681E8
	ldr r0, [r5, #8]
	orrs r0, r1
	b _080681EE
_080681E8:
	ldr r0, [r5, #8]
	ldr r1, _080681F8 @ =0xFFFFFBFF
	ands r0, r1
_080681EE:
	str r0, [r5, #8]
_080681F0:
	movs r0, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080681F8: .4byte 0xFFFFFBFF

	thumb_func_start sub_80681FC
sub_80681FC: @ 0x080681FC
	push {r4, r5, lr}
	sub sp, #8
	adds r4, r0, #0
	movs r5, #0xb
	adds r0, #0x23
	ldrb r0, [r0]
	cmp r0, #7
	bhi _08068246
	lsls r0, r0, #2
	ldr r1, _08068218 @ =_0806821C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08068218: .4byte _0806821C
_0806821C: @ jump table
	.4byte _0806823C @ case 0
	.4byte _0806823C @ case 1
	.4byte _08068246 @ case 2
	.4byte _08068240 @ case 3
	.4byte _08068246 @ case 4
	.4byte _08068244 @ case 5
	.4byte _08068246 @ case 6
	.4byte _08068244 @ case 7
_0806823C:
	movs r5, #0xb
	b _08068246
_08068240:
	movs r5, #0xd
	b _08068246
_08068244:
	movs r5, #0xf
_08068246:
	ldr r0, [r4, #0xc]
	movs r2, #0x80
	lsls r2, r2, #2
	adds r1, r0, r2
	str r1, [r4, #0xc]
	movs r1, #0xd0
	lsls r1, r1, #4
	adds r0, r0, r1
	asrs r0, r0, #8
	ldr r1, [r4, #8]
	asrs r1, r1, #8
	movs r2, #0
	str r2, [sp]
	ldr r2, _0806828C @ =sub_805217C
	str r2, [sp, #4]
	movs r2, #1
	movs r3, #8
	bl sub_80517FC
	cmp r0, #2
	bgt _08068280
	lsls r1, r0, #8
	ldr r0, [r4, #0xc]
	adds r0, r0, r1
	str r0, [r4, #0xc]
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_80676D4
_08068280:
	movs r0, #1
	add sp, #8
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_0806828C: .4byte sub_805217C

	thumb_func_start sub_8068290
sub_8068290: @ 0x08068290
	push {lr}
	movs r1, #0x10
	bl sub_80689DC
	movs r0, #1
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80682A0
sub_80682A0: @ 0x080682A0
	push {lr}
	movs r1, #0x11
	bl sub_80689DC
	movs r0, #1
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80682B0
sub_80682B0: @ 0x080682B0
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, _08068314 @ =gUnknown_080D56F0
	adds r0, #0x20
	movs r1, #0
	ldrsb r1, [r0, r1]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r1, [r0]
	ldrh r0, [r4, #0x18]
	subs r0, #1
	strh r0, [r4, #0x18]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _080682F4
	ldr r0, [r4, #0xc]
	ldr r2, _08068318 @ =0xFFFFF800
	adds r0, r0, r2
	str r0, [r4, #0xc]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	adds r0, r4, #0
	movs r2, #1
	bl sub_8068A38
	adds r0, r4, #0
	movs r1, #0x13
	bl sub_80676D4
	ldr r0, _0806831C @ =0x00000219
	bl m4aSongNumStart
_080682F4:
	adds r0, r4, #0
	movs r1, #1
	bl sub_8067B94
	cmp r0, #0
	beq _0806830C
	adds r0, r4, #0
	bl sub_8068AAC
	adds r0, r4, #0
	bl sub_8067590
_0806830C:
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08068314: .4byte gUnknown_080D56F0
_08068318: .4byte 0xFFFFF800
_0806831C: .4byte 0x00000219

	thumb_func_start sub_8068320
sub_8068320: @ 0x08068320
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, _08068378 @ =gUnknown_080D56F0
	adds r0, #0x20
	movs r1, #0
	ldrsb r1, [r0, r1]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r2, #2
	adds r0, r0, r2
	movs r1, #0
	ldrsh r2, [r0, r1]
	adds r0, r4, #0
	movs r1, #0
	bl sub_8068A6C
	movs r0, #0x16
	ldrsh r1, [r4, r0]
	movs r0, #0x80
	lsls r0, r0, #2
	cmp r1, r0
	ble _08068356
	adds r0, r4, #0
	movs r1, #0x14
	bl sub_80676D4
_08068356:
	adds r0, r4, #0
	movs r1, #1
	bl sub_8067B94
	cmp r0, #0
	beq _0806836E
	adds r0, r4, #0
	bl sub_8068AAC
	adds r0, r4, #0
	bl sub_8067590
_0806836E:
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08068378: .4byte gUnknown_080D56F0

	thumb_func_start sub_806837C
sub_806837C: @ 0x0806837C
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, _080683B8 @ =gUnknown_080D56F0
	adds r0, #0x20
	movs r1, #0
	ldrsb r1, [r0, r1]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r2, #2
	adds r0, r0, r2
	ldrh r1, [r0]
	rsbs r1, r1, #0
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	adds r0, r4, #0
	bl sub_8068984
	cmp r0, #1
	bne _080683DE
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r0, [r0]
	cmp r0, #3
	bne _080683BC
	adds r0, r4, #0
	movs r1, #0x32
	bl sub_80676D4
	b _080683C4
	.align 2, 0
_080683B8: .4byte gUnknown_080D56F0
_080683BC:
	adds r0, r4, #0
	movs r1, #7
	bl sub_80676D4
_080683C4:
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0
	bl sub_8068A38
	adds r0, r4, #0
	movs r1, #0
	movs r2, #1
	bl sub_8068A38
	movs r0, #0xe7
	bl m4aSongNumStop
_080683DE:
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80683E8
sub_80683E8: @ 0x080683E8
	push {r4, lr}
	adds r4, r0, #0
	movs r2, #0
	ldr r0, [r4, #0x44]
	movs r1, #0x80
	lsls r1, r1, #3
	ands r0, r1
	cmp r0, #0
	beq _08068410
	ldr r0, _0806840C @ =gCamera
	ldr r0, [r0, #0x1c]
	subs r0, #0x2e
	lsls r0, r0, #8
	ldr r1, [r4, #8]
	cmp r0, r1
	bge _08068420
	b _08068424
	.align 2, 0
_0806840C: .4byte gCamera
_08068410:
	ldr r0, _08068458 @ =gCamera
	ldr r0, [r0, #0x18]
	adds r0, #0x2e
	lsls r0, r0, #8
	ldr r1, [r4, #8]
	cmp r0, r1
	ble _08068420
	movs r2, #1
_08068420:
	cmp r2, #0
	beq _08068440
_08068424:
	adds r0, r4, #0
	bl sub_8068ACC
	adds r0, r4, #0
	movs r1, #6
	bl sub_80676D4
	ldrh r0, [r4, #0x14]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x11
	strh r0, [r4, #0x14]
	movs r0, #0xe7
	bl m4aSongNumStop
_08068440:
	adds r0, r4, #0
	movs r1, #0
	bl sub_8067B94
	adds r0, r4, #0
	bl sub_8067A64
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08068458: .4byte gCamera

	thumb_func_start sub_806845C
sub_806845C: @ 0x0806845C
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0x19
	bl sub_80689DC
	cmp r0, #1
	bne _08068490
	ldr r0, _0806847C @ =gStageData
	ldrb r0, [r0, #9]
	cmp r0, #3
	bne _08068480
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #2
	b _08068486
	.align 2, 0
_0806847C: .4byte gStageData
_08068480:
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #0
_08068486:
	strb r0, [r1]
	adds r1, r4, #0
	adds r1, #0x2f
	movs r0, #0
	strb r0, [r1]
_08068490:
	adds r0, r4, #0
	movs r1, #1
	bl sub_8067B94
	cmp r0, #0
	beq _080684A8
	adds r0, r4, #0
	bl sub_8068AAC
	adds r0, r4, #0
	bl sub_8067590
_080684A8:
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_80684B0
sub_80684B0: @ 0x080684B0
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #2
	ldr r0, _0806851C @ =gUnknown_080D5B00
	adds r3, r1, r0
	movs r6, #1
	movs r2, #0
	ldrb r0, [r3, #8]
	cmp r2, r0
	bhs _080684EE
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r1, [r0]
	adds r5, r0, #0
	cmp r1, #0
	bne _080684FA
_080684D8:
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	ldrb r0, [r3, #8]
	cmp r2, r0
	bhs _080684EE
	adds r0, r5, r2
	ldrb r0, [r0]
	cmp r0, #0
	beq _080684D8
	movs r6, #0
_080684EE:
	cmp r6, #0
	beq _080684FA
	adds r0, r4, #0
	movs r1, #0x1f
	bl sub_80676D4
_080684FA:
	adds r0, r4, #0
	movs r1, #1
	bl sub_8067B94
	cmp r0, #0
	beq _08068512
	adds r0, r4, #0
	bl sub_8068AAC
	adds r0, r4, #0
	bl sub_8067590
_08068512:
	movs r0, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_0806851C: .4byte gUnknown_080D5B00

	thumb_func_start sub_8068520
sub_8068520: @ 0x08068520
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r6, _08068560 @ =gPlayers
	adds r4, r5, #0
	adds r4, #0x3c
	movs r1, #0x1c
	bl sub_80689DC
	cmp r0, #1
	bne _080685A0
	ldr r0, [r4, #8]
	movs r2, #0x80
	lsls r2, r2, #3
	ands r0, r2
	cmp r0, #0
	beq _0806856C
	ldr r0, _08068564 @ =gCamera
	ldr r0, [r0, #0x1c]
	subs r0, #0x2e
	lsls r0, r0, #8
	ldr r1, [r6, #0x10]
	cmp r0, r1
	blt _08068594
	movs r2, #0xa0
	lsls r2, r2, #6
	adds r0, r1, r2
	str r0, [r5, #8]
	ldr r0, [r4, #8]
	ldr r1, _08068568 @ =0xFFFFFBFF
	ands r0, r1
	b _0806859E
	.align 2, 0
_08068560: .4byte gPlayers
_08068564: .4byte gCamera
_08068568: .4byte 0xFFFFFBFF
_0806856C:
	ldr r0, _0806858C @ =gCamera
	ldr r0, [r0, #0x18]
	adds r0, #0x2e
	lsls r0, r0, #8
	ldr r1, [r6, #0x10]
	cmp r0, r1
	ble _08068594
	movs r3, #0xa0
	lsls r3, r3, #6
	adds r0, r1, r3
	str r0, [r5, #8]
	ldr r0, [r4, #8]
	ldr r1, _08068590 @ =0xFFFFFBFF
	ands r0, r1
	b _0806859E
	.align 2, 0
_0806858C: .4byte gCamera
_08068590: .4byte 0xFFFFFBFF
_08068594:
	ldr r3, _080685A8 @ =0xFFFFD800
	adds r0, r1, r3
	str r0, [r5, #8]
	ldr r0, [r4, #8]
	orrs r0, r2
_0806859E:
	str r0, [r4, #8]
_080685A0:
	movs r0, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_080685A8: .4byte 0xFFFFD800

	thumb_func_start sub_80685AC
sub_80685AC: @ 0x080685AC
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0x32
	bl sub_80689DC
	adds r0, r4, #0
	bl sub_8067A64
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_80685C4
sub_80685C4: @ 0x080685C4
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #1
	bl sub_8067B94
	cmp r0, #0
	beq _080685E0
	adds r0, r4, #0
	bl sub_8068AAC
	adds r0, r4, #0
	bl sub_8067590
	b _080685E6
_080685E0:
	adds r0, r4, #0
	bl sub_806773C
_080685E6:
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80685F0
sub_80685F0: @ 0x080685F0
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, _08068654 @ =gUnknown_080D56F0
	adds r0, #0x20
	movs r1, #0
	ldrsb r1, [r0, r1]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r1, [r0]
	ldrh r0, [r4, #0x18]
	subs r0, #1
	strh r0, [r4, #0x18]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _08068634
	ldr r0, [r4, #0xc]
	ldr r2, _08068658 @ =0xFFFFF800
	adds r0, r0, r2
	str r0, [r4, #0xc]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	adds r0, r4, #0
	movs r2, #1
	bl sub_8068A38
	adds r0, r4, #0
	movs r1, #0x21
	bl sub_80676D4
	ldr r0, _0806865C @ =0x00000219
	bl m4aSongNumStart
_08068634:
	adds r0, r4, #0
	movs r1, #1
	bl sub_8067B94
	cmp r0, #0
	beq _0806864C
	adds r0, r4, #0
	bl sub_8068AAC
	adds r0, r4, #0
	bl sub_8067590
_0806864C:
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08068654: .4byte gUnknown_080D56F0
_08068658: .4byte 0xFFFFF800
_0806865C: .4byte 0x00000219

	thumb_func_start sub_8068660
sub_8068660: @ 0x08068660
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, _080686C4 @ =gUnknown_080D56F0
	adds r0, #0x20
	movs r1, #0
	ldrsb r1, [r0, r1]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r2, #2
	adds r0, r0, r2
	ldrh r1, [r0]
	rsbs r1, r1, #0
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	adds r0, r4, #0
	bl sub_8068984
	cmp r0, #1
	bne _080686A4
	adds r0, r4, #0
	movs r1, #0x26
	bl sub_80676D4
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0
	bl sub_8068A38
	adds r0, r4, #0
	movs r1, #0
	movs r2, #1
	bl sub_8068A38
_080686A4:
	adds r0, r4, #0
	movs r1, #1
	bl sub_8067B94
	cmp r0, #0
	beq _080686BC
	adds r0, r4, #0
	bl sub_8068AAC
	adds r0, r4, #0
	bl sub_8067590
_080686BC:
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080686C4: .4byte gUnknown_080D56F0

	thumb_func_start sub_80686C8
sub_80686C8: @ 0x080686C8
	push {lr}
	movs r1, #0x32
	bl sub_80689DC
	movs r0, #0
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80686D8
sub_80686D8: @ 0x080686D8
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, _08068740 @ =gUnknown_080D56F0
	adds r0, #0x20
	movs r1, #0
	ldrsb r1, [r0, r1]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r2, #2
	adds r0, r0, r2
	movs r1, #0
	ldrsh r2, [r0, r1]
	rsbs r2, r2, #0
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	adds r0, r4, #0
	movs r1, #0
	bl sub_8068A6C
	movs r0, #0x16
	ldrsh r1, [r4, r0]
	ldr r0, _08068744 @ =0xFFFFFD80
	cmp r1, r0
	bge _08068730
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0
	bl sub_8068A38
	adds r0, r4, #0
	movs r1, #0
	movs r2, #1
	bl sub_8068A38
	adds r0, r4, #0
	movs r1, #0x2a
	bl sub_80676D4
	ldr r0, [r4, #0xc]
	movs r1, #0x80
	lsls r1, r1, #4
	adds r0, r0, r1
	str r0, [r4, #0xc]
_08068730:
	adds r0, r4, #0
	movs r1, #0
	bl sub_8067B94
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08068740: .4byte gUnknown_080D56F0
_08068744: .4byte 0xFFFFFD80

	thumb_func_start sub_8068748
sub_8068748: @ 0x08068748
	push {lr}
	adds r2, r0, #0
	ldrh r0, [r2, #0x18]
	subs r0, #1
	strh r0, [r2, #0x18]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0806876E
	ldr r0, _08068774 @ =gCamera
	ldr r1, [r0, #0x18]
	ldr r0, [r0, #0x1c]
	adds r1, r1, r0
	asrs r1, r1, #1
	lsls r1, r1, #8
	str r1, [r2, #8]
	adds r0, r2, #0
	movs r1, #0x2b
	bl sub_80676D4
_0806876E:
	movs r0, #0
	pop {r1}
	bx r1
	.align 2, 0
_08068774: .4byte gCamera

	thumb_func_start sub_8068778
sub_8068778: @ 0x08068778
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r4, #0
	adds r5, #0x3c
	movs r1, #0x2c
	bl sub_80689DC
	cmp r0, #0
	beq _080687A4
	ldr r0, [r4, #0xc]
	ldr r1, _080687AC @ =0xFFFFF800
	adds r0, r0, r1
	str r0, [r4, #0xc]
	ldr r0, [r5, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	ands r0, r1
	cmp r0, #0
	beq _080687A4
	ldrb r0, [r5, #0x1a]
	adds r0, #1
	strb r0, [r5, #0x1a]
_080687A4:
	movs r0, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080687AC: .4byte 0xFFFFF800

	thumb_func_start sub_80687B0
sub_80687B0: @ 0x080687B0
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r4, #0
	adds r5, #0x3c
	movs r1, #0x2e
	bl sub_80689DC
	cmp r0, #0
	beq _080687E6
	ldr r0, [r5, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	ands r0, r1
	cmp r0, #0
	beq _080687DC
	ldr r0, _080687D8 @ =gCamera
	ldr r0, [r0, #0x1c]
	subs r0, #0xc
	b _080687E2
	.align 2, 0
_080687D8: .4byte gCamera
_080687DC:
	ldr r0, _080687F0 @ =gCamera
	ldr r0, [r0, #0x18]
	adds r0, #0xc
_080687E2:
	lsls r0, r0, #8
	str r0, [r4, #8]
_080687E6:
	movs r0, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080687F0: .4byte gCamera

	thumb_func_start sub_80687F4
sub_80687F4: @ 0x080687F4
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0x2f
	bl sub_80689DC
	cmp r0, #0
	beq _0806880A
	ldr r0, [r4, #0xc]
	ldr r1, _08068814 @ =0xFFFFF800
	adds r0, r0, r1
	str r0, [r4, #0xc]
_0806880A:
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08068814: .4byte 0xFFFFF800

	thumb_func_start sub_8068818
sub_8068818: @ 0x08068818
	push {lr}
	movs r1, #0x32
	bl sub_80689DC
	movs r0, #0
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8068828
sub_8068828: @ 0x08068828
	push {r4, r5, lr}
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	ldr r0, [r4, #4]
	cmp r0, #0
	beq _08068854
	ldr r0, [r4, #0x3c]
	bl VramFree
	ldr r0, [r4, #0x78]
	bl VramFree
	ldr r1, _0806885C @ =0x030000A0
	adds r0, r5, r1
	ldr r0, [r0]
	bl VramFree
	ldr r0, [r4, #4]
	bl VramFree
_08068854:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806885C: .4byte 0x030000A0

	thumb_func_start sub_8068860
sub_8068860: @ 0x08068860
	push {r4, r5, lr}
	ldr r5, _08068880 @ =gCurTask
	ldr r2, [r5]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, [r4, #0x1c]
	ldrb r0, [r0]
	cmp r0, #3
	bne _08068884
	adds r0, r2, #0
	bl TaskDestroy
	b _080688AA
	.align 2, 0
_08068880: .4byte gCurTask
_08068884:
	adds r0, r4, #0
	bl sub_8068954
	adds r0, r4, #0
	bl sub_806799C
	bl sub_8079FFC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080688A4
	ldr r1, [r5]
	ldr r0, _080688A0 @ =sub_80688B4
	b _080688A8
	.align 2, 0
_080688A0: .4byte sub_80688B4
_080688A4:
	ldr r1, [r5]
	ldr r0, _080688B0 @ =sub_80663F0
_080688A8:
	str r0, [r1, #8]
_080688AA:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080688B0: .4byte sub_80663F0

	thumb_func_start sub_80688B4
sub_80688B4: @ 0x080688B4
	push {r4, r5, lr}
	ldr r5, _080688D4 @ =gCurTask
	ldr r2, [r5]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, [r4, #0x1c]
	ldrb r0, [r0]
	cmp r0, #3
	bne _080688D8
	adds r0, r2, #0
	bl TaskDestroy
	b _080688FC
	.align 2, 0
_080688D4: .4byte gCurTask
_080688D8:
	adds r0, r4, #0
	bl sub_8068954
	adds r0, r4, #0
	bl sub_806799C
	ldr r0, [r4, #0x1c]
	ldrb r0, [r0]
	cmp r0, #2
	bne _080688FC
	bl sub_807A074
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080688FC
	ldr r1, [r5]
	ldr r0, _08068904 @ =sub_80663F0
	str r0, [r1, #8]
_080688FC:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08068904: .4byte sub_80663F0

	thumb_func_start sub_8068908
sub_8068908: @ 0x08068908
	push {r4, r5, lr}
	ldr r0, _0806892C @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, #0x22
	adds r1, r1, r0
	ldrb r0, [r1]
	movs r5, #0
	ldrsb r5, [r1, r5]
	cmp r5, #0
	beq _08068930
	subs r0, #1
	strb r0, [r1]
	b _08068942
	.align 2, 0
_0806892C: .4byte gCurTask
_08068930:
	ldr r1, [r4]
	adds r0, r4, #0
	bl _call_via_r1
	cmp r0, #0
	beq _08068942
	ldr r0, [r4, #0x1c]
	strb r5, [r0]
	b _0806894E
_08068942:
	adds r0, r4, #0
	bl sub_8067840
	adds r0, r4, #0
	bl sub_806799C
_0806894E:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8068954
sub_8068954: @ 0x08068954
	push {lr}
	adds r2, r0, #0
	ldr r1, [r2]
	ldr r0, _0806897C @ =sub_8066890
	cmp r1, r0
	beq _08068976
	ldr r3, _08068980 @ =gCamera
	ldr r0, [r3, #0x18]
	lsls r0, r0, #8
	ldr r1, [r2, #8]
	cmp r1, r0
	blt _08068974
	ldr r0, [r3, #0x1c]
	lsls r0, r0, #8
	cmp r1, r0
	ble _08068976
_08068974:
	str r0, [r2, #8]
_08068976:
	pop {r0}
	bx r0
	.align 2, 0
_0806897C: .4byte sub_8066890
_08068980: .4byte gCamera

	thumb_func_start sub_8068984
sub_8068984: @ 0x08068984
	push {r4, r5, lr}
	sub sp, #8
	adds r4, r0, #0
	movs r5, #0
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	ldrh r0, [r4, #0x16]
	adds r1, r1, r0
	strh r1, [r4, #0x16]
	ldr r0, [r4, #0xc]
	movs r1, #0xb0
	lsls r1, r1, #4
	adds r0, r0, r1
	asrs r0, r0, #8
	ldr r1, [r4, #8]
	asrs r1, r1, #8
	str r5, [sp]
	ldr r2, _080689D4 @ =sub_805217C
	str r2, [sp, #4]
	movs r2, #1
	movs r3, #8
	bl sub_80517FC
	cmp r0, #0
	bgt _080689CA
	adds r0, #1
	lsls r0, r0, #8
	ldr r1, [r4, #0xc]
	adds r1, r1, r0
	ldr r0, _080689D8 @ =0xFFFFFF00
	ands r1, r0
	subs r1, #1
	str r1, [r4, #0xc]
	strh r5, [r4, #0x16]
	movs r5, #1
_080689CA:
	adds r0, r5, #0
	add sp, #8
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080689D4: .4byte sub_805217C
_080689D8: .4byte 0xFFFFFF00

	thumb_func_start sub_80689DC
sub_80689DC: @ 0x080689DC
	push {r4, lr}
	adds r2, r0, #0
	movs r4, #0
	ldrh r0, [r2, #0x18]
	subs r0, #1
	strh r0, [r2, #0x18]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _080689F6
	movs r4, #1
	adds r0, r2, #0
	bl sub_80676D4
_080689F6:
	adds r0, r4, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8068A00
sub_8068A00: @ 0x08068A00
	push {lr}
	adds r3, r0, #0
	adds r3, #0x3c
	ldr r2, _08068A24 @ =gCamera
	ldr r1, [r2, #0x18]
	ldr r2, [r2, #0x1c]
	adds r1, r1, r2
	asrs r1, r1, #1
	lsls r1, r1, #8
	ldr r0, [r0, #8]
	cmp r1, r0
	ble _08068A28
	ldr r0, [r3, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	b _08068A2E
	.align 2, 0
_08068A24: .4byte gCamera
_08068A28:
	ldr r0, [r3, #8]
	ldr r1, _08068A34 @ =0xFFFFFBFF
	ands r0, r1
_08068A2E:
	str r0, [r3, #8]
	pop {r0}
	bx r0
	.align 2, 0
_08068A34: .4byte 0xFFFFFBFF

	thumb_func_start sub_8068A38
sub_8068A38: @ 0x08068A38
	push {r4, lr}
	adds r4, r0, #0
	lsls r1, r1, #0x10
	lsrs r3, r1, #0x10
	adds r0, #0x3c
	lsls r2, r2, #0x18
	cmp r2, #0
	bne _08068A62
	ldr r0, [r0, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	ands r0, r1
	cmp r0, #0
	beq _08068A58
	strh r3, [r4, #0x14]
	b _08068A64
_08068A58:
	lsls r0, r3, #0x10
	asrs r0, r0, #0x10
	rsbs r0, r0, #0
	strh r0, [r4, #0x14]
	b _08068A64
_08068A62:
	strh r3, [r4, #0x16]
_08068A64:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8068A6C
sub_8068A6C: @ 0x08068A6C
	push {r4, lr}
	adds r3, r0, #0
	lsls r1, r1, #0x10
	lsrs r4, r1, #0x10
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	ldr r0, [r3, #0x44]
	movs r1, #0x80
	lsls r1, r1, #3
	ands r0, r1
	cmp r0, #0
	beq _08068A90
	ldrh r1, [r3, #0x14]
	lsls r0, r4, #0x10
	asrs r0, r0, #0x10
	subs r1, r1, r0
	strh r1, [r3, #0x14]
	b _08068A9A
_08068A90:
	lsls r0, r4, #0x10
	asrs r0, r0, #0x10
	ldrh r1, [r3, #0x14]
	adds r0, r0, r1
	strh r0, [r3, #0x14]
_08068A9A:
	ldrh r1, [r3, #0x16]
	lsls r0, r2, #0x10
	asrs r0, r0, #0x10
	subs r1, r1, r0
	strh r1, [r3, #0x16]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8068AAC
sub_8068AAC: @ 0x08068AAC
	push {lr}
	adds r0, #0x21
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _08068AC6
	movs r0, #0
_08068ABC:
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #3
	bls _08068ABC
_08068AC6:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8068ACC
sub_8068ACC: @ 0x08068ACC
	adds r0, #0x78
	movs r1, #1
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	bx lr

	thumb_func_start sub_8068AD8
sub_8068AD8: @ 0x08068AD8
	adds r0, #0x78
	movs r1, #0
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	bx lr

	thumb_func_start sub_8068AE4
sub_8068AE4: @ 0x08068AE4
	adds r2, r0, #0
	adds r2, #0xa0
	adds r0, #0x32
	movs r1, #0x14
	strb r1, [r0]
	movs r1, #0
	ldr r0, _08068B08 @ =0x0000050E
	strh r0, [r2, #0xc]
	strb r1, [r2, #0x1a]
	ldr r0, _08068B0C @ =0x0000FFFF
	strh r0, [r2, #0x18]
	movs r0, #0xff
	strb r0, [r2, #0x1b]
	movs r0, #0x90
	lsls r0, r0, #3
	strh r0, [r2, #0x14]
	bx lr
	.align 2, 0
_08068B08: .4byte 0x0000050E
_08068B0C: .4byte 0x0000FFFF

	thumb_func_start sub_08068B10
sub_08068B10: @ 0x08068B10
	adds r2, r0, #0
	adds r2, #0xa0
	adds r0, #0x32
	movs r1, #0x12
	strb r1, [r0]
	movs r1, #0
	ldr r0, _08068B34 @ =0x00000514
	strh r0, [r2, #0xc]
	strb r1, [r2, #0x1a]
	ldr r0, _08068B38 @ =0x0000FFFF
	strh r0, [r2, #0x18]
	movs r0, #0xff
	strb r0, [r2, #0x1b]
	movs r0, #0xa0
	lsls r0, r0, #3
	strh r0, [r2, #0x14]
	bx lr
	.align 2, 0
_08068B34: .4byte 0x00000514
_08068B38: .4byte 0x0000FFFF

    @ Called on init of Boss 1
	thumb_func_start sub_8068B3C
sub_8068B3C: @ 0x08068B3C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r7, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	ldr r0, _08068B88 @ =sub_806A728
	movs r1, #0xde
	lsls r1, r1, #1
	movs r2, #0x84
	lsls r2, r2, #6
	ldr r3, _08068B8C @ =sub_806A7E4
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	mov r8, r0
	ldr r2, _08068B90 @ =gStageData
	adds r0, r2, #0
	adds r0, #0x88
	mov r1, r8
	str r1, [r0]
	ldrh r1, [r1, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r1, r0
	lsls r4, r4, #8
	str r4, [r6]
	lsls r5, r5, #8
	str r5, [r6, #4]
	ldrb r0, [r2, #1]
	cmp r0, #0
	bne _08068B94
	movs r0, #8
	b _08068B96
	.align 2, 0
_08068B88: .4byte sub_806A728
_08068B8C: .4byte sub_806A7E4
_08068B90: .4byte gStageData
_08068B94:
	movs r0, #6
_08068B96:
	strb r0, [r6, #0xc]
	str r7, [r6, #8]
	movs r1, #0
	strb r1, [r6, #0xd]
	movs r0, #0
	strh r1, [r6, #0x32]
	strb r0, [r6, #0xf]
	strh r1, [r6, #0x2c]
	strh r1, [r6, #0x2e]
	strb r0, [r6, #0x10]
	strb r0, [r6, #0x11]
	strb r0, [r6, #0x12]
	ldr r0, _08068C34 @ =gPlayers
	str r0, [r6, #0x50]
	movs r2, #0xa8
	lsls r2, r2, #1
	adds r0, r0, r2
	str r0, [r6, #0x54]
	str r1, [r6, #0x48]
	str r1, [r6, #0x4c]
	movs r0, #0x9e
	bl VramMalloc
	str r0, [r6, #0x28]
	adds r0, r6, #0
	bl sub_8069460
	adds r0, r6, #0
	bl sub_80692E4
	adds r0, r6, #0
	bl sub_806940C
	movs r5, #0
	movs r0, #0x16
	adds r0, r0, r6
	mov ip, r0
	movs r1, #0x88
	lsls r1, r1, #1
	mov sb, r1
	adds r7, r6, #0
	adds r7, #0x14
_08068BEA:
	lsls r2, r5, #3
	add r2, sb
	adds r2, r6, r2
	lsls r3, r5, #2
	adds r4, r7, r3
	movs r1, #4
	ldrsb r1, [r2, r1]
	movs r0, #6
	ldrsb r0, [r2, r0]
	subs r0, r1, r0
	asrs r0, r0, #1
	subs r1, r1, r0
	strh r1, [r4]
	add r3, ip
	movs r1, #5
	ldrsb r1, [r2, r1]
	movs r0, #7
	ldrsb r0, [r2, r0]
	subs r0, r1, r0
	asrs r0, r0, #1
	subs r1, r1, r0
	strh r1, [r3]
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #4
	bls _08068BEA
	bl sub_807A4BC
	mov r0, r8
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08068C34: .4byte gPlayers

	thumb_func_start sub_8068C38
sub_8068C38: @ 0x08068C38
	push {r4, r5, r6, lr}
	ldr r0, _08068CBC @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, #0xf0
	adds r6, r1, r0
	ldrh r0, [r4, #0x32]
	adds r0, #1
	strh r0, [r4, #0x32]
	adds r0, r4, #0
	bl sub_8069814
	adds r0, r4, #0
	bl sub_8069360
	adds r0, r4, #0
	bl sub_806A894
	ldr r0, [r4, #0x50]
	bl sub_8068E5C
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	ldr r0, [r4, #0x54]
	bl sub_8068E5C
	adds r0, r5, r0
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	ldrb r1, [r4, #0xd]
	movs r0, #0xd
	ldrsb r0, [r4, r0]
	cmp r0, #0
	beq _08068C96
	subs r0, r1, #1
	strb r0, [r4, #0xd]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08068C96
	movs r0, #0x97
	lsls r0, r0, #3
	strh r0, [r6, #0xc]
	movs r0, #0
	strb r0, [r6, #0x1a]
_08068C96:
	cmp r5, #0
	beq _08068CA0
	adds r0, r4, #0
	bl sub_806A5DC
_08068CA0:
	ldrb r0, [r4, #0xc]
	cmp r0, #0
	bne _08068CDE
	ldr r1, _08068CC0 @ =gStageData
	ldrb r0, [r1, #3]
	cmp r0, #5
	bne _08068CD0
	ldrb r0, [r1, #6]
	cmp r0, #0
	beq _08068CC8
	ldr r0, _08068CBC @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08068CC4 @ =sub_806A7A4
	b _08068CDC
	.align 2, 0
_08068CBC: .4byte gCurTask
_08068CC0: .4byte gStageData
_08068CC4: .4byte sub_806A7A4
_08068CC8:
	movs r0, #1
	movs r1, #0
	bl sub_8027674
_08068CD0:
	adds r0, r4, #0
	bl sub_806A818
	ldr r0, _08068CF8 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08068CFC @ =sub_806A760
_08068CDC:
	str r0, [r1, #8]
_08068CDE:
	adds r0, r4, #0
	bl sub_8069578
	adds r0, r4, #0
	bl sub_806A854
	adds r0, r4, #0
	bl sub_806A898
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08068CF8: .4byte gCurTask
_08068CFC: .4byte sub_806A760

	thumb_func_start sub_8068D00
sub_8068D00: @ 0x08068D00
	push {r4, r5, r6, lr}
	sub sp, #0x10
	ldr r0, _08068D20 @ =gCurTask
	ldr r0, [r0]
	ldrh r6, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r6, r0
	ldr r0, [r4, #0x50]
	ldrh r5, [r4, #0x32]
	cmp r5, #0
	beq _08068D24
	cmp r5, #1
	beq _08068D74
	b _08068D88
	.align 2, 0
_08068D20: .4byte gCurTask
_08068D24:
	ldr r0, [r4, #0x48]
	cmp r0, #0
	beq _08068D30
	bl VramFree
	str r5, [r4, #0x48]
_08068D30:
	ldr r0, [r4, #0x4c]
	cmp r0, #0
	beq _08068D3C
	bl VramFree
	str r5, [r4, #0x4c]
_08068D3C:
	ldr r0, [r4, #0x58]
	asrs r0, r0, #8
	str r0, [sp]
	ldr r0, [r4, #0x5c]
	asrs r0, r0, #8
	str r0, [sp, #4]
	ldrb r0, [r4, #0x11]
	lsls r0, r0, #3
	movs r1, #0xd4
	lsls r1, r1, #3
	adds r0, r0, r1
	str r0, [sp, #8]
	ldr r1, _08068D6C @ =0x030000EC
	adds r0, r6, r1
	ldr r0, [r0]
	asrs r0, r0, #8
	subs r0, #0xc
	str r0, [sp, #0xc]
	ldr r1, _08068D70 @ =sub_807A37C
	mov r0, sp
	bl sub_8078E34
	movs r0, #1
	b _08068D86
	.align 2, 0
_08068D6C: .4byte 0x030000EC
_08068D70: .4byte sub_807A37C
_08068D74:
	ldr r1, [r0, #4]
	movs r0, #0x80
	lsls r0, r0, #0x14
	ands r1, r0
	cmp r1, #0
	bne _08068D88
	ldr r0, [r4, #8]
	strb r1, [r0]
	movs r0, #0x64
_08068D86:
	strh r0, [r4, #0x32]
_08068D88:
	add sp, #0x10
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_8068D90
sub_8068D90: @ 0x08068D90
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r7, #0
	ldr r0, _08068E04 @ =gCurTask
	ldr r0, [r0]
	ldrh r5, [r0, #6]
	ldr r0, _08068E08 @ =0x03000138
	adds r6, r5, r0
	adds r0, r4, #0
	bl sub_802C0D4
	cmp r0, #0
	bne _08068E40
	ldr r1, _08068E0C @ =0x030000E8
	adds r0, r5, r1
	ldr r1, [r0]
	asrs r1, r1, #8
	ldr r2, _08068E10 @ =0x030000EC
	adds r0, r5, r2
	ldr r2, [r0]
	asrs r2, r2, #8
	str r7, [sp]
	adds r0, r6, #0
	adds r3, r4, #0
	bl sub_8020950
	adds r2, r0, #0
	movs r0, #0x80
	lsls r0, r0, #9
	ands r0, r2
	cmp r0, #0
	beq _08068DDE
	lsls r1, r2, #0x18
	asrs r1, r1, #0x10
	ldr r0, [r4, #0x14]
	adds r0, r0, r1
	str r0, [r4, #0x14]
	movs r7, #1
_08068DDE:
	movs r0, #0xc0
	lsls r0, r0, #0xc
	ands r0, r2
	cmp r0, #0
	beq _08068E40
	movs r0, #0x80
	lsls r0, r0, #0xc
	ands r0, r2
	cmp r0, #0
	beq _08068E14
	ldrh r1, [r4, #0x1e]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _08068E2E
	ldr r0, [r4, #0x10]
	movs r1, #0x80
	lsls r1, r1, #1
	b _08068E22
	.align 2, 0
_08068E04: .4byte gCurTask
_08068E08: .4byte 0x03000138
_08068E0C: .4byte 0x030000E8
_08068E10: .4byte 0x030000EC
_08068E14:
	ldrh r1, [r4, #0x1e]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _08068E2E
	ldr r0, [r4, #0x10]
	ldr r1, _08068E58 @ =0xFFFFFF00
_08068E22:
	adds r0, r0, r1
	str r0, [r4, #0x10]
	ldr r0, [r4, #4]
	movs r1, #0x40
	orrs r0, r1
	str r0, [r4, #4]
_08068E2E:
	lsls r0, r2, #0x10
	asrs r0, r0, #0x18
	lsls r0, r0, #8
	ldr r1, [r4, #0x10]
	adds r1, r1, r0
	str r1, [r4, #0x10]
	movs r0, #0
	strh r0, [r4, #0x1c]
	strh r0, [r4, #0x18]
_08068E40:
	ldr r0, [r4, #4]
	movs r1, #0x20
	ands r0, r1
	cmp r0, #0
	beq _08068E4C
	movs r7, #1
_08068E4C:
	adds r0, r7, #0
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08068E58: .4byte 0xFFFFFF00

	thumb_func_start sub_8068E5C
sub_8068E5C: @ 0x08068E5C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x28
	mov sl, r0
	movs r0, #0
	str r0, [sp, #0xc]
	movs r1, #0
	str r1, [sp, #0x10]
	mov r0, sl
	adds r0, #0x24
	ldrb r3, [r0]
	rsbs r0, r3, #0
	add r1, sp, #4
	strb r0, [r1]
	mov r2, sp
	adds r2, #5
	movs r0, #0xf7
	strb r0, [r2]
	mov r0, sp
	adds r0, #6
	strb r3, [r0]
	adds r2, #2
	movs r0, #9
	strb r0, [r2]
	mov r0, sp
	movs r2, #4
	bl memcpy
	ldr r0, _08068EBC @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r1, r0
	ldr r2, _08068EC0 @ =0x030000F0
	adds r2, r1, r2
	str r2, [sp, #0x1c]
	mov r0, sl
	bl sub_802C080
	cmp r0, #0
	beq _08068EC4
	movs r0, #0
	b _080692C8
	.align 2, 0
_08068EBC: .4byte gCurTask
_08068EC0: .4byte 0x030000F0
_08068EC4:
	ldr r0, [r6, #0x58]
	ldr r1, [r6, #0x5c]
	bl sub_8004D68
	ldr r2, _08069014 @ =gPlayers
	ldr r0, _08069018 @ =gStageData
	ldrb r1, [r0, #6]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r1, r0, r2
	adds r0, r1, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	cmp r0, #1
	beq _08068F0E
	adds r0, r1, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	lsls r1, r1, #0x1e
	lsrs r1, r1, #0x1e
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r2
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	cmp r0, #1
	bne _08068F1C
_08068F0E:
	ldr r0, [sp, #0x1c]
	bl sub_807A1DC
	cmp r0, #1
	bne _08068F1C
	movs r3, #1
	str r3, [sp, #0xc]
_08068F1C:
	ldr r2, [sp, #0x1c]
	adds r2, #0x27
	movs r0, #0x14
	strb r0, [r2]
	mov r4, sl
	ldr r1, [r4, #0x10]
	asrs r1, r1, #8
	ldr r0, _0806901C @ =gCamera
	ldr r0, [r0]
	subs r1, r1, r0
	mov r0, sp
	movs r4, #0
	ldrsb r4, [r0, r4]
	adds r3, r1, r4
	ldr r5, [sp, #0x1c]
	movs r7, #0x10
	ldrsh r1, [r5, r7]
	adds r0, r5, #0
	adds r0, #0x24
	movs r5, #0
	ldrsb r5, [r0, r5]
	adds r1, r1, r5
	mov r8, r2
	mov sb, r0
	cmp r3, r1
	bgt _08068F66
	mov r0, sp
	ldrb r0, [r0, #2]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r0, r4
	adds r0, r3, r0
	cmp r0, r1
	bge _08068F7A
	cmp r3, r1
	bge _08068F66
	b _080690B0
_08068F66:
	ldr r0, [sp, #0x1c]
	adds r0, #0x26
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r0, r5
	adds r0, r1, r0
	cmp r0, r3
	bge _08068F7A
	b _080690B0
_08068F7A:
	mov r0, sl
	ldr r2, [r0, #0x14]
	asrs r1, r2, #8
	ldr r0, _0806901C @ =gCamera
	ldr r0, [r0, #4]
	subs r1, r1, r0
	mov r0, sp
	movs r4, #1
	ldrsb r4, [r0, r4]
	adds r1, r1, r4
	ldr r3, [sp, #0x1c]
	movs r5, #0x12
	ldrsh r0, [r3, r5]
	adds r3, #0x25
	movs r5, #0
	ldrsb r5, [r3, r5]
	adds r3, r0, r5
	cmp r1, r3
	bgt _08068FB6
	mov r0, sp
	ldrb r0, [r0, #3]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r0, r4
	adds r0, r1, r0
	cmp r0, r3
	bge _08068FC4
	cmp r1, r3
	bge _08068FB6
	b _080690B0
_08068FB6:
	mov r7, r8
	movs r0, #0
	ldrsb r0, [r7, r0]
	subs r0, r0, r5
	adds r0, r3, r0
	cmp r0, r1
	blt _080690B0
_08068FC4:
	mov r0, sl
	ldr r1, [r0, #0x10]
	asrs r1, r1, #8
	ldr r0, [r6, #0x58]
	asrs r0, r0, #8
	subs r1, r1, r0
	asrs r0, r2, #8
	ldr r2, [r6, #0x5c]
	asrs r2, r2, #8
	subs r0, r0, r2
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	bl sa2__sub_8004418
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	ldr r0, [r6, #0x34]
	lsls r0, r0, #8
	movs r7, #0
	lsrs r5, r0, #0x10
	asrs r3, r0, #0x10
	ldr r4, _08069020 @ =0xFFFFFF00
	adds r2, r3, r4
	cmp r2, #0
	bge _08069028
	lsls r0, r1, #0x10
	asrs r1, r0, #0x10
	adds r4, r0, #0
	cmp r3, r1
	bgt _08069036
	ldr r5, _08069024 @ =0x000003FF
	adds r0, r5, #0
	adds r5, r0, #0
	ands r5, r2
	cmp r5, r1
	bge _08069038
	b _08069036
	.align 2, 0
_08069014: .4byte gPlayers
_08069018: .4byte gStageData
_0806901C: .4byte gCamera
_08069020: .4byte 0xFFFFFF00
_08069024: .4byte 0x000003FF
_08069028:
	lsls r0, r1, #0x10
	asrs r1, r0, #0x10
	adds r4, r0, #0
	cmp r2, r1
	bge _08069038
	cmp r3, r1
	ble _08069038
_08069036:
	movs r7, #1
_08069038:
	lsls r0, r5, #0x10
	asrs r2, r0, #0x10
	movs r0, #0x80
	lsls r0, r0, #1
	adds r1, r2, r0
	ldr r3, _08069058 @ =0x000003FF
	cmp r1, r3
	ble _0806905C
	asrs r0, r4, #0x10
	cmp r2, r0
	blt _0806906C
	ands r1, r3
	cmp r1, r0
	ble _08069068
	b _0806906C
	.align 2, 0
_08069058: .4byte 0x000003FF
_0806905C:
	asrs r0, r4, #0x10
	cmp r1, r0
	ble _08069068
	cmp r2, r0
	bge _08069068
	movs r7, #1
_08069068:
	cmp r7, #0
	beq _080690A6
_0806906C:
	mov r1, sl
	ldr r0, [r1, #4]
	movs r1, #0x80
	lsls r1, r1, #1
	ands r0, r1
	cmp r0, #0
	bne _080690B0
	mov r0, sl
	adds r0, #0xe0
	ldr r0, [r0]
	ldr r1, [r0, #0x34]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	beq _0806909E
	movs r0, #0xd
	ldrsb r0, [r6, r0]
	cmp r0, #0
	bne _08069098
	mov r0, sl
	bl sub_80044CC
_08069098:
	movs r2, #1
	str r2, [sp, #0xc]
	b _080690B0
_0806909E:
	mov r0, sl
	bl Player_8014550
	b _08069180
_080690A6:
	mov r0, sl
	bl Player_8014550
	movs r3, #1
	str r3, [sp, #0x10]
_080690B0:
	ldr r4, [sp, #0x10]
	cmp r4, #0
	bne _08069180
	ldr r5, [sp, #0xc]
	cmp r5, #0
	bne _08069180
	mov r7, sl
	ldr r0, [r7, #4]
	movs r1, #0x80
	lsls r1, r1, #1
	ands r0, r1
	cmp r0, #0
	bne _08069180
	mov r0, sl
	adds r0, #0xe0
	ldr r4, [r0]
	ldr r2, [r4, #0x34]
	movs r1, #1
	rsbs r1, r1, #0
	adds r7, r0, #0
	cmp r2, r1
	beq _08069180
	mov r1, sl
	ldr r0, [r1, #0x10]
	asrs r0, r0, #8
	adds r1, r4, #0
	adds r1, #0x38
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r3, r0, r1
	ldr r0, [r6, #0x58]
	asrs r0, r0, #8
	mov r2, sb
	movs r5, #0
	ldrsb r5, [r2, r5]
	adds r2, r0, r5
	cmp r3, r2
	bgt _08069114
	adds r0, r4, #0
	adds r0, #0x3a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r0, r1
	adds r0, r3, r0
	cmp r0, r2
	bge _08069126
	cmp r3, r2
	blt _08069180
_08069114:
	ldr r0, [sp, #0x1c]
	adds r0, #0x26
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r0, r5
	adds r0, r2, r0
	cmp r0, r3
	blt _08069180
_08069126:
	mov r3, sl
	ldr r0, [r3, #0x14]
	asrs r0, r0, #8
	ldr r3, [r7]
	adds r1, r3, #0
	adds r1, #0x39
	movs r4, #0
	ldrsb r4, [r1, r4]
	adds r2, r0, r4
	ldr r0, [r6, #0x5c]
	asrs r0, r0, #8
	ldr r1, [sp, #0x1c]
	adds r1, #0x25
	movs r5, #0
	ldrsb r5, [r1, r5]
	adds r1, r0, r5
	cmp r2, r1
	bgt _08069160
	adds r0, r3, #0
	adds r0, #0x3b
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r0, r4
	adds r0, r2, r0
	cmp r0, r1
	bge _0806916E
	cmp r2, r1
	blt _08069180
_08069160:
	mov r4, r8
	movs r0, #0
	ldrsb r0, [r4, r0]
	subs r0, r0, r5
	adds r0, r1, r0
	cmp r0, r2
	blt _08069180
_0806916E:
	movs r0, #0xd
	ldrsb r0, [r6, r0]
	cmp r0, #0
	bne _0806917C
	mov r0, sl
	bl sub_80044CC
_0806917C:
	movs r5, #1
	str r5, [sp, #0xc]
_08069180:
	movs r0, #0
	mov r7, r8
	strb r0, [r7]
	ldr r0, [r6, #0x34]
	lsls r0, r0, #8
	lsrs r0, r0, #0x10
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r0, r1
	ldr r2, _080692D8 @ =0x000003FF
	adds r1, r2, #0
	ands r0, r1
	ldr r2, _080692DC @ =gSineTable
	lsls r1, r0, #1
	adds r1, r1, r2
	movs r4, #0
	ldrsh r3, [r1, r4]
	str r3, [sp, #0x14]
	movs r5, #0x80
	lsls r5, r5, #1
	adds r0, r0, r5
	lsls r0, r0, #1
	adds r0, r0, r2
	movs r1, #0
	ldrsh r7, [r0, r1]
	str r7, [sp, #0x18]
	movs r2, #1
	str r2, [sp, #8]
	adds r3, r6, #0
	adds r3, #0x14
	str r3, [sp, #0x20]
	adds r6, #0x16
	str r6, [sp, #0x24]
	mov r8, sp
_080691C4:
	ldr r5, [sp, #8]
	lsls r4, r5, #2
	ldr r6, [sp, #0x20]
	adds r0, r6, r4
	movs r7, #0
	ldrsh r3, [r0, r7]
	ldr r0, [sp, #0x18]
	adds r2, r0, #0
	muls r2, r3, r2
	ldr r5, [sp, #0x14]
	adds r1, r5, #0
	muls r1, r3, r1
	mov ip, r1
	ldr r6, [sp, #0x24]
	adds r0, r6, r4
	movs r7, #0
	ldrsh r1, [r0, r7]
	adds r0, r5, #0
	muls r0, r1, r0
	subs r2, r2, r0
	ldr r5, [sp, #0x18]
	adds r0, r5, #0
	muls r0, r1, r0
	add ip, r0
	asrs r2, r2, #0xe
	mov r6, ip
	asrs r6, r6, #0xe
	mov ip, r6
	mov r7, sl
	ldr r1, [r7, #0x10]
	asrs r1, r1, #8
	ldr r0, _080692E0 @ =gCamera
	ldr r0, [r0]
	subs r1, r1, r0
	mov r0, r8
	movs r6, #0
	ldrsb r6, [r0, r6]
	adds r5, r1, r6
	ldr r7, [sp, #0x1c]
	movs r0, #0x10
	ldrsh r1, [r7, r0]
	adds r1, r1, r2
	subs r1, r1, r3
	ldr r3, [sp, #8]
	lsls r2, r3, #3
	adds r3, r7, r2
	adds r0, r3, #0
	adds r0, #0x24
	movs r7, #0
	ldrsb r7, [r0, r7]
	adds r1, r1, r7
	mov sb, r2
	cmp r5, r1
	bgt _08069242
	mov r2, r8
	movs r0, #2
	ldrsb r0, [r2, r0]
	subs r0, r0, r6
	adds r0, r5, r0
	cmp r0, r1
	bge _08069254
	cmp r5, r1
	blt _080692B6
_08069242:
	adds r0, r3, #0
	adds r0, #0x26
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r0, r7
	adds r0, r1, r0
	cmp r0, r5
	blt _080692B6
_08069254:
	mov r3, sl
	ldr r1, [r3, #0x14]
	asrs r1, r1, #8
	ldr r5, _080692E0 @ =gCamera
	ldr r0, [r5, #4]
	subs r1, r1, r0
	mov r6, r8
	movs r5, #1
	ldrsb r5, [r6, r5]
	adds r2, r1, r5
	ldr r7, [sp, #0x1c]
	movs r0, #0x12
	ldrsh r1, [r7, r0]
	add r1, ip
	ldr r3, [sp, #0x24]
	adds r0, r3, r4
	movs r4, #0
	ldrsh r0, [r0, r4]
	subs r1, r1, r0
	adds r4, r7, #0
	add r4, sb
	adds r3, r4, #0
	adds r3, #0x25
	ldrb r3, [r3]
	lsls r3, r3, #0x18
	asrs r3, r3, #0x18
	adds r1, r1, r3
	cmp r2, r1
	bgt _0806929E
	movs r0, #3
	ldrsb r0, [r6, r0]
	subs r0, r0, r5
	adds r0, r2, r0
	cmp r0, r1
	bge _080692B0
	cmp r2, r1
	blt _080692B6
_0806929E:
	adds r0, r4, #0
	adds r0, #0x27
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r0, r3
	adds r0, r1, r0
	cmp r0, r2
	blt _080692B6
_080692B0:
	mov r0, sl
	bl Player_8014550
_080692B6:
	ldr r0, [sp, #8]
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #8]
	cmp r0, #4
	bhi _080692C6
	b _080691C4
_080692C6:
	ldr r0, [sp, #0xc]
_080692C8:
	add sp, #0x28
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080692D8: .4byte 0x000003FF
_080692DC: .4byte gSineTable
_080692E0: .4byte gCamera

	thumb_func_start sub_80692E4
sub_80692E4: @ 0x080692E4
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	movs r0, #0x9c
	lsls r0, r0, #1
	adds r4, r7, r0
	adds r5, r7, #0
	adds r5, #0xe8
	ldr r0, [r7]
	str r0, [r5]
	adds r6, r7, #0
	adds r6, #0xec
	ldr r0, [r7, #4]
	movs r1, #0x80
	lsls r1, r1, #4
	adds r0, r0, r1
	str r0, [r6]
	movs r0, #0x24
	bl VramMalloc
	str r0, [r4]
	movs r2, #0
	movs r1, #0
	ldr r0, _08069358 @ =0x000004B5
	strh r0, [r4, #0xc]
	strb r2, [r4, #0x1a]
	adds r0, #0x4b
	strh r0, [r4, #0x14]
	strh r1, [r4, #0xe]
	strh r1, [r4, #0x16]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	movs r0, #0x10
	strb r0, [r4, #0x1c]
	strb r2, [r4, #0x1f]
	subs r0, #0x11
	str r0, [r4, #0x20]
	movs r0, #0x80
	lsls r0, r0, #5
	str r0, [r4, #8]
	ldr r0, [r5]
	asrs r0, r0, #8
	ldr r2, _0806935C @ =gCamera
	ldr r1, [r2]
	subs r0, r0, r1
	strh r0, [r4, #0x10]
	ldr r0, [r6]
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	ldr r0, [r4]
	str r0, [r7, #0x4c]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08069358: .4byte 0x000004B5
_0806935C: .4byte gCamera

	thumb_func_start sub_8069360
sub_8069360: @ 0x08069360
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	movs r0, #0x9c
	lsls r0, r0, #1
	adds r6, r4, r0
	ldr r5, [r4, #0x50]
	adds r0, r5, #0
	bl sub_8068D90
	adds r2, r0, #0
	strb r2, [r4, #0xf]
	ldr r1, [r4, #0x3c]
	movs r0, #0x80
	lsls r0, r0, #7
	cmp r1, r0
	bgt _08069392
	lsls r0, r2, #0x18
	cmp r0, #0
	beq _08069392
	ldrb r0, [r4, #0x12]
	cmp r0, #0
	beq _08069392
	adds r0, r5, #0
	bl Player_8014550
_08069392:
	ldr r0, [r5, #0x10]
	asrs r1, r0, #8
	ldr r0, _080693A0 @ =0x0000069F
	cmp r1, r0
	bgt _080693A4
	movs r3, #0
	b _080693C4
	.align 2, 0
_080693A0: .4byte 0x0000069F
_080693A4:
	ldr r0, _080693B0 @ =0x000006DF
	cmp r1, r0
	ble _080693B4
	movs r3, #8
	b _080693C4
	.align 2, 0
_080693B0: .4byte 0x000006DF
_080693B4:
	ldr r2, _08069404 @ =0xFFFFF960
	adds r0, r1, r2
	cmp r0, #0
	bge _080693BE
	adds r0, #7
_080693BE:
	asrs r0, r0, #3
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
_080693C4:
	ldr r1, _08069408 @ =gUnknown_080D575C
	lsls r2, r3, #2
	adds r0, r2, r1
	ldrh r0, [r0]
	strh r0, [r6, #0xc]
	adds r1, #2
	adds r2, r2, r1
	ldrh r0, [r2]
	strb r0, [r6, #0x1a]
	strb r3, [r4, #0x11]
	ldr r5, [r4, #0x54]
	adds r0, r5, #0
	bl sub_8068D90
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	ldr r1, [r4, #0x3c]
	movs r0, #0x80
	lsls r0, r0, #7
	cmp r1, r0
	bgt _080693FE
	cmp r2, #0
	beq _080693FE
	ldrb r0, [r4, #0x12]
	cmp r0, #0
	beq _080693FE
	adds r0, r5, #0
	bl Player_8014550
_080693FE:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08069404: .4byte 0xFFFFF960
_08069408: .4byte gUnknown_080D575C

	thumb_func_start sub_806940C
sub_806940C: @ 0x0806940C
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r1, #0xb0
	lsls r1, r1, #1
	adds r0, r5, r1
	ldr r1, _08069458 @ =0x06004040
	str r1, [r0]
	movs r2, #0
	movs r4, #0
	ldr r1, _0806945C @ =0x000004B6
	strh r1, [r0, #0xc]
	strb r2, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	movs r1, #0xa0
	lsls r1, r1, #2
	strh r1, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	strb r2, [r0, #0x1f]
	movs r1, #0x80
	lsls r1, r1, #9
	str r1, [r0, #8]
	movs r1, #1
	rsbs r1, r1, #0
	str r1, [r0, #0x20]
	movs r1, #0x40
	strh r1, [r0, #0x10]
	movs r1, #0x68
	strh r1, [r0, #0x12]
	bl sa2__sub_80036E0
	strh r4, [r5, #0x30]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08069458: .4byte 0x06004040
_0806945C: .4byte 0x000004B6

	thumb_func_start sub_8069460
sub_8069460: @ 0x08069460
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	mov sl, r0
	mov r7, sl
	adds r7, #0xf0
	movs r6, #0xd8
	lsls r6, r6, #1
	add r6, sl
	mov r1, sl
	ldr r0, [r1]
	str r0, [r1, #0x58]
	ldr r0, [r1, #4]
	str r0, [r1, #0x5c]
	movs r0, #0x44
	bl VramMalloc
	adds r5, r0, #0
	mov r0, sl
	str r5, [r0, #0x48]
	str r5, [r7]
	movs r3, #0
	movs r4, #0
	movs r0, #0x97
	lsls r0, r0, #3
	strh r0, [r7, #0xc]
	strb r3, [r7, #0x1a]
	adds r0, #8
	strh r0, [r7, #0x14]
	strh r4, [r7, #0xe]
	strh r4, [r7, #0x16]
	movs r0, #0xff
	strb r0, [r7, #0x1b]
	movs r1, #0x10
	strb r1, [r7, #0x1c]
	strb r3, [r7, #0x1f]
	movs r0, #1
	rsbs r0, r0, #0
	mov r8, r0
	str r0, [r7, #0x20]
	movs r1, #0x80
	lsls r1, r1, #5
	mov sb, r1
	ldr r0, _0806956C @ =0x0000107F
	str r0, [r7, #8]
	mov r1, sl
	ldr r0, [r1, #0x58]
	asrs r0, r0, #8
	ldr r2, _08069570 @ =gCamera
	ldr r1, [r2]
	subs r0, r0, r1
	strh r0, [r7, #0x10]
	mov r1, sl
	ldr r0, [r1, #0x5c]
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	strh r0, [r7, #0x12]
	strh r4, [r6]
	ldrh r0, [r7, #0x10]
	strh r0, [r6, #6]
	ldrh r0, [r7, #0x12]
	strh r0, [r6, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r6, #2]
	strh r0, [r6, #4]
	adds r0, r7, #0
	str r2, [sp]
	str r3, [sp, #4]
	bl UpdateSpriteAnimation
	movs r0, #0x80
	lsls r0, r0, #4
	adds r5, r5, r0
	movs r7, #0xc4
	lsls r7, r7, #1
	add r7, sl
	str r5, [r7]
	ldr r0, _08069574 @ =0x000004B7
	strh r0, [r7, #0xc]
	ldr r3, [sp, #4]
	strb r3, [r7, #0x1a]
	adds r0, #0x89
	strh r0, [r7, #0x14]
	strh r4, [r7, #0xe]
	strh r4, [r7, #0x16]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r7, #0x1b]
	movs r1, #0x10
	strb r1, [r7, #0x1c]
	strb r3, [r7, #0x1f]
	mov r0, r8
	str r0, [r7, #0x20]
	mov r1, sb
	str r1, [r7, #8]
	mov r1, sl
	ldr r0, [r1, #0x58]
	asrs r0, r0, #8
	ldr r2, [sp]
	ldr r1, [r2]
	subs r0, r0, r1
	strh r0, [r7, #0x10]
	mov r1, sl
	ldr r0, [r1, #0x5c]
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	strh r0, [r7, #0x12]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	movs r0, #0xc0
	lsls r0, r0, #0xa
	mov r1, sl
	str r0, [r1, #0x34]
	str r4, [r1, #0x38]
	movs r0, #0xe0
	lsls r0, r0, #6
	str r0, [r1, #0x3c]
	str r4, [r1, #0x40]
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806956C: .4byte 0x0000107F
_08069570: .4byte gCamera
_08069574: .4byte 0x000004B7

	thumb_func_start sub_8069578
sub_8069578: @ 0x08069578
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	adds r5, r0, #0
	movs r0, #0xf0
	adds r0, r0, r5
	mov sb, r0
	movs r2, #0xd8
	lsls r2, r2, #1
	adds r1, r5, r2
	ldr r0, [r5, #0x34]
	lsls r0, r0, #8
	lsrs r0, r0, #0x10
	movs r3, #0x80
	lsls r3, r3, #1
	adds r0, r0, r3
	ldr r3, _080695E4 @ =0x000003FF
	adds r2, r3, #0
	ands r0, r2
	strh r0, [r1]
	mov r2, sb
	ldrh r0, [r2, #0x10]
	strh r0, [r1, #6]
	ldrh r0, [r2, #0x12]
	strh r0, [r1, #8]
	mov r0, sb
	bl TransformSprite
	mov r0, sb
	bl UpdateSpriteAnimation
	mov r0, sb
	bl DisplaySprite
	movs r3, #0xc4
	lsls r3, r3, #1
	adds r3, r3, r5
	mov sb, r3
	ldrb r0, [r5, #0x10]
	cmp r0, #0x64
	bne _080695D2
	b _08069780
_080695D2:
	cmp r0, #0x64
	ble _080695D8
	b _080697E8
_080695D8:
	cmp r0, #0
	beq _080695E8
	cmp r0, #0xa
	beq _080696A8
	b _080697E8
	.align 2, 0
_080695E4: .4byte 0x000003FF
_080695E8:
	ldr r0, [r5, #0x34]
	ldr r1, _08069690 @ =0xFFFD0000
	adds r1, r0, r1
	str r1, [sp]
	cmp r1, #0
	bge _080695F8
	ldr r2, _08069694 @ =0xFFFD0007
	adds r1, r0, r2
_080695F8:
	asrs r1, r1, #3
	str r1, [sp]
	movs r3, #0xc0
	lsls r3, r3, #0xa
	adds r0, r0, r3
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r4, r0, #1
	ldr r0, [r5, #0x3c]
	cmp r0, #0
	bge _08069610
	adds r0, #7
_08069610:
	asrs r0, r0, #3
	mov sl, r0
	ldr r0, [r5]
	mov r8, r0
	ldr r7, [r5, #4]
	movs r6, #0
	ldr r3, _08069698 @ =gSineTable
	ldr r5, _0806969C @ =gCamera
_08069620:
	ldr r1, [sp]
	adds r4, r4, r1
	ldr r0, _080696A0 @ =0x0003FFFF
	ands r4, r0
	asrs r2, r4, #8
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r2, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	movs r1, #0
	ldrsh r0, [r0, r1]
	mov r1, sl
	muls r1, r0, r1
	adds r0, r1, #0
	cmp r0, #0
	bge _08069646
	ldr r1, _080696A4 @ =0x00003FFF
	adds r0, r0, r1
_08069646:
	asrs r1, r0, #0xe
	lsls r0, r2, #1
	adds r0, r0, r3
	movs r2, #0
	ldrsh r0, [r0, r2]
	mov r2, sl
	muls r2, r0, r2
	adds r0, r2, #0
	cmp r0, #0
	bge _0806965E
	ldr r2, _080696A4 @ =0x00003FFF
	adds r0, r0, r2
_0806965E:
	asrs r0, r0, #0xe
	add r8, r1
	adds r7, r7, r0
	mov r1, r8
	asrs r0, r1, #8
	ldr r1, [r5]
	subs r0, r0, r1
	mov r2, sb
	strh r0, [r2, #0x10]
	asrs r0, r7, #8
	ldr r1, [r5, #4]
	subs r0, r0, r1
	strh r0, [r2, #0x12]
	mov r0, sb
	str r3, [sp, #0x14]
	bl DisplaySprite
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	ldr r3, [sp, #0x14]
	cmp r6, #6
	bls _08069620
	b _080697E8
	.align 2, 0
_08069690: .4byte 0xFFFD0000
_08069694: .4byte 0xFFFD0007
_08069698: .4byte gSineTable
_0806969C: .4byte gCamera
_080696A0: .4byte 0x0003FFFF
_080696A4: .4byte 0x00003FFF
_080696A8:
	ldr r0, [r5, #0x34]
	ldr r3, _080697F8 @ =0xFFFD0000
	adds r3, r0, r3
	str r3, [sp]
	adds r1, r3, #0
	cmp r1, #0
	bge _080696BA
	ldr r2, _080697FC @ =0xFFFD0007
	adds r1, r0, r2
_080696BA:
	asrs r1, r1, #3
	str r1, [sp]
	movs r3, #0xc0
	lsls r3, r3, #0xa
	adds r0, r0, r3
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r4, r0, #1
	ldr r0, [r5, #0x3c]
	cmp r0, #0
	bge _080696D2
	adds r0, #7
_080696D2:
	asrs r0, r0, #3
	mov sl, r0
	ldr r0, [r5]
	mov r8, r0
	ldr r7, [r5, #4]
	movs r6, #0
	adds r1, r5, #0
	adds r1, #0x68
	str r1, [sp, #0xc]
	adds r2, r5, #0
	adds r2, #0x6c
	str r2, [sp, #0x10]
	adds r3, r5, #0
	adds r3, #0xa8
	str r3, [sp, #4]
	adds r0, r5, #0
	adds r0, #0xac
	str r0, [sp, #8]
	ldr r1, _08069800 @ =0x00003FFF
	mov ip, r1
_080696FA:
	ldr r2, [sp]
	adds r4, r4, r2
	ldr r0, _08069804 @ =0x0003FFFF
	ands r4, r0
	asrs r2, r4, #8
	movs r3, #0x80
	lsls r3, r3, #1
	adds r0, r2, r3
	lsls r0, r0, #1
	ldr r1, _08069808 @ =gSineTable
	adds r0, r0, r1
	movs r3, #0
	ldrsh r0, [r0, r3]
	mov r1, sl
	muls r1, r0, r1
	adds r0, r1, #0
	cmp r0, #0
	bge _08069720
	add r0, ip
_08069720:
	asrs r1, r0, #0xe
	lsls r0, r2, #1
	ldr r2, _08069808 @ =gSineTable
	adds r0, r0, r2
	movs r3, #0
	ldrsh r0, [r0, r3]
	mov r2, sl
	muls r2, r0, r2
	adds r0, r2, #0
	cmp r0, #0
	bge _08069738
	add r0, ip
_08069738:
	asrs r0, r0, #0xe
	add r8, r1
	adds r7, r7, r0
	lsls r1, r6, #3
	ldr r3, [sp, #0xc]
	adds r0, r3, r1
	mov r2, r8
	str r2, [r0]
	ldr r3, [sp, #0x10]
	adds r0, r3, r1
	str r7, [r0]
	ldr r0, [sp, #4]
	adds r3, r0, r1
	lsrs r0, r6, #1
	lsls r2, r0, #8
	movs r0, #0x80
	lsls r0, r0, #1
	adds r2, r2, r0
	str r2, [r3]
	movs r0, #1
	ands r0, r6
	cmp r0, #0
	beq _0806976A
	rsbs r0, r2, #0
	str r0, [r3]
_0806976A:
	ldr r2, [sp, #8]
	adds r1, r2, r1
	ldr r0, _0806980C @ =0xFFFFFC00
	str r0, [r1]
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #6
	bls _080696FA
	movs r0, #0x64
	strb r0, [r5, #0x10]
_08069780:
	movs r6, #0
	adds r3, r5, #0
	adds r3, #0x68
	str r3, [sp, #0xc]
	adds r0, r5, #0
	adds r0, #0x6c
	str r0, [sp, #0x10]
	adds r1, r5, #0
	adds r1, #0xa8
	str r1, [sp, #4]
	adds r5, #0xac
	str r5, [sp, #8]
	ldr r4, _08069810 @ =gCamera
_0806979A:
	lsls r2, r6, #3
	ldr r0, [sp, #0xc]
	adds r3, r0, r2
	ldr r0, [sp, #4]
	adds r1, r0, r2
	ldr r0, [r3]
	ldr r1, [r1]
	adds r0, r0, r1
	str r0, [r3]
	ldr r1, [sp, #8]
	adds r0, r1, r2
	ldr r1, [r0]
	adds r1, #0x20
	str r1, [r0]
	ldr r0, [sp, #0x10]
	adds r2, r0, r2
	ldr r0, [r2]
	adds r0, r0, r1
	str r0, [r2]
	ldr r0, [r3]
	asrs r0, r0, #8
	ldr r1, [r4]
	subs r0, r0, r1
	mov r1, sb
	strh r0, [r1, #0x10]
	ldr r0, [r2]
	asrs r0, r0, #8
	ldr r1, [r4, #4]
	subs r0, r0, r1
	mov r2, sb
	strh r0, [r2, #0x12]
	mov r0, sb
	bl DisplaySprite
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #6
	bls _0806979A
_080697E8:
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080697F8: .4byte 0xFFFD0000
_080697FC: .4byte 0xFFFD0007
_08069800: .4byte 0x00003FFF
_08069804: .4byte 0x0003FFFF
_08069808: .4byte gSineTable
_0806980C: .4byte 0xFFFFFC00
_08069810: .4byte gCamera

	thumb_func_start sub_8069814
sub_8069814: @ 0x08069814
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r4, r0, #0
	movs r0, #0xf0
	adds r0, r0, r4
	mov r8, r0
	ldr r5, [r4, #0x50]
	ldrh r3, [r4, #0x2c]
	cmp r3, #0x64
	bne _0806982E
	b _08069A80
_0806982E:
	cmp r3, #0x64
	bgt _0806987E
	cmp r3, #0x14
	bne _08069838
	b _080699D8
_08069838:
	cmp r3, #0x14
	bgt _08069858
	cmp r3, #0xa
	beq _08069934
	cmp r3, #0xa
	bgt _0806984A
	cmp r3, #0
	beq _080698E2
	b _08069D0A
_0806984A:
	cmp r3, #0xb
	bne _08069850
	b _0806994E
_08069850:
	cmp r3, #0x13
	bne _08069856
	b _0806997A
_08069856:
	b _08069D0A
_08069858:
	cmp r3, #0x32
	bne _0806985E
	b _08069A32
_0806985E:
	cmp r3, #0x32
	bgt _08069870
	cmp r3, #0x1e
	bne _08069868
	b _080699FE
_08069868:
	cmp r3, #0x28
	bne _0806986E
	b _08069A20
_0806986E:
	b _08069D0A
_08069870:
	cmp r3, #0x3c
	bne _08069876
	b _08069A54
_08069876:
	cmp r3, #0x5a
	bne _0806987C
	b _08069A66
_0806987C:
	b _08069D0A
_0806987E:
	movs r1, #0x96
	lsls r1, r1, #1
	cmp r3, r1
	bne _08069888
	b _08069BF4
_08069888:
	cmp r3, r1
	bgt _080698AC
	cmp r3, #0x78
	bne _08069892
	b _08069B58
_08069892:
	cmp r3, #0x78
	bgt _0806989E
	cmp r3, #0x6e
	bne _0806989C
	b _08069AB2
_0806989C:
	b _08069D0A
_0806989E:
	cmp r3, #0xc8
	bne _080698A4
	b _08069BB4
_080698A4:
	cmp r3, #0xd2
	bne _080698AA
	b _08069BDC
_080698AA:
	b _08069D0A
_080698AC:
	movs r0, #0xfa
	lsls r0, r0, #1
	cmp r3, r0
	bne _080698B6
	b _08069C96
_080698B6:
	cmp r3, r0
	bgt _080698CE
	movs r2, #0x9b
	lsls r2, r2, #1
	cmp r3, r2
	bne _080698C4
	b _08069C88
_080698C4:
	subs r0, #0xb4
	cmp r3, r0
	bne _080698CC
	b _08069C6C
_080698CC:
	b _08069D0A
_080698CE:
	movs r0, #0xff
	lsls r0, r0, #1
	cmp r3, r0
	bne _080698D8
	b _08069CD4
_080698D8:
	adds r0, #0xa
	cmp r3, r0
	bne _080698E0
	b _08069CE6
_080698E0:
	b _08069D0A
_080698E2:
	ldr r2, _08069924 @ =gDispCnt
	ldrh r0, [r2]
	movs r5, #0x80
	lsls r5, r5, #3
	adds r1, r5, #0
	orrs r0, r1
	strh r0, [r2]
	str r3, [sp, #4]
	ldr r2, _08069928 @ =0x040000D4
	add r0, sp, #4
	str r0, [r2]
	ldr r0, _0806992C @ =gBgCntRegs
	ldrh r1, [r0, #4]
	movs r0, #0xc
	ands r0, r1
	lsls r0, r0, #0xc
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r0, r0, r1
	str r0, [r2, #4]
	ldr r0, _08069930 @ =0x85000010
	str r0, [r2, #8]
	ldr r0, [r2, #8]
	movs r0, #0xa
	strh r0, [r4, #0x2c]
	ldr r0, [r4, #8]
	ldrb r0, [r0]
	cmp r0, #3
	beq _08069956
	bl sub_807A2AC
	b _08069D0A
	.align 2, 0
_08069924: .4byte gDispCnt
_08069928: .4byte 0x040000D4
_0806992C: .4byte gBgCntRegs
_08069930: .4byte 0x85000010
_08069934:
	ldr r0, [r4, #8]
	ldrb r0, [r0]
	cmp r0, #3
	beq _08069956
	bl sub_8079FFC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806994A
	movs r0, #0xb
	b _08069D08
_0806994A:
	movs r0, #0x13
	b _08069D08
_0806994E:
	ldr r0, [r4, #8]
	ldrb r0, [r0]
	cmp r0, #3
	bne _08069964
_08069956:
	ldr r0, _08069960 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
	b _08069DC6
	.align 2, 0
_08069960: .4byte gCurTask
_08069964:
	cmp r0, #2
	beq _0806996A
	b _08069D0A
_0806996A:
	bl sub_807A074
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08069976
	b _08069D0A
_08069976:
	movs r0, #0x13
	b _08069D08
_0806997A:
	ldr r0, [r4, #8]
	ldrb r0, [r0]
	cmp r0, #2
	beq _08069984
	b _08069D0A
_08069984:
	movs r2, #1
	movs r1, #0
	ldr r6, _080699D0 @ =gPlayers
	ldr r5, _080699D4 @ =0xFFFFF9EF
	movs r3, #0xbf
	lsls r3, r3, #1
_08069990:
	lsls r0, r1, #0x10
	asrs r1, r0, #0x10
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r6
	ldr r0, [r0, #0x10]
	asrs r0, r0, #8
	adds r0, r0, r5
	cmp r0, r3
	bls _080699AC
	movs r2, #0
_080699AC:
	adds r0, r1, #1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	ble _08069990
	cmp r2, #0
	bne _080699BE
	b _08069D0A
_080699BE:
	movs r0, #0x3c
	strh r0, [r4, #0x2e]
	movs r0, #0x14
	strh r0, [r4, #0x2c]
	movs r0, #0x32
	bl sub_80299D4
	b _08069D0A
	.align 2, 0
_080699D0: .4byte gPlayers
_080699D4: .4byte 0xFFFFF9EF
_080699D8:
	ldrh r0, [r4, #0x2e]
	subs r0, #1
	strh r0, [r4, #0x2e]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _080699E6
	b _08069D0A
_080699E6:
	bl sub_807A4A8
	movs r0, #0x97
	lsls r0, r0, #3
	mov r1, r8
	strh r0, [r1, #0xc]
	movs r0, #1
	strb r0, [r1, #0x1a]
	movs r0, #0x3c
	strh r0, [r4, #0x2e]
	movs r0, #0x1e
	b _08069D08
_080699FE:
	ldrh r0, [r4, #0x2e]
	subs r0, #1
	strh r0, [r4, #0x2e]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _08069A0C
	b _08069D0A
_08069A0C:
	movs r0, #0x97
	lsls r0, r0, #3
	mov r2, r8
	strh r0, [r2, #0xc]
	movs r0, #0
	strb r0, [r2, #0x1a]
	movs r0, #0x3c
	strh r0, [r4, #0x2e]
	movs r0, #0x28
	b _08069D08
_08069A20:
	ldrh r0, [r4, #0x2e]
	subs r0, #1
	strh r0, [r4, #0x2e]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _08069A2E
	b _08069D0A
_08069A2E:
	movs r0, #0x32
	b _08069D08
_08069A32:
	ldr r0, [r4, #0x3c]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r0, r0, r3
	str r0, [r4, #0x3c]
	ldr r1, _08069A50 @ =0x00005FFF
	cmp r0, r1
	bgt _08069A44
	b _08069D0A
_08069A44:
	movs r0, #0xc0
	lsls r0, r0, #7
	str r0, [r4, #0x3c]
	movs r0, #0x3c
	strh r0, [r4, #0x2e]
	b _08069D08
	.align 2, 0
_08069A50: .4byte 0x00005FFF
_08069A54:
	ldrh r0, [r4, #0x2e]
	subs r0, #1
	strh r0, [r4, #0x2e]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _08069A62
	b _08069D0A
_08069A62:
	movs r0, #0x5a
	b _08069D08
_08069A66:
	ldr r0, _08069A78 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08069A7C @ =sub_8068C38
	str r0, [r1, #8]
	movs r0, #0
	strb r0, [r4, #0xe]
	strh r0, [r4, #0x30]
	movs r0, #1
	b _08069D04
	.align 2, 0
_08069A78: .4byte gCurTask
_08069A7C: .4byte sub_8068C38
_08069A80:
	ldrh r0, [r4, #0x2e]
	subs r0, #1
	strh r0, [r4, #0x2e]
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	beq _08069A90
	b _08069D0A
_08069A90:
	movs r0, #0
	strb r0, [r4, #0x12]
	ldrb r0, [r4, #0xf]
	cmp r0, #0
	beq _08069AAC
	movs r0, #1
	strb r0, [r4, #0x12]
	strh r1, [r4, #0x30]
	movs r0, #0x80
	lsls r0, r0, #3
	str r0, [r4, #0x44]
	movs r0, #0xfa
	lsls r0, r0, #1
	b _08069D08
_08069AAC:
	strh r0, [r4, #0x30]
	movs r0, #0x6e
	b _08069D08
_08069AB2:
	ldr r1, _08069AD8 @ =gSineTable
	ldrh r0, [r4, #0x30]
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bge _08069AC4
	adds r0, #0x3f
_08069AC4:
	asrs r1, r0, #6
	str r1, [r4, #0x38]
	ldrb r0, [r4, #0xe]
	adds r3, r0, #0
	cmp r3, #0
	bne _08069ADC
	ldr r0, [r4, #0x34]
	adds r0, r0, r1
	b _08069AE0
	.align 2, 0
_08069AD8: .4byte gSineTable
_08069ADC:
	ldr r0, [r4, #0x34]
	subs r0, r0, r1
_08069AE0:
	ldr r1, _08069B20 @ =0x0003FFFF
	ands r0, r1
	str r0, [r4, #0x34]
	ldrh r0, [r4, #0x30]
	adds r0, #4
	movs r2, #0
	strh r0, [r4, #0x30]
	lsls r0, r0, #0x10
	ldr r1, _08069B24 @ =0x01FF0000
	cmp r0, r1
	bls _08069B00
	strh r2, [r4, #0x30]
	str r2, [r4, #0x38]
	str r2, [r4, #0x44]
	movs r0, #0x78
	strh r0, [r4, #0x2c]
_08069B00:
	ldrh r1, [r4, #0x30]
	movs r0, #0x80
	lsls r0, r0, #1
	cmp r1, r0
	beq _08069B0C
	b _08069D0A
_08069B0C:
	movs r2, #0
	lsls r0, r3, #0x18
	cmp r0, #0
	bne _08069B28
	ldr r0, [r4]
	ldr r1, [r5, #0x10]
	cmp r0, r1
	ble _08069B32
	b _08069B36
	.align 2, 0
_08069B20: .4byte 0x0003FFFF
_08069B24: .4byte 0x01FF0000
_08069B28:
	ldr r0, [r4]
	ldr r1, [r5, #0x10]
	cmp r0, r1
	bge _08069B32
	movs r2, #1
_08069B32:
	cmp r2, #0
	beq _08069B50
_08069B36:
	ldr r0, [r4]
	subs r3, r0, r1
	cmp r3, #0
	bge _08069B40
	subs r3, r1, r0
_08069B40:
	movs r0, #0xc0
	lsls r0, r0, #7
	cmp r3, r0
	bgt _08069B4C
	str r0, [r4, #0x40]
	b _08069D0A
_08069B4C:
	str r3, [r4, #0x40]
	b _08069D0A
_08069B50:
	movs r0, #0x80
	lsls r0, r0, #8
	str r0, [r4, #0x40]
	b _08069D0A
_08069B58:
	ldr r2, [r4, #0x3c]
	ldr r1, [r4, #0x40]
	cmp r2, r1
	beq _08069B70
	ldr r0, [r4, #0x44]
	adds r0, #0x40
	str r0, [r4, #0x44]
	adds r0, r2, r0
	str r0, [r4, #0x3c]
	cmp r0, r1
	blt _08069B70
	str r1, [r4, #0x3c]
_08069B70:
	ldrb r0, [r4, #0xe]
	cmp r0, #0
	bne _08069B8C
	ldr r0, [r4, #0x38]
	subs r0, #0x80
	str r0, [r4, #0x38]
	ldr r1, _08069B88 @ =0xFFFFF000
	cmp r0, r1
	bgt _08069B9E
	str r1, [r4, #0x38]
	b _08069B9E
	.align 2, 0
_08069B88: .4byte 0xFFFFF000
_08069B8C:
	ldr r0, [r4, #0x38]
	adds r0, #0x80
	str r0, [r4, #0x38]
	ldr r1, _08069BAC @ =0x00000FFF
	cmp r0, r1
	ble _08069B9E
	movs r0, #0x80
	lsls r0, r0, #5
	str r0, [r4, #0x38]
_08069B9E:
	ldr r0, [r4, #0x34]
	ldr r1, [r4, #0x38]
	adds r0, r0, r1
	ldr r1, _08069BB0 @ =0x0003FFFF
	ands r0, r1
	str r0, [r4, #0x34]
	b _08069D0A
	.align 2, 0
_08069BAC: .4byte 0x00000FFF
_08069BB0: .4byte 0x0003FFFF
_08069BB4:
	movs r0, #0x78
	strh r0, [r4, #0x2e]
	movs r0, #0x80
	lsls r0, r0, #4
	movs r3, #1
	rsbs r3, r3, #0
	movs r1, #0x91
	str r1, [sp]
	movs r1, #0x20
	movs r2, #0
	bl sub_805256C
	ldr r0, _08069BD8 @ =0x00000225
	bl m4aSongNumStart
	movs r0, #0xd2
	b _08069D08
	.align 2, 0
_08069BD8: .4byte 0x00000225
_08069BDC:
	ldrh r0, [r4, #0x2e]
	subs r0, #1
	strh r0, [r4, #0x2e]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	beq _08069BEC
	b _08069D0A
_08069BEC:
	str r0, [r4, #0x38]
	str r0, [r4, #0x44]
	strh r1, [r4, #0x2c]
	b _08069D0A
_08069BF4:
	ldrb r0, [r4, #0xe]
	cmp r0, #0
	bne _08069C38
	ldr r0, [r4, #0x38]
	adds r0, #8
	str r0, [r4, #0x38]
	ldr r1, _08069C2C @ =0x000003FF
	cmp r0, r1
	ble _08069C0C
	movs r0, #0x80
	lsls r0, r0, #3
	str r0, [r4, #0x38]
_08069C0C:
	ldr r0, [r4, #0x34]
	ldr r1, [r4, #0x38]
	adds r0, r0, r1
	ldr r1, _08069C30 @ =0x0003FFFF
	ands r0, r1
	str r0, [r4, #0x34]
	ldr r1, _08069C34 @ =0x0002FFFF
	cmp r0, r1
	ble _08069D0A
	movs r0, #0xc0
	lsls r0, r0, #0xa
	str r0, [r4, #0x34]
	movs r0, #0xa0
	lsls r0, r0, #1
	b _08069D08
	.align 2, 0
_08069C2C: .4byte 0x000003FF
_08069C30: .4byte 0x0003FFFF
_08069C34: .4byte 0x0002FFFF
_08069C38:
	ldr r0, [r4, #0x38]
	subs r0, #8
	str r0, [r4, #0x38]
	ldr r1, _08069C64 @ =0xFFFFFC00
	cmp r0, r1
	bgt _08069C46
	str r1, [r4, #0x38]
_08069C46:
	ldr r0, [r4, #0x34]
	ldr r1, [r4, #0x38]
	adds r0, r0, r1
	ldr r1, _08069C68 @ =0x0003FFFF
	ands r0, r1
	str r0, [r4, #0x34]
	movs r1, #0xc0
	lsls r1, r1, #0xa
	cmp r0, r1
	bgt _08069D0A
	str r1, [r4, #0x34]
	movs r0, #0xa0
	lsls r0, r0, #1
	b _08069D08
	.align 2, 0
_08069C64: .4byte 0xFFFFFC00
_08069C68: .4byte 0x0003FFFF
_08069C6C:
	ldr r0, [r4, #0x3c]
	ldr r3, _08069C84 @ =0xFFFFFE00
	adds r0, r0, r3
	str r0, [r4, #0x3c]
	movs r1, #0xc0
	lsls r1, r1, #7
	cmp r0, r1
	bgt _08069D0A
	str r1, [r4, #0x3c]
	strh r2, [r4, #0x2c]
	b _08069D0A
	.align 2, 0
_08069C84: .4byte 0xFFFFFE00
_08069C88:
	ldrb r0, [r4, #0xe]
	movs r1, #1
	eors r0, r1
	movs r1, #0
	strb r0, [r4, #0xe]
	strh r1, [r4, #0x30]
	b _08069D02
_08069C96:
	ldr r0, [r4, #0x44]
	subs r0, #0x20
	str r0, [r4, #0x44]
	ldr r1, [r4, #0x3c]
	adds r1, r1, r0
	str r1, [r4, #0x3c]
	movs r0, #0xe0
	lsls r0, r0, #6
	cmp r1, r0
	bgt _08069D0A
	str r0, [r4, #0x3c]
	movs r0, #0x78
	strh r0, [r4, #0x2e]
	movs r0, #0x80
	lsls r0, r0, #4
	movs r3, #1
	rsbs r3, r3, #0
	movs r1, #0x91
	str r1, [sp]
	movs r1, #0x20
	movs r2, #0
	bl sub_805256C
	ldr r0, _08069CD0 @ =0x00000225
	bl m4aSongNumStart
	movs r0, #0xff
	lsls r0, r0, #1
	b _08069D08
	.align 2, 0
_08069CD0: .4byte 0x00000225
_08069CD4:
	ldrh r0, [r4, #0x2e]
	subs r0, #1
	strh r0, [r4, #0x2e]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _08069D0A
	movs r0, #0x82
	lsls r0, r0, #2
	b _08069D08
_08069CE6:
	ldr r0, [r4, #0x3c]
	movs r5, #0x80
	lsls r5, r5, #2
	adds r0, r0, r5
	str r0, [r4, #0x3c]
	ldr r1, _08069DD4 @ =0x00005FFF
	cmp r0, r1
	ble _08069D0A
	movs r0, #0xc0
	lsls r0, r0, #7
	str r0, [r4, #0x3c]
	movs r0, #0
	strb r0, [r4, #0x12]
	strh r0, [r4, #0x30]
_08069D02:
	movs r0, #0x3c
_08069D04:
	strh r0, [r4, #0x2e]
	movs r0, #0x64
_08069D08:
	strh r0, [r4, #0x2c]
_08069D0A:
	ldr r0, [r4, #0x34]
	lsls r0, r0, #8
	lsrs r1, r0, #0x10
	ldr r6, _08069DD8 @ =gSineTable
	movs r0, #0x80
	lsls r0, r0, #1
	mov ip, r0
	adds r7, r1, r0
	lsls r0, r7, #1
	adds r0, r0, r6
	movs r2, #0
	ldrsh r0, [r0, r2]
	ldr r2, [r4, #0x3c]
	muls r0, r2, r0
	cmp r0, #0
	bge _08069D2E
	ldr r3, _08069DDC @ =0x00003FFF
	adds r0, r0, r3
_08069D2E:
	asrs r3, r0, #0xe
	lsls r0, r1, #1
	adds r0, r0, r6
	movs r5, #0
	ldrsh r0, [r0, r5]
	muls r0, r2, r0
	cmp r0, #0
	bge _08069D42
	ldr r1, _08069DDC @ =0x00003FFF
	adds r0, r0, r1
_08069D42:
	asrs r5, r0, #0xe
	ldr r1, [r4]
	adds r1, r1, r3
	str r1, [r4, #0x58]
	ldr r0, [r4, #4]
	adds r0, r0, r5
	str r0, [r4, #0x5c]
	asrs r1, r1, #8
	ldr r2, _08069DE0 @ =gCamera
	ldr r0, [r2]
	subs r1, r1, r0
	mov r3, r8
	strh r1, [r3, #0x10]
	ldr r0, [r4, #0x5c]
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	strh r0, [r3, #0x12]
	ldrh r0, [r4, #0x2c]
	cmp r0, #0x78
	bne _08069DC6
	ldr r5, _08069DE4 @ =0x000003FF
	adds r0, r5, #0
	adds r1, r0, #0
	ands r1, r7
	lsls r0, r1, #1
	adds r0, r0, r6
	movs r2, #0
	ldrsh r5, [r0, r2]
	mov r3, ip
	adds r0, r1, r3
	lsls r0, r0, #1
	adds r0, r0, r6
	movs r1, #0
	ldrsh r3, [r0, r1]
	ldrb r0, [r4, #0xe]
	movs r2, #4
	cmp r0, #0
	bne _08069D92
	movs r2, #2
_08069D92:
	lsls r2, r2, #2
	adds r0, r4, #0
	adds r0, #0x14
	adds r0, r0, r2
	movs r1, #0
	ldrsh r0, [r0, r1]
	adds r1, r5, #0
	muls r1, r0, r1
	adds r0, r4, #0
	adds r0, #0x16
	adds r0, r0, r2
	movs r5, #0
	ldrsh r2, [r0, r5]
	adds r0, r3, #0
	muls r0, r2, r0
	adds r1, r1, r0
	asrs r1, r1, #6
	ldr r0, [r4, #0x5c]
	adds r0, r0, r1
	lsls r2, r2, #8
	subs r5, r0, r2
	ldr r0, _08069DE8 @ =0x0000A9FF
	cmp r5, r0
	ble _08069DC6
	movs r0, #0xc8
	strh r0, [r4, #0x2c]
_08069DC6:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08069DD4: .4byte 0x00005FFF
_08069DD8: .4byte gSineTable
_08069DDC: .4byte 0x00003FFF
_08069DE0: .4byte gCamera
_08069DE4: .4byte 0x000003FF
_08069DE8: .4byte 0x0000A9FF

	thumb_func_start sub_8069DEC
sub_8069DEC: @ 0x08069DEC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	adds r5, r0, #0
	ldrh r0, [r5, #0x32]
	adds r3, r0, #1
	movs r0, #0
	mov r8, r0
	strh r3, [r5, #0x32]
	ldrh r1, [r5, #0x2c]
	cmp r1, #0x6f
	bne _08069E0C
	b _0806A114
_08069E0C:
	cmp r1, #0x6f
	bgt _08069E2A
	cmp r1, #0xa
	beq _08069E68
	cmp r1, #0xa
	bgt _08069E1E
	cmp r1, #0
	beq _08069E54
	b _08069E9A
_08069E1E:
	cmp r1, #0x64
	beq _08069EA8
	cmp r1, #0x6e
	bne _08069E28
	b _0806A010
_08069E28:
	b _08069E9A
_08069E2A:
	cmp r1, #0xc8
	bne _08069E30
	b _0806A480
_08069E30:
	cmp r1, #0xc8
	bgt _08069E42
	cmp r1, #0x70
	bne _08069E3A
	b _0806A218
_08069E3A:
	cmp r1, #0x78
	bne _08069E40
	b _0806A31C
_08069E40:
	b _08069E9A
_08069E42:
	cmp r1, #0xd2
	bne _08069E48
	b _0806A51C
_08069E48:
	movs r0, #0xfa
	lsls r0, r0, #2
	cmp r1, r0
	bne _08069E52
	b _0806A570
_08069E52:
	b _08069E9A
_08069E54:
	ldrb r1, [r5, #0xd]
	movs r0, #0xd
	ldrsb r0, [r5, r0]
	cmp r0, #0
	beq _08069E64
	subs r0, r1, #1
	strb r0, [r5, #0xd]
	b _08069E9A
_08069E64:
	movs r0, #0xa
	b _08069E98
_08069E68:
	ldr r1, [r5, #0x58]
	ldr r0, [r5]
	cmp r1, r0
	bge _08069E76
	movs r0, #0x80
	lsls r0, r0, #1
	b _08069E78
_08069E76:
	ldr r0, _08069EA0 @ =0xFFFFFF00
_08069E78:
	str r0, [r5, #0x60]
	ldr r0, _08069EA4 @ =0xFFFFFA00
	str r0, [r5, #0x64]
	movs r0, #0x80
	lsls r0, r0, #4
	movs r3, #1
	rsbs r3, r3, #0
	movs r1, #0x91
	str r1, [sp]
	movs r1, #0x20
	movs r2, #0
	bl sub_805256C
	movs r0, #0xa
	strb r0, [r5, #0x10]
	movs r0, #0x64
_08069E98:
	strh r0, [r5, #0x2c]
_08069E9A:
	adds r7, r5, #0
	adds r7, #0xf0
	b _0806A590
	.align 2, 0
_08069EA0: .4byte 0xFFFFFF00
_08069EA4: .4byte 0xFFFFFA00
_08069EA8:
	ldr r1, [r5, #0x64]
	mov sb, r1
	adds r1, #0x20
	str r1, [r5, #0x64]
	ldr r0, _08069F60 @ =0x000007FF
	cmp r1, r0
	ble _08069EBA
	adds r0, #1
	str r0, [r5, #0x64]
_08069EBA:
	ldr r1, [r5, #0x58]
	ldr r0, [r5, #0x60]
	adds r6, r1, r0
	str r6, [r5, #0x58]
	ldr r1, [r5, #0x5c]
	ldr r0, [r5, #0x64]
	adds r7, r1, r0
	str r7, [r5, #0x5c]
	ldrh r1, [r5, #0x32]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08069F36
	ldr r3, _08069F64 @ =gPseudoRandom
	ldr r0, [r3]
	ldr r2, _08069F68 @ =0x00196225
	muls r0, r2, r0
	ldr r1, _08069F6C @ =0x3C6EF35F
	adds r0, r0, r1
	ldr r4, _08069F70 @ =0x000003FF
	ands r4, r0
	muls r0, r2, r0
	adds r0, r0, r1
	str r0, [r3]
	movs r1, #0x30
	bl __umodsi3
	adds r3, r0, #0
	ldr r1, _08069F74 @ =gSineTable
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r4, r2
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r2, #0
	ldrsh r0, [r0, r2]
	muls r0, r3, r0
	lsrs r2, r0, #6
	lsls r0, r4, #1
	adds r0, r0, r1
	movs r1, #0
	ldrsh r0, [r0, r1]
	muls r0, r3, r0
	lsrs r3, r0, #6
	adds r1, r6, r2
	lsls r1, r1, #8
	asrs r1, r1, #0x10
	adds r2, r7, r3
	lsls r2, r2, #8
	asrs r2, r2, #0x10
	movs r3, #0x80
	lsls r3, r3, #3
	str r4, [sp]
	movs r0, #0x14
	str r0, [sp, #4]
	movs r0, #0x80
	str r0, [sp, #8]
	ldr r0, [r5, #0x28]
	str r0, [sp, #0xc]
	movs r0, #6
	bl sub_8079758
_08069F36:
	ldrh r1, [r5, #0x32]
	movs r0, #0x3f
	ands r0, r1
	cmp r0, #0
	bne _08069F46
	ldr r0, _08069F78 @ =0x00000221
	bl m4aSongNumStart
_08069F46:
	ldr r0, [r5, #0x60]
	cmp r0, #0
	beq _08069F88
	cmp r0, #0
	bge _08069F7C
	ldr r1, [r5, #0x58]
	ldr r0, [r5]
	cmp r1, r0
	bgt _08069F88
	mov r2, r8
	str r2, [r5, #0x60]
	b _08069F88
	.align 2, 0
_08069F60: .4byte 0x000007FF
_08069F64: .4byte gPseudoRandom
_08069F68: .4byte 0x00196225
_08069F6C: .4byte 0x3C6EF35F
_08069F70: .4byte 0x000003FF
_08069F74: .4byte gSineTable
_08069F78: .4byte 0x00000221
_08069F7C:
	ldr r1, [r5, #0x58]
	ldr r0, [r5]
	cmp r1, r0
	blt _08069F88
	mov r4, r8
	str r4, [r5, #0x60]
_08069F88:
	adds r7, r5, #0
	adds r7, #0xf0
	mov r0, sb
	cmp r0, #0
	bge _08069FD8
	ldr r0, [r5, #0x64]
	cmp r0, #0
	blt _08069FD8
	adds r3, r7, #0
	movs r0, #0x97
	lsls r0, r0, #3
	strh r0, [r3, #0xc]
	movs r0, #3
	strb r0, [r3, #0x1a]
	movs r0, #0x98
	lsls r0, r0, #3
	strh r0, [r3, #0x14]
	movs r1, #0x80
	lsls r1, r1, #6
	ldr r0, _0806A004 @ =0x0000207F
	str r0, [r3, #8]
	movs r2, #0xc4
	lsls r2, r2, #1
	adds r3, r5, r2
	movs r0, #0xa8
	lsls r0, r0, #3
	strh r0, [r3, #0x14]
	str r1, [r3, #8]
	movs r4, #0x9c
	lsls r4, r4, #1
	adds r3, r5, r4
	subs r0, #0x40
	strh r0, [r3, #0x14]
	str r1, [r3, #8]
	movs r0, #0xb0
	lsls r0, r0, #1
	adds r3, r5, r0
	movs r0, #0x88
	lsls r0, r0, #9
	str r0, [r3, #8]
_08069FD8:
	ldr r1, [r5, #0x5c]
	ldr r0, _0806A008 @ =0x00009DFF
	cmp r1, r0
	bgt _08069FE2
	b _0806A590
_08069FE2:
	adds r0, #1
	str r0, [r5, #0x5c]
	movs r0, #0x80
	lsls r0, r0, #4
	movs r3, #1
	rsbs r3, r3, #0
	movs r1, #0x91
	str r1, [sp]
	movs r1, #0x20
	movs r2, #0
	bl sub_805256C
	ldr r0, _0806A00C @ =0xFFFFFC00
	str r0, [r5, #0x64]
	movs r0, #0x6e
	strh r0, [r5, #0x2c]
	b _0806A590
	.align 2, 0
_0806A004: .4byte 0x0000207F
_0806A008: .4byte 0x00009DFF
_0806A00C: .4byte 0xFFFFFC00
_0806A010:
	ldr r1, [r5, #0x64]
	adds r1, #0x20
	str r1, [r5, #0x64]
	ldr r2, [r5, #0x58]
	ldr r0, [r5, #0x60]
	adds r6, r2, r0
	str r6, [r5, #0x58]
	ldr r0, [r5, #0x5c]
	adds r7, r0, r1
	str r7, [r5, #0x5c]
	movs r0, #1
	ands r3, r0
	cmp r3, #0
	beq _0806A08E
	ldr r3, _0806A0B8 @ =gPseudoRandom
	ldr r0, [r3]
	ldr r2, _0806A0BC @ =0x00196225
	muls r0, r2, r0
	ldr r1, _0806A0C0 @ =0x3C6EF35F
	adds r0, r0, r1
	ldr r4, _0806A0C4 @ =0x000003FF
	ands r4, r0
	muls r0, r2, r0
	adds r0, r0, r1
	str r0, [r3]
	movs r1, #0x30
	bl __umodsi3
	adds r3, r0, #0
	ldr r1, _0806A0C8 @ =gSineTable
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r4, r2
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r2, #0
	ldrsh r0, [r0, r2]
	muls r0, r3, r0
	lsrs r2, r0, #6
	lsls r0, r4, #1
	adds r0, r0, r1
	movs r1, #0
	ldrsh r0, [r0, r1]
	muls r0, r3, r0
	lsrs r3, r0, #6
	adds r1, r6, r2
	lsls r1, r1, #8
	asrs r1, r1, #0x10
	adds r2, r7, r3
	lsls r2, r2, #8
	asrs r2, r2, #0x10
	movs r3, #0x80
	lsls r3, r3, #3
	str r4, [sp]
	movs r0, #0x14
	str r0, [sp, #4]
	movs r0, #0x80
	str r0, [sp, #8]
	ldr r0, [r5, #0x28]
	str r0, [sp, #0xc]
	movs r0, #6
	bl sub_8079758
_0806A08E:
	ldrh r1, [r5, #0x32]
	movs r0, #0x3f
	ands r0, r1
	cmp r0, #0
	bne _0806A09E
	ldr r0, _0806A0CC @ =0x00000221
	bl m4aSongNumStart
_0806A09E:
	ldr r0, [r5, #0x60]
	cmp r0, #0
	beq _0806A0DC
	cmp r0, #0
	bge _0806A0D0
	ldr r1, [r5, #0x58]
	ldr r0, [r5]
	cmp r1, r0
	bgt _0806A0DC
	mov r2, r8
	str r2, [r5, #0x60]
	b _0806A0DC
	.align 2, 0
_0806A0B8: .4byte gPseudoRandom
_0806A0BC: .4byte 0x00196225
_0806A0C0: .4byte 0x3C6EF35F
_0806A0C4: .4byte 0x000003FF
_0806A0C8: .4byte gSineTable
_0806A0CC: .4byte 0x00000221
_0806A0D0:
	ldr r1, [r5, #0x58]
	ldr r0, [r5]
	cmp r1, r0
	blt _0806A0DC
	mov r4, r8
	str r4, [r5, #0x60]
_0806A0DC:
	ldr r1, [r5, #0x5c]
	ldr r0, _0806A10C @ =0x00009DFF
	adds r7, r5, #0
	adds r7, #0xf0
	cmp r1, r0
	bgt _0806A0EA
	b _0806A590
_0806A0EA:
	adds r0, #1
	str r0, [r5, #0x5c]
	movs r0, #0x80
	lsls r0, r0, #4
	movs r3, #1
	rsbs r3, r3, #0
	movs r1, #0x91
	str r1, [sp]
	movs r1, #0x20
	movs r2, #0
	bl sub_805256C
	ldr r0, _0806A110 @ =0xFFFFFD00
	str r0, [r5, #0x64]
	movs r0, #0x6f
	strh r0, [r5, #0x2c]
	b _0806A590
	.align 2, 0
_0806A10C: .4byte 0x00009DFF
_0806A110: .4byte 0xFFFFFD00
_0806A114:
	ldr r1, [r5, #0x64]
	adds r1, #0x20
	str r1, [r5, #0x64]
	ldr r2, [r5, #0x58]
	ldr r0, [r5, #0x60]
	adds r6, r2, r0
	str r6, [r5, #0x58]
	ldr r0, [r5, #0x5c]
	adds r7, r0, r1
	str r7, [r5, #0x5c]
	movs r0, #1
	ands r3, r0
	cmp r3, #0
	beq _0806A192
	ldr r3, _0806A1BC @ =gPseudoRandom
	ldr r0, [r3]
	ldr r2, _0806A1C0 @ =0x00196225
	muls r0, r2, r0
	ldr r1, _0806A1C4 @ =0x3C6EF35F
	adds r0, r0, r1
	ldr r4, _0806A1C8 @ =0x000003FF
	ands r4, r0
	muls r0, r2, r0
	adds r0, r0, r1
	str r0, [r3]
	movs r1, #0x30
	bl __umodsi3
	adds r3, r0, #0
	ldr r1, _0806A1CC @ =gSineTable
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r4, r2
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r2, #0
	ldrsh r0, [r0, r2]
	muls r0, r3, r0
	lsrs r2, r0, #6
	lsls r0, r4, #1
	adds r0, r0, r1
	movs r1, #0
	ldrsh r0, [r0, r1]
	muls r0, r3, r0
	lsrs r3, r0, #6
	adds r1, r6, r2
	lsls r1, r1, #8
	asrs r1, r1, #0x10
	adds r2, r7, r3
	lsls r2, r2, #8
	asrs r2, r2, #0x10
	movs r3, #0x80
	lsls r3, r3, #3
	str r4, [sp]
	movs r0, #0x14
	str r0, [sp, #4]
	movs r0, #0x80
	str r0, [sp, #8]
	ldr r0, [r5, #0x28]
	str r0, [sp, #0xc]
	movs r0, #6
	bl sub_8079758
_0806A192:
	ldrh r1, [r5, #0x32]
	movs r0, #0x3f
	ands r0, r1
	cmp r0, #0
	bne _0806A1A2
	ldr r0, _0806A1D0 @ =0x00000221
	bl m4aSongNumStart
_0806A1A2:
	ldr r0, [r5, #0x60]
	cmp r0, #0
	beq _0806A1E0
	cmp r0, #0
	bge _0806A1D4
	ldr r1, [r5, #0x58]
	ldr r0, [r5]
	cmp r1, r0
	bgt _0806A1E0
	mov r2, r8
	str r2, [r5, #0x60]
	b _0806A1E0
	.align 2, 0
_0806A1BC: .4byte gPseudoRandom
_0806A1C0: .4byte 0x00196225
_0806A1C4: .4byte 0x3C6EF35F
_0806A1C8: .4byte 0x000003FF
_0806A1CC: .4byte gSineTable
_0806A1D0: .4byte 0x00000221
_0806A1D4:
	ldr r1, [r5, #0x58]
	ldr r0, [r5]
	cmp r1, r0
	blt _0806A1E0
	mov r4, r8
	str r4, [r5, #0x60]
_0806A1E0:
	ldr r1, [r5, #0x5c]
	ldr r0, _0806A210 @ =0x00009DFF
	adds r7, r5, #0
	adds r7, #0xf0
	cmp r1, r0
	bgt _0806A1EE
	b _0806A590
_0806A1EE:
	adds r0, #1
	str r0, [r5, #0x5c]
	movs r0, #0x80
	lsls r0, r0, #4
	movs r3, #1
	rsbs r3, r3, #0
	movs r1, #0x91
	str r1, [sp]
	movs r1, #0x20
	movs r2, #0
	bl sub_805256C
	ldr r0, _0806A214 @ =0xFFFFFE00
	str r0, [r5, #0x64]
	movs r0, #0x70
	strh r0, [r5, #0x2c]
	b _0806A590
	.align 2, 0
_0806A210: .4byte 0x00009DFF
_0806A214: .4byte 0xFFFFFE00
_0806A218:
	ldr r1, [r5, #0x64]
	adds r1, #0x20
	str r1, [r5, #0x64]
	ldr r2, [r5, #0x58]
	ldr r0, [r5, #0x60]
	adds r6, r2, r0
	str r6, [r5, #0x58]
	ldr r0, [r5, #0x5c]
	adds r7, r0, r1
	str r7, [r5, #0x5c]
	movs r0, #1
	ands r3, r0
	cmp r3, #0
	beq _0806A296
	ldr r3, _0806A2C0 @ =gPseudoRandom
	ldr r0, [r3]
	ldr r2, _0806A2C4 @ =0x00196225
	muls r0, r2, r0
	ldr r1, _0806A2C8 @ =0x3C6EF35F
	adds r0, r0, r1
	ldr r4, _0806A2CC @ =0x000003FF
	ands r4, r0
	muls r0, r2, r0
	adds r0, r0, r1
	str r0, [r3]
	movs r1, #0x30
	bl __umodsi3
	adds r3, r0, #0
	ldr r1, _0806A2D0 @ =gSineTable
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r4, r2
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r2, #0
	ldrsh r0, [r0, r2]
	muls r0, r3, r0
	lsrs r2, r0, #6
	lsls r0, r4, #1
	adds r0, r0, r1
	movs r1, #0
	ldrsh r0, [r0, r1]
	muls r0, r3, r0
	lsrs r3, r0, #6
	adds r1, r6, r2
	lsls r1, r1, #8
	asrs r1, r1, #0x10
	adds r2, r7, r3
	lsls r2, r2, #8
	asrs r2, r2, #0x10
	movs r3, #0x80
	lsls r3, r3, #3
	str r4, [sp]
	movs r0, #0x14
	str r0, [sp, #4]
	movs r0, #0x80
	str r0, [sp, #8]
	ldr r0, [r5, #0x28]
	str r0, [sp, #0xc]
	movs r0, #6
	bl sub_8079758
_0806A296:
	ldrh r1, [r5, #0x32]
	movs r0, #0x3f
	ands r0, r1
	cmp r0, #0
	bne _0806A2A6
	ldr r0, _0806A2D4 @ =0x00000221
	bl m4aSongNumStart
_0806A2A6:
	ldr r0, [r5, #0x60]
	cmp r0, #0
	beq _0806A2E4
	cmp r0, #0
	bge _0806A2D8
	ldr r1, [r5, #0x58]
	ldr r0, [r5]
	cmp r1, r0
	bgt _0806A2E4
	mov r2, r8
	str r2, [r5, #0x60]
	b _0806A2E4
	.align 2, 0
_0806A2C0: .4byte gPseudoRandom
_0806A2C4: .4byte 0x00196225
_0806A2C8: .4byte 0x3C6EF35F
_0806A2CC: .4byte 0x000003FF
_0806A2D0: .4byte gSineTable
_0806A2D4: .4byte 0x00000221
_0806A2D8:
	ldr r1, [r5, #0x58]
	ldr r0, [r5]
	cmp r1, r0
	blt _0806A2E4
	mov r4, r8
	str r4, [r5, #0x60]
_0806A2E4:
	ldr r1, [r5, #0x5c]
	ldr r0, _0806A318 @ =0x00009DFF
	adds r7, r5, #0
	adds r7, #0xf0
	cmp r1, r0
	bgt _0806A2F2
	b _0806A590
_0806A2F2:
	adds r0, #1
	str r0, [r5, #0x5c]
	movs r0, #0x80
	lsls r0, r0, #4
	movs r3, #1
	rsbs r3, r3, #0
	movs r1, #0x91
	str r1, [sp]
	movs r1, #0x20
	movs r2, #0
	bl sub_805256C
	movs r1, #0
	movs r0, #0xb4
	strh r0, [r5, #0x2e]
	movs r0, #0x78
	strh r0, [r5, #0x2c]
	strb r1, [r5, #0x13]
	b _0806A590
	.align 2, 0
_0806A318: .4byte 0x00009DFF
_0806A31C:
	ldrh r0, [r5, #0x2e]
	subs r0, #1
	strh r0, [r5, #0x2e]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0806A330
	movs r0, #0x14
	strh r0, [r5, #0x2e]
	movs r0, #0xc8
	strh r0, [r5, #0x2c]
_0806A330:
	movs r1, #0x2e
	ldrsh r0, [r5, r1]
	cmp r0, #0x3c
	ble _0806A348
	ldrh r1, [r5, #0x32]
	movs r0, #0x3f
	ands r0, r1
	cmp r0, #0
	bne _0806A348
	ldr r0, _0806A460 @ =0x00000221
	bl m4aSongNumStart
_0806A348:
	ldrh r0, [r5, #0x32]
	movs r6, #3
	ands r6, r0
	adds r7, r5, #0
	adds r7, #0xf0
	cmp r6, #0
	beq _0806A358
	b _0806A590
_0806A358:
	ldr r2, _0806A464 @ =gPseudoRandom
	mov r8, r2
	ldr r0, [r2]
	ldr r4, _0806A468 @ =0x00196225
	muls r0, r4, r0
	ldr r1, _0806A46C @ =0x3C6EF35F
	mov sl, r1
	adds r1, r0, r1
	str r1, [r2]
	adds r4, r1, #0
	ldr r2, _0806A470 @ =0x000003FF
	ands r4, r2
	ldr r0, _0806A474 @ =0x000001FF
	cmp r4, r0
	bhi _0806A37A
	adds r0, #1
	adds r4, r4, r0
_0806A37A:
	ldr r2, _0806A468 @ =0x00196225
	adds r0, r1, #0
	muls r0, r2, r0
	add r0, sl
	mov r1, r8
	str r0, [r1]
	movs r3, #0x1f
	ands r3, r0
	ldr r2, _0806A478 @ =gSineTable
	mov sb, r2
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r4, r1
	lsls r0, r0, #1
	add r0, sb
	movs r2, #0
	ldrsh r0, [r0, r2]
	muls r0, r3, r0
	lsrs r2, r0, #6
	lsls r0, r4, #1
	add r0, sb
	movs r1, #0
	ldrsh r0, [r0, r1]
	muls r0, r3, r0
	lsrs r3, r0, #6
	ldrb r0, [r5, #0x13]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x18
	ldr r1, [r5, #0x58]
	adds r1, r1, r2
	lsls r1, r1, #8
	asrs r1, r1, #0x10
	ldr r2, [r5, #0x5c]
	adds r2, r2, r3
	lsls r2, r2, #8
	asrs r2, r2, #0x10
	movs r3, #0xc0
	lsls r3, r3, #2
	str r4, [sp]
	movs r4, #0x1e
	str r4, [sp, #4]
	movs r4, #0x20
	str r4, [sp, #8]
	ldr r4, [r5, #0x28]
	str r4, [sp, #0xc]
	bl sub_8079758
	ldrb r0, [r5, #0x13]
	adds r0, #1
	strb r0, [r5, #0x13]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #2
	bls _0806A3E8
	strb r6, [r5, #0x13]
_0806A3E8:
	ldrh r0, [r5, #0x32]
	movs r6, #3
	ands r6, r0
	cmp r6, #0
	beq _0806A3F4
	b _0806A590
_0806A3F4:
	mov r1, r8
	ldr r0, [r1]
	ldr r2, _0806A468 @ =0x00196225
	muls r0, r2, r0
	add r0, sl
	adds r4, r0, #0
	ldr r1, _0806A470 @ =0x000003FF
	ands r4, r1
	muls r0, r2, r0
	add r0, sl
	mov r2, r8
	str r0, [r2]
	movs r1, #0x50
	bl __umodsi3
	adds r3, r0, #0
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r4, r1
	lsls r0, r0, #1
	add r0, sb
	movs r2, #0
	ldrsh r0, [r0, r2]
	muls r0, r3, r0
	lsrs r2, r0, #6
	lsls r0, r4, #1
	add r0, sb
	movs r1, #0
	ldrsh r0, [r0, r1]
	muls r3, r0, r3
	ldr r1, [r5, #0x58]
	adds r1, r1, r2
	lsls r1, r1, #8
	asrs r1, r1, #0x10
	ldr r0, _0806A47C @ =gCamera
	ldr r2, [r0, #4]
	lsrs r3, r3, #0xe
	adds r3, #0x50
	adds r2, r2, r3
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	movs r3, #0x80
	lsls r3, r3, #2
	str r4, [sp]
	movs r4, #0x1e
	str r4, [sp, #4]
	str r6, [sp, #8]
	ldr r0, [r5, #0x28]
	str r0, [sp, #0xc]
	movs r0, #6
	bl sub_8079758
	b _0806A590
	.align 2, 0
_0806A460: .4byte 0x00000221
_0806A464: .4byte gPseudoRandom
_0806A468: .4byte 0x00196225
_0806A46C: .4byte 0x3C6EF35F
_0806A470: .4byte 0x000003FF
_0806A474: .4byte 0x000001FF
_0806A478: .4byte gSineTable
_0806A47C: .4byte gCamera
_0806A480:
	ldrh r1, [r5, #0x2e]
	movs r0, #1
	ands r0, r1
	adds r3, r1, #0
	cmp r0, #0
	beq _0806A4A0
	ldr r2, _0806A498 @ =gDispCnt
	ldrh r1, [r2]
	ldr r0, _0806A49C @ =0x0000FBFF
	ands r0, r1
	strh r0, [r2]
	b _0806A4AE
	.align 2, 0
_0806A498: .4byte gDispCnt
_0806A49C: .4byte 0x0000FBFF
_0806A4A0:
	ldr r0, _0806A50C @ =gDispCnt
	ldrh r1, [r0]
	movs r4, #0x80
	lsls r4, r4, #3
	adds r2, r4, #0
	orrs r1, r2
	strh r1, [r0]
_0806A4AE:
	subs r0, r3, #1
	strh r0, [r5, #0x2e]
	lsls r0, r0, #0x10
	adds r7, r5, #0
	adds r7, #0xf0
	cmp r0, #0
	bne _0806A590
	movs r4, #0
	ldr r6, _0806A510 @ =0x000003FF
_0806A4C0:
	ldr r1, [r5, #0x58]
	lsls r1, r1, #8
	asrs r1, r1, #0x10
	ldr r2, [r5, #0x5c]
	lsls r2, r2, #8
	asrs r2, r2, #0x10
	str r4, [sp]
	movs r0, #0x1e
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	ldr r0, [r5, #0x28]
	str r0, [sp, #0xc]
	movs r0, #6
	movs r3, #0x80
	lsls r3, r3, #2
	bl sub_8079758
	adds r0, r4, #0
	adds r0, #0x80
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, r6
	bls _0806A4C0
	ldr r0, _0806A514 @ =0x00000221
	bl m4aSongNumStart
	ldr r2, _0806A50C @ =gDispCnt
	ldrh r1, [r2]
	ldr r0, _0806A518 @ =0x0000FBFF
	ands r0, r1
	strh r0, [r2]
	movs r0, #0xa
	strh r0, [r5, #0x2e]
	movs r0, #0xd2
	strh r0, [r5, #0x2c]
	b _0806A590
	.align 2, 0
_0806A50C: .4byte gDispCnt
_0806A510: .4byte 0x000003FF
_0806A514: .4byte 0x00000221
_0806A518: .4byte 0x0000FBFF
_0806A51C:
	ldrh r0, [r5, #0x2e]
	subs r0, #1
	strh r0, [r5, #0x2e]
	lsls r0, r0, #0x10
	adds r7, r5, #0
	adds r7, #0xf0
	cmp r0, #0
	bne _0806A590
	movs r4, #0
	ldr r6, _0806A56C @ =0x000003FF
_0806A530:
	ldr r1, [r5, #0x58]
	lsls r1, r1, #8
	asrs r1, r1, #0x10
	ldr r2, [r5, #0x5c]
	lsls r2, r2, #8
	asrs r2, r2, #0x10
	str r4, [sp]
	movs r0, #0x1e
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	ldr r0, [r5, #0x28]
	str r0, [sp, #0xc]
	movs r0, #6
	movs r3, #0x80
	lsls r3, r3, #2
	bl sub_8079758
	adds r0, r4, #0
	adds r0, #0x80
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, r6
	bls _0806A530
	movs r0, #0xa
	strh r0, [r5, #0x2e]
	movs r0, #0xfa
	lsls r0, r0, #2
	strh r0, [r5, #0x2c]
	b _0806A590
	.align 2, 0
_0806A56C: .4byte 0x000003FF
_0806A570:
	ldrh r0, [r5, #0x2e]
	subs r0, #1
	strh r0, [r5, #0x2e]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	adds r7, r5, #0
	adds r7, #0xf0
	cmp r0, #0
	bne _0806A590
	strh r0, [r5, #0x32]
	ldr r0, _0806A5CC @ =0x000003F2
	strh r0, [r5, #0x2c]
	ldr r0, _0806A5D0 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0806A5D4 @ =sub_8068D00
	str r0, [r1, #8]
_0806A590:
	adds r3, r7, #0
	ldr r0, [r5, #0x58]
	asrs r0, r0, #8
	ldr r2, _0806A5D8 @ =gCamera
	ldr r1, [r2]
	subs r0, r0, r1
	strh r0, [r3, #0x10]
	ldr r0, [r5, #0x5c]
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	strh r0, [r3, #0x12]
	ldr r1, [r5, #0x50]
	ldr r0, [r1, #4]
	movs r2, #0x80
	lsls r2, r2, #0x14
	orrs r0, r2
	str r0, [r1, #4]
	ldr r1, [r5, #0x54]
	ldr r0, [r1, #4]
	orrs r0, r2
	str r0, [r1, #4]
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806A5CC: .4byte 0x000003F2
_0806A5D0: .4byte gCurTask
_0806A5D4: .4byte sub_8068D00
_0806A5D8: .4byte gCamera

	thumb_func_start sub_806A5DC
sub_806A5DC: @ 0x0806A5DC
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r4, #0
	adds r5, #0xf0
	ldrb r1, [r4, #0xc]
	cmp r1, #0
	beq _0806A694
	movs r0, #0xd
	ldrsb r0, [r4, r0]
	cmp r0, #0
	bne _0806A694
	subs r1, #1
	strb r1, [r4, #0xc]
	ldr r0, _0806A610 @ =gStageData
	ldrb r0, [r0, #1]
	cmp r0, #0
	bne _0806A614
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #4
	bne _0806A622
	movs r0, #0x33
	bl sub_80299D4
	b _0806A622
	.align 2, 0
_0806A610: .4byte gStageData
_0806A614:
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #3
	bne _0806A622
	movs r0, #0x33
	bl sub_80299D4
_0806A622:
	movs r0, #0x97
	lsls r0, r0, #3
	strh r0, [r5, #0xc]
	movs r0, #2
	strb r0, [r5, #0x1a]
	movs r0, #0x7a
	strb r0, [r4, #0xd]
	ldr r0, _0806A67C @ =0x000004B9
	movs r1, #0
	movs r2, #0x7a
	movs r3, #1
	bl sub_8078DB0
	ldr r0, _0806A680 @ =0x000004BB
	movs r1, #0
	movs r2, #0x7a
	movs r3, #0
	bl sub_8078DB0
	ldr r0, _0806A684 @ =0x000004BA
	movs r1, #0
	movs r2, #0x7a
	movs r3, #0
	bl sub_8078DB0
	movs r0, #0xeb
	bl m4aSongNumStart
	bl sub_807A468
	ldr r1, _0806A688 @ =gStageData
	ldrb r0, [r1, #3]
	cmp r0, #5
	bne _0806A694
	ldrb r0, [r1, #6]
	cmp r0, #0
	bne _0806A68C
	ldrb r0, [r4, #0xc]
	cmp r0, #0
	beq _0806A694
	adds r1, r0, #0
	movs r0, #3
	bl sub_8027674
	b _0806A694
	.align 2, 0
_0806A67C: .4byte 0x000004B9
_0806A680: .4byte 0x000004BB
_0806A684: .4byte 0x000004BA
_0806A688: .4byte gStageData
_0806A68C:
	ldrb r1, [r4, #0xc]
	movs r0, #4
	bl sub_8027674
_0806A694:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806A69C
sub_0806A69C: @ 0x0806A69C
	push {r4, r5, r6, r7, lr}
	ldr r1, _0806A6F8 @ =gStageData
	adds r7, r1, #0
	adds r7, #0x88
	ldr r1, [r7]
	ldrh r5, [r1, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r6, r5, r1
	ldrb r2, [r0, #2]
	movs r1, #0x7f
	ands r1, r2
	ldrb r2, [r0, #3]
	ldrb r0, [r0, #4]
	lsls r0, r0, #8
	orrs r2, r0
	cmp r1, #1
	bne _0806A704
	movs r3, #0
	strb r3, [r6, #0xc]
	ldr r0, _0806A6FC @ =0x03000138
	adds r5, r5, r0
	ldr r1, [r6, #0x50]
	ldr r0, [r1, #4]
	movs r4, #0x80
	lsls r4, r4, #0x14
	orrs r0, r4
	str r0, [r1, #4]
	ldr r2, [r6, #0x54]
	ldr r0, [r2, #4]
	orrs r0, r4
	str r0, [r2, #4]
	strh r3, [r6, #0x32]
	strh r3, [r6, #0x2c]
	strh r3, [r6, #0x2e]
	adds r0, r5, #0
	bl ResolvePlayerSpriteCollision
	ldr r1, [r6, #0x54]
	adds r0, r5, #0
	bl ResolvePlayerSpriteCollision
	ldr r1, [r7]
	ldr r0, _0806A700 @ =sub_806A760
	str r0, [r1, #8]
	b _0806A720
	.align 2, 0
_0806A6F8: .4byte gStageData
_0806A6FC: .4byte 0x03000138
_0806A700: .4byte sub_806A760
_0806A704:
	cmp r1, #1
	blt _0806A720
	cmp r1, #4
	bgt _0806A720
	cmp r1, #3
	blt _0806A720
	ldrb r1, [r6, #0xc]
	lsls r0, r2, #0x18
	lsrs r0, r0, #0x18
	cmp r1, r0
	beq _0806A720
	adds r0, r6, #0
	bl sub_806A5DC
_0806A720:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806A728
sub_806A728: @ 0x0806A728
	push {r4, lr}
	ldr r0, _0806A75C @ =gCurTask
	ldr r0, [r0]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	adds r0, r4, #0
	bl sub_8069814
	adds r0, r4, #0
	bl sub_8069360
	adds r0, r4, #0
	bl sub_8069578
	adds r0, r4, #0
	bl sub_806A854
	adds r0, r4, #0
	bl sub_806A898
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806A75C: .4byte gCurTask

	thumb_func_start sub_806A760
sub_806A760: @ 0x0806A760
	push {r4, lr}
	ldr r0, _0806A79C @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_8069DEC
	ldr r0, _0806A7A0 @ =gDispCnt
	ldrh r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r1
	cmp r0, #0
	beq _0806A794
	adds r0, r4, #0
	bl sub_8069578
	adds r0, r4, #0
	bl sub_806A854
	adds r0, r4, #0
	bl sub_806A898
_0806A794:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806A79C: .4byte gCurTask
_0806A7A0: .4byte gDispCnt

	thumb_func_start sub_806A7A4
sub_806A7A4: @ 0x0806A7A4
	push {r4, lr}
	ldr r0, _0806A7E0 @ =gCurTask
	ldr r0, [r0]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	ldr r1, [r4, #0x50]
	ldr r0, [r1, #4]
	movs r2, #0x80
	lsls r2, r2, #0x14
	orrs r0, r2
	str r0, [r1, #4]
	ldr r1, [r4, #0x54]
	ldr r0, [r1, #4]
	orrs r0, r2
	str r0, [r1, #4]
	adds r0, r4, #0
	bl sub_8069578
	adds r0, r4, #0
	bl sub_806A854
	adds r0, r4, #0
	bl sub_806A898
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806A7E0: .4byte gCurTask

	thumb_func_start sub_806A7E4
sub_806A7E4: @ 0x0806A7E4
	push {r4, lr}
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, [r4, #0x28]
	bl VramFree
	ldr r0, [r4, #0x48]
	cmp r0, #0
	beq _0806A802
	bl VramFree
	movs r0, #0
	str r0, [r4, #0x48]
_0806A802:
	ldr r0, [r4, #0x4c]
	cmp r0, #0
	beq _0806A810
	bl VramFree
	movs r0, #0
	str r0, [r4, #0x4c]
_0806A810:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806A818
sub_806A818: @ 0x0806A818
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r0, #0x9c
	lsls r0, r0, #1
	adds r5, r4, r0
	ldr r1, [r4, #0x50]
	ldr r0, [r1, #4]
	movs r3, #0x80
	lsls r3, r3, #0x14
	orrs r0, r3
	str r0, [r1, #4]
	ldr r2, [r4, #0x54]
	ldr r0, [r2, #4]
	orrs r0, r3
	str r0, [r2, #4]
	movs r0, #0
	strh r0, [r4, #0x32]
	strh r0, [r4, #0x2c]
	strh r0, [r4, #0x2e]
	adds r0, r5, #0
	bl ResolvePlayerSpriteCollision
	ldr r1, [r4, #0x54]
	adds r0, r5, #0
	bl ResolvePlayerSpriteCollision
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806A854
sub_806A854: @ 0x0806A854
	push {r4, lr}
	adds r3, r0, #0
	movs r0, #0x9c
	lsls r0, r0, #1
	adds r4, r3, r0
	adds r0, r3, #0
	adds r0, #0xe8
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r2, _0806A890 @ =gCamera
	ldr r1, [r2]
	subs r0, r0, r1
	strh r0, [r4, #0x10]
	adds r0, r3, #0
	adds r0, #0xec
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806A890: .4byte gCamera

	thumb_func_start sub_806A894
sub_806A894: @ 0x0806A894
	bx lr
	.align 2, 0

	thumb_func_start sub_806A898
sub_806A898: @ 0x0806A898
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	movs r1, #0xb0
	lsls r1, r1, #1
	adds r4, r0, r1
	ldr r1, [r0, #0x58]
	asrs r1, r1, #8
	ldr r3, _0806A8FC @ =gCamera
	ldr r2, [r3]
	subs r6, r1, r2
	ldr r1, [r0, #0x5c]
	asrs r1, r1, #8
	ldr r2, [r3, #4]
	subs r7, r1, r2
	ldr r0, [r0, #0x34]
	lsls r0, r0, #8
	lsrs r0, r0, #0x10
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r0, r2
	ldr r2, _0806A900 @ =0x000003FF
	adds r1, r2, #0
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #1
	movs r5, #0x40
	str r5, [sp]
	lsls r1, r6, #0x10
	asrs r1, r1, #0x10
	str r1, [sp, #4]
	lsls r1, r7, #0x10
	asrs r1, r1, #0x10
	str r1, [sp, #8]
	ldr r1, _0806A904 @ =gBgAffineRegs
	str r1, [sp, #0xc]
	adds r1, r2, #0
	movs r3, #0x40
	bl sa2__sub_8003EE4
	strh r5, [r4, #0x10]
	movs r0, #0x68
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl sub_80BE46C
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806A8FC: .4byte gCamera
_0806A900: .4byte 0x000003FF
_0806A904: .4byte gBgAffineRegs

	thumb_func_start sub_806A908
sub_806A908: @ 0x0806A908
    movs r0, #0
	bx lr
	.align 2, 0
    
    @ Called on init of Boss 2
	thumb_func_start sub_806A90C
sub_806A90C: @ 0x0806A90C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r6, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	ldr r0, _0806A988 @ =sub_806CE2C
	movs r1, #0x92
	lsls r1, r1, #1
	movs r2, #0x84
	lsls r2, r2, #6
	ldr r3, _0806A98C @ =sub_806CEE4
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	mov r8, r0
	ldrh r2, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r7, r2, r0
	ldr r3, _0806A990 @ =gStageData
	adds r0, r3, #0
	adds r0, #0x88
	mov r1, r8
	str r1, [r0]
	movs r1, #0
	movs r0, #0
	strh r0, [r7, #0x28]
	lsls r4, r4, #8
	str r4, [r7, #8]
	lsls r5, r5, #8
	str r5, [r7, #0xc]
	str r6, [r7, #0x10]
	strb r1, [r7, #0x14]
	strb r1, [r7, #0x17]
	strb r1, [r7, #0x16]
	strh r0, [r7, #0x2a]
	strb r1, [r7, #0x15]
	ldr r4, _0806A994 @ =0x03000026
	adds r0, r2, r4
	strb r1, [r0]
	ldr r0, _0806A998 @ =0x03000027
	adds r2, r2, r0
	strb r1, [r2]
	ldr r0, _0806A99C @ =0x0005DA00
	str r0, [r7]
	movs r0, #0xdc
	lsls r0, r0, #8
	str r0, [r7, #4]
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r7, #0x48]
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [r7, #0x4c]
	ldrb r0, [r3, #1]
	cmp r0, #0
	bne _0806A9A0
	movs r0, #8
	b _0806A9A2
	.align 2, 0
_0806A988: .4byte sub_806CE2C
_0806A98C: .4byte sub_806CEE4
_0806A990: .4byte gStageData
_0806A994: .4byte 0x03000026
_0806A998: .4byte 0x03000027
_0806A99C: .4byte 0x0005DA00
_0806A9A0:
	movs r0, #6
_0806A9A2:
	strb r0, [r7, #0x1d]
	adds r1, r7, #0
	adds r1, #0x24
	movs r4, #0
	movs r0, #1
	strb r0, [r1]
	subs r1, #4
	movs r0, #3
	strb r0, [r1]
	movs r1, #0
	movs r0, #0xbe
	lsls r0, r0, #5
	strh r0, [r7, #0x2c]
	adds r0, r7, #0
	adds r0, #0x25
	strb r1, [r0]
	ldr r0, _0806AA24 @ =gPlayers
	str r0, [r7, #0x50]
	movs r1, #0xa8
	lsls r1, r1, #1
	adds r0, r0, r1
	str r0, [r7, #0x54]
	adds r0, r7, #0
	bl sub_806AA40
	ldr r2, _0806AA28 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #3
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	str r4, [sp, #4]
	ldr r2, _0806AA2C @ =0x040000D4
	add r4, sp, #4
	str r4, [r2]
	ldr r0, _0806AA30 @ =gBgCntRegs
	ldrh r1, [r0, #4]
	movs r0, #0xc
	ands r0, r1
	lsls r0, r0, #0xc
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r0, r0, r1
	str r0, [r2, #4]
	ldr r0, _0806AA34 @ =0x85000010
	str r0, [r2, #8]
	ldr r0, [r2, #8]
	adds r0, r7, #0
	bl sub_806AAA4
	ldr r1, _0806AA38 @ =gPseudoRandom
	ldr r0, _0806AA3C @ =gUnknown_03003574
	ldr r0, [r0]
	str r0, [r1]
	bl sub_807A4BC
	mov r0, r8
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0806AA24: .4byte gPlayers
_0806AA28: .4byte gDispCnt
_0806AA2C: .4byte 0x040000D4
_0806AA30: .4byte gBgCntRegs
_0806AA34: .4byte 0x85000010
_0806AA38: .4byte gPseudoRandom
_0806AA3C: .4byte gUnknown_03003574

	thumb_func_start sub_806AA40
sub_806AA40: @ 0x0806AA40
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r0, #0x23
	movs r4, #0
	strb r4, [r0]
	movs r1, #0
	movs r0, #0x78
	strh r0, [r6, #0x2e]
	strh r4, [r6, #0x30]
	strb r1, [r6, #0x1b]
	strb r1, [r6, #0x1c]
	ldr r0, _0806AA9C @ =0xFFFFFF00
	str r0, [r6, #0x40]
	str r4, [r6, #0x44]
	str r4, [r6, #0x38]
	str r4, [r6, #0x3c]
	strb r1, [r6, #0x1e]
	strb r1, [r6, #0x1f]
	adds r0, r6, #0
	adds r0, #0x21
	strb r1, [r0]
	strb r1, [r6, #0x18]
	strb r1, [r6, #0x1a]
	mov r0, sp
	strh r4, [r0]
	adds r1, r6, #0
	adds r1, #0xc0
	ldr r5, _0806AAA0 @ =0x01000002
	adds r2, r5, #0
	bl CpuSet
	mov r0, sp
	adds r0, #2
	strh r4, [r0]
	movs r2, #0x90
	lsls r2, r2, #1
	adds r1, r6, r2
	adds r2, r5, #0
	bl CpuSet
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0806AA9C: .4byte 0xFFFFFF00
_0806AAA0: .4byte 0x01000002

	thumb_func_start sub_806AAA4
sub_806AAA4: @ 0x0806AAA4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r7, r0, #0
	movs r0, #0x84
	bl VramMalloc
	mov r8, r0
	adds r0, r7, #0
	adds r0, #0x6c
	ldr r1, _0806ABC0 @ =0x06004040
	str r1, [r7, #0x6c]
	ldr r5, _0806ABC4 @ =gUnknown_080D5780
	ldrh r1, [r5]
	movs r2, #0
	mov sb, r2
	movs r6, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r5, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	movs r1, #0x28
	strh r1, [r0, #0x10]
	strh r1, [r0, #0x12]
	movs r1, #0xa0
	lsls r1, r1, #3
	strh r1, [r0, #0x14]
	strh r6, [r0, #0xe]
	strh r6, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	mov r2, sb
	strb r2, [r0, #0x1f]
	movs r1, #0x88
	lsls r1, r1, #9
	str r1, [r0, #8]
	movs r1, #1
	rsbs r1, r1, #0
	mov sl, r1
	str r1, [r0, #0x20]
	bl sa2__sub_80036E0
	adds r4, r7, #0
	adds r4, #0x94
	adds r1, r7, #0
	adds r1, #0x60
	mov r2, r8
	str r2, [r4]
	ldr r0, [r5, #0x14]
	lsls r0, r0, #5
	add r8, r0
	ldrh r0, [r5, #0x10]
	strh r0, [r4, #0xc]
	ldrb r0, [r5, #0x12]
	strb r0, [r4, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r4, #0x1b]
	ldr r0, [r7, #0x48]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r7, #0x4c]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	movs r0, #0xc8
	lsls r0, r0, #3
	strh r0, [r4, #0x14]
	strh r6, [r4, #0xe]
	strh r6, [r4, #0x16]
	movs r0, #0x10
	strb r0, [r4, #0x1c]
	mov r2, sb
	strb r2, [r4, #0x1f]
	ldr r0, _0806ABC8 @ =0x0000106A
	str r0, [r4, #8]
	mov r0, sl
	str r0, [r4, #0x20]
	movs r2, #0x80
	lsls r2, r2, #1
	strh r2, [r1]
	ldrh r0, [r4, #0x10]
	strh r0, [r1, #6]
	ldrh r0, [r4, #0x12]
	strh r0, [r1, #8]
	strh r2, [r1, #2]
	strh r2, [r1, #4]
	adds r0, r4, #0
	bl TransformSprite
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	adds r0, #0xc4
	mov r1, r8
	str r1, [r0]
	movs r2, #0xe8
	lsls r2, r2, #4
	add r8, r2
	ldr r1, _0806ABCC @ =0x000004F9
	strh r1, [r0, #0xc]
	mov r1, sb
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r7]
	asrs r1, r1, #8
	ldr r3, _0806ABD0 @ =gCamera
	ldr r2, [r3]
	subs r1, r1, r2
	strh r1, [r0, #0x10]
	ldr r1, [r7, #4]
	asrs r1, r1, #8
	ldr r2, [r3, #4]
	subs r1, r1, r2
	strh r1, [r0, #0x12]
	strh r6, [r0, #0x14]
	strh r6, [r0, #0xe]
	strh r6, [r0, #0x16]
	movs r2, #0x10
	strb r2, [r0, #0x1c]
	mov r1, sb
	strb r1, [r0, #0x1f]
	str r6, [r0, #8]
	mov r2, sl
	str r2, [r0, #0x20]
	bl UpdateSpriteAnimation
	mov r0, r8
	str r0, [r7, #0x34]
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806ABC0: .4byte 0x06004040
_0806ABC4: .4byte gUnknown_080D5780
_0806ABC8: .4byte 0x0000106A
_0806ABCC: .4byte 0x000004F9
_0806ABD0: .4byte gCamera

	thumb_func_start sub_806ABD4
sub_806ABD4: @ 0x0806ABD4
	push {r4, r5, r6, lr}
	ldr r0, _0806ABF4 @ =gCurTask
	ldr r2, [r0]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r1, r0
	ldr r0, [r6, #0x10]
	ldrb r0, [r0]
	cmp r0, #3
	bne _0806ABF8
	adds r0, r2, #0
	bl TaskDestroy
	b _0806AC62
	.align 2, 0
_0806ABF4: .4byte gCurTask
_0806ABF8:
	cmp r0, #2
	bne _0806AC62
	movs r1, #0
	ldr r4, _0806AC68 @ =gPlayers
	ldr r3, _0806AC6C @ =0xFFFFFB87
	ldr r2, _0806AC70 @ =0x0000018F
_0806AC04:
	lsls r0, r1, #0x10
	asrs r1, r0, #0x10
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r4
	ldr r0, [r0, #0x10]
	asrs r0, r0, #8
	adds r0, r0, r3
	cmp r0, r2
	bhi _0806AC62
	adds r0, r1, #1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	ble _0806AC04
	movs r0, #0x1a
	bl m4aSongNumStop
	movs r0, #0x32
	bl sub_80299D4
	ldr r4, [r6, #0x34]
	movs r5, #0x90
	lsls r5, r5, #2
	adds r4, r4, r5
	adds r0, r6, #0
	adds r0, #0x1b
	adds r1, r4, #0
	bl sub_806BD10
	adds r0, r6, #0
	adds r0, #0x1c
	adds r1, r4, #0
	bl sub_806BEC0
	adds r4, r4, r5
	str r4, [r6, #0x34]
	movs r0, #0xc0
	strb r0, [r6, #0x1e]
	ldr r0, _0806AC74 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0806AC78 @ =sub_806AC7C
	str r0, [r1, #8]
_0806AC62:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0806AC68: .4byte gPlayers
_0806AC6C: .4byte 0xFFFFFB87
_0806AC70: .4byte 0x0000018F
_0806AC74: .4byte gCurTask
_0806AC78: .4byte sub_806AC7C

	thumb_func_start sub_806AC7C
sub_806AC7C: @ 0x0806AC7C
	push {r4, r5, r6, r7, lr}
	movs r4, #0
	ldr r2, _0806ACAC @ =gCurTask
	ldr r0, [r2]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	ldr r0, [r5, #0x10]
	ldrb r0, [r0]
	mov ip, r2
	cmp r0, #2
	bne _0806ACF2
	movs r0, #1
	strb r0, [r5, #0x1b]
	strb r0, [r5, #0x1c]
	movs r2, #0
	ldr r7, _0806ACB0 @ =sub_806AD04
	ldr r6, _0806ACB4 @ =gPlayers
_0806ACA2:
	cmp r2, #0
	bne _0806ACBC
	ldr r0, _0806ACB8 @ =gStageData
	ldrb r1, [r0, #6]
	b _0806ACC6
	.align 2, 0
_0806ACAC: .4byte gCurTask
_0806ACB0: .4byte sub_806AD04
_0806ACB4: .4byte gPlayers
_0806ACB8: .4byte gStageData
_0806ACBC:
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	lsls r1, r1, #0x1e
	lsrs r1, r1, #0x1e
_0806ACC6:
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r4, r0, r6
	movs r3, #0
	adds r1, r4, #0
	adds r1, #0x27
	ldrb r0, [r1]
	cmp r0, #0
	bne _0806ACE0
	movs r3, #1
_0806ACE0:
	strb r3, [r1]
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #1
	bls _0806ACA2
	mov r1, ip
	ldr r0, [r1]
	str r7, [r0, #8]
_0806ACF2:
	adds r0, r5, #0
	bl sub_806D07C
	adds r0, r5, #0
	bl sub_806BC50
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_806AD04
sub_806AD04: @ 0x0806AD04
	push {r4, r5, r6, r7, lr}
	ldr r7, _0806ADC0 @ =gCurTask
	ldr r0, [r7]
	ldrh r6, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r6, r0
	ldr r0, [r4]
	ldr r1, [r4, #0x38]
	adds r0, r0, r1
	str r0, [r4]
	ldr r0, [r4, #4]
	ldr r1, [r4, #0x3c]
	adds r0, r0, r1
	str r0, [r4, #4]
	adds r0, r4, #0
	bl sub_806B094
	adds r0, r4, #0
	bl sub_806CEE8
	ldr r1, _0806ADC4 @ =gSineTable
	ldrb r0, [r4, #0x1e]
	lsls r0, r0, #3
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r0, r2
	adds r0, r0, r1
	ldrh r2, [r0]
	lsls r2, r2, #0x10
	asrs r2, r2, #0x19
	str r2, [r4, #0x38]
	ldrb r0, [r4, #0x1e]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x19
	ldr r1, [r4, #0x44]
	adds r0, r0, r1
	str r0, [r4, #0x3c]
	ldr r0, [r4, #0x40]
	adds r2, r2, r0
	str r2, [r4, #0x38]
	ldrb r0, [r4, #0x1e]
	movs r5, #0
	strb r0, [r4, #0x1f]
	adds r0, r4, #0
	bl sub_806D07C
	adds r0, r4, #0
	bl sub_806BC50
	ldr r0, [r4, #0x38]
	cmp r0, #0
	bge _0806AD76
	rsbs r0, r0, #0
_0806AD76:
	cmp r0, #1
	bgt _0806ADBA
	ldrb r0, [r4, #0x1e]
	cmp r0, #1
	bhi _0806ADBA
	bl sub_807A4A8
	adds r0, r4, #0
	bl sub_806AA40
	ldr r0, _0806ADC8 @ =0x03000024
	adds r1, r6, r0
	movs r0, #0xff
	strb r0, [r1]
	ldr r1, _0806ADCC @ =0x03000020
	adds r0, r6, r1
	strb r5, [r0]
	movs r0, #0x80
	str r0, [r4, #0x40]
	strh r5, [r4, #0x2c]
	strh r5, [r4, #0x2e]
	ldr r2, _0806ADD0 @ =0x03000094
	adds r1, r6, r2
	ldr r2, _0806ADD4 @ =gUnknown_080D5780
	ldrh r0, [r2, #0x10]
	strh r0, [r1, #0xc]
	ldrb r0, [r2, #0x12]
	strb r0, [r1, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r1, #0x1b]
	ldr r1, [r7]
	ldr r0, _0806ADD8 @ =sub_806ADDC
	str r0, [r1, #8]
_0806ADBA:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806ADC0: .4byte gCurTask
_0806ADC4: .4byte gSineTable
_0806ADC8: .4byte 0x03000024
_0806ADCC: .4byte 0x03000020
_0806ADD0: .4byte 0x03000094
_0806ADD4: .4byte gUnknown_080D5780
_0806ADD8: .4byte sub_806ADDC

	thumb_func_start sub_806ADDC
sub_806ADDC: @ 0x0806ADDC
	push {r4, r5, lr}
	ldr r0, _0806AE04 @ =gCurTask
	ldr r1, [r0]
	ldrh r5, [r1, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	ldrh r0, [r4, #0x2e]
	adds r0, #1
	strh r0, [r4, #0x2e]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x3c
	bls _0806AE0C
	movs r0, #0
	strh r0, [r4, #0x2e]
	ldr r0, _0806AE08 @ =sub_806AE3C
	str r0, [r1, #8]
	b _0806AE2E
	.align 2, 0
_0806AE04: .4byte gCurTask
_0806AE08: .4byte sub_806AE3C
_0806AE0C:
	adds r0, r4, #0
	bl sub_806D07C
	adds r0, r4, #0
	bl sub_806BC50
	cmp r0, #0
	bne _0806AE2E
	ldr r0, _0806AE34 @ =0x03000094
	adds r1, r5, r0
	ldr r2, _0806AE38 @ =gUnknown_080D5780
	ldrh r0, [r2, #0x10]
	strh r0, [r1, #0xc]
	ldrb r0, [r2, #0x12]
	strb r0, [r1, #0x1a]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
_0806AE2E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806AE34: .4byte 0x03000094
_0806AE38: .4byte gUnknown_080D5780

	thumb_func_start sub_806AE3C
sub_806AE3C: @ 0x0806AE3C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r0, _0806AEC0 @ =gCurTask
	mov r8, r0
	ldr r0, [r0]
	ldrh r5, [r0, #6]
	movs r4, #0xc0
	lsls r4, r4, #0x12
	adds r4, r5, r4
	ldr r1, [r4]
	asrs r3, r1, #8
	lsrs r1, r1, #0x10
	ldrh r2, [r4, #6]
	ldr r6, _0806AEC4 @ =0x03000058
	adds r0, r5, r6
	movs r6, #0
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x1b
	strb r3, [r0]
	ldr r3, [r4, #4]
	asrs r3, r3, #8
	adds r3, #0x26
	ldr r7, _0806AEC8 @ =0x03000059
	adds r4, r5, r7
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x1b
	strb r3, [r4]
	ldr r3, _0806AECC @ =0x0300005A
	adds r4, r5, r3
	movs r3, #0x1c
	strb r3, [r4]
	adds r7, #2
	adds r4, r5, r7
	movs r3, #0xa
	strb r3, [r4]
	ldr r4, _0806AED0 @ =0x0300005C
	adds r3, r5, r4
	movs r4, #1
	strb r4, [r3]
	adds r7, #2
	adds r3, r5, r7
	strb r6, [r3]
	adds r7, #1
	adds r3, r5, r7
	strb r6, [r3]
	ldr r6, _0806AED4 @ =0x0300005F
	adds r3, r5, r6
	strb r4, [r3]
	ldrb r3, [r0]
	subs r7, #0x3c
	adds r5, r5, r7
	strb r3, [r5]
	movs r3, #0
	bl CreateEntity_BlueButton @ NOTE(Jace)::What..?
	mov r0, r8
	ldr r1, [r0]
	ldr r0, _0806AED8 @ =sub_806AEDC
	str r0, [r1, #8]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806AEC0: .4byte gCurTask
_0806AEC4: .4byte 0x03000058
_0806AEC8: .4byte 0x03000059
_0806AECC: .4byte 0x0300005A
_0806AED0: .4byte 0x0300005C
_0806AED4: .4byte 0x0300005F
_0806AED8: .4byte sub_806AEDC

	thumb_func_start sub_806AEDC
sub_806AEDC: @ 0x0806AEDC
	push {r4, r5, r6, lr}
	ldr r0, _0806AF54 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	ldrh r0, [r5, #0x30]
	cmp r0, #0
	beq _0806AEFA
	subs r0, #1
	strh r0, [r5, #0x30]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0806AF0E
_0806AEFA:
	movs r0, #0xfa
	lsls r0, r0, #1
	str r0, [r5, #0x38]
	ldr r1, [r5, #0x40]
	asrs r1, r1, #1
	str r1, [r5, #0x40]
	str r0, [r5, #0x3c]
	ldr r0, [r5, #0x44]
	asrs r0, r0, #1
	str r0, [r5, #0x44]
_0806AF0E:
	ldr r0, [r5]
	ldr r1, [r5, #0x38]
	adds r0, r0, r1
	str r0, [r5]
	ldr r0, [r5, #4]
	ldr r1, [r5, #0x3c]
	adds r0, r0, r1
	str r0, [r5, #4]
	adds r0, r5, #0
	bl sub_806B094
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	ldrb r0, [r5, #0x1d]
	cmp r0, #1
	bne _0806AF5C
	ldr r1, _0806AF58 @ =gSineTable
	ldrb r0, [r5, #0x1e]
	lsls r0, r0, #3
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r0, r2
	adds r0, r0, r1
	ldrh r0, [r0]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x17
	str r0, [r5, #0x38]
	ldrb r0, [r5, #0x1e]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x17
	b _0806AF7E
	.align 2, 0
_0806AF54: .4byte gCurTask
_0806AF58: .4byte gSineTable
_0806AF5C:
	ldr r1, _0806AFA4 @ =gSineTable
	ldrb r0, [r5, #0x1e]
	lsls r0, r0, #3
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r0, r2
	adds r0, r0, r1
	ldrh r0, [r0]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x18
	str r0, [r5, #0x38]
	ldrb r0, [r5, #0x1e]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x18
_0806AF7E:
	str r0, [r5, #0x3c]
	ldr r0, [r5, #0x3c]
	ldr r1, [r5, #0x44]
	adds r0, r0, r1
	str r0, [r5, #0x3c]
	ldr r0, [r5, #0x38]
	ldr r2, [r5, #0x40]
	adds r3, r0, r2
	str r3, [r5, #0x38]
	ldrh r0, [r5, #0x30]
	adds r4, r0, #0
	cmp r4, #0
	beq _0806AFD6
	cmp r2, #0
	bge _0806AFA8
	movs r2, #0x80
	lsls r2, r2, #2
	b _0806AFAE
	.align 2, 0
_0806AFA4: .4byte gSineTable
_0806AFA8:
	cmp r2, #0
	ble _0806AFB2
	ldr r2, _0806AFC0 @ =0xFFFFFE00
_0806AFAE:
	adds r0, r3, r2
	str r0, [r5, #0x38]
_0806AFB2:
	cmp r1, #0
	bge _0806AFC4
	ldr r0, [r5, #0x3c]
	movs r1, #0x80
	lsls r1, r1, #2
	adds r0, r0, r1
	b _0806AFCE
	.align 2, 0
_0806AFC0: .4byte 0xFFFFFE00
_0806AFC4:
	cmp r1, #0
	ble _0806AFD0
	ldr r0, [r5, #0x3c]
	ldr r2, _0806B01C @ =0xFFFFFE00
	adds r0, r0, r2
_0806AFCE:
	str r0, [r5, #0x3c]
_0806AFD0:
	lsls r0, r4, #0x10
	cmp r0, #0
	bne _0806AFE0
_0806AFD6:
	adds r0, r5, #0
	bl sub_806D01C
	ldr r0, _0806B020 @ =0x0000FFFF
	strh r0, [r5, #0x30]
_0806AFE0:
	adds r0, r5, #0
	bl sub_806CEE8
	ldrb r0, [r5, #0x1e]
	strb r0, [r5, #0x1f]
	adds r0, r5, #0
	bl sub_806D07C
	adds r0, r5, #0
	bl sub_806BC50
	cmp r6, #0
	beq _0806B000
	adds r0, r5, #0
	bl sub_806D01C
_0806B000:
	adds r0, r5, #0
	bl sub_806B844
	cmp r0, #1
	bne _0806B02C
	ldr r0, _0806B024 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0806B028 @ =sub_806C1C8
	str r0, [r1, #8]
	adds r1, r5, #0
	adds r1, #0x5f
	movs r0, #0xff
	b _0806B08C
	.align 2, 0
_0806B01C: .4byte 0xFFFFFE00
_0806B020: .4byte 0x0000FFFF
_0806B024: .4byte gCurTask
_0806B028: .4byte sub_806C1C8
_0806B02C:
	ldr r4, [r5]
	lsrs r0, r4, #0x10
	ldr r2, [r5, #4]
	asrs r3, r2, #8
	lsrs r2, r2, #0x10
	adds r1, r5, #0
	adds r1, #0x22
	ldrb r1, [r1]
	lsls r1, r1, #3
	lsls r0, r0, #8
	adds r1, r1, r0
	adds r0, r5, #0
	adds r0, #0x59
	ldrb r0, [r0]
	lsls r0, r0, #3
	lsls r2, r2, #8
	adds r0, r0, r2
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	lsls r4, r4, #8
	adds r3, #0x26
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	adds r0, r1, #0
	subs r0, #0x10
	asrs r4, r4, #0x10
	cmp r0, r4
	bge _0806B08E
	adds r0, #0x20
	cmp r0, r4
	ble _0806B08E
	lsls r0, r2, #0x10
	asrs r2, r0, #0x10
	adds r1, r2, #0
	subs r1, #8
	lsls r0, r3, #0x10
	asrs r3, r0, #0x10
	cmp r1, r3
	bge _0806B08E
	adds r0, r2, #0
	adds r0, #8
	cmp r0, r3
	ble _0806B08E
	adds r1, r5, #0
	adds r1, #0x5f
	movs r0, #2
_0806B08C:
	strb r0, [r1]
_0806B08E:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_806B094
sub_806B094: @ 0x0806B094
	push {r4, r5, lr}
	sub sp, #8
	adds r4, r0, #0
	movs r5, #0
	ldr r2, _0806B0F8 @ =gSineTable
	ldrb r1, [r4, #0x1f]
	lsls r0, r1, #3
	adds r0, r0, r2
	ldrh r0, [r0]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x16
	rsbs r0, r0, #0
	lsls r1, r1, #3
	movs r3, #0x80
	lsls r3, r3, #2
	adds r1, r1, r3
	adds r1, r1, r2
	ldrh r3, [r1]
	lsls r3, r3, #0x10
	asrs r3, r3, #0x16
	lsls r2, r0, #5
	ldr r1, [r4]
	adds r1, r1, r2
	lsls r2, r0, #2
	adds r1, r1, r2
	lsls r0, r0, #1
	adds r1, r1, r0
	lsls r2, r3, #5
	ldr r0, [r4, #4]
	adds r0, r0, r2
	lsls r2, r3, #2
	adds r0, r0, r2
	lsls r3, r3, #1
	adds r0, r0, r3
	asrs r1, r1, #8
	str r1, [sp]
	asrs r0, r0, #8
	str r0, [sp, #4]
	ldrb r1, [r4, #0x1e]
	adds r0, r1, #0
	adds r0, #0x60
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x3f
	bhi _0806B0FC
	adds r0, r4, #0
	mov r1, sp
	bl sub_806B144
	b _0806B138
	.align 2, 0
_0806B0F8: .4byte gSineTable
_0806B0FC:
	adds r0, r1, #0
	subs r0, #0x60
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x3f
	bhi _0806B112
	adds r0, r4, #0
	mov r1, sp
	bl sub_806B23C
	b _0806B138
_0806B112:
	adds r0, r1, #0
	subs r0, #0x20
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x3f
	bhi _0806B128
	adds r0, r4, #0
	mov r1, sp
	bl sub_806B2F4
	b _0806B138
_0806B128:
	cmp r0, #0xbf
	bls _0806B138
	adds r0, r4, #0
	mov r1, sp
	bl sub_806B3A4
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_0806B138:
	adds r0, r5, #0
	add sp, #8
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806B144
sub_806B144: @ 0x0806B144
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	adds r7, r0, #0
	adds r4, r1, #0
	movs r0, #0
	mov sb, r0
	ldr r0, [r4]
	ldr r1, [r4, #4]
	adds r6, r7, #0
	adds r6, #0x1e
	str r6, [sp]
	ldr r2, _0806B1D4 @ =sub_805203C
	mov r8, r2
	str r2, [sp, #4]
	movs r2, #0
	movs r3, #8
	bl sub_8052394
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	ldr r0, [r4]
	subs r0, #8
	ldr r1, [r4, #4]
	str r6, [sp]
	mov r2, r8
	str r2, [sp, #4]
	movs r2, #0
	movs r3, #8
	bl sub_8052394
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r2, r0, #0
	lsls r0, r0, #0x18
	lsls r1, r5, #0x18
	cmp r0, r1
	ble _0806B196
	adds r2, r5, #0
_0806B196:
	adds r4, r2, #0
	ldrb r0, [r7, #0x1e]
	cmp r0, #0x80
	bne _0806B1A2
	mov r0, sb
	strb r0, [r7, #0x1e]
_0806B1A2:
	ldrb r0, [r7, #0x1e]
	cmp r0, #0
	bne _0806B1AC
	movs r0, #0xa0
	strb r0, [r7, #0x1e]
_0806B1AC:
	movs r1, #1
	mov sb, r1
	adds r0, r7, #0
	adds r0, #0x20
	ldrb r1, [r0]
	adds r3, r0, #0
	cmp r1, #0
	bne _0806B1D8
	adds r0, #4
	mov r2, sb
	strb r2, [r0]
	ldr r1, [r7, #0x40]
	rsbs r1, r1, #0
	str r1, [r7, #0x44]
	ldr r1, [r7, #0x38]
	rsbs r1, r1, #0
	str r1, [r7, #0x3c]
	adds r2, r0, #0
	b _0806B1EC
	.align 2, 0
_0806B1D4: .4byte sub_805203C
_0806B1D8:
	adds r2, r7, #0
	adds r2, #0x24
	cmp r1, #1
	bne _0806B1EC
	movs r0, #0xff
	strb r0, [r2]
	ldr r0, [r7, #0x40]
	str r0, [r7, #0x44]
	ldr r0, [r7, #0x38]
	str r0, [r7, #0x3c]
_0806B1EC:
	ldrb r0, [r7, #0x1d]
	cmp r0, #1
	beq _0806B1F8
	ldr r0, [r7, #0x44]
	adds r0, #2
	str r0, [r7, #0x44]
_0806B1F8:
	ldr r0, [r7, #0x3c]
	cmp r0, #0
	ble _0806B202
	movs r0, #0xff
	b _0806B204
_0806B202:
	movs r0, #1
_0806B204:
	strb r0, [r2]
	movs r0, #0
	str r0, [r7, #0x38]
	str r0, [r7, #0x40]
	movs r0, #3
	strb r0, [r3]
	mov r0, sb
	cmp r0, #0
	beq _0806B22E
	cmp r0, #0
	ble _0806B224
	lsls r1, r4, #0x18
	asrs r1, r1, #0x10
	ldr r0, [r7]
	adds r0, r0, r1
	b _0806B22C
_0806B224:
	lsls r1, r4, #0x18
	asrs r1, r1, #0x10
	ldr r0, [r7]
	subs r0, r0, r1
_0806B22C:
	str r0, [r7]
_0806B22E:
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_806B23C
sub_806B23C: @ 0x0806B23C
	push {r4, lr}
	sub sp, #8
	adds r4, r0, #0
	ldr r0, [r1, #4]
	ldr r1, [r1]
	movs r3, #8
	rsbs r3, r3, #0
	adds r2, r4, #0
	adds r2, #0x1e
	str r2, [sp]
	ldr r2, _0806B288 @ =sub_805217C
	str r2, [sp, #4]
	movs r2, #0
	bl sub_8052394
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	ldrb r0, [r4, #0x1e]
	cmp r0, #0
	bne _0806B268
	movs r0, #0xa0
	strb r0, [r4, #0x1e]
_0806B268:
	adds r0, r4, #0
	adds r0, #0x20
	ldrb r1, [r0]
	adds r3, r0, #0
	cmp r1, #2
	bne _0806B28C
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0xff
	strb r0, [r1]
	ldr r0, [r4, #0x44]
	rsbs r0, r0, #0
	str r0, [r4, #0x40]
	ldr r0, [r4, #0x3c]
	rsbs r0, r0, #0
	b _0806B29E
	.align 2, 0
_0806B288: .4byte sub_805217C
_0806B28C:
	cmp r1, #3
	bne _0806B2A0
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #1
	strb r0, [r1]
	ldr r0, [r4, #0x44]
	str r0, [r4, #0x40]
	ldr r0, [r4, #0x3c]
_0806B29E:
	str r0, [r4, #0x38]
_0806B2A0:
	ldrb r0, [r4, #0x1d]
	cmp r0, #1
	beq _0806B2C0
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge _0806B2BA
	ldr r0, [r4, #0x40]
	subs r0, #2
	b _0806B2BE
_0806B2BA:
	ldr r0, [r4, #0x40]
	adds r0, #2
_0806B2BE:
	str r0, [r4, #0x40]
_0806B2C0:
	movs r0, #0
	str r0, [r4, #0x44]
	str r0, [r4, #0x3c]
	movs r0, #1
	strb r0, [r3]
	movs r0, #0xff
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0806B2EC
	cmp r0, #0
	ble _0806B2E2
	lsls r1, r2, #0x18
	asrs r1, r1, #0x10
	ldr r0, [r4, #4]
	adds r0, r0, r1
	b _0806B2EA
_0806B2E2:
	lsls r1, r2, #0x18
	asrs r1, r1, #0x10
	ldr r0, [r4, #4]
	subs r0, r0, r1
_0806B2EA:
	str r0, [r4, #4]
_0806B2EC:
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_806B2F4
sub_806B2F4: @ 0x0806B2F4
	push {r4, r5, lr}
	sub sp, #8
	adds r4, r0, #0
	ldr r0, [r1]
	ldr r1, [r1, #4]
	movs r3, #8
	rsbs r3, r3, #0
	adds r2, r4, #0
	adds r2, #0x1e
	str r2, [sp]
	ldr r2, _0806B33C @ =sub_805203C
	str r2, [sp, #4]
	movs r2, #0
	bl sub_8052394
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	ldrb r0, [r4, #0x1e]
	cmp r0, #0
	bne _0806B320
	movs r0, #0x40
	strb r0, [r4, #0x1e]
_0806B320:
	adds r0, r4, #0
	adds r0, #0x20
	ldrb r2, [r0]
	adds r5, r0, #0
	cmp r2, #0
	bne _0806B340
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0xff
	strb r0, [r1]
	ldr r0, [r4, #0x40]
	str r0, [r4, #0x44]
	ldr r0, [r4, #0x38]
	b _0806B354
	.align 2, 0
_0806B33C: .4byte sub_805203C
_0806B340:
	adds r1, r4, #0
	adds r1, #0x24
	cmp r2, #1
	bne _0806B356
	strb r2, [r1]
	ldr r0, [r4, #0x40]
	rsbs r0, r0, #0
	str r0, [r4, #0x44]
	ldr r0, [r4, #0x38]
	rsbs r0, r0, #0
_0806B354:
	str r0, [r4, #0x3c]
_0806B356:
	ldrb r0, [r4, #0x1d]
	cmp r0, #1
	beq _0806B362
	ldr r0, [r4, #0x44]
	adds r0, #2
	str r0, [r4, #0x44]
_0806B362:
	ldr r0, [r4, #0x3c]
	cmp r0, #0
	ble _0806B36C
	movs r0, #1
	b _0806B36E
_0806B36C:
	movs r0, #0xff
_0806B36E:
	strb r0, [r1]
	movs r0, #0
	str r0, [r4, #0x38]
	str r0, [r4, #0x40]
	movs r0, #2
	strb r0, [r5]
	movs r0, #0xff
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0806B39C
	cmp r0, #0
	ble _0806B392
	lsls r1, r3, #0x18
	asrs r1, r1, #0x10
	ldr r0, [r4]
	adds r0, r0, r1
	b _0806B39A
_0806B392:
	lsls r1, r3, #0x18
	asrs r1, r1, #0x10
	ldr r0, [r4]
	subs r0, r0, r1
_0806B39A:
	str r0, [r4]
_0806B39C:
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_806B3A4
sub_806B3A4: @ 0x0806B3A4
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r4, r0, #0
	movs r5, #0
	ldr r0, [r1, #4]
	ldr r1, [r1]
	adds r2, r4, #0
	adds r2, #0x1e
	str r2, [sp]
	ldr r2, _0806B3E8 @ =sub_805217C
	str r2, [sp, #4]
	movs r2, #0
	movs r3, #8
	bl sub_8052394
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	movs r7, #1
	ldrb r0, [r4, #0x1e]
	cmp r0, #0x80
	bne _0806B3D0
	strb r5, [r4, #0x1e]
_0806B3D0:
	adds r0, r4, #0
	adds r0, #0x20
	ldrb r1, [r0]
	adds r6, r0, #0
	cmp r1, #2
	bne _0806B3EC
	adds r0, #4
	strb r7, [r0]
	ldr r0, [r4, #0x44]
	str r0, [r4, #0x40]
	ldr r0, [r4, #0x3c]
	b _0806B402
	.align 2, 0
_0806B3E8: .4byte sub_805217C
_0806B3EC:
	cmp r1, #3
	bne _0806B404
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0xff
	strb r0, [r1]
	ldr r0, [r4, #0x44]
	rsbs r0, r0, #0
	str r0, [r4, #0x40]
	ldr r0, [r4, #0x3c]
	rsbs r0, r0, #0
_0806B402:
	str r0, [r4, #0x38]
_0806B404:
	ldrb r0, [r4, #0x1d]
	adds r2, r0, #0
	cmp r2, #1
	beq _0806B426
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge _0806B420
	ldr r0, [r4, #0x40]
	adds r0, #2
	b _0806B424
_0806B420:
	ldr r0, [r4, #0x40]
	subs r0, #2
_0806B424:
	str r0, [r4, #0x40]
_0806B426:
	ldr r1, [r4, #0x40]
	adds r0, r1, #0
	cmp r1, #0
	bge _0806B430
	rsbs r0, r1, #0
_0806B430:
	cmp r0, #0
	bgt _0806B454
	lsls r0, r2, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	beq _0806B452
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge _0806B44E
	adds r0, r1, #2
	b _0806B450
_0806B44E:
	subs r0, r1, #2
_0806B450:
	str r0, [r4, #0x40]
_0806B452:
	movs r5, #1
_0806B454:
	movs r0, #0
	str r0, [r4, #0x3c]
	str r0, [r4, #0x44]
	strb r0, [r6]
	adds r0, r7, #0
	cmp r0, #0
	beq _0806B47A
	cmp r0, #0
	ble _0806B470
	lsls r1, r3, #0x18
	asrs r1, r1, #0x10
	ldr r0, [r4, #4]
	adds r0, r0, r1
	b _0806B478
_0806B470:
	lsls r1, r3, #0x18
	asrs r1, r1, #0x10
	ldr r0, [r4, #4]
	subs r0, r0, r1
_0806B478:
	str r0, [r4, #4]
_0806B47A:
	adds r0, r5, #0
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_806B484
sub_806B484: @ 0x0806B484
	push {r4, r5, r6, r7, lr}
	adds r2, r0, #0
	movs r6, #5
	movs r4, #0
	ldrb r0, [r2, #0x14]
	cmp r0, #0
	beq _0806B498
	movs r6, #7
	subs r0, #1
	strb r0, [r2, #0x14]
_0806B498:
	ldr r1, [r2, #0x38]
	adds r0, r1, #0
	cmp r1, #0
	bge _0806B4A2
	rsbs r0, r1, #0
_0806B4A2:
	ldr r7, _0806B4C0 @ =0xFFFFFE0C
	adds r0, r0, r7
	ldr r5, _0806B4C4 @ =0x0000012B
	cmp r0, r5
	bls _0806B4BC
	ldr r3, [r2, #0x3c]
	adds r0, r3, #0
	cmp r3, #0
	bge _0806B4B6
	rsbs r0, r3, #0
_0806B4B6:
	adds r0, r0, r7
	cmp r0, r5
	bhi _0806B4C8
_0806B4BC:
	movs r4, #2
	b _0806B50C
	.align 2, 0
_0806B4C0: .4byte 0xFFFFFE0C
_0806B4C4: .4byte 0x0000012B
_0806B4C8:
	adds r0, r1, #0
	cmp r1, #0
	bge _0806B4D0
	rsbs r0, r1, #0
_0806B4D0:
	ldr r7, _0806B4EC @ =0xFFFFFCE0
	adds r0, r0, r7
	cmp r0, r5
	bls _0806B4E6
	adds r0, r3, #0
	cmp r3, #0
	bge _0806B4E0
	rsbs r0, r3, #0
_0806B4E0:
	adds r0, r0, r7
	cmp r0, r5
	bhi _0806B4F0
_0806B4E6:
	movs r4, #3
	b _0806B50C
	.align 2, 0
_0806B4EC: .4byte 0xFFFFFCE0
_0806B4F0:
	adds r0, r1, #0
	cmp r1, #0
	bge _0806B4F8
	rsbs r0, r1, #0
_0806B4F8:
	ldr r5, _0806B524 @ =0x0000044B
	cmp r0, r5
	bgt _0806B50A
	adds r0, r3, #0
	cmp r0, #0
	bge _0806B506
	rsbs r0, r0, #0
_0806B506:
	cmp r0, r5
	ble _0806B50C
_0806B50A:
	movs r4, #4
_0806B50C:
	adds r0, r2, #0
	adds r0, #0x20
	ldrb r0, [r0]
	cmp r0, #0
	bne _0806B534
	movs r0, #0x80
	rsbs r0, r0, #0
	cmp r1, r0
	ble _0806B528
	adds r1, r4, #1
	b _0806B58C
	.align 2, 0
_0806B524: .4byte 0x0000044B
_0806B528:
	adds r0, r1, #0
	adds r0, #0xff
	cmp r0, #0x7f
	bhi _0806B58A
	adds r1, r4, #2
	b _0806B58C
_0806B534:
	cmp r0, #1
	bne _0806B54C
	cmp r1, #0x7f
	bgt _0806B540
	adds r1, r4, #1
	b _0806B58C
_0806B540:
	adds r0, r1, #0
	subs r0, #0x80
	cmp r0, #0x7f
	bhi _0806B58A
	adds r1, r4, #2
	b _0806B58C
_0806B54C:
	cmp r0, #2
	bne _0806B570
	ldr r3, [r2, #0x3c]
	movs r5, #0x80
	rsbs r5, r5, #0
	cmp r3, r5
	ble _0806B55E
	adds r1, r4, #1
	b _0806B58C
_0806B55E:
	ldr r0, _0806B56C @ =0xFFFFFF00
	cmp r3, r0
	ble _0806B58A
	cmp r1, r5
	bgt _0806B58A
	adds r1, r4, #2
	b _0806B58C
	.align 2, 0
_0806B56C: .4byte 0xFFFFFF00
_0806B570:
	cmp r0, #3
	bne _0806B594
	ldr r0, [r2, #0x3c]
	cmp r0, #0x7f
	bgt _0806B57E
	adds r1, r4, #1
	b _0806B58C
_0806B57E:
	cmp r0, #0xff
	bgt _0806B58A
	cmp r1, #0x7f
	ble _0806B58A
	adds r1, r4, #2
	b _0806B58C
_0806B58A:
	adds r1, r4, #3
_0806B58C:
	lsls r1, r6
	ldrh r0, [r2, #0x2c]
	subs r0, r0, r1
	strh r0, [r2, #0x2c]
_0806B594:
	ldrh r0, [r2, #0x2c]
	ldr r1, _0806B5A4 @ =0x00003FF0
	cmp r0, r1
	bls _0806B59E
	strh r1, [r2, #0x2c]
_0806B59E:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806B5A4: .4byte 0x00003FF0

	thumb_func_start sub_806B5A8
sub_806B5A8: @ 0x0806B5A8
	push {r4, r5, r6, r7, lr}
	adds r2, r0, #0
	movs r6, #5
	movs r4, #0
	ldrb r0, [r2, #0x14]
	cmp r0, #0
	beq _0806B5BC
	movs r6, #7
	subs r0, #1
	strb r0, [r2, #0x14]
_0806B5BC:
	ldr r3, [r2, #0x38]
	adds r0, r3, #0
	cmp r3, #0
	bge _0806B5C6
	rsbs r0, r3, #0
_0806B5C6:
	ldr r7, _0806B5E4 @ =0xFFFFFE0C
	adds r0, r0, r7
	ldr r5, _0806B5E8 @ =0x0000012B
	cmp r0, r5
	bls _0806B5E0
	ldr r1, [r2, #0x3c]
	adds r0, r1, #0
	cmp r1, #0
	bge _0806B5DA
	rsbs r0, r1, #0
_0806B5DA:
	adds r0, r0, r7
	cmp r0, r5
	bhi _0806B5EC
_0806B5E0:
	movs r4, #2
	b _0806B630
	.align 2, 0
_0806B5E4: .4byte 0xFFFFFE0C
_0806B5E8: .4byte 0x0000012B
_0806B5EC:
	adds r0, r3, #0
	cmp r3, #0
	bge _0806B5F4
	rsbs r0, r3, #0
_0806B5F4:
	ldr r7, _0806B610 @ =0xFFFFFCE0
	adds r0, r0, r7
	cmp r0, r5
	bls _0806B60A
	adds r0, r1, #0
	cmp r1, #0
	bge _0806B604
	rsbs r0, r1, #0
_0806B604:
	adds r0, r0, r7
	cmp r0, r5
	bhi _0806B614
_0806B60A:
	movs r4, #3
	b _0806B630
	.align 2, 0
_0806B610: .4byte 0xFFFFFCE0
_0806B614:
	adds r0, r3, #0
	cmp r3, #0
	bge _0806B61C
	rsbs r0, r3, #0
_0806B61C:
	ldr r5, _0806B644 @ =0x0000044B
	cmp r0, r5
	bgt _0806B62E
	adds r0, r1, #0
	cmp r0, #0
	bge _0806B62A
	rsbs r0, r0, #0
_0806B62A:
	cmp r0, r5
	ble _0806B630
_0806B62E:
	movs r4, #4
_0806B630:
	adds r0, r2, #0
	adds r0, #0x20
	ldrb r0, [r0]
	cmp r0, #0
	bne _0806B654
	cmp r3, #0x7f
	bgt _0806B648
	adds r0, r4, #1
	b _0806B6A8
	.align 2, 0
_0806B644: .4byte 0x0000044B
_0806B648:
	adds r0, r3, #0
	subs r0, #0x80
	cmp r0, #0x7f
	bhi _0806B6A6
	adds r0, r4, #2
	b _0806B6A8
_0806B654:
	cmp r0, #1
	bne _0806B670
	movs r0, #0x80
	rsbs r0, r0, #0
	cmp r3, r0
	ble _0806B664
	adds r0, r4, #1
	b _0806B6A8
_0806B664:
	adds r0, r3, #0
	adds r0, #0xff
	cmp r0, #0x7f
	bhi _0806B6A6
	adds r0, r4, #2
	b _0806B6A8
_0806B670:
	cmp r0, #2
	bne _0806B688
	ldr r0, [r2, #0x3c]
	cmp r0, #0x7f
	bgt _0806B67E
	adds r0, r4, #1
	b _0806B6A8
_0806B67E:
	subs r0, #0x80
	cmp r0, #0x7f
	bhi _0806B6A6
	adds r0, r4, #2
	b _0806B6A8
_0806B688:
	cmp r0, #3
	bne _0806B6B0
	ldr r1, [r2, #0x3c]
	movs r0, #0x80
	rsbs r0, r0, #0
	cmp r1, r0
	ble _0806B69A
	adds r0, r4, #1
	b _0806B6A8
_0806B69A:
	adds r0, r1, #0
	adds r0, #0xff
	cmp r0, #0x7f
	bhi _0806B6A6
	adds r0, r4, #2
	b _0806B6A8
_0806B6A6:
	adds r0, r4, #3
_0806B6A8:
	lsls r0, r6
	ldrh r1, [r2, #0x2c]
	adds r0, r0, r1
	strh r0, [r2, #0x2c]
_0806B6B0:
	ldrh r1, [r2, #0x2c]
	ldr r0, _0806B6C4 @ =0x00003FF0
	cmp r1, r0
	bls _0806B6BC
	movs r0, #0
	strh r0, [r2, #0x2c]
_0806B6BC:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806B6C4: .4byte 0x00003FF0

	thumb_func_start sub_806B6C8
sub_806B6C8: @ 0x0806B6C8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x28
	adds r5, r0, #0
	adds r3, r5, #0
	adds r3, #0x94
	movs r0, #0
	mov ip, r0
	str r0, [sp]
	mov r0, sp
	mov r1, ip
	strb r1, [r0, #8]
	mov r0, ip
	str r0, [sp, #4]
	mov r0, sp
	strb r1, [r0, #9]
	adds r4, r5, #0
	adds r4, #0xb8
	ldrb r0, [r4]
	adds r0, #0x11
	strb r0, [r4]
	movs r0, #0xb9
	adds r0, r0, r5
	mov r8, r0
	ldrb r0, [r0]
	adds r0, #0x29
	mov r1, r8
	strb r0, [r1]
	adds r7, r5, #0
	adds r7, #0xba
	ldrb r0, [r7]
	adds r0, #0x11
	strb r0, [r7]
	adds r6, r5, #0
	adds r6, #0xbb
	ldrb r0, [r6]
	adds r0, #0x29
	strb r0, [r6]
	str r3, [sp, #0x1c]
	movs r0, #0x10
	ldrsh r1, [r3, r0]
	ldr r2, _0806B784 @ =gCamera
	ldr r0, [r2]
	adds r0, r0, r1
	lsls r0, r0, #8
	str r0, [sp, #0x10]
	movs r0, #0x12
	ldrsh r1, [r3, r0]
	ldr r0, [r2, #4]
	adds r0, r0, r1
	lsls r0, r0, #8
	str r0, [sp, #0x14]
	mov r0, sp
	mov r1, ip
	strh r1, [r0, #0xc]
	strh r1, [r0, #0xe]
	bl sub_806CAA4
	mov ip, r0
	ldrb r0, [r4]
	subs r0, #0x11
	strb r0, [r4]
	mov r1, r8
	ldrb r0, [r1]
	subs r0, #0x29
	strb r0, [r1]
	ldrb r0, [r7]
	subs r0, #0x11
	strb r0, [r7]
	ldrb r0, [r6]
	subs r0, #0x29
	strb r0, [r6]
	mov r0, sp
	ldrb r0, [r0, #9]
	strb r0, [r5, #0x15]
	mov r0, sp
	ldrb r0, [r0, #0xa]
	adds r1, r5, #0
	adds r1, #0x26
	strb r0, [r1]
	mov r0, sp
	ldrb r1, [r0, #0xb]
	adds r0, r5, #0
	adds r0, #0x27
	strb r1, [r0]
	mov r0, ip
	add sp, #0x28
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0806B784: .4byte gCamera

	thumb_func_start sub_806B788
sub_806B788: @ 0x0806B788
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x10
	ldr r2, _0806B7F0 @ =gCurTask
	ldr r0, [r2]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r7, r1, r0
	ldrh r0, [r7, #0x2e]
	mov ip, r0
	mov r8, r2
	mov r1, ip
	cmp r1, #0
	bne _0806B7D8
	ldr r0, [r7]
	asrs r0, r0, #8
	ldr r3, _0806B7F4 @ =gCamera
	ldr r1, [r3]
	subs r0, r0, r1
	adds r4, r0, #0
	adds r4, #0xa
	mov r0, ip
	adds r0, #1
	strh r0, [r7, #0x2e]
	ldr r2, [r3]
	adds r2, r2, r4
	str r2, [sp]
	ldr r0, [r3, #0x14]
	adds r1, r0, #0
	subs r1, #0x32
	str r1, [sp, #4]
	str r2, [sp, #8]
	subs r0, #0x1b
	str r0, [sp, #0xc]
	ldr r1, _0806B7F8 @ =sub_807A37C
	mov r0, sp
	bl sub_8078E34
_0806B7D8:
	ldrb r0, [r7, #0x1c]
	cmp r0, #4
	bne _0806B836
	movs r2, #0
	ldr r4, _0806B7FC @ =sub_806CEB8
	ldr r3, _0806B800 @ =gPlayers
_0806B7E4:
	cmp r2, #0
	bne _0806B808
	ldr r0, _0806B804 @ =gStageData
	ldrb r1, [r0, #6]
	b _0806B812
	.align 2, 0
_0806B7F0: .4byte gCurTask
_0806B7F4: .4byte gCamera
_0806B7F8: .4byte sub_807A37C
_0806B7FC: .4byte sub_806CEB8
_0806B800: .4byte gPlayers
_0806B804: .4byte gStageData
_0806B808:
	adds r0, r6, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	lsls r1, r1, #0x1e
	lsrs r1, r1, #0x1e
_0806B812:
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r6, r0, r3
	adds r1, r6, #0
	adds r1, #0x27
	movs r0, #1
	strb r0, [r1]
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #1
	bls _0806B7E4
	mov r1, r8
	ldr r0, [r1]
	str r4, [r0, #8]
_0806B836:
	add sp, #0x10
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806B844
sub_806B844: @ 0x0806B844
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	mov r8, r0
	movs r0, #0
	mov sl, r0
	movs r6, #0x90
	lsls r6, r6, #3
	movs r1, #0x1c
	mov sb, r1
	movs r2, #0
	str r2, [sp, #4]
	movs r4, #0
	mov r1, r8
	adds r1, #0x25
	ldrb r0, [r1]
	cmp r0, #0
	beq _0806B876
	strb r2, [r1]
	mov r7, r8
	adds r7, #0x23
	b _0806B8BC
_0806B876:
	mov r0, r8
	adds r0, #0x94
	ldrh r1, [r0, #0x10]
	str r0, [sp, #8]
	cmp r1, #0xf0
	bls _0806B884
	b _0806BC3E
_0806B884:
	movs r1, #0x12
	ldrsh r0, [r0, r1]
	cmp r0, #0xa0
	ble _0806B88E
	b _0806BC3E
_0806B88E:
	cmp r0, #0
	bge _0806B894
	b _0806BC3E
_0806B894:
	mov r0, r8
	adds r0, #0x23
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r7, r0, #0
	cmp r1, #0
	bne _0806B8B6
	mov r2, r8
	ldrb r0, [r2, #0x1d]
	cmp r0, #0
	beq _0806B8B6
	mov r0, r8
	bl sub_806B6C8
	cmp r0, #1
	bne _0806B8B6
	movs r4, #1
_0806B8B6:
	cmp r4, #0
	bne _0806B8BC
	b _0806BA3C
_0806B8BC:
	movs r0, #0x3c
	mov r1, r8
	strb r0, [r1, #0x14]
	ldrb r4, [r1, #0x1e]
	ldrb r5, [r1, #0x1f]
	mov r0, r8
	bl sub_806AA40
	mov r2, r8
	strb r4, [r2, #0x1e]
	strb r5, [r2, #0x1f]
	mov r0, r8
	adds r0, #0x20
	ldrb r1, [r0]
	cmp r1, #0
	bne _0806B904
	adds r0, #6
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	ble _0806B8F4
	mov r1, r8
	adds r1, #0x24
	movs r0, #1
	strb r0, [r1]
	str r6, [r2, #0x40]
	b _0806B974
_0806B8F4:
	mov r0, r8
	adds r0, #0x24
	movs r1, #0xff
	strb r1, [r0]
	rsbs r0, r6, #0
	mov r1, r8
	str r0, [r1, #0x40]
	b _0806B974
_0806B904:
	cmp r1, #1
	bne _0806B932
	mov r0, r8
	adds r0, #0x26
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge _0806B924
	mov r0, r8
	adds r0, #0x24
	strb r1, [r0]
	rsbs r0, r6, #0
	mov r2, r8
	str r0, [r2, #0x40]
	b _0806B974
_0806B924:
	mov r1, r8
	adds r1, #0x24
	movs r0, #0xff
	strb r0, [r1]
	mov r0, r8
	str r6, [r0, #0x40]
	b _0806B974
_0806B932:
	cmp r1, #3
	bne _0806B946
	mov r0, r8
	adds r0, #0x27
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	blt _0806B958
	b _0806B968
_0806B946:
	cmp r1, #2
	bne _0806B974
	mov r0, r8
	adds r0, #0x27
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge _0806B968
_0806B958:
	mov r0, r8
	adds r0, #0x24
	movs r1, #1
	strb r1, [r0]
	rsbs r0, r6, #0
	mov r1, r8
	str r0, [r1, #0x44]
	b _0806B974
_0806B968:
	mov r1, r8
	adds r1, #0x24
	movs r0, #0xff
	strb r0, [r1]
	mov r2, r8
	str r6, [r2, #0x44]
_0806B974:
	movs r0, #0x8f
	bl m4aSongNumStart
	bl sub_807A468
	mov r1, r8
	ldrb r0, [r1, #0x1d]
	subs r1, r0, #1
	mov r2, r8
	strb r1, [r2, #0x1d]
	ldr r2, _0806B9A8 @ =gStageData
	ldrb r0, [r2, #3]
	cmp r0, #5
	bne _0806B9B6
	ldrb r0, [r2, #6]
	cmp r0, #0
	bne _0806B9AC
	lsls r0, r1, #0x18
	cmp r0, #0
	beq _0806B9B6
	mov r0, r8
	ldrb r1, [r0, #0x1d]
	movs r0, #3
	bl sub_8027674
	b _0806B9B6
	.align 2, 0
_0806B9A8: .4byte gStageData
_0806B9AC:
	mov r2, r8
	ldrb r1, [r2, #0x1d]
	movs r0, #4
	bl sub_8027674
_0806B9B6:
	ldr r0, _0806B9D0 @ =gStageData
	ldrb r0, [r0, #1]
	cmp r0, #0
	bne _0806B9D4
	mov r1, r8
	ldrb r0, [r1, #0x1d]
	cmp r0, #4
	bne _0806B9E2
	movs r0, #0x33
	bl sub_80299D4
	b _0806B9E2
	.align 2, 0
_0806B9D0: .4byte gStageData
_0806B9D4:
	mov r2, r8
	ldrb r0, [r2, #0x1d]
	cmp r0, #3
	bne _0806B9E2
	movs r0, #0x33
	bl sub_80299D4
_0806B9E2:
	mov r1, r8
	ldrb r0, [r1, #0x1d]
	cmp r0, #1
	bne _0806B9F4
	ldr r0, _0806B9F0 @ =0x0000FFFF
	strh r0, [r1, #0x30]
	b _0806B9FA
	.align 2, 0
_0806B9F0: .4byte 0x0000FFFF
_0806B9F4:
	movs r0, #0x3c
	mov r2, r8
	strh r0, [r2, #0x30]
_0806B9FA:
	ldr r2, _0806BA30 @ =gUnknown_080D5780
	ldrh r1, [r2, #0x18]
	mov r0, r8
	adds r0, #0xa0
	strh r1, [r0]
	ldrb r0, [r2, #0x1a]
	mov r1, r8
	adds r1, #0xae
	strb r0, [r1]
	adds r1, #1
	movs r0, #0xff
	strb r0, [r1]
	movs r0, #0x7a
	strb r0, [r7]
	ldr r0, _0806BA34 @ =0x000004BE
	movs r1, #0
	movs r2, #0x7a
	movs r3, #1
	bl sub_8078DB0
	ldr r0, _0806BA38 @ =0x000004BF
	movs r1, #0
	movs r2, #0x7a
	movs r3, #0
	bl sub_8078DB0
	b _0806BBFA
	.align 2, 0
_0806BA30: .4byte gUnknown_080D5780
_0806BA34: .4byte 0x000004BE
_0806BA38: .4byte 0x000004BF
_0806BA3C:
	mov r0, r8
	adds r0, #0x21
	ldrb r0, [r0]
	cmp r0, #0
	beq _0806BA48
	b _0806BBFA
_0806BA48:
	movs r0, #0
	str r0, [sp]
_0806BA4C:
	ldr r1, [sp]
	cmp r1, #0
	bne _0806BA5C
	ldr r0, _0806BA58 @ =gStageData
	ldrb r1, [r0, #6]
	b _0806BA66
	.align 2, 0
_0806BA58: .4byte gStageData
_0806BA5C:
	mov r0, sl
	adds r0, #0x2b
	ldrb r1, [r0]
	lsls r1, r1, #0x1e
	lsrs r1, r1, #0x1e
_0806BA66:
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	ldr r1, _0806BABC @ =gPlayers
	adds r0, r0, r1
	mov sl, r0
	mov r0, sl
	bl sub_802C080
	cmp r0, #0
	beq _0806BA82
	b _0806BBEA
_0806BA82:
	mov r2, sl
	ldr r4, [r2, #0x10]
	asrs r5, r4, #8
	mov r3, sl
	adds r3, #0xe0
	ldr r1, [r3]
	adds r0, r1, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r5, r5, r0
	ldr r2, [r2, #0x14]
	asrs r6, r2, #8
	adds r1, #0x31
	movs r0, #0
	ldrsb r0, [r1, r0]
	adds r6, r6, r0
	mov r1, r8
	ldr r0, [r1]
	asrs r7, r0, #8
	subs r1, r5, r7
	mov ip, r0
	cmp r1, #0
	blt _0806BAC0
	cmp r1, sb
	blt _0806BAC6
	b _0806BAE2
	.align 2, 0
_0806BABC: .4byte gPlayers
_0806BAC0:
	subs r0, r7, r5
	cmp r0, sb
	bge _0806BAE2
_0806BAC6:
	mov r1, r8
	ldr r0, [r1, #4]
	asrs r0, r0, #8
	subs r1, r6, r0
	cmp r1, #0
	blt _0806BAD8
	cmp r1, sb
	blt _0806BADE
	b _0806BAE2
_0806BAD8:
	subs r0, r0, r6
	cmp r0, sb
	bge _0806BAE2
_0806BADE:
	movs r0, #1
	str r0, [sp, #4]
_0806BAE2:
	asrs r5, r4, #8
	ldr r1, [r3]
	adds r0, r1, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r5, r5, r0
	asrs r6, r2, #8
	adds r1, #0x33
	movs r0, #0
	ldrsb r0, [r1, r0]
	adds r6, r6, r0
	mov r1, ip
	asrs r0, r1, #8
	subs r1, r5, r0
	cmp r1, #0
	blt _0806BB0C
	cmp r1, sb
	blt _0806BB12
	b _0806BB2E
_0806BB0C:
	subs r0, r0, r5
	cmp r0, sb
	bge _0806BB2E
_0806BB12:
	mov r1, r8
	ldr r0, [r1, #4]
	asrs r0, r0, #8
	subs r1, r6, r0
	cmp r1, #0
	blt _0806BB24
	cmp r1, sb
	blt _0806BB2A
	b _0806BB2E
_0806BB24:
	subs r0, r0, r6
	cmp r0, sb
	bge _0806BB2E
_0806BB2A:
	movs r0, #1
	str r0, [sp, #4]
_0806BB2E:
	asrs r5, r4, #8
	ldr r0, [r3]
	adds r1, r0, #0
	adds r1, #0x32
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r5, r5, r1
	asrs r6, r2, #8
	adds r0, #0x31
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r6, r6, r0
	mov r1, ip
	asrs r0, r1, #8
	subs r1, r5, r0
	cmp r1, #0
	blt _0806BB5A
	cmp r1, sb
	blt _0806BB60
	b _0806BB7C
_0806BB5A:
	subs r0, r0, r5
	cmp r0, sb
	bge _0806BB7C
_0806BB60:
	mov r1, r8
	ldr r0, [r1, #4]
	asrs r0, r0, #8
	subs r1, r6, r0
	cmp r1, #0
	blt _0806BB72
	cmp r1, sb
	blt _0806BB78
	b _0806BB7C
_0806BB72:
	subs r0, r0, r6
	cmp r0, sb
	bge _0806BB7C
_0806BB78:
	movs r0, #1
	str r0, [sp, #4]
_0806BB7C:
	asrs r5, r4, #8
	ldr r0, [r3]
	adds r1, r0, #0
	adds r1, #0x32
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r5, r5, r1
	asrs r6, r2, #8
	adds r0, #0x33
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r6, r6, r0
	mov r1, ip
	asrs r0, r1, #8
	subs r1, r5, r0
	cmp r1, #0
	blt _0806BBA8
	cmp r1, sb
	blt _0806BBAE
	b _0806BBCA
_0806BBA8:
	subs r0, r0, r5
	cmp r0, sb
	bge _0806BBCA
_0806BBAE:
	mov r2, r8
	ldr r0, [r2, #4]
	asrs r0, r0, #8
	subs r1, r6, r0
	cmp r1, #0
	blt _0806BBC0
	cmp r1, sb
	blt _0806BBC6
	b _0806BBCA
_0806BBC0:
	subs r0, r0, r6
	cmp r0, sb
	bge _0806BBCA
_0806BBC6:
	movs r0, #1
	str r0, [sp, #4]
_0806BBCA:
	ldr r1, [sp, #4]
	cmp r1, #0
	beq _0806BBE6
	mov r0, sl
	bl Player_8014550
	ldr r1, _0806BC1C @ =gUnknown_080D5780
	ldrh r0, [r1, #0x10]
	ldr r2, [sp, #8]
	strh r0, [r2, #0xc]
	ldrb r0, [r1, #0x12]
	strb r0, [r2, #0x1a]
	movs r0, #0xff
	strb r0, [r2, #0x1b]
_0806BBE6:
	movs r0, #0
	str r0, [sp, #4]
_0806BBEA:
	ldr r0, [sp]
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp]
	cmp r0, #1
	bhi _0806BBFA
	b _0806BA4C
_0806BBFA:
	mov r1, r8
	ldrb r0, [r1, #0x1d]
	cmp r0, #0
	bne _0806BC3E
	ldr r1, _0806BC20 @ =gStageData
	ldrb r0, [r1, #3]
	cmp r0, #5
	bne _0806BC34
	ldrb r0, [r1, #6]
	cmp r0, #0
	beq _0806BC2C
	ldr r0, _0806BC24 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0806BC28 @ =sub_806C12C
	str r0, [r1, #8]
	b _0806BC3E
	.align 2, 0
_0806BC1C: .4byte gUnknown_080D5780
_0806BC20: .4byte gStageData
_0806BC24: .4byte gCurTask
_0806BC28: .4byte sub_806C12C
_0806BC2C:
	movs r0, #1
	movs r1, #0
	bl sub_8027674
_0806BC34:
	mov r0, r8
	bl sub_806CA28
	movs r0, #1
	b _0806BC40
_0806BC3E:
	movs r0, #0
_0806BC40:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_806BC50
sub_806BC50: @ 0x0806BC50
	push {r4, r5, r6, lr}
	adds r3, r0, #0
	adds r1, r3, #0
	adds r1, #0x23
	ldrb r2, [r1]
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	beq _0806BC66
	subs r0, r2, #1
	strb r0, [r1]
_0806BC66:
	ldr r0, [r3]
	asrs r0, r0, #8
	ldr r2, _0806BC94 @ =gCamera
	ldr r1, [r2]
	subs r5, r0, r1
	ldr r0, [r3, #4]
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r6, r0, r1
	adds r4, r3, #0
	adds r4, #0x94
	adds r2, r3, #0
	adds r2, #0x60
	adds r0, r3, #0
	adds r0, #0x21
	ldrb r0, [r0]
	cmp r0, #0
	beq _0806BC98
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #0xb
	orrs r0, r1
	b _0806BC9E
	.align 2, 0
_0806BC94: .4byte gCamera
_0806BC98:
	ldr r0, [r4, #8]
	ldr r1, _0806BD04 @ =0xFFFBFFFF
	ands r0, r1
_0806BC9E:
	str r0, [r4, #8]
	strh r5, [r4, #0x10]
	strh r6, [r4, #0x12]
	ldrh r0, [r3, #0x2c]
	lsrs r0, r0, #4
	strh r0, [r2]
	ldrh r0, [r4, #0x10]
	strh r0, [r2, #6]
	ldrh r0, [r4, #0x12]
	strh r0, [r2, #8]
	adds r0, r4, #0
	adds r1, r2, #0
	bl TransformSprite
	movs r0, #0x10
	ldrsh r1, [r4, r0]
	ldr r3, _0806BD08 @ =gCamera
	ldr r0, [r3]
	adds r0, r0, r1
	lsls r0, r0, #8
	movs r1, #0x12
	ldrsh r2, [r4, r1]
	ldr r1, [r3, #4]
	adds r1, r1, r2
	lsls r1, r1, #8
	bl sub_8004D68
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r5, r0, #0
	adds r0, r4, #0
	bl DisplaySprite
	cmp r5, #0
	bne _0806BCFA
	ldr r2, _0806BD0C @ =gUnknown_080D5780
	ldrb r1, [r2, #0xa]
	ldrb r0, [r4, #0x1a]
	cmp r0, r1
	beq _0806BCFA
	ldrh r0, [r2, #8]
	strh r0, [r4, #0xc]
	strb r1, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
_0806BCFA:
	adds r0, r5, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_0806BD04: .4byte 0xFFFBFFFF
_0806BD08: .4byte gCamera
_0806BD0C: .4byte gUnknown_080D5780

	thumb_func_start sub_806BD10
sub_806BD10: @ 0x0806BD10
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r0, _0806BDB8 @ =sub_806BDD0
	movs r2, #0x84
	lsls r2, r2, #6
	ldr r1, _0806BDBC @ =sub_806D154
	str r1, [sp]
	movs r1, #0x40
	movs r3, #0
	bl TaskCreate
	ldrh r4, [r0, #6]
	movs r6, #0xc0
	lsls r6, r6, #0x12
	adds r6, r4, r6
	str r5, [r6]
	movs r0, #0xe0
	lsls r0, r0, #3
	str r0, [r6, #8]
	ldr r0, _0806BDC0 @ =0xFFFFCE00
	str r0, [r6, #0xc]
	ldr r5, _0806BDC4 @ =gCamera
	ldr r0, [r5, #0x1c]
	ldr r1, [r5, #0x18]
	subs r0, r0, r1
	str r0, [r6, #4]
	ldr r0, _0806BDC8 @ =0x03000010
	adds r4, r4, r0
	movs r0, #0x12
	bl VramMalloc
	str r0, [r4]
	movs r3, #0
	movs r2, #0
	ldr r0, _0806BDCC @ =0x0000037F
	strh r0, [r4, #0xc]
	movs r0, #3
	strb r0, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	ldr r1, [r5, #0x18]
	ldr r0, [r5]
	subs r1, r1, r0
	strh r1, [r4, #0x10]
	ldr r0, [r6, #8]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r4, #0x10]
	ldr r1, [r5, #0x10]
	ldr r0, [r5, #0x14]
	subs r0, r0, r1
	asrs r0, r0, #1
	adds r1, r1, r0
	strh r1, [r4, #0x12]
	ldr r0, [r5, #4]
	subs r1, r1, r0
	strh r1, [r4, #0x12]
	ldr r0, [r6, #0xc]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r4, #0x12]
	movs r0, #0xb0
	lsls r0, r0, #3
	strh r0, [r4, #0x14]
	strh r2, [r4, #0xe]
	strh r2, [r4, #0x16]
	movs r0, #0x10
	strb r0, [r4, #0x1c]
	strb r3, [r4, #0x1f]
	movs r0, #0xa0
	lsls r0, r0, #5
	str r0, [r4, #8]
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r4, #0x20]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0806BDB8: .4byte sub_806BDD0
_0806BDBC: .4byte sub_806D154
_0806BDC0: .4byte 0xFFFFCE00
_0806BDC4: .4byte gCamera
_0806BDC8: .4byte 0x03000010
_0806BDCC: .4byte 0x0000037F

	thumb_func_start sub_806BDD0
sub_806BDD0: @ 0x0806BDD0
	push {r4, lr}
	ldr r0, _0806BDF8 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r2, [r4]
	ldrb r0, [r2]
	cmp r0, #1
	bne _0806BE06
	ldr r0, [r4, #0xc]
	ldr r1, _0806BDFC @ =0xFFFFE700
	cmp r0, r1
	bge _0806BE00
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r0, r1
	str r0, [r4, #0xc]
	b _0806BE06
	.align 2, 0
_0806BDF8: .4byte gCurTask
_0806BDFC: .4byte 0xFFFFE700
_0806BE00:
	str r1, [r4, #0xc]
	movs r0, #2
	strb r0, [r2]
_0806BE06:
	adds r0, r4, #0
	adds r0, #0x10
	ldr r3, _0806BE50 @ =gCamera
	ldr r2, [r3, #0x18]
	ldr r1, [r3]
	subs r2, r2, r1
	strh r2, [r0, #0x10]
	ldr r1, [r4, #8]
	asrs r1, r1, #8
	adds r2, r2, r1
	strh r2, [r0, #0x10]
	ldr r2, [r3, #0x10]
	ldr r1, [r3, #0x14]
	subs r1, r1, r2
	asrs r1, r1, #1
	adds r2, r2, r1
	strh r2, [r0, #0x12]
	ldr r1, [r3, #4]
	subs r2, r2, r1
	strh r2, [r0, #0x12]
	ldr r1, [r4, #0xc]
	asrs r1, r1, #8
	adds r2, r2, r1
	strh r2, [r0, #0x12]
	bl DisplaySprite
	ldr r0, [r4]
	ldrb r0, [r0]
	cmp r0, #3
	bne _0806BE4A
	ldr r0, _0806BE54 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0806BE58 @ =sub_806BE5C
	str r0, [r1, #8]
_0806BE4A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806BE50: .4byte gCamera
_0806BE54: .4byte gCurTask
_0806BE58: .4byte sub_806BE5C

	thumb_func_start sub_806BE5C
sub_806BE5C: @ 0x0806BE5C
	push {r4, r5, lr}
	ldr r5, _0806BEB4 @ =gCurTask
	ldr r0, [r5]
	ldrh r0, [r0, #6]
	movs r4, #0xc0
	lsls r4, r4, #0x12
	adds r4, r0, r4
	ldr r1, _0806BEB8 @ =0x03000010
	adds r0, r0, r1
	ldr r3, _0806BEBC @ =gCamera
	ldr r2, [r3, #0x18]
	ldr r1, [r3]
	subs r2, r2, r1
	strh r2, [r0, #0x10]
	ldr r1, [r4, #8]
	asrs r1, r1, #8
	adds r2, r2, r1
	strh r2, [r0, #0x10]
	ldr r2, [r3, #0x10]
	ldr r1, [r3, #0x14]
	subs r1, r1, r2
	asrs r1, r1, #1
	adds r2, r2, r1
	strh r2, [r0, #0x12]
	ldr r1, [r3, #4]
	subs r2, r2, r1
	strh r2, [r0, #0x12]
	ldr r1, [r4, #0xc]
	asrs r1, r1, #8
	adds r2, r2, r1
	strh r2, [r0, #0x12]
	bl DisplaySprite
	movs r0, #0x20
	ldrsh r1, [r4, r0]
	ldr r0, [r4, #4]
	cmn r1, r0
	bhs _0806BEAE
	ldr r0, [r5]
	bl TaskDestroy
_0806BEAE:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806BEB4: .4byte gCurTask
_0806BEB8: .4byte 0x03000010
_0806BEBC: .4byte gCamera

	thumb_func_start sub_806BEC0
sub_806BEC0: @ 0x0806BEC0
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	ldr r0, _0806BF5C @ =sub_806BF78
	movs r2, #0x84
	lsls r2, r2, #6
	ldr r1, _0806BF60 @ =sub_806D168
	str r1, [sp]
	movs r1, #0x40
	movs r3, #0
	bl TaskCreate
	ldrh r4, [r0, #6]
	movs r5, #0xc0
	lsls r5, r5, #0x12
	adds r5, r4, r5
	str r6, [r5]
	ldr r0, _0806BF64 @ =0xFFFFF800
	str r0, [r5, #8]
	ldr r0, _0806BF68 @ =0xFFFFCE00
	str r0, [r5, #0xc]
	ldr r0, _0806BF6C @ =0x03000010
	adds r4, r4, r0
	movs r0, #0x12
	bl VramMalloc
	str r0, [r4]
	movs r6, #0
	movs r3, #0
	ldr r0, _0806BF70 @ =0x0000037F
	strh r0, [r4, #0xc]
	movs r0, #3
	strb r0, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	ldr r2, _0806BF74 @ =gCamera
	ldr r1, [r2, #0x18]
	ldr r0, [r2]
	subs r1, r1, r0
	strh r1, [r4, #0x10]
	ldr r0, [r5, #8]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r4, #0x10]
	ldr r1, [r2, #0x10]
	ldr r0, [r2, #0x14]
	subs r0, r0, r1
	asrs r0, r0, #1
	adds r1, r1, r0
	strh r1, [r4, #0x12]
	ldr r0, [r2, #4]
	subs r1, r1, r0
	strh r1, [r4, #0x12]
	ldr r0, [r5, #0xc]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r4, #0x12]
	movs r0, #0xb0
	lsls r0, r0, #3
	strh r0, [r4, #0x14]
	strh r3, [r4, #0xe]
	strh r3, [r4, #0x16]
	movs r0, #0x10
	strb r0, [r4, #0x1c]
	strb r6, [r4, #0x1f]
	movs r0, #0x80
	lsls r0, r0, #5
	str r0, [r4, #8]
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r4, #0x20]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0806BF5C: .4byte sub_806BF78
_0806BF60: .4byte sub_806D168
_0806BF64: .4byte 0xFFFFF800
_0806BF68: .4byte 0xFFFFCE00
_0806BF6C: .4byte 0x03000010
_0806BF70: .4byte 0x0000037F
_0806BF74: .4byte gCamera

	thumb_func_start sub_806BF78
sub_806BF78: @ 0x0806BF78
	push {r4, lr}
	ldr r0, _0806BFA0 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r2, [r4]
	ldrb r0, [r2]
	cmp r0, #1
	bne _0806BFAE
	ldr r0, [r4, #0xc]
	ldr r1, _0806BFA4 @ =0xFFFFE700
	cmp r0, r1
	bge _0806BFA8
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r0, r1
	str r0, [r4, #0xc]
	b _0806BFAE
	.align 2, 0
_0806BFA0: .4byte gCurTask
_0806BFA4: .4byte 0xFFFFE700
_0806BFA8:
	str r1, [r4, #0xc]
	movs r0, #2
	strb r0, [r2]
_0806BFAE:
	adds r0, r4, #0
	adds r0, #0x10
	ldr r3, _0806BFF8 @ =gCamera
	ldr r2, [r3, #0x1c]
	ldr r1, [r3]
	subs r2, r2, r1
	strh r2, [r0, #0x10]
	ldr r1, [r4, #8]
	asrs r1, r1, #8
	adds r2, r2, r1
	strh r2, [r0, #0x10]
	ldr r2, [r3, #0x10]
	ldr r1, [r3, #0x14]
	subs r1, r1, r2
	asrs r1, r1, #1
	adds r2, r2, r1
	strh r2, [r0, #0x12]
	ldr r1, [r3, #4]
	subs r2, r2, r1
	strh r2, [r0, #0x12]
	ldr r1, [r4, #0xc]
	asrs r1, r1, #8
	adds r2, r2, r1
	strh r2, [r0, #0x12]
	bl DisplaySprite
	ldr r0, [r4]
	ldrb r0, [r0]
	cmp r0, #3
	bne _0806BFF2
	ldr r0, _0806BFFC @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0806C000 @ =sub_806C004
	str r0, [r1, #8]
_0806BFF2:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806BFF8: .4byte gCamera
_0806BFFC: .4byte gCurTask
_0806C000: .4byte sub_806C004

	thumb_func_start sub_806C004
sub_806C004: @ 0x0806C004
	push {r4, r5, lr}
	ldr r5, _0806C064 @ =gCurTask
	ldr r0, [r5]
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r4, r0, r1
	adds r1, #0x10
	adds r0, r0, r1
	ldr r3, _0806C068 @ =gCamera
	ldr r2, [r3, #0x1c]
	ldr r1, [r3]
	subs r2, r2, r1
	strh r2, [r0, #0x10]
	ldr r1, [r4, #8]
	asrs r1, r1, #8
	adds r2, r2, r1
	strh r2, [r0, #0x10]
	ldr r2, [r3, #0x10]
	ldr r1, [r3, #0x14]
	subs r1, r1, r2
	asrs r1, r1, #1
	adds r2, r2, r1
	strh r2, [r0, #0x12]
	ldr r1, [r3, #4]
	subs r2, r2, r1
	strh r2, [r0, #0x12]
	ldr r1, [r4, #0xc]
	asrs r1, r1, #8
	adds r2, r2, r1
	strh r2, [r0, #0x12]
	bl DisplaySprite
	adds r0, r4, #0
	bl sub_806D17C
	cmp r0, #1
	bne _0806C05C
	ldr r0, [r4]
	movs r1, #4
	strb r1, [r0]
	ldr r0, [r5]
	bl TaskDestroy
_0806C05C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806C064: .4byte gCurTask
_0806C068: .4byte gCamera

	thumb_func_start sub_806C06C
sub_806C06C: @ 0x0806C06C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	mov sb, r0
	mov r6, sb
	adds r6, #0x10
	movs r4, #0
	movs r0, #0x10
	ldrsh r1, [r6, r0]
	ldr r2, _0806C0A0 @ =gCamera
	ldr r0, [r2]
	adds r1, r1, r0
	mov r8, r1
	movs r0, #0x12
	ldrsh r1, [r6, r0]
	ldr r0, [r2, #4]
	adds r7, r1, r0
	movs r5, #0
_0806C094:
	cmp r5, #0
	bne _0806C0A8
	ldr r0, _0806C0A4 @ =gStageData
	ldrb r1, [r0, #6]
	b _0806C0B2
	.align 2, 0
_0806C0A0: .4byte gCamera
_0806C0A4: .4byte gStageData
_0806C0A8:
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	lsls r1, r1, #0x1e
	lsrs r1, r1, #0x1e
_0806C0B2:
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	ldr r1, _0806C0E0 @ =gPlayers
	adds r4, r0, r1
	adds r0, r4, #0
	bl sub_802C080
	adds r5, #1
	cmp r0, #0
	bne _0806C116
	str r0, [sp]
	adds r0, r6, #0
	mov r1, r8
	adds r2, r7, #0
	adds r3, r4, #0
	bl sub_8020950
	cmp r0, #0
	beq _0806C116
	b _0806C102
	.align 2, 0
_0806C0E0: .4byte gPlayers
_0806C0E4:
	mov r1, sb
	ldr r0, [r1, #8]
	asrs r0, r0, #8
	cmp r0, #4
	bne _0806C0F8
	ldr r0, [r4, #0x10]
	ldr r1, _0806C0F4 @ =0xFFFFFF00
	b _0806C0FE
	.align 2, 0
_0806C0F4: .4byte 0xFFFFFF00
_0806C0F8:
	ldr r0, [r4, #0x10]
	movs r1, #0x80
	lsls r1, r1, #1
_0806C0FE:
	adds r0, r0, r1
	str r0, [r4, #0x10]
_0806C102:
	movs r0, #0
	str r0, [sp]
	adds r0, r6, #0
	mov r1, r8
	adds r2, r7, #0
	adds r3, r4, #0
	bl sub_8020950
	cmp r0, #0
	bne _0806C0E4
_0806C116:
	lsls r0, r5, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #1
	bls _0806C094
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_806C12C
sub_806C12C: @ 0x0806C12C
	push {r4, r5, r6, lr}
	sub sp, #0x18
	ldr r0, _0806C1B8 @ =gCurTask
	ldr r0, [r0]
	ldrh r5, [r0, #6]
	movs r4, #0xc0
	lsls r4, r4, #0x12
	adds r4, r5, r4
	ldr r1, [r4, #0x50]
	ldr r0, [r1, #4]
	movs r2, #0x80
	lsls r2, r2, #0x14
	orrs r0, r2
	str r0, [r1, #4]
	ldr r1, [r4, #0x54]
	ldr r0, [r1, #4]
	orrs r0, r2
	str r0, [r1, #4]
	ldr r1, [r4]
	asrs r1, r1, #8
	ldr r2, _0806C1BC @ =gCamera
	ldr r0, [r2]
	subs r1, r1, r0
	str r1, [sp, #0x10]
	ldr r0, [r4, #4]
	asrs r0, r0, #8
	ldr r2, [r2, #4]
	subs r0, r0, r2
	str r0, [sp, #0x14]
	lsls r1, r1, #8
	str r1, [r4, #0x48]
	lsls r0, r0, #8
	str r0, [r4, #0x4c]
	ldrh r0, [r4, #0x2c]
	lsrs r0, r0, #4
	movs r6, #0x28
	str r6, [sp]
	ldr r2, [sp, #0x10]
	lsls r1, r2, #0x10
	asrs r1, r1, #0x10
	str r1, [sp, #4]
	ldr r2, [sp, #0x14]
	lsls r1, r2, #0x10
	asrs r1, r1, #0x10
	str r1, [sp, #8]
	ldr r1, _0806C1C0 @ =gBgAffineRegs
	str r1, [sp, #0xc]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r2, r1, #0
	movs r3, #0x28
	bl sa2__sub_8003EE4
	ldr r0, _0806C1C4 @ =0x0300006C
	adds r5, r5, r0
	strh r6, [r5, #0x10]
	strh r6, [r5, #0x12]
	adds r0, r5, #0
	bl sa2__sub_80036E0
	adds r0, r5, #0
	bl sub_80BE46C
	adds r0, r4, #0
	bl sub_806BC50
	add sp, #0x18
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0806C1B8: .4byte gCurTask
_0806C1BC: .4byte gCamera
_0806C1C0: .4byte gBgAffineRegs
_0806C1C4: .4byte 0x0300006C

	thumb_func_start sub_806C1C8
sub_806C1C8: @ 0x0806C1C8
	push {r4, r5, r6, lr}
	sub sp, #0x18
	ldr r0, _0806C2DC @ =gCurTask
	ldr r0, [r0]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r4, r0
	ldr r1, [r6]
	asrs r1, r1, #8
	ldr r2, _0806C2E0 @ =gCamera
	ldr r0, [r2]
	subs r1, r1, r0
	str r1, [sp, #0x10]
	ldr r0, [r6, #4]
	asrs r0, r0, #8
	ldr r2, [r2, #4]
	subs r0, r0, r2
	str r0, [sp, #0x14]
	lsls r1, r1, #8
	str r1, [r6, #0x48]
	lsls r0, r0, #8
	str r0, [r6, #0x4c]
	ldrh r0, [r6, #0x2c]
	lsrs r0, r0, #4
	movs r5, #0x28
	str r5, [sp]
	ldr r2, [sp, #0x10]
	lsls r1, r2, #0x10
	asrs r1, r1, #0x10
	str r1, [sp, #4]
	ldr r2, [sp, #0x14]
	lsls r1, r2, #0x10
	asrs r1, r1, #0x10
	str r1, [sp, #8]
	ldr r1, _0806C2E4 @ =gBgAffineRegs
	str r1, [sp, #0xc]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r2, r1, #0
	movs r3, #0x28
	bl sa2__sub_8003EE4
	ldr r0, _0806C2E8 @ =0x0300006C
	adds r4, r4, r0
	strh r5, [r4, #0x10]
	strh r5, [r4, #0x12]
	adds r0, r4, #0
	bl sa2__sub_80036E0
	adds r0, r4, #0
	bl sub_80BE46C
	adds r0, r6, #0
	bl sub_806BC50
	movs r1, #0
	ldr r3, _0806C2EC @ =gPlayers
	movs r2, #0xb4
	lsls r2, r2, #1
_0806C240:
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r3
	adds r0, #0x52
	strh r2, [r0]
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #3
	bls _0806C240
	adds r0, r6, #0
	bl sub_806CFD4
	adds r4, r0, #0
	cmp r4, #1
	bne _0806C2C0
	ldr r2, _0806C2E0 @ =gCamera
	ldr r0, [r2]
	adds r0, #0x78
	lsls r0, r0, #8
	str r0, [r6]
	movs r1, #0
	str r1, [r6, #0x44]
	str r1, [r6, #0x40]
	movs r0, #0x80
	lsls r0, r0, #2
	str r0, [r6, #0x38]
	str r1, [r6, #0x3c]
	adds r0, r6, #0
	adds r0, #0x24
	strb r4, [r0]
	movs r3, #0
	strh r1, [r6, #0x2a]
	strb r3, [r6, #0x17]
	ldr r1, [r6]
	asrs r1, r1, #8
	ldr r0, [r2]
	subs r1, r1, r0
	ldr r0, [r6, #4]
	asrs r0, r0, #8
	ldr r2, [r2, #4]
	subs r0, r0, r2
	lsls r1, r1, #8
	str r1, [r6, #0x48]
	lsls r0, r0, #8
	str r0, [r6, #0x4c]
	strb r4, [r6, #0x16]
	adds r2, r6, #0
	adds r2, #0x94
	ldr r0, _0806C2F0 @ =gUnknown_080D5780
	ldrh r1, [r0, #0x20]
	strh r1, [r2, #0xc]
	adds r0, #0x22
	ldrb r0, [r0]
	strb r0, [r2, #0x1a]
	movs r0, #0xff
	strb r0, [r2, #0x1b]
	ldr r0, _0806C2DC @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0806C2F4 @ =sub_806C2F8
	str r0, [r1, #8]
_0806C2C0:
	ldr r1, [r6, #0x50]
	ldr r0, [r1, #4]
	movs r2, #0x80
	lsls r2, r2, #0x14
	orrs r0, r2
	str r0, [r1, #4]
	ldr r1, [r6, #0x54]
	ldr r0, [r1, #4]
	orrs r0, r2
	str r0, [r1, #4]
	add sp, #0x18
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0806C2DC: .4byte gCurTask
_0806C2E0: .4byte gCamera
_0806C2E4: .4byte gBgAffineRegs
_0806C2E8: .4byte 0x0300006C
_0806C2EC: .4byte gPlayers
_0806C2F0: .4byte gUnknown_080D5780
_0806C2F4: .4byte sub_806C2F8

	thumb_func_start sub_806C2F8
sub_806C2F8: @ 0x0806C2F8
	push {r4, lr}
	ldr r0, _0806C364 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	movs r1, #0
	ldr r3, _0806C368 @ =gPlayers
	movs r2, #0xb4
	lsls r2, r2, #1
_0806C30E:
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r3
	adds r0, #0x52
	strh r2, [r0]
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #3
	bls _0806C30E
	ldrb r0, [r4, #0x18]
	adds r0, #1
	strb r0, [r4, #0x18]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #5
	bls _0806C350
	adds r0, r4, #0
	adds r0, #0xc4
	adds r1, r4, #0
	adds r1, #0x48
	adds r2, r4, #0
	adds r2, #0x16
	bl sub_8078920
	movs r0, #0
	strb r0, [r4, #0x18]
	ldrb r0, [r4, #0x19]
	adds r0, #1
	strb r0, [r4, #0x19]
_0806C350:
	ldrb r0, [r4, #0x19]
	cmp r0, #5
	bls _0806C35E
	ldr r0, _0806C364 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0806C36C @ =sub_806C370
	str r0, [r1, #8]
_0806C35E:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806C364: .4byte gCurTask
_0806C368: .4byte gPlayers
_0806C36C: .4byte sub_806C370

	thumb_func_start sub_806C370
sub_806C370: @ 0x0806C370
	push {r4, r5, r6, r7, lr}
	sub sp, #0x28
	ldr r0, _0806C45C @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r1, r0
	ldr r1, [r6]
	asrs r1, r1, #8
	ldr r3, _0806C460 @ =gCamera
	ldr r0, [r3]
	subs r1, r1, r0
	str r1, [sp, #0x10]
	ldr r0, [r6, #4]
	asrs r0, r0, #8
	ldr r2, [r3, #4]
	subs r0, r0, r2
	str r0, [sp, #0x14]
	lsls r1, r1, #8
	str r1, [r6, #0x48]
	lsls r0, r0, #8
	str r0, [r6, #0x4c]
	movs r1, #0
	ldr r7, _0806C464 @ =gBgAffineRegs
	ldr r4, _0806C468 @ =gPlayers
	movs r2, #0xb4
	lsls r2, r2, #1
_0806C3A8:
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r4
	adds r0, #0x52
	strh r2, [r0]
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #3
	bls _0806C3A8
	ldr r1, [r6]
	asrs r1, r1, #8
	ldr r0, [r3]
	subs r1, r1, r0
	str r1, [sp, #0x18]
	ldr r0, [r6, #4]
	asrs r0, r0, #8
	ldr r2, [r3, #4]
	subs r0, r0, r2
	str r0, [sp, #0x1c]
	lsls r1, r1, #8
	str r1, [r6, #0x48]
	lsls r0, r0, #8
	str r0, [r6, #0x4c]
	ldrh r0, [r6, #0x2c]
	lsrs r0, r0, #4
	movs r5, #0x28
	str r5, [sp]
	ldr r2, [sp, #0x18]
	lsls r1, r2, #0x10
	asrs r1, r1, #0x10
	str r1, [sp, #4]
	ldr r2, [sp, #0x1c]
	lsls r1, r2, #0x10
	asrs r1, r1, #0x10
	str r1, [sp, #8]
	str r7, [sp, #0xc]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r2, r1, #0
	movs r3, #0x28
	bl sa2__sub_8003EE4
	adds r4, r6, #0
	adds r4, #0x6c
	strh r5, [r4, #0x10]
	strh r5, [r4, #0x12]
	adds r0, r4, #0
	bl sa2__sub_80036E0
	adds r0, r4, #0
	bl sub_80BE46C
	adds r0, r6, #0
	bl sub_806BC50
	ldrh r0, [r6, #0x2c]
	subs r0, #0xe0
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r1, _0806C46C @ =0x00003FF0
	cmp r0, r1
	bls _0806C430
	strh r1, [r6, #0x2c]
_0806C430:
	adds r0, r6, #0
	bl sub_806C9C4
	ldr r0, [sp, #0x14]
	cmp r0, #0xa
	ble _0806C442
	adds r0, r6, #0
	bl sub_806C5D4
_0806C442:
	adds r0, r6, #0
	bl sub_806C6FC
	cmp r0, #1
	bne _0806C4DE
	ldr r4, [r6, #0x3c]
	cmp r4, #0
	beq _0806C474
	ldr r0, _0806C45C @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0806C470 @ =sub_806C4F8
	b _0806C4DC
	.align 2, 0
_0806C45C: .4byte gCurTask
_0806C460: .4byte gCamera
_0806C464: .4byte gBgAffineRegs
_0806C468: .4byte gPlayers
_0806C46C: .4byte 0x00003FF0
_0806C470: .4byte sub_806C4F8
_0806C474:
	ldr r3, _0806C4E8 @ =gSineTable
	ldrb r1, [r6, #0x1f]
	lsls r0, r1, #3
	adds r0, r0, r3
	ldrh r2, [r0]
	lsls r2, r2, #0x10
	asrs r2, r2, #0x16
	rsbs r2, r2, #0
	lsls r1, r1, #3
	movs r0, #0x80
	lsls r0, r0, #2
	adds r1, r1, r0
	adds r1, r1, r3
	ldrh r3, [r1]
	lsls r3, r3, #0x10
	asrs r3, r3, #0x16
	lsls r1, r2, #5
	ldr r0, [r6]
	adds r0, r0, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	lsls r2, r2, #1
	adds r2, r0, r2
	str r2, [sp, #0x20]
	lsls r1, r3, #5
	ldr r0, [r6, #4]
	adds r0, r0, r1
	lsls r1, r3, #2
	adds r0, r0, r1
	lsls r3, r3, #1
	adds r3, r0, r3
	str r3, [sp, #0x24]
	asrs r1, r2, #8
	str r1, [sp, #0x20]
	adds r2, r3, #0
	asrs r0, r2, #8
	str r4, [sp]
	ldr r2, _0806C4EC @ =sub_805217C
	str r2, [sp, #4]
	movs r2, #0
	movs r3, #8
	bl sub_8052394
	lsls r0, r0, #0x18
	asrs r0, r0, #0x10
	ldr r1, [r6, #4]
	adds r1, r1, r0
	str r1, [r6, #4]
	strh r4, [r6, #0x2a]
	ldr r0, _0806C4F0 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0806C4F4 @ =sub_806C7B0
_0806C4DC:
	str r0, [r1, #8]
_0806C4DE:
	add sp, #0x28
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806C4E8: .4byte gSineTable
_0806C4EC: .4byte sub_805217C
_0806C4F0: .4byte gCurTask
_0806C4F4: .4byte sub_806C7B0

	thumb_func_start sub_806C4F8
sub_806C4F8: @ 0x0806C4F8
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	ldr r0, _0806C5BC @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r1, r0
	movs r1, #0
	ldr r7, _0806C5C0 @ =gCamera
	ldr r0, _0806C5C4 @ =gBgAffineRegs
	mov ip, r0
	ldr r5, _0806C5C8 @ =gPlayers
	movs r2, #0xb4
	lsls r2, r2, #1
_0806C516:
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r5
	adds r0, #0x52
	strh r2, [r0]
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #3
	bls _0806C516
	ldr r1, [r6]
	asrs r1, r1, #8
	ldr r0, [r7]
	subs r1, r1, r0
	adds r3, r1, #0
	ldr r0, [r6, #4]
	asrs r0, r0, #8
	ldr r2, [r7, #4]
	subs r0, r0, r2
	adds r4, r0, #0
	lsls r1, r1, #8
	str r1, [r6, #0x48]
	lsls r0, r0, #8
	str r0, [r6, #0x4c]
	ldrh r0, [r6, #0x2c]
	lsrs r0, r0, #4
	movs r5, #0x28
	str r5, [sp]
	lsls r1, r3, #0x10
	asrs r1, r1, #0x10
	str r1, [sp, #4]
	lsls r1, r4, #0x10
	asrs r1, r1, #0x10
	str r1, [sp, #8]
	mov r1, ip
	str r1, [sp, #0xc]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r2, r1, #0
	movs r3, #0x28
	bl sa2__sub_8003EE4
	adds r4, r6, #0
	adds r4, #0x6c
	strh r5, [r4, #0x10]
	strh r5, [r4, #0x12]
	adds r0, r4, #0
	bl sa2__sub_80036E0
	adds r0, r4, #0
	bl sub_80BE46C
	adds r0, r6, #0
	bl sub_806BC50
	ldrh r0, [r6, #0x2c]
	subs r0, #0xe0
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r1, _0806C5CC @ =0x00003FF0
	cmp r0, r1
	bls _0806C59C
	strh r1, [r6, #0x2c]
_0806C59C:
	adds r0, r6, #0
	bl sub_806C9C4
	adds r0, r6, #0
	bl sub_806CF70
	cmp r0, #1
	bne _0806C5B4
	ldr r0, _0806C5BC @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0806C5D0 @ =sub_806C370
	str r0, [r1, #8]
_0806C5B4:
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806C5BC: .4byte gCurTask
_0806C5C0: .4byte gCamera
_0806C5C4: .4byte gBgAffineRegs
_0806C5C8: .4byte gPlayers
_0806C5CC: .4byte 0x00003FF0
_0806C5D0: .4byte sub_806C370

	thumb_func_start sub_806C5D4
sub_806C5D4: @ 0x0806C5D4
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0x14
	adds r7, r0, #0
	movs r0, #0
	mov sb, r0
	mov r8, r0
	movs r0, #0
	movs r1, #0
	str r0, [sp, #8]
	str r1, [sp, #0xc]
	ldr r3, _0806C6A0 @ =gSineTable
	ldrb r1, [r7, #0x1f]
	lsls r0, r1, #3
	adds r0, r0, r3
	ldrh r2, [r0]
	lsls r2, r2, #0x10
	asrs r2, r2, #0x16
	rsbs r2, r2, #0
	lsls r1, r1, #3
	movs r0, #0x80
	lsls r0, r0, #2
	adds r1, r1, r0
	adds r1, r1, r3
	ldrh r3, [r1]
	lsls r3, r3, #0x10
	asrs r3, r3, #0x16
	lsls r1, r2, #5
	ldr r0, [r7]
	adds r0, r0, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	lsls r2, r2, #1
	adds r2, r0, r2
	str r2, [sp, #8]
	lsls r1, r3, #5
	ldr r0, [r7, #4]
	adds r0, r0, r1
	lsls r1, r3, #2
	adds r0, r0, r1
	lsls r3, r3, #1
	adds r3, r0, r3
	str r3, [sp, #0xc]
	adds r1, r2, #0
	asrs r6, r1, #8
	str r6, [sp, #8]
	adds r0, r3, #0
	asrs r0, r0, #8
	str r0, [sp, #0x10]
	movs r3, #8
	rsbs r3, r3, #0
	mov r1, sb
	str r1, [sp]
	ldr r4, _0806C6A4 @ =sub_805203C
	str r4, [sp, #4]
	adds r0, r6, #0
	ldr r1, [sp, #0x10]
	movs r2, #0
	bl sub_8052394
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	mov sb, r5
	mov r0, r8
	str r0, [sp]
	str r4, [sp, #4]
	adds r0, r6, #0
	ldr r1, [sp, #0x10]
	movs r2, #0
	movs r3, #8
	bl sub_8052394
	ldr r3, [r7]
	asrs r2, r3, #8
	adds r1, r2, #0
	subs r1, #0x1e
	ldr r0, _0806C6A8 @ =gCamera
	ldr r0, [r0]
	cmp r1, r0
	bge _0806C6AC
	ldr r0, [r7, #0x38]
	cmp r0, #0
	bge _0806C680
	rsbs r0, r0, #0
_0806C680:
	str r0, [r7, #0x38]
	lsls r0, r5, #0x18
	asrs r0, r0, #0x10
	adds r0, r3, r0
	str r0, [r7]
	movs r0, #0x80
	lsls r0, r0, #4
	movs r3, #1
	rsbs r3, r3, #0
	movs r1, #0x51
	str r1, [sp]
	movs r1, #0x20
	movs r2, #0
	bl sub_805256C
	b _0806C6E0
	.align 2, 0
_0806C6A0: .4byte gSineTable
_0806C6A4: .4byte sub_805203C
_0806C6A8: .4byte gCamera
_0806C6AC:
	adds r1, r2, #0
	adds r1, #0x1e
	adds r0, #0xf0
	cmp r1, r0
	ble _0806C6E0
	ldr r0, [r7, #0x38]
	cmp r0, #0
	bge _0806C6BE
	rsbs r0, r0, #0
_0806C6BE:
	rsbs r0, r0, #0
	str r0, [r7, #0x38]
	mov r1, sb
	lsls r0, r1, #0x18
	asrs r0, r0, #0x10
	adds r0, r3, r0
	str r0, [r7]
	movs r0, #0x80
	lsls r0, r0, #4
	movs r3, #1
	rsbs r3, r3, #0
	movs r1, #0x51
	str r1, [sp]
	movs r1, #0x20
	movs r2, #0
	bl sub_805256C
_0806C6E0:
	ldr r0, [r7, #0x38]
	ldr r1, [r7, #0x40]
	adds r0, r0, r1
	str r0, [r7, #0x38]
	ldr r1, [r7]
	adds r1, r1, r0
	str r1, [r7]
	add sp, #0x14
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_806C6FC
sub_806C6FC: @ 0x0806C6FC
	push {r4, r5, r6, lr}
	sub sp, #4
	mov ip, r0
	movs r6, #0
	ldr r4, [r0, #4]
	adds r3, r4, #0
	asrs r3, r3, #8
	asrs r0, r4, #8
	ldr r5, _0806C770 @ =gCamera
	ldr r1, [r5, #4]
	subs r0, r0, r1
	cmp r0, #0x14
	ble _0806C722
	ldr r0, [r5, #0x14]
	adds r1, r3, #0
	adds r1, #0x30
	subs r0, r0, r1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
_0806C722:
	lsls r0, r6, #0x18
	asrs r0, r0, #0x18
	movs r3, #1
	rsbs r3, r3, #0
	cmp r0, r3
	bge _0806C778
	lsls r0, r0, #8
	adds r0, r4, r0
	mov r1, ip
	str r0, [r1, #4]
	adds r1, #0x24
	movs r2, #0
	movs r0, #1
	strb r0, [r1]
	ldr r1, _0806C774 @ =gUnknown_080D57C0
	mov r4, ip
	ldrh r0, [r4, #0x2a]
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r1, r0, #8
	lsls r0, r0, #9
	subs r1, r1, r0
	str r1, [r4, #0x3c]
	str r2, [r4, #0x44]
	ldrh r0, [r4, #0x2a]
	cmp r0, #3
	bhi _0806C75C
	adds r0, #1
	strh r0, [r4, #0x2a]
_0806C75C:
	movs r0, #0x80
	lsls r0, r0, #4
	movs r1, #0x91
	str r1, [sp]
	movs r1, #0x20
	movs r2, #0
	bl sub_805256C
	movs r0, #1
	b _0806C7A8
	.align 2, 0
_0806C770: .4byte gCamera
_0806C774: .4byte gUnknown_080D57C0
_0806C778:
	mov r0, ip
	adds r0, #0x24
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #2
	mov r2, ip
	ldr r1, [r2, #0x44]
	adds r1, r1, r0
	str r1, [r2, #0x44]
	ldr r0, [r2, #0x3c]
	adds r0, r0, r1
	str r0, [r2, #0x3c]
	movs r1, #0xc0
	lsls r1, r1, #3
	cmp r0, r1
	ble _0806C79C
	str r1, [r2, #0x3c]
_0806C79C:
	mov r4, ip
	ldr r0, [r4, #4]
	ldr r1, [r4, #0x3c]
	adds r0, r0, r1
	str r0, [r4, #4]
	movs r0, #0
_0806C7A8:
	add sp, #4
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_806C7B0
sub_806C7B0: @ 0x0806C7B0
	push {r4, r5, r6, r7, lr}
	sub sp, #0x18
	ldr r0, _0806C8A0 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r1, r0
	ldr r1, [r6]
	asrs r1, r1, #8
	ldr r3, _0806C8A4 @ =gCamera
	ldr r0, [r3]
	subs r1, r1, r0
	ldr r0, [r6, #4]
	asrs r0, r0, #8
	ldr r2, [r3, #4]
	subs r0, r0, r2
	lsls r1, r1, #8
	str r1, [r6, #0x48]
	lsls r0, r0, #8
	str r0, [r6, #0x4c]
	movs r1, #0
	ldr r7, _0806C8A8 @ =gBgAffineRegs
	ldr r4, _0806C8AC @ =gPlayers
	movs r2, #0xb4
	lsls r2, r2, #1
_0806C7E4:
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r4
	adds r0, #0x52
	strh r2, [r0]
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #3
	bls _0806C7E4
	ldr r1, [r6]
	asrs r1, r1, #8
	ldr r0, [r3]
	subs r1, r1, r0
	str r1, [sp, #0x10]
	ldr r0, [r6, #4]
	asrs r0, r0, #8
	ldr r2, [r3, #4]
	subs r0, r0, r2
	str r0, [sp, #0x14]
	lsls r1, r1, #8
	str r1, [r6, #0x48]
	lsls r0, r0, #8
	str r0, [r6, #0x4c]
	ldrh r0, [r6, #0x2c]
	lsrs r0, r0, #4
	movs r5, #0x28
	str r5, [sp]
	ldr r2, [sp, #0x10]
	lsls r1, r2, #0x10
	asrs r1, r1, #0x10
	str r1, [sp, #4]
	ldr r2, [sp, #0x14]
	lsls r1, r2, #0x10
	asrs r1, r1, #0x10
	str r1, [sp, #8]
	str r7, [sp, #0xc]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r2, r1, #0
	movs r3, #0x28
	bl sa2__sub_8003EE4
	adds r4, r6, #0
	adds r4, #0x6c
	movs r7, #0
	strh r5, [r4, #0x10]
	strh r5, [r4, #0x12]
	adds r0, r4, #0
	bl sa2__sub_80036E0
	adds r0, r4, #0
	bl sub_80BE46C
	strb r7, [r6, #0x16]
	ldrb r0, [r6, #0x17]
	cmp r0, #0
	bne _0806C898
	strh r0, [r6, #0x2a]
	strb r7, [r6, #0x18]
	movs r0, #0x80
	lsls r0, r0, #4
	movs r3, #1
	rsbs r3, r3, #0
	movs r1, #0x51
	str r1, [sp]
	movs r1, #0x20
	movs r2, #0
	bl sub_805256C
	adds r0, r6, #0
	adds r0, #0xc4
	adds r1, r6, #0
	adds r1, #0x48
	adds r2, r6, #0
	adds r2, #0x16
	bl sub_80789EC
	ldr r2, _0806C8B0 @ =gDispCnt
	ldrh r1, [r2]
	ldr r0, _0806C8B4 @ =0x0000FBFF
	ands r0, r1
	strh r0, [r2]
	ldr r0, _0806C8A0 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0806C8B8 @ =sub_806C8BC
	str r0, [r1, #8]
_0806C898:
	add sp, #0x18
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806C8A0: .4byte gCurTask
_0806C8A4: .4byte gCamera
_0806C8A8: .4byte gBgAffineRegs
_0806C8AC: .4byte gPlayers
_0806C8B0: .4byte gDispCnt
_0806C8B4: .4byte 0x0000FBFF
_0806C8B8: .4byte sub_806C8BC

	thumb_func_start sub_806C8BC
sub_806C8BC: @ 0x0806C8BC
	push {r4, r5, lr}
	ldr r0, _0806C944 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	ldr r1, [r5]
	asrs r1, r1, #8
	ldr r2, _0806C948 @ =gCamera
	ldr r0, [r2]
	subs r1, r1, r0
	ldr r0, [r5, #4]
	asrs r0, r0, #8
	ldr r2, [r2, #4]
	subs r0, r0, r2
	lsls r1, r1, #8
	str r1, [r5, #0x48]
	lsls r0, r0, #8
	str r0, [r5, #0x4c]
	movs r1, #0
	ldr r3, _0806C94C @ =gPlayers
	movs r2, #0xb4
	lsls r2, r2, #1
_0806C8EC:
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r3
	adds r0, #0x52
	strh r2, [r0]
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #3
	bls _0806C8EC
	ldrb r0, [r5, #0x18]
	adds r0, #1
	strb r0, [r5, #0x18]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #5
	bls _0806C932
	ldrh r0, [r5, #0x2a]
	cmp r0, #1
	bhi _0806C932
	adds r0, #1
	movs r4, #0
	strh r0, [r5, #0x2a]
	adds r0, r5, #0
	adds r0, #0xc4
	adds r1, r5, #0
	adds r1, #0x48
	adds r2, r5, #0
	adds r2, #0x16
	bl sub_80789EC
	strb r4, [r5, #0x18]
_0806C932:
	ldrb r0, [r5, #0x16]
	cmp r0, #1
	bhi _0806C950
	adds r0, r5, #0
	adds r0, #0xc4
	bl UpdateSpriteAnimation
	b _0806C95E
	.align 2, 0
_0806C944: .4byte gCurTask
_0806C948: .4byte gCamera
_0806C94C: .4byte gPlayers
_0806C950:
	ldr r0, _0806C964 @ =0x00000221
	bl m4aSongNumStart
	ldr r0, _0806C968 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0806C96C @ =sub_806C970
	str r0, [r1, #8]
_0806C95E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806C964: .4byte 0x00000221
_0806C968: .4byte gCurTask
_0806C96C: .4byte sub_806C970

	thumb_func_start sub_806C970
sub_806C970: @ 0x0806C970
	push {r4, r5, r6, lr}
	ldr r2, _0806C9B8 @ =gCurTask
	ldr r0, [r2]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r1, r1, r0
	movs r3, #0
	adds r5, r2, #0
	ldr r6, _0806C9BC @ =sub_806B788
	ldr r4, _0806C9C0 @ =gPlayers
	movs r2, #0xb4
	lsls r2, r2, #1
_0806C98A:
	lsls r0, r3, #2
	adds r0, r0, r3
	lsls r0, r0, #2
	adds r0, r0, r3
	lsls r0, r0, #4
	adds r0, r0, r4
	adds r0, #0x52
	strh r2, [r0]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #3
	bls _0806C98A
	movs r0, #0
	strh r0, [r1, #0x2e]
	movs r0, #3
	strb r0, [r1, #0x1b]
	strb r0, [r1, #0x1c]
	ldr r0, [r5]
	str r6, [r0, #8]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0806C9B8: .4byte gCurTask
_0806C9BC: .4byte sub_806B788
_0806C9C0: .4byte gPlayers

	thumb_func_start sub_806C9C4
sub_806C9C4: @ 0x0806C9C4
	push {lr}
	adds r3, r0, #0
	ldr r1, [r3]
	asrs r1, r1, #8
	ldr r2, _0806CA18 @ =gCamera
	ldr r0, [r2]
	subs r1, r1, r0
	ldr r0, [r3, #4]
	asrs r0, r0, #8
	ldr r2, [r2, #4]
	subs r0, r0, r2
	lsls r1, r1, #8
	str r1, [r3, #0x48]
	lsls r0, r0, #8
	str r0, [r3, #0x4c]
	ldrh r0, [r3, #0x2e]
	adds r0, #1
	strh r0, [r3, #0x2e]
	ldr r2, _0806CA1C @ =gUnknown_080D57C5
	ldrb r1, [r3, #0x17]
	adds r1, r1, r2
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrb r1, [r1]
	cmp r0, r1
	bls _0806CA24
	movs r0, #0
	strh r0, [r3, #0x2e]
	ldrb r0, [r3, #0x17]
	adds r0, #1
	strb r0, [r3, #0x17]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #3
	bhi _0806CA20
	adds r0, r3, #0
	adds r0, #0x48
	adds r1, r3, #0
	adds r1, #0x17
	bl sub_80781C0
	b _0806CA24
	.align 2, 0
_0806CA18: .4byte gCamera
_0806CA1C: .4byte gUnknown_080D57C5
_0806CA20:
	movs r0, #3
	strb r0, [r3, #0x17]
_0806CA24:
	pop {r0}
	bx r0

	thumb_func_start sub_806CA28
sub_806CA28: @ 0x0806CA28
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	movs r4, #0
	movs r0, #0x96
	lsls r0, r0, #1
	strh r0, [r7, #0x2e]
	movs r5, #0
	ldr r6, _0806CA48 @ =gPlayers
_0806CA38:
	cmp r5, #0
	beq _0806CA4C
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	lsls r1, r1, #0x1e
	lsrs r1, r1, #0x1e
	b _0806CA50
	.align 2, 0
_0806CA48: .4byte gPlayers
_0806CA4C:
	ldr r0, _0806CA9C @ =gStageData
	ldrb r1, [r0, #6]
_0806CA50:
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r4, r0, r6
	ldr r0, [r4, #4]
	movs r1, #0x80
	lsls r1, r1, #1
	ands r0, r1
	cmp r0, #0
	bne _0806CA78
	adds r0, r4, #0
	bl Player_8005380
	ldr r0, [r4, #4]
	movs r1, #0x80
	lsls r1, r1, #0x14
	orrs r0, r1
	str r0, [r4, #4]
_0806CA78:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #1
	bls _0806CA38
	adds r2, r7, #0
	adds r2, #0x94
	ldr r0, _0806CAA0 @ =gUnknown_080D5780
	ldrh r1, [r0, #0x20]
	strh r1, [r2, #0xc]
	adds r0, #0x22
	ldrb r0, [r0]
	strb r0, [r2, #0x1a]
	movs r0, #0xff
	strb r0, [r2, #0x1b]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806CA9C: .4byte gStageData
_0806CAA0: .4byte gUnknown_080D5780

	thumb_func_start sub_806CAA4
sub_806CAA4: @ 0x0806CAA4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	adds r5, r0, #0
	movs r4, #0
	movs r0, #0
	str r0, [sp, #8]
	ldr r0, [r5, #0x10]
	asrs r7, r0, #8
	ldr r0, [r5, #0x14]
	asrs r6, r0, #8
	ldrh r0, [r5, #0xc]
	lsls r0, r0, #8
	adds r7, r7, r0
	ldrh r0, [r5, #0xe]
	lsls r0, r0, #8
	adds r6, r6, r0
	ldr r1, [r5, #0x1c]
	mov r8, r1
	lsls r0, r7, #8
	lsls r1, r6, #8
	bl sub_8004D68
	movs r0, #0
	mov sl, r0
_0806CADC:
	mov r1, sl
	cmp r1, #0
	bne _0806CAEC
	ldr r0, _0806CAE8 @ =gStageData
	ldrb r1, [r0, #6]
	b _0806CAF6
	.align 2, 0
_0806CAE8: .4byte gStageData
_0806CAEC:
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	lsls r1, r1, #0x1e
	lsrs r1, r1, #0x1e
_0806CAF6:
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	ldr r1, _0806CB60 @ =gPlayers
	adds r4, r0, r1
	ldr r0, [r4, #4]
	movs r1, #0x80
	lsls r1, r1, #0x11
	ands r0, r1
	cmp r0, #0
	beq _0806CB12
	b _0806CC8C
_0806CB12:
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r1, [r0]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #1
	bne _0806CB2E
	mov r0, r8
	bl sub_805C510
	cmp r0, #1
	bne _0806CB2E
	movs r0, #1
	str r0, [sp, #8]
_0806CB2E:
	adds r0, r4, #0
	bl sub_802C080
	cmp r0, #0
	beq _0806CB3A
	b _0806CC8C
_0806CB3A:
	str r4, [sp]
	str r0, [sp, #4]
	mov r0, r8
	adds r1, r7, #0
	adds r2, r6, #0
	movs r3, #1
	bl sub_8020700
	cmp r0, #0
	beq _0806CB64
	adds r0, r4, #0
	adds r0, #0x4c
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0806CB5C
	b _0806CC8C
_0806CB5C:
	b _0806CBE6
	.align 2, 0
_0806CB60: .4byte gPlayers
_0806CB64:
	str r4, [sp]
	movs r0, #1
	mov sb, r0
	str r0, [sp, #4]
	mov r0, r8
	adds r1, r7, #0
	adds r2, r6, #0
	movs r3, #0
	bl sub_8020700
	cmp r0, #0
	beq _0806CBC6
	ldr r0, [r4, #0x10]
	asrs r0, r0, #8
	cmp r0, r7
	bge _0806CB8A
	mov r1, sb
	strb r1, [r5, #0xa]
	b _0806CB8E
_0806CB8A:
	movs r0, #0xff
	strb r0, [r5, #0xa]
_0806CB8E:
	ldr r0, [r4, #0x14]
	asrs r0, r0, #8
	cmp r0, r6
	bge _0806CB9A
	movs r0, #1
	b _0806CB9C
_0806CB9A:
	movs r0, #0xff
_0806CB9C:
	strb r0, [r5, #0xb]
	adds r0, r4, #0
	bl sub_806CCB0
	mov r0, sl
	cmp r0, #0
	bne _0806CBB4
	ldr r0, _0806CBB0 @ =gStageData
	ldrb r0, [r0, #6]
	b _0806CBBE
	.align 2, 0
_0806CBB0: .4byte gStageData
_0806CBB4:
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	lsrs r0, r0, #0x1e
_0806CBBE:
	strb r0, [r5, #9]
	movs r1, #1
	str r1, [sp, #8]
	b _0806CC8C
_0806CBC6:
	str r4, [sp]
	str r0, [sp, #4]
	mov r0, r8
	adds r1, r7, #0
	adds r2, r6, #0
	movs r3, #0
	bl sub_8020700
	cmp r0, #0
	beq _0806CC4E
	adds r0, r4, #0
	adds r0, #0x4c
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _0806CC04
_0806CBE6:
	str r4, [sp]
	mov r0, r8
	adds r1, r7, #0
	adds r2, r6, #0
	movs r3, #0
	bl sub_8020CE0
	str r4, [sp]
	mov r0, r8
	adds r1, r7, #0
	adds r2, r6, #0
	movs r3, #1
	bl sub_8020CE0
	b _0806CC8C
_0806CC04:
	ldr r0, [r4, #0x10]
	asrs r0, r0, #8
	cmp r0, r7
	bge _0806CC10
	mov r0, sb
	b _0806CC12
_0806CC10:
	movs r0, #0xff
_0806CC12:
	strb r0, [r5, #0xa]
	ldr r0, [r4, #0x14]
	asrs r0, r0, #8
	cmp r0, r6
	bge _0806CC20
	movs r0, #1
	b _0806CC22
_0806CC20:
	movs r0, #0xff
_0806CC22:
	strb r0, [r5, #0xb]
	adds r0, r4, #0
	bl sub_806CCB0
	mov r1, sl
	cmp r1, #0
	bne _0806CC3C
	ldr r0, _0806CC38 @ =gStageData
	ldrb r0, [r0, #6]
	b _0806CC46
	.align 2, 0
_0806CC38: .4byte gStageData
_0806CC3C:
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	lsrs r0, r0, #0x1e
_0806CC46:
	strb r0, [r5, #9]
	movs r0, #1
	str r0, [sp, #8]
	b _0806CC8C
_0806CC4E:
	str r4, [sp]
	mov r1, sb
	str r1, [sp, #4]
	mov r0, r8
	adds r1, r7, #0
	adds r2, r6, #0
	movs r3, #1
	bl sub_8020700
	cmp r0, #0
	beq _0806CC8C
	adds r0, r4, #0
	adds r0, #0x4c
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _0806CC8C
	str r4, [sp]
	mov r0, r8
	adds r1, r7, #0
	adds r2, r6, #0
	movs r3, #0
	bl sub_8020CE0
	str r4, [sp]
	mov r0, r8
	adds r1, r7, #0
	adds r2, r6, #0
	movs r3, #1
	bl sub_8020CE0
_0806CC8C:
	mov r0, sl
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov sl, r0
	cmp r0, #1
	bhi _0806CC9C
	b _0806CADC
_0806CC9C:
	ldr r0, [sp, #8]
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806CCB0
sub_806CCB0: @ 0x0806CCB0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0806CD1C @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r2, r1, r0
	ldr r0, [r4, #4]
	movs r1, #4
	ands r0, r1
	cmp r0, #0
	beq _0806CDB0
	ldr r1, [r4, #0x10]
	asrs r1, r1, #8
	ldr r0, [r2]
	asrs r0, r0, #8
	subs r1, r1, r0
	ldr r0, [r4, #0x14]
	asrs r0, r0, #8
	ldr r2, [r2, #4]
	asrs r2, r2, #8
	subs r0, r0, r2
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	bl sa2__sub_8004418
	lsls r0, r0, #0x10
	ldr r1, _0806CD20 @ =gSineTable
	lsrs r2, r0, #0x10
	asrs r0, r0, #0xf
	movs r3, #0x80
	lsls r3, r3, #2
	adds r0, r0, r3
	adds r0, r0, r1
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bge _0806CD24
	ldrh r0, [r4, #0x1c]
	lsls r0, r0, #0x10
	cmp r0, #0
	blt _0806CD10
	asrs r0, r0, #0x11
	rsbs r0, r0, #0
	strh r0, [r4, #0x1c]
_0806CD10:
	ldrh r0, [r4, #0x18]
	lsls r0, r0, #0x10
	cmp r0, #0
	blt _0806CD40
	b _0806CD3A
	.align 2, 0
_0806CD1C: .4byte gCurTask
_0806CD20: .4byte gSineTable
_0806CD24:
	ldrh r0, [r4, #0x1c]
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0806CD32
	asrs r0, r0, #0x11
	rsbs r0, r0, #0
	strh r0, [r4, #0x1c]
_0806CD32:
	ldrh r0, [r4, #0x18]
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0806CD40
_0806CD3A:
	asrs r0, r0, #0x11
	rsbs r0, r0, #0
	strh r0, [r4, #0x18]
_0806CD40:
	movs r3, #0x1c
	ldrsh r0, [r4, r3]
	cmp r0, #0
	bge _0806CD4A
	rsbs r0, r0, #0
_0806CD4A:
	movs r1, #0xc0
	lsls r1, r1, #2
	cmp r0, r1
	ble _0806CD64
	movs r3, #0x1c
	ldrsh r0, [r4, r3]
	cmp r0, #0
	blt _0806CD5E
	strh r1, [r4, #0x1c]
	b _0806CD64
_0806CD5E:
	movs r0, #0xfd
	lsls r0, r0, #8
	strh r0, [r4, #0x1c]
_0806CD64:
	movs r1, #0x18
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bge _0806CD6E
	rsbs r0, r0, #0
_0806CD6E:
	movs r1, #0xc0
	lsls r1, r1, #2
	cmp r0, r1
	ble _0806CD88
	movs r3, #0x18
	ldrsh r0, [r4, r3]
	cmp r0, #0
	blt _0806CD82
	strh r1, [r4, #0x18]
	b _0806CD88
_0806CD82:
	movs r0, #0xfd
	lsls r0, r0, #8
	strh r0, [r4, #0x18]
_0806CD88:
	ldr r0, _0806CDA0 @ =gSineTable
	lsls r1, r2, #0x10
	asrs r1, r1, #0xf
	adds r1, r1, r0
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #0
	bge _0806CDA4
	movs r0, #0xfd
	lsls r0, r0, #8
	b _0806CDA8
	.align 2, 0
_0806CDA0: .4byte gSineTable
_0806CDA4:
	movs r0, #0x80
	lsls r0, r0, #2
_0806CDA8:
	strh r0, [r4, #0x1a]
	adds r0, r4, #0
	bl Player_800DB30
_0806CDB0:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806CDB8
sub_0806CDB8: @ 0x0806CDB8
	push {r4, r5, lr}
	ldr r1, _0806CDF8 @ =gStageData
	adds r5, r1, #0
	adds r5, #0x88
	ldr r1, [r5]
	ldrh r4, [r1, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r3, r4, r1
	ldrb r2, [r0, #2]
	movs r1, #0x7f
	ands r1, r2
	ldrb r2, [r0, #3]
	ldrb r0, [r0, #4]
	lsls r0, r0, #8
	orrs r2, r0
	cmp r1, #1
	bne _0806CE04
	ldr r0, _0806CDFC @ =0x0300005F
	adds r1, r4, r0
	movs r0, #0xff
	strb r0, [r1]
	movs r0, #0
	strb r0, [r3, #0x1d]
	adds r0, r3, #0
	bl sub_806CA28
	ldr r1, [r5]
	ldr r0, _0806CE00 @ =sub_806C1C8
	str r0, [r1, #8]
	b _0806CE22
	.align 2, 0
_0806CDF8: .4byte gStageData
_0806CDFC: .4byte 0x0300005F
_0806CE00: .4byte sub_806C1C8
_0806CE04:
	cmp r1, #1
	blt _0806CE22
	cmp r1, #4
	bgt _0806CE22
	cmp r1, #3
	blt _0806CE22
	ldrb r1, [r3, #0x1d]
	lsls r0, r2, #0x18
	lsrs r0, r0, #0x18
	cmp r1, r0
	beq _0806CE22
	ldr r0, _0806CE28 @ =0x03000025
	adds r1, r4, r0
	movs r0, #1
	strb r0, [r1]
_0806CE22:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806CE28: .4byte 0x03000025

	thumb_func_start sub_806CE2C
sub_806CE2C: @ 0x0806CE2C
	push {r4, lr}
	ldr r4, _0806CE4C @ =gCurTask
	ldr r2, [r4]
	ldrh r0, [r2, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	ldr r0, [r0, #0x10]
	ldrb r0, [r0]
	cmp r0, #3
	bne _0806CE50
	adds r0, r2, #0
	bl TaskDestroy
	b _0806CE6A
	.align 2, 0
_0806CE4C: .4byte gCurTask
_0806CE50:
	bl sub_8079FFC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806CE64
	ldr r1, [r4]
	ldr r0, _0806CE60 @ =sub_806CE74
	b _0806CE68
	.align 2, 0
_0806CE60: .4byte sub_806CE74
_0806CE64:
	ldr r1, [r4]
	ldr r0, _0806CE70 @ =sub_806ABD4
_0806CE68:
	str r0, [r1, #8]
_0806CE6A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806CE70: .4byte sub_806ABD4

	thumb_func_start sub_806CE74
sub_806CE74: @ 0x0806CE74
	push {r4, lr}
	ldr r4, _0806CE94 @ =gCurTask
	ldr r2, [r4]
	ldrh r0, [r2, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	ldr r0, [r0, #0x10]
	ldrb r0, [r0]
	cmp r0, #3
	bne _0806CE98
	adds r0, r2, #0
	bl TaskDestroy
	b _0806CEAC
	.align 2, 0
_0806CE94: .4byte gCurTask
_0806CE98:
	cmp r0, #2
	bne _0806CEAC
	bl sub_807A074
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806CEAC
	ldr r1, [r4]
	ldr r0, _0806CEB4 @ =sub_806ABD4
	str r0, [r1, #8]
_0806CEAC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806CEB4: .4byte sub_806ABD4

	thumb_func_start sub_806CEB8
sub_806CEB8: @ 0x0806CEB8
	push {r4, lr}
	ldr r0, _0806CEDC @ =gCurTask
	ldr r0, [r0]
	ldrh r0, [r0, #6]
	movs r4, #0xc0
	lsls r4, r4, #0x12
	adds r4, r0, r4
	ldr r1, _0806CEE0 @ =0x03000094
	adds r0, r0, r1
	ldr r0, [r0]
	bl VramFree
	ldr r1, [r4, #0x10]
	movs r0, #0
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806CEDC: .4byte gCurTask
_0806CEE0: .4byte 0x03000094

	thumb_func_start sub_806CEE4
sub_806CEE4: @ 0x0806CEE4
	bx lr
	.align 2, 0

	thumb_func_start sub_806CEE8
sub_806CEE8: @ 0x0806CEE8
	push {lr}
	adds r1, r0, #0
	adds r0, #0x20
	ldrb r0, [r0]
	cmp r0, #1
	bne _0806CEFC
	ldr r0, [r1, #0x38]
	cmp r0, #0
	bgt _0806CF24
	b _0806CF12
_0806CEFC:
	cmp r0, #0
	bne _0806CF08
	ldr r0, [r1, #0x38]
	cmp r0, #0
	bgt _0806CF12
	b _0806CF24
_0806CF08:
	cmp r0, #2
	bne _0806CF1A
	ldr r0, [r1, #0x3c]
	cmp r0, #0
	ble _0806CF24
_0806CF12:
	adds r0, r1, #0
	bl sub_806B5A8
	b _0806CF32
_0806CF1A:
	cmp r0, #3
	bne _0806CF32
	ldr r0, [r1, #0x3c]
	cmp r0, #0
	ble _0806CF2C
_0806CF24:
	adds r0, r1, #0
	bl sub_806B484
	b _0806CF32
_0806CF2C:
	adds r0, r1, #0
	bl sub_806B5A8
_0806CF32:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806CF38
sub_806CF38: @ 0x0806CF38
	push {r4, lr}
	sub sp, #0x28
	adds r4, r0, #0
	bl sub_806B6C8
	str r0, [sp, #4]
	adds r0, r4, #0
	adds r0, #0x94
	str r0, [sp, #0x1c]
	ldr r0, [r4, #0x48]
	str r0, [sp, #0x10]
	ldr r0, [r4, #0x4c]
	str r0, [sp, #0x14]
	mov r1, sp
	movs r2, #0
	movs r0, #0
	strh r0, [r1, #0xc]
	strh r0, [r1, #0xe]
	str r0, [sp]
	mov r0, sp
	strb r2, [r0, #8]
	bl sub_805C280
	add sp, #0x28
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806CF70
sub_806CF70: @ 0x0806CF70
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	movs r6, #0
	ldr r1, [r4, #4]
	adds r3, r1, #0
	asrs r3, r3, #8
	asrs r1, r1, #8
	ldr r5, _0806CFC8 @ =gCamera
	ldr r0, [r5, #4]
	subs r1, r1, r0
	cmp r1, #0xa
	ble _0806CF94
	ldr r0, [r5, #0x14]
	adds r1, r3, #0
	adds r1, #0x30
	subs r0, r0, r1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
_0806CF94:
	cmp r3, #0xa
	ble _0806CF9E
	adds r0, r4, #0
	bl sub_806C5D4
_0806CF9E:
	lsls r0, r6, #0x18
	cmp r0, #0
	blt _0806CFCC
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #2
	ldr r1, [r4, #0x44]
	adds r1, r1, r0
	str r1, [r4, #0x44]
	ldr r2, [r4, #0x3c]
	adds r2, r2, r1
	str r2, [r4, #0x3c]
	ldr r0, [r4, #4]
	adds r0, r0, r2
	str r0, [r4, #4]
	movs r0, #0
	b _0806CFCE
	.align 2, 0
_0806CFC8: .4byte gCamera
_0806CFCC:
	movs r0, #1
_0806CFCE:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_806CFD4
sub_806CFD4: @ 0x0806CFD4
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #4]
	asrs r0, r0, #8
	ldr r1, _0806D000 @ =gCamera
	ldr r1, [r1, #4]
	subs r3, r0, r1
	lsls r3, r3, #8
	ldr r0, _0806D004 @ =0xFFFF8800
	cmp r3, r0
	ble _0806CFF2
	ldr r5, _0806D008 @ =0xFFFFFC00
	adds r3, r3, r5
	cmp r3, r0
	bge _0806D00C
_0806CFF2:
	adds r3, r0, #0
	lsls r0, r1, #8
	adds r0, r0, r3
	str r0, [r4, #4]
	movs r0, #1
	b _0806D014
	.align 2, 0
_0806D000: .4byte gCamera
_0806D004: .4byte 0xFFFF8800
_0806D008: .4byte 0xFFFFFC00
_0806D00C:
	lsls r0, r1, #8
	adds r0, r0, r3
	str r0, [r4, #4]
	movs r0, #0
_0806D014:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806D01C
sub_806D01C: @ 0x0806D01C
	push {lr}
	adds r3, r0, #0
	ldr r2, _0806D048 @ =gPseudoRandom
	ldr r1, [r2]
	ldr r0, _0806D04C @ =0x00196225
	muls r0, r1, r0
	ldr r1, _0806D050 @ =0x3C6EF35F
	adds r0, r0, r1
	str r0, [r2]
	lsrs r0, r0, #8
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _0806D058
	adds r0, r3, #0
	adds r0, #0x24
	strb r1, [r0]
	ldrb r0, [r3, #0x1d]
	cmp r0, #1
	bne _0806D070
	ldr r0, _0806D054 @ =0xFFFFF900
	b _0806D072
	.align 2, 0
_0806D048: .4byte gPseudoRandom
_0806D04C: .4byte 0x00196225
_0806D050: .4byte 0x3C6EF35F
_0806D054: .4byte 0xFFFFF900
_0806D058:
	adds r0, r3, #0
	adds r0, #0x24
	movs r1, #0xff
	strb r1, [r0]
	ldrb r0, [r3, #0x1d]
	cmp r0, #1
	bne _0806D070
	ldr r0, _0806D06C @ =0xFFFFF900
	b _0806D072
	.align 2, 0
_0806D06C: .4byte 0xFFFFF900
_0806D070:
	ldr r0, _0806D078 @ =0xFFFFFF00
_0806D072:
	str r0, [r3, #0x40]
	pop {r0}
	bx r0
	.align 2, 0
_0806D078: .4byte 0xFFFFFF00

	thumb_func_start sub_806D07C
sub_806D07C: @ 0x0806D07C
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	adds r4, r0, #0
	ldr r1, [r4]
	asrs r1, r1, #8
	ldr r2, _0806D0E0 @ =gCamera
	ldr r0, [r2]
	subs r1, r1, r0
	adds r6, r1, #0
	ldr r0, [r4, #4]
	asrs r0, r0, #8
	ldr r2, [r2, #4]
	subs r0, r0, r2
	adds r7, r0, #0
	lsls r1, r1, #8
	str r1, [r4, #0x48]
	lsls r0, r0, #8
	str r0, [r4, #0x4c]
	ldrh r0, [r4, #0x2c]
	lsrs r0, r0, #4
	movs r2, #0x80
	lsls r2, r2, #1
	movs r5, #0x28
	str r5, [sp]
	lsls r1, r6, #0x10
	asrs r1, r1, #0x10
	str r1, [sp, #4]
	lsls r1, r7, #0x10
	asrs r1, r1, #0x10
	str r1, [sp, #8]
	ldr r1, _0806D0E4 @ =gBgAffineRegs
	str r1, [sp, #0xc]
	adds r1, r2, #0
	movs r3, #0x28
	bl sa2__sub_8003EE4
	adds r4, #0x6c
	strh r5, [r4, #0x10]
	strh r5, [r4, #0x12]
	adds r0, r4, #0
	bl sa2__sub_80036E0
	adds r0, r4, #0
	bl sub_80BE46C
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806D0E0: .4byte gCamera
_0806D0E4: .4byte gBgAffineRegs

	thumb_func_start sub_806D0E8
sub_806D0E8: @ 0x0806D0E8
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	adds r4, r0, #0
	ldr r1, [r4]
	asrs r1, r1, #8
	ldr r2, _0806D14C @ =gCamera
	ldr r0, [r2]
	subs r1, r1, r0
	adds r6, r1, #0
	ldr r0, [r4, #4]
	asrs r0, r0, #8
	ldr r2, [r2, #4]
	subs r0, r0, r2
	adds r7, r0, #0
	lsls r1, r1, #8
	str r1, [r4, #0x48]
	lsls r0, r0, #8
	str r0, [r4, #0x4c]
	ldrh r0, [r4, #0x2c]
	lsrs r0, r0, #4
	movs r2, #0x80
	lsls r2, r2, #1
	movs r5, #0x28
	str r5, [sp]
	lsls r1, r6, #0x10
	asrs r1, r1, #0x10
	str r1, [sp, #4]
	lsls r1, r7, #0x10
	asrs r1, r1, #0x10
	str r1, [sp, #8]
	ldr r1, _0806D150 @ =gBgAffineRegs
	str r1, [sp, #0xc]
	adds r1, r2, #0
	movs r3, #0x28
	bl sa2__sub_8003EE4
	adds r4, #0x6c
	strh r5, [r4, #0x10]
	strh r5, [r4, #0x12]
	adds r0, r4, #0
	bl sa2__sub_80036E0
	adds r0, r4, #0
	bl sub_80BE46C
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806D14C: .4byte gCamera
_0806D150: .4byte gBgAffineRegs

	thumb_func_start sub_806D154
sub_806D154: @ 0x0806D154
	push {lr}
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	ldr r0, [r0, #0x10]
	bl VramFree
	pop {r0}
	bx r0

	thumb_func_start sub_806D168
sub_806D168: @ 0x0806D168
	push {lr}
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	ldr r0, [r0, #0x10]
	bl VramFree
	pop {r0}
	bx r0

	thumb_func_start sub_806D17C
sub_806D17C: @ 0x0806D17C
	push {lr}
	adds r2, r0, #0
	ldr r1, [r2, #0xc]
	ldr r0, _0806D18C @ =0xFFFFBA00
	cmp r1, r0
	bgt _0806D190
	movs r0, #1
	b _0806D198
	.align 2, 0
_0806D18C: .4byte 0xFFFFBA00
_0806D190:
	ldr r3, _0806D19C @ =0xFFFFFF00
	adds r0, r1, r3
	str r0, [r2, #0xc]
	movs r0, #0
_0806D198:
	pop {r1}
	bx r1
	.align 2, 0
_0806D19C: .4byte 0xFFFFFF00

    @ Called on init of Boss 3
	thumb_func_start sub_806D1A0
sub_806D1A0: @ 0x0806D1A0
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r0, _0806D1F8 @ =sub_806E910
	movs r1, #0xdc
	lsls r1, r1, #3
	movs r2, #0x84
	lsls r2, r2, #6
	ldr r3, _0806D1FC @ =sub_806EA14
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	adds r7, r0, #0
	ldrh r2, [r7, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r2, r0
	ldr r1, _0806D200 @ =gStageData
	adds r0, r1, #0
	adds r0, #0x88
	str r7, [r0]
	lsls r4, r4, #8
	str r4, [r6]
	ldr r0, _0806D204 @ =0xFFFF3800
	str r0, [r6, #4]
	ldr r0, _0806D208 @ =gPlayers
	str r0, [r6, #0x40]
	movs r3, #0xa8
	lsls r3, r3, #1
	adds r0, r0, r3
	str r0, [r6, #0x44]
	movs r0, #0
	str r0, [r6, #8]
	str r0, [r6, #0xc]
	str r5, [r6, #0x2c]
	ldrb r0, [r1, #1]
	cmp r0, #0
	bne _0806D210
	ldr r0, _0806D20C @ =0x03000030
	adds r1, r2, r0
	movs r0, #8
	b _0806D216
	.align 2, 0
_0806D1F8: .4byte sub_806E910
_0806D1FC: .4byte sub_806EA14
_0806D200: .4byte gStageData
_0806D204: .4byte 0xFFFF3800
_0806D208: .4byte gPlayers
_0806D20C: .4byte 0x03000030
_0806D210:
	ldr r3, _0806D264 @ =0x03000030
	adds r1, r2, r3
	movs r0, #6
_0806D216:
	strb r0, [r1]
	movs r0, #0x90
	lsls r0, r0, #7
	str r0, [r6, #0x10]
	movs r2, #0
	movs r1, #0
	strh r1, [r6, #0x32]
	adds r3, r6, #0
	adds r3, #0x27
	movs r0, #1
	strb r0, [r3]
	adds r0, r6, #0
	adds r0, #0x28
	strb r2, [r0]
	str r1, [r6, #0x18]
	str r1, [r6, #0x1c]
	strh r1, [r6, #0x20]
	subs r0, #4
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	movs r0, #0x7c
	bl VramMalloc
	str r0, [r6, #0x38]
	movs r0, #0x74
	bl VramMalloc
	str r0, [r6, #0x3c]
	adds r0, r6, #0
	bl sub_806D404
	bl sub_807A4BC
	adds r0, r7, #0
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0806D264: .4byte 0x03000030

	thumb_func_start sub_806D268
sub_806D268: @ 0x0806D268
	push {r4, r5, lr}
	ldr r0, _0806D288 @ =gCurTask
	ldr r2, [r0]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, [r4, #0x2c]
	ldrb r0, [r0]
	cmp r0, #3
	bne _0806D28C
	adds r0, r2, #0
	bl TaskDestroy
	b _0806D2E0
	.align 2, 0
_0806D288: .4byte gCurTask
_0806D28C:
	adds r0, r4, #0
	bl sub_806D6C4
	ldr r0, [r4, #0x2c]
	ldrb r0, [r0]
	cmp r0, #2
	bne _0806D2E0
	movs r1, #0
	ldr r5, _0806D2E8 @ =gPlayers
	ldr r3, _0806D2EC @ =0xFFFFFB1F
	movs r2, #0xb3
	lsls r2, r2, #1
_0806D2A4:
	lsls r0, r1, #0x10
	asrs r1, r0, #0x10
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r5
	ldr r0, [r0, #0x10]
	asrs r0, r0, #8
	adds r0, r0, r3
	cmp r0, r2
	bhi _0806D2E0
	adds r0, r1, #1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	ble _0806D2A4
	movs r0, #0x32
	bl sub_80299D4
	movs r0, #0
	strh r0, [r4, #0x34]
	movs r0, #1
	strh r0, [r4, #0x36]
	ldr r0, _0806D2F0 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0806D2F4 @ =sub_806E99C
	str r0, [r1, #8]
_0806D2E0:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806D2E8: .4byte gPlayers
_0806D2EC: .4byte 0xFFFFFB1F
_0806D2F0: .4byte gCurTask
_0806D2F4: .4byte sub_806E99C

	thumb_func_start sub_806D2F8
sub_806D2F8: @ 0x0806D2F8
	push {r4, r5, r6, r7, lr}
	ldr r7, _0806D354 @ =gCurTask
	ldr r0, [r7]
	ldrh r6, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r6, r0
	adds r0, r5, #0
	bl sub_806E330
	adds r0, r5, #0
	bl sub_806DB78
	adds r0, r5, #0
	movs r1, #0
	bl sub_806D840
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	adds r0, r5, #0
	movs r1, #1
	bl sub_806D840
	adds r4, r4, r0
	lsls r4, r4, #0x18
	cmp r4, #0
	beq _0806D336
	adds r0, r5, #0
	bl sub_806DA20
_0806D336:
	ldr r1, _0806D358 @ =0x03000030
	adds r0, r6, r1
	ldrb r0, [r0]
	cmp r0, #0
	bne _0806D378
	ldr r1, _0806D35C @ =gStageData
	ldrb r0, [r1, #3]
	cmp r0, #5
	bne _0806D36C
	ldrb r0, [r1, #6]
	cmp r0, #0
	beq _0806D364
	ldr r1, [r7]
	ldr r0, _0806D360 @ =sub_806E9C0
	b _0806D376
	.align 2, 0
_0806D354: .4byte gCurTask
_0806D358: .4byte 0x03000030
_0806D35C: .4byte gStageData
_0806D360: .4byte sub_806E9C0
_0806D364:
	movs r0, #1
	movs r1, #0
	bl sub_8027674
_0806D36C:
	adds r0, r5, #0
	bl sub_806EAA0
	ldr r1, [r7]
	ldr r0, _0806D384 @ =sub_806E9F0
_0806D376:
	str r0, [r1, #8]
_0806D378:
	adds r0, r5, #0
	bl sub_806D6C4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806D384: .4byte sub_806E9F0

	thumb_func_start sub_806D388
sub_806D388: @ 0x0806D388
	push {r4, r5, lr}
	sub sp, #0x10
	ldr r0, _0806D3A8 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	ldr r0, [r5, #0x40]
	ldrh r4, [r5, #0x34]
	cmp r4, #0
	beq _0806D3AC
	cmp r4, #1
	beq _0806D3E8
	b _0806D3FC
	.align 2, 0
_0806D3A8: .4byte gCurTask
_0806D3AC:
	ldr r0, [r5, #0x38]
	cmp r0, #0
	beq _0806D3B8
	bl VramFree
	str r4, [r5, #0x38]
_0806D3B8:
	ldr r0, [r5]
	asrs r0, r0, #8
	str r0, [sp]
	ldr r0, _0806D3E0 @ =gCamera
	ldr r1, [r0, #0x14]
	adds r0, r1, #0
	subs r0, #0x32
	str r0, [sp, #4]
	ldr r0, [r5]
	asrs r0, r0, #8
	str r0, [sp, #8]
	subs r1, #0x25
	str r1, [sp, #0xc]
	ldr r1, _0806D3E4 @ =sub_807A37C
	mov r0, sp
	bl sub_8078E34
	movs r0, #1
	b _0806D3FA
	.align 2, 0
_0806D3E0: .4byte gCamera
_0806D3E4: .4byte sub_807A37C
_0806D3E8:
	ldr r1, [r0, #4]
	movs r0, #0x80
	lsls r0, r0, #0x14
	ands r1, r0
	cmp r1, #0
	bne _0806D3FC
	ldr r0, [r5, #0x2c]
	strb r1, [r0]
	movs r0, #0x64
_0806D3FA:
	strh r0, [r5, #0x34]
_0806D3FC:
	add sp, #0x10
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_806D404
sub_806D404: @ 0x0806D404
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r6, r0, #0
	ldr r0, [r6, #0x38]
	mov r8, r0
	movs r7, #0
	movs r1, #0
	mov sb, r1
	movs r3, #0x80
	lsls r3, r3, #5
	mov sl, r3
_0806D422:
	lsls r4, r7, #3
	subs r2, r4, r7
	lsls r2, r2, #3
	adds r3, r2, #0
	adds r3, #0x48
	adds r3, r6, r3
	adds r5, r3, #0
	adds r5, #8
	adds r0, r6, #0
	adds r0, #0x48
	adds r0, r0, r2
	ldr r1, [r6]
	str r1, [r0]
	adds r0, r6, #0
	adds r0, #0x4c
	adds r0, r0, r2
	ldr r1, [r6, #4]
	str r1, [r0]
	mov r0, r8
	str r0, [r3, #8]
	ldr r0, _0806D55C @ =gUnknown_080D57CC
	adds r4, r4, r0
	ldrb r0, [r4, #3]
	adds r0, #2
	lsls r0, r0, #6
	strh r0, [r5, #0x14]
	ldrh r0, [r4]
	strh r0, [r5, #0xc]
	ldrb r0, [r4, #2]
	strb r0, [r5, #0x1a]
	mov r1, sb
	strh r1, [r5, #0x16]
	movs r0, #0xff
	strb r0, [r5, #0x1b]
	movs r0, #0x10
	strb r0, [r5, #0x1c]
	movs r3, #0
	strb r3, [r5, #0x1f]
	strh r1, [r5, #0x10]
	strh r1, [r5, #0x12]
	mov r0, sl
	str r0, [r5, #8]
	ldrb r0, [r4, #4]
	cmp r0, #0
	bne _0806D486
	movs r0, #0x80
	lsls r0, r0, #0xc
	mov r1, sl
	orrs r0, r1
	str r0, [r5, #8]
_0806D486:
	ldrb r0, [r4, #5]
	cmp r0, #0
	beq _0806D496
	ldr r0, [r5, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	str r0, [r5, #8]
_0806D496:
	adds r0, r5, #0
	bl UpdateSpriteAnimation
	ldrb r0, [r4, #6]
	lsls r0, r0, #5
	add r8, r0
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #0xf
	bls _0806D422
	ldr r3, [r6, #0x3c]
	mov r8, r3
	movs r7, #0
	movs r4, #0
	movs r0, #0x8f
	lsls r0, r0, #3
	mov sb, r0
	adds r1, r6, #0
	add r1, sb
	mov sl, r1
_0806D4C0:
	lsls r2, r7, #3
	movs r3, #0xf2
	lsls r3, r3, #2
	adds r0, r6, r3
	adds r0, r0, r2
	str r4, [r0]
	adds r1, r6, r2
	adds r3, #4
	adds r0, r1, r3
	strb r4, [r0]
	adds r3, #1
	adds r0, r1, r3
	movs r3, #1
	strb r3, [r0]
	movs r3, #0x84
	lsls r3, r3, #3
	adds r0, r6, r3
	adds r0, r0, r2
	str r4, [r0]
	adds r3, #4
	adds r0, r1, r3
	strb r4, [r0]
	ldr r0, _0806D560 @ =0x00000425
	adds r1, r1, r0
	movs r3, #1
	strb r3, [r1]
	subs r2, r2, r7
	lsls r2, r2, #3
	mov r0, sb
	adds r1, r2, r0
	adds r1, r6, r1
	adds r5, r1, #0
	adds r5, #8
	mov r3, sl
	adds r0, r3, r2
	str r4, [r0]
	ldr r3, _0806D564 @ =0x0000047C
	adds r0, r6, r3
	adds r0, r0, r2
	str r4, [r0]
	mov r0, r8
	str r0, [r1, #8]
	movs r0, #0xa8
	lsls r0, r0, #3
	strh r0, [r5, #0x14]
	subs r0, #0x7b
	strh r0, [r5, #0xc]
	strb r4, [r5, #0x1a]
	strh r4, [r5, #0x16]
	movs r0, #0xff
	strb r0, [r5, #0x1b]
	movs r0, #0x10
	strb r0, [r5, #0x1c]
	strb r4, [r5, #0x1f]
	strh r4, [r5, #0x10]
	strh r4, [r5, #0x12]
	movs r0, #0x80
	lsls r0, r0, #5
	str r0, [r5, #8]
	adds r0, r5, #0
	bl UpdateSpriteAnimation
	movs r1, #0xa0
	add r8, r1
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #0xa
	bls _0806D4C0
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806D55C: .4byte gUnknown_080D57CC
_0806D560: .4byte 0x00000425
_0806D564: .4byte 0x0000047C

	thumb_func_start sub_806D568
sub_806D568: @ 0x0806D568
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	mov ip, r0
	ldr r1, [r0]
	str r1, [r0, #0x48]
	ldr r0, [r0, #4]
	mov r2, ip
	str r0, [r2, #0x4c]
	adds r3, r0, #0
	mov r0, ip
	adds r0, #0x80
	str r1, [r0]
	adds r0, #4
	str r3, [r0]
	movs r7, #0xb8
	add r7, ip
	mov sb, r7
	ldr r2, _0806D6B8 @ =0xFFFFDB00
	adds r0, r1, r2
	str r0, [r7]
	movs r7, #0xbc
	add r7, ip
	mov sl, r7
	movs r2, #0x80
	lsls r2, r2, #4
	adds r0, r3, r2
	str r0, [r7]
	movs r7, #0xf0
	add r7, ip
	mov r8, r7
	movs r2, #0x94
	lsls r2, r2, #6
	adds r1, r1, r2
	str r1, [r7]
	mov r6, ip
	adds r6, #0xf4
	str r0, [r6]
	movs r4, #0x94
	lsls r4, r4, #1
	add r4, ip
	mov r7, sb
	ldr r0, [r7]
	str r0, [r4]
	movs r5, #0x96
	lsls r5, r5, #1
	add r5, ip
	mov r1, sl
	ldr r0, [r1]
	mov r2, ip
	ldr r1, [r2, #0x10]
	adds r0, r0, r1
	str r0, [r5]
	movs r2, #0xb0
	lsls r2, r2, #1
	add r2, ip
	mov r7, r8
	ldr r0, [r7]
	str r0, [r2]
	movs r3, #0xb2
	lsls r3, r3, #1
	add r3, ip
	ldr r0, [r6]
	mov r7, ip
	ldr r1, [r7, #0x10]
	adds r0, r0, r1
	str r0, [r3]
	movs r1, #0xcc
	lsls r1, r1, #1
	add r1, ip
	ldr r0, [r4]
	str r0, [r1]
	movs r1, #0xce
	lsls r1, r1, #1
	add r1, ip
	ldr r0, [r5]
	str r0, [r1]
	movs r1, #0xe8
	lsls r1, r1, #1
	add r1, ip
	ldr r0, [r2]
	str r0, [r1]
	movs r1, #0xea
	lsls r1, r1, #1
	add r1, ip
	ldr r0, [r3]
	str r0, [r1]
	ldr r1, [r7, #0x10]
	ldr r2, _0806D6BC @ =0xFFFFE400
	adds r0, r1, r2
	cmp r0, #0
	bge _0806D62A
	ldr r7, _0806D6C0 @ =0xFFFFE403
	adds r0, r1, r7
_0806D62A:
	asrs r0, r0, #2
	adds r5, r0, #1
	mov r1, sl
	ldr r0, [r1]
	movs r2, #0xc0
	lsls r2, r2, #4
	adds r3, r0, r2
	movs r4, #0
	mov r7, r8
	str r7, [sp]
	str r6, [sp, #4]
	movs r0, #0x48
	add r0, ip
	mov r8, r0
	movs r1, #0x4c
	add r1, ip
	mov sl, r1
	mov ip, r8
	mov r7, sb
	mov r6, sl
_0806D652:
	adds r1, r4, #0
	adds r1, #8
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	mov r1, ip
	adds r2, r1, r0
	ldr r1, [r7]
	str r1, [r2]
	adds r0, r6, r0
	str r3, [r0]
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	adds r3, r3, r5
	cmp r4, #3
	bls _0806D652
	ldr r2, [sp, #4]
	ldr r0, [r2]
	movs r7, #0xc0
	lsls r7, r7, #4
	adds r3, r0, r7
	movs r4, #0
	mov ip, r8
	ldr r7, [sp]
	mov r6, sl
_0806D686:
	adds r1, r4, #0
	adds r1, #0xc
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	mov r1, ip
	adds r2, r1, r0
	ldr r1, [r7]
	str r1, [r2]
	adds r0, r6, r0
	str r3, [r0]
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	adds r3, r3, r5
	cmp r4, #3
	bls _0806D686
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806D6B8: .4byte 0xFFFFDB00
_0806D6BC: .4byte 0xFFFFE400
_0806D6C0: .4byte 0xFFFFE403

	thumb_func_start sub_806D6C4
sub_806D6C4: @ 0x0806D6C4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	adds r0, #0x27
	ldrb r0, [r0]
	cmp r0, #0
	beq _0806D736
	movs r4, #0
	movs r0, #0x48
	adds r0, r0, r7
	mov sb, r0
	movs r1, #0x4c
	adds r1, r1, r7
	mov r8, r1
	ldr r6, _0806D804 @ =gCamera
_0806D6EA:
	lsls r2, r4, #3
	subs r2, r2, r4
	lsls r2, r2, #3
	adds r0, r2, r7
	adds r5, r0, #0
	adds r5, #0x50
	mov r1, sb
	adds r0, r1, r2
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r1, [r6]
	subs r0, r0, r1
	strh r0, [r5, #0x10]
	add r2, r8
	ldr r0, [r2]
	asrs r0, r0, #8
	ldr r1, [r6, #4]
	subs r0, r0, r1
	strh r0, [r5, #0x12]
	cmp r4, #1
	beq _0806D720
	cmp r4, #1
	blt _0806D726
	cmp r4, #7
	bgt _0806D726
	cmp r4, #6
	blt _0806D726
_0806D720:
	adds r0, r5, #0
	bl UpdateSpriteAnimation
_0806D726:
	adds r0, r5, #0
	bl DisplaySprite
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #0xf
	bls _0806D6EA
_0806D736:
	movs r4, #0
_0806D738:
	lsls r0, r4, #3
	subs r0, r0, r4
	lsls r1, r0, #3
	movs r2, #0x8f
	lsls r2, r2, #3
	adds r0, r7, r2
	adds r6, r0, r1
	ldr r0, [r6]
	cmp r0, #0
	beq _0806D760
	adds r0, r1, r7
	movs r1, #0x90
	lsls r1, r1, #3
	adds r5, r0, r1
	adds r0, r5, #0
	bl UpdateSpriteAnimation
	cmp r0, #0
	bne _0806D760
	str r0, [r6]
_0806D760:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #0xa
	bls _0806D738
	movs r4, #0
	movs r2, #0x8f
	lsls r2, r2, #3
	adds r2, r2, r7
	mov sl, r2
_0806D774:
	movs r3, #0
	lsls r0, r4, #3
	mov r8, r0
	adds r4, #1
	mov sb, r4
_0806D77E:
	movs r0, #0x58
	muls r0, r3, r0
	mov r2, r8
	adds r1, r2, r0
	movs r2, #0xf2
	lsls r2, r2, #2
	adds r0, r7, r2
	adds r6, r0, r1
	ldr r2, [r6]
	cmp r2, #0
	beq _0806D7DE
	adds r4, r7, r1
	movs r0, #0xf3
	lsls r0, r0, #2
	adds r4, r4, r0
	ldrb r1, [r4]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	movs r1, #0x8f
	lsls r1, r1, #3
	adds r0, r0, r1
	adds r0, r7, r0
	adds r5, r0, #0
	adds r5, #8
	asrs r0, r2, #8
	ldr r2, _0806D804 @ =gCamera
	ldr r1, [r2]
	subs r0, r0, r1
	strh r0, [r5, #0x10]
	ldr r1, [r2, #4]
	movs r0, #0xc0
	subs r0, r0, r1
	strh r0, [r5, #0x12]
	adds r0, r5, #0
	str r3, [sp]
	bl DisplaySprite
	ldrb r1, [r4]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	add r0, sl
	ldr r0, [r0]
	ldr r3, [sp]
	cmp r0, #0
	bne _0806D7DE
	str r0, [r6]
_0806D7DE:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #1
	bls _0806D77E
	mov r1, sb
	lsls r0, r1, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #0xa
	bls _0806D774
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806D804: .4byte gCamera

	thumb_func_start sub_806D808
sub_806D808: @ 0x0806D808
	push {lr}
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	adds r2, r0, #0
	adds r2, #0x88
	cmp r1, #1
	beq _0806D82C
	cmp r1, #1
	bgt _0806D820
	cmp r1, #0
	beq _0806D82A
	b _0806D832
_0806D820:
	cmp r1, #2
	beq _0806D82C
	cmp r1, #3
	beq _0806D82C
	b _0806D832
_0806D82A:
	movs r1, #0
_0806D82C:
	ldr r0, _0806D83C @ =0x000004C6
	strh r0, [r2, #0xc]
	strb r1, [r2, #0x1a]
_0806D832:
	movs r0, #0xff
	strb r0, [r2, #0x1b]
	pop {r0}
	bx r0
	.align 2, 0
_0806D83C: .4byte 0x000004C6

	thumb_func_start sub_806D840
sub_806D840: @ 0x0806D840
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	adds r6, r0, #0
	lsls r1, r1, #0x18
	movs r0, #0
	mov sl, r0
	lsrs r1, r1, #0x16
	adds r0, r6, #0
	adds r0, #0x40
	adds r0, r0, r1
	ldr r0, [r0]
	mov r8, r0
	adds r7, r6, #0
	adds r7, #0x50
	ldr r4, [r6, #0x48]
	ldr r5, [r6, #0x4c]
	adds r0, r6, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	beq _0806D87C
	mov r0, r8
	bl sub_802C080
	cmp r0, #0
	beq _0806D880
_0806D87C:
	movs r0, #0
	b _0806DA0E
_0806D880:
	adds r0, r6, #0
	adds r0, #0x28
	ldrb r0, [r0]
	cmp r0, #0
	bne _0806D95C
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_8004D68
	mov r0, r8
	adds r0, #0x2a
	ldrb r1, [r0]
	movs r2, #0xf
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #1
	beq _0806D8CC
	ldr r3, _0806D954 @ =gStageData
	ldrb r0, [r3, #3]
	cmp r0, #5
	bne _0806D8DA
	ldr r0, [r6, #0x40]
	adds r0, #0x2a
	ldrb r1, [r0]
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #1
	beq _0806D8C6
	ldr r0, [r6, #0x44]
	adds r0, #0x2a
	ldrb r1, [r0]
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #1
	bne _0806D8DA
_0806D8C6:
	ldrb r0, [r3, #6]
	cmp r0, #0
	bne _0806D8DA
_0806D8CC:
	adds r0, r7, #0
	bl sub_807A1DC
	cmp r0, #1
	bne _0806D8DA
	movs r1, #1
	mov sl, r1
_0806D8DA:
	asrs r4, r4, #8
	asrs r5, r5, #8
	mov r2, r8
	str r2, [sp]
	adds r0, r7, #0
	adds r1, r4, #0
	adds r2, r5, #0
	movs r3, #0
	bl sub_8020E3C
	cmp r0, #1
	bne _0806D96C
	movs r0, #1
	mov sl, r0
	mov r1, r8
	str r1, [sp]
	str r0, [sp, #4]
	movs r2, #0
	mov sb, r2
	str r2, [sp, #8]
	adds r0, r7, #0
	adds r1, r4, #0
	adds r2, r5, #0
	movs r3, #0
	bl sub_8020874
	adds r1, r0, #0
	movs r0, #0x80
	lsls r0, r0, #0xa
	ands r0, r1
	cmp r0, #0
	beq _0806D942
	mov r2, r8
	ldr r0, [r2, #0x14]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r0, r2
	lsls r1, r1, #0x18
	asrs r1, r1, #0x10
	adds r0, r0, r1
	mov r1, r8
	str r0, [r1, #0x14]
	ldr r1, _0806D958 @ =0x0000B0FF
	cmp r0, r1
	ble _0806D93C
	movs r0, #0xb1
	lsls r0, r0, #8
	mov r2, r8
	str r0, [r2, #0x14]
_0806D93C:
	mov r1, sb
	mov r0, r8
	strh r1, [r0, #0x1a]
_0806D942:
	movs r2, #0x32
	ldrsh r0, [r6, r2]
	cmp r0, #0
	bne _0806D96C
	mov r0, r8
	bl sub_80044CC
	b _0806D96C
	.align 2, 0
_0806D954: .4byte gStageData
_0806D958: .4byte 0x0000B0FF
_0806D95C:
	asrs r1, r4, #8
	asrs r2, r5, #8
	mov r0, r8
	str r0, [sp]
	adds r0, r7, #0
	movs r3, #0
	bl sub_8020CE0
_0806D96C:
	movs r5, #0
_0806D96E:
	movs r4, #0
_0806D970:
	lsls r1, r5, #3
	movs r0, #0x58
	muls r0, r4, r0
	adds r1, r1, r0
	movs r2, #0xf2
	lsls r2, r2, #2
	adds r0, r6, r2
	adds r0, r0, r1
	ldr r2, [r0]
	cmp r2, #0
	beq _0806D9B6
	adds r0, r6, r1
	movs r1, #0xf3
	lsls r1, r1, #2
	adds r0, r0, r1
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r6
	movs r1, #0x90
	lsls r1, r1, #3
	adds r7, r0, r1
	asrs r1, r2, #8
	mov r2, r8
	str r2, [sp]
	adds r0, r7, #0
	movs r2, #0xc0
	movs r3, #1
	bl sub_8020CE0
	cmp r0, #0
	beq _0806D9B6
	movs r5, #0xb
	movs r4, #2
_0806D9B6:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #1
	bls _0806D970
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #0xa
	bls _0806D96E
	movs r5, #0
_0806D9CC:
	cmp r5, #1
	beq _0806DA02
	lsls r2, r5, #3
	subs r2, r2, r5
	lsls r2, r2, #3
	adds r0, r2, r6
	adds r7, r0, #0
	adds r7, #0x50
	adds r0, r6, #0
	adds r0, #0x48
	adds r0, r0, r2
	ldr r1, [r0]
	asrs r1, r1, #8
	adds r0, r6, #0
	adds r0, #0x4c
	adds r0, r0, r2
	ldr r2, [r0]
	asrs r2, r2, #8
	mov r0, r8
	str r0, [sp]
	adds r0, r7, #0
	movs r3, #1
	bl sub_8020CE0
	cmp r0, #0
	beq _0806DA02
	movs r5, #0x10
_0806DA02:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #0xf
	bls _0806D9CC
	mov r0, sl
_0806DA0E:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806DA20
sub_806DA20: @ 0x0806DA20
	push {r4, lr}
	adds r4, r0, #0
	adds r2, r4, #0
	adds r2, #0x30
	ldrb r1, [r2]
	cmp r1, #0
	beq _0806DACC
	movs r3, #0x32
	ldrsh r0, [r4, r3]
	cmp r0, #0
	bne _0806DACC
	subs r1, #1
	strb r1, [r2]
	ldr r0, _0806DA54 @ =gStageData
	ldrb r0, [r0, #1]
	cmp r0, #0
	bne _0806DA58
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #4
	bne _0806DA66
	movs r0, #0x33
	bl sub_80299D4
	b _0806DA66
	.align 2, 0
_0806DA54: .4byte gStageData
_0806DA58:
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #3
	bne _0806DA66
	movs r0, #0x33
	bl sub_80299D4
_0806DA66:
	movs r0, #0xeb
	bl m4aSongNumStart
	bl sub_807A468
	adds r0, r4, #0
	movs r1, #2
	bl sub_806D808
	ldr r0, _0806DAB8 @ =0x000004C7
	movs r1, #0
	movs r2, #0x7a
	movs r3, #0
	bl sub_8078DB0
	movs r0, #0x99
	lsls r0, r0, #3
	movs r1, #0
	movs r2, #0x7a
	movs r3, #0
	bl sub_8078DB0
	movs r0, #0x7a
	strh r0, [r4, #0x32]
	ldr r1, _0806DABC @ =gStageData
	ldrb r0, [r1, #3]
	cmp r0, #5
	bne _0806DACC
	ldrb r0, [r1, #6]
	cmp r0, #0
	bne _0806DAC0
	adds r1, r4, #0
	adds r1, #0x30
	ldrb r0, [r1]
	cmp r0, #0
	beq _0806DACC
	adds r1, r0, #0
	movs r0, #3
	bl sub_8027674
	b _0806DACC
	.align 2, 0
_0806DAB8: .4byte 0x000004C7
_0806DABC: .4byte gStageData
_0806DAC0:
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #4
	bl sub_8027674
_0806DACC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806DAD4
sub_0806DAD4: @ 0x0806DAD4
	push {r4, r5, r6, r7, lr}
	ldr r2, _0806DB1C @ =gStageData
	adds r1, r2, #0
	adds r1, #0x88
	ldr r1, [r1]
	ldrh r5, [r1, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r6, r5, r1
	ldrb r1, [r0, #2]
	movs r3, #0x7f
	ands r3, r1
	ldrb r4, [r0, #3]
	ldrb r0, [r0, #4]
	lsls r0, r0, #8
	orrs r4, r0
	mov ip, r2
	cmp r3, #1
	beq _0806DB24
	cmp r3, #1
	blt _0806DB64
	cmp r3, #4
	bgt _0806DB64
	cmp r3, #3
	blt _0806DB64
	ldr r1, _0806DB20 @ =0x03000030
	adds r0, r5, r1
	ldrb r1, [r0]
	lsls r0, r4, #0x18
	lsrs r0, r0, #0x18
	cmp r1, r0
	beq _0806DB64
	adds r0, r6, #0
	bl sub_806DA20
	b _0806DB64
	.align 2, 0
_0806DB1C: .4byte gStageData
_0806DB20: .4byte 0x03000030
_0806DB24:
	ldr r0, _0806DB6C @ =0x03000030
	adds r1, r5, r0
	movs r0, #0
	strb r0, [r1]
	strh r0, [r6, #0x34]
	strh r3, [r6, #0x36]
	strh r0, [r6, #0x20]
	movs r3, #0
	ldr r7, _0806DB70 @ =sub_806E9F0
	ldr r1, _0806DB74 @ =0x03000040
	adds r5, r5, r1
	movs r6, #0x80
	lsls r6, r6, #0x14
	movs r4, #0
_0806DB40:
	lsls r2, r3, #2
	adds r2, r5, r2
	ldr r1, [r2]
	ldr r0, [r1, #4]
	orrs r0, r6
	str r0, [r1, #4]
	strh r4, [r1, #0x1c]
	ldr r0, [r2]
	strh r4, [r0, #0x18]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #1
	bls _0806DB40
	mov r0, ip
	adds r0, #0x88
	ldr r0, [r0]
	str r7, [r0, #8]
_0806DB64:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806DB6C: .4byte 0x03000030
_0806DB70: .4byte sub_806E9F0
_0806DB74: .4byte 0x03000040

	thumb_func_start sub_806DB78
sub_806DB78: @ 0x0806DB78
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	ldrh r1, [r4, #0x20]
	cmp r1, #0xa
	beq _0806DBC0
	cmp r1, #0xa
	bgt _0806DB90
	cmp r1, #0
	beq _0806DBA0
	b _0806DD28
_0806DB90:
	cmp r1, #0x64
	beq _0806DC30
	movs r0, #0xfa
	lsls r0, r0, #2
	cmp r1, r0
	bne _0806DB9E
	b _0806DD24
_0806DB9E:
	b _0806DD28
_0806DBA0:
	movs r2, #0
	movs r0, #0x8f
	lsls r0, r0, #3
	adds r1, r4, r0
	movs r3, #0x64
_0806DBAA:
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #3
	adds r0, r1, r0
	str r3, [r0]
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0xa
	bls _0806DBAA
	b _0806DD28
_0806DBC0:
	movs r2, #0
	movs r3, #4
	movs r1, #0x24
	adds r1, r1, r4
	mov ip, r1
	movs r5, #0x25
	adds r5, r5, r4
	mov r8, r5
	movs r5, #0x8f
	lsls r5, r5, #3
	adds r6, r4, r5
	movs r7, #0xff
_0806DBD8:
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #3
	adds r1, r6, r0
	str r3, [r1]
	adds r0, r0, r5
	adds r0, r4, r0
	adds r1, r0, #0
	adds r1, #8
	ldrb r0, [r1, #0x1b]
	orrs r0, r7
	strb r0, [r1, #0x1b]
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	adds r0, r3, #4
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r2, #0xa
	bls _0806DBD8
	ldr r0, [r4]
	ldr r7, _0806DC2C @ =0xFFFFDB00
	adds r1, r0, r7
	str r1, [r4, #0x18]
	movs r1, #0x94
	lsls r1, r1, #6
	adds r0, r0, r1
	str r0, [r4, #0x1c]
	movs r0, #0
	mov r2, ip
	strb r0, [r2]
	mov r5, r8
	strb r0, [r5]
	movs r0, #4
	strh r0, [r4, #0x22]
	movs r0, #0x8a
	lsls r0, r0, #2
	bl m4aSongNumStart
	movs r0, #0x64
	b _0806DD26
	.align 2, 0
_0806DC2C: .4byte 0xFFFFDB00
_0806DC30:
	ldr r0, [r4, #0x18]
	cmp r0, #0
	beq _0806DC4A
	ldr r7, _0806DD10 @ =0xFFFFFD00
	adds r0, r0, r7
	str r0, [r4, #0x18]
	asrs r0, r0, #8
	ldr r1, _0806DD14 @ =gCamera
	ldr r1, [r1, #0x18]
	cmp r0, r1
	bgt _0806DC4A
	movs r0, #0
	str r0, [r4, #0x18]
_0806DC4A:
	ldr r0, [r4, #0x1c]
	cmp r0, #0
	beq _0806DC66
	movs r1, #0xc0
	lsls r1, r1, #2
	adds r0, r0, r1
	str r0, [r4, #0x1c]
	asrs r0, r0, #8
	ldr r1, _0806DD14 @ =gCamera
	ldr r1, [r1, #0x1c]
	cmp r0, r1
	blt _0806DC66
	movs r0, #0
	str r0, [r4, #0x1c]
_0806DC66:
	ldrh r0, [r4, #0x22]
	subs r0, #1
	strh r0, [r4, #0x22]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0806DCF6
	adds r6, r4, #0
	adds r6, #0x24
	ldrb r2, [r6]
	lsls r5, r2, #3
	subs r0, r5, r2
	lsls r0, r0, #3
	movs r3, #0x8f
	lsls r3, r3, #3
	adds r1, r4, r3
	adds r1, r1, r0
	movs r2, #1
	str r2, [r1]
	adds r0, r0, r3
	adds r0, r4, r0
	adds r1, r0, #0
	adds r1, #8
	subs r2, #2
	adds r3, r2, #0
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	ldr r1, [r4, #0x18]
	cmp r1, #0
	beq _0806DCBC
	movs r7, #0xf2
	lsls r7, r7, #2
	adds r0, r4, r7
	adds r0, r0, r5
	str r1, [r0]
	adds r1, r4, r5
	ldrb r2, [r6]
	adds r7, #4
	adds r0, r1, r7
	strb r2, [r0]
	ldr r0, _0806DD18 @ =0x000003CD
	adds r1, r1, r0
	movs r0, #0x14
	strb r0, [r1]
_0806DCBC:
	ldr r1, [r4, #0x1c]
	cmp r1, #0
	beq _0806DCDE
	movs r2, #0x84
	lsls r2, r2, #3
	adds r0, r4, r2
	adds r0, r0, r5
	str r1, [r0]
	adds r1, r4, r5
	ldrb r2, [r6]
	ldr r5, _0806DD1C @ =0x00000424
	adds r0, r1, r5
	strb r2, [r0]
	ldr r7, _0806DD20 @ =0x00000425
	adds r1, r1, r7
	movs r0, #0x14
	strb r0, [r1]
_0806DCDE:
	ldrb r0, [r6]
	adds r0, #1
	strb r0, [r6]
	ands r0, r3
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xa
	bls _0806DCF2
	movs r0, #0
	strb r0, [r6]
_0806DCF2:
	movs r0, #4
	strh r0, [r4, #0x22]
_0806DCF6:
	movs r0, #0x8a
	lsls r0, r0, #2
	bl m4aSongNumStartOrContinue
	ldr r0, [r4, #0x18]
	cmp r0, #0
	bne _0806DD28
	ldr r0, [r4, #0x1c]
	cmp r0, #0
	bne _0806DD28
	movs r0, #0xfa
	lsls r0, r0, #2
	b _0806DD26
	.align 2, 0
_0806DD10: .4byte 0xFFFFFD00
_0806DD14: .4byte gCamera
_0806DD18: .4byte 0x000003CD
_0806DD1C: .4byte 0x00000424
_0806DD20: .4byte 0x00000425
_0806DD24:
	movs r0, #0
_0806DD26:
	strh r0, [r4, #0x20]
_0806DD28:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806DD34
sub_806DD34: @ 0x0806DD34
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r1, [r4, #0x34]
	cmp r1, #0x6e
	beq _0806DE34
	cmp r1, #0x6e
	bgt _0806DD58
	cmp r1, #0xa
	beq _0806DD8A
	cmp r1, #0xa
	bgt _0806DD52
	cmp r1, #0
	beq _0806DD76
	b _0806DEC2
_0806DD52:
	cmp r1, #0x64
	beq _0806DE18
	b _0806DEC2
_0806DD58:
	cmp r1, #0xd2
	bne _0806DD5E
	b _0806DE82
_0806DD5E:
	cmp r1, #0xd2
	bgt _0806DD6A
	cmp r1, #0xc8
	bne _0806DD68
	b _0806DE64
_0806DD68:
	b _0806DEC2
_0806DD6A:
	movs r0, #0xfa
	lsls r0, r0, #2
	cmp r1, r0
	bne _0806DD74
	b _0806DEA2
_0806DD74:
	b _0806DEC2
_0806DD76:
	movs r0, #1
	strh r0, [r4, #0x36]
	movs r0, #0xa
	strh r0, [r4, #0x34]
	str r1, [r4, #8]
	str r1, [r4, #0xc]
	movs r0, #0x80
	lsls r0, r0, #2
	str r0, [r4, #0x14]
	b _0806DEC2
_0806DD8A:
	ldr r0, [r4, #0xc]
	adds r0, #0x20
	str r0, [r4, #0xc]
	ldr r1, _0806DE04 @ =0x000003FF
	cmp r0, r1
	ble _0806DD9C
	movs r0, #0x80
	lsls r0, r0, #3
	str r0, [r4, #0xc]
_0806DD9C:
	ldr r0, [r4, #4]
	ldr r1, [r4, #0xc]
	adds r0, r0, r1
	str r0, [r4, #4]
	ldr r0, [r4, #0x10]
	ldr r1, [r4, #0x14]
	adds r0, r0, r1
	str r0, [r4, #0x10]
	ldr r1, _0806DE08 @ =0x00007FFF
	cmp r0, r1
	ble _0806DDB8
	movs r0, #0x80
	lsls r0, r0, #8
	str r0, [r4, #0x10]
_0806DDB8:
	movs r3, #0
	ldr r2, [r4, #0x10]
	movs r1, #0x80
	lsls r1, r1, #4
	adds r0, r2, r1
	ldr r1, [r4, #4]
	adds r1, r1, r0
	ldr r0, _0806DE0C @ =0x0000B4FF
	cmp r1, r0
	ble _0806DDD6
	movs r0, #0xad
	lsls r0, r0, #8
	subs r1, r0, r2
	str r1, [r4, #4]
	movs r3, #1
_0806DDD6:
	cmp r3, #1
	bne _0806DEC2
	movs r0, #0x80
	lsls r0, r0, #4
	movs r3, #1
	rsbs r3, r3, #0
	movs r1, #0x91
	str r1, [sp]
	movs r1, #0x20
	movs r2, #0
	bl sub_805256C
	ldr r0, _0806DE10 @ =0xFFFFFE00
	str r0, [r4, #0x14]
	movs r0, #0x3c
	strh r0, [r4, #0x36]
	movs r0, #0x64
	strh r0, [r4, #0x34]
	ldr r0, _0806DE14 @ =0x00000227
	bl m4aSongNumStart
	b _0806DEC2
	.align 2, 0
_0806DE04: .4byte 0x000003FF
_0806DE08: .4byte 0x00007FFF
_0806DE0C: .4byte 0x0000B4FF
_0806DE10: .4byte 0xFFFFFE00
_0806DE14: .4byte 0x00000227
_0806DE18:
	ldr r0, [r4, #0x10]
	ldr r1, [r4, #0x14]
	adds r0, r0, r1
	str r0, [r4, #0x10]
	movs r1, #0x90
	lsls r1, r1, #7
	cmp r0, r1
	bgt _0806DE52
	ldr r0, _0806DE30 @ =0xFFFFFE40
	str r0, [r4, #0x14]
	movs r0, #0x6e
	b _0806DE50
	.align 2, 0
_0806DE30: .4byte 0xFFFFFE40
_0806DE34:
	ldr r0, [r4, #0x14]
	adds r0, #0x10
	str r0, [r4, #0x14]
	ldr r1, [r4, #0x10]
	adds r1, r1, r0
	str r1, [r4, #0x10]
	ldr r0, _0806DE60 @ =0x000047FF
	cmp r1, r0
	ble _0806DE52
	adds r0, #1
	str r0, [r4, #0x10]
	movs r0, #0x3c
	strh r0, [r4, #0x36]
	movs r0, #0xc8
_0806DE50:
	strh r0, [r4, #0x34]
_0806DE52:
	ldr r1, [r4, #0x10]
	movs r0, #0xad
	lsls r0, r0, #8
	subs r0, r0, r1
	str r0, [r4, #4]
	b _0806DEC2
	.align 2, 0
_0806DE60: .4byte 0x000047FF
_0806DE64:
	ldrh r0, [r4, #0x36]
	subs r0, #1
	strh r0, [r4, #0x36]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0806DEC2
	adds r0, r4, #0
	movs r1, #1
	bl sub_806D808
	movs r0, #0x3c
	strh r0, [r4, #0x36]
	movs r0, #0xd2
	strh r0, [r4, #0x34]
	b _0806DEC2
_0806DE82:
	ldrh r0, [r4, #0x36]
	subs r0, #1
	strh r0, [r4, #0x36]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0806DEC2
	adds r0, r4, #0
	movs r1, #0
	bl sub_806D808
	movs r0, #0x3c
	strh r0, [r4, #0x36]
	movs r0, #0xfa
	lsls r0, r0, #2
	strh r0, [r4, #0x34]
	b _0806DEC2
_0806DEA2:
	ldrh r0, [r4, #0x36]
	subs r0, #1
	strh r0, [r4, #0x36]
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	bne _0806DEC2
	movs r0, #1
	strh r0, [r4, #0x36]
	strh r1, [r4, #0x34]
	bl sub_807A4A8
	ldr r0, _0806DED0 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0806DED4 @ =sub_806D2F8
	str r0, [r1, #8]
_0806DEC2:
	adds r0, r4, #0
	bl sub_806D568
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806DED0: .4byte gCurTask
_0806DED4: .4byte sub_806D2F8

	thumb_func_start sub_806DED8
sub_806DED8: @ 0x0806DED8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x20
	adds r4, r0, #0
	add r0, sp, #0x10
	ldr r1, _0806DF14 @ =gUnknown_080D5870
	ldm r1!, {r2, r3, r5}
	stm r0!, {r2, r3, r5}
	ldr r1, [r1]
	str r1, [r0]
	ldrh r1, [r4, #0x34]
	cmp r1, #0x6e
	bne _0806DEFA
	b _0806E138
_0806DEFA:
	cmp r1, #0x6e
	bgt _0806DF24
	cmp r1, #0xa
	beq _0806DF7C
	cmp r1, #0xa
	bgt _0806DF18
	cmp r1, #0
	beq _0806DF48
	movs r0, #0x80
	adds r0, r0, r4
	mov r8, r0
	b _0806DFAC
	.align 2, 0
_0806DF14: .4byte gUnknown_080D5870
_0806DF18:
	cmp r1, #0x64
	beq _0806DFBC
	movs r1, #0x80
	adds r1, r1, r4
	mov r8, r1
	b _0806DFAC
_0806DF24:
	cmp r1, #0xd2
	bne _0806DF2A
	b _0806E274
_0806DF2A:
	cmp r1, #0xd2
	bgt _0806DF3C
	cmp r1, #0xc8
	bne _0806DF34
	b _0806E1FC
_0806DF34:
	movs r2, #0x80
	adds r2, r2, r4
	mov r8, r2
	b _0806DFAC
_0806DF3C:
	movs r0, #0xfa
	lsls r0, r0, #2
	cmp r1, r0
	bne _0806DF46
	b _0806E2D0
_0806DF46:
	b _0806DFA6
_0806DF48:
	ldrh r1, [r4, #0x32]
	movs r5, #0x32
	ldrsh r0, [r4, r5]
	cmp r0, #0
	beq _0806DF68
	subs r0, r1, #1
	strh r0, [r4, #0x32]
	lsls r0, r0, #0x10
	movs r1, #0x80
	adds r1, r1, r4
	mov r8, r1
	adds r7, r4, #0
	adds r7, #0x84
	cmp r0, #0
	beq _0806DF68
	b _0806E2F2
_0806DF68:
	movs r0, #0xa
	strh r0, [r4, #0x34]
	adds r0, r4, #0
	movs r1, #3
	bl sub_806D808
	movs r2, #0x80
	adds r2, r2, r4
	mov r8, r2
	b _0806DFAC
_0806DF7C:
	movs r1, #0
	movs r0, #0
	strh r0, [r4, #0x36]
	adds r2, r4, #0
	adds r2, #0x26
	strb r1, [r2]
	str r0, [r4, #8]
	ldrb r0, [r2]
	lsls r0, r0, #2
	add r0, sp
	adds r0, #0x10
	ldr r0, [r0]
	lsls r0, r0, #8
	str r0, [r4, #0xc]
	ldr r0, _0806DFB4 @ =0xFFFFFC00
	str r0, [r4, #0x14]
	ldr r0, _0806DFB8 @ =0x00000221
	bl m4aSongNumStart
	movs r0, #0x64
	strh r0, [r4, #0x34]
_0806DFA6:
	movs r3, #0x80
	adds r3, r3, r4
	mov r8, r3
_0806DFAC:
	adds r7, r4, #0
	adds r7, #0x84
	b _0806E2F2
	.align 2, 0
_0806DFB4: .4byte 0xFFFFFC00
_0806DFB8: .4byte 0x00000221
_0806DFBC:
	ldrh r0, [r4, #0x36]
	adds r0, #1
	strh r0, [r4, #0x36]
	ldr r0, [r4, #0xc]
	adds r0, #0x20
	str r0, [r4, #0xc]
	ldr r1, _0806E014 @ =0x000007FF
	cmp r0, r1
	ble _0806DFD4
	movs r0, #0x80
	lsls r0, r0, #4
	str r0, [r4, #0xc]
_0806DFD4:
	ldr r0, [r4, #4]
	ldr r1, [r4, #0xc]
	adds r0, r0, r1
	str r0, [r4, #4]
	ldr r0, [r4, #0x14]
	adds r0, #0x20
	str r0, [r4, #0x14]
	movs r3, #2
	movs r5, #0x80
	movs r0, #0x4c
	adds r0, r0, r4
	mov ip, r0
	movs r1, #0x80
	adds r1, r1, r4
	mov r8, r1
	adds r7, r4, #0
	adds r7, #0x84
	adds r6, r4, #0
	adds r6, #0x48
_0806DFFA:
	movs r0, #1
	ands r0, r3
	cmp r0, #0
	beq _0806E018
	lsls r2, r3, #3
	subs r1, r2, r3
	lsls r1, r1, #3
	adds r1, r6, r1
	ldr r0, [r1]
	adds r0, r0, r5
	str r0, [r1]
	adds r5, #0x80
	b _0806E026
	.align 2, 0
_0806E014: .4byte 0x000007FF
_0806E018:
	lsls r2, r3, #3
	subs r1, r2, r3
	lsls r1, r1, #3
	adds r1, r6, r1
	ldr r0, [r1]
	subs r0, r0, r5
	str r0, [r1]
_0806E026:
	subs r2, r2, r3
	lsls r2, r2, #3
	add r2, ip
	ldr r0, [r2]
	ldr r1, [r4, #0x14]
	adds r0, r0, r1
	str r0, [r2]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0xf
	bls _0806DFFA
	ldrh r1, [r4, #0x36]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0806E0AE
	ldr r3, _0806E100 @ =gPseudoRandom
	ldr r0, [r3]
	ldr r2, _0806E104 @ =0x00196225
	muls r0, r2, r0
	ldr r1, _0806E108 @ =0x3C6EF35F
	adds r0, r0, r1
	ldr r5, _0806E10C @ =0x000003FF
	ands r5, r0
	muls r0, r2, r0
	adds r0, r0, r1
	str r0, [r3]
	movs r1, #0x30
	bl __umodsi3
	adds r3, r0, #0
	ldr r1, _0806E110 @ =gSineTable
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r5, r2
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r2, #0
	ldrsh r0, [r0, r2]
	muls r0, r3, r0
	lsrs r2, r0, #6
	lsls r0, r5, #1
	adds r0, r0, r1
	movs r1, #0
	ldrsh r0, [r0, r1]
	muls r0, r3, r0
	lsrs r0, r0, #6
	ldr r1, [r4]
	adds r1, r1, r2
	lsls r1, r1, #8
	asrs r1, r1, #0x10
	ldr r2, [r4, #4]
	adds r2, r2, r0
	lsls r2, r2, #8
	asrs r2, r2, #0x10
	movs r3, #0x80
	lsls r3, r3, #3
	str r5, [sp]
	movs r0, #0x14
	str r0, [sp, #4]
	movs r0, #0x80
	str r0, [sp, #8]
	ldr r0, [r4, #0x3c]
	str r0, [sp, #0xc]
	movs r0, #7
	bl sub_8079758
_0806E0AE:
	ldrh r1, [r4, #0x36]
	movs r0, #0x3f
	ands r0, r1
	cmp r0, #0
	bne _0806E0BE
	ldr r0, _0806E114 @ =0x00000221
	bl m4aSongNumStart
_0806E0BE:
	ldr r0, [r4, #4]
	movs r2, #0x80
	lsls r2, r2, #5
	adds r0, r0, r2
	ldr r1, _0806E118 @ =0x0000B4FF
	cmp r0, r1
	bgt _0806E0CE
	b _0806E2F2
_0806E0CE:
	movs r0, #0x80
	lsls r0, r0, #4
	movs r3, #1
	rsbs r3, r3, #0
	movs r1, #0x91
	str r1, [sp]
	movs r1, #0x20
	movs r2, #0
	bl sub_805256C
	adds r1, r4, #0
	adds r1, #0x26
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #3
	bls _0806E11C
	movs r0, #0xb4
	strh r0, [r4, #0x36]
	movs r0, #0x6e
	strh r0, [r4, #0x34]
	b _0806E12A
	.align 2, 0
_0806E100: .4byte gPseudoRandom
_0806E104: .4byte 0x00196225
_0806E108: .4byte 0x3C6EF35F
_0806E10C: .4byte 0x000003FF
_0806E110: .4byte gSineTable
_0806E114: .4byte 0x00000221
_0806E118: .4byte 0x0000B4FF
_0806E11C:
	ldrb r0, [r1]
	lsls r0, r0, #2
	add r0, sp
	adds r0, #0x10
	ldr r0, [r0]
	lsls r0, r0, #8
	str r0, [r4, #0xc]
_0806E12A:
	ldr r0, _0806E134 @ =0x00000227
	bl m4aSongNumStart
	b _0806E2F2
	.align 2, 0
_0806E134: .4byte 0x00000227
_0806E138:
	ldrh r0, [r4, #0x36]
	subs r0, #1
	strh r0, [r4, #0x36]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0806E14C
	movs r0, #0x19
	strh r0, [r4, #0x36]
	movs r0, #0xc8
	strh r0, [r4, #0x34]
_0806E14C:
	ldrh r1, [r4, #0x36]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0806E1C0
	ldr r3, _0806E1E0 @ =gPseudoRandom
	ldr r0, [r3]
	ldr r2, _0806E1E4 @ =0x00196225
	muls r0, r2, r0
	ldr r1, _0806E1E8 @ =0x3C6EF35F
	adds r0, r0, r1
	ldr r5, _0806E1EC @ =0x000003FF
	ands r5, r0
	muls r0, r2, r0
	adds r0, r0, r1
	str r0, [r3]
	movs r1, #0x50
	bl __umodsi3
	adds r3, r0, #0
	ldr r1, _0806E1F0 @ =gSineTable
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r5, r2
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r2, #0
	ldrsh r0, [r0, r2]
	muls r0, r3, r0
	lsrs r2, r0, #6
	lsls r0, r5, #1
	adds r0, r0, r1
	movs r1, #0
	ldrsh r0, [r0, r1]
	muls r3, r0, r3
	ldr r1, [r4]
	adds r1, r1, r2
	lsls r1, r1, #8
	asrs r1, r1, #0x10
	ldr r0, _0806E1F4 @ =gCamera
	ldr r2, [r0, #4]
	lsrs r3, r3, #0xe
	adds r3, #0x50
	adds r2, r2, r3
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	movs r3, #0x80
	lsls r3, r3, #2
	str r5, [sp]
	movs r0, #0x1e
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	ldr r0, [r4, #0x3c]
	str r0, [sp, #0xc]
	movs r0, #7
	bl sub_8079758
_0806E1C0:
	ldrh r1, [r4, #0x36]
	movs r0, #0x3f
	ands r0, r1
	movs r2, #0x80
	adds r2, r2, r4
	mov r8, r2
	adds r7, r4, #0
	adds r7, #0x84
	cmp r0, #0
	beq _0806E1D6
	b _0806E2F2
_0806E1D6:
	ldr r0, _0806E1F8 @ =0x00000221
	bl m4aSongNumStart
	b _0806E2F2
	.align 2, 0
_0806E1E0: .4byte gPseudoRandom
_0806E1E4: .4byte 0x00196225
_0806E1E8: .4byte 0x3C6EF35F
_0806E1EC: .4byte 0x000003FF
_0806E1F0: .4byte gSineTable
_0806E1F4: .4byte gCamera
_0806E1F8: .4byte 0x00000221
_0806E1FC:
	adds r2, r4, #0
	adds r2, #0x27
	ldrb r0, [r2]
	movs r1, #1
	eors r0, r1
	strb r0, [r2]
	ldrh r0, [r4, #0x36]
	subs r0, #1
	strh r0, [r4, #0x36]
	lsls r0, r0, #0x10
	mov sl, r2
	movs r3, #0x80
	adds r3, r3, r4
	mov r8, r3
	adds r7, r4, #0
	adds r7, #0x84
	cmp r0, #0
	bne _0806E2F2
	movs r5, #0
	ldr r0, _0806E26C @ =0x000003FF
	mov sb, r0
_0806E226:
	ldr r1, [r4]
	lsls r1, r1, #8
	asrs r1, r1, #0x10
	ldr r2, [r4, #4]
	lsls r2, r2, #8
	asrs r2, r2, #0x10
	str r5, [sp]
	movs r0, #0x1e
	str r0, [sp, #4]
	movs r6, #0
	str r6, [sp, #8]
	ldr r0, [r4, #0x3c]
	str r0, [sp, #0xc]
	movs r0, #7
	movs r3, #0x80
	lsls r3, r3, #2
	bl sub_8079758
	adds r0, r5, #0
	adds r0, #0x80
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, sb
	bls _0806E226
	ldr r0, _0806E270 @ =0x00000221
	bl m4aSongNumStart
	mov r1, sl
	strb r6, [r1]
	movs r0, #0xa
	strh r0, [r4, #0x36]
	movs r0, #0xd2
	strh r0, [r4, #0x34]
	b _0806E2F2
	.align 2, 0
_0806E26C: .4byte 0x000003FF
_0806E270: .4byte 0x00000221
_0806E274:
	ldrh r0, [r4, #0x36]
	subs r0, #1
	strh r0, [r4, #0x36]
	lsls r0, r0, #0x10
	movs r2, #0x80
	adds r2, r2, r4
	mov r8, r2
	adds r7, r4, #0
	adds r7, #0x84
	cmp r0, #0
	bne _0806E2F2
	movs r5, #0
	ldr r6, _0806E2CC @ =0x000003FF
_0806E28E:
	ldr r1, [r4]
	lsls r1, r1, #8
	asrs r1, r1, #0x10
	ldr r2, [r4, #4]
	lsls r2, r2, #8
	asrs r2, r2, #0x10
	str r5, [sp]
	movs r0, #0x1e
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	ldr r0, [r4, #0x3c]
	str r0, [sp, #0xc]
	movs r0, #7
	movs r3, #0x80
	lsls r3, r3, #2
	bl sub_8079758
	adds r0, r5, #0
	adds r0, #0x80
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, r6
	bls _0806E28E
	movs r0, #0xa
	strh r0, [r4, #0x36]
	movs r0, #0xfa
	lsls r0, r0, #2
	strh r0, [r4, #0x34]
	b _0806E2F2
	.align 2, 0
_0806E2CC: .4byte 0x000003FF
_0806E2D0:
	ldrh r0, [r4, #0x36]
	subs r0, #1
	strh r0, [r4, #0x36]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	movs r3, #0x80
	adds r3, r3, r4
	mov r8, r3
	adds r7, r4, #0
	adds r7, #0x84
	cmp r0, #0
	bne _0806E2F2
	strh r0, [r4, #0x34]
	ldr r0, _0806E328 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0806E32C @ =sub_806D388
	str r0, [r1, #8]
_0806E2F2:
	ldr r1, [r4]
	str r1, [r4, #0x48]
	ldr r0, [r4, #4]
	str r0, [r4, #0x4c]
	mov r5, r8
	str r1, [r5]
	ldr r0, [r4, #0x4c]
	str r0, [r7]
	ldr r1, [r4, #0x40]
	ldr r0, [r1, #4]
	movs r2, #0x80
	lsls r2, r2, #0x14
	orrs r0, r2
	str r0, [r1, #4]
	ldr r1, [r4, #0x44]
	ldr r0, [r1, #4]
	orrs r0, r2
	str r0, [r1, #4]
	add sp, #0x20
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806E328: .4byte gCurTask
_0806E32C: .4byte sub_806D388

	thumb_func_start sub_806E330
sub_806E330: @ 0x0806E330
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r2, [r4, #0x34]
	ldr r0, _0806E360 @ =0x00000203
	cmp r2, r0
	bne _0806E340
	b _0806E700
_0806E340:
	cmp r2, r0
	bgt _0806E3A6
	subs r0, #0xd7
	cmp r2, r0
	bne _0806E34C
	b _0806E4DC
_0806E34C:
	cmp r2, r0
	bgt _0806E370
	cmp r2, #0x64
	beq _0806E436
	cmp r2, #0x64
	bgt _0806E364
	cmp r2, #0
	beq _0806E420
	b _0806E8DC
	.align 2, 0
_0806E360: .4byte 0x00000203
_0806E364:
	cmp r2, #0x6e
	beq _0806E444
	cmp r2, #0xc8
	bne _0806E36E
	b _0806E47C
_0806E36E:
	b _0806E8DC
_0806E370:
	movs r1, #0xcd
	lsls r1, r1, #1
	cmp r2, r1
	bne _0806E37A
	b _0806E5EA
_0806E37A:
	cmp r2, r1
	bgt _0806E392
	movs r0, #0x9b
	lsls r0, r0, #1
	cmp r2, r0
	bne _0806E388
	b _0806E592
_0806E388:
	adds r0, #0x5a
	cmp r2, r0
	bne _0806E390
	b _0806E5D8
_0806E390:
	b _0806E8DC
_0806E392:
	movs r0, #0xfa
	lsls r0, r0, #1
	cmp r2, r0
	bne _0806E39C
	b _0806E668
_0806E39C:
	adds r0, #0xa
	cmp r2, r0
	bne _0806E3A4
	b _0806E67A
_0806E3A4:
	b _0806E8DC
_0806E3A6:
	movs r1, #0x9b
	lsls r1, r1, #2
	cmp r2, r1
	bne _0806E3B0
	b _0806E7AE
_0806E3B0:
	cmp r2, r1
	bgt _0806E3E4
	ldr r3, _0806E3CC @ =0x00000212
	cmp r2, r3
	bne _0806E3BC
	b _0806E750
_0806E3BC:
	cmp r2, r3
	bgt _0806E3D0
	movs r0, #0x82
	lsls r0, r0, #2
	cmp r2, r0
	bne _0806E3CA
	b _0806E728
_0806E3CA:
	b _0806E8DC
	.align 2, 0
_0806E3CC: .4byte 0x00000212
_0806E3D0:
	movs r0, #0x96
	lsls r0, r0, #2
	cmp r2, r0
	bne _0806E3DA
	b _0806E764
_0806E3DA:
	adds r0, #0xa
	cmp r2, r0
	bne _0806E3E2
	b _0806E790
_0806E3E2:
	b _0806E8DC
_0806E3E4:
	movs r3, #0xa0
	lsls r3, r3, #2
	cmp r2, r3
	bne _0806E3EE
	b _0806E884
_0806E3EE:
	cmp r2, r3
	bgt _0806E408
	ldr r0, _0806E404 @ =0x00000271
	cmp r2, r0
	bne _0806E3FA
	b _0806E840
_0806E3FA:
	adds r0, #5
	cmp r2, r0
	bne _0806E402
	b _0806E860
_0806E402:
	b _0806E8DC
	.align 2, 0
_0806E404: .4byte 0x00000271
_0806E408:
	ldr r0, _0806E41C @ =0x0000028A
	cmp r2, r0
	bne _0806E410
	b _0806E89C
_0806E410:
	adds r0, #0xa
	cmp r2, r0
	bne _0806E418
	b _0806E8AC
_0806E418:
	b _0806E8DC
	.align 2, 0
_0806E41C: .4byte 0x0000028A
_0806E420:
	movs r0, #0
	movs r1, #1
	strh r1, [r4, #0x36]
	movs r1, #0x64
	strh r1, [r4, #0x34]
	adds r1, r4, #0
	adds r1, #0x31
	strb r0, [r1]
	str r2, [r4, #8]
	str r2, [r4, #0xc]
	b _0806E8DC
_0806E436:
	ldr r0, _0806E440 @ =0xFFFFFE40
	str r0, [r4, #0x14]
	movs r0, #0x6e
	strh r0, [r4, #0x34]
	b _0806E8DC
	.align 2, 0
_0806E440: .4byte 0xFFFFFE40
_0806E444:
	ldr r0, [r4, #0x14]
	adds r2, r0, #0
	adds r2, #0x10
	str r2, [r4, #0x14]
	ldr r0, [r4, #0x10]
	adds r0, r0, r2
	str r0, [r4, #0x10]
	ldr r1, _0806E474 @ =0x00007FFF
	cmp r0, r1
	ble _0806E46A
	movs r0, #0x80
	lsls r0, r0, #8
	str r0, [r4, #0x10]
	rsbs r0, r2, #0
	str r0, [r4, #0xc]
	ldr r0, _0806E478 @ =0xFFFFFE80
	str r0, [r4, #0x14]
	movs r0, #0xc8
	strh r0, [r4, #0x34]
_0806E46A:
	ldr r1, [r4, #0x10]
	movs r0, #0xad
	lsls r0, r0, #8
	b _0806E8D8
	.align 2, 0
_0806E474: .4byte 0x00007FFF
_0806E478: .4byte 0xFFFFFE80
_0806E47C:
	ldr r1, [r4, #0xc]
	subs r1, #0x20
	str r1, [r4, #0xc]
	ldr r0, [r4, #4]
	adds r0, r0, r1
	str r0, [r4, #4]
	cmp r0, #0
	bgt _0806E490
	movs r0, #0
	str r0, [r4, #4]
_0806E490:
	ldr r0, [r4, #0x10]
	ldr r1, [r4, #0x14]
	adds r0, r0, r1
	str r0, [r4, #0x10]
	movs r1, #0x90
	lsls r1, r1, #7
	cmp r0, r1
	bgt _0806E4A2
	str r1, [r4, #0x10]
_0806E4A2:
	ldr r0, [r4, #4]
	cmp r0, #0
	ble _0806E4AA
	b _0806E8DC
_0806E4AA:
	ldr r0, [r4, #0x10]
	cmp r0, r1
	ble _0806E4B2
	b _0806E8DC
_0806E4B2:
	movs r0, #0xd0
	lsls r0, r0, #1
	adds r3, r4, r0
	movs r2, #0
	ldr r1, _0806E4D8 @ =0x000004C4
	strh r1, [r3, #0xc]
	movs r0, #1
	strb r0, [r3, #0x1a]
	movs r5, #0xec
	lsls r5, r5, #1
	adds r3, r4, r5
	strh r1, [r3, #0xc]
	strb r0, [r3, #0x1a]
	str r2, [r4, #0xc]
	movs r0, #0x3c
	strh r0, [r4, #0x36]
	adds r0, #0xf0
	strh r0, [r4, #0x34]
	b _0806E8DC
	.align 2, 0
_0806E4D8: .4byte 0x000004C4
_0806E4DC:
	ldrh r0, [r4, #0x36]
	subs r0, #1
	strh r0, [r4, #0x36]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0806E4EA
	b _0806E8DC
_0806E4EA:
	adds r1, r4, #0
	adds r1, #0x28
	movs r0, #0
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x31
	ldrb r1, [r0]
	adds r5, r0, #0
	cmp r1, #0
	beq _0806E510
	ldr r1, _0806E50C @ =gUnknown_080D584C
	subs r0, #1
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	b _0806E520
	.align 2, 0
_0806E50C: .4byte gUnknown_080D584C
_0806E510:
	ldr r1, _0806E544 @ =gUnknown_080D584C
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	rsbs r0, r0, #0
_0806E520:
	str r0, [r4, #8]
	ldr r2, _0806E548 @ =gPseudoRandom
	ldr r1, [r2]
	ldr r0, _0806E54C @ =0x00196225
	muls r0, r1, r0
	ldr r1, _0806E550 @ =0x3C6EF35F
	adds r0, r0, r1
	str r0, [r2]
	adds r2, r0, #0
	ldr r1, _0806E554 @ =0x00002710
	bl __umodsi3
	adds r2, r0, #0
	ldr r0, _0806E558 @ =0x000003E7
	cmp r2, r0
	bhi _0806E55C
	movs r0, #0x3c
	b _0806E580
	.align 2, 0
_0806E544: .4byte gUnknown_080D584C
_0806E548: .4byte gPseudoRandom
_0806E54C: .4byte 0x00196225
_0806E550: .4byte 0x3C6EF35F
_0806E554: .4byte 0x00002710
_0806E558: .4byte 0x000003E7
_0806E55C:
	ldr r0, _0806E568 @ =0x00000F9F
	cmp r2, r0
	bhi _0806E56C
	movs r0, #0xb4
	b _0806E580
	.align 2, 0
_0806E568: .4byte 0x00000F9F
_0806E56C:
	ldr r0, _0806E578 @ =0x00001F3F
	cmp r2, r0
	bhi _0806E57C
	movs r0, #0xf0
	b _0806E580
	.align 2, 0
_0806E578: .4byte 0x00001F3F
_0806E57C:
	movs r0, #0x96
	lsls r0, r0, #1
_0806E580:
	strh r0, [r4, #0x36]
	ldrb r0, [r5]
	movs r1, #1
	eors r0, r1
	strb r0, [r5]
	movs r0, #0x9b
	lsls r0, r0, #1
	strh r0, [r4, #0x34]
	b _0806E8DC
_0806E592:
	ldr r0, [r4]
	ldr r2, [r4, #8]
	adds r1, r0, r2
	str r1, [r4]
	cmp r2, #0
	bge _0806E5A8
	movs r0, #0xa4
	lsls r0, r0, #0xb
	cmp r1, r0
	bgt _0806E5B6
	b _0806E5B0
_0806E5A8:
	ldr r0, _0806E5D4 @ =0x000607FF
	cmp r1, r0
	ble _0806E5B6
	adds r0, #1
_0806E5B0:
	str r0, [r4]
	rsbs r0, r2, #0
	str r0, [r4, #8]
_0806E5B6:
	ldrh r0, [r4, #0x36]
	subs r0, #1
	strh r0, [r4, #0x36]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	beq _0806E5C6
	b _0806E8DC
_0806E5C6:
	str r0, [r4, #8]
	movs r0, #0x3c
	strh r0, [r4, #0x36]
	movs r0, #0xc8
	lsls r0, r0, #1
	strh r0, [r4, #0x34]
	b _0806E8DC
	.align 2, 0
_0806E5D4: .4byte 0x000607FF
_0806E5D8:
	ldrh r0, [r4, #0x36]
	subs r0, #1
	strh r0, [r4, #0x36]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0806E5E6
	b _0806E8DC
_0806E5E6:
	strh r1, [r4, #0x34]
	b _0806E8DC
_0806E5EA:
	movs r5, #0
	ldr r0, _0806E600 @ =gStageData
	ldrb r0, [r0, #1]
	cmp r0, #0
	bne _0806E604
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #4
	bhi _0806E610
	b _0806E60E
	.align 2, 0
_0806E600: .4byte gStageData
_0806E604:
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #3
	bhi _0806E610
_0806E60E:
	movs r5, #1
_0806E610:
	ldr r2, _0806E638 @ =gPseudoRandom
	ldr r1, [r2]
	ldr r0, _0806E63C @ =0x00196225
	muls r0, r1, r0
	ldr r1, _0806E640 @ =0x3C6EF35F
	adds r0, r0, r1
	str r0, [r2]
	lsrs r2, r0, #1
	ldr r1, _0806E644 @ =0x00002710
	adds r0, r2, #0
	bl __umodsi3
	adds r2, r0, #0
	cmp r5, #0
	beq _0806E64C
	ldr r0, _0806E648 @ =0x0000176F
	cmp r2, r0
	bls _0806E652
	b _0806E660
	.align 2, 0
_0806E638: .4byte gPseudoRandom
_0806E63C: .4byte 0x00196225
_0806E640: .4byte 0x3C6EF35F
_0806E644: .4byte 0x00002710
_0806E648: .4byte 0x0000176F
_0806E64C:
	ldr r0, _0806E65C @ =0x00001F3F
	cmp r2, r0
	bhi _0806E660
_0806E652:
	movs r0, #0xfa
	lsls r0, r0, #1
	strh r0, [r4, #0x34]
	b _0806E8DC
	.align 2, 0
_0806E65C: .4byte 0x00001F3F
_0806E660:
	movs r0, #0x96
	lsls r0, r0, #2
	strh r0, [r4, #0x34]
	b _0806E8DC
_0806E668:
	movs r0, #0
	str r0, [r4, #8]
	str r0, [r4, #0xc]
	movs r0, #0x80
	lsls r0, r0, #2
	str r0, [r4, #0x14]
	subs r0, #2
	strh r0, [r4, #0x34]
	b _0806E8DC
_0806E67A:
	ldr r0, [r4, #0xc]
	adds r0, #0x20
	str r0, [r4, #0xc]
	ldr r1, _0806E6EC @ =0x000003FF
	cmp r0, r1
	ble _0806E68C
	movs r0, #0x80
	lsls r0, r0, #3
	str r0, [r4, #0xc]
_0806E68C:
	ldr r0, [r4, #4]
	ldr r1, [r4, #0xc]
	adds r0, r0, r1
	str r0, [r4, #4]
	ldr r0, [r4, #0x10]
	ldr r1, [r4, #0x14]
	adds r0, r0, r1
	str r0, [r4, #0x10]
	ldr r1, _0806E6F0 @ =0x00007FFF
	cmp r0, r1
	ble _0806E6A8
	movs r0, #0x80
	lsls r0, r0, #8
	str r0, [r4, #0x10]
_0806E6A8:
	movs r3, #0
	ldr r2, [r4, #0x10]
	movs r5, #0x80
	lsls r5, r5, #4
	adds r0, r2, r5
	ldr r1, [r4, #4]
	adds r1, r1, r0
	ldr r0, _0806E6F4 @ =0x0000B4FF
	cmp r1, r0
	ble _0806E6C6
	movs r0, #0xad
	lsls r0, r0, #8
	subs r1, r0, r2
	str r1, [r4, #4]
	movs r3, #1
_0806E6C6:
	cmp r3, #1
	beq _0806E6CC
	b _0806E8DC
_0806E6CC:
	movs r0, #0x80
	lsls r0, r0, #4
	movs r3, #1
	rsbs r3, r3, #0
	movs r1, #0x91
	str r1, [sp]
	movs r1, #0x20
	movs r2, #0
	bl sub_805256C
	ldr r0, _0806E6F8 @ =0xFFFFFE00
	str r0, [r4, #0x14]
	ldr r0, _0806E6FC @ =0x00000203
	strh r0, [r4, #0x34]
	b _0806E81E
	.align 2, 0
_0806E6EC: .4byte 0x000003FF
_0806E6F0: .4byte 0x00007FFF
_0806E6F4: .4byte 0x0000B4FF
_0806E6F8: .4byte 0xFFFFFE00
_0806E6FC: .4byte 0x00000203
_0806E700:
	ldr r0, [r4, #0x10]
	ldr r1, [r4, #0x14]
	adds r0, r0, r1
	str r0, [r4, #0x10]
	movs r1, #0x90
	lsls r1, r1, #7
	cmp r0, r1
	bgt _0806E71A
	ldr r0, _0806E724 @ =0xFFFFFE40
	str r0, [r4, #0x14]
	movs r0, #0x82
	lsls r0, r0, #2
	strh r0, [r4, #0x34]
_0806E71A:
	ldr r1, [r4, #0x10]
	movs r0, #0xad
	lsls r0, r0, #8
	b _0806E8D8
	.align 2, 0
_0806E724: .4byte 0xFFFFFE40
_0806E728:
	ldr r0, [r4, #0x14]
	adds r0, #0x10
	str r0, [r4, #0x14]
	ldr r1, [r4, #0x10]
	adds r1, r1, r0
	str r1, [r4, #0x10]
	ldr r0, _0806E74C @ =0x000047FF
	cmp r1, r0
	ble _0806E744
	adds r0, #1
	str r0, [r4, #0x10]
	movs r0, #0x3c
	strh r0, [r4, #0x36]
	strh r3, [r4, #0x34]
_0806E744:
	ldr r1, [r4, #0x10]
	movs r0, #0xad
	lsls r0, r0, #8
	b _0806E8D8
	.align 2, 0
_0806E74C: .4byte 0x000047FF
_0806E750:
	ldrh r0, [r4, #0x36]
	subs r0, #1
	strh r0, [r4, #0x36]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0806E75E
	b _0806E8DC
_0806E75E:
	movs r0, #0x64
	strh r0, [r4, #0x34]
	b _0806E8DC
_0806E764:
	movs r0, #0xd0
	lsls r0, r0, #1
	adds r3, r4, r0
	movs r1, #0
	ldr r0, _0806E788 @ =0x000004C4
	strh r0, [r3, #0xc]
	strb r1, [r3, #0x1a]
	movs r2, #0xec
	lsls r2, r2, #1
	adds r3, r4, r2
	strh r0, [r3, #0xc]
	strb r1, [r3, #0x1a]
	movs r0, #0x3c
	strh r0, [r4, #0x36]
	ldr r0, _0806E78C @ =0x00000262
	strh r0, [r4, #0x34]
	b _0806E8DC
	.align 2, 0
_0806E788: .4byte 0x000004C4
_0806E78C: .4byte 0x00000262
_0806E790:
	ldrh r0, [r4, #0x36]
	subs r0, #1
	strh r0, [r4, #0x36]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	beq _0806E7A0
	b _0806E8DC
_0806E7A0:
	str r0, [r4, #8]
	str r0, [r4, #0xc]
	movs r0, #0x80
	lsls r0, r0, #2
	str r0, [r4, #0x14]
	strh r1, [r4, #0x34]
	b _0806E8DC
_0806E7AE:
	ldr r0, [r4, #0xc]
	adds r0, #0x20
	str r0, [r4, #0xc]
	ldr r1, _0806E828 @ =0x000003FF
	cmp r0, r1
	ble _0806E7C0
	movs r0, #0x80
	lsls r0, r0, #3
	str r0, [r4, #0xc]
_0806E7C0:
	ldr r0, [r4, #4]
	ldr r1, [r4, #0xc]
	adds r0, r0, r1
	str r0, [r4, #4]
	ldr r0, [r4, #0x10]
	ldr r1, [r4, #0x14]
	adds r0, r0, r1
	str r0, [r4, #0x10]
	ldr r1, _0806E82C @ =0x00007FFF
	cmp r0, r1
	ble _0806E7DC
	movs r0, #0x80
	lsls r0, r0, #8
	str r0, [r4, #0x10]
_0806E7DC:
	movs r3, #0
	ldr r2, [r4, #0x10]
	movs r5, #0x80
	lsls r5, r5, #4
	adds r0, r2, r5
	ldr r1, [r4, #4]
	adds r1, r1, r0
	ldr r0, _0806E830 @ =0x0000B8FF
	cmp r1, r0
	ble _0806E7FA
	movs r0, #0xb1
	lsls r0, r0, #8
	subs r1, r0, r2
	str r1, [r4, #4]
	movs r3, #1
_0806E7FA:
	cmp r3, #1
	bne _0806E8DC
	movs r0, #0x80
	lsls r0, r0, #4
	movs r3, #1
	rsbs r3, r3, #0
	movs r1, #0x91
	str r1, [sp]
	movs r1, #0x20
	movs r2, #0
	bl sub_805256C
	ldr r0, _0806E834 @ =0xFFFFFE00
	str r0, [r4, #0x14]
	ldr r0, _0806E838 @ =0x00000271
	strh r0, [r4, #0x34]
	movs r0, #0xa
	strh r0, [r4, #0x20]
_0806E81E:
	ldr r0, _0806E83C @ =0x00000227
	bl m4aSongNumStart
	b _0806E8DC
	.align 2, 0
_0806E828: .4byte 0x000003FF
_0806E82C: .4byte 0x00007FFF
_0806E830: .4byte 0x0000B8FF
_0806E834: .4byte 0xFFFFFE00
_0806E838: .4byte 0x00000271
_0806E83C: .4byte 0x00000227
_0806E840:
	ldr r0, [r4, #0x10]
	ldr r1, [r4, #0x14]
	adds r0, r0, r1
	str r0, [r4, #0x10]
	movs r1, #0x90
	lsls r1, r1, #7
	cmp r0, r1
	bgt _0806E8D2
	ldr r0, _0806E858 @ =0xFFFFFE40
	str r0, [r4, #0x14]
	ldr r0, _0806E85C @ =0x00000276
	b _0806E8D0
	.align 2, 0
_0806E858: .4byte 0xFFFFFE40
_0806E85C: .4byte 0x00000276
_0806E860:
	ldr r0, [r4, #0x14]
	adds r0, #0x10
	str r0, [r4, #0x14]
	ldr r1, [r4, #0x10]
	adds r1, r1, r0
	str r1, [r4, #0x10]
	ldr r0, _0806E880 @ =0x000047FF
	cmp r1, r0
	ble _0806E8D2
	adds r0, #1
	str r0, [r4, #0x10]
	movs r0, #0x3c
	strh r0, [r4, #0x36]
	strh r3, [r4, #0x34]
	b _0806E8D2
	.align 2, 0
_0806E880: .4byte 0x000047FF
_0806E884:
	ldrh r0, [r4, #0x36]
	subs r0, #1
	strh r0, [r4, #0x36]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0806E8DC
	ldr r0, _0806E898 @ =0x0000028A
	strh r0, [r4, #0x34]
	b _0806E8DC
	.align 2, 0
_0806E898: .4byte 0x0000028A
_0806E89C:
	ldr r0, _0806E8A8 @ =0xFFFFFE40
	str r0, [r4, #0x14]
	movs r0, #0xa5
	lsls r0, r0, #2
	strh r0, [r4, #0x34]
	b _0806E8DC
	.align 2, 0
_0806E8A8: .4byte 0xFFFFFE40
_0806E8AC:
	ldr r0, [r4, #0x14]
	adds r2, r0, #0
	adds r2, #0x10
	str r2, [r4, #0x14]
	ldr r0, [r4, #0x10]
	adds r0, r0, r2
	str r0, [r4, #0x10]
	ldr r1, _0806E908 @ =0x00007FFF
	cmp r0, r1
	ble _0806E8D2
	movs r0, #0x80
	lsls r0, r0, #8
	str r0, [r4, #0x10]
	rsbs r0, r2, #0
	str r0, [r4, #0xc]
	ldr r0, _0806E90C @ =0xFFFFFE80
	str r0, [r4, #0x14]
	movs r0, #0xc8
_0806E8D0:
	strh r0, [r4, #0x34]
_0806E8D2:
	ldr r1, [r4, #0x10]
	movs r0, #0xb1
	lsls r0, r0, #8
_0806E8D8:
	subs r0, r0, r1
	str r0, [r4, #4]
_0806E8DC:
	ldrh r1, [r4, #0x32]
	movs r2, #0x32
	ldrsh r0, [r4, r2]
	cmp r0, #0
	beq _0806E8F8
	subs r0, r1, #1
	strh r0, [r4, #0x32]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0806E8F8
	adds r0, r4, #0
	movs r1, #0
	bl sub_806D808
_0806E8F8:
	adds r0, r4, #0
	bl sub_806D568
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806E908: .4byte 0x00007FFF
_0806E90C: .4byte 0xFFFFFE80

	thumb_func_start sub_806E910
sub_806E910: @ 0x0806E910
	push {r4, r5, lr}
	ldr r4, _0806E930 @ =gCurTask
	ldr r0, [r4]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	bl sub_8079FFC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806E938
	ldr r1, [r4]
	ldr r0, _0806E934 @ =sub_806E950
	b _0806E93C
	.align 2, 0
_0806E930: .4byte gCurTask
_0806E934: .4byte sub_806E950
_0806E938:
	ldr r1, [r4]
	ldr r0, _0806E94C @ =sub_806D268
_0806E93C:
	str r0, [r1, #8]
	adds r0, r5, #0
	bl sub_806D6C4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806E94C: .4byte sub_806D268

	thumb_func_start sub_806E950
sub_806E950: @ 0x0806E950
	push {r4, r5, lr}
	ldr r5, _0806E970 @ =gCurTask
	ldr r2, [r5]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, [r4, #0x2c]
	ldrb r0, [r0]
	cmp r0, #3
	bne _0806E974
	adds r0, r2, #0
	bl TaskDestroy
	b _0806E992
	.align 2, 0
_0806E970: .4byte gCurTask
_0806E974:
	adds r0, r4, #0
	bl sub_806D6C4
	ldr r0, [r4, #0x2c]
	ldrb r0, [r0]
	cmp r0, #2
	bne _0806E992
	bl sub_807A074
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806E992
	ldr r1, [r5]
	ldr r0, _0806E998 @ =sub_806D268
	str r0, [r1, #8]
_0806E992:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806E998: .4byte sub_806D268

	thumb_func_start sub_806E99C
sub_806E99C: @ 0x0806E99C
	push {r4, lr}
	ldr r0, _0806E9BC @ =gCurTask
	ldr r0, [r0]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	adds r0, r4, #0
	bl sub_806DD34
	adds r0, r4, #0
	bl sub_806D6C4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806E9BC: .4byte gCurTask

	thumb_func_start sub_806E9C0
sub_806E9C0: @ 0x0806E9C0
	push {lr}
	ldr r0, _0806E9EC @ =gCurTask
	ldr r0, [r0]
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	ldr r2, [r0, #0x40]
	ldr r1, [r2, #4]
	movs r3, #0x80
	lsls r3, r3, #0x14
	orrs r1, r3
	str r1, [r2, #4]
	ldr r2, [r0, #0x44]
	ldr r1, [r2, #4]
	orrs r1, r3
	str r1, [r2, #4]
	bl sub_806D6C4
	pop {r0}
	bx r0
	.align 2, 0
_0806E9EC: .4byte gCurTask

	thumb_func_start sub_806E9F0
sub_806E9F0: @ 0x0806E9F0
	push {r4, lr}
	ldr r0, _0806EA10 @ =gCurTask
	ldr r0, [r0]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	adds r0, r4, #0
	bl sub_806DED8
	adds r0, r4, #0
	bl sub_806D6C4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806EA10: .4byte gCurTask

	thumb_func_start sub_806EA14
sub_806EA14: @ 0x0806EA14
	push {r4, lr}
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, [r4, #0x38]
	cmp r0, #0
	beq _0806EA2C
	bl VramFree
	movs r0, #0
	str r0, [r4, #0x38]
_0806EA2C:
	ldr r0, [r4, #0x3c]
	cmp r0, #0
	beq _0806EA3A
	bl VramFree
	movs r0, #0
	str r0, [r4, #0x3c]
_0806EA3A:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_806EA40
sub_806EA40: @ 0x0806EA40
	push {r4, lr}
	adds r2, r0, #0
	movs r4, #0
	ldr r3, [r2, #0x10]
	movs r1, #0x80
	lsls r1, r1, #4
	adds r0, r3, r1
	ldr r1, [r2, #4]
	adds r1, r1, r0
	ldr r0, _0806EA6C @ =0x0000B4FF
	cmp r1, r0
	ble _0806EA62
	movs r0, #0xad
	lsls r0, r0, #8
	subs r1, r0, r3
	str r1, [r2, #4]
	movs r4, #1
_0806EA62:
	adds r0, r4, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0806EA6C: .4byte 0x0000B4FF

	thumb_func_start sub_806EA70
sub_806EA70: @ 0x0806EA70
	push {r4, lr}
	adds r2, r0, #0
	movs r4, #0
	ldr r3, [r2, #0x10]
	movs r1, #0x80
	lsls r1, r1, #4
	adds r0, r3, r1
	ldr r1, [r2, #4]
	adds r1, r1, r0
	ldr r0, _0806EA9C @ =0x0000B8FF
	cmp r1, r0
	ble _0806EA92
	movs r0, #0xb1
	lsls r0, r0, #8
	subs r1, r0, r3
	str r1, [r2, #4]
	movs r4, #1
_0806EA92:
	adds r0, r4, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0806EA9C: .4byte 0x0000B8FF

	thumb_func_start sub_806EAA0
sub_806EAA0: @ 0x0806EAA0
	push {r4, r5, r6, lr}
	movs r2, #0
	strh r2, [r0, #0x34]
	movs r1, #1
	strh r1, [r0, #0x36]
	strh r2, [r0, #0x20]
	movs r3, #0
	adds r5, r0, #0
	adds r5, #0x40
	movs r6, #0x80
	lsls r6, r6, #0x14
	movs r4, #0
_0806EAB8:
	lsls r2, r3, #2
	adds r2, r5, r2
	ldr r1, [r2]
	ldr r0, [r1, #4]
	orrs r0, r6
	str r0, [r1, #4]
	strh r4, [r1, #0x1c]
	ldr r0, [r2]
	strh r4, [r0, #0x18]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #1
	bls _0806EAB8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

    @ Called on init of Boss 4
	thumb_func_start sub_806EADC
sub_806EADC: @ 0x0806EADC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	mov sb, r0
	adds r4, r2, #0
	ldr r0, _0806EC2C @ =sub_8071614
	movs r1, #0xc4
	lsls r1, r1, #1
	movs r2, #0x84
	lsls r2, r2, #6
	ldr r3, _0806EC30 @ =sub_8071694
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	str r0, [sp, #4]
	ldr r0, _0806EC34 @ =gStageData
	adds r0, #0x88
	ldr r1, [sp, #4]
	str r1, [r0]
	ldrh r7, [r1, #6]
	movs r5, #0xc0
	lsls r5, r5, #0x12
	adds r5, r7, r5
	movs r0, #0xba
	lsls r0, r0, #0xb
	str r0, [r5]
	lsls r4, r4, #8
	str r4, [r5, #4]
	movs r6, #0
	movs r0, #0
	mov r8, r0
	mov r1, r8
	strh r1, [r5, #0x2c]
	strb r6, [r5, #0x18]
	mov r0, sb
	str r0, [r5, #0x14]
	strb r6, [r5, #0x19]
	ldr r2, _0806EC38 @ =gPlayers
	str r2, [r5, #0x40]
	adds r0, r2, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	lsls r1, r1, #0x1e
	lsrs r1, r1, #0x1e
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r2
	str r0, [r5, #0x44]
	movs r0, #0x96
	lsls r0, r0, #1
	strh r0, [r5, #0x20]
	strb r6, [r5, #0x1a]
	mov r1, r8
	strh r1, [r5, #0x2e]
	strh r1, [r5, #0x30]
	strb r6, [r5, #0x1b]
	movs r0, #1
	mov sb, r0
	mov r1, sb
	strb r1, [r5, #0x12]
	strb r6, [r5, #0x13]
	strb r1, [r5, #0x1c]
	strb r6, [r5, #0x1d]
	mov r0, r8
	strh r0, [r5, #0x1e]
	ldr r1, _0806EC3C @ =0x03000032
	adds r0, r7, r1
	strb r6, [r0]
	adds r0, r5, #0
	movs r1, #0
	bl sub_8071904
	movs r0, #0x64
	bl VramMalloc
	adds r4, r0, #0
	str r4, [r5, #0x38]
	movs r0, #0xc0
	lsls r0, r0, #3
	adds r4, r4, r0
	str r4, [r5, #0x3c]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r4, r4, r1
	ldr r0, _0806EC40 @ =0x03000070
	adds r1, r7, r0
	str r4, [r1]
	movs r0, #0x90
	lsls r0, r0, #2
	strh r0, [r1, #0x14]
	ldr r0, _0806EC44 @ =0x000004C9
	strh r0, [r1, #0xc]
	mov r0, sb
	strb r0, [r1, #0x1a]
	mov r0, r8
	strh r0, [r1, #0x16]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	movs r0, #0x10
	mov sl, r0
	mov r0, sl
	strb r0, [r1, #0x1c]
	strb r6, [r1, #0x1f]
	mov r0, r8
	strh r0, [r1, #0x10]
	strh r0, [r1, #0x12]
	movs r0, #0x80
	lsls r0, r0, #5
	mov sb, r0
	str r0, [r1, #8]
	adds r0, r1, #0
	bl UpdateSpriteAnimation
	movs r1, #0xe0
	lsls r1, r1, #2
	adds r4, r4, r1
	ldr r0, _0806EC48 @ =0x03000048
	adds r1, r7, r0
	str r4, [r1]
	movs r0, #0x90
	lsls r0, r0, #2
	strh r0, [r1, #0x14]
	ldr r0, _0806EC4C @ =0x000004CA
	strh r0, [r1, #0xc]
	strb r6, [r1, #0x1a]
	mov r0, r8
	strh r0, [r1, #0x16]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r1, #0x1b]
	mov r0, sl
	strb r0, [r1, #0x1c]
	strb r6, [r1, #0x1f]
	mov r0, r8
	strh r0, [r1, #0x10]
	strh r0, [r1, #0x12]
	mov r0, sb
	str r0, [r1, #8]
	adds r0, r1, #0
	bl UpdateSpriteAnimation
	adds r0, r5, #0
	bl sub_08070138
	adds r0, r5, #0
	bl sub_080719B4
	mov r1, r8
	str r1, [r5, #0x34]
	bl sub_807A4BC
	ldr r0, [sp, #4]
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0806EC2C: .4byte sub_8071614
_0806EC30: .4byte sub_8071694
_0806EC34: .4byte gStageData
_0806EC38: .4byte gPlayers
_0806EC3C: .4byte 0x03000032
_0806EC40: .4byte 0x03000070
_0806EC44: .4byte 0x000004C9
_0806EC48: .4byte 0x03000048
_0806EC4C: .4byte 0x000004CA

	thumb_func_start sub_806EC50
sub_806EC50: @ 0x0806EC50
	push {r4, r5, lr}
	ldr r0, _0806EC70 @ =gCurTask
	ldr r2, [r0]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, [r4, #0x14]
	ldrb r0, [r0]
	cmp r0, #3
	bne _0806EC74
	adds r0, r2, #0
	bl TaskDestroy
	b _0806ECE2
	.align 2, 0
_0806EC70: .4byte gCurTask
_0806EC74:
	ldr r0, [r4, #0x40]
	bl sub_0806F5F0
	ldr r0, [r4, #0x44]
	bl sub_0806F5F0
	adds r0, r4, #0
	bl sub_8070208
	adds r0, r4, #0
	bl sub_0806FA0C
	ldr r0, _0806ECE8 @ =gStageData
	ldrb r1, [r0, #6]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	ldr r2, _0806ECEC @ =gPlayers
	adds r3, r0, r2
	adds r0, r3, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	lsls r1, r1, #0x1e
	lsrs r1, r1, #0x1e
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r5, r0, r2
	ldr r2, [r3, #0x10]
	asrs r1, r2, #8
	ldr r0, _0806ECF0 @ =0x0000053D
	cmp r1, r0
	bgt _0806ECC8
	ldr r0, [r5, #0x10]
	cmp r0, r2
	ble _0806ECC8
	ldr r0, _0806ECF4 @ =0x00053E00
	str r0, [r3, #0x10]
_0806ECC8:
	ldr r0, [r4, #0x14]
	ldrb r0, [r0]
	cmp r0, #2
	bne _0806ECE2
	bl sub_807A074
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806ECE2
	ldr r0, _0806ECF8 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0806ECFC @ =sub_806ED00
	str r0, [r1, #8]
_0806ECE2:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806ECE8: .4byte gStageData
_0806ECEC: .4byte gPlayers
_0806ECF0: .4byte 0x0000053D
_0806ECF4: .4byte 0x00053E00
_0806ECF8: .4byte gCurTask
_0806ECFC: .4byte sub_806ED00

	thumb_func_start sub_806ED00
sub_806ED00: @ 0x0806ED00
	push {r4, r5, r6, lr}
	ldr r0, _0806ED20 @ =gCurTask
	ldr r2, [r0]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, [r4, #0x14]
	ldrb r0, [r0]
	cmp r0, #3
	bne _0806ED24
	adds r0, r2, #0
	bl TaskDestroy
	b _0806EDC0
	.align 2, 0
_0806ED20: .4byte gCurTask
_0806ED24:
	ldr r0, [r4, #0x40]
	bl sub_0806F5F0
	ldr r0, [r4, #0x44]
	bl sub_0806F5F0
	adds r0, r4, #0
	bl sub_8070208
	adds r0, r4, #0
	bl sub_0806FA0C
	ldr r0, [r4, #0x14]
	ldrb r0, [r0]
	cmp r0, #2
	bne _0806EDC0
	movs r1, #0
	ldr r2, _0806EDC8 @ =gPlayers
	adds r6, r2, #0
	ldr r5, _0806EDCC @ =0xFFFFFAF0
	ldr r3, _0806EDD0 @ =0x0000019F
_0806ED4E:
	lsls r0, r1, #0x10
	asrs r1, r0, #0x10
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r6
	ldr r0, [r0, #0x10]
	asrs r0, r0, #8
	adds r0, r0, r5
	cmp r0, r3
	bhi _0806EDC0
	adds r0, r1, #1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	ble _0806ED4E
	ldr r0, _0806EDD4 @ =gStageData
	ldrb r1, [r0, #6]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r3, r0, r2
	adds r0, r3, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	lsls r1, r1, #0x1e
	lsrs r1, r1, #0x1e
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r5, r0, r2
	ldr r2, [r3, #0x10]
	asrs r1, r2, #8
	ldr r0, _0806EDD8 @ =0x0000053D
	cmp r1, r0
	bgt _0806EDAE
	ldr r0, [r5, #0x10]
	cmp r0, r2
	ble _0806EDAE
	ldr r0, _0806EDDC @ =0x00053E00
	str r0, [r3, #0x10]
_0806EDAE:
	movs r0, #0x32
	bl sub_80299D4
	movs r0, #1
	strb r0, [r4, #0x13]
	ldr r0, _0806EDE0 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0806EDE4 @ =sub_806EDE8
	str r0, [r1, #8]
_0806EDC0:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0806EDC8: .4byte gPlayers
_0806EDCC: .4byte 0xFFFFFAF0
_0806EDD0: .4byte 0x0000019F
_0806EDD4: .4byte gStageData
_0806EDD8: .4byte 0x0000053D
_0806EDDC: .4byte 0x00053E00
_0806EDE0: .4byte gCurTask
_0806EDE4: .4byte sub_806EDE8

	thumb_func_start sub_806EDE8
sub_806EDE8: @ 0x0806EDE8
	push {r4, r5, r6, r7, lr}
	ldr r7, _0806EE1C @ =gCurTask
	ldr r0, [r7]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r6, #0
	strh r0, [r4, #0x2c]
	ldr r0, [r4, #0x40]
	bl sub_0806F5F0
	ldr r0, [r4, #0x44]
	bl sub_0806F5F0
	ldrh r1, [r4, #0x2c]
	cmp r1, #0xf0
	beq _0806EE58
	cmp r1, #0xf0
	bgt _0806EE20
	cmp r1, #0x3c
	beq _0806EE30
	b _0806EEA0
	.align 2, 0
_0806EE1C: .4byte gCurTask
_0806EE20:
	movs r0, #0x96
	lsls r0, r0, #1
	cmp r1, r0
	beq _0806EE70
	adds r0, #0x64
	cmp r1, r0
	beq _0806EE7A
	b _0806EEA0
_0806EE30:
	adds r0, r4, #0
	movs r1, #1
	bl sub_8071968
	ldr r0, _0806EE54 @ =0x0000022E
	bl m4aSongNumStart
	adds r0, r4, #0
	movs r1, #1
	bl sub_806FAFC
	movs r0, #1
	strb r0, [r4, #0x18]
	adds r0, r4, #0
	bl sub_0806F2B8
	b _0806EEA0
	.align 2, 0
_0806EE54: .4byte 0x0000022E
_0806EE58:
	adds r0, r4, #0
	movs r1, #0
	bl sub_8071968
	ldr r1, _0806EE6C @ =0x030000D0
	adds r0, r5, r1
	bl UpdateSpriteAnimation
	b _0806EEA0
	.align 2, 0
_0806EE6C: .4byte 0x030000D0
_0806EE70:
	adds r0, r4, #0
	movs r1, #2
	bl sub_806FAFC
	b _0806EEA0
_0806EE7A:
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #1
	strb r0, [r4, #0x18]
	strb r6, [r4, #0x12]
	strb r6, [r4, #0x13]
	adds r0, r4, #0
	movs r1, #0
	bl sub_806FAFC
	adds r0, r4, #0
	movs r1, #1
	bl sub_8071904
	bl sub_807A4A8
	ldr r1, [r7]
	ldr r0, _0806EEB4 @ =sub_806EEB8
	str r0, [r1, #8]
_0806EEA0:
	adds r0, r4, #0
	bl sub_8070208
	adds r0, r4, #0
	bl sub_0806FA0C
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806EEB4: .4byte sub_806EEB8

	thumb_func_start sub_806EEB8
sub_806EEB8: @ 0x0806EEB8
	push {r4, r5, lr}
	ldr r4, _0806EEEC @ =gCurTask
	ldr r3, [r4]
	ldrh r1, [r3, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	ldr r0, [r5]
	asrs r1, r0, #8
	ldr r0, _0806EEF0 @ =0x00000677
	cmp r1, r0
	ble _0806EF20
	ldr r2, _0806EEF4 @ =gStageData
	ldrb r0, [r2, #3]
	cmp r0, #5
	bne _0806EF06
	ldrb r0, [r2, #6]
	cmp r0, #0
	beq _0806EEFC
	ldr r0, _0806EEF8 @ =sub_8071664
	str r0, [r3, #8]
	b _0806EF12
	.align 2, 0
_0806EEEC: .4byte gCurTask
_0806EEF0: .4byte 0x00000677
_0806EEF4: .4byte gStageData
_0806EEF8: .4byte sub_8071664
_0806EEFC:
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	movs r0, #1
	bl sub_8027674
_0806EF06:
	adds r0, r5, #0
	bl sub_80719C8
	ldr r1, [r4]
	ldr r0, _0806EF1C @ =sub_806F3A0
	str r0, [r1, #8]
_0806EF12:
	adds r0, r5, #0
	bl sub_0806FA0C
	b _0806EFDA
	.align 2, 0
_0806EF1C: .4byte sub_806F3A0
_0806EF20:
	ldr r0, [r5, #0x40]
	bl sub_0806F5F0
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, [r5, #0x44]
	bl sub_0806F5F0
	adds r4, r4, r0
	lsls r4, r4, #0x18
	cmp r4, #0
	beq _0806EF5A
	ldr r1, _0806EF50 @ =gStageData
	ldrb r0, [r1, #3]
	cmp r0, #5
	bne _0806EF54
	ldrb r0, [r1, #6]
	cmp r0, #0
	bne _0806EF5A
	adds r0, r5, #0
	bl sub_8071410
	b _0806EF5A
	.align 2, 0
_0806EF50: .4byte gStageData
_0806EF54:
	adds r0, r5, #0
	bl sub_8071410
_0806EF5A:
	ldrb r1, [r5, #0x19]
	movs r0, #0x19
	ldrsb r0, [r5, r0]
	cmp r0, #0
	beq _0806EF68
	subs r0, r1, #1
	strb r0, [r5, #0x19]
_0806EF68:
	adds r0, r5, #0
	bl sub_0806EFE8
	adds r0, r5, #0
	bl sub_8070208
	ldrh r0, [r5, #0x20]
	subs r0, #1
	strh r0, [r5, #0x20]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0806EFD4
	ldr r1, [r5]
	ldr r0, _0806EF8C @ =0x00062FFF
	cmp r1, r0
	ble _0806EF90
	movs r2, #3
	b _0806EFAA
	.align 2, 0
_0806EF8C: .4byte 0x00062FFF
_0806EF90:
	ldr r0, _0806EF9C @ =0x000611FF
	cmp r1, r0
	ble _0806EFA0
	movs r2, #2
	b _0806EFAA
	.align 2, 0
_0806EF9C: .4byte 0x000611FF
_0806EFA0:
	ldr r0, _0806EFE0 @ =0x0005D5FF
	movs r2, #0
	cmp r1, r0
	ble _0806EFAA
	movs r2, #1
_0806EFAA:
	ldr r1, _0806EFE4 @ =gUnknown_080D5880
	lsls r0, r2, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r5, #0x20]
	ldrb r0, [r5, #0x1b]
	movs r1, #1
	eors r0, r1
	strb r0, [r5, #0x1b]
	adds r0, r5, #0
	movs r1, #0
	bl sub_806FB38
	adds r0, r5, #0
	movs r1, #1
	bl sub_806FB38
	adds r0, r5, #0
	movs r1, #2
	bl sub_806FB38
_0806EFD4:
	adds r0, r5, #0
	bl sub_0806FA0C
_0806EFDA:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806EFE0: .4byte 0x0005D5FF
_0806EFE4: .4byte gUnknown_080D5880

	thumb_func_start sub_0806EFE8
sub_0806EFE8: @ 0x0806EFE8
	push {r4, r5, r6, lr}
	sub sp, #0x10
	adds r5, r0, #0
	movs r6, #0
	ldrh r0, [r5, #0x10]
	subs r0, #2
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #1
	bhi _0806F02E
	ldr r0, [r5, #0xc]
	asrs r0, r0, #8
	movs r1, #3
	ands r0, r1
	cmp r0, #0
	bne _0806F02E
	ldr r1, [r5]
	asrs r1, r1, #8
	subs r1, #0x20
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	ldr r2, [r5, #4]
	asrs r2, r2, #8
	subs r2, #4
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	str r6, [sp]
	movs r0, #0x10
	str r0, [sp, #4]
	str r6, [sp, #8]
	str r6, [sp, #0xc]
	movs r0, #8
	movs r3, #0
	bl sub_8079758
_0806F02E:
	ldrh r0, [r5, #0x10]
	cmp r0, #4
	beq _0806F064
	ldrb r0, [r5, #0x1d]
	cmp r0, #0
	bne _0806F04C
	ldr r0, [r5]
	asrs r0, r0, #8
	ldr r1, _0806F048 @ =0x00000617
	cmp r0, r1
	ble _0806F064
	movs r0, #0x33
	b _0806F058
	.align 2, 0
_0806F048: .4byte 0x00000617
_0806F04C:
	ldr r0, [r5]
	asrs r0, r0, #8
	ldr r1, _0806F078 @ =0x00000617
	cmp r0, r1
	bgt _0806F064
	movs r0, #0x32
_0806F058:
	bl sub_80299D4
	ldrb r0, [r5, #0x1d]
	movs r1, #1
	eors r0, r1
	strb r0, [r5, #0x1d]
_0806F064:
	ldr r6, [r5]
	ldrh r0, [r5, #0x10]
	cmp r0, #4
	bls _0806F06E
	b _0806F270
_0806F06E:
	lsls r0, r0, #2
	ldr r1, _0806F07C @ =_0806F080
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0806F078: .4byte 0x00000617
_0806F07C: .4byte _0806F080
_0806F080: @ jump table
	.4byte _0806F270 @ case 0
	.4byte _0806F094 @ case 1
	.4byte _0806F0D0 @ case 2
	.4byte _0806F146 @ case 3
	.4byte _0806F1BC @ case 4
_0806F094:
	ldr r0, [r5]
	ldr r1, [r5, #8]
	adds r0, r0, r1
	str r0, [r5]
	asrs r0, r0, #8
	movs r1, #0xaa
	lsls r1, r1, #3
	cmp r0, r1
	ble _0806F0A8
	b _0806F270
_0806F0A8:
	movs r0, #0xaa
	lsls r0, r0, #0xb
	str r0, [r5]
	ldrb r1, [r5, #0x13]
	cmp r1, #0
	beq _0806F0B6
	b _0806F270
_0806F0B6:
	movs r0, #0x65
	strh r0, [r5, #0x24]
	movs r0, #1
	strb r0, [r5, #0x13]
	ldrh r0, [r5, #0x10]
	cmp r0, #4
	bne _0806F0C6
	b _0806F270
_0806F0C6:
	movs r0, #4
	strh r0, [r5, #0x10]
	movs r0, #0
	strb r0, [r5, #0x1a]
	b _0806F1B2
_0806F0D0:
	ldr r0, [r5]
	ldr r2, [r5, #8]
	adds r1, r0, r2
	str r1, [r5]
	ldr r0, _0806F114 @ =gStageData
	ldrb r0, [r0, #1]
	movs r3, #0xc0
	lsls r3, r3, #5
	cmp r0, #0
	bne _0806F0E8
	movs r3, #0x80
	lsls r3, r3, #5
_0806F0E8:
	ldr r0, [r5, #0xc]
	adds r0, r0, r2
	str r0, [r5, #0xc]
	cmp r0, r3
	bge _0806F0F4
	b _0806F270
_0806F0F4:
	ldrh r0, [r5, #0x10]
	cmp r0, #0
	bne _0806F0FC
	b _0806F270
_0806F0FC:
	movs r3, #0
	movs r2, #0
	strh r2, [r5, #0x10]
	ldrh r0, [r5, #0x10]
	cmp r0, #1
	beq _0806F12A
	cmp r0, #1
	bgt _0806F118
	cmp r0, #0
	beq _0806F122
	b _0806F270
	.align 2, 0
_0806F114: .4byte gStageData
_0806F118:
	cmp r0, #2
	beq _0806F130
	cmp r0, #4
	beq _0806F13A
	b _0806F270
_0806F122:
	strb r3, [r5, #0x1a]
	str r2, [r5, #8]
	str r2, [r5, #0xc]
	b _0806F270
_0806F12A:
	movs r0, #8
	rsbs r0, r0, #0
	b _0806F140
_0806F130:
	movs r0, #0x80
	str r0, [r5, #8]
	str r2, [r5, #0xc]
	asrs r1, r1, #8
	b _0806F1A0
_0806F13A:
	strb r3, [r5, #0x1a]
	movs r0, #0x80
	lsls r0, r0, #4
_0806F140:
	str r0, [r5, #8]
	str r2, [r5, #0xc]
	b _0806F270
_0806F146:
	ldr r0, [r5]
	ldr r1, [r5, #8]
	adds r2, r0, r1
	str r2, [r5]
	ldr r0, [r5, #0xc]
	adds r0, r0, r1
	str r0, [r5, #0xc]
	ldr r1, _0806F17C @ =0x00001FFF
	cmp r0, r1
	bgt _0806F15C
	b _0806F270
_0806F15C:
	ldrh r0, [r5, #0x10]
	cmp r0, #0
	bne _0806F164
	b _0806F270
_0806F164:
	movs r3, #0
	movs r1, #0
	strh r1, [r5, #0x10]
	ldrh r0, [r5, #0x10]
	cmp r0, #1
	beq _0806F192
	cmp r0, #1
	bgt _0806F180
	cmp r0, #0
	beq _0806F18A
	b _0806F270
	.align 2, 0
_0806F17C: .4byte 0x00001FFF
_0806F180:
	cmp r0, #2
	beq _0806F198
	cmp r0, #4
	beq _0806F1B0
	b _0806F270
_0806F18A:
	strb r3, [r5, #0x1a]
	str r1, [r5, #8]
	str r1, [r5, #0xc]
	b _0806F270
_0806F192:
	movs r0, #8
	rsbs r0, r0, #0
	b _0806F1B6
_0806F198:
	movs r0, #0x80
	str r0, [r5, #8]
	str r1, [r5, #0xc]
	asrs r1, r2, #8
_0806F1A0:
	ldr r0, _0806F1AC @ =0x0000066F
	cmp r1, r0
	ble _0806F270
	movs r0, #3
	strh r0, [r5, #0x10]
	b _0806F270
	.align 2, 0
_0806F1AC: .4byte 0x0000066F
_0806F1B0:
	strb r3, [r5, #0x1a]
_0806F1B2:
	movs r0, #0x80
	lsls r0, r0, #4
_0806F1B6:
	str r0, [r5, #8]
	str r1, [r5, #0xc]
	b _0806F270
_0806F1BC:
	ldr r0, [r5]
	ldr r2, [r5, #8]
	adds r1, r0, r2
	str r1, [r5]
	ldrb r3, [r5, #0x1a]
	movs r0, #1
	ands r0, r3
	cmp r0, #0
	beq _0806F1DE
	asrs r1, r1, #8
	movs r0, #0xaa
	lsls r0, r0, #3
	cmp r1, r0
	bgt _0806F1F4
	movs r0, #0xaa
	lsls r0, r0, #0xb
	b _0806F1EA
_0806F1DE:
	asrs r1, r1, #8
	ldr r0, _0806F228 @ =0x0000064F
	cmp r1, r0
	ble _0806F1F4
	movs r0, #0xca
	lsls r0, r0, #0xb
_0806F1EA:
	str r0, [r5]
	rsbs r0, r2, #0
	str r0, [r5, #8]
	adds r0, r3, #1
	strb r0, [r5, #0x1a]
_0806F1F4:
	movs r0, #0x1a
	ldrsb r0, [r5, r0]
	cmp r0, #0xa
	bne _0806F270
	ldr r0, [r5]
	asrs r0, r0, #8
	ldr r1, _0806F22C @ =0x000005CF
	cmp r0, r1
	ble _0806F270
	movs r0, #0xba
	lsls r0, r0, #0xb
	str r0, [r5]
	ldrh r0, [r5, #0x10]
	cmp r0, #0
	beq _0806F254
	movs r2, #0
	movs r1, #0
	strh r1, [r5, #0x10]
	ldrh r0, [r5, #0x10]
	cmp r0, #1
	beq _0806F240
	cmp r0, #1
	bgt _0806F230
	cmp r0, #0
	beq _0806F23A
	b _0806F254
	.align 2, 0
_0806F228: .4byte 0x0000064F
_0806F22C: .4byte 0x000005CF
_0806F230:
	cmp r0, #2
	beq _0806F246
	cmp r0, #4
	beq _0806F24A
	b _0806F254
_0806F23A:
	strb r2, [r5, #0x1a]
	str r1, [r5, #8]
	b _0806F252
_0806F240:
	movs r0, #8
	rsbs r0, r0, #0
	b _0806F250
_0806F246:
	movs r0, #0x80
	b _0806F250
_0806F24A:
	strb r2, [r5, #0x1a]
	movs r0, #0x80
	lsls r0, r0, #4
_0806F250:
	str r0, [r5, #8]
_0806F252:
	str r1, [r5, #0xc]
_0806F254:
	movs r4, #0
	movs r0, #1
	strb r0, [r5, #0x12]
	adds r0, r5, #0
	bl sub_0806F2B8
	strb r4, [r5, #0x12]
	adds r0, r5, #0
	movs r1, #1
	bl sub_806FAFC
	ldr r0, _0806F2B4 @ =0x0000022E
	bl m4aSongNumStart
_0806F270:
	ldr r0, [r5]
	subs r6, r0, r6
	ldr r2, [r5, #0x40]
	ldr r0, [r2, #4]
	movs r1, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0806F290
	adds r1, r5, #0
	adds r1, #0x70
	ldr r0, [r2, #0x6c]
	cmp r0, r1
	bne _0806F290
	ldr r0, [r2, #0x10]
	adds r0, r0, r6
	str r0, [r2, #0x10]
_0806F290:
	ldr r2, [r5, #0x44]
	ldr r0, [r2, #4]
	movs r1, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0806F2AC
	adds r1, r5, #0
	adds r1, #0x70
	ldr r0, [r2, #0x6c]
	cmp r0, r1
	bne _0806F2AC
	ldr r0, [r2, #0x10]
	adds r0, r0, r6
	str r0, [r2, #0x10]
_0806F2AC:
	add sp, #0x10
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0806F2B4: .4byte 0x0000022E

	thumb_func_start sub_0806F2B8
sub_0806F2B8: @ 0x0806F2B8
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r1, [r5]
	ldr r0, _0806F2C8 @ =0x00062FFF
	cmp r1, r0
	ble _0806F2CC
	movs r4, #3
	b _0806F2E6
	.align 2, 0
_0806F2C8: .4byte 0x00062FFF
_0806F2CC:
	ldr r0, _0806F2D8 @ =0x000611FF
	cmp r1, r0
	ble _0806F2DC
	movs r4, #2
	b _0806F2E6
	.align 2, 0
_0806F2D8: .4byte 0x000611FF
_0806F2DC:
	ldr r0, _0806F310 @ =0x0005D5FF
	movs r4, #0
	cmp r1, r0
	ble _0806F2E6
	movs r4, #1
_0806F2E6:
	movs r6, #0
	ldr r2, _0806F314 @ =gPseudoRandom
	ldr r1, [r2]
	ldr r0, _0806F318 @ =0x00196225
	muls r0, r1, r0
	ldr r1, _0806F31C @ =0x3C6EF35F
	adds r0, r0, r1
	str r0, [r2]
	movs r1, #0x64
	bl __umodsi3
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r4, #1
	beq _0806F332
	cmp r4, #1
	bgt _0806F320
	cmp r4, #0
	beq _0806F32A
	b _0806F358
	.align 2, 0
_0806F310: .4byte 0x0005D5FF
_0806F314: .4byte gPseudoRandom
_0806F318: .4byte 0x00196225
_0806F31C: .4byte 0x3C6EF35F
_0806F320:
	cmp r4, #2
	beq _0806F342
	cmp r4, #3
	beq _0806F352
	b _0806F358
_0806F32A:
	movs r6, #1
	cmp r0, #0x1d
	bhi _0806F358
	b _0806F356
_0806F332:
	movs r6, #2
	cmp r0, #0x27
	bls _0806F358
	movs r6, #1
	cmp r0, #0x45
	bhi _0806F358
	movs r6, #0
	b _0806F358
_0806F342:
	movs r6, #2
	cmp r0, #0x31
	bls _0806F358
	movs r6, #1
	cmp r0, #0x59
	bhi _0806F358
	movs r6, #0
	b _0806F358
_0806F352:
	cmp r0, #0x31
	bhi _0806F358
_0806F356:
	movs r6, #2
_0806F358:
	strb r6, [r5, #0x18]
	ldrb r0, [r5, #0x12]
	cmp r0, #0
	beq _0806F364
	movs r0, #1
	strb r0, [r5, #0x18]
_0806F364:
	ldrb r0, [r5, #0x18]
	cmp r0, #1
	beq _0806F382
	cmp r0, #1
	bgt _0806F374
	cmp r0, #0
	beq _0806F37A
	b _0806F396
_0806F374:
	cmp r0, #2
	beq _0806F390
	b _0806F396
_0806F37A:
	adds r0, r5, #0
	bl sub_08071720
	b _0806F396
_0806F382:
	adds r0, r5, #0
	bl sub_08071764
	adds r0, r5, #0
	bl sub_0806FE98
	b _0806F396
_0806F390:
	adds r0, r5, #0
	bl sub_080717A8
_0806F396:
	movs r0, #1
	strb r0, [r5, #0x13]
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_806F3A0
sub_806F3A0: @ 0x0806F3A0
	push {r4, r5, r6, lr}
	sub sp, #0x10
	ldr r0, _0806F3D0 @ =gCurTask
	ldr r5, [r0]
	ldrh r6, [r5, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r6, r0
	ldr r0, [r4]
	lsls r0, r0, #8
	lsrs r1, r0, #0x10
	ldr r0, _0806F3D4 @ =gStageData
	ldr r3, [r0, #0x1c]
	ldrh r2, [r4, #0x2c]
	cmp r2, #0x64
	beq _0806F42C
	cmp r2, #0x64
	bgt _0806F3D8
	cmp r2, #0
	beq _0806F3E8
	cmp r2, #0xa
	beq _0806F3F4
	b _0806F540
	.align 2, 0
_0806F3D0: .4byte gCurTask
_0806F3D4: .4byte gStageData
_0806F3D8:
	cmp r2, #0xc8
	beq _0806F498
	movs r0, #0xfa
	lsls r0, r0, #2
	cmp r2, r0
	bne _0806F3E6
	b _0806F52C
_0806F3E6:
	b _0806F540
_0806F3E8:
	str r2, [r4, #8]
	movs r0, #1
	strh r0, [r4, #0x20]
	movs r0, #0xa
	strh r0, [r4, #0x2c]
	b _0806F540
_0806F3F4:
	ldr r0, [r4, #8]
	adds r0, #0x20
	str r0, [r4, #8]
	ldr r1, _0806F424 @ =0x000003FF
	cmp r0, r1
	ble _0806F406
	movs r0, #0x80
	lsls r0, r0, #3
	str r0, [r4, #8]
_0806F406:
	ldr r1, [r4, #4]
	ldr r0, [r4, #8]
	adds r1, r1, r0
	str r1, [r4, #4]
	asrs r1, r1, #8
	ldr r0, _0806F428 @ =gCamera
	ldr r0, [r0, #0x14]
	adds r0, #0x50
	cmp r1, r0
	bgt _0806F41C
	b _0806F540
_0806F41C:
	movs r0, #0x64
	strh r0, [r4, #0x2c]
	b _0806F540
	.align 2, 0
_0806F424: .4byte 0x000003FF
_0806F428: .4byte gCamera
_0806F42C:
	ldr r0, [r4, #0x38]
	cmp r0, #0
	beq _0806F43A
	bl VramFree
	movs r0, #0
	str r0, [r4, #0x38]
_0806F43A:
	ldr r0, _0806F48C @ =0x030000C8
	adds r5, r6, r0
	ldr r0, [r5]
	cmp r0, #0
	beq _0806F44C
	bl VramFree
	movs r0, #0
	str r0, [r5]
_0806F44C:
	ldr r0, _0806F490 @ =0x030000CC
	adds r5, r6, r0
	ldr r0, [r5]
	cmp r0, #0
	beq _0806F45E
	bl VramFree
	movs r0, #0
	str r0, [r5]
_0806F45E:
	movs r0, #0x9e
	bl VramMalloc
	str r0, [r4, #0x34]
	ldr r0, _0806F494 @ =0x00000221
	bl m4aSongNumStart
	movs r0, #0x80
	lsls r0, r0, #4
	movs r3, #1
	rsbs r3, r3, #0
	movs r1, #0x91
	str r1, [sp]
	movs r1, #8
	movs r2, #0
	bl sub_805256C
	movs r0, #0xb4
	strh r0, [r4, #0x20]
	movs r0, #0xc8
	strh r0, [r4, #0x2c]
	b _0806F540
	.align 2, 0
_0806F48C: .4byte 0x030000C8
_0806F490: .4byte 0x030000CC
_0806F494: .4byte 0x00000221
_0806F498:
	movs r0, #1
	ands r0, r3
	cmp r0, #0
	beq _0806F4F4
	movs r0, #2
	ands r0, r3
	cmp r0, #0
	beq _0806F4B8
	lsls r0, r1, #0x10
	asrs r0, r0, #0x10
	adds r0, #0x20
	movs r1, #0x1f
	ands r3, r1
	lsls r1, r3, #1
	subs r0, r0, r1
	b _0806F4C6
_0806F4B8:
	lsls r0, r1, #0x10
	asrs r0, r0, #0x10
	subs r0, #0x20
	movs r1, #0x1f
	ands r3, r1
	lsls r1, r3, #1
	adds r0, r0, r1
_0806F4C6:
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	ldr r0, _0806F520 @ =gCamera
	ldr r2, [r0, #0x14]
	adds r2, #0x10
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	movs r3, #0xa0
	lsls r3, r3, #3
	movs r0, #0xc0
	lsls r0, r0, #2
	str r0, [sp]
	movs r0, #0x14
	str r0, [sp, #4]
	subs r0, #0x1e
	str r0, [sp, #8]
	ldr r0, [r4, #0x34]
	str r0, [sp, #0xc]
	movs r0, #6
	bl sub_8079758
_0806F4F4:
	ldr r0, _0806F524 @ =gStageData
	ldr r0, [r0, #0x1c]
	movs r1, #0x3f
	ands r0, r1
	cmp r0, #0
	bne _0806F506
	ldr r0, _0806F528 @ =0x00000221
	bl m4aSongNumStart
_0806F506:
	ldrh r0, [r4, #0x20]
	subs r0, #1
	strh r0, [r4, #0x20]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0806F540
	movs r0, #0x3c
	strh r0, [r4, #0x20]
	movs r0, #0xfa
	lsls r0, r0, #2
	strh r0, [r4, #0x2c]
	b _0806F540
	.align 2, 0
_0806F520: .4byte gCamera
_0806F524: .4byte gStageData
_0806F528: .4byte 0x00000221
_0806F52C:
	ldrh r0, [r4, #0x20]
	subs r0, #1
	strh r0, [r4, #0x20]
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	bne _0806F540
	ldr r0, _0806F568 @ =sub_806F56C
	str r0, [r5, #8]
	strh r1, [r4, #0x2c]
_0806F540:
	ldr r1, [r4, #0x40]
	ldr r0, [r1, #4]
	movs r2, #0x80
	lsls r2, r2, #0x14
	orrs r0, r2
	str r0, [r1, #4]
	ldr r1, [r4, #0x44]
	ldr r0, [r1, #4]
	orrs r0, r2
	str r0, [r1, #4]
	adds r0, r4, #0
	bl sub_8070208
	adds r0, r4, #0
	bl sub_0806FA0C
	add sp, #0x10
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0806F568: .4byte sub_806F56C

	thumb_func_start sub_806F56C
sub_806F56C: @ 0x0806F56C
	push {r4, r5, lr}
	sub sp, #0x10
	ldr r0, _0806F58C @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, [r4, #0x40]
	ldrh r5, [r4, #0x2c]
	cmp r5, #0
	beq _0806F590
	cmp r5, #1
	beq _0806F5D4
	b _0806F5E8
	.align 2, 0
_0806F58C: .4byte gCurTask
_0806F590:
	ldr r0, [r4, #0x34]
	cmp r0, #0
	beq _0806F59C
	bl VramFree
	str r5, [r4, #0x34]
_0806F59C:
	ldr r0, [r4, #4]
	ldr r1, _0806F5CC @ =0xFFFFD800
	adds r0, r0, r1
	str r0, [r4, #4]
	ldr r0, [r4]
	asrs r0, r0, #8
	str r0, [sp]
	ldr r0, [r4, #4]
	asrs r0, r0, #8
	str r0, [sp, #4]
	ldr r0, [r4]
	asrs r0, r0, #8
	str r0, [sp, #8]
	ldr r0, [r4, #4]
	asrs r0, r0, #8
	adds r0, #0x20
	str r0, [sp, #0xc]
	ldr r1, _0806F5D0 @ =sub_807A37C
	mov r0, sp
	bl sub_8078E34
	movs r0, #1
	b _0806F5E6
	.align 2, 0
_0806F5CC: .4byte 0xFFFFD800
_0806F5D0: .4byte sub_807A37C
_0806F5D4:
	ldr r1, [r0, #4]
	movs r0, #0x80
	lsls r0, r0, #0x14
	ands r1, r0
	cmp r1, #0
	bne _0806F5E8
	ldr r0, [r4, #0x14]
	strb r1, [r0]
	movs r0, #0x64
_0806F5E6:
	strh r0, [r4, #0x2c]
_0806F5E8:
	add sp, #0x10
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0806F5F0
sub_0806F5F0: @ 0x0806F5F0
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #0
	mov sb, r0
	ldr r0, _0806F714 @ =gCurTask
	ldr r0, [r0]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r5, r0
	ldr r1, _0806F718 @ =0x030000D0
	adds r1, r1, r5
	mov r8, r1
	adds r0, r4, #0
	bl sub_802C080
	cmp r0, #0
	beq _0806F61E
	b _0806F8F0
_0806F61E:
	ldr r2, _0806F71C @ =0x03000098
	adds r0, r5, r2
	ldr r2, [r0]
	ldr r1, _0806F720 @ =0x0300009C
	adds r0, r5, r1
	ldr r1, [r0]
	ldrh r0, [r6, #0x22]
	cmp r0, #0
	bne _0806F63E
	movs r0, #0x19
	ldrsb r0, [r6, r0]
	cmp r0, #0
	bne _0806F63E
	adds r0, r2, #0
	bl sub_8004D68
_0806F63E:
	ldr r2, _0806F724 @ =gPlayers
	ldr r0, _0806F728 @ =gStageData
	ldrb r1, [r0, #6]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r1, r0, r2
	adds r0, r1, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	cmp r0, #1
	beq _0806F680
	adds r0, r1, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	lsls r1, r1, #0x1e
	lsrs r1, r1, #0x1e
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r2
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	cmp r0, #1
	bne _0806F6B0
_0806F680:
	adds r0, r6, #0
	adds r0, #0x98
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r2, _0806F72C @ =gCamera
	ldr r1, [r2]
	subs r0, r0, r1
	mov r1, r8
	strh r0, [r1, #0x10]
	adds r0, r6, #0
	adds r0, #0x9c
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	mov r2, r8
	strh r0, [r2, #0x12]
	mov r0, r8
	bl sub_807A1DC
	cmp r0, #1
	bne _0806F6B0
	movs r0, #1
	mov sb, r0
_0806F6B0:
	adds r1, r6, #0
	adds r1, #0x94
	movs r3, #0
	movs r0, #0xe2
	strb r0, [r1]
	adds r1, #1
	movs r0, #0xcb
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x1e
	strb r0, [r1]
	adds r0, r6, #0
	adds r0, #0x97
	strb r3, [r0]
	adds r5, r6, #0
	adds r5, #0x70
	ldr r1, [r6]
	asrs r1, r1, #8
	ldr r2, [r6, #4]
	asrs r2, r2, #8
	str r3, [sp]
	adds r0, r5, #0
	adds r3, r4, #0
	bl sub_8020950
	adds r3, r0, #0
	movs r2, #0x80
	lsls r2, r2, #9
	ands r2, r3
	cmp r2, #0
	beq _0806F770
	ldrh r0, [r6, #0x30]
	cmp r0, #1
	bne _0806F748
	ldrb r0, [r6, #0x12]
	cmp r0, #0
	bne _0806F748
	ldr r0, [r4, #4]
	movs r1, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0806F730
	ldr r0, [r4, #0x6c]
	cmp r0, r5
	bne _0806F730
	adds r0, r4, #0
	bl Player_8014550
	b _0806F7FC
	.align 2, 0
_0806F714: .4byte gCurTask
_0806F718: .4byte 0x030000D0
_0806F71C: .4byte 0x03000098
_0806F720: .4byte 0x0300009C
_0806F724: .4byte gPlayers
_0806F728: .4byte gStageData
_0806F72C: .4byte gCamera
_0806F730:
	adds r0, r4, #0
	bl Player_800E67C
	ldr r1, _0806F744 @ =0xFFFFFD00
	adds r0, r1, #0
	ldrh r2, [r4, #0x1a]
	adds r0, r0, r2
	strh r0, [r4, #0x1a]
	b _0806F7FC
	.align 2, 0
_0806F744: .4byte 0xFFFFFD00
_0806F748:
	adds r0, r4, #0
	adds r0, #0xe0
	ldr r2, [r0]
	adds r1, r3, #1
	lsls r1, r1, #0x18
	asrs r1, r1, #0x10
	ldr r0, [r4, #0x14]
	adds r0, r0, r1
	ldr r1, _0806F76C @ =0xFFFFFF00
	ands r0, r1
	subs r0, #1
	str r0, [r4, #0x14]
	movs r0, #0
	strh r0, [r4, #0x1a]
	subs r0, #1
	str r0, [r2, #0x34]
	b _0806F7FC
	.align 2, 0
_0806F76C: .4byte 0xFFFFFF00
_0806F770:
	movs r0, #0x80
	lsls r0, r0, #0xb
	ands r0, r3
	cmp r0, #0
	beq _0806F7B4
	movs r0, #0xff
	lsls r0, r0, #8
	adds r1, r0, #0
	adds r0, r3, #0
	ands r0, r1
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r4, #0x10]
	adds r1, r1, r0
	str r1, [r4, #0x10]
	movs r1, #0x18
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bge _0806F798
	strh r2, [r4, #0x18]
_0806F798:
	strh r2, [r4, #0x1c]
	ldrh r1, [r4, #0x1e]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0806F7B4
	ldr r0, [r4, #0x10]
	ldr r2, _0806F858 @ =0xFFFFFF00
	adds r0, r0, r2
	str r0, [r4, #0x10]
	ldr r0, [r4, #4]
	movs r1, #0x40
	orrs r0, r1
	str r0, [r4, #4]
_0806F7B4:
	movs r0, #0x80
	lsls r0, r0, #0xc
	ands r0, r3
	cmp r0, #0
	beq _0806F7FC
	movs r1, #0xff
	lsls r1, r1, #8
	adds r0, r1, #0
	ands r3, r0
	lsls r1, r3, #0x10
	asrs r1, r1, #0x10
	ldr r0, [r4, #0x10]
	adds r0, r0, r1
	str r0, [r4, #0x10]
	movs r2, #0x18
	ldrsh r0, [r4, r2]
	cmp r0, #0
	ble _0806F7DC
	movs r0, #0
	strh r0, [r4, #0x18]
_0806F7DC:
	movs r0, #0
	strh r0, [r4, #0x1c]
	ldrh r1, [r4, #0x1e]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _0806F7FC
	ldr r0, [r4, #0x10]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r0, r1
	str r0, [r4, #0x10]
	ldr r0, [r4, #4]
	movs r1, #0x40
	orrs r0, r1
	str r0, [r4, #4]
_0806F7FC:
	ldrh r0, [r6, #0x24]
	cmp r0, #0
	bne _0806F808
	ldrh r0, [r6, #0x12]
	cmp r0, #0
	beq _0806F8F0
_0806F808:
	ldrb r0, [r6, #0x12]
	cmp r0, #0
	beq _0806F8E8
	adds r0, r6, #0
	adds r0, #0x98
	ldr r1, [r0]
	asrs r1, r1, #8
	adds r0, #4
	ldr r2, [r0]
	asrs r2, r2, #8
	movs r5, #0
	str r5, [sp]
	mov r0, r8
	adds r3, r4, #0
	bl sub_8020950
	adds r3, r0, #0
	movs r2, #0x80
	lsls r2, r2, #9
	ands r2, r3
	cmp r2, #0
	beq _0806F85C
	adds r0, r4, #0
	adds r0, #0xe0
	ldr r2, [r0]
	adds r1, r3, #1
	lsls r1, r1, #0x18
	asrs r1, r1, #0x10
	ldr r0, [r4, #0x14]
	adds r0, r0, r1
	ldr r1, _0806F858 @ =0xFFFFFF00
	ands r0, r1
	subs r0, #1
	str r0, [r4, #0x14]
	strh r5, [r4, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r2, #0x34]
	b _0806F8E8
	.align 2, 0
_0806F858: .4byte 0xFFFFFF00
_0806F85C:
	movs r0, #0x80
	lsls r0, r0, #0xb
	ands r0, r3
	cmp r0, #0
	beq _0806F8A0
	movs r0, #0xff
	lsls r0, r0, #8
	adds r1, r0, #0
	adds r0, r3, #0
	ands r0, r1
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r4, #0x10]
	adds r1, r1, r0
	str r1, [r4, #0x10]
	movs r1, #0x18
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bge _0806F884
	strh r2, [r4, #0x18]
_0806F884:
	strh r2, [r4, #0x1c]
	ldrh r1, [r4, #0x1e]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0806F8A0
	ldr r0, [r4, #0x10]
	ldr r2, _0806F8EC @ =0xFFFFFF00
	adds r0, r0, r2
	str r0, [r4, #0x10]
	ldr r0, [r4, #4]
	movs r1, #0x40
	orrs r0, r1
	str r0, [r4, #4]
_0806F8A0:
	movs r0, #0x80
	lsls r0, r0, #0xc
	ands r0, r3
	cmp r0, #0
	beq _0806F8E8
	movs r1, #0xff
	lsls r1, r1, #8
	adds r0, r1, #0
	ands r3, r0
	lsls r1, r3, #0x10
	asrs r1, r1, #0x10
	ldr r0, [r4, #0x10]
	adds r0, r0, r1
	str r0, [r4, #0x10]
	movs r2, #0x18
	ldrsh r0, [r4, r2]
	cmp r0, #0
	ble _0806F8C8
	movs r0, #0
	strh r0, [r4, #0x18]
_0806F8C8:
	movs r0, #0
	strh r0, [r4, #0x1c]
	ldrh r1, [r4, #0x1e]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _0806F8E8
	ldr r0, [r4, #0x10]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r0, r1
	str r0, [r4, #0x10]
	ldr r0, [r4, #4]
	movs r1, #0x40
	orrs r0, r1
	str r0, [r4, #4]
_0806F8E8:
	movs r0, #0
	b _0806F9FC
	.align 2, 0
_0806F8EC: .4byte 0xFFFFFF00
_0806F8F0:
	adds r0, r4, #0
	bl sub_802C0D4
	cmp r0, #0
	beq _0806F8FC
	b _0806F9FA
_0806F8FC:
	ldr r0, _0806F968 @ =gStageData
	ldrb r0, [r0, #4]
	subs r0, #6
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #2
	bls _0806F9FA
	ldrh r0, [r6, #0x22]
	cmp r0, #0
	bne _0806F9FA
	adds r7, r6, #0
	adds r7, #0x98
	ldr r1, [r7]
	asrs r1, r1, #8
	adds r5, r6, #0
	adds r5, #0x9c
	ldr r2, [r5]
	asrs r2, r2, #8
	str r4, [sp]
	mov r0, r8
	movs r3, #0
	bl sub_8020E3C
	cmp r0, #0
	beq _0806F9E8
	ldr r0, [r4, #4]
	movs r1, #4
	ands r0, r1
	cmp r0, #0
	beq _0806F9B6
	movs r2, #0x18
	ldrsh r1, [r4, r2]
	rsbs r1, r1, #0
	movs r2, #0x1a
	ldrsh r0, [r4, r2]
	rsbs r0, r0, #0
	lsls r1, r1, #0x10
	asrs r1, r1, #0x11
	strh r1, [r4, #0x18]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x11
	strh r0, [r4, #0x1a]
	movs r0, #0x18
	ldrsh r2, [r4, r0]
	cmp r2, #0
	bge _0806F95A
	rsbs r2, r2, #0
_0806F95A:
	ldr r0, _0806F96C @ =0x0000017F
	cmp r2, r0
	bgt _0806F97A
	cmp r1, #0
	bgt _0806F974
	ldr r0, _0806F970 @ =0x0000FE80
	b _0806F978
	.align 2, 0
_0806F968: .4byte gStageData
_0806F96C: .4byte 0x0000017F
_0806F970: .4byte 0x0000FE80
_0806F974:
	movs r0, #0xc0
	lsls r0, r0, #1
_0806F978:
	strh r0, [r4, #0x18]
_0806F97A:
	movs r2, #0x1a
	ldrsh r1, [r4, r2]
	cmp r1, #0
	bge _0806F984
	rsbs r1, r1, #0
_0806F984:
	ldr r0, _0806F998 @ =0x0000017F
	cmp r1, r0
	bgt _0806F9A6
	movs r1, #0x1a
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bgt _0806F9A0
	ldr r0, _0806F99C @ =0x0000FE80
	b _0806F9A4
	.align 2, 0
_0806F998: .4byte 0x0000017F
_0806F99C: .4byte 0x0000FE80
_0806F9A0:
	movs r0, #0xc0
	lsls r0, r0, #1
_0806F9A4:
	strh r0, [r4, #0x1a]
_0806F9A6:
	movs r2, #0x1a
	ldrsh r1, [r4, r2]
	ldr r0, [r4, #0x14]
	adds r0, r0, r1
	str r0, [r4, #0x14]
	movs r0, #0x18
	ldrsh r1, [r4, r0]
	b _0806F9CE
_0806F9B6:
	movs r1, #0x1c
	ldrsh r0, [r4, r1]
	rsbs r0, r0, #0
	strh r0, [r4, #0x1c]
	movs r2, #0x1c
	ldrsh r0, [r4, r2]
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	strh r0, [r4, #0x1c]
	movs r0, #0x1c
	ldrsh r1, [r4, r0]
_0806F9CE:
	ldr r0, [r4, #0x10]
	adds r0, r0, r1
	str r0, [r4, #0x10]
	movs r1, #0x30
	ldrsh r0, [r4, r1]
	cmp r0, #0xd4
	bne _0806F9E2
	adds r0, r4, #0
	bl Player_800DB30
_0806F9E2:
	movs r2, #1
	mov sb, r2
	b _0806F9FA
_0806F9E8:
	ldr r1, [r7]
	asrs r1, r1, #8
	ldr r2, [r5]
	asrs r2, r2, #8
	str r4, [sp]
	mov r0, r8
	movs r3, #0
	bl sub_8020CE0
_0806F9FA:
	mov r0, sb
_0806F9FC:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0806FA0C
sub_0806FA0C: @ 0x0806FA0C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	mov r8, r0
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r2, _0806FAB8 @ =gCamera
	ldr r1, [r2]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	mov r0, r8
	ldr r4, [r0, #4]
	asrs r4, r4, #8
	ldr r0, [r2, #4]
	subs r4, r4, r0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	mov r7, r8
	adds r7, #0x48
	strh r6, [r7, #0x10]
	strh r4, [r7, #0x12]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	ldr r0, [r7, #8]
	ldr r5, _0806FABC @ =0xFFFFFBFF
	ands r0, r5
	str r0, [r7, #8]
	adds r0, r7, #0
	bl DisplaySprite
	ldr r0, [r7, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	mov sb, r1
	orrs r0, r1
	str r0, [r7, #8]
	adds r0, r7, #0
	bl DisplaySprite
	adds r7, #0x28
	strh r6, [r7, #0x10]
	strh r4, [r7, #0x12]
	ldr r0, [r7, #8]
	ands r0, r5
	str r0, [r7, #8]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	bl DisplaySprite
	ldr r0, [r7, #8]
	mov r1, sb
	orrs r0, r1
	str r0, [r7, #8]
	adds r0, r7, #0
	bl DisplaySprite
	mov r0, r8
	bl sub_08070370
	mov r0, r8
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _0806FAEA
	movs r4, #0
	mov r5, r8
	adds r5, #0x40
	ldr r0, _0806FAC0 @ =0x00065EFF
	mov r8, r0
	movs r7, #0
_0806FAA2:
	movs r6, #0
	lsls r1, r4, #2
	adds r0, r5, r1
	ldr r2, [r0]
	ldr r0, [r2, #0x10]
	cmp r0, r8
	ble _0806FAC8
	ldr r0, _0806FAC4 @ =0x00065F00
	str r0, [r2, #0x10]
	movs r6, #1
	b _0806FAD6
	.align 2, 0
_0806FAB8: .4byte gCamera
_0806FABC: .4byte 0xFFFFFBFF
_0806FAC0: .4byte 0x00065EFF
_0806FAC4: .4byte 0x00065F00
_0806FAC8:
	ldr r3, _0806FAF8 @ =0x00054100
	cmp r0, r3
	bgt _0806FAD2
	str r3, [r2, #0x10]
	movs r6, #1
_0806FAD2:
	cmp r6, #0
	beq _0806FAE0
_0806FAD6:
	adds r0, r5, r1
	ldr r1, [r0]
	strh r7, [r1, #0x18]
	ldr r0, [r0]
	strh r7, [r0, #0x1c]
_0806FAE0:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #1
	bls _0806FAA2
_0806FAEA:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806FAF8: .4byte 0x00054100

	thumb_func_start sub_806FAFC
sub_806FAFC: @ 0x0806FAFC
	push {lr}
	adds r2, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	cmp r1, #1
	beq _0806FB16
	cmp r1, #1
	bgt _0806FB12
	cmp r1, #0
	beq _0806FB16
	b _0806FB22
_0806FB12:
	cmp r1, #2
	bne _0806FB22
_0806FB16:
	adds r0, r2, #0
	adds r0, #0x62
	strb r1, [r0]
	adds r0, #0x28
	strb r1, [r0]
	strh r1, [r2, #0x30]
_0806FB22:
	adds r1, r2, #0
	adds r1, #0x63
	movs r0, #0xff
	strb r0, [r1]
	adds r1, #0x28
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806FB38
sub_806FB38: @ 0x0806FB38
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r4, r0, #0
	lsls r1, r1, #0x18
	lsrs r6, r1, #0x18
	ldr r0, _0806FBA4 @ =sub_806FC2C
	movs r2, #0x8c
	lsls r2, r2, #6
	movs r1, #0
	str r1, [sp]
	movs r1, #0x3c
	movs r3, #0
	bl TaskCreate
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r3, r1, r0
	adds r0, #4
	adds r5, r1, r0
	str r4, [r3]
	ldr r2, [r4, #0x40]
	lsls r1, r6, #1
	adds r1, r1, r6
	lsls r1, r1, #6
	ldr r7, _0806FBA8 @ =0xFFFFFF00
	adds r0, r7, #0
	subs r0, r0, r1
	strh r0, [r3, #0x34]
	ldr r1, [r2, #0x10]
	ldr r0, [r4]
	cmp r1, r0
	ble _0806FB82
	movs r1, #0x34
	ldrsh r0, [r3, r1]
	rsbs r0, r0, #0
	strh r0, [r3, #0x34]
_0806FB82:
	movs r0, #0xfc
	lsls r0, r0, #8
	strh r0, [r3, #0x36]
	movs r2, #0x34
	ldrsh r0, [r3, r2]
	cmp r0, #0
	blt _0806FBB0
	ldrb r1, [r4, #0x1b]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0806FBC4
	ldr r0, [r4]
	ldr r7, _0806FBAC @ =0xFFFFF000
	adds r0, r0, r7
	b _0806FBC6
	.align 2, 0
_0806FBA4: .4byte sub_806FC2C
_0806FBA8: .4byte 0xFFFFFF00
_0806FBAC: .4byte 0xFFFFF000
_0806FBB0:
	ldrb r1, [r4, #0x1b]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0806FBC4
	ldr r0, [r4]
	movs r1, #0x80
	lsls r1, r1, #5
	adds r0, r0, r1
	b _0806FBC6
_0806FBC4:
	ldr r0, [r4]
_0806FBC6:
	str r0, [r3, #0x2c]
	ldr r0, [r4, #4]
	ldr r2, _0806FC24 @ =0xFFFFF800
	adds r0, r0, r2
	str r0, [r3, #0x30]
	adds r0, r3, #0
	adds r0, #0x38
	movs r2, #0
	strb r2, [r0]
	adds r1, r3, #0
	adds r1, #0x39
	movs r0, #0x18
	strb r0, [r1]
	lsls r1, r6, #9
	ldr r0, [r4, #0x38]
	adds r0, r0, r1
	str r0, [r5]
	movs r1, #0
	ldr r0, _0806FC28 @ =0x0000049F
	strh r0, [r5, #0xc]
	strb r1, [r5, #0x1a]
	subs r0, #0x1f
	strh r0, [r5, #0x14]
	strh r2, [r5, #0xe]
	strh r2, [r5, #0x16]
	movs r0, #0xff
	strb r0, [r5, #0x1b]
	movs r0, #0x10
	strb r0, [r5, #0x1c]
	strb r1, [r5, #0x1f]
	subs r0, #0x11
	str r0, [r5, #0x20]
	movs r1, #0x80
	lsls r1, r1, #5
	str r1, [r5, #8]
	movs r7, #0x34
	ldrsh r0, [r3, r7]
	cmp r0, #0
	blt _0806FC1C
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r0, r1
	str r0, [r5, #8]
_0806FC1C:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806FC24: .4byte 0xFFFFF800
_0806FC28: .4byte 0x0000049F

	thumb_func_start sub_806FC2C
sub_806FC2C: @ 0x0806FC2C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	movs r0, #0
	str r0, [sp, #8]
	ldr r0, _0806FC8C @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r0, r0, r1
	mov r8, r0
	ldr r6, [r0]
	ldr r2, _0806FC90 @ =0x03000004
	adds r5, r1, r2
	ldrb r0, [r6, #0x1c]
	cmp r0, #0
	bne _0806FC72
	ldrh r0, [r5, #0xc]
	ldr r1, _0806FC94 @ =0x0000053A
	cmp r0, r1
	beq _0806FC7A
	movs r0, #0
	strh r1, [r5, #0xc]
	strb r0, [r5, #0x1a]
	ldr r0, _0806FC98 @ =0x0000FFFF
	strh r0, [r5, #0x18]
	movs r0, #0xff
	strb r0, [r5, #0x1b]
	movs r0, #0x8a
	bl m4aSongNumStart
_0806FC72:
	ldrh r1, [r5, #0xc]
	ldr r0, _0806FC94 @ =0x0000053A
	cmp r1, r0
	bne _0806FC9C
_0806FC7A:
	mov r1, r8
	adds r1, #0x39
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806FCBA
	b _0806FCD8
	.align 2, 0
_0806FC8C: .4byte gCurTask
_0806FC90: .4byte 0x03000004
_0806FC94: .4byte 0x0000053A
_0806FC98: .4byte 0x0000FFFF
_0806FC9C:
	mov r1, r8
	ldrh r0, [r1, #0x36]
	adds r0, #0x18
	strh r0, [r1, #0x36]
	movs r2, #0x34
	ldrsh r1, [r1, r2]
	mov r2, r8
	ldr r0, [r2, #0x2c]
	adds r0, r0, r1
	str r0, [r2, #0x2c]
	movs r0, #0x36
	ldrsh r1, [r2, r0]
	ldr r0, [r2, #0x30]
	adds r0, r0, r1
	str r0, [r2, #0x30]
_0806FCBA:
	mov r1, r8
	ldr r0, [r1, #0x2c]
	lsls r0, r0, #8
	lsrs r0, r0, #0x10
	mov sl, r0
	ldr r0, [r1, #0x30]
	lsls r0, r0, #8
	lsrs r2, r0, #0x10
	str r2, [sp, #0xc]
	asrs r3, r0, #0x10
	ldr r0, _0806FCE4 @ =gCamera
	ldr r0, [r0, #0x14]
	adds r0, #0x20
	cmp r3, r0
	ble _0806FCEC
_0806FCD8:
	ldr r0, _0806FCE8 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
	b _0806FE84
	.align 2, 0
_0806FCE4: .4byte gCamera
_0806FCE8: .4byte gCurTask
_0806FCEC:
	mov r4, r8
	adds r4, #0x38
	ldrb r2, [r4]
	cmp r2, #0
	bne _0806FD36
	ldrh r1, [r5, #0xc]
	ldr r0, _0806FE28 @ =0x0000053A
	cmp r1, r0
	beq _0806FD36
	mov r0, sl
	lsls r1, r0, #0x10
	asrs r1, r1, #0x10
	str r2, [sp]
	ldr r0, _0806FE2C @ =sub_805217C
	str r0, [sp, #4]
	adds r0, r3, #0
	movs r2, #1
	movs r3, #8
	bl sub_80517FC
	cmp r0, #0
	bgt _0806FD36
	lsls r1, r0, #0x18
	asrs r1, r1, #0x10
	mov r2, r8
	ldr r0, [r2, #0x30]
	adds r0, r0, r1
	str r0, [r2, #0x30]
	movs r0, #0x36
	ldrsh r1, [r2, r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	rsbs r0, r0, #0
	asrs r0, r0, #3
	strh r0, [r2, #0x36]
	movs r0, #1
	strb r0, [r4]
_0806FD36:
	movs r1, #0
	mov sb, r1
	adds r6, #0x40
	str r6, [sp, #0x10]
_0806FD3E:
	mov r2, sb
	lsls r0, r2, #2
	ldr r1, [sp, #0x10]
	adds r0, r1, r0
	ldr r4, [r0]
	adds r0, r4, #0
	bl sub_802C080
	cmp r0, #0
	bne _0806FE4E
	ldrh r0, [r5, #0xc]
	ldr r2, _0806FE28 @ =0x0000053A
	cmp r0, r2
	beq _0806FE4E
	movs r0, #0x10
	ldrsh r1, [r5, r0]
	ldr r3, _0806FE30 @ =gCamera
	ldr r0, [r3]
	adds r0, r0, r1
	lsls r0, r0, #8
	movs r1, #0x12
	ldrsh r2, [r5, r1]
	ldr r1, [r3, #4]
	adds r1, r1, r2
	lsls r1, r1, #8
	bl sub_8004D68
	ldr r2, _0806FE34 @ =gPlayers
	ldr r0, _0806FE38 @ =gStageData
	ldrb r1, [r0, #6]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r1, r0, r2
	adds r0, r1, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	cmp r0, #1
	beq _0806FDB6
	adds r0, r1, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	lsls r1, r1, #0x1e
	lsrs r1, r1, #0x1e
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r2
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	cmp r0, #1
	bne _0806FDC4
_0806FDB6:
	adds r0, r5, #0
	bl sub_807A1DC
	cmp r0, #1
	bne _0806FDC4
	movs r2, #1
	str r2, [sp, #8]
_0806FDC4:
	mov r1, sl
	lsls r0, r1, #0x10
	asrs r7, r0, #0x10
	ldr r2, [sp, #0xc]
	lsls r0, r2, #0x10
	asrs r6, r0, #0x10
	str r4, [sp]
	adds r0, r5, #0
	adds r1, r7, #0
	adds r2, r6, #0
	movs r3, #0
	bl sub_8020E3C
	cmp r0, #0
	beq _0806FDEC
	ldr r0, [r4, #4]
	movs r1, #0x10
	ands r0, r1
	cmp r0, #0
	beq _0806FDF2
_0806FDEC:
	ldr r0, [sp, #8]
	cmp r0, #1
	bne _0806FE40
_0806FDF2:
	ldr r0, [r4, #4]
	movs r1, #4
	ands r0, r1
	cmp r0, #0
	beq _0806FE0E
	movs r1, #0x1a
	ldrsh r0, [r4, r1]
	cmp r0, #0
	ble _0806FE0E
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	rsbs r0, r0, #0
	strh r0, [r4, #0x1a]
_0806FE0E:
	movs r0, #0
	ldr r1, _0806FE28 @ =0x0000053A
	strh r1, [r5, #0xc]
	strb r0, [r5, #0x1a]
	ldr r0, _0806FE3C @ =0x0000FFFF
	strh r0, [r5, #0x18]
	movs r0, #0xff
	strb r0, [r5, #0x1b]
	movs r0, #0x8a
	bl m4aSongNumStart
	b _0806FE4E
	.align 2, 0
_0806FE28: .4byte 0x0000053A
_0806FE2C: .4byte sub_805217C
_0806FE30: .4byte gCamera
_0806FE34: .4byte gPlayers
_0806FE38: .4byte gStageData
_0806FE3C: .4byte 0x0000FFFF
_0806FE40:
	str r4, [sp]
	adds r0, r5, #0
	adds r1, r7, #0
	adds r2, r6, #0
	movs r3, #0
	bl sub_8020CE0
_0806FE4E:
	mov r0, sb
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov sb, r0
	cmp r0, #1
	bhi _0806FE5E
	b _0806FD3E
_0806FE5E:
	mov r2, r8
	ldr r0, [r2, #0x2c]
	asrs r0, r0, #8
	ldr r2, _0806FE94 @ =gCamera
	ldr r1, [r2]
	subs r0, r0, r1
	strh r0, [r5, #0x10]
	mov r1, r8
	ldr r0, [r1, #0x30]
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	strh r0, [r5, #0x12]
	adds r0, r5, #0
	bl UpdateSpriteAnimation
	adds r0, r5, #0
	bl DisplaySprite
_0806FE84:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806FE94: .4byte gCamera

	thumb_func_start sub_0806FE98
sub_0806FE98: @ 0x0806FE98
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	mov r8, r0
	ldr r0, _0806FF1C @ =sub_806FFCC
	movs r1, #0x9b
	lsls r1, r1, #2
	movs r2, #0x8c
	lsls r2, r2, #6
	movs r3, #0
	str r3, [sp]
	bl TaskCreate
	ldrh r2, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r0, r2, r0
	str r0, [sp, #0xc]
	ldr r0, _0806FF20 @ =0x03000268
	adds r1, r2, r0
	movs r0, #0x96
	strb r0, [r1]
	mov r1, r8
	ldr r0, [r1]
	movs r3, #0xa0
	lsls r3, r3, #5
	adds r3, r0, r3
	str r3, [sp, #4]
	ldr r0, [r1, #4]
	ldr r7, _0806FF24 @ =0xFFFFD800
	adds r7, r0, r7
	str r7, [sp, #8]
	movs r5, #0
	ldr r0, _0806FF28 @ =0x03000148
	adds r0, r0, r2
	mov sl, r0
	ldr r1, _0806FF2C @ =0x0300014C
	adds r1, r1, r2
	mov sb, r1
_0806FEEC:
	lsls r1, r5, #3
	mov r2, sl
	adds r0, r2, r1
	ldr r3, [sp, #4]
	str r3, [r0]
	add r1, sb
	ldr r7, [sp, #8]
	str r7, [r1]
	lsls r1, r5, #2
	ldr r2, [sp, #0xc]
	movs r3, #0x82
	lsls r3, r3, #2
	adds r0, r2, r3
	adds r3, r0, r1
	adds r0, r5, #0
	subs r0, #0x10
	lsls r2, r0, #4
	movs r0, #1
	ands r0, r5
	cmp r0, #0
	beq _0806FF30
	adds r0, r2, #0
	subs r0, #0x10
	b _0806FF34
	.align 2, 0
_0806FF1C: .4byte sub_806FFCC
_0806FF20: .4byte 0x03000268
_0806FF24: .4byte 0xFFFFD800
_0806FF28: .4byte 0x03000148
_0806FF2C: .4byte 0x0300014C
_0806FF30:
	adds r0, r2, #0
	adds r0, #0x10
_0806FF34:
	movs r7, #0
	mov ip, r7
	movs r6, #0
	strh r0, [r3]
	ldr r0, [sp, #0xc]
	ldr r3, _0806FFC0 @ =0x0000020A
	adds r2, r0, r3
	adds r2, r2, r1
	movs r0, #2
	ands r0, r5
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	lsls r0, r0, #5
	ldr r7, _0806FFC4 @ =0xFFFFFE00
	adds r1, r7, #0
	subs r1, r1, r0
	movs r0, #1
	ands r0, r5
	lsls r0, r0, #6
	subs r1, r1, r0
	strh r1, [r2]
	movs r4, #7
	ands r4, r5
	adds r2, r4, #0
	lsls r0, r2, #2
	adds r0, r0, r2
	lsls r0, r0, #3
	adds r0, #8
	ldr r1, [sp, #0xc]
	adds r3, r1, r0
	lsls r1, r2, #5
	mov r7, r8
	ldr r0, [r7, #0x3c]
	adds r0, r0, r1
	str r0, [r3]
	ldr r0, _0806FFC8 @ =0x000004D4
	strh r0, [r3, #0xc]
	strb r4, [r3, #0x1a]
	cmp r2, #5
	bls _0806FF88
	subs r0, r4, #6
	strb r0, [r3, #0x1a]
_0806FF88:
	strh r6, [r3, #0x14]
	strh r6, [r3, #0xe]
	strh r6, [r3, #0x16]
	movs r0, #0xff
	strb r0, [r3, #0x1b]
	movs r0, #0x10
	strb r0, [r3, #0x1c]
	mov r0, ip
	strb r0, [r3, #0x1f]
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r3, #0x20]
	movs r0, #0x80
	lsls r0, r0, #5
	str r0, [r3, #8]
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #0x17
	bls _0806FEEC
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806FFC0: .4byte 0x0000020A
_0806FFC4: .4byte 0xFFFFFE00
_0806FFC8: .4byte 0x000004D4

	thumb_func_start sub_806FFCC
sub_806FFCC: @ 0x0806FFCC
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	ldr r2, _08070004 @ =gCurTask
	ldr r0, [r2]
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r1, r1, r0
	mov sb, r1
	ldr r1, _08070008 @ =0x03000148
	adds r6, r0, r1
	adds r1, #0xc0
	adds r4, r0, r1
	adds r1, #0x60
	adds r0, r0, r1
	ldrb r1, [r0]
	subs r1, #1
	strb r1, [r0]
	lsls r0, r1, #0x18
	cmp r0, #0
	bne _0807000C
	ldr r0, [r2]
	bl TaskDestroy
	b _08070126
	.align 2, 0
_08070004: .4byte gCurTask
_08070008: .4byte 0x03000148
_0807000C:
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x1d
	bhi _0807001E
	movs r0, #2
	ands r1, r0
	cmp r1, #0
	beq _0807001E
	b _08070126
_0807001E:
	movs r7, #0
	ldr r2, _08070134 @ =gCamera
	mov r8, r2
_08070024:
	lsls r0, r7, #2
	adds r0, r0, r7
	lsls r0, r0, #3
	adds r0, #8
	mov r1, sb
	adds r5, r1, r0
	movs r2, #0
	ldrsh r1, [r4, r2]
	ldr r0, [r6]
	adds r0, r0, r1
	stm r6!, {r0}
	asrs r0, r0, #8
	mov r2, r8
	ldr r1, [r2]
	subs r0, r0, r1
	strh r0, [r5, #0x10]
	adds r4, #2
	ldrh r0, [r4]
	adds r0, #7
	strh r0, [r4]
	movs r0, #0
	ldrsh r1, [r4, r0]
	ldr r0, [r6]
	adds r0, r0, r1
	stm r6!, {r0}
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	strh r0, [r5, #0x12]
	adds r4, #2
	adds r0, r5, #0
	bl UpdateSpriteAnimation
	adds r0, r5, #0
	bl DisplaySprite
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #7
	bls _08070024
	cmp r7, #0xf
	bhi _080700CE
	ldr r2, _08070134 @ =gCamera
_0807007C:
	movs r1, #7
	ands r1, r7
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, #8
	mov r1, sb
	adds r5, r1, r0
	movs r0, #0
	ldrsh r1, [r4, r0]
	ldr r0, [r6]
	adds r0, r0, r1
	stm r6!, {r0}
	asrs r0, r0, #8
	ldr r1, [r2]
	subs r0, r0, r1
	strh r0, [r5, #0x10]
	adds r4, #2
	ldrh r0, [r4]
	adds r0, #8
	strh r0, [r4]
	movs r0, #0
	ldrsh r1, [r4, r0]
	ldr r0, [r6]
	adds r0, r0, r1
	stm r6!, {r0}
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	strh r0, [r5, #0x12]
	adds r4, #2
	adds r0, r5, #0
	str r2, [sp]
	bl DisplaySprite
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	ldr r2, [sp]
	cmp r7, #0xf
	bls _0807007C
_080700CE:
	cmp r7, #0x17
	bhi _08070126
	ldr r2, _08070134 @ =gCamera
_080700D4:
	movs r1, #7
	ands r1, r7
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, #8
	mov r1, sb
	adds r5, r1, r0
	movs r0, #0
	ldrsh r1, [r4, r0]
	ldr r0, [r6]
	adds r0, r0, r1
	stm r6!, {r0}
	asrs r0, r0, #8
	ldr r1, [r2]
	subs r0, r0, r1
	strh r0, [r5, #0x10]
	adds r4, #2
	ldrh r0, [r4]
	adds r0, #7
	strh r0, [r4]
	movs r0, #0
	ldrsh r1, [r4, r0]
	ldr r0, [r6]
	adds r0, r0, r1
	stm r6!, {r0}
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	strh r0, [r5, #0x12]
	adds r4, #2
	adds r0, r5, #0
	str r2, [sp]
	bl DisplaySprite
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	ldr r2, [sp]
	cmp r7, #0x17
	bls _080700D4
_08070126:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08070134: .4byte gCamera

	thumb_func_start sub_08070138
sub_08070138: @ 0x08070138
	push {r4, r5, r6, lr}
	mov r6, sb
	mov r5, r8
	push {r5, r6}
	adds r4, r0, #0
	movs r0, #0x40
	bl VramMalloc
	adds r3, r4, #0
	adds r3, #0xc8
	str r0, [r3]
	movs r0, #0
	mov sb, r0
	movs r5, #0
	strh r5, [r4, #0x22]
	strh r5, [r4, #0x24]
	movs r0, #1
	strh r0, [r4, #0x26]
	adds r1, r4, #0
	adds r1, #0xa0
	ldr r0, _080701F4 @ =0xFFFFE800
	str r0, [r1]
	adds r2, r4, #0
	adds r2, #0xa4
	ldr r0, _080701F8 @ =0xFFFFE400
	str r0, [r2]
	adds r6, r4, #0
	adds r6, #0x98
	ldr r0, [r4]
	ldr r1, [r1]
	adds r0, r0, r1
	str r0, [r6]
	movs r1, #0x9c
	adds r1, r1, r4
	mov r8, r1
	ldr r0, [r4, #4]
	ldr r1, [r2]
	adds r0, r0, r1
	mov r2, r8
	str r0, [r2]
	adds r0, r4, #0
	adds r0, #0xd0
	adds r4, #0xf8
	ldr r1, [r3]
	str r1, [r0]
	ldr r1, _080701FC @ =0x000004CB
	strh r1, [r0, #0xc]
	mov r1, sb
	strb r1, [r0, #0x1a]
	movs r1, #0xa0
	lsls r1, r1, #2
	strh r1, [r0, #0x14]
	strh r5, [r0, #0xe]
	strh r5, [r0, #0x16]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	mov r2, sb
	strb r2, [r0, #0x1f]
	subs r1, #0x11
	str r1, [r0, #0x20]
	ldr r1, _08070200 @ =0x0000103E
	str r1, [r0, #8]
	ldr r1, [r6]
	asrs r1, r1, #8
	ldr r3, _08070204 @ =gCamera
	ldr r2, [r3]
	subs r1, r1, r2
	strh r1, [r0, #0x10]
	mov r2, r8
	ldr r1, [r2]
	asrs r1, r1, #8
	ldr r2, [r3, #4]
	subs r1, r1, r2
	strh r1, [r0, #0x12]
	strh r5, [r4]
	ldrh r1, [r0, #0x10]
	strh r1, [r4, #6]
	ldrh r1, [r0, #0x12]
	strh r1, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #1
	strh r1, [r4, #2]
	strh r1, [r4, #4]
	bl UpdateSpriteAnimation
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080701F4: .4byte 0xFFFFE800
_080701F8: .4byte 0xFFFFE400
_080701FC: .4byte 0x000004CB
_08070200: .4byte 0x0000103E
_08070204: .4byte gCamera

	thumb_func_start sub_8070208
sub_8070208: @ 0x08070208
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x24]
	cmp r0, #0x78
	beq _08070284
	cmp r0, #0x78
	bgt _0807022E
	cmp r0, #0x64
	beq _0807024A
	adds r5, r4, #0
	adds r5, #0xa0
	cmp r0, #0x64
	bgt _08070224
	b _08070350
_08070224:
	cmp r0, #0x65
	beq _08070252
	cmp r0, #0x6e
	beq _08070262
	b _08070350
_0807022E:
	cmp r0, #0xd2
	beq _080702DE
	cmp r0, #0xd2
	bgt _08070240
	cmp r0, #0x82
	beq _0807029C
	cmp r0, #0xc8
	beq _080702CC
	b _0807034C
_08070240:
	cmp r0, #0xdc
	beq _080702F4
	cmp r0, #0xe6
	beq _0807031C
	b _0807034C
_0807024A:
	adds r0, r4, #0
	movs r1, #1
	bl sub_806FAFC
_08070252:
	adds r0, r4, #0
	movs r1, #2
	bl sub_8071968
	movs r0, #0x1e
	strh r0, [r4, #0x26]
	movs r0, #0x6e
	b _0807034A
_08070262:
	ldrh r0, [r4, #0x26]
	subs r0, #1
	strh r0, [r4, #0x26]
	lsls r0, r0, #0x10
	asrs r6, r0, #0x10
	cmp r6, #0
	bne _08070350
	adds r0, r4, #0
	movs r1, #0
	bl sub_8071968
	strh r6, [r4, #0x22]
	movs r0, #0x78
	strh r0, [r4, #0x24]
	bl sub_807A468
	b _08070350
_08070284:
	ldrh r0, [r4, #0x22]
	adds r0, #0x10
	strh r0, [r4, #0x22]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	adds r5, r4, #0
	adds r5, #0xa0
	cmp r0, #0xff
	bls _08070350
	movs r0, #0x82
	strh r0, [r4, #0x24]
	b _08070350
_0807029C:
	ldrh r1, [r4, #0x22]
	movs r0, #0x80
	lsls r0, r0, #2
	cmp r1, r0
	beq _080702AC
	adds r0, r1, #0
	adds r0, #0x10
	strh r0, [r4, #0x22]
_080702AC:
	adds r0, r4, #0
	adds r0, #0xa0
	ldr r1, [r0]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r1, r2
	str r1, [r0]
	ldr r2, _080702C8 @ =0xFFFFF800
	adds r5, r0, #0
	cmp r1, r2
	blt _08070350
	movs r0, #0
	strh r0, [r4, #0x24]
	b _08070350
	.align 2, 0
_080702C8: .4byte 0xFFFFF800
_080702CC:
	movs r0, #0x3c
	strh r0, [r4, #0x26]
	movs r0, #0xd2
	strh r0, [r4, #0x24]
	adds r0, r4, #0
	movs r1, #2
	bl sub_806FAFC
	b _0807034C
_080702DE:
	ldrh r0, [r4, #0x26]
	subs r0, #1
	strh r0, [r4, #0x26]
	lsls r0, r0, #0x10
	adds r5, r4, #0
	adds r5, #0xa0
	cmp r0, #0
	bne _08070350
	movs r0, #0xdc
	strh r0, [r4, #0x24]
	b _08070350
_080702F4:
	ldrh r0, [r4, #0x22]
	subs r0, #0x10
	strh r0, [r4, #0x22]
	adds r1, r4, #0
	adds r1, #0xa0
	ldr r0, [r1]
	ldr r2, _08070314 @ =0xFFFFFF00
	adds r0, r0, r2
	str r0, [r1]
	ldr r2, _08070318 @ =0xFFFFE800
	adds r5, r1, #0
	cmp r0, r2
	bgt _08070350
	movs r0, #0xe6
	strh r0, [r4, #0x24]
	b _08070350
	.align 2, 0
_08070314: .4byte 0xFFFFFF00
_08070318: .4byte 0xFFFFE800
_0807031C:
	ldrh r0, [r4, #0x22]
	subs r0, #0x10
	strh r0, [r4, #0x22]
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	adds r5, r4, #0
	adds r5, #0xa0
	cmp r6, #0
	bne _08070350
	adds r0, r4, #0
	movs r1, #0
	bl sub_806FAFC
	ldrh r0, [r4, #0x10]
	cmp r0, #1
	beq _08070346
	movs r0, #1
	strh r0, [r4, #0x10]
	subs r0, #9
	str r0, [r4, #8]
	str r6, [r4, #0xc]
_08070346:
	movs r0, #0
	strb r0, [r4, #0x13]
_0807034A:
	strh r0, [r4, #0x24]
_0807034C:
	adds r5, r4, #0
	adds r5, #0xa0
_08070350:
	adds r2, r4, #0
	adds r2, #0x98
	ldr r0, [r4]
	ldr r1, [r5]
	adds r0, r0, r1
	str r0, [r2]
	adds r2, #4
	adds r1, r4, #0
	adds r1, #0xa4
	ldr r0, [r4, #4]
	ldr r1, [r1]
	adds r0, r0, r1
	str r0, [r2]
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_08070370
sub_08070370: @ 0x08070370
	push {r4, r5, lr}
	adds r3, r0, #0
	adds r4, r3, #0
	adds r4, #0xd0
	adds r5, r3, #0
	adds r5, #0xf8
	adds r0, #0x98
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r2, _080703CC @ =gCamera
	ldr r1, [r2]
	subs r0, r0, r1
	strh r0, [r4, #0x10]
	adds r0, r3, #0
	adds r0, #0x9c
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	strh r0, [r4, #0x12]
	ldrh r1, [r4, #0xc]
	ldr r0, _080703D0 @ =0x000004CB
	cmp r1, r0
	bne _080703BA
	ldrb r0, [r4, #0x1a]
	cmp r0, #0
	bne _080703BA
	ldrh r0, [r3, #0x22]
	strh r0, [r5]
	ldrh r0, [r4, #0x10]
	strh r0, [r5, #6]
	ldrh r0, [r4, #0x12]
	strh r0, [r5, #8]
	adds r0, r4, #0
	adds r1, r5, #0
	bl TransformSprite
_080703BA:
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080703CC: .4byte gCamera
_080703D0: .4byte 0x000004CB

	thumb_func_start sub_80703D4
sub_80703D4: @ 0x080703D4
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	ldr r0, _08070400 @ =gCurTask
	ldr r2, [r0]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r1, r0
	ldr r4, [r6]
	movs r0, #0x82
	lsls r0, r0, #1
	adds r7, r4, r0
	ldrh r0, [r6, #4]
	cmp r0, #0
	beq _080703F8
	ldrb r0, [r4, #0x1c]
	cmp r0, #0
	bne _08070404
_080703F8:
	adds r0, r2, #0
	bl TaskDestroy
	b _08070448
	.align 2, 0
_08070400: .4byte gCurTask
_08070404:
	adds r0, r4, #0
	bl sub_8071034
	ldrb r0, [r4, #0x12]
	cmp r0, #0
	bne _08070442
	adds r5, r4, #0
	adds r5, #0xa8
	ldr r1, [r5]
	asrs r1, r1, #8
	adds r4, #0xac
	ldr r2, [r4]
	asrs r2, r2, #8
	ldr r0, [r6]
	ldr r0, [r0, #0x40]
	str r0, [sp]
	adds r0, r7, #0
	movs r3, #0
	bl sub_8020CE0
	ldr r1, [r5]
	asrs r1, r1, #8
	ldr r2, [r4]
	asrs r2, r2, #8
	ldr r0, [r6]
	ldr r0, [r0, #0x44]
	str r0, [sp]
	adds r0, r7, #0
	movs r3, #0
	bl sub_8020CE0
_08070442:
	ldr r0, [r6]
	bl sub_080711C8
_08070448:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08070450
sub_08070450: @ 0x08070450
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	lsls r1, r1, #0x18
	lsrs r6, r1, #0x18
	ldr r7, [r0]
	adds r0, r7, #0
	adds r0, #0xcc
	ldr r5, [r0]
	cmp r6, #1
	beq _08070568
	cmp r6, #1
	bgt _08070476
	cmp r6, #0
	beq _0807047E
	b _08070782
_08070476:
	cmp r6, #2
	bne _0807047C
	b _080706BC
_0807047C:
	b _08070782
_0807047E:
	strh r6, [r7, #0x28]
	movs r0, #0xa8
	adds r0, r0, r7
	mov sb, r0
	ldr r0, [r7]
	movs r1, #0x80
	lsls r1, r1, #4
	adds r0, r0, r1
	mov r2, sb
	str r0, [r2]
	adds r4, r7, #0
	adds r4, #0xac
	str r4, [sp]
	ldr r0, [r7, #4]
	ldr r1, _08070558 @ =0xFFFFE000
	adds r0, r0, r1
	str r0, [r4]
	movs r2, #0x82
	lsls r2, r2, #1
	adds r3, r7, r2
	movs r4, #0x96
	lsls r4, r4, #1
	adds r2, r7, r4
	str r5, [r3]
	ldr r0, _0807055C @ =0x000004CF
	strh r0, [r3, #0xc]
	movs r0, #0
	strb r0, [r3, #0x1a]
	movs r0, #0xb0
	lsls r0, r0, #2
	strh r0, [r3, #0x14]
	strh r6, [r3, #0xe]
	strh r6, [r3, #0x16]
	movs r0, #0xff
	strb r0, [r3, #0x1b]
	movs r1, #0x10
	strb r1, [r3, #0x1c]
	movs r4, #0
	strb r4, [r3, #0x1f]
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r3, #0x20]
	movs r1, #0x80
	lsls r1, r1, #5
	str r1, [sp, #4]
	ldr r0, _08070560 @ =0x0000103F
	str r0, [r3, #8]
	mov r4, sb
	ldr r0, [r4]
	asrs r0, r0, #8
	ldr r1, _08070564 @ =gCamera
	mov sl, r1
	ldr r1, [r1]
	subs r0, r0, r1
	strh r0, [r3, #0x10]
	ldr r4, [sp]
	ldr r0, [r4]
	asrs r0, r0, #8
	mov r4, sl
	ldr r1, [r4, #4]
	subs r0, r0, r1
	strh r0, [r3, #0x12]
	strh r6, [r2]
	ldrh r0, [r3, #0x10]
	strh r0, [r2, #6]
	ldrh r0, [r3, #0x12]
	strh r0, [r2, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r2, #2]
	strh r0, [r2, #4]
	adds r0, r3, #0
	bl UpdateSpriteAnimation
	movs r0, #0x80
	lsls r0, r0, #4
	adds r5, r5, r0
	movs r1, #0x9c
	lsls r1, r1, #1
	adds r3, r7, r1
	str r5, [r3]
	movs r0, #0x9a
	lsls r0, r0, #3
	strh r0, [r3, #0xc]
	movs r2, #0
	strb r2, [r3, #0x1a]
	subs r0, #0x10
	strh r0, [r3, #0x14]
	strh r6, [r3, #0xe]
	strh r6, [r3, #0x16]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r3, #0x1b]
	movs r4, #0x10
	strb r4, [r3, #0x1c]
	strb r2, [r3, #0x1f]
	str r0, [r3, #0x20]
	ldr r0, [sp, #4]
	str r0, [r3, #8]
	mov r1, sb
	ldr r0, [r1]
	asrs r0, r0, #8
	mov r2, sl
	ldr r1, [r2]
	subs r0, r0, r1
	strh r0, [r3, #0x10]
	ldr r4, [sp]
	b _08070696
	.align 2, 0
_08070558: .4byte 0xFFFFE000
_0807055C: .4byte 0x000004CF
_08070560: .4byte 0x0000103F
_08070564: .4byte gCamera
_08070568:
	adds r0, r7, #0
	adds r0, #0xa8
	str r0, [sp, #8]
	ldr r0, [r7]
	ldr r1, [sp, #8]
	str r0, [r1]
	adds r2, r7, #0
	adds r2, #0xac
	str r2, [sp, #0xc]
	ldr r0, [r7, #4]
	ldr r4, _080706A8 @ =0xFFFFE000
	adds r0, r0, r4
	str r0, [r2]
	movs r0, #0x82
	lsls r0, r0, #1
	adds r3, r7, r0
	movs r1, #0x96
	lsls r1, r1, #1
	adds r2, r7, r1
	str r5, [r3]
	ldr r0, _080706AC @ =0x000004D1
	strh r0, [r3, #0xc]
	movs r0, #4
	strb r0, [r3, #0x1a]
	movs r0, #0xb0
	lsls r0, r0, #2
	strh r0, [r3, #0x14]
	movs r4, #0
	strh r4, [r3, #0xe]
	strh r4, [r3, #0x16]
	movs r0, #0xff
	strb r0, [r3, #0x1b]
	movs r0, #0x10
	strb r0, [r3, #0x1c]
	movs r1, #0
	strb r1, [r3, #0x1f]
	movs r4, #1
	rsbs r4, r4, #0
	str r4, [r3, #0x20]
	movs r0, #0x80
	lsls r0, r0, #5
	str r0, [r3, #8]
	ldr r1, [sp, #8]
	ldr r0, [r1]
	asrs r0, r0, #8
	ldr r4, _080706B0 @ =gCamera
	ldr r1, [r4]
	subs r0, r0, r1
	strh r0, [r3, #0x10]
	ldr r1, [sp, #0xc]
	ldr r0, [r1]
	asrs r0, r0, #8
	ldr r1, [r4, #4]
	subs r0, r0, r1
	strh r0, [r3, #0x12]
	movs r4, #0
	strh r4, [r2]
	ldrh r0, [r3, #0x10]
	strh r0, [r2, #6]
	ldrh r0, [r3, #0x12]
	strh r0, [r2, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	mov r8, r0
	mov r1, r8
	strh r1, [r2, #2]
	strh r1, [r2, #4]
	adds r0, r3, #0
	bl UpdateSpriteAnimation
	movs r2, #0x80
	lsls r2, r2, #4
	adds r5, r5, r2
	movs r4, #0x9c
	lsls r4, r4, #1
	adds r3, r7, r4
	str r5, [r3]
	ldr r0, _080706B4 @ =0x000004D2
	strh r0, [r3, #0xc]
	movs r0, #0
	strb r0, [r3, #0x1a]
	movs r1, #0xc0
	lsls r1, r1, #2
	strh r1, [r3, #0x14]
	movs r2, #0
	strh r2, [r3, #0xe]
	strh r2, [r3, #0x16]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r3, #0x1b]
	movs r4, #0x10
	strb r4, [r3, #0x1c]
	movs r0, #0
	strb r0, [r3, #0x1f]
	movs r1, #1
	rsbs r1, r1, #0
	str r1, [r3, #0x20]
	movs r2, #0x80
	lsls r2, r2, #5
	str r2, [r3, #8]
	ldr r4, [sp, #8]
	ldr r0, [r4]
	asrs r0, r0, #8
	ldr r2, _080706B0 @ =gCamera
	ldr r1, [r2]
	subs r0, r0, r1
	strh r0, [r3, #0x10]
	ldr r4, [sp, #0xc]
	ldr r0, [r4]
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	strh r0, [r3, #0x12]
	adds r0, r3, #0
	bl UpdateSpriteAnimation
	add r5, r8
	movs r0, #0xb0
	lsls r0, r0, #1
	adds r3, r7, r0
	str r5, [r3]
	ldr r0, _080706B8 @ =0x000004D3
	strh r0, [r3, #0xc]
	movs r1, #0
	strb r1, [r3, #0x1a]
	movs r2, #0xc0
	lsls r2, r2, #2
	strh r2, [r3, #0x14]
	movs r4, #0
	strh r4, [r3, #0xe]
	strh r4, [r3, #0x16]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r3, #0x1b]
	movs r0, #0x10
	strb r0, [r3, #0x1c]
	strb r1, [r3, #0x1f]
	movs r2, #1
	rsbs r2, r2, #0
	str r2, [r3, #0x20]
	movs r4, #0x80
	lsls r4, r4, #5
	str r4, [r3, #8]
	ldr r1, [sp, #8]
	ldr r0, [r1]
	asrs r0, r0, #8
	ldr r2, _080706B0 @ =gCamera
	ldr r1, [r2]
	subs r0, r0, r1
	strh r0, [r3, #0x10]
	ldr r4, [sp, #0xc]
_08070696:
	ldr r0, [r4]
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	strh r0, [r3, #0x12]
	adds r0, r3, #0
	bl UpdateSpriteAnimation
	b _08070782
	.align 2, 0
_080706A8: .4byte 0xFFFFE000
_080706AC: .4byte 0x000004D1
_080706B0: .4byte gCamera
_080706B4: .4byte 0x000004D2
_080706B8: .4byte 0x000004D3
_080706BC:
	movs r0, #0x82
	lsls r0, r0, #1
	adds r3, r7, r0
	adds r1, r7, #0
	adds r1, #0xa8
	movs r2, #0xfa
	lsls r2, r2, #9
	str r2, [r1]
	adds r2, r7, #0
	adds r2, #0xac
	movs r4, #0
	str r4, [r2]
	str r5, [r3]
	ldr r0, _08070794 @ =0x000004CC
	strh r0, [r3, #0xc]
	movs r0, #0
	strb r0, [r3, #0x1a]
	movs r0, #0xb0
	lsls r0, r0, #2
	strh r0, [r3, #0x14]
	strh r4, [r3, #0xe]
	strh r4, [r3, #0x16]
	movs r0, #0xff
	strb r0, [r3, #0x1b]
	movs r0, #0x10
	strb r0, [r3, #0x1c]
	strb r4, [r3, #0x1f]
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r3, #0x20]
	movs r4, #0x80
	lsls r4, r4, #5
	str r4, [r3, #8]
	ldr r0, [r1]
	asrs r0, r0, #8
	ldr r4, _08070798 @ =gCamera
	ldr r1, [r4]
	subs r0, r0, r1
	strh r0, [r3, #0x10]
	ldr r0, [r2]
	asrs r0, r0, #8
	ldr r1, [r4, #4]
	subs r0, r0, r1
	strh r0, [r3, #0x12]
	adds r0, r3, #0
	bl UpdateSpriteAnimation
	movs r0, #0xc0
	lsls r0, r0, #3
	adds r5, r5, r0
	movs r1, #0x9c
	lsls r1, r1, #1
	adds r3, r7, r1
	adds r1, r7, #0
	adds r1, #0xb8
	movs r2, #0xfa
	lsls r2, r2, #9
	str r2, [r1]
	adds r2, r7, #0
	adds r2, #0xbc
	movs r0, #0
	str r0, [r2]
	str r5, [r3]
	ldr r0, _0807079C @ =0x000004CE
	strh r0, [r3, #0xc]
	movs r0, #0
	strb r0, [r3, #0x1a]
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r3, #0x14]
	movs r0, #0
	strh r0, [r3, #0xe]
	strh r0, [r3, #0x16]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r3, #0x1b]
	movs r0, #0x10
	strb r0, [r3, #0x1c]
	movs r0, #0
	strb r0, [r3, #0x1f]
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r3, #0x20]
	movs r0, #0x80
	lsls r0, r0, #5
	str r0, [r3, #8]
	ldr r0, [r1]
	asrs r0, r0, #8
	ldr r1, [r4]
	subs r0, r0, r1
	strh r0, [r3, #0x10]
	ldr r0, [r2]
	asrs r0, r0, #8
	ldr r1, [r4, #4]
	subs r0, r0, r1
	strh r0, [r3, #0x12]
	adds r0, r3, #0
	bl UpdateSpriteAnimation
_08070782:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08070794: .4byte 0x000004CC
_08070798: .4byte gCamera
_0807079C: .4byte 0x000004CE

	thumb_func_start sub_80707A0
sub_80707A0: @ 0x080707A0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r5, r0, #0
	adds r6, r1, #0
	movs r0, #0
	mov sb, r0
	movs r1, #0x82
	lsls r1, r1, #1
	adds r4, r6, r1
	ldr r2, [r6, #0x40]
	mov sl, r2
	ldrh r1, [r5, #6]
	movs r2, #0x96
	lsls r2, r2, #1
	cmp r1, r2
	bne _080707CA
	b _080708EC
_080707CA:
	cmp r1, r2
	bgt _080707EA
	cmp r1, #0x64
	beq _08070874
	cmp r1, #0x64
	bgt _080707E0
	cmp r1, #0
	beq _08070822
	cmp r1, #0xa
	beq _0807082A
	b _08070AAC
_080707E0:
	cmp r1, #0xc8
	beq _08070898
	cmp r1, #0xd2
	beq _080708AE
	b _08070AAC
_080707EA:
	movs r2, #0xd2
	lsls r2, r2, #1
	cmp r1, r2
	bne _080707F4
	b _080709FC
_080707F4:
	cmp r1, r2
	bgt _0807080C
	movs r0, #0xc8
	lsls r0, r0, #1
	cmp r1, r0
	bne _08070802
	b _080709B0
_08070802:
	adds r0, #0xa
	cmp r1, r0
	bne _0807080A
	b _080709D0
_0807080A:
	b _08070AAC
_0807080C:
	movs r0, #0xfa
	lsls r0, r0, #1
	cmp r1, r0
	bne _08070816
	b _08070A54
_08070816:
	movs r0, #0xfa
	lsls r0, r0, #2
	cmp r1, r0
	bne _08070820
	b _08070AA4
_08070820:
	b _08070AAC
_08070822:
	movs r0, #0x3c
	strh r0, [r5, #8]
	movs r0, #0xa
	b _08070AAA
_0807082A:
	ldrh r0, [r5, #8]
	subs r0, #1
	strh r0, [r5, #8]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _08070838
	b _08070AAC
_08070838:
	mov r3, sb
	strh r3, [r5, #0xa]
	adds r1, r6, #0
	adds r1, #0xa8
	ldr r0, [r6]
	str r0, [r1]
	adds r1, #4
	ldr r0, [r6, #4]
	ldr r2, _08070868 @ =0xFFFFE400
	adds r0, r0, r2
	str r0, [r1]
	adds r0, r6, #0
	adds r0, #0xb0
	mov r3, sb
	str r3, [r0]
	adds r1, #8
	ldr r0, _0807086C @ =0xFFFFFC00
	str r0, [r1]
	movs r0, #0x64
	strh r0, [r5, #6]
	ldr r0, _08070870 @ =0x0000022A
	bl m4aSongNumStart
	b _08070AAC
	.align 2, 0
_08070868: .4byte 0xFFFFE400
_0807086C: .4byte 0xFFFFFC00
_08070870: .4byte 0x0000022A
_08070874:
	adds r2, r6, #0
	adds r2, #0xac
	adds r1, r6, #0
	adds r1, #0xb4
	ldr r0, [r2]
	ldr r1, [r1]
	adds r0, r0, r1
	str r0, [r2]
	asrs r0, r0, #8
	movs r1, #0x28
	rsbs r1, r1, #0
	cmp r0, r1
	blt _08070890
	b _08070AAC
_08070890:
	movs r0, #0xb4
	strh r0, [r5, #8]
	movs r0, #0xc8
	b _08070AAA
_08070898:
	ldrh r0, [r5, #8]
	subs r0, #1
	strh r0, [r5, #8]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _080708A6
	b _08070AB2
_080708A6:
	movs r0, #0xa
	strh r0, [r5, #8]
	movs r0, #0xd2
	b _08070AAA
_080708AE:
	ldrh r0, [r5, #8]
	subs r0, #1
	strh r0, [r5, #8]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _080708BC
	b _08070AAC
_080708BC:
	ldr r0, _080708E8 @ =0x000004CC
	strh r0, [r4, #0xc]
	movs r0, #1
	strb r0, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	adds r1, r6, #0
	adds r1, #0xa8
	adds r0, r6, #0
	adds r0, #0xb8
	ldr r0, [r0]
	str r0, [r1]
	adds r1, #0xc
	movs r0, #0x80
	lsls r0, r0, #4
	str r0, [r1]
	adds r1, #8
	movs r0, #0x96
	lsls r0, r0, #9
	str r0, [r1]
	strh r2, [r5, #6]
	b _08070AAC
	.align 2, 0
_080708E8: .4byte 0x000004CC
_080708EC:
	adds r7, r6, #0
	adds r7, #0xac
	adds r1, r6, #0
	adds r1, #0xb4
	ldr r0, [r7]
	ldr r1, [r1]
	adds r0, r0, r1
	str r0, [r7]
	asrs r0, r0, #8
	movs r1, #0xa8
	adds r1, r1, r6
	mov r8, r1
	ldr r1, [r1]
	asrs r1, r1, #8
	mov r2, sb
	str r2, [sp]
	ldr r2, _08070998 @ =sub_805217C
	str r2, [sp, #4]
	movs r2, #1
	movs r3, #8
	bl sub_80517FC
	adds r2, r0, #0
	cmp r2, #0
	blt _0807092C
	ldr r0, [r7]
	asrs r0, r0, #8
	ldr r1, _0807099C @ =gCamera
	ldr r1, [r1, #0x14]
	cmp r0, r1
	bgt _0807092C
	b _08070AAC
_0807092C:
	lsls r1, r2, #8
	ldr r0, [r7]
	adds r0, r0, r1
	str r0, [r7]
	movs r2, #0
	ldr r0, _080709A0 @ =0x000004CD
	strh r0, [r4, #0xc]
	strb r2, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	movs r3, #0x9c
	lsls r3, r3, #1
	adds r4, r6, r3
	adds r1, r6, #0
	adds r1, #0xb8
	mov r3, r8
	ldr r0, [r3]
	str r0, [r1]
	adds r1, #4
	ldr r0, [r7]
	ldr r3, _080709A4 @ =0xFFFFF600
	adds r0, r0, r3
	str r0, [r1]
	ldr r0, _080709A8 @ =0x00000506
	strh r0, [r4, #0xc]
	strb r2, [r4, #0x1a]
	movs r0, #0xb0
	lsls r0, r0, #2
	strh r0, [r4, #0x14]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r4, #0x1b]
	movs r0, #0xa0
	lsls r0, r0, #5
	str r0, [r4, #8]
	movs r0, #0x80
	lsls r0, r0, #4
	movs r3, #1
	rsbs r3, r3, #0
	movs r1, #0x91
	str r1, [sp]
	movs r1, #0x40
	movs r2, #0
	bl sub_805256C
	ldr r0, _080709AC @ =0x0000022B
	bl m4aSongNumStart
	movs r0, #0x22
	strh r0, [r5, #8]
	movs r0, #0xc8
	lsls r0, r0, #1
	b _08070AAA
	.align 2, 0
_08070998: .4byte sub_805217C
_0807099C: .4byte gCamera
_080709A0: .4byte 0x000004CD
_080709A4: .4byte 0xFFFFF600
_080709A8: .4byte 0x00000506
_080709AC: .4byte 0x0000022B
_080709B0:
	ldrh r0, [r5, #8]
	subs r0, #1
	strh r0, [r5, #8]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _08070AAC
	adds r1, r6, #0
	adds r1, #0xa8
	movs r0, #0xfa
	lsls r0, r0, #9
	str r0, [r1]
	movs r0, #0x78
	strh r0, [r5, #8]
	movs r0, #0xcd
	lsls r0, r0, #1
	b _08070AAA
_080709D0:
	ldrh r0, [r5, #8]
	subs r0, #1
	strh r0, [r5, #8]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _08070AAC
	movs r0, #0x9c
	lsls r0, r0, #1
	adds r4, r6, r0
	ldr r0, _080709F8 @ =0x0000050B
	strh r0, [r4, #0xc]
	movs r0, #2
	strb r0, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	movs r0, #0x64
	strh r0, [r5, #8]
	strh r2, [r5, #6]
	b _08070AAC
	.align 2, 0
_080709F8: .4byte 0x0000050B
_080709FC:
	ldrh r0, [r5, #8]
	subs r0, #1
	strh r0, [r5, #8]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _08070AAC
	movs r1, #0x9c
	lsls r1, r1, #1
	adds r4, r6, r1
	ldr r0, _08070A50 @ =0x0000050A
	strh r0, [r4, #0xc]
	movs r0, #0
	strb r0, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	adds r0, r6, #0
	adds r0, #0xb8
	ldr r1, [r6]
	ldr r0, [r0]
	adds r2, r6, #0
	adds r2, #0xb0
	subs r0, r1, r0
	cmp r0, #0
	bge _08070A2E
	adds r0, #0x3f
_08070A2E:
	asrs r0, r0, #6
	str r0, [r2]
	adds r1, r6, #0
	adds r1, #0xac
	adds r0, r6, #0
	adds r0, #0xbc
	ldr r0, [r0]
	str r0, [r1]
	mov r2, sb
	strh r2, [r5, #0xa]
	movs r0, #0xfa
	lsls r0, r0, #1
	strh r0, [r5, #6]
	movs r0, #0x74
	bl m4aSongNumStart
	b _08070AAC
	.align 2, 0
_08070A50: .4byte 0x0000050A
_08070A54:
	ldr r1, _08070AA0 @ =gSineTable
	ldrh r0, [r5, #0xa]
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r3, #0
	ldrsh r1, [r0, r3]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #5
	cmp r0, #0
	bge _08070A6C
	adds r0, #0x3f
_08070A6C:
	asrs r1, r0, #6
	adds r2, r6, #0
	adds r2, #0xbc
	adds r0, r6, #0
	adds r0, #0xac
	ldr r0, [r0]
	subs r0, r0, r1
	str r0, [r2]
	subs r2, #4
	adds r1, r6, #0
	adds r1, #0xb0
	ldr r0, [r2]
	ldr r1, [r1]
	adds r0, r0, r1
	str r0, [r2]
	ldrh r0, [r5, #0xa]
	adds r0, #8
	strh r0, [r5, #0xa]
	lsls r0, r0, #0x10
	movs r1, #0x80
	lsls r1, r1, #0x12
	cmp r0, r1
	bls _08070AAC
	movs r0, #0xfa
	lsls r0, r0, #2
	b _08070AAA
	.align 2, 0
_08070AA0: .4byte gSineTable
_08070AA4:
	mov r0, sb
	strh r0, [r5, #4]
	ldr r0, _08070ACC @ =0x000003F2
_08070AAA:
	strh r0, [r5, #6]
_08070AAC:
	mov r1, sb
	cmp r1, #0
	beq _08070AF8
_08070AB2:
	mov r3, sl
	ldr r2, [r3, #0x10]
	asrs r1, r2, #8
	movs r0, #0xa8
	lsls r0, r0, #3
	cmp r1, r0
	bgt _08070AD0
	adds r1, r6, #0
	adds r1, #0xb8
	movs r0, #0xa8
	lsls r0, r0, #0xb
	str r0, [r1]
	b _08070AEE
	.align 2, 0
_08070ACC: .4byte 0x000003F2
_08070AD0:
	ldr r0, _08070AE4 @ =0x0000063F
	cmp r1, r0
	ble _08070AE8
	adds r1, r6, #0
	adds r1, #0xb8
	movs r0, #0xc8
	lsls r0, r0, #0xb
	str r0, [r1]
	b _08070AEE
	.align 2, 0
_08070AE4: .4byte 0x0000063F
_08070AE8:
	adds r0, r6, #0
	adds r0, #0xb8
	str r2, [r0]
_08070AEE:
	adds r1, r6, #0
	adds r1, #0xbc
	movs r0, #0x96
	lsls r0, r0, #8
	str r0, [r1]
_08070AF8:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08070B08
sub_08070B08: @ 0x08070B08
	push {r4, r5, r6, lr}
	sub sp, #0x10
	adds r5, r0, #0
	adds r4, r1, #0
	ldrh r1, [r5, #6]
	cmp r1, #0xe6
	bne _08070B18
	b _08070D38
_08070B18:
	cmp r1, #0xe6
	bgt _08070B46
	cmp r1, #0x64
	beq _08070BBC
	cmp r1, #0x64
	bgt _08070B2E
	cmp r1, #0
	beq _08070B8C
	cmp r1, #0xa
	beq _08070B96
	b _08071028
_08070B2E:
	cmp r1, #0xd2
	bne _08070B34
	b _08070C74
_08070B34:
	cmp r1, #0xd2
	bgt _08070B3E
	cmp r1, #0xc8
	beq _08070BF4
	b _08071028
_08070B3E:
	cmp r1, #0xdc
	bne _08070B44
	b _08070CD8
_08070B44:
	b _08071028
_08070B46:
	movs r0, #0xc8
	lsls r0, r0, #1
	cmp r1, r0
	bne _08070B50
	b _08070F0C
_08070B50:
	cmp r1, r0
	bgt _08070B66
	subs r0, #0x64
	cmp r1, r0
	bne _08070B5C
	b _08070D80
_08070B5C:
	adds r0, #0x32
	cmp r1, r0
	bne _08070B64
	b _08070E20
_08070B64:
	b _08071028
_08070B66:
	movs r2, #0xfa
	lsls r2, r2, #2
	cmp r1, r2
	bne _08070B70
	b _08071020
_08070B70:
	cmp r1, r2
	bgt _08070B80
	movs r0, #0xcd
	lsls r0, r0, #1
	cmp r1, r0
	bne _08070B7E
	b _08070F58
_08070B7E:
	b _08071028
_08070B80:
	movs r0, #0xfa
	lsls r0, r0, #3
	cmp r1, r0
	bne _08070B8A
	b _08071010
_08070B8A:
	b _08071028
_08070B8C:
	movs r0, #0x3c
	strh r0, [r5, #8]
	strh r1, [r4, #0x28]
	movs r0, #0xa
	b _08071026
_08070B96:
	ldrh r0, [r5, #8]
	subs r0, #1
	strh r0, [r5, #8]
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	beq _08070BA6
	b _08071028
_08070BA6:
	adds r0, r4, #0
	adds r0, #0xb0
	str r1, [r0]
	adds r1, r4, #0
	adds r1, #0xb4
	ldr r0, _08070BB8 @ =0xFFFFFC00
	str r0, [r1]
	movs r0, #0x64
	b _08071026
	.align 2, 0
_08070BB8: .4byte 0xFFFFFC00
_08070BBC:
	adds r2, r4, #0
	adds r2, #0xac
	adds r3, r4, #0
	adds r3, #0xb4
	ldr r1, [r2]
	ldr r0, [r3]
	adds r1, r1, r0
	str r1, [r2]
	ldr r0, [r4, #4]
	ldr r2, _08070BE8 @ =0xFFFFB000
	adds r0, r0, r2
	cmp r1, r0
	ble _08070BD8
	b _08071028
_08070BD8:
	adds r1, r4, #0
	adds r1, #0xb0
	ldr r0, _08070BEC @ =0xFFFFFF00
	str r0, [r1]
	ldr r0, _08070BF0 @ =0xFFFFFD00
	str r0, [r3]
	movs r0, #0xc8
	b _08071026
	.align 2, 0
_08070BE8: .4byte 0xFFFFB000
_08070BEC: .4byte 0xFFFFFF00
_08070BF0: .4byte 0xFFFFFD00
_08070BF4:
	adds r2, r4, #0
	adds r2, #0xa8
	adds r6, r4, #0
	adds r6, #0xb0
	ldr r0, [r2]
	ldr r1, [r6]
	adds r0, r0, r1
	str r0, [r2]
	adds r3, r4, #0
	adds r3, #0xb4
	ldr r1, [r3]
	adds r1, #0x20
	str r1, [r3]
	adds r2, #4
	ldr r0, [r2]
	adds r0, r0, r1
	str r0, [r2]
	ldr r1, _08070C64 @ =0x0000ADFF
	cmp r0, r1
	ble _08070C4A
	movs r0, #0xae
	lsls r0, r0, #8
	str r0, [r2]
	ldr r0, _08070C68 @ =0xFFFFFF00
	str r0, [r6]
	ldr r0, _08070C6C @ =0xFFFFFD00
	str r0, [r3]
	movs r0, #0x8b
	lsls r0, r0, #2
	bl m4aSongNumStart
	movs r0, #0x80
	lsls r0, r0, #4
	movs r3, #1
	rsbs r3, r3, #0
	movs r1, #0x91
	str r1, [sp]
	movs r1, #0x40
	movs r2, #0
	bl sub_805256C
	movs r0, #0xd2
	strh r0, [r5, #6]
_08070C4A:
	ldrh r1, [r4, #0x28]
	movs r0, #0xe0
	lsls r0, r0, #2
	cmp r1, r0
	bne _08070C56
	b _08071028
_08070C56:
	subs r0, r1, #2
	ldr r2, _08070C70 @ =0x000003FF
	adds r1, r2, #0
	ands r0, r1
	strh r0, [r4, #0x28]
	b _08071028
	.align 2, 0
_08070C64: .4byte 0x0000ADFF
_08070C68: .4byte 0xFFFFFF00
_08070C6C: .4byte 0xFFFFFD00
_08070C70: .4byte 0x000003FF
_08070C74:
	adds r2, r4, #0
	adds r2, #0xa8
	adds r6, r4, #0
	adds r6, #0xb0
	ldr r0, [r2]
	ldr r1, [r6]
	adds r0, r0, r1
	str r0, [r2]
	adds r3, r4, #0
	adds r3, #0xb4
	ldr r1, [r3]
	adds r1, #0x20
	str r1, [r3]
	adds r2, #4
	ldr r0, [r2]
	adds r0, r0, r1
	str r0, [r2]
	ldr r1, _08070CCC @ =0x0000ADFF
	cmp r0, r1
	bgt _08070C9E
	b _08071028
_08070C9E:
	movs r0, #0xae
	lsls r0, r0, #8
	str r0, [r2]
	ldr r0, _08070CD0 @ =0xFFFFFF00
	str r0, [r6]
	ldr r0, _08070CD4 @ =0xFFFFFE00
	str r0, [r3]
	movs r0, #0x8b
	lsls r0, r0, #2
	bl m4aSongNumStart
	movs r0, #0x80
	lsls r0, r0, #4
	movs r3, #1
	rsbs r3, r3, #0
	movs r1, #0x91
	str r1, [sp]
	movs r1, #0x40
	movs r2, #0
	bl sub_805256C
	movs r0, #0xdc
	b _08071026
	.align 2, 0
_08070CCC: .4byte 0x0000ADFF
_08070CD0: .4byte 0xFFFFFF00
_08070CD4: .4byte 0xFFFFFE00
_08070CD8:
	adds r2, r4, #0
	adds r2, #0xa8
	adds r6, r4, #0
	adds r6, #0xb0
	ldr r0, [r2]
	ldr r1, [r6]
	adds r0, r0, r1
	str r0, [r2]
	adds r3, r4, #0
	adds r3, #0xb4
	ldr r1, [r3]
	adds r1, #0x20
	str r1, [r3]
	adds r2, #4
	ldr r0, [r2]
	adds r0, r0, r1
	str r0, [r2]
	ldr r1, _08070D34 @ =0x0000ADFF
	cmp r0, r1
	bgt _08070D02
	b _08071028
_08070D02:
	movs r0, #0xae
	lsls r0, r0, #8
	str r0, [r2]
	movs r0, #0
	str r0, [r6]
	str r0, [r3]
	movs r0, #0x8b
	lsls r0, r0, #2
	bl m4aSongNumStart
	movs r0, #0x80
	lsls r0, r0, #4
	movs r3, #1
	rsbs r3, r3, #0
	movs r1, #0x91
	str r1, [sp]
	movs r1, #0x80
	movs r2, #0
	bl sub_805256C
	movs r0, #0x3c
	strh r0, [r5, #8]
	movs r0, #0xe6
	b _08071026
	.align 2, 0
_08070D34: .4byte 0x0000ADFF
_08070D38:
	ldrh r0, [r5, #8]
	subs r0, #1
	movs r1, #0
	strh r0, [r5, #8]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	beq _08070D4A
	b _08071028
_08070D4A:
	strh r0, [r5, #0xa]
	adds r0, r4, #0
	adds r0, #0x2a
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	movs r0, #0xe0
	lsls r0, r0, #2
	strh r0, [r4, #0x28]
	ldrh r1, [r4, #0x20]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08070D6C
	movs r0, #0x96
	lsls r0, r0, #1
	b _08070D70
_08070D6C:
	movs r0, #0xaf
	lsls r0, r0, #1
_08070D70:
	strh r0, [r5, #6]
	ldr r0, _08070D7C @ =0x0000022D
	bl m4aSongNumStart
	b _08071028
	.align 2, 0
_08070D7C: .4byte 0x0000022D
_08070D80:
	adds r3, r4, #0
	adds r3, #0xb0
	ldr r1, _08070DB8 @ =gSineTable
	ldrh r0, [r5, #0xa]
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r1, #0
	ldrsh r2, [r0, r1]
	cmp r2, #0
	bge _08070D96
	adds r2, #0x3f
_08070D96:
	asrs r2, r2, #6
	str r2, [r3]
	adds r1, r4, #0
	adds r1, #0xa8
	ldr r0, [r1]
	adds r0, r0, r2
	str r0, [r1]
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r2, [r0]
	adds r6, r1, #0
	adds r3, r0, #0
	cmp r2, #0
	beq _08070DBC
	cmp r2, #1
	beq _08070DD8
	b _08070DF0
	.align 2, 0
_08070DB8: .4byte gSineTable
_08070DBC:
	ldrh r0, [r4, #0x28]
	subs r0, #4
	ldr r2, _08070DD4 @ =0x000003FF
	adds r1, r2, #0
	ands r0, r1
	strh r0, [r4, #0x28]
	movs r1, #0xc0
	lsls r1, r1, #2
	cmp r0, r1
	bne _08070DF0
	movs r0, #1
	b _08070DEE
	.align 2, 0
_08070DD4: .4byte 0x000003FF
_08070DD8:
	ldrh r0, [r4, #0x28]
	adds r0, #4
	ldr r2, _08070E18 @ =0x000003FF
	adds r1, r2, #0
	ands r0, r1
	strh r0, [r4, #0x28]
	movs r1, #0xe0
	lsls r1, r1, #2
	cmp r0, r1
	bne _08070DF0
	movs r0, #2
_08070DEE:
	strb r0, [r3]
_08070DF0:
	ldrh r0, [r5, #0xa]
	adds r0, #8
	strh r0, [r5, #0xa]
	lsls r0, r0, #0x10
	ldr r1, _08070E1C @ =0x01FF0000
	cmp r0, r1
	bls _08070ED2
	movs r0, #0
	strh r0, [r5, #0xa]
	strb r0, [r3]
	adds r1, r4, #0
	adds r1, #0x2a
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _08070EB6
	b _08070ECC
	.align 2, 0
_08070E18: .4byte 0x000003FF
_08070E1C: .4byte 0x01FF0000
_08070E20:
	adds r3, r4, #0
	adds r3, #0xb0
	ldr r1, _08070E58 @ =gSineTable
	ldrh r0, [r5, #0xa]
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r1, #0
	ldrsh r2, [r0, r1]
	cmp r2, #0
	bge _08070E36
	adds r2, #0x3f
_08070E36:
	asrs r2, r2, #6
	str r2, [r3]
	adds r1, r4, #0
	adds r1, #0xa8
	ldr r0, [r1]
	adds r0, r0, r2
	str r0, [r1]
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r2, [r0]
	adds r6, r1, #0
	adds r3, r0, #0
	cmp r2, #0
	beq _08070E5C
	cmp r2, #1
	beq _08070E78
	b _08070E90
	.align 2, 0
_08070E58: .4byte gSineTable
_08070E5C:
	ldrh r0, [r4, #0x28]
	subs r0, #8
	ldr r2, _08070E74 @ =0x000003FF
	adds r1, r2, #0
	ands r0, r1
	strh r0, [r4, #0x28]
	movs r1, #0xc0
	lsls r1, r1, #2
	cmp r0, r1
	bne _08070E90
	movs r0, #1
	b _08070E8E
	.align 2, 0
_08070E74: .4byte 0x000003FF
_08070E78:
	ldrh r0, [r4, #0x28]
	adds r0, #8
	ldr r2, _08070EC4 @ =0x000003FF
	adds r1, r2, #0
	ands r0, r1
	strh r0, [r4, #0x28]
	movs r1, #0xe0
	lsls r1, r1, #2
	cmp r0, r1
	bne _08070E90
	movs r0, #2
_08070E8E:
	strb r0, [r3]
_08070E90:
	ldrh r0, [r5, #0xa]
	adds r0, #0x10
	strh r0, [r5, #0xa]
	lsls r0, r0, #0x10
	ldr r1, _08070EC8 @ =0x01FF0000
	cmp r0, r1
	bls _08070ED2
	movs r0, #0
	strh r0, [r5, #0xa]
	strb r0, [r3]
	adds r1, r4, #0
	adds r1, #0x2a
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #3
	bls _08070ECC
_08070EB6:
	movs r0, #0x3c
	strh r0, [r5, #8]
	movs r0, #0xc8
	lsls r0, r0, #1
	strh r0, [r5, #6]
	b _08070ED2
	.align 2, 0
_08070EC4: .4byte 0x000003FF
_08070EC8: .4byte 0x01FF0000
_08070ECC:
	ldr r0, _08070F08 @ =0x0000022D
	bl m4aSongNumStart
_08070ED2:
	ldrh r0, [r5, #0xa]
	movs r3, #0x7f
	ands r3, r0
	cmp r3, #0
	beq _08070EDE
	b _08071028
_08070EDE:
	ldr r1, [r6]
	asrs r1, r1, #8
	subs r1, #0x10
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	ldr r2, [r4, #4]
	asrs r2, r2, #8
	subs r2, #4
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	str r3, [sp]
	movs r0, #0x10
	str r0, [sp, #4]
	str r3, [sp, #8]
	str r3, [sp, #0xc]
	movs r0, #8
	movs r3, #0
	bl sub_8079758
	b _08071028
	.align 2, 0
_08070F08: .4byte 0x0000022D
_08070F0C:
	ldrh r0, [r5, #8]
	subs r0, #1
	strh r0, [r5, #8]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	beq _08070F1C
	b _08071028
_08070F1C:
	strh r0, [r5, #0xa]
	adds r1, r4, #0
	adds r1, #0x2b
	movs r0, #0
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0xa8
	ldr r0, [r0]
	ldr r1, _08070F54 @ =0xFFFFF800
	adds r0, r0, r1
	ldr r1, [r4]
	adds r2, r4, #0
	adds r2, #0xb0
	subs r0, r1, r0
	cmp r0, #0
	bge _08070F3E
	adds r0, #0x3f
_08070F3E:
	asrs r0, r0, #6
	str r0, [r2]
	adds r1, r4, #0
	adds r1, #0xbc
	adds r0, r4, #0
	adds r0, #0xac
	ldr r0, [r0]
	str r0, [r1]
	movs r0, #0xcd
	lsls r0, r0, #1
	b _08071026
	.align 2, 0
_08070F54: .4byte 0xFFFFF800
_08070F58:
	adds r2, r4, #0
	adds r2, #0xa8
	adds r1, r4, #0
	adds r1, #0xb0
	ldr r0, [r2]
	ldr r1, [r1]
	adds r0, r0, r1
	str r0, [r2]
	ldr r1, _08070FA8 @ =gSineTable
	ldrh r0, [r5, #0xa]
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r2, #0
	ldrsh r1, [r0, r2]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	cmp r0, #0
	bge _08070F80
	adds r0, #0x3f
_08070F80:
	asrs r1, r0, #6
	adds r2, r4, #0
	adds r2, #0xac
	adds r0, r4, #0
	adds r0, #0xbc
	ldr r0, [r0]
	subs r0, r0, r1
	str r0, [r2]
	adds r3, r4, #0
	adds r3, #0x2b
	ldrb r0, [r3]
	cmp r0, #1
	beq _08070FD4
	cmp r0, #1
	bgt _08070FAC
	cmp r0, #0
	beq _08070FB4
	ldrh r2, [r5, #0xa]
	b _08070FF6
	.align 2, 0
_08070FA8: .4byte gSineTable
_08070FAC:
	cmp r0, #2
	beq _08070FE0
	ldrh r2, [r5, #0xa]
	b _08070FF6
_08070FB4:
	ldrh r0, [r4, #0x28]
	subs r0, #0x10
	ldr r2, _08070FD0 @ =0x000003FF
	adds r1, r2, #0
	ands r0, r1
	strh r0, [r4, #0x28]
	movs r1, #0xa0
	lsls r1, r1, #2
	ldrh r2, [r5, #0xa]
	cmp r0, r1
	bne _08070FF6
	movs r0, #2
	b _08070FF4
	.align 2, 0
_08070FD0: .4byte 0x000003FF
_08070FD4:
	ldrh r0, [r5, #0xa]
	adds r2, r0, #0
	cmp r2, #0xff
	bls _08070FF6
	movs r0, #2
	b _08070FF4
_08070FE0:
	ldrh r0, [r4, #0x28]
	adds r0, #0x10
	ldr r2, _0807100C @ =0x000003FF
	adds r1, r2, #0
	ands r0, r1
	strh r0, [r4, #0x28]
	ldrh r2, [r5, #0xa]
	cmp r0, #0
	bne _08070FF6
	movs r0, #0xa
_08070FF4:
	strb r0, [r3]
_08070FF6:
	adds r0, r2, #0
	adds r0, #8
	strh r0, [r5, #0xa]
	lsls r0, r0, #0x10
	movs r1, #0xf0
	lsls r1, r1, #0x11
	cmp r0, r1
	bls _08071028
	movs r0, #0xfa
	lsls r0, r0, #2
	b _08071026
	.align 2, 0
_0807100C: .4byte 0x000003FF
_08071010:
	ldrh r0, [r5, #8]
	subs r0, #1
	strh r0, [r5, #8]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _08071028
	strh r2, [r5, #6]
	b _08071028
_08071020:
	movs r0, #0
	strh r0, [r5, #4]
	ldr r0, _08071030 @ =0x000003F2
_08071026:
	strh r0, [r5, #6]
_08071028:
	add sp, #0x10
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08071030: .4byte 0x000003F2

	thumb_func_start sub_8071034
sub_8071034: @ 0x08071034
	push {r4, r5, r6, lr}
	mov ip, r0
	movs r6, #0
	ldr r0, _08071068 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r3, r1, r0
	movs r4, #0x82
	lsls r4, r4, #1
	add r4, ip
	ldrh r1, [r3, #6]
	cmp r1, #0xc8
	bne _08071054
	b _08071160
_08071054:
	cmp r1, #0xc8
	bgt _08071072
	cmp r1, #0xa
	beq _080710A8
	cmp r1, #0xa
	bgt _0807106C
	cmp r1, #0
	beq _08071094
	b _080711A6
	.align 2, 0
_08071068: .4byte gCurTask
_0807106C:
	cmp r1, #0x64
	beq _080710C8
	b _080711A6
_08071072:
	movs r2, #0x96
	lsls r2, r2, #1
	cmp r1, r2
	bne _0807107C
	b _08071184
_0807107C:
	cmp r1, r2
	bgt _08071088
	cmp r1, #0xd2
	bne _08071086
	b _08071174
_08071086:
	b _080711A6
_08071088:
	movs r0, #0xfa
	lsls r0, r0, #2
	cmp r1, r0
	bne _08071092
	b _080711A0
_08071092:
	b _080711A6
_08071094:
	strh r6, [r3, #8]
	strh r6, [r3, #0xa]
	ldr r0, _080710A4 @ =0xFFFFE000
	str r0, [r3, #0xc]
	movs r0, #0x18
	strh r0, [r3, #0x10]
	movs r0, #0xa
	b _080711A4
	.align 2, 0
_080710A4: .4byte 0xFFFFE000
_080710A8:
	ldr r0, [r3, #0xc]
	ldr r1, _080710C0 @ =0xFFFFF800
	adds r0, r0, r1
	str r0, [r3, #0xc]
	ldr r1, _080710C4 @ =0xFFFF9C00
	cmp r0, r1
	ble _080710B8
	b _080711A6
_080710B8:
	str r1, [r3, #0xc]
	movs r0, #0x64
	b _080711A4
	.align 2, 0
_080710C0: .4byte 0xFFFFF800
_080710C4: .4byte 0xFFFF9C00
_080710C8:
	ldr r1, _08071120 @ =gSineTable
	ldrh r2, [r3, #0xa]
	lsls r0, r2, #1
	adds r0, r0, r1
	movs r5, #0
	ldrsh r1, [r0, r5]
	movs r5, #0x10
	ldrsh r0, [r3, r5]
	muls r1, r0, r1
	cmp r1, #0
	bge _080710E0
	adds r1, #0x3f
_080710E0:
	asrs r6, r1, #6
	adds r0, r2, #0
	subs r0, #0x20
	ldr r2, _08071124 @ =0x000003FF
	adds r1, r2, #0
	ands r0, r1
	strh r0, [r3, #0xa]
	cmp r0, #0
	bne _08071102
	ldrh r0, [r3, #0x10]
	subs r0, #8
	strh r0, [r3, #0x10]
	lsls r0, r0, #0x10
	cmp r0, #0
	bgt _08071102
	movs r0, #0xc8
	strh r0, [r3, #6]
_08071102:
	ldr r5, _08071128 @ =0x000004D1
	strh r5, [r4, #0xc]
	movs r0, #4
	strb r0, [r4, #0x1a]
	ldrh r2, [r3, #0xa]
	adds r0, r2, #0
	subs r0, #0xc0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x80
	bhi _0807112C
	movs r0, #1
	strb r0, [r4, #0x1a]
	b _080711A6
	.align 2, 0
_08071120: .4byte gSineTable
_08071124: .4byte 0x000003FF
_08071128: .4byte 0x000004D1
_0807112C:
	ldr r1, _08071144 @ =0xFFFFFEBF
	adds r0, r2, r1
	lsls r0, r0, #0x10
	movs r1, #0xbf
	lsls r1, r1, #0x11
	cmp r0, r1
	bhi _08071148
	strh r5, [r4, #0xc]
	movs r0, #2
	strb r0, [r4, #0x1a]
	b _080711A6
	.align 2, 0
_08071144: .4byte 0xFFFFFEBF
_08071148:
	ldr r1, _0807115C @ =0xFFFFFD40
	adds r0, r2, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x80
	bhi _080711A6
	strh r5, [r4, #0xc]
	movs r0, #3
	strb r0, [r4, #0x1a]
	b _080711A6
	.align 2, 0
_0807115C: .4byte 0xFFFFFD40
_08071160:
	movs r1, #0
	ldr r0, _08071170 @ =0x000004D1
	strh r0, [r4, #0xc]
	strb r1, [r4, #0x1a]
	movs r0, #0x3c
	strh r0, [r3, #8]
	movs r0, #0xd2
	b _080711A4
	.align 2, 0
_08071170: .4byte 0x000004D1
_08071174:
	ldrh r0, [r3, #8]
	subs r0, #1
	strh r0, [r3, #8]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _080711A6
	strh r2, [r3, #6]
	b _080711A6
_08071184:
	ldr r0, [r3, #0xc]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r0, r2
	str r0, [r3, #0xc]
	ldr r1, _0807119C @ =0xFFFFE000
	cmp r0, r1
	blt _080711A6
	str r1, [r3, #0xc]
	movs r0, #0xfa
	lsls r0, r0, #2
	b _080711A4
	.align 2, 0
_0807119C: .4byte 0xFFFFE000
_080711A0:
	strh r6, [r3, #4]
	ldr r0, _080711C4 @ =0x000003F2
_080711A4:
	strh r0, [r3, #6]
_080711A6:
	mov r1, ip
	adds r1, #0xa8
	mov r5, ip
	ldr r0, [r5]
	str r0, [r1]
	mov r2, ip
	adds r2, #0xac
	ldr r0, [r5, #4]
	ldr r1, [r3, #0xc]
	adds r0, r0, r1
	adds r0, r0, r6
	str r0, [r2]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080711C4: .4byte 0x000003F2

	thumb_func_start sub_080711C8
sub_080711C8: @ 0x080711C8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov r8, r0
	movs r7, #0x82
	lsls r7, r7, #1
	add r7, r8
	movs r2, #0x96
	lsls r2, r2, #1
	add r2, r8
	ldrb r0, [r0, #0x18]
	cmp r0, #1
	bne _080711EA
	b _08071308
_080711EA:
	cmp r0, #1
	bgt _080711F4
	cmp r0, #0
	beq _080711FC
	b _080713FC
_080711F4:
	cmp r0, #2
	bne _080711FA
	b _080713A4
_080711FA:
	b _080713FC
_080711FC:
	mov r5, r8
	adds r5, #0xa8
	ldr r0, [r5]
	asrs r0, r0, #8
	ldr r1, _080712F4 @ =gCamera
	mov sl, r1
	ldr r1, [r1]
	subs r0, r0, r1
	strh r0, [r7, #0x10]
	mov r4, r8
	adds r4, #0xac
	ldr r0, [r4]
	asrs r0, r0, #8
	mov r3, sl
	ldr r1, [r3, #4]
	subs r0, r0, r1
	strh r0, [r7, #0x12]
	mov r1, r8
	ldrh r0, [r1, #0x28]
	strh r0, [r2]
	ldrh r0, [r7, #0x10]
	strh r0, [r2, #6]
	ldrh r0, [r7, #0x12]
	strh r0, [r2, #8]
	adds r0, r7, #0
	adds r1, r2, #0
	bl TransformSprite
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	bl DisplaySprite
	mov r2, r8
	ldr r1, [r2, #4]
	ldr r3, _080712F8 @ =0xFFFFE000
	adds r0, r1, r3
	ldr r4, [r4]
	cmp r4, r0
	bne _08071250
	b _080713FC
_08071250:
	movs r7, #0x9c
	lsls r7, r7, #1
	add r7, r8
	ldr r0, [r2]
	mov sb, r0
	ldr r2, _080712FC @ =0xFFFFC800
	adds r2, r2, r1
	mov r8, r2
	ldr r0, [r5]
	mov r3, sb
	subs r6, r0, r3
	subs r5, r4, r2
	lsls r0, r5, #8
	asrs r0, r0, #0x10
	lsls r1, r6, #8
	asrs r1, r1, #0x10
	bl sa2__sub_8004418
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	adds r1, r6, #0
	muls r1, r6, r1
	adds r0, r5, #0
	muls r0, r5, r0
	adds r2, r1, r0
	adds r0, r2, #0
	bl Sqrt
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	adds r0, r6, #0
	asrs r2, r0, #3
	ldr r1, _08071300 @ =gSineTable
	movs r3, #0x80
	lsls r3, r3, #1
	adds r0, r4, r3
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r3, #0
	ldrsh r0, [r0, r3]
	muls r0, r2, r0
	cmp r0, #0
	bge _080712AA
	ldr r3, _08071304 @ =0x00003FFF
	adds r0, r0, r3
_080712AA:
	asrs r6, r0, #0xe
	lsls r0, r4, #1
	adds r0, r0, r1
	movs r1, #0
	ldrsh r0, [r0, r1]
	muls r0, r2, r0
	cmp r0, #0
	bge _080712BE
	ldr r2, _08071304 @ =0x00003FFF
	adds r0, r0, r2
_080712BE:
	asrs r5, r0, #0xe
	movs r4, #0
	mov r2, sl
_080712C4:
	mov r3, sb
	asrs r0, r3, #8
	ldr r1, [r2]
	subs r0, r0, r1
	strh r0, [r7, #0x10]
	mov r1, r8
	asrs r0, r1, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	strh r0, [r7, #0x12]
	adds r0, r7, #0
	str r2, [sp]
	bl DisplaySprite
	add sb, r6
	add r8, r5
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldr r2, [sp]
	cmp r4, #7
	bls _080712C4
	b _080713FC
	.align 2, 0
_080712F4: .4byte gCamera
_080712F8: .4byte 0xFFFFE000
_080712FC: .4byte 0xFFFFC800
_08071300: .4byte gSineTable
_08071304: .4byte 0x00003FFF
_08071308:
	movs r2, #0xa8
	add r2, r8
	mov sb, r2
	ldr r0, [r2]
	asrs r0, r0, #8
	ldr r5, _080713A0 @ =gCamera
	ldr r1, [r5]
	subs r0, r0, r1
	strh r0, [r7, #0x10]
	mov r4, r8
	adds r4, #0xac
	ldr r0, [r4]
	asrs r0, r0, #8
	ldr r1, [r5, #4]
	subs r0, r0, r1
	strh r0, [r7, #0x12]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	bl DisplaySprite
	ldr r4, [r4]
	movs r3, #0xf0
	lsls r3, r3, #6
	adds r1, r4, r3
	mov r2, r8
	ldr r0, [r2, #4]
	subs r6, r0, r1
	adds r0, r6, #0
	movs r1, #5
	bl __divsi3
	adds r6, r0, #0
	movs r3, #0xc0
	lsls r3, r3, #5
	adds r2, r4, r3
	movs r4, #0
_08071354:
	cmp r4, #1
	bhi _08071372
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #3
	movs r1, #0x9c
	lsls r1, r1, #1
	adds r0, r0, r1
	mov r3, r8
	adds r7, r3, r0
	adds r0, r7, #0
	str r2, [sp]
	bl UpdateSpriteAnimation
	ldr r2, [sp]
_08071372:
	mov r1, sb
	ldr r0, [r1]
	asrs r0, r0, #8
	ldr r1, [r5]
	subs r0, r0, r1
	strh r0, [r7, #0x10]
	asrs r0, r2, #8
	ldr r1, [r5, #4]
	subs r0, r0, r1
	strh r0, [r7, #0x12]
	adds r0, r7, #0
	str r2, [sp]
	bl DisplaySprite
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldr r2, [sp]
	adds r2, r2, r6
	cmp r4, #4
	bls _08071354
	b _080713FC
	.align 2, 0
_080713A0: .4byte gCamera
_080713A4:
	mov r0, r8
	adds r0, #0xa8
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r4, _0807140C @ =gCamera
	ldr r1, [r4]
	subs r0, r0, r1
	strh r0, [r7, #0x10]
	mov r0, r8
	adds r0, #0xac
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r1, [r4, #4]
	subs r0, r0, r1
	strh r0, [r7, #0x12]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	bl DisplaySprite
	movs r7, #0x9c
	lsls r7, r7, #1
	add r7, r8
	mov r0, r8
	adds r0, #0xb8
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r1, [r4]
	subs r0, r0, r1
	strh r0, [r7, #0x10]
	mov r0, r8
	adds r0, #0xbc
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r1, [r4, #4]
	subs r0, r0, r1
	strh r0, [r7, #0x12]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	bl DisplaySprite
_080713FC:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807140C: .4byte gCamera

	thumb_func_start sub_8071410
sub_8071410: @ 0x08071410
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r5, #0x19
	ldrsb r5, [r4, r5]
	cmp r5, #0
	bne _080714B6
	ldr r0, _08071440 @ =0x000004D5
	movs r1, #0
	movs r2, #0x40
	movs r3, #0
	bl sub_8078DB0
	movs r0, #0x40
	strb r0, [r4, #0x19]
	movs r0, #0x64
	strh r0, [r4, #0x24]
	adds r0, r4, #0
	bl sub_0806F2B8
	ldrb r0, [r4, #0x18]
	cmp r0, #1
	bne _08071448
	ldr r0, _08071444 @ =0x0000022E
	b _0807144A
	.align 2, 0
_08071440: .4byte 0x000004D5
_08071444: .4byte 0x0000022E
_08071448:
	ldr r0, _08071480 @ =0x00000229
_0807144A:
	bl m4aSongNumStart
	ldrh r0, [r4, #0x10]
	cmp r0, #2
	beq _0807146C
	movs r0, #2
	strh r0, [r4, #0x10]
	movs r0, #0x80
	str r0, [r4, #8]
	str r5, [r4, #0xc]
	ldr r0, [r4]
	asrs r0, r0, #8
	ldr r1, _08071484 @ =0x0000066F
	cmp r0, r1
	ble _0807146C
	movs r0, #3
	strh r0, [r4, #0x10]
_0807146C:
	ldr r0, _08071488 @ =gStageData
	ldrb r1, [r0, #1]
	adds r2, r0, #0
	cmp r1, #0
	bne _0807148C
	ldr r0, [r4]
	movs r1, #0x80
	lsls r1, r1, #5
	b _08071492
	.align 2, 0
_08071480: .4byte 0x00000229
_08071484: .4byte 0x0000066F
_08071488: .4byte gStageData
_0807148C:
	ldr r0, [r4]
	movs r1, #0xc0
	lsls r1, r1, #5
_08071492:
	adds r0, r0, r1
	ldr r1, _080714BC @ =0x000677FF
	cmp r0, r1
	ble _080714A2
	adds r1, r4, #0
	adds r1, #0x32
	movs r0, #1
	strb r0, [r1]
_080714A2:
	ldrb r0, [r2, #3]
	cmp r0, #5
	bne _080714B6
	ldrb r0, [r2, #6]
	cmp r0, #0
	bne _080714B6
	ldrb r1, [r4, #0x18]
	movs r0, #3
	bl sub_8027674
_080714B6:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080714BC: .4byte 0x000677FF

	thumb_func_start sub_080714C0
sub_080714C0: @ 0x080714C0
	push {r4, r5, lr}
	adds r4, r0, #0
	lsls r1, r1, #0x18
	lsrs r5, r1, #0x18
	movs r0, #0x19
	ldrsb r0, [r4, r0]
	cmp r0, #0
	bne _0807158A
	ldr r0, _080714F8 @ =0x000004D5
	movs r1, #0
	movs r2, #0x40
	movs r3, #0
	bl sub_8078DB0
	movs r0, #0x40
	strb r0, [r4, #0x19]
	movs r0, #0x64
	strh r0, [r4, #0x24]
	strb r5, [r4, #0x18]
	ldrb r0, [r4, #0x18]
	cmp r0, #1
	beq _0807150A
	cmp r0, #1
	bgt _080714FC
	cmp r0, #0
	beq _08071502
	b _0807151E
	.align 2, 0
_080714F8: .4byte 0x000004D5
_080714FC:
	cmp r0, #2
	beq _08071518
	b _0807151E
_08071502:
	adds r0, r4, #0
	bl sub_08071720
	b _0807151E
_0807150A:
	adds r0, r4, #0
	bl sub_08071764
	adds r0, r4, #0
	bl sub_0806FE98
	b _0807151E
_08071518:
	adds r0, r4, #0
	bl sub_080717A8
_0807151E:
	movs r5, #0
	movs r0, #1
	strb r0, [r4, #0x13]
	ldrb r0, [r4, #0x18]
	cmp r0, #1
	bne _08071534
	ldr r0, _08071530 @ =0x0000022E
	b _08071536
	.align 2, 0
_08071530: .4byte 0x0000022E
_08071534:
	ldr r0, _08071568 @ =0x00000229
_08071536:
	bl m4aSongNumStart
	ldrh r0, [r4, #0x10]
	cmp r0, #2
	beq _08071558
	movs r0, #2
	strh r0, [r4, #0x10]
	movs r0, #0x80
	str r0, [r4, #8]
	str r5, [r4, #0xc]
	ldr r0, [r4]
	asrs r0, r0, #8
	ldr r1, _0807156C @ =0x0000066F
	cmp r0, r1
	ble _08071558
	movs r0, #3
	strh r0, [r4, #0x10]
_08071558:
	ldr r0, _08071570 @ =gStageData
	ldrb r0, [r0, #1]
	cmp r0, #0
	bne _08071574
	ldr r0, [r4]
	movs r1, #0x80
	lsls r1, r1, #5
	b _0807157A
	.align 2, 0
_08071568: .4byte 0x00000229
_0807156C: .4byte 0x0000066F
_08071570: .4byte gStageData
_08071574:
	ldr r0, [r4]
	movs r1, #0xc0
	lsls r1, r1, #5
_0807157A:
	adds r0, r0, r1
	ldr r1, _08071590 @ =0x000677FF
	cmp r0, r1
	ble _0807158A
	adds r1, r4, #0
	adds r1, #0x32
	movs r0, #1
	strb r0, [r1]
_0807158A:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08071590: .4byte 0x000677FF

	thumb_func_start sub_08071594
sub_08071594: @ 0x08071594
	push {r4, r5, r6, lr}
	ldr r1, _080715C0 @ =gStageData
	adds r6, r1, #0
	adds r6, #0x88
	ldr r1, [r6]
	ldrh r2, [r1, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r5, r2, r1
	ldrb r1, [r0, #2]
	movs r2, #0x7f
	ands r2, r1
	ldrb r1, [r0, #3]
	ldrb r0, [r0, #4]
	lsls r0, r0, #8
	orrs r1, r0
	cmp r2, #1
	beq _080715C4
	cmp r2, #3
	beq _08071604
	b _0807160E
	.align 2, 0
_080715C0: .4byte gStageData
_080715C4:
	lsls r0, r1, #8
	str r0, [r5]
	movs r2, #0
	strb r2, [r5, #0x1c]
	ldr r1, [r5, #0x40]
	ldr r0, [r1, #4]
	movs r4, #0x80
	lsls r4, r4, #0x14
	orrs r0, r4
	movs r3, #0x21
	rsbs r3, r3, #0
	ands r0, r3
	str r0, [r1, #4]
	strh r2, [r1, #0x1c]
	ldr r0, [r5, #0x40]
	strh r2, [r0, #0x18]
	ldr r1, [r5, #0x44]
	ldr r0, [r1, #4]
	orrs r0, r4
	ands r0, r3
	str r0, [r1, #4]
	strh r2, [r1, #0x1c]
	ldr r0, [r5, #0x44]
	strh r2, [r0, #0x18]
	strh r2, [r5, #0x2c]
	ldr r1, [r6]
	ldr r0, _08071600 @ =sub_806F3A0
	str r0, [r1, #8]
	b _0807160E
	.align 2, 0
_08071600: .4byte sub_806F3A0
_08071604:
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	adds r0, r5, #0
	bl sub_080714C0
_0807160E:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_8071614
sub_8071614: @ 0x08071614
	push {r4, r5, lr}
	ldr r4, _08071634 @ =gCurTask
	ldr r2, [r4]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	ldr r0, [r5, #0x14]
	ldrb r0, [r0]
	cmp r0, #3
	bne _08071638
	adds r0, r2, #0
	bl TaskDestroy
	b _08071658
	.align 2, 0
_08071634: .4byte gCurTask
_08071638:
	bl sub_8079FFC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807164C
	ldr r1, [r4]
	ldr r0, _08071648 @ =sub_806EC50
	b _08071650
	.align 2, 0
_08071648: .4byte sub_806EC50
_0807164C:
	ldr r1, [r4]
	ldr r0, _08071660 @ =sub_806ED00
_08071650:
	str r0, [r1, #8]
	adds r0, r5, #0
	bl sub_0806FA0C
_08071658:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08071660: .4byte sub_806ED00

	thumb_func_start sub_8071664
sub_8071664: @ 0x08071664
	push {lr}
	ldr r0, _08071690 @ =gCurTask
	ldr r0, [r0]
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	ldr r2, [r0, #0x40]
	ldr r1, [r2, #4]
	movs r3, #0x80
	lsls r3, r3, #0x14
	orrs r1, r3
	str r1, [r2, #4]
	ldr r2, [r0, #0x44]
	ldr r1, [r2, #4]
	orrs r1, r3
	str r1, [r2, #4]
	bl sub_0806FA0C
	pop {r0}
	bx r0
	.align 2, 0
_08071690: .4byte gCurTask

	thumb_func_start sub_8071694
sub_8071694: @ 0x08071694
	push {r4, r5, lr}
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r4, r0
	ldr r0, [r5, #0x38]
	cmp r0, #0
	beq _080716A8
	bl VramFree
_080716A8:
	ldr r1, _080716D4 @ =0x030000C8
	adds r0, r4, r1
	ldr r0, [r0]
	cmp r0, #0
	beq _080716B6
	bl VramFree
_080716B6:
	ldr r1, _080716D8 @ =0x030000CC
	adds r0, r4, r1
	ldr r0, [r0]
	cmp r0, #0
	beq _080716C4
	bl VramFree
_080716C4:
	ldr r0, [r5, #0x34]
	cmp r0, #0
	beq _080716CE
	bl VramFree
_080716CE:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080716D4: .4byte 0x030000C8
_080716D8: .4byte 0x030000CC

	thumb_func_start sub_80716DC
sub_80716DC: @ 0x080716DC
	push {r4, lr}
	adds r4, r0, #0
	strb r1, [r4, #0x18]
	ldrb r0, [r4, #0x18]
	cmp r0, #1
	beq _08071700
	cmp r0, #1
	bgt _080716F2
	cmp r0, #0
	beq _080716F8
	b _08071714
_080716F2:
	cmp r0, #2
	beq _0807170E
	b _08071714
_080716F8:
	adds r0, r4, #0
	bl sub_08071720
	b _08071714
_08071700:
	adds r0, r4, #0
	bl sub_08071764
	adds r0, r4, #0
	bl sub_0806FE98
	b _08071714
_0807170E:
	adds r0, r4, #0
	bl sub_080717A8
_08071714:
	movs r0, #1
	strb r0, [r4, #0x13]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08071720
sub_08071720: @ 0x08071720
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, _0807175C @ =sub_80717EC
	movs r2, #0x88
	lsls r2, r2, #6
	ldr r1, _08071760 @ =sub_80718DC
	str r1, [sp]
	movs r1, #0x14
	movs r3, #0
	bl TaskCreate
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	str r4, [r0]
	movs r2, #0
	movs r1, #1
	strh r1, [r0, #4]
	strh r2, [r0, #6]
	strh r2, [r0, #8]
	strh r2, [r0, #0xa]
	movs r1, #0
	bl sub_08070450
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807175C: .4byte sub_80717EC
_08071760: .4byte sub_80718DC

	thumb_func_start sub_08071764
sub_08071764: @ 0x08071764
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, _080717A0 @ =sub_80703D4
	movs r2, #0x88
	lsls r2, r2, #6
	ldr r1, _080717A4 @ =sub_80718DC
	str r1, [sp]
	movs r1, #0x14
	movs r3, #0
	bl TaskCreate
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	str r4, [r0]
	movs r2, #0
	movs r1, #1
	strh r1, [r0, #4]
	strh r2, [r0, #6]
	strh r2, [r0, #8]
	strh r2, [r0, #0xa]
	bl sub_08070450
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080717A0: .4byte sub_80703D4
_080717A4: .4byte sub_80718DC

	thumb_func_start sub_080717A8
sub_080717A8: @ 0x080717A8
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, _080717E4 @ =sub_8071864
	movs r2, #0x88
	lsls r2, r2, #6
	ldr r1, _080717E8 @ =sub_80718DC
	str r1, [sp]
	movs r1, #0x14
	movs r3, #0
	bl TaskCreate
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	str r4, [r0]
	movs r2, #0
	movs r1, #1
	strh r1, [r0, #4]
	strh r2, [r0, #6]
	strh r2, [r0, #8]
	strh r2, [r0, #0xa]
	movs r1, #2
	bl sub_08070450
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080717E4: .4byte sub_8071864
_080717E8: .4byte sub_80718DC

	thumb_func_start sub_80717EC
sub_80717EC: @ 0x080717EC
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	ldr r0, _08071818 @ =gCurTask
	ldr r2, [r0]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r1, r0
	ldr r4, [r6]
	movs r0, #0x82
	lsls r0, r0, #1
	adds r7, r4, r0
	ldrh r0, [r6, #4]
	cmp r0, #0
	beq _08071810
	ldrb r0, [r4, #0x1c]
	cmp r0, #0
	bne _0807181C
_08071810:
	adds r0, r2, #0
	bl TaskDestroy
	b _0807185C
	.align 2, 0
_08071818: .4byte gCurTask
_0807181C:
	adds r0, r6, #0
	adds r1, r4, #0
	bl sub_08070B08
	adds r5, r4, #0
	adds r5, #0xa8
	ldr r1, [r5]
	asrs r1, r1, #8
	adds r4, #0xac
	ldr r2, [r4]
	asrs r2, r2, #8
	ldr r0, [r6]
	ldr r0, [r0, #0x40]
	str r0, [sp]
	adds r0, r7, #0
	movs r3, #0
	bl sub_8020CE0
	ldr r1, [r5]
	asrs r1, r1, #8
	ldr r2, [r4]
	asrs r2, r2, #8
	ldr r0, [r6]
	ldr r0, [r0, #0x44]
	str r0, [sp]
	adds r0, r7, #0
	movs r3, #0
	bl sub_8020CE0
	ldr r0, [r6]
	bl sub_080711C8
_0807185C:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8071864
sub_8071864: @ 0x08071864
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	ldr r0, _08071890 @ =gCurTask
	ldr r2, [r0]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r1, r0
	ldr r4, [r6]
	movs r0, #0x82
	lsls r0, r0, #1
	adds r7, r4, r0
	ldrh r0, [r6, #4]
	cmp r0, #0
	beq _08071888
	ldrb r0, [r4, #0x1c]
	cmp r0, #0
	bne _08071894
_08071888:
	adds r0, r2, #0
	bl TaskDestroy
	b _080718D4
	.align 2, 0
_08071890: .4byte gCurTask
_08071894:
	adds r0, r6, #0
	adds r1, r4, #0
	bl sub_80707A0
	adds r5, r4, #0
	adds r5, #0xa8
	ldr r1, [r5]
	asrs r1, r1, #8
	adds r4, #0xac
	ldr r2, [r4]
	asrs r2, r2, #8
	ldr r0, [r6]
	ldr r0, [r0, #0x40]
	str r0, [sp]
	adds r0, r7, #0
	movs r3, #0
	bl sub_8020CE0
	ldr r1, [r5]
	asrs r1, r1, #8
	ldr r2, [r4]
	asrs r2, r2, #8
	ldr r0, [r6]
	ldr r0, [r0, #0x44]
	str r0, [sp]
	adds r0, r7, #0
	movs r3, #0
	bl sub_8020CE0
	ldr r0, [r6]
	bl sub_080711C8
_080718D4:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80718DC
sub_80718DC: @ 0x080718DC
	push {lr}
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	ldr r1, [r0]
	ldrb r0, [r1, #0x12]
	cmp r0, #0
	beq _080718F2
	movs r0, #0
	b _080718F4
_080718F2:
	movs r0, #0xc8
_080718F4:
	strh r0, [r1, #0x24]
	pop {r0}
	bx r0
	.align 2, 0
_080718FC:
	.byte 0x70, 0x47, 0x00, 0x00
	.byte 0x70, 0x47, 0x00, 0x00

	thumb_func_start sub_8071904
sub_8071904: @ 0x08071904
	push {r4, lr}
	adds r2, r0, #0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	ldrh r0, [r2, #0x10]
	cmp r0, r1
	beq _08071962
	movs r4, #0
	movs r3, #0
	strh r1, [r2, #0x10]
	ldrh r0, [r2, #0x10]
	cmp r0, #1
	beq _08071938
	cmp r0, #1
	bgt _08071928
	cmp r0, #0
	beq _08071932
	b _08071962
_08071928:
	cmp r0, #2
	beq _0807193E
	cmp r0, #4
	beq _08071958
	b _08071962
_08071932:
	strb r4, [r2, #0x1a]
	str r3, [r2, #8]
	b _08071960
_08071938:
	movs r0, #8
	rsbs r0, r0, #0
	b _0807195E
_0807193E:
	movs r0, #0x80
	str r0, [r2, #8]
	str r3, [r2, #0xc]
	ldr r0, [r2]
	asrs r0, r0, #8
	ldr r1, _08071954 @ =0x0000066F
	cmp r0, r1
	ble _08071962
	movs r0, #3
	strh r0, [r2, #0x10]
	b _08071962
	.align 2, 0
_08071954: .4byte 0x0000066F
_08071958:
	strb r4, [r2, #0x1a]
	movs r0, #0x80
	lsls r0, r0, #4
_0807195E:
	str r0, [r2, #8]
_08071960:
	str r3, [r2, #0xc]
_08071962:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8071968
sub_8071968: @ 0x08071968
	push {lr}
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	adds r2, r0, #0
	adds r2, #0xd0
	movs r3, #0x80
	lsls r3, r3, #5
	str r3, [r2, #8]
	cmp r1, #1
	beq _080719A0
	cmp r1, #1
	bgt _08071986
	cmp r1, #0
	beq _0807198C
	b _080719A6
_08071986:
	cmp r1, #2
	beq _080719A0
	b _080719A6
_0807198C:
	movs r1, #0
	ldr r0, _0807199C @ =0x000004CB
	strh r0, [r2, #0xc]
	strb r1, [r2, #0x1a]
	movs r0, #0x3e
	orrs r0, r3
	str r0, [r2, #8]
	b _080719A6
	.align 2, 0
_0807199C: .4byte 0x000004CB
_080719A0:
	ldr r0, _080719B0 @ =0x000004CB
	strh r0, [r2, #0xc]
	strb r1, [r2, #0x1a]
_080719A6:
	movs r0, #0xff
	strb r0, [r2, #0x1b]
	pop {r0}
	bx r0
	.align 2, 0
_080719B0: .4byte 0x000004CB

	thumb_func_start sub_080719B4
sub_080719B4: @ 0x080719B4
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0x54
	bl VramMalloc
	adds r4, #0xcc
	str r0, [r4]
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_80719C8
sub_80719C8: @ 0x080719C8
	push {r4, r5, lr}
	movs r3, #0
	strb r3, [r0, #0x1c]
	ldr r2, [r0, #0x40]
	ldr r1, [r2, #4]
	movs r5, #0x80
	lsls r5, r5, #0x14
	orrs r1, r5
	movs r4, #0x21
	rsbs r4, r4, #0
	ands r1, r4
	str r1, [r2, #4]
	strh r3, [r2, #0x1c]
	ldr r1, [r0, #0x40]
	strh r3, [r1, #0x18]
	ldr r2, [r0, #0x44]
	ldr r1, [r2, #4]
	orrs r1, r5
	ands r1, r4
	str r1, [r2, #4]
	strh r3, [r2, #0x1c]
	ldr r1, [r0, #0x44]
	strh r3, [r1, #0x18]
	strh r3, [r0, #0x2c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08071A00:
	.byte 0x70, 0x47, 0x00, 0x00, 0x70, 0x47, 0x00, 0x00

    @ Called on init of Boss 5
	thumb_func_start sub_8071A08
sub_8071A08: @ 0x08071A08
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	mov r8, r0
	adds r4, r1, #0
	adds r6, r2, #0
	ldr r0, _08071A60 @ =sub_8073330
	movs r1, #0xee
	lsls r1, r1, #1
	movs r2, #0x84
	lsls r2, r2, #6
	ldr r3, _08071A64 @ =sub_8073460
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	str r0, [sp, #4]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r7, r1, r0
	ldr r1, _08071A68 @ =gStageData
	adds r0, r1, #0
	adds r0, #0x88
	ldr r2, [sp, #4]
	str r2, [r0]
	adds r4, #4
	lsls r4, r4, #8
	str r4, [r7]
	lsls r6, r6, #8
	str r6, [r7, #4]
	movs r0, #0
	strh r0, [r7, #0x10]
	strh r0, [r7, #0x14]
	strh r0, [r7, #0x16]
	strh r0, [r7, #0x18]
	ldrb r0, [r1, #1]
	cmp r0, #0
	bne _08071A6C
	movs r0, #8
	b _08071A6E
	.align 2, 0
_08071A60: .4byte sub_8073330
_08071A64: .4byte sub_8073460
_08071A68: .4byte gStageData
_08071A6C:
	movs r0, #6
_08071A6E:
	strb r0, [r7, #0x12]
	mov r0, r8
	str r0, [r7, #0xc]
	movs r1, #0
	strb r1, [r7, #0x13]
	movs r0, #4
	strb r0, [r7, #0x1a]
	strb r1, [r7, #0x1b]
	strh r1, [r7, #0x26]
	ldr r0, _08071D40 @ =0x0000049C
	strh r0, [r7, #0x24]
	adds r1, r7, #0
	adds r1, #0x2c
	movs r0, #1
	strb r0, [r1]
	movs r1, #0x98
	lsls r1, r1, #1
	adds r0, r7, r1
	ldr r2, _08071D44 @ =gPlayers
	str r2, [r0]
	movs r0, #0x9a
	lsls r0, r0, #1
	adds r3, r7, r0
	adds r0, r2, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	lsls r1, r1, #0x1e
	lsrs r1, r1, #0x1e
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r2
	str r0, [r3]
	movs r2, #0x9c
	lsls r2, r2, #1
	adds r1, r7, r2
	ldr r0, _08071D48 @ =gStageData
	adds r0, #0x98
	ldr r0, [r0]
	str r0, [r1]
	movs r0, #0xf6
	bl VramMalloc
	str r0, [r7, #0x20]
	movs r1, #0xc0
	lsls r1, r1, #1
	adds r5, r0, r1
	movs r0, #0xc0
	lsls r0, r0, #2
	strh r0, [r7, #0x38]
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r7, #0x3a]
	movs r4, #0
	adds r3, r7, #0
	adds r3, #0x90
	adds r6, r7, #0
	adds r6, #0xb8
	mov sb, r4
_08071AE8:
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #3
	adds r0, #0xe0
	adds r2, r7, r0
	str r5, [r2]
	ldr r0, _08071D4C @ =0x000004DA
	strh r0, [r2, #0xc]
	movs r1, #0
	strb r1, [r2, #0x1a]
	movs r0, #0xa0
	lsls r0, r0, #2
	strh r0, [r2, #0x14]
	mov r0, sb
	strh r0, [r2, #0xe]
	strh r0, [r2, #0x16]
	movs r1, #1
	rsbs r1, r1, #0
	mov sl, r1
	movs r0, #0xff
	strb r0, [r2, #0x1b]
	movs r0, #0x10
	strb r0, [r2, #0x1c]
	movs r1, #0
	strb r1, [r2, #0x1f]
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r2, #0x20]
	mov r1, sb
	str r1, [r2, #8]
	ldr r1, [r7]
	asrs r1, r1, #8
	ldr r0, _08071D50 @ =gCamera
	mov r8, r0
	ldr r0, [r0]
	subs r0, r1, r0
	strh r0, [r2, #0x10]
	ldr r0, [r7, #4]
	asrs r0, r0, #8
	mov r1, r8
	ldr r1, [r1, #4]
	subs r0, r0, r1
	strh r0, [r2, #0x12]
	adds r0, r2, #0
	str r3, [sp, #8]
	bl UpdateSpriteAnimation
	movs r2, #0x80
	lsls r2, r2, #2
	adds r5, r5, r2
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldr r3, [sp, #8]
	cmp r4, #1
	bls _08071AE8
	str r5, [r3]
	movs r4, #0
	movs r0, #0x9b
	lsls r0, r0, #3
	strh r0, [r3, #0xc]
	movs r0, #0
	strb r0, [r3, #0x1a]
	movs r1, #0x98
	lsls r1, r1, #3
	strh r1, [r3, #0x14]
	strh r4, [r3, #0xe]
	strh r4, [r3, #0x16]
	ldrb r0, [r3, #0x1b]
	mov r2, sl
	orrs r0, r2
	strb r0, [r3, #0x1b]
	movs r0, #0x10
	strb r0, [r3, #0x1c]
	movs r1, #0
	strb r1, [r3, #0x1f]
	movs r2, #1
	rsbs r2, r2, #0
	str r2, [r3, #0x20]
	str r4, [r3, #8]
	ldr r0, [r7]
	asrs r0, r0, #8
	mov r2, r8
	ldr r1, [r2]
	subs r0, r0, r1
	strh r0, [r3, #0x10]
	ldr r0, [r7, #4]
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	strh r0, [r3, #0x12]
	adds r0, r3, #0
	bl UpdateSpriteAnimation
	movs r0, #0x80
	lsls r0, r0, #2
	adds r5, r5, r0
	str r5, [r6]
	ldr r0, _08071D54 @ =0x000004D9
	strh r0, [r6, #0xc]
	movs r1, #1
	mov sb, r1
	mov r2, sb
	strb r2, [r6, #0x1a]
	subs r0, #0x19
	strh r0, [r6, #0x14]
	strh r4, [r6, #0xe]
	strh r4, [r6, #0x16]
	ldrb r0, [r6, #0x1b]
	mov r1, sl
	orrs r0, r1
	strb r0, [r6, #0x1b]
	movs r2, #0x10
	strb r2, [r6, #0x1c]
	movs r0, #0
	strb r0, [r6, #0x1f]
	movs r1, #1
	rsbs r1, r1, #0
	str r1, [r6, #0x20]
	str r4, [r6, #8]
	ldr r0, [r7]
	asrs r0, r0, #8
	mov r2, r8
	ldr r1, [r2]
	subs r0, r0, r1
	strh r0, [r6, #0x10]
	ldr r0, [r7, #4]
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	strh r0, [r6, #0x12]
	adds r0, r6, #0
	bl UpdateSpriteAnimation
	adds r5, #0x20
	movs r0, #0x9e
	lsls r0, r0, #1
	adds r2, r7, r0
	str r5, [r2]
	ldr r0, _08071D58 @ =0x000004D7
	strh r0, [r2, #0xc]
	movs r1, #0
	strb r1, [r2, #0x1a]
	subs r0, #0x97
	strh r0, [r2, #0x14]
	strh r4, [r2, #0xe]
	strh r4, [r2, #0x16]
	ldrb r0, [r2, #0x1b]
	mov r1, sl
	orrs r0, r1
	strb r0, [r2, #0x1b]
	movs r0, #0x10
	strb r0, [r2, #0x1c]
	movs r1, #0
	strb r1, [r2, #0x1f]
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r2, #0x20]
	str r4, [r2, #8]
	adds r0, r2, #0
	bl UpdateSpriteAnimation
	movs r1, #0xb4
	lsls r1, r1, #3
	adds r5, r5, r1
	movs r0, #0xb2
	lsls r0, r0, #1
	adds r2, r7, r0
	str r5, [r2]
	ldr r0, _08071D5C @ =0x000004DC
	strh r0, [r2, #0xc]
	movs r1, #0
	strb r1, [r2, #0x1a]
	subs r0, #0xdc
	strh r0, [r2, #0x14]
	strh r4, [r2, #0xe]
	strh r4, [r2, #0x16]
	ldrb r0, [r2, #0x1b]
	mov r1, sl
	orrs r0, r1
	strb r0, [r2, #0x1b]
	movs r0, #0x10
	strb r0, [r2, #0x1c]
	movs r1, #0
	strb r1, [r2, #0x1f]
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r2, #0x20]
	str r4, [r2, #8]
	adds r0, r2, #0
	bl UpdateSpriteAnimation
	movs r1, #0xc0
	lsls r1, r1, #1
	adds r5, r5, r1
	movs r0, #0xc6
	lsls r0, r0, #1
	adds r2, r7, r0
	str r5, [r2]
	ldr r1, _08071D60 @ =0x000004DB
	mov r8, r1
	mov r0, r8
	strh r0, [r2, #0xc]
	movs r1, #0
	strb r1, [r2, #0x1a]
	movs r0, #0x90
	lsls r0, r0, #3
	strh r0, [r2, #0x14]
	strh r4, [r2, #0xe]
	strh r4, [r2, #0x16]
	ldrb r0, [r2, #0x1b]
	mov r1, sl
	orrs r0, r1
	strb r0, [r2, #0x1b]
	movs r0, #0x10
	strb r0, [r2, #0x1c]
	movs r1, #0
	strb r1, [r2, #0x1f]
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r2, #0x20]
	str r4, [r2, #8]
	adds r0, r2, #0
	bl UpdateSpriteAnimation
	movs r1, #0xa0
	lsls r1, r1, #1
	adds r5, r5, r1
	movs r0, #0xda
	lsls r0, r0, #1
	adds r2, r7, r0
	str r5, [r2]
	mov r1, r8
	strh r1, [r2, #0xc]
	mov r0, sb
	strb r0, [r2, #0x1a]
	movs r1, #0x90
	lsls r1, r1, #3
	strh r1, [r2, #0x14]
	strh r4, [r2, #0xe]
	strh r4, [r2, #0x16]
	ldrb r0, [r2, #0x1b]
	mov r1, sl
	orrs r0, r1
	strb r0, [r2, #0x1b]
	movs r0, #0x10
	strb r0, [r2, #0x1c]
	movs r1, #0
	strb r1, [r2, #0x1f]
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r2, #0x20]
	str r4, [r2, #8]
	adds r0, r2, #0
	bl UpdateSpriteAnimation
	adds r5, #0x40
	str r5, [r7, #0x1c]
	movs r0, #0xad
	lsls r0, r0, #3
	strh r0, [r7, #0x24]
	movs r1, #0
	strb r1, [r7, #0x1a]
	ldr r4, _08071D64 @ =gUnknown_080D5888
	adds r5, r4, #2
_08071CFA:
	ldrb r0, [r7, #0x1a]
	lsls r0, r0, #2
	adds r0, r0, r4
	movs r2, #0
	ldrsh r0, [r0, r2]
	movs r2, #0x24
	ldrsh r1, [r7, r2]
	adds r2, r7, #0
	bl sub_8072E50
	ldrb r0, [r7, #0x1a]
	lsls r0, r0, #2
	adds r0, r0, r5
	ldrh r0, [r0]
	ldrh r1, [r7, #0x24]
	adds r0, r0, r1
	strh r0, [r7, #0x24]
	ldrb r0, [r7, #0x1a]
	adds r0, #1
	strb r0, [r7, #0x1a]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #3
	bls _08071CFA
	bl sub_807A4BC
	ldr r0, [sp, #4]
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08071D40: .4byte 0x0000049C
_08071D44: .4byte gPlayers
_08071D48: .4byte gStageData
_08071D4C: .4byte 0x000004DA
_08071D50: .4byte gCamera
_08071D54: .4byte 0x000004D9
_08071D58: .4byte 0x000004D7
_08071D5C: .4byte 0x000004DC
_08071D60: .4byte 0x000004DB
_08071D64: .4byte gUnknown_080D5888

	thumb_func_start sub_8071D68
sub_8071D68: @ 0x08071D68
	push {r4, r5, lr}
	ldr r0, _08071D88 @ =gCurTask
	ldr r2, [r0]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, [r4, #0xc]
	ldrb r0, [r0]
	cmp r0, #3
	bne _08071D8C
	adds r0, r2, #0
	bl TaskDestroy
	b _08071DDE
	.align 2, 0
_08071D88: .4byte gCurTask
_08071D8C:
	adds r0, r4, #0
	bl sub_80728B4
	ldr r0, [r4, #0xc]
	ldrb r0, [r0]
	cmp r0, #2
	bne _08071DDE
	movs r1, #0
	ldr r5, _08071DE4 @ =gPlayers
	ldr r3, _08071DE8 @ =0xFFFFFB7F
	movs r2, #0x93
	lsls r2, r2, #1
_08071DA4:
	lsls r0, r1, #0x10
	asrs r1, r0, #0x10
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r5
	ldr r0, [r0, #0x10]
	asrs r0, r0, #8
	adds r0, r0, r3
	cmp r0, r2
	bhi _08071DDE
	adds r0, r1, #1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	ble _08071DA4
	movs r0, #0x32
	bl sub_80299D4
	ldr r0, _08071DEC @ =gCamera
	ldr r0, [r0, #0x14]
	str r0, [r4, #0x28]
	ldr r0, _08071DF0 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08071DF4 @ =sub_8071DF8
	str r0, [r1, #8]
_08071DDE:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08071DE4: .4byte gPlayers
_08071DE8: .4byte 0xFFFFFB7F
_08071DEC: .4byte gCamera
_08071DF0: .4byte gCurTask
_08071DF4: .4byte sub_8071DF8

	thumb_func_start sub_8071DF8
sub_8071DF8: @ 0x08071DF8
	push {r4, r5, r6, lr}
	ldr r6, _08071E24 @ =gCurTask
	ldr r0, [r6]
	ldrh r2, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r2, r0
	ldr r0, _08071E28 @ =0x03000164
	adds r1, r2, r0
	ldrh r0, [r4, #0x14]
	adds r0, #1
	movs r5, #0
	movs r3, #0
	strh r0, [r4, #0x14]
	ldrh r0, [r4, #0x14]
	cmp r0, #0x78
	beq _08071E40
	cmp r0, #0x78
	bgt _08071E2C
	cmp r0, #0x3c
	beq _08071E32
	b _08071E74
	.align 2, 0
_08071E24: .4byte gCurTask
_08071E28: .4byte 0x03000164
_08071E2C:
	cmp r0, #0xb4
	beq _08071E4C
	b _08071E74
_08071E32:
	ldr r0, _08071E3C @ =0x000004DC
	strh r0, [r1, #0xc]
	movs r0, #1
	strb r0, [r1, #0x1a]
	b _08071E74
	.align 2, 0
_08071E3C: .4byte 0x000004DC
_08071E40:
	ldr r0, _08071E48 @ =0x000004DC
	strh r0, [r1, #0xc]
	strb r5, [r1, #0x1a]
	b _08071E74
	.align 2, 0
_08071E48: .4byte 0x000004DC
_08071E4C:
	strh r3, [r4, #0x14]
	ldr r1, _08071E88 @ =gUnknown_080D58CC
	ldrb r0, [r4, #0x12]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r4, #0x16]
	strh r3, [r4, #0x30]
	movs r0, #1
	strh r0, [r4, #0x32]
	strh r3, [r4, #0x34]
	strh r0, [r4, #0x36]
	ldr r1, _08071E8C @ =0x0300002C
	adds r0, r2, r1
	strb r5, [r0]
	bl sub_807A4A8
	ldr r1, [r6]
	ldr r0, _08071E90 @ =sub_8071E94
	str r0, [r1, #8]
_08071E74:
	adds r0, r4, #0
	bl sub_8073570
	adds r0, r4, #0
	bl sub_80728B4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08071E88: .4byte gUnknown_080D58CC
_08071E8C: .4byte 0x0300002C
_08071E90: .4byte sub_8071E94

	thumb_func_start sub_8071E94
sub_8071E94: @ 0x08071E94
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	ldr r0, _08071F08 @ =gCurTask
	ldr r0, [r0]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	ldr r0, _08071F0C @ =0x0300013C
	adds r7, r5, r0
	ldr r1, _08071F10 @ =0x03000164
	adds r1, r1, r5
	mov r8, r1
	ldrh r0, [r4, #0x14]
	adds r0, #1
	movs r1, #0
	mov sb, r1
	strh r0, [r4, #0x14]
	adds r0, r4, #0
	bl sub_8072B80
	ldr r1, _08071F14 @ =0x03000130
	adds r0, r5, r1
	ldr r1, [r0]
	adds r0, r4, #0
	bl sub_8073480
	ldr r1, _08071F18 @ =0x03000134
	adds r0, r5, r1
	ldr r1, [r0]
	adds r0, r4, #0
	bl sub_8073480
	ldrb r0, [r4, #0x13]
	movs r6, #0x13
	ldrsb r6, [r4, r6]
	cmp r6, #0
	beq _08071F1C
	subs r0, #1
	strb r0, [r4, #0x13]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08071EFA
	mov r1, sb
	mov r0, r8
	strb r1, [r0, #0x1a]
	movs r0, #0xff
	mov r1, r8
	strb r0, [r1, #0x1b]
_08071EFA:
	ldrh r0, [r4, #0x16]
	cmp r0, #0
	beq _08071FEA
	subs r0, #1
	strh r0, [r4, #0x16]
	b _08071FEA
	.align 2, 0
_08071F08: .4byte gCurTask
_08071F0C: .4byte 0x0300013C
_08071F10: .4byte 0x03000164
_08071F14: .4byte 0x03000130
_08071F18: .4byte 0x03000134
_08071F1C:
	ldrh r0, [r4, #0x16]
	cmp r0, #0
	beq _08071F32
	subs r0, #1
	strh r0, [r4, #0x16]
	adds r0, r4, #0
	bl sub_80725FC
	ldrh r0, [r4, #0x16]
	cmp r0, #0
	bne _08071FE4
_08071F32:
	ldrb r0, [r7, #0x1a]
	cmp r0, #1
	beq _08071F54
	cmp r0, #1
	bgt _08071F42
	cmp r0, #0
	beq _08071F4C
	b _08071FE0
_08071F42:
	cmp r0, #2
	beq _08071FC8
	cmp r0, #3
	beq _08071FD0
	b _08071FE0
_08071F4C:
	movs r0, #8
	strh r0, [r4, #0x16]
	movs r0, #1
	b _08071FDE
_08071F54:
	movs r0, #0x82
	lsls r0, r0, #1
	strh r0, [r4, #0x16]
	movs r0, #2
	strb r0, [r7, #0x1a]
	strh r6, [r4, #0x26]
	movs r0, #0x10
	ldrsh r1, [r4, r0]
	ldr r0, [r4]
	adds r0, r0, r1
	str r0, [r4, #0x40]
	ldr r0, [r4, #4]
	ldr r1, _08071FB4 @ =0xFFFFE800
	adds r0, r0, r1
	str r0, [r4, #0x44]
	movs r3, #0
	ldr r0, _08071FB8 @ =0x03000088
	adds r0, r0, r5
	mov ip, r0
	ldr r1, _08071FBC @ =0x0300008C
	adds r1, r1, r5
	mov r8, r1
	ldr r0, _08071FC0 @ =0x03000048
	adds r6, r5, r0
	ldr r1, _08071FC4 @ =0x0300004C
	adds r5, r5, r1
_08071F88:
	lsls r1, r3, #3
	adds r2, r6, r1
	ldr r0, [r4, #0x40]
	str r0, [r2]
	adds r1, r5, r1
	ldr r0, [r4, #0x44]
	str r0, [r1]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #7
	bls _08071F88
	movs r0, #0
	mov r1, ip
	str r0, [r1]
	mov r1, r8
	str r0, [r1]
	strh r0, [r4, #0x30]
	movs r0, #1
	strh r0, [r4, #0x32]
	b _08071FE0
	.align 2, 0
_08071FB4: .4byte 0xFFFFE800
_08071FB8: .4byte 0x03000088
_08071FBC: .4byte 0x0300008C
_08071FC0: .4byte 0x03000048
_08071FC4: .4byte 0x0300004C
_08071FC8:
	movs r0, #8
	strh r0, [r4, #0x16]
	movs r0, #3
	b _08071FDE
_08071FD0:
	ldr r0, _08072008 @ =gUnknown_080D58CC
	ldrb r1, [r4, #0x12]
	lsls r1, r1, #1
	adds r1, r1, r0
	ldrh r0, [r1]
	strh r0, [r4, #0x16]
	mov r0, sb
_08071FDE:
	strb r0, [r7, #0x1a]
_08071FE0:
	movs r0, #0xff
	strb r0, [r7, #0x1b]
_08071FE4:
	adds r0, r4, #0
	bl sub_80735C4
_08071FEA:
	ldrb r0, [r4, #0x12]
	cmp r0, #0
	bne _08072040
	ldr r1, _0807200C @ =gStageData
	ldrb r0, [r1, #3]
	cmp r0, #5
	bne _08072020
	ldrb r0, [r1, #6]
	cmp r0, #0
	beq _08072018
	ldr r0, _08072010 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08072014 @ =sub_8073420
	b _0807202C
	.align 2, 0
_08072008: .4byte gUnknown_080D58CC
_0807200C: .4byte gStageData
_08072010: .4byte gCurTask
_08072014: .4byte sub_8073420
_08072018:
	movs r0, #1
	movs r1, #0
	bl sub_8027674
_08072020:
	adds r0, r4, #0
	bl sub_8072D04
	ldr r0, _08072038 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0807203C @ =sub_80733CC
_0807202C:
	str r0, [r1, #8]
	adds r0, r4, #0
	bl sub_80728B4
	b _080720CA
	.align 2, 0
_08072038: .4byte gCurTask
_0807203C: .4byte sub_80733CC
_08072040:
	ldr r0, _08072080 @ =gStageData
	ldrb r1, [r0, #6]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	ldr r1, _08072084 @ =gPlayers
	adds r3, r0, r1
	ldr r2, [r3, #4]
	movs r0, #0x80
	lsls r0, r0, #0x11
	ands r0, r2
	cmp r0, #0
	bne _080720B2
	ldr r0, [r3, #0x14]
	asrs r0, r0, #8
	ldr r1, _08072088 @ =gCamera
	ldr r5, [r1, #0x14]
	cmp r0, r5
	ble _080720B2
	movs r0, #0x80
	lsls r0, r0, #1
	ands r2, r0
	cmp r2, #0
	bne _08072090
	ldr r1, _0807208C @ =sub_8008E38
	adds r0, r3, #0
	bl SetPlayerCallback
	b _080720B2
	.align 2, 0
_08072080: .4byte gStageData
_08072084: .4byte gPlayers
_08072088: .4byte gCamera
_0807208C: .4byte sub_8008E38
_08072090:
	ldr r2, [r3]
	ldr r1, _080720D8 @ =sub_8008E38
	cmp r2, r1
	beq _080720B2
	ldr r0, _080720DC @ =sub_800913C
	cmp r2, r0
	beq _080720B2
	ldr r0, _080720E0 @ =sub_800DF9C
	cmp r2, r0
	beq _080720B2
	adds r0, r5, #0
	subs r0, #8
	lsls r0, r0, #8
	str r0, [r3, #0x14]
	adds r0, r3, #0
	bl SetPlayerCallback
_080720B2:
	adds r0, r4, #0
	bl sub_8072558
	adds r0, r4, #0
	bl sub_8073608
	adds r0, r4, #0
	bl sub_8073570
	adds r0, r4, #0
	bl sub_80728B4
_080720CA:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080720D8: .4byte sub_8008E38
_080720DC: .4byte sub_800913C
_080720E0: .4byte sub_800DF9C

	thumb_func_start sub_80720E4
sub_80720E4: @ 0x080720E4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	ldr r1, _08072128 @ =gCurTask
	ldr r0, [r1]
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r5, r0, r1
	ldr r2, _0807212C @ =0x0300013C
	adds r2, r2, r0
	mov r8, r2
	ldr r4, _08072130 @ =0x03000164
	adds r4, r4, r0
	mov sl, r4
	ldrh r0, [r5, #0x14]
	adds r0, #1
	movs r6, #0
	mov sb, r6
	strh r0, [r5, #0x14]
	ldrh r6, [r5, #0x30]
	cmp r6, #0x14
	bne _0807211A
	b _08072294
_0807211A:
	cmp r6, #0x14
	bgt _08072134
	cmp r6, #0
	beq _08072142
	cmp r6, #0xa
	beq _0807217C
	b _08072424
	.align 2, 0
_08072128: .4byte gCurTask
_0807212C: .4byte 0x0300013C
_08072130: .4byte 0x03000164
_08072134:
	cmp r6, #0x32
	bne _0807213A
	b _0807234C
_0807213A:
	cmp r6, #0x64
	bne _08072140
	b _0807236C
_08072140:
	b _08072424
_08072142:
	movs r1, #0x10
	ldrsh r0, [r5, r1]
	ldr r1, [r5]
	adds r1, r1, r0
	str r1, [r5]
	asrs r1, r1, #8
	ldr r0, _0807215C @ =0x00000514
	cmp r1, r0
	ble _08072160
	movs r0, #0xff
	lsls r0, r0, #8
	b _08072164
	.align 2, 0
_0807215C: .4byte 0x00000514
_08072160:
	movs r0, #0x80
	lsls r0, r0, #1
_08072164:
	strh r0, [r5, #8]
	movs r0, #0xfc
	lsls r0, r0, #8
	strh r0, [r5, #0xa]
	ldr r1, _08072178 @ =gCamera
	ldr r0, [r5, #0x28]
	str r0, [r1, #0x14]
	movs r0, #0xa
	strh r0, [r5, #0x30]
	b _08072424
	.align 2, 0
_08072178: .4byte gCamera
_0807217C:
	ldrh r0, [r5, #0xa]
	adds r0, #0x40
	strh r0, [r5, #0xa]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	movs r1, #0x80
	lsls r1, r1, #3
	cmp r0, r1
	ble _08072190
	strh r1, [r5, #0xa]
_08072190:
	movs r2, #8
	ldrsh r1, [r5, r2]
	ldr r0, [r5]
	adds r2, r0, r1
	str r2, [r5]
	movs r4, #0xa
	ldrsh r1, [r5, r4]
	ldr r0, [r5, #4]
	adds r0, r0, r1
	str r0, [r5, #4]
	movs r6, #8
	ldrsh r0, [r5, r6]
	cmp r0, #0
	beq _080721D0
	cmp r0, #0
	bge _080721C4
	asrs r1, r2, #8
	ldr r0, _080721C0 @ =0x00000514
	cmp r1, r0
	bgt _080721D0
	mov r0, sb
	strh r0, [r5, #8]
	b _080721D0
	.align 2, 0
_080721C0: .4byte 0x00000514
_080721C4:
	asrs r1, r2, #8
	ldr r0, _08072278 @ =0x00000513
	cmp r1, r0
	ble _080721D0
	mov r1, sb
	strh r1, [r5, #8]
_080721D0:
	ldr r0, [r5, #4]
	asrs r0, r0, #8
	ldr r1, _0807227C @ =0x00000596
	cmp r0, r1
	ble _080721F8
	movs r0, #0xfa
	lsls r0, r0, #8
	strh r0, [r5, #0xa]
	movs r0, #0x14
	strh r0, [r5, #0x30]
	movs r0, #0x80
	lsls r0, r0, #4
	movs r3, #1
	rsbs r3, r3, #0
	movs r1, #0x91
	str r1, [sp]
	movs r1, #4
	movs r2, #0
	bl sub_805256C
_080721F8:
	ldrh r1, [r5, #0x14]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08072268
	ldr r3, _08072280 @ =gPseudoRandom
	ldr r0, [r3]
	ldr r2, _08072284 @ =0x00196225
	muls r0, r2, r0
	ldr r1, _08072288 @ =0x3C6EF35F
	adds r0, r0, r1
	ldr r7, _0807228C @ =0x000003FF
	ands r7, r0
	muls r0, r2, r0
	adds r0, r0, r1
	str r0, [r3]
	movs r1, #0x30
	bl __umodsi3
	adds r4, r0, #0
	ldr r1, _08072290 @ =gSineTable
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r7, r2
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r6, #0
	ldrsh r0, [r0, r6]
	muls r0, r4, r0
	lsrs r2, r0, #6
	lsls r0, r7, #1
	adds r0, r0, r1
	movs r1, #0
	ldrsh r0, [r0, r1]
	muls r0, r4, r0
	lsrs r0, r0, #6
	ldr r1, [r5]
	adds r1, r1, r2
	lsls r1, r1, #8
	asrs r1, r1, #0x10
	ldr r2, [r5, #4]
	adds r2, r2, r0
	lsls r2, r2, #8
	asrs r2, r2, #0x10
	movs r3, #0x80
	lsls r3, r3, #3
	str r7, [sp]
	movs r0, #0x14
	str r0, [sp, #4]
	movs r0, #0x80
	str r0, [sp, #8]
	ldr r0, [r5, #0x1c]
	str r0, [sp, #0xc]
	movs r0, #7
	bl sub_8079758
_08072268:
	ldrh r1, [r5, #0x14]
	movs r0, #0x3f
	ands r0, r1
	cmp r0, #0
	beq _08072274
	b _08072424
_08072274:
	b _08072360
	.align 2, 0
_08072278: .4byte 0x00000513
_0807227C: .4byte 0x00000596
_08072280: .4byte gPseudoRandom
_08072284: .4byte 0x00196225
_08072288: .4byte 0x3C6EF35F
_0807228C: .4byte 0x000003FF
_08072290: .4byte gSineTable
_08072294:
	ldrh r0, [r5, #0xa]
	adds r0, #0x20
	strh r0, [r5, #0xa]
	movs r2, #8
	ldrsh r1, [r5, r2]
	ldr r0, [r5]
	adds r0, r0, r1
	str r0, [r5]
	movs r4, #0xa
	ldrsh r1, [r5, r4]
	ldr r0, [r5, #4]
	adds r0, r0, r1
	str r0, [r5, #4]
	asrs r0, r0, #8
	movs r1, #0xc8
	lsls r1, r1, #3
	cmp r0, r1
	ble _080722C0
	movs r0, #0x3c
	strh r0, [r5, #0x32]
	movs r0, #0x32
	strh r0, [r5, #0x30]
_080722C0:
	ldrh r1, [r5, #0x14]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0807232A
	ldr r3, _08072338 @ =gPseudoRandom
	ldr r0, [r3]
	ldr r2, _0807233C @ =0x00196225
	muls r0, r2, r0
	ldr r1, _08072340 @ =0x3C6EF35F
	adds r0, r0, r1
	ldr r7, _08072344 @ =0x000003FF
	ands r7, r0
	muls r0, r2, r0
	adds r0, r0, r1
	str r0, [r3]
	movs r4, #0x1f
	ands r4, r0
	ldr r1, _08072348 @ =gSineTable
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r7, r2
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r2, #0
	ldrsh r0, [r0, r2]
	muls r0, r4, r0
	lsrs r2, r0, #6
	lsls r0, r7, #1
	adds r0, r0, r1
	movs r1, #0
	ldrsh r0, [r0, r1]
	muls r0, r4, r0
	lsrs r0, r0, #6
	ldr r1, [r5]
	adds r1, r1, r2
	lsls r1, r1, #8
	asrs r1, r1, #0x10
	ldr r2, [r5, #4]
	adds r2, r2, r0
	lsls r2, r2, #8
	asrs r2, r2, #0x10
	movs r3, #0x80
	lsls r3, r3, #3
	str r7, [sp]
	str r6, [sp, #4]
	movs r0, #0x20
	str r0, [sp, #8]
	ldr r0, [r5, #0x1c]
	str r0, [sp, #0xc]
	movs r0, #7
	bl sub_8079758
_0807232A:
	ldrh r1, [r5, #0x14]
	movs r0, #0x3f
	ands r0, r1
	cmp r0, #0
	bne _08072424
	b _08072360
	.align 2, 0
_08072338: .4byte gPseudoRandom
_0807233C: .4byte 0x00196225
_08072340: .4byte 0x3C6EF35F
_08072344: .4byte 0x000003FF
_08072348: .4byte gSineTable
_0807234C:
	ldrh r0, [r5, #0x32]
	subs r0, #1
	strh r0, [r5, #0x32]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _08072424
	movs r0, #0xb4
	strh r0, [r5, #0x32]
	movs r0, #0x64
	strh r0, [r5, #0x30]
_08072360:
	ldr r0, _08072368 @ =0x00000221
	bl m4aSongNumStart
	b _08072424
	.align 2, 0
_08072368: .4byte 0x00000221
_0807236C:
	ldrh r1, [r5, #0x32]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080723F6
	ldr r4, _080724B8 @ =gPseudoRandom
	ldr r0, [r4]
	ldr r3, _080724BC @ =0x00196225
	adds r1, r0, #0
	muls r1, r3, r1
	ldr r2, _080724C0 @ =0x3C6EF35F
	adds r1, r1, r2
	movs r0, #0xff
	ands r0, r1
	movs r6, #0xa0
	lsls r6, r6, #2
	adds r7, r0, r6
	adds r0, r1, #0
	muls r0, r3, r0
	adds r0, r0, r2
	str r0, [r4]
	movs r1, #0x30
	bl __umodsi3
	adds r4, r0, #0
	movs r0, #3
	adds r3, r4, #0
	ands r3, r0
	lsls r3, r3, #8
	ldr r2, _080724C4 @ =gSineTable
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r7, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	movs r6, #0
	ldrsh r0, [r0, r6]
	adds r1, r0, #0
	muls r1, r4, r1
	lsls r0, r7, #1
	adds r0, r0, r2
	movs r2, #0
	ldrsh r0, [r0, r2]
	adds r2, r0, #0
	muls r2, r4, r2
	lsrs r1, r1, #0xe
	ldr r4, _080724C8 @ =0x00000514
	adds r1, r1, r4
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	lsrs r2, r2, #0xe
	ldr r6, _080724CC @ =0x00000604
	adds r2, r2, r6
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	movs r4, #0x80
	lsls r4, r4, #3
	adds r0, r4, #0
	orrs r3, r0
	str r7, [sp]
	movs r0, #0x14
	str r0, [sp, #4]
	mov r6, sb
	str r6, [sp, #8]
	ldr r0, [r5, #0x1c]
	str r0, [sp, #0xc]
	movs r0, #7
	bl sub_8079758
_080723F6:
	ldrh r1, [r5, #0x32]
	movs r0, #0x3f
	ands r0, r1
	cmp r0, #0
	bne _08072406
	ldr r0, _080724D0 @ =0x00000221
	bl m4aSongNumStart
_08072406:
	ldrh r0, [r5, #0x32]
	subs r0, #1
	strh r0, [r5, #0x32]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bne _08072424
	strh r0, [r5, #0x14]
	movs r0, #0xfa
	lsls r0, r0, #2
	strh r0, [r5, #0x30]
	ldr r0, _080724D4 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080724D8 @ =sub_80724E4
	str r0, [r1, #8]
_08072424:
	ldr r0, [r5]
	asrs r0, r0, #8
	ldr r4, _080724DC @ =gCamera
	ldr r1, [r4]
	subs r0, r0, r1
	mov r1, r8
	strh r0, [r1, #0x10]
	ldr r0, [r5, #4]
	asrs r0, r0, #8
	ldr r1, [r4, #4]
	subs r0, r0, r1
	mov r2, r8
	strh r0, [r2, #0x12]
	ldr r0, [r2, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	str r0, [r2, #8]
	mov r0, r8
	bl DisplaySprite
	mov r6, r8
	ldr r0, [r6, #8]
	ldr r1, _080724E0 @ =0xFFFFFBFF
	ands r0, r1
	str r0, [r6, #8]
	mov r0, r8
	bl DisplaySprite
	ldrb r0, [r6, #0x1a]
	cmp r0, #0
	bne _08072488
	ldr r0, [r5]
	asrs r0, r0, #8
	ldr r1, [r4]
	subs r0, r0, r1
	mov r1, sl
	strh r0, [r1, #0x10]
	ldr r0, [r5, #4]
	asrs r0, r0, #8
	ldr r1, [r4, #4]
	subs r0, r0, r1
	mov r2, sl
	strh r0, [r2, #0x12]
	mov r0, sl
	bl UpdateSpriteAnimation
	mov r0, sl
	bl DisplaySprite
_08072488:
	movs r4, #0x98
	lsls r4, r4, #1
	adds r0, r5, r4
	ldr r1, [r0]
	ldr r0, [r1, #4]
	movs r2, #0x80
	lsls r2, r2, #0x14
	orrs r0, r2
	str r0, [r1, #4]
	movs r6, #0x9a
	lsls r6, r6, #1
	adds r0, r5, r6
	ldr r1, [r0]
	ldr r0, [r1, #4]
	orrs r0, r2
	str r0, [r1, #4]
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080724B8: .4byte gPseudoRandom
_080724BC: .4byte 0x00196225
_080724C0: .4byte 0x3C6EF35F
_080724C4: .4byte gSineTable
_080724C8: .4byte 0x00000514
_080724CC: .4byte 0x00000604
_080724D0: .4byte 0x00000221
_080724D4: .4byte gCurTask
_080724D8: .4byte sub_80724E4
_080724DC: .4byte gCamera
_080724E0: .4byte 0xFFFFFBFF

	thumb_func_start sub_80724E4
sub_80724E4: @ 0x080724E4
	push {r4, lr}
	sub sp, #0x10
	ldr r0, _08072508 @ =gCurTask
	ldr r0, [r0]
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r4, r0, r1
	ldr r1, _0807250C @ =0x03000130
	adds r0, r0, r1
	ldr r0, [r0]
	ldrh r1, [r4, #0x14]
	cmp r1, #0
	beq _08072510
	cmp r1, #1
	beq _0807253C
	b _08072550
	.align 2, 0
_08072508: .4byte gCurTask
_0807250C: .4byte 0x03000130
_08072510:
	ldr r0, [r4]
	asrs r0, r0, #8
	str r0, [sp]
	ldr r0, [r4, #4]
	asrs r0, r0, #8
	subs r0, #0x10
	str r0, [sp, #4]
	ldr r0, [r4]
	asrs r0, r0, #8
	str r0, [sp, #8]
	ldr r0, [r4, #4]
	asrs r0, r0, #8
	str r0, [sp, #0xc]
	ldr r1, _08072538 @ =sub_807A37C
	mov r0, sp
	bl sub_8078E34
	movs r0, #1
	b _0807254E
	.align 2, 0
_08072538: .4byte sub_807A37C
_0807253C:
	ldr r1, [r0, #4]
	movs r0, #0x80
	lsls r0, r0, #0x14
	ands r1, r0
	cmp r1, #0
	bne _08072550
	ldr r0, [r4, #0xc]
	strb r1, [r0]
	movs r0, #0x64
_0807254E:
	strh r0, [r4, #0x14]
_08072550:
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8072558
sub_8072558: @ 0x08072558
	push {lr}
	mov ip, r0
	movs r0, #0
	mov r1, ip
	strb r0, [r1, #0x1b]
	ldr r1, [r1, #4]
	ldr r0, _080725F0 @ =0x00036100
	cmp r1, r0
	bgt _080725EC
	movs r0, #1
	mov r2, ip
	strb r0, [r2, #0x1b]
	movs r0, #0x98
	lsls r0, r0, #1
	add r0, ip
	ldr r1, [r0]
	ldr r0, [r1, #0x14]
	movs r2, #0x80
	lsls r2, r2, #0xa
	adds r0, r0, r2
	str r0, [r1, #0x14]
	movs r0, #0x9a
	lsls r0, r0, #1
	add r0, ip
	ldr r1, [r0]
	ldr r0, [r1, #0x14]
	adds r0, r0, r2
	str r0, [r1, #0x14]
	mov r1, ip
	ldr r0, [r1, #4]
	adds r0, r0, r2
	str r0, [r1, #4]
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r2, #0
	ldrh r1, [r1, #0x24]
	adds r0, r0, r1
	mov r2, ip
	strh r0, [r2, #0x24]
	movs r0, #0x9c
	lsls r0, r0, #1
	add r0, ip
	ldr r0, [r0]
	cmp r0, #0
	beq _080725CA
	ldr r0, _080725F4 @ =gStageData
	adds r0, #0x98
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r1, r1, r0
	ldr r0, [r1, #4]
	movs r2, #0x80
	lsls r2, r2, #0xa
	adds r0, r0, r2
	str r0, [r1, #4]
_080725CA:
	ldr r3, _080725F8 @ =gCamera
	ldr r0, [r3, #4]
	movs r1, #0x80
	lsls r1, r1, #2
	adds r0, r0, r1
	str r0, [r3, #4]
	mov r2, ip
	ldr r0, [r2, #4]
	asrs r0, r0, #8
	adds r2, r0, #0
	subs r2, #0xb4
	str r2, [r3, #0x10]
	adds r0, #0x14
	str r0, [r3, #0x14]
	movs r0, #0
	bl sub_802B6D0
_080725EC:
	pop {r0}
	bx r0
	.align 2, 0
_080725F0: .4byte 0x00036100
_080725F4: .4byte gStageData
_080725F8: .4byte gCamera

	thumb_func_start sub_80725FC
sub_80725FC: @ 0x080725FC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r4, r0, #0
	movs r1, #0x9e
	lsls r1, r1, #1
	adds r0, r4, r1
	ldrb r0, [r0, #0x1a]
	cmp r0, #2
	beq _08072618
	b _0807289E
_08072618:
	ldrh r5, [r4, #0x30]
	cmp r5, #0x64
	beq _0807270C
	cmp r5, #0x64
	bgt _0807262C
	cmp r5, #0
	beq _0807264E
	cmp r5, #0xa
	beq _08072676
	b _0807271A
_0807262C:
	movs r1, #0x96
	lsls r1, r1, #1
	cmp r5, r1
	bne _08072636
	b _0807275C
_08072636:
	cmp r5, r1
	bgt _08072642
	cmp r5, #0xc8
	bne _08072640
	b _08072748
_08072640:
	b _0807271A
_08072642:
	movs r0, #0xfa
	lsls r0, r0, #2
	cmp r5, r0
	bne _0807264C
	b _08072788
_0807264C:
	b _0807271A
_0807264E:
	movs r0, #0x3c
	strh r0, [r4, #0x32]
	movs r0, #0xa
	strh r0, [r4, #0x30]
	movs r0, #0xfa
	lsls r0, r0, #2
	strh r0, [r4, #0x16]
	adds r2, r4, #0
	adds r2, #0x88
	str r5, [r2]
	adds r1, r4, #0
	adds r1, #0x8c
	adds r0, #0x18
	str r0, [r1]
	strh r5, [r4, #0x26]
	movs r0, #0xc0
	lsls r0, r0, #2
	strh r0, [r4, #0x3c]
	adds r6, r2, #0
	b _080727BA
_08072676:
	ldrh r0, [r4, #0x32]
	subs r0, #1
	strh r0, [r4, #0x32]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _08072690
	movs r0, #0x8c
	lsls r0, r0, #2
	bl m4aSongNumStart
	strh r5, [r4, #0x32]
	movs r0, #0x64
	strh r0, [r4, #0x30]
_08072690:
	movs r2, #0x10
	ldrsh r1, [r4, r2]
	ldr r0, [r4]
	adds r0, r0, r1
	asrs r5, r0, #8
	ldr r1, [r4, #4]
	asrs r0, r1, #8
	adds r2, r0, #0
	subs r2, #0x18
	movs r3, #0x98
	lsls r3, r3, #1
	adds r0, r4, r3
	ldr r3, [r0]
	ldr r7, _080726F8 @ =0xFFFFE800
	adds r1, r1, r7
	ldr r0, [r3, #0x14]
	adds r6, r4, #0
	adds r6, #0x88
	cmp r0, r1
	blt _080726BA
	b _080727BA
_080726BA:
	asrs r0, r0, #8
	subs r0, r0, r2
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r3, #0x10]
	asrs r1, r1, #8
	subs r1, r1, r5
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	bl sa2__sub_8004418
	adds r1, r0, #0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	strh r1, [r4, #0x3c]
	ldr r0, _080726FC @ =0xFFFFFF00
	adds r1, r1, r0
	ldr r2, _08072700 @ =0x000003FF
	adds r5, r2, #0
	ands r1, r5
	ldrh r0, [r4, #0x26]
	movs r2, #0xa
	bl sa2__sub_808558C
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _08072704
	ldrh r0, [r4, #0x26]
	adds r0, #4
	ands r0, r5
	b _080727B8
	.align 2, 0
_080726F8: .4byte 0xFFFFE800
_080726FC: .4byte 0xFFFFFF00
_08072700: .4byte 0x000003FF
_08072704:
	ldrh r0, [r4, #0x26]
	subs r0, #4
	ands r0, r5
	b _080727B8
_0807270C:
	ldrh r1, [r4, #0x32]
	movs r3, #0x32
	ldrsh r0, [r4, r3]
	cmp r0, #0
	beq _08072720
	subs r0, r1, #1
	strh r0, [r4, #0x32]
_0807271A:
	adds r6, r4, #0
	adds r6, #0x88
	b _080727BA
_08072720:
	adds r2, r4, #0
	adds r2, #0x88
	adds r0, r4, #0
	adds r0, #0x8c
	ldr r1, [r2]
	ldr r0, [r0]
	adds r1, r1, r0
	str r1, [r2]
	ldr r0, _08072744 @ =0x00008BFF
	adds r6, r2, #0
	cmp r1, r0
	ble _080727BA
	movs r0, #0x3c
	strh r0, [r4, #0x32]
	movs r0, #0xc8
	strh r0, [r4, #0x30]
	b _080727BA
	.align 2, 0
_08072744: .4byte 0x00008BFF
_08072748:
	ldrh r0, [r4, #0x32]
	subs r0, #1
	strh r0, [r4, #0x32]
	lsls r0, r0, #0x10
	adds r6, r4, #0
	adds r6, #0x88
	cmp r0, #0
	bne _080727BA
	strh r1, [r4, #0x30]
	b _080727BA
_0807275C:
	adds r0, r4, #0
	adds r0, #0x88
	adds r3, r4, #0
	adds r3, #0x8c
	ldr r1, [r0]
	ldr r2, [r3]
	subs r1, r1, r2
	str r1, [r0]
	adds r6, r0, #0
	cmp r1, #0
	bgt _080727BA
	movs r0, #0
	str r0, [r6]
	str r0, [r3]
	movs r0, #0x3c
	strh r0, [r4, #0x32]
	movs r0, #0xfa
	lsls r0, r0, #2
	strh r0, [r4, #0x30]
	movs r0, #0x78
	strh r0, [r4, #0x16]
	b _080727BA
_08072788:
	ldrh r1, [r4, #0x26]
	adds r2, r1, #0
	adds r6, r4, #0
	adds r6, #0x88
	cmp r2, #0
	beq _080727BA
	movs r0, #0x80
	lsls r0, r0, #2
	cmp r2, r0
	bls _080727A2
	adds r0, r1, #0
	adds r0, #8
	b _080727A6
_080727A2:
	adds r0, r1, #0
	subs r0, #8
_080727A6:
	strh r0, [r4, #0x26]
	ldrh r1, [r4, #0x26]
	movs r0, #0x80
	lsls r0, r0, #3
	adds r6, r4, #0
	adds r6, #0x88
	cmp r1, r0
	bls _080727BA
	movs r0, #0
_080727B8:
	strh r0, [r4, #0x26]
_080727BA:
	ldr r3, [r6]
	cmp r3, #0
	beq _08072884
	movs r7, #0x10
	ldrsh r0, [r4, r7]
	ldr r1, [r4]
	adds r5, r1, r0
	ldr r0, [r4, #4]
	ldr r1, _08072878 @ =0xFFFFE800
	adds r2, r0, r1
	adds r0, r3, #0
	cmp r0, #0
	bge _080727D6
	adds r0, #7
_080727D6:
	asrs r0, r0, #3
	mov r8, r0
	ldr r0, _0807287C @ =gSineTable
	ldrh r3, [r4, #0x3c]
	movs r7, #0x80
	lsls r7, r7, #1
	adds r1, r3, r7
	lsls r1, r1, #1
	adds r1, r1, r0
	movs r7, #0
	ldrsh r1, [r1, r7]
	mov r7, r8
	muls r7, r1, r7
	adds r1, r7, #0
	mov sl, r0
	cmp r1, #0
	bge _080727FC
	ldr r0, _08072880 @ =0x00003FFF
	adds r1, r1, r0
_080727FC:
	asrs r1, r1, #0xe
	mov sb, r1
	lsls r0, r3, #1
	add r0, sl
	movs r1, #0
	ldrsh r0, [r0, r1]
	mov r3, r8
	muls r3, r0, r3
	adds r0, r3, #0
	cmp r0, #0
	bge _08072816
	ldr r7, _08072880 @ =0x00003FFF
	adds r0, r0, r7
_08072816:
	asrs r0, r0, #0xe
	mov r8, r0
	movs r3, #0
	movs r0, #0x48
	adds r0, r0, r4
	mov ip, r0
	adds r1, r4, #0
	adds r1, #0x4c
	str r1, [sp]
_08072828:
	lsls r1, r3, #3
	mov r7, ip
	adds r0, r7, r1
	str r5, [r0]
	ldr r0, [sp]
	adds r1, r0, r1
	str r2, [r1]
	add r5, sb
	add r2, r8
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #7
	bls _08072828
	ldrh r1, [r4, #0x3c]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r1, r2
	lsls r0, r0, #1
	add r0, sl
	movs r3, #0
	ldrsh r0, [r0, r3]
	ldr r2, [r6]
	muls r0, r2, r0
	cmp r0, #0
	bge _08072860
	ldr r7, _08072880 @ =0x00003FFF
	adds r0, r0, r7
_08072860:
	asrs r5, r0, #0xe
	lsls r0, r1, #1
	add r0, sl
	movs r1, #0
	ldrsh r0, [r0, r1]
	muls r0, r2, r0
	cmp r0, #0
	bge _08072874
	ldr r2, _08072880 @ =0x00003FFF
	adds r0, r0, r2
_08072874:
	asrs r2, r0, #0xe
	b _08072888
	.align 2, 0
_08072878: .4byte 0xFFFFE800
_0807287C: .4byte gSineTable
_08072880: .4byte 0x00003FFF
_08072884:
	movs r5, #0
	movs r2, #0
_08072888:
	movs r3, #0x10
	ldrsh r1, [r4, r3]
	ldr r0, [r4]
	adds r0, r0, r1
	adds r0, r0, r5
	str r0, [r4, #0x40]
	ldr r7, _080728B0 @ =0xFFFFE800
	adds r1, r2, r7
	ldr r0, [r4, #4]
	adds r0, r0, r1
	str r0, [r4, #0x44]
_0807289E:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080728B0: .4byte 0xFFFFE800

	thumb_func_start sub_80728B4
sub_80728B4: @ 0x080728B4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	adds r6, r0, #0
	movs r0, #0x9e
	lsls r0, r0, #1
	adds r0, r0, r6
	mov sb, r0
	movs r1, #0xb2
	lsls r1, r1, #1
	adds r1, r6, r1
	str r1, [sp, #4]
	movs r0, #0xc6
	lsls r0, r0, #1
	adds r0, r6, r0
	str r0, [sp, #8]
	movs r1, #0xda
	lsls r1, r1, #1
	adds r1, r6, r1
	str r1, [sp, #0xc]
	adds r4, r6, #0
	adds r4, #0xe0
	ldr r0, [r6]
	asrs r0, r0, #8
	ldr r7, _08072B68 @ =gCamera
	ldr r1, [r7]
	subs r0, r0, r1
	subs r0, #0x78
	strh r0, [r4, #0x10]
	ldr r0, [r6, #4]
	asrs r0, r0, #8
	ldr r1, [r7, #4]
	subs r0, r0, r1
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	movs r0, #0x84
	lsls r0, r0, #1
	adds r4, r6, r0
	ldr r0, [r6]
	asrs r0, r0, #8
	ldr r1, [r7]
	subs r0, r0, r1
	adds r0, #0x78
	strh r0, [r4, #0x10]
	ldr r0, [r6, #4]
	asrs r0, r0, #8
	ldr r1, [r7, #4]
	subs r0, r0, r1
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	mov r1, sb
	ldrb r0, [r1, #0x1a]
	cmp r0, #2
	beq _0807293C
	b _08072A72
_0807293C:
	adds r4, r6, #0
	adds r4, #0x90
	ldr r0, [r6, #0x40]
	asrs r0, r0, #8
	ldr r1, [r7]
	subs r0, r0, r1
	strh r0, [r4, #0x10]
	ldr r0, [r6, #0x44]
	asrs r0, r0, #8
	ldr r1, [r7, #4]
	subs r0, r0, r1
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl DisplaySprite
	adds r4, #0x28
	movs r5, #0
	movs r0, #0x48
	adds r0, r0, r6
	mov sl, r0
	movs r1, #0x4c
	adds r1, r1, r6
	mov r8, r1
_0807296A:
	lsls r2, r5, #3
	mov r1, sl
	adds r0, r1, r2
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r1, [r7]
	subs r0, r0, r1
	strh r0, [r4, #0x10]
	add r2, r8
	ldr r0, [r2]
	asrs r0, r0, #8
	ldr r1, [r7, #4]
	subs r0, r0, r1
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #7
	bls _0807296A
	movs r1, #0x98
	lsls r1, r1, #1
	adds r0, r6, r1
	ldr r0, [r0]
	mov r8, r0
	ldr r0, _08072B6C @ =gCurTask
	ldr r0, [r0]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	ldr r1, _08072B70 @ =0x03000090
	adds r7, r5, r1
	mov r0, r8
	bl sub_802C080
	cmp r0, #0
	bne _08072A04
	ldr r1, [r4, #0x40]
	asrs r1, r1, #8
	ldr r2, [r4, #0x44]
	asrs r2, r2, #8
	mov r0, r8
	str r0, [sp]
	adds r0, r7, #0
	movs r3, #0
	bl sub_8020CE0
	ldr r1, _08072B74 @ =0x030000B8
	adds r7, r5, r1
	movs r4, #0
	ldr r0, _08072B78 @ =0x03000048
	adds r0, r0, r5
	mov sl, r0
	subs r1, #0x6c
	adds r5, r5, r1
_080729DE:
	lsls r2, r4, #3
	mov r1, sl
	adds r0, r1, r2
	ldr r1, [r0]
	asrs r1, r1, #8
	adds r2, r5, r2
	ldr r2, [r2]
	asrs r2, r2, #8
	mov r0, r8
	str r0, [sp]
	adds r0, r7, #0
	movs r3, #0
	bl sub_8020CE0
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #7
	bls _080729DE
_08072A04:
	movs r1, #0x9a
	lsls r1, r1, #1
	adds r0, r6, r1
	ldr r0, [r0]
	mov r8, r0
	ldr r0, _08072B6C @ =gCurTask
	ldr r0, [r0]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	ldr r1, _08072B70 @ =0x03000090
	adds r7, r5, r1
	mov r0, r8
	bl sub_802C080
	cmp r0, #0
	bne _08072A72
	ldr r1, [r4, #0x40]
	asrs r1, r1, #8
	ldr r2, [r4, #0x44]
	asrs r2, r2, #8
	mov r0, r8
	str r0, [sp]
	adds r0, r7, #0
	movs r3, #0
	bl sub_8020CE0
	ldr r1, _08072B74 @ =0x030000B8
	adds r7, r5, r1
	movs r4, #0
	ldr r0, _08072B78 @ =0x03000048
	adds r0, r0, r5
	mov sl, r0
	subs r1, #0x6c
	adds r5, r5, r1
_08072A4C:
	lsls r2, r4, #3
	mov r1, sl
	adds r0, r1, r2
	ldr r1, [r0]
	asrs r1, r1, #8
	adds r2, r5, r2
	ldr r2, [r2]
	asrs r2, r2, #8
	mov r0, r8
	str r0, [sp]
	adds r0, r7, #0
	movs r3, #0
	bl sub_8020CE0
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #7
	bls _08072A4C
_08072A72:
	movs r0, #0x10
	ldrsh r1, [r6, r0]
	ldr r0, [r6]
	adds r0, r0, r1
	asrs r0, r0, #8
	ldr r4, _08072B68 @ =gCamera
	ldr r1, [r4]
	subs r0, r0, r1
	mov r1, sb
	strh r0, [r1, #0x10]
	ldr r0, [r6, #4]
	asrs r0, r0, #8
	ldr r1, [r4, #4]
	subs r0, r0, r1
	mov r1, sb
	strh r0, [r1, #0x12]
	mov r0, sb
	bl UpdateSpriteAnimation
	mov r1, sb
	ldr r0, [r1, #8]
	movs r7, #0x80
	lsls r7, r7, #3
	orrs r0, r7
	str r0, [r1, #8]
	mov r0, sb
	bl DisplaySprite
	mov r1, sb
	ldr r0, [r1, #8]
	ldr r5, _08072B7C @ =0xFFFFFBFF
	ands r0, r5
	str r0, [r1, #8]
	mov r0, sb
	bl DisplaySprite
	mov r1, sb
	ldrb r0, [r1, #0x1a]
	cmp r0, #0
	bne _08072AEC
	movs r0, #0x10
	ldrsh r1, [r6, r0]
	ldr r0, [r6]
	adds r0, r0, r1
	asrs r0, r0, #8
	ldr r1, [r4]
	subs r0, r0, r1
	ldr r1, [sp, #4]
	strh r0, [r1, #0x10]
	ldr r0, [r6, #4]
	asrs r0, r0, #8
	ldr r1, [r4, #4]
	subs r0, r0, r1
	ldr r1, [sp, #4]
	strh r0, [r1, #0x12]
	ldr r0, [sp, #4]
	bl UpdateSpriteAnimation
	ldr r0, [sp, #4]
	bl DisplaySprite
_08072AEC:
	ldr r0, [r6]
	asrs r0, r0, #8
	ldr r1, [r4]
	subs r0, r0, r1
	ldr r1, [sp, #8]
	strh r0, [r1, #0x10]
	ldr r0, [r6, #4]
	asrs r0, r0, #8
	ldr r1, [r4, #4]
	subs r0, r0, r1
	ldr r1, [sp, #8]
	strh r0, [r1, #0x12]
	ldr r0, [r1, #8]
	orrs r0, r7
	str r0, [r1, #8]
	ldr r0, [sp, #8]
	bl DisplaySprite
	ldr r1, [sp, #8]
	ldr r0, [r1, #8]
	ands r0, r5
	str r0, [r1, #8]
	ldr r0, [sp, #8]
	bl DisplaySprite
	ldr r0, [r6]
	asrs r0, r0, #8
	ldr r1, [r4]
	subs r0, r0, r1
	subs r0, #0x5c
	ldr r1, [sp, #0xc]
	strh r0, [r1, #0x10]
	ldr r0, [r6, #4]
	asrs r0, r0, #8
	ldr r1, [r4, #4]
	subs r0, r0, r1
	ldr r1, [sp, #0xc]
	strh r0, [r1, #0x12]
	ldr r0, [r1, #8]
	ands r0, r5
	str r0, [r1, #8]
	movs r5, #0
_08072B40:
	ldr r0, [sp, #0xc]
	bl DisplaySprite
	ldr r1, [sp, #0xc]
	ldrh r0, [r1, #0x10]
	adds r0, #8
	strh r0, [r1, #0x10]
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #0x16
	bls _08072B40
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08072B68: .4byte gCamera
_08072B6C: .4byte gCurTask
_08072B70: .4byte 0x03000090
_08072B74: .4byte 0x030000B8
_08072B78: .4byte 0x03000048
_08072B7C: .4byte 0xFFFFFBFF

	thumb_func_start sub_8072B80
sub_8072B80: @ 0x08072B80
	push {r4, r5, r6, lr}
	adds r2, r0, #0
	movs r1, #0x98
	lsls r1, r1, #1
	adds r0, r2, r1
	ldr r5, [r0]
	movs r4, #0x9e
	lsls r4, r4, #1
	adds r3, r2, r4
	ldr r4, [r5, #4]
	movs r6, #0x80
	lsls r6, r6, #1
	ands r4, r6
	cmp r4, #0
	beq _08072BA0
	b _08072CFA
_08072BA0:
	ldrh r1, [r2, #0x34]
	cmp r1, #0x64
	beq _08072C50
	cmp r1, #0x64
	bgt _08072BBE
	cmp r1, #0xa
	beq _08072C1C
	cmp r1, #0xa
	bgt _08072BB8
	cmp r1, #0
	beq _08072BDA
	b _08072CFA
_08072BB8:
	cmp r1, #0x14
	beq _08072BEE
	b _08072CFA
_08072BBE:
	cmp r1, #0xc8
	bne _08072BC4
	b _08072CD0
_08072BC4:
	cmp r1, #0xc8
	bgt _08072BCE
	cmp r1, #0x96
	beq _08072C8C
	b _08072CFA
_08072BCE:
	movs r0, #0xfa
	lsls r0, r0, #2
	cmp r1, r0
	bne _08072BD8
	b _08072CE0
_08072BD8:
	b _08072CFA
_08072BDA:
	strh r4, [r2, #0x3e]
	movs r0, #0xc0
	lsls r0, r0, #2
	strh r0, [r2, #0x38]
	strh r6, [r2, #0x3a]
	movs r0, #0x3c
	strh r0, [r2, #0x36]
	movs r0, #0x14
	strh r0, [r2, #0x34]
	b _08072CFA
_08072BEE:
	ldrh r0, [r2, #0x36]
	subs r0, #1
	strh r0, [r2, #0x36]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _08072BFC
	b _08072CFA
_08072BFC:
	adds r3, r2, #0
	adds r3, #0xe0
	ldr r0, _08072C18 @ =0x000004DA
	strh r0, [r3, #0xc]
	movs r1, #1
	strb r1, [r3, #0x1a]
	movs r4, #0x84
	lsls r4, r4, #1
	adds r3, r2, r4
	strh r0, [r3, #0xc]
	movs r0, #2
	strb r0, [r3, #0x1a]
	strh r1, [r2, #0x36]
	b _08072CDA
	.align 2, 0
_08072C18: .4byte 0x000004DA
_08072C1C:
	ldrh r0, [r2, #0x36]
	subs r0, #1
	strh r0, [r2, #0x36]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _08072CFA
	ldr r0, [r2, #4]
	ldr r1, [r5, #0x14]
	subs r0, r0, r1
	asrs r0, r0, #8
	cmp r0, #0
	bge _08072C36
	rsbs r0, r0, #0
_08072C36:
	cmp r0, #0x64
	ble _08072C3E
	movs r0, #0x96
	b _08072C40
_08072C3E:
	movs r0, #0x64
_08072C40:
	strh r0, [r2, #0x34]
	ldr r0, _08072C4C @ =0x0000022F
	bl m4aSongNumStart
	b _08072CFA
	.align 2, 0
_08072C4C: .4byte 0x0000022F
_08072C50:
	ldrh r0, [r2, #0x38]
	subs r0, #0x10
	ldr r3, _08072C88 @ =0x000003FF
	adds r1, r3, #0
	ands r0, r1
	strh r0, [r2, #0x38]
	ldrh r0, [r2, #0x3a]
	adds r0, #0x10
	ands r0, r1
	strh r0, [r2, #0x3a]
	ldr r0, [r2, #4]
	subs r0, #0x80
	str r0, [r2, #4]
	ldrh r0, [r2, #0x3e]
	adds r0, #0x10
	strh r0, [r2, #0x3e]
	lsls r0, r0, #0x10
	movs r1, #0xaa
	lsls r1, r1, #0x11
	cmp r0, r1
	bls _08072CFA
	strh r4, [r2, #0x3e]
	movs r0, #0xc0
	lsls r0, r0, #2
	strh r0, [r2, #0x38]
	strh r6, [r2, #0x3a]
	movs r0, #1
	b _08072CD8
	.align 2, 0
_08072C88: .4byte 0x000003FF
_08072C8C:
	ldrh r0, [r2, #0x38]
	subs r0, #0x10
	ldr r3, _08072CC8 @ =0x000003FF
	adds r1, r3, #0
	ands r0, r1
	strh r0, [r2, #0x38]
	ldrh r0, [r2, #0x3a]
	adds r0, #0x10
	ands r0, r1
	strh r0, [r2, #0x3a]
	ldr r0, [r2, #4]
	ldr r1, _08072CCC @ =0xFFFFFF00
	adds r0, r0, r1
	str r0, [r2, #4]
	ldrh r0, [r2, #0x3e]
	adds r0, #0x10
	strh r0, [r2, #0x3e]
	lsls r0, r0, #0x10
	movs r1, #0xaa
	lsls r1, r1, #0x11
	cmp r0, r1
	bls _08072CFA
	strh r4, [r2, #0x3e]
	movs r0, #0xc0
	lsls r0, r0, #2
	strh r0, [r2, #0x38]
	strh r6, [r2, #0x3a]
	movs r0, #1
	b _08072CD8
	.align 2, 0
_08072CC8: .4byte 0x000003FF
_08072CCC: .4byte 0xFFFFFF00
_08072CD0:
	ldrb r0, [r3, #0x1a]
	cmp r0, #0
	bne _08072CFA
	movs r0, #0x1e
_08072CD8:
	strh r0, [r2, #0x36]
_08072CDA:
	movs r0, #0xa
	strh r0, [r2, #0x34]
	b _08072CFA
_08072CE0:
	ldrh r0, [r2, #0x38]
	subs r0, #0x10
	ldr r3, _08072D00 @ =0x000003FF
	adds r1, r3, #0
	ands r0, r1
	strh r0, [r2, #0x38]
	ldrh r0, [r2, #0x3a]
	adds r0, #0x10
	ands r0, r1
	strh r0, [r2, #0x3a]
	ldr r0, [r2, #4]
	subs r0, #0x80
	str r0, [r2, #4]
_08072CFA:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08072D00: .4byte 0x000003FF

	thumb_func_start sub_8072D04
sub_8072D04: @ 0x08072D04
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r0, #0x96
	lsls r0, r0, #1
	strh r0, [r6, #0x14]
	movs r5, #0
	ldr r7, _08072D9C @ =Player_800E67C
_08072D14:
	lsls r1, r5, #2
	movs r2, #0x98
	lsls r2, r2, #1
	adds r0, r6, r2
	adds r0, r0, r1
	ldr r4, [r0]
	ldr r0, [r4, #4]
	movs r1, #0x80
	lsls r1, r1, #0x14
	orrs r0, r1
	str r0, [r4, #4]
	movs r3, #0x1c
	ldrsh r0, [r4, r3]
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	strh r0, [r4, #0x1c]
	movs r1, #0x18
	ldrsh r0, [r4, r1]
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	strh r0, [r4, #0x18]
	adds r0, r4, #0
	bl sub_8016F28
	adds r0, r4, #0
	adds r1, r7, #0
	bl SetPlayerCallback
	adds r2, r4, #0
	adds r2, #0x2c
	ldrb r0, [r2]
	movs r3, #5
	rsbs r3, r3, #0
	adds r1, r3, #0
	ands r0, r1
	strb r0, [r2]
	ldr r1, [r4, #4]
	ldr r0, _08072DA0 @ =0xFFFFFEFF
	ands r1, r0
	str r1, [r4, #4]
	movs r0, #4
	ands r1, r0
	cmp r1, #0
	bne _08072D76
	adds r0, r4, #0
	bl _call_via_r7
_08072D76:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #1
	bls _08072D14
	movs r0, #0x80
	lsls r0, r0, #4
	movs r3, #1
	rsbs r3, r3, #0
	movs r1, #0x91
	str r1, [sp]
	movs r1, #0x40
	movs r2, #0
	bl sub_805256C
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08072D9C: .4byte Player_800E67C
_08072DA0: .4byte 0xFFFFFEFF

	thumb_func_start sub_8072DA4
sub_8072DA4: @ 0x08072DA4
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r0, #0xb2
	lsls r0, r0, #1
	adds r5, r4, r0
	movs r0, #0x13
	ldrsb r0, [r4, r0]
	cmp r0, #0
	bne _08072E48
	ldrb r0, [r4, #0x12]
	cmp r0, #0
	beq _08072DC0
	subs r0, #1
	strb r0, [r4, #0x12]
_08072DC0:
	ldr r0, _08072DD8 @ =gStageData
	ldrb r0, [r0, #1]
	cmp r0, #0
	bne _08072DDC
	ldrb r0, [r4, #0x12]
	cmp r0, #4
	bne _08072DE8
	movs r0, #0x33
	bl sub_80299D4
	b _08072DE8
	.align 2, 0
_08072DD8: .4byte gStageData
_08072DDC:
	ldrb r0, [r4, #0x12]
	cmp r0, #3
	bne _08072DE8
	movs r0, #0x33
	bl sub_80299D4
_08072DE8:
	movs r0, #0xeb
	bl m4aSongNumStart
	bl sub_807A468
	movs r0, #0x7a
	strb r0, [r4, #0x13]
	movs r0, #2
	strb r0, [r5, #0x1a]
	movs r0, #0xff
	strb r0, [r5, #0x1b]
	ldr r0, _08072E34 @ =0x000004DD
	movs r1, #0
	movs r2, #0x7a
	movs r3, #0
	bl sub_8078DB0
	ldr r0, _08072E38 @ =0x000004DE
	movs r1, #0
	movs r2, #0x7a
	movs r3, #0
	bl sub_8078DB0
	ldr r1, _08072E3C @ =gStageData
	ldrb r0, [r1, #3]
	cmp r0, #5
	bne _08072E48
	ldrb r0, [r1, #6]
	cmp r0, #0
	bne _08072E40
	ldrb r0, [r4, #0x12]
	cmp r0, #0
	beq _08072E48
	adds r1, r0, #0
	movs r0, #3
	bl sub_8027674
	b _08072E48
	.align 2, 0
_08072E34: .4byte 0x000004DD
_08072E38: .4byte 0x000004DE
_08072E3C: .4byte gStageData
_08072E40:
	ldrb r1, [r4, #0x12]
	movs r0, #4
	bl sub_8027674
_08072E48:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8072E50
sub_8072E50: @ 0x08072E50
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #4
	adds r4, r0, #0
	adds r5, r1, #0
	mov r8, r2
	ldr r0, _08072EE4 @ =sub_8072EF0
	movs r2, #0x80
	lsls r2, r2, #6
	movs r6, #0
	str r6, [sp]
	movs r1, #0x48
	movs r3, #0
	bl TaskCreate
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r1, r0, r1
	ldr r2, _08072EE8 @ =0x03000018
	adds r0, r0, r2
	mov r2, r8
	str r2, [r1]
	lsls r4, r4, #8
	str r4, [r1, #4]
	lsls r5, r5, #8
	str r5, [r1, #8]
	movs r3, #0
	strh r6, [r1, #0xc]
	strh r6, [r1, #0xe]
	strb r3, [r1, #0x10]
	strb r3, [r1, #0x11]
	strb r3, [r1, #0x13]
	movs r2, #0x98
	lsls r2, r2, #1
	add r2, r8
	ldr r2, [r2]
	str r2, [r1, #0x40]
	movs r2, #0x9a
	lsls r2, r2, #1
	add r2, r8
	ldr r2, [r2]
	str r2, [r1, #0x44]
	mov r2, r8
	ldr r1, [r2, #0x20]
	str r1, [r0]
	ldr r1, _08072EEC @ =0x000004DF
	strh r1, [r0, #0xc]
	strb r3, [r0, #0x1a]
	movs r1, #0xc0
	lsls r1, r1, #3
	strh r1, [r0, #0x14]
	strh r6, [r0, #0xe]
	strh r6, [r0, #0x16]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	strb r3, [r0, #0x1f]
	subs r1, #0x11
	str r1, [r0, #0x20]
	movs r1, #0x80
	lsls r1, r1, #5
	str r1, [r0, #8]
	bl UpdateSpriteAnimation
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08072EE4: .4byte sub_8072EF0
_08072EE8: .4byte 0x03000018
_08072EEC: .4byte 0x000004DF

	thumb_func_start sub_8072EF0
sub_8072EF0: @ 0x08072EF0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	ldr r0, _08072F88 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	ldr r0, [r5]
	mov sb, r0
	ldr r2, _08072F8C @ =0x03000018
	adds r2, r2, r1
	mov r8, r2
	ldrb r0, [r0, #0x1b]
	cmp r0, #0
	beq _08072F22
	ldr r0, [r5, #8]
	movs r2, #0x80
	lsls r2, r2, #0xa
	adds r0, r0, r2
	str r0, [r5, #8]
_08072F22:
	movs r6, #0
	ldr r0, _08072F90 @ =0x03000040
	adds r0, r0, r1
	mov sl, r0
	movs r7, #1
_08072F2C:
	lsls r0, r6, #2
	add r0, sl
	ldr r4, [r0]
	adds r0, r4, #0
	bl sub_802C0D4
	cmp r0, #0
	bne _08072FAA
	ldr r1, [r5, #4]
	asrs r1, r1, #8
	ldr r2, [r5, #8]
	asrs r2, r2, #8
	str r0, [sp]
	mov r0, r8
	adds r3, r4, #0
	bl sub_8020950
	adds r1, r0, #0
	movs r0, #0x80
	lsls r0, r0, #9
	ands r0, r1
	cmp r0, #0
	beq _08072F98
	lsls r1, r1, #0x18
	asrs r1, r1, #0x10
	ldr r0, [r4, #0x14]
	adds r0, r0, r1
	str r0, [r4, #0x14]
	ldr r0, _08072F94 @ =gStageData
	ldrb r0, [r0, #6]
	cmp r0, r6
	bne _08072FAA
	movs r1, #0x1c
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bne _08072F7A
	ldr r0, [r4, #0x18]
	cmp r0, #0
	beq _08072FAA
_08072F7A:
	adds r0, r7, #0
	lsls r0, r6
	ldrb r1, [r5, #0x10]
	orrs r0, r1
	strb r0, [r5, #0x10]
	strb r7, [r5, #0x11]
	b _08072FAA
	.align 2, 0
_08072F88: .4byte gCurTask
_08072F8C: .4byte 0x03000018
_08072F90: .4byte 0x03000040
_08072F94: .4byte gStageData
_08072F98:
	ldr r0, _08072FD8 @ =gStageData
	ldrb r0, [r0, #6]
	cmp r0, r6
	bne _08072FAA
	adds r1, r7, #0
	lsls r1, r6
	ldrb r0, [r5, #0x10]
	bics r0, r1
	strb r0, [r5, #0x10]
_08072FAA:
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #1
	bls _08072F2C
	ldr r0, [r5, #8]
	asrs r0, r0, #8
	ldr r1, _08072FDC @ =gCamera
	ldr r1, [r1, #4]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	movs r2, #0xa0
	lsls r2, r2, #0x10
	adds r0, r0, r2
	movs r1, #0xb4
	lsls r1, r1, #0x11
	cmp r0, r1
	bls _08072FE4
	ldr r0, _08072FE0 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
	b _08073026
	.align 2, 0
_08072FD8: .4byte gStageData
_08072FDC: .4byte gCamera
_08072FE0: .4byte gCurTask
_08072FE4:
	ldrb r0, [r5, #0x10]
	cmp r0, #0
	bne _08072FF0
	ldrb r0, [r5, #0x11]
	cmp r0, #0
	bne _08072FF8
_08072FF0:
	mov r1, sb
	ldrb r0, [r1, #0x12]
	cmp r0, #0
	bne _08073020
_08072FF8:
	ldr r1, [r5, #0x40]
	mov r0, r8
	bl ResolvePlayerSpriteCollision
	ldr r1, [r5, #0x44]
	mov r0, r8
	bl ResolvePlayerSpriteCollision
	movs r0, #0
	strb r0, [r5, #0x11]
	ldr r0, _08073038 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0807303C @ =sub_8073040
	str r0, [r1, #8]
	mov r2, sb
	ldrb r0, [r2, #0x12]
	cmp r0, #0
	bne _08073020
	movs r0, #1
	strb r0, [r5, #0x13]
_08073020:
	adds r0, r5, #0
	bl sub_8073258
_08073026:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08073038: .4byte gCurTask
_0807303C: .4byte sub_8073040

	thumb_func_start sub_8073040
sub_8073040: @ 0x08073040
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	ldr r1, _08073160 @ =gCurTask
	ldr r0, [r1]
	ldrh r7, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r7, r0
	ldr r0, [r4]
	mov ip, r0
	movs r2, #0x9e
	lsls r2, r2, #1
	add r2, ip
	mov r8, r2
	ldr r3, _08073164 @ =0x03000018
	adds r3, r3, r7
	mov sb, r3
	ldrb r0, [r0, #0x1b]
	cmp r0, #0
	beq _08073078
	ldr r0, [r4, #8]
	movs r6, #0x80
	lsls r6, r6, #0xa
	adds r0, r0, r6
	str r0, [r4, #8]
_08073078:
	ldrh r0, [r4, #0xe]
	adds r0, #0x20
	strh r0, [r4, #0xe]
	movs r0, #0xe
	ldrsh r1, [r4, r0]
	ldr r0, [r4, #8]
	adds r0, r0, r1
	str r0, [r4, #8]
	mov r1, r8
	ldrb r0, [r1, #0x1a]
	cmp r0, #0
	beq _08073092
	b _08073196
_08073092:
	mov r2, ip
	movs r0, #0x13
	ldrsb r0, [r2, r0]
	cmp r0, #0
	beq _0807309E
	b _08073196
_0807309E:
	ldrb r0, [r2, #0x12]
	cmp r0, #0
	beq _08073196
	ldr r2, [r4, #4]
	asrs r1, r2, #8
	ldr r3, _08073168 @ =0x0300003C
	adds r0, r7, r3
	movs r5, #0
	ldrsb r5, [r0, r5]
	adds r3, r1, r5
	mov r6, ip
	movs r0, #0x10
	ldrsh r1, [r6, r0]
	ldr r0, [r6]
	adds r0, r0, r1
	asrs r0, r0, #8
	movs r1, #0xb0
	lsls r1, r1, #1
	add r1, ip
	movs r6, #0
	ldrsb r6, [r1, r6]
	adds r1, r0, r6
	mov sl, r2
	cmp r3, r1
	bgt _080730E6
	ldr r2, _0807316C @ =0x0300003E
	adds r0, r7, r2
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r0, r5
	adds r0, r3, r0
	cmp r0, r1
	bge _080730FA
	cmp r3, r1
	blt _08073196
_080730E6:
	movs r0, #0xb1
	lsls r0, r0, #1
	add r0, ip
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r0, r6
	adds r0, r1, r0
	cmp r0, r3
	blt _08073196
_080730FA:
	ldr r0, [r4, #8]
	asrs r0, r0, #8
	mov r1, sb
	adds r1, #0x25
	movs r2, #0
	ldrsb r2, [r1, r2]
	adds r3, r0, r2
	mov r6, ip
	ldr r0, [r6, #4]
	asrs r0, r0, #8
	mov r1, r8
	adds r1, #0x25
	movs r5, #0
	ldrsb r5, [r1, r5]
	adds r1, r0, r5
	cmp r3, r1
	bgt _08073132
	mov r0, sb
	adds r0, #0x27
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r0, r2
	adds r0, r3, r0
	cmp r0, r1
	bge _08073144
	cmp r3, r1
	blt _08073196
_08073132:
	mov r0, r8
	adds r0, #0x27
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r0, r5
	adds r0, r1, r0
	cmp r0, r3
	blt _08073196
_08073144:
	movs r1, #0xe
	ldrsh r0, [r4, r1]
	rsbs r0, r0, #0
	strh r0, [r4, #0xe]
	mov r2, ip
	movs r3, #0x10
	ldrsh r1, [r2, r3]
	ldr r0, [r2]
	adds r0, r0, r1
	cmp sl, r0
	bge _08073174
	ldr r0, _08073170 @ =0x0000FE80
	b _08073178
	.align 2, 0
_08073160: .4byte gCurTask
_08073164: .4byte 0x03000018
_08073168: .4byte 0x0300003C
_0807316C: .4byte 0x0300003E
_08073170: .4byte 0x0000FE80
_08073174:
	movs r0, #0xc0
	lsls r0, r0, #1
_08073178:
	strh r0, [r4, #0xc]
	movs r0, #0x1e
	strb r0, [r4, #0x12]
	ldr r6, _080731BC @ =gCurTask
	ldr r1, [r6]
	ldr r0, _080731C0 @ =sub_80731DC
	str r0, [r1, #8]
	mov r0, ip
	adds r0, #0x2c
	ldrb r0, [r0]
	cmp r0, #0
	bne _08073196
	mov r0, ip
	bl sub_8072DA4
_08073196:
	ldr r0, [r4, #8]
	asrs r0, r0, #8
	ldr r1, _080731C4 @ =gCamera
	ldr r1, [r1, #4]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	movs r1, #0xa0
	lsls r1, r1, #0x10
	adds r0, r0, r1
	movs r1, #0xb4
	lsls r1, r1, #0x11
	cmp r0, r1
	bls _080731C8
	ldr r0, _080731BC @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
	b _080731CE
	.align 2, 0
_080731BC: .4byte gCurTask
_080731C0: .4byte sub_80731DC
_080731C4: .4byte gCamera
_080731C8:
	adds r0, r4, #0
	bl sub_8073258
_080731CE:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80731DC
sub_80731DC: @ 0x080731DC
	push {r4, lr}
	ldr r4, _0807323C @ =gCurTask
	ldr r0, [r4]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r2, r1, r0
	ldr r0, [r2]
	ldrb r0, [r0, #0x1b]
	cmp r0, #0
	beq _080731FC
	ldr r0, [r2, #8]
	movs r1, #0x80
	lsls r1, r1, #0xa
	adds r0, r0, r1
	str r0, [r2, #8]
_080731FC:
	ldrh r0, [r2, #0xe]
	adds r0, #0x20
	strh r0, [r2, #0xe]
	movs r0, #0xc
	ldrsh r1, [r2, r0]
	ldr r0, [r2, #4]
	adds r0, r0, r1
	str r0, [r2, #4]
	movs r0, #0xe
	ldrsh r1, [r2, r0]
	ldr r0, [r2, #8]
	adds r0, r0, r1
	str r0, [r2, #8]
	ldrb r1, [r2, #0x12]
	subs r3, r1, #1
	strb r3, [r2, #0x12]
	asrs r0, r0, #8
	ldr r1, _08073240 @ =gCamera
	ldr r1, [r1, #4]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	movs r1, #0xa0
	lsls r1, r1, #0x10
	adds r0, r0, r1
	movs r1, #0xb4
	lsls r1, r1, #0x11
	cmp r0, r1
	bls _08073244
	ldr r0, [r4]
	bl TaskDestroy
	b _08073252
	.align 2, 0
_0807323C: .4byte gCurTask
_08073240: .4byte gCamera
_08073244:
	movs r0, #2
	ands r3, r0
	cmp r3, #0
	bne _08073252
	adds r0, r2, #0
	bl sub_8073258
_08073252:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8073258
sub_8073258: @ 0x08073258
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r4, #0
	adds r5, #0x18
	ldrb r0, [r4, #0x11]
	cmp r0, #0
	beq _08073290
	ldr r0, [r4, #4]
	asrs r0, r0, #8
	ldr r2, _08073284 @ =gCamera
	ldr r1, [r2]
	subs r3, r0, r1
	strh r3, [r5, #0x10]
	ldr r0, _08073288 @ =gStageData
	ldr r0, [r0, #0x1c]
	movs r1, #2
	ands r0, r1
	cmp r0, #0
	beq _0807328C
	adds r0, r3, #1
	b _0807329A
	.align 2, 0
_08073284: .4byte gCamera
_08073288: .4byte gStageData
_0807328C:
	subs r0, r3, #1
	b _0807329A
_08073290:
	ldr r0, [r4, #4]
	asrs r0, r0, #8
	ldr r2, _080732C4 @ =gCamera
	ldr r1, [r2]
	subs r0, r0, r1
_0807329A:
	strh r0, [r5, #0x10]
	ldr r0, [r4, #8]
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	strh r0, [r5, #0x12]
	ldrb r0, [r4, #0x13]
	cmp r0, #0
	beq _080732B8
	ldr r0, _080732C8 @ =gStageData
	ldr r0, [r0, #0x1c]
	movs r1, #2
	ands r0, r1
	cmp r0, #0
	bne _080732BE
_080732B8:
	adds r0, r5, #0
	bl DisplaySprite
_080732BE:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080732C4: .4byte gCamera
_080732C8: .4byte gStageData

	thumb_func_start sub_80732CC
sub_80732CC: @ 0x080732CC
	push {r4, lr}
	ldr r1, _08073304 @ =gStageData
	adds r4, r1, #0
	adds r4, #0x88
	ldr r1, [r4]
	ldrh r2, [r1, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r3, r2, r1
	ldrb r2, [r0, #2]
	movs r1, #0x7f
	ands r1, r2
	ldrb r2, [r0, #3]
	ldrb r0, [r0, #4]
	lsls r0, r0, #8
	orrs r2, r0
	cmp r1, #1
	bne _0807330C
	movs r0, #0
	strb r0, [r3, #0x12]
	adds r0, r3, #0
	bl sub_8072D04
	ldr r1, [r4]
	ldr r0, _08073308 @ =sub_80733CC
	str r0, [r1, #8]
	b _08073328
	.align 2, 0
_08073304: .4byte gStageData
_08073308: .4byte sub_80733CC
_0807330C:
	cmp r1, #1
	blt _08073328
	cmp r1, #4
	bgt _08073328
	cmp r1, #3
	blt _08073328
	ldrb r1, [r3, #0x12]
	lsls r0, r2, #0x18
	lsrs r0, r0, #0x18
	cmp r1, r0
	beq _08073328
	adds r0, r3, #0
	bl sub_8072DA4
_08073328:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8073330
sub_8073330: @ 0x08073330
	push {r4, r5, lr}
	ldr r4, _08073350 @ =gCurTask
	ldr r2, [r4]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	ldr r0, [r5, #0xc]
	ldrb r0, [r0]
	cmp r0, #3
	bne _08073354
	adds r0, r2, #0
	bl TaskDestroy
	b _08073374
	.align 2, 0
_08073350: .4byte gCurTask
_08073354:
	bl sub_8079FFC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08073368
	ldr r1, [r4]
	ldr r0, _08073364 @ =sub_8073380
	b _0807336C
	.align 2, 0
_08073364: .4byte sub_8073380
_08073368:
	ldr r1, [r4]
	ldr r0, _0807337C @ =sub_8071D68
_0807336C:
	str r0, [r1, #8]
	adds r0, r5, #0
	bl sub_80728B4
_08073374:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807337C: .4byte sub_8071D68

	thumb_func_start sub_8073380
sub_8073380: @ 0x08073380
	push {r4, r5, lr}
	ldr r5, _080733A0 @ =gCurTask
	ldr r2, [r5]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, [r4, #0xc]
	ldrb r0, [r0]
	cmp r0, #3
	bne _080733A4
	adds r0, r2, #0
	bl TaskDestroy
	b _080733C2
	.align 2, 0
_080733A0: .4byte gCurTask
_080733A4:
	adds r0, r4, #0
	bl sub_80728B4
	ldr r0, [r4, #0xc]
	ldrb r0, [r0]
	cmp r0, #2
	bne _080733C2
	bl sub_807A074
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080733C2
	ldr r1, [r5]
	ldr r0, _080733C8 @ =sub_8071D68
	str r0, [r1, #8]
_080733C2:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080733C8: .4byte sub_8071D68

	thumb_func_start sub_80733CC
sub_80733CC: @ 0x080733CC
	push {r4, lr}
	ldr r0, _08073410 @ =gCurTask
	ldr r4, [r0]
	ldrh r3, [r4, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r0, r3, r0
	movs r2, #0
	strh r2, [r0, #0x30]
	movs r1, #1
	strh r1, [r0, #0x32]
	strh r2, [r0, #0x14]
	ldr r1, _08073414 @ =sub_80720E4
	str r1, [r4, #8]
	ldr r2, _08073418 @ =0x03000130
	adds r1, r3, r2
	ldr r2, [r1]
	ldr r1, [r2, #4]
	movs r4, #0x80
	lsls r4, r4, #0x14
	orrs r1, r4
	str r1, [r2, #4]
	ldr r1, _0807341C @ =0x03000134
	adds r3, r3, r1
	ldr r2, [r3]
	ldr r1, [r2, #4]
	orrs r1, r4
	str r1, [r2, #4]
	bl sub_80728B4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08073410: .4byte gCurTask
_08073414: .4byte sub_80720E4
_08073418: .4byte 0x03000130
_0807341C: .4byte 0x03000134

	thumb_func_start sub_8073420
sub_8073420: @ 0x08073420
	push {r4, lr}
	ldr r0, _08073454 @ =gCurTask
	ldr r0, [r0]
	ldrh r2, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r0, r2, r0
	ldr r3, _08073458 @ =0x03000130
	adds r1, r2, r3
	ldr r3, [r1]
	ldr r1, [r3, #4]
	movs r4, #0x80
	lsls r4, r4, #0x14
	orrs r1, r4
	str r1, [r3, #4]
	ldr r1, _0807345C @ =0x03000134
	adds r2, r2, r1
	ldr r2, [r2]
	ldr r1, [r2, #4]
	orrs r1, r4
	str r1, [r2, #4]
	bl sub_80728B4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08073454: .4byte gCurTask
_08073458: .4byte 0x03000130
_0807345C: .4byte 0x03000134

	thumb_func_start sub_8073460
sub_8073460: @ 0x08073460
	push {r4, lr}
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, [r4, #0x20]
	cmp r0, #0
	beq _08073478
	bl VramFree
	movs r0, #0
	str r0, [r4, #0x20]
_08073478:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8073480
sub_8073480: @ 0x08073480
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r5, r1, #0
	adds r0, r5, #0
	bl sub_802C080
	cmp r0, #0
	bne _080734E2
	adds r3, r4, #0
	adds r3, #0xe0
	ldr r1, [r4]
	asrs r1, r1, #8
	subs r1, #0x78
	ldr r2, [r4, #4]
	asrs r2, r2, #8
	str r5, [sp]
	adds r0, r3, #0
	movs r3, #0
	bl sub_8020CE0
	movs r0, #0x84
	lsls r0, r0, #1
	adds r3, r4, r0
	ldr r1, [r4]
	asrs r1, r1, #8
	adds r1, #0x78
	ldr r2, [r4, #4]
	asrs r2, r2, #8
	str r5, [sp]
	adds r0, r3, #0
	movs r3, #0
	bl sub_8020CE0
	movs r1, #0x9e
	lsls r1, r1, #1
	adds r3, r4, r1
	movs r1, #0x10
	ldrsh r0, [r4, r1]
	ldr r1, [r4]
	adds r1, r1, r0
	asrs r1, r1, #8
	ldr r2, [r4, #4]
	asrs r2, r2, #8
	str r5, [sp]
	adds r0, r3, #0
	movs r3, #0
	bl sub_8020CE0
_080734E2:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80734EC
sub_80734EC: @ 0x080734EC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r7, r0, #0
	ldr r0, _08073564 @ =gCurTask
	ldr r0, [r0]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	adds r0, #0x90
	adds r6, r5, r0
	adds r0, r7, #0
	bl sub_802C080
	cmp r0, #0
	bne _08073556
	ldr r1, [r4, #0x40]
	asrs r1, r1, #8
	ldr r2, [r4, #0x44]
	asrs r2, r2, #8
	str r7, [sp]
	adds r0, r6, #0
	movs r3, #0
	bl sub_8020CE0
	ldr r1, _08073568 @ =0x030000B8
	adds r6, r5, r1
	movs r4, #0
	ldr r0, _0807356C @ =0x03000048
	adds r0, r0, r5
	mov r8, r0
	subs r1, #0x6c
	adds r5, r5, r1
_08073532:
	lsls r2, r4, #3
	mov r1, r8
	adds r0, r1, r2
	ldr r1, [r0]
	asrs r1, r1, #8
	adds r2, r5, r2
	ldr r2, [r2]
	asrs r2, r2, #8
	str r7, [sp]
	adds r0, r6, #0
	movs r3, #0
	bl sub_8020CE0
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #7
	bls _08073532
_08073556:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08073564: .4byte gCurTask
_08073568: .4byte 0x030000B8
_0807356C: .4byte 0x03000048

	thumb_func_start sub_8073570
sub_8073570: @ 0x08073570
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r0, #0x24
	ldrsh r1, [r5, r0]
	ldr r0, _080735BC @ =gCamera
	ldr r0, [r0, #4]
	cmp r1, r0
	ble _080735B4
	ldr r4, _080735C0 @ =gUnknown_080D5888
	ldrb r0, [r5, #0x1a]
	lsls r0, r0, #2
	adds r0, r0, r4
	movs r2, #0
	ldrsh r0, [r0, r2]
	adds r2, r5, #0
	bl sub_8072E50
	ldrb r0, [r5, #0x1a]
	lsls r0, r0, #2
	adds r4, #2
	adds r0, r0, r4
	ldrh r0, [r0]
	ldrh r1, [r5, #0x24]
	adds r0, r0, r1
	strh r0, [r5, #0x24]
	ldrb r0, [r5, #0x1a]
	adds r0, #1
	strb r0, [r5, #0x1a]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x10
	bls _080735B4
	movs r0, #0
	strb r0, [r5, #0x1a]
_080735B4:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080735BC: .4byte gCamera
_080735C0: .4byte gUnknown_080D5888

	thumb_func_start sub_80735C4
sub_80735C4: @ 0x080735C4
	push {lr}
	adds r3, r0, #0
	movs r1, #0xab
	lsls r1, r1, #1
	adds r0, r3, r1
	ldrb r0, [r0]
	cmp r0, #0
	bne _080735FC
	ldrb r0, [r3, #0x12]
	movs r1, #9
	subs r1, r1, r0
	lsls r0, r1, #1
	adds r0, r0, r1
	asrs r0, r0, #1
	ldrh r2, [r3, #0x18]
	adds r0, r0, r2
	strh r0, [r3, #0x18]
	ldr r2, _08073600 @ =gSineTable
	ldr r1, _08073604 @ =0x000003FF
	ands r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	movs r2, #0
	ldrsh r1, [r0, r2]
	lsls r0, r1, #5
	subs r0, r0, r1
	asrs r0, r0, #5
	strh r0, [r3, #0x10]
_080735FC:
	pop {r0}
	bx r0
	.align 2, 0
_08073600: .4byte gSineTable
_08073604: .4byte 0x000003FF

	thumb_func_start sub_8073608
sub_8073608: @ 0x08073608
	push {lr}
	adds r3, r0, #0
	ldr r0, [r3, #4]
	asrs r2, r0, #8
	ldr r0, _08073620 @ =0x00000513
	cmp r2, r0
	ble _08073628
	ldr r1, _08073624 @ =gCamera
	adds r0, r2, #0
	subs r0, #0xa0
	b _0807362E
	.align 2, 0
_08073620: .4byte 0x00000513
_08073624: .4byte gCamera
_08073628:
	ldr r1, _0807363C @ =gCamera
	adds r0, r2, #0
	subs r0, #0xb4
_0807362E:
	str r0, [r1, #0x10]
	ldr r0, [r3, #4]
	asrs r0, r0, #8
	adds r0, #0x14
	str r0, [r1, #0x14]
	pop {r0}
	bx r0
	.align 2, 0
_0807363C: .4byte gCamera

    @ Called on init of Boss 6
	thumb_func_start sub_8073640
sub_8073640: @ 0x08073640
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	adds r7, r0, #0
	adds r6, r1, #0
	adds r5, r2, #0
	ldr r0, _080736B0 @ =sub_8074C54
	movs r1, #0xb6
	lsls r1, r1, #1
	movs r2, #0x84
	lsls r2, r2, #6
	ldr r3, _080736B4 @ =sub_8074CC4
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	str r0, [sp, #4]
	ldrh r3, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r0, r0, r3
	mov sl, r0
	ldr r2, _080736B8 @ =gStageData
	adds r0, r2, #0
	adds r0, #0x88
	ldr r1, [sp, #4]
	str r1, [r0]
	adds r6, #4
	lsls r4, r6, #8
	mov r0, sl
	str r4, [r0]
	lsls r5, r5, #8
	movs r1, #0xb6
	lsls r1, r1, #8
	adds r5, r5, r1
	str r5, [r0, #4]
	movs r1, #0
	strh r1, [r0, #0xc]
	strh r1, [r0, #0xe]
	ldr r4, _080736BC @ =0x03000044
	adds r0, r3, r4
	strh r1, [r0]
	ldr r5, _080736C0 @ =0x0300004A
	adds r0, r3, r5
	strh r1, [r0]
	ldrb r0, [r2, #1]
	cmp r0, #0
	bne _080736C8
	ldr r0, _080736C4 @ =0x0300003D
	adds r1, r3, r0
	movs r0, #8
	b _080736CE
	.align 2, 0
_080736B0: .4byte sub_8074C54
_080736B4: .4byte sub_8074CC4
_080736B8: .4byte gStageData
_080736BC: .4byte 0x03000044
_080736C0: .4byte 0x0300004A
_080736C4: .4byte 0x0300003D
_080736C8:
	ldr r4, _08073900 @ =0x0300003D
	adds r1, r3, r4
	movs r0, #6
_080736CE:
	strb r0, [r1]
	mov r5, sl
	str r7, [r5, #0x30]
	movs r3, #0
	movs r1, #0
	strh r1, [r5, #0x3e]
	mov r0, sl
	adds r0, #0x58
	strh r1, [r0]
	adds r0, #2
	strh r1, [r0]
	subs r0, #0x12
	strh r1, [r0]
	subs r0, #2
	strh r1, [r0]
	ldr r2, _08073904 @ =gPlayers
	str r2, [r5, #0x68]
	adds r0, r2, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	lsls r1, r1, #0x1e
	lsrs r1, r1, #0x1e
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r2
	str r0, [r5, #0x6c]
	mov r0, sl
	adds r0, #0x3c
	strb r3, [r0]
	adds r0, #4
	strb r3, [r0]
	movs r2, #0
	mov r6, sl
	adds r6, #0x70
	mov r7, sl
	adds r7, #0x98
	mov r4, sl
	adds r4, #0xc0
	movs r0, #0xe8
	add r0, sl
	mov sb, r0
	mov r3, sl
	adds r3, #0x10
_0807372A:
	lsls r0, r2, #2
	adds r0, r3, r0
	mov r5, sl
	ldr r1, [r5, #0xc]
	str r1, [r0]
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #7
	bls _0807372A
	movs r0, #0x74
	bl VramMalloc
	str r0, [r5, #0x4c]
	movs r0, #0x14
	bl VramMalloc
	str r0, [r5, #0x50]
	movs r0, #4
	bl VramMalloc
	str r0, [r5, #0x54]
	movs r0, #0x6c
	bl VramMalloc
	adds r5, r0, #0
	mov r0, sl
	str r5, [r0, #0x70]
	movs r1, #0
	mov r8, r1
	movs r0, #0x9c
	lsls r0, r0, #3
	strh r0, [r6, #0xc]
	mov r0, r8
	strb r0, [r6, #0x1a]
	movs r0, #0x88
	lsls r0, r0, #3
	strh r0, [r6, #0x14]
	strh r1, [r6, #0xe]
	strh r1, [r6, #0x16]
	movs r0, #0xff
	strb r0, [r6, #0x1b]
	movs r1, #0x10
	strb r1, [r6, #0x1c]
	mov r0, r8
	strb r0, [r6, #0x1f]
	movs r1, #1
	rsbs r1, r1, #0
	str r1, [r6, #0x20]
	movs r0, #0
	str r0, [r6, #8]
	adds r0, r6, #0
	bl UpdateSpriteAnimation
	movs r1, #0x80
	lsls r1, r1, #4
	adds r5, r5, r1
	str r5, [r7]
	ldr r0, _08073908 @ =0x000004E3
	strh r0, [r7, #0xc]
	mov r0, r8
	strb r0, [r7, #0x1a]
	movs r0, #0x90
	lsls r0, r0, #3
	strh r0, [r7, #0x14]
	movs r1, #0
	strh r1, [r7, #0xe]
	strh r1, [r7, #0x16]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r7, #0x1b]
	movs r0, #0x10
	strb r0, [r7, #0x1c]
	mov r1, r8
	strb r1, [r7, #0x1f]
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r7, #0x20]
	movs r0, #0x20
	str r0, [r7, #8]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	movs r6, #0x80
	lsls r6, r6, #2
	adds r5, r5, r6
	str r5, [r4]
	ldr r0, _0807390C @ =0x000004E1
	strh r0, [r4, #0xc]
	mov r1, r8
	strb r1, [r4, #0x1a]
	movs r0, #0xf0
	lsls r0, r0, #2
	strh r0, [r4, #0x14]
	movs r0, #0
	strh r0, [r4, #0xe]
	strh r0, [r4, #0x16]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r4, #0x1b]
	movs r1, #0x10
	strb r1, [r4, #0x1c]
	mov r0, r8
	strb r0, [r4, #0x1f]
	movs r1, #1
	rsbs r1, r1, #0
	str r1, [r4, #0x20]
	movs r0, #0
	str r0, [r4, #8]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r5, r5, r6
	mov r1, sb
	str r5, [r1]
	ldr r0, _08073910 @ =0x000004E2
	strh r0, [r1, #0xc]
	mov r4, r8
	strb r4, [r1, #0x1a]
	movs r0, #0xe0
	lsls r0, r0, #2
	strh r0, [r1, #0x14]
	movs r0, #0
	strh r0, [r1, #0xe]
	strh r0, [r1, #0x16]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r1, #0x1b]
	movs r4, #0x10
	strb r4, [r1, #0x1c]
	mov r0, r8
	strb r0, [r1, #0x1f]
	movs r4, #1
	rsbs r4, r4, #0
	str r4, [r1, #0x20]
	movs r0, #0
	str r0, [r1, #8]
	mov r0, sb
	bl UpdateSpriteAnimation
	adds r5, #0x80
	movs r1, #0x88
	lsls r1, r1, #1
	add r1, sl
	str r5, [r1]
	ldr r7, _08073914 @ =0x000004E5
	strh r7, [r1, #0xc]
	mov r4, r8
	strb r4, [r1, #0x1a]
	movs r0, #0xd0
	lsls r0, r0, #2
	mov sb, r0
	mov r4, sb
	strh r4, [r1, #0x14]
	movs r0, #0
	strh r0, [r1, #0xe]
	strh r0, [r1, #0x16]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r1, #0x1b]
	movs r4, #0x10
	strb r4, [r1, #0x1c]
	mov r0, r8
	strb r0, [r1, #0x1f]
	movs r4, #1
	rsbs r4, r4, #0
	str r4, [r1, #0x20]
	movs r0, #0
	str r0, [r1, #8]
	adds r0, r1, #0
	bl UpdateSpriteAnimation
	movs r6, #0x80
	lsls r6, r6, #1
	adds r5, r5, r6
	movs r1, #0x9c
	lsls r1, r1, #1
	add r1, sl
	str r5, [r1]
	strh r7, [r1, #0xc]
	mov r4, r8
	strb r4, [r1, #0x1a]
	mov r5, sb
	strh r5, [r1, #0x14]
	movs r0, #0
	strh r0, [r1, #0xe]
	strh r0, [r1, #0x16]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r1, #0x1b]
	movs r4, #0x10
	strb r4, [r1, #0x1c]
	mov r5, r8
	strb r5, [r1, #0x1f]
	str r0, [r1, #0x20]
	movs r0, #0
	str r0, [r1, #8]
	adds r0, r1, #0
	bl UpdateSpriteAnimation
	movs r0, #0xb0
	lsls r0, r0, #1
	add r0, sl
	strh r6, [r0, #2]
	strh r6, [r0, #4]
	movs r1, #0
	strh r1, [r0, #6]
	strh r1, [r0, #8]
	strh r1, [r0]
	movs r0, #0xab
	lsls r0, r0, #3
	ldr r5, _08073918 @ =0x00000125
	adds r1, r5, #0
	mov r2, sl
	movs r3, #0
	bl sub_80747F4
	movs r0, #0xc9
	lsls r0, r0, #3
	adds r1, r5, #0
	mov r2, sl
	movs r3, #1
	bl sub_80747F4
	bl sub_807A4BC
	ldr r0, [sp, #4]
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08073900: .4byte 0x0300003D
_08073904: .4byte gPlayers
_08073908: .4byte 0x000004E3
_0807390C: .4byte 0x000004E1
_08073910: .4byte 0x000004E2
_08073914: .4byte 0x000004E5
_08073918: .4byte 0x00000125

	thumb_func_start sub_807391C
sub_807391C: @ 0x0807391C
	push {r4, r5, lr}
	ldr r2, _0807396C @ =gCurTask
	ldr r0, [r2]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	ldr r0, _08073970 @ =gStageData
	ldrb r1, [r0, #6]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	ldr r1, _08073974 @ =gPlayers
	adds r1, r0, r1
	ldr r0, [r1, #0x10]
	asrs r3, r0, #8
	ldr r4, _08073978 @ =gCamera
	ldr r0, [r4, #0x18]
	adds r0, #0x30
	cmp r3, r0
	ble _08073952
	ldr r0, [r4, #0x1c]
	subs r0, #0x30
	cmp r3, r0
	blt _0807395A
_08073952:
	lsls r0, r0, #8
	str r0, [r1, #0x10]
	movs r0, #0
	strh r0, [r1, #0x18]
_0807395A:
	ldr r0, [r5, #0x30]
	ldrb r0, [r0]
	cmp r0, #3
	bne _0807397C
	ldr r0, [r2]
	bl TaskDestroy
	b _0807399C
	.align 2, 0
_0807396C: .4byte gCurTask
_08073970: .4byte gStageData
_08073974: .4byte gPlayers
_08073978: .4byte gCamera
_0807397C:
	adds r0, r5, #0
	bl sub_8074148
	ldr r0, [r5, #0x30]
	ldrb r0, [r0]
	cmp r0, #2
	bne _0807399C
	bl sub_807A074
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807399C
	ldr r0, _080739A4 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080739A8 @ =sub_80739AC
	str r0, [r1, #8]
_0807399C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080739A4: .4byte gCurTask
_080739A8: .4byte sub_80739AC

	thumb_func_start sub_80739AC
sub_80739AC: @ 0x080739AC
	push {r4, r5, lr}
	ldr r2, _080739FC @ =gCurTask
	ldr r0, [r2]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	ldr r0, _08073A00 @ =gStageData
	ldrb r1, [r0, #6]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	ldr r1, _08073A04 @ =gPlayers
	adds r4, r0, r1
	ldr r0, [r4, #0x10]
	asrs r1, r0, #8
	ldr r3, _08073A08 @ =gCamera
	ldr r0, [r3, #0x18]
	adds r0, #0x30
	cmp r1, r0
	ble _080739E2
	ldr r0, [r3, #0x1c]
	subs r0, #0x30
	cmp r1, r0
	blt _080739EA
_080739E2:
	lsls r0, r0, #8
	str r0, [r4, #0x10]
	movs r0, #0
	strh r0, [r4, #0x18]
_080739EA:
	ldr r0, [r5, #0x30]
	ldrb r0, [r0]
	cmp r0, #3
	bne _08073A0C
	ldr r0, [r2]
	bl TaskDestroy
	b _08073A30
	.align 2, 0
_080739FC: .4byte gCurTask
_08073A00: .4byte gStageData
_08073A04: .4byte gPlayers
_08073A08: .4byte gCamera
_08073A0C:
	adds r0, r5, #0
	bl sub_8074148
	ldr r0, [r5, #0x30]
	ldrb r0, [r0]
	cmp r0, #2
	bne _08073A30
	ldr r1, [r4, #0x14]
	movs r0, #0xf0
	lsls r0, r0, #8
	cmp r1, r0
	ble _08073A30
	bl sub_8079FFC
	ldr r0, _08073A38 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08073A3C @ =sub_8073A40
	str r0, [r1, #8]
_08073A30:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08073A38: .4byte gCurTask
_08073A3C: .4byte sub_8073A40

	thumb_func_start sub_8073A40
sub_8073A40: @ 0x08073A40
	push {r4, r5, lr}
	ldr r0, _08073AB8 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r3, r1, r0
	ldr r0, _08073ABC @ =gStageData
	ldrb r1, [r0, #6]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	ldr r2, _08073AC0 @ =gPlayers
	adds r4, r0, r2
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	lsls r1, r1, #0x1e
	lsrs r1, r1, #0x1e
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r5, r0, r2
	ldr r0, [r4, #0x10]
	asrs r1, r0, #8
	ldr r2, _08073AC4 @ =gCamera
	ldr r0, [r2, #0x18]
	adds r0, #0x30
	cmp r1, r0
	ble _08073A8C
	ldr r0, [r2, #0x1c]
	subs r0, #0x30
	cmp r1, r0
	blt _08073A94
_08073A8C:
	lsls r0, r0, #8
	str r0, [r4, #0x10]
	movs r0, #0
	strh r0, [r4, #0x18]
_08073A94:
	adds r0, r3, #0
	bl sub_8074148
	ldr r0, [r4, #0x14]
	movs r1, #0xf0
	lsls r1, r1, #8
	cmp r0, r1
	ble _08073AB2
	ldr r0, [r5, #0x14]
	cmp r0, r1
	ble _08073AB2
	ldr r0, _08073AB8 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08073AC8 @ =sub_8073ACC
	str r0, [r1, #8]
_08073AB2:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08073AB8: .4byte gCurTask
_08073ABC: .4byte gStageData
_08073AC0: .4byte gPlayers
_08073AC4: .4byte gCamera
_08073AC8: .4byte sub_8073ACC

	thumb_func_start sub_8073ACC
sub_8073ACC: @ 0x08073ACC
	push {r4, r5, lr}
	ldr r0, _08073B48 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	ldr r0, _08073B4C @ =gStageData
	ldrb r1, [r0, #6]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	ldr r1, _08073B50 @ =gPlayers
	adds r4, r0, r1
	ldr r0, [r4, #0x10]
	asrs r1, r0, #8
	ldr r2, _08073B54 @ =gCamera
	ldr r0, [r2, #0x18]
	adds r0, #0x30
	cmp r1, r0
	ble _08073B02
	ldr r0, [r2, #0x1c]
	subs r0, #0x30
	cmp r1, r0
	blt _08073B0A
_08073B02:
	lsls r0, r0, #8
	str r0, [r4, #0x10]
	movs r0, #0
	strh r0, [r4, #0x18]
_08073B0A:
	adds r0, r5, #0
	bl sub_8074148
	ldr r1, [r4, #0x14]
	movs r0, #0xf0
	lsls r0, r0, #8
	cmp r1, r0
	ble _08073B40
	ldr r1, _08073B54 @ =gCamera
	movs r2, #0xb8
	str r2, [r1, #0x10]
	adds r2, #0xa0
	str r2, [r1, #0x14]
	ldr r0, [r1, #0x18]
	subs r0, #0x10
	str r0, [r1, #0x18]
	ldr r0, [r1, #0x1c]
	adds r0, #0x10
	str r0, [r1, #0x1c]
	str r2, [r5, #0x64]
	movs r0, #0x32
	bl sub_80299D4
	ldr r0, _08073B48 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08073B58 @ =sub_8073B5C
	str r0, [r1, #8]
_08073B40:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08073B48: .4byte gCurTask
_08073B4C: .4byte gStageData
_08073B50: .4byte gPlayers
_08073B54: .4byte gCamera
_08073B58: .4byte sub_8073B5C

	thumb_func_start sub_8073B5C
sub_8073B5C: @ 0x08073B5C
	push {r4, r5, r6, lr}
	ldr r5, _08073B8C @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r1, r0
	ldr r0, _08073B90 @ =0x03000110
	adds r3, r1, r0
	subs r0, #0xcc
	adds r2, r1, r0
	ldrh r0, [r2]
	adds r0, #1
	movs r4, #0
	strh r0, [r2]
	ldrh r0, [r2]
	cmp r0, #0x78
	beq _08073BA8
	cmp r0, #0x78
	bgt _08073B94
	cmp r0, #0x3c
	beq _08073B9A
	b _08073BCA
	.align 2, 0
_08073B8C: .4byte gCurTask
_08073B90: .4byte 0x03000110
_08073B94:
	cmp r0, #0xb4
	beq _08073BB4
	b _08073BCA
_08073B9A:
	ldr r0, _08073BA4 @ =0x000004E5
	strh r0, [r3, #0xc]
	movs r0, #1
	strb r0, [r3, #0x1a]
	b _08073BCA
	.align 2, 0
_08073BA4: .4byte 0x000004E5
_08073BA8:
	ldr r0, _08073BB0 @ =0x000004E5
	strh r0, [r3, #0xc]
	strb r4, [r3, #0x1a]
	b _08073BCA
	.align 2, 0
_08073BB0: .4byte 0x000004E5
_08073BB4:
	movs r0, #0
	strh r0, [r2]
	ldr r0, _08073BD8 @ =0x03000040
	adds r1, r1, r0
	movs r0, #1
	strb r0, [r1]
	bl sub_807A4A8
	ldr r1, [r5]
	ldr r0, _08073BDC @ =sub_8073BE0
	str r0, [r1, #8]
_08073BCA:
	adds r0, r6, #0
	bl sub_8074148
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08073BD8: .4byte 0x03000040
_08073BDC: .4byte sub_8073BE0

	thumb_func_start sub_8073BE0
sub_8073BE0: @ 0x08073BE0
	push {r4, r5, r6, r7, lr}
	ldr r0, _08073C30 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	ldr r0, _08073C34 @ =0x03000110
	adds r2, r1, r0
	ldr r3, _08073C38 @ =0x03000044
	adds r1, r1, r3
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	ldrh r1, [r5, #0x3e]
	movs r3, #0x3e
	ldrsh r0, [r5, r3]
	cmp r0, #0
	beq _08073C18
	subs r0, r1, #1
	strh r0, [r5, #0x3e]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _08073C18
	movs r0, #0
	strb r0, [r2, #0x1a]
	movs r0, #0xff
	strb r0, [r2, #0x1b]
_08073C18:
	adds r0, r5, #0
	adds r0, #0x46
	ldrh r1, [r0]
	adds r7, r0, #0
	cmp r1, #0
	beq _08073C3C
	subs r0, r1, #1
	strh r0, [r7]
	adds r6, r5, #0
	adds r6, #0x48
	b _08073C4C
	.align 2, 0
_08073C30: .4byte gCurTask
_08073C34: .4byte 0x03000110
_08073C38: .4byte 0x03000044
_08073C3C:
	adds r0, r5, #0
	adds r0, #0x48
	ldrh r1, [r0]
	adds r6, r0, #0
	cmp r1, #0
	beq _08073C56
	subs r0, r1, #1
	strh r0, [r6]
_08073C4C:
	ldrh r0, [r6]
	adds r4, r5, #0
	adds r4, #0x3d
	cmp r0, #0
	bne _08073C76
_08073C56:
	adds r0, r5, #0
	bl sub_8074328
	movs r0, #0x14
	strh r0, [r7]
	ldr r1, _08073CA0 @ =gUnknown_080D58E0
	adds r4, r5, #0
	adds r4, #0x3d
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r6]
	ldr r0, _08073CA4 @ =0x00000231
	bl m4aSongNumStart
_08073C76:
	movs r1, #0x3e
	ldrsh r0, [r5, r1]
	cmp r0, #0x95
	bgt _08073C84
	adds r0, r5, #0
	bl sub_80740CC
_08073C84:
	ldrb r0, [r4]
	cmp r0, #0
	bne _08073CCA
	ldr r1, _08073CA8 @ =gStageData
	ldrb r0, [r1, #3]
	cmp r0, #5
	bne _08073CBC
	ldrb r0, [r1, #6]
	cmp r0, #0
	beq _08073CB4
	ldr r0, _08073CAC @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08073CB0 @ =sub_8074C94
	b _08073CC8
	.align 2, 0
_08073CA0: .4byte gUnknown_080D58E0
_08073CA4: .4byte 0x00000231
_08073CA8: .4byte gStageData
_08073CAC: .4byte gCurTask
_08073CB0: .4byte sub_8074C94
_08073CB4:
	movs r0, #1
	movs r1, #0
	bl sub_8027674
_08073CBC:
	adds r0, r5, #0
	bl sub_8074E4C
	ldr r0, _08073CDC @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08073CE0 @ =sub_8073CE4
_08073CC8:
	str r0, [r1, #8]
_08073CCA:
	adds r0, r5, #0
	bl sub_8074CF0
	adds r0, r5, #0
	bl sub_8074148
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08073CDC: .4byte gCurTask
_08073CE0: .4byte sub_8073CE4

	thumb_func_start sub_8073CE4
sub_8073CE4: @ 0x08073CE4
	push {r4, r5, lr}
	ldr r5, _08073D80 @ =gCurTask
	ldr r0, [r5]
	ldrh r3, [r0, #6]
	movs r4, #0xc0
	lsls r4, r4, #0x12
	adds r4, r3, r4
	movs r0, #0xc
	ldrsh r1, [r4, r0]
	ldr r0, [r4]
	adds r0, r0, r1
	str r0, [r4]
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldr r0, [r4, #4]
	adds r0, r0, r1
	str r0, [r4, #4]
	movs r0, #0
	strh r0, [r4, #0xc]
	strh r0, [r4, #0xe]
	ldr r1, _08073D84 @ =0x0300003C
	adds r0, r3, r1
	ldrb r1, [r0]
	lsls r0, r1, #2
	adds r0, r4, r0
	movs r2, #0x10
	ldrsh r0, [r0, r2]
	subs r1, #1
	movs r2, #7
	ands r1, r2
	lsls r1, r1, #2
	adds r1, r4, r1
	movs r2, #0x10
	ldrsh r1, [r1, r2]
	subs r0, r0, r1
	asrs r0, r0, #2
	rsbs r0, r0, #0
	strh r0, [r4, #8]
	movs r0, #0xf8
	lsls r0, r0, #8
	strh r0, [r4, #0xa]
	ldr r0, _08073D88 @ =0x03000044
	adds r3, r3, r0
	movs r0, #0xb4
	strh r0, [r3]
	ldr r1, _08073D8C @ =gCamera
	ldr r0, [r4, #0x64]
	str r0, [r1, #0x14]
	ldr r0, [r4, #0x34]
	movs r2, #0xfa
	lsls r2, r2, #2
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r4, #0x38]
	strh r1, [r0]
	ldr r0, _08073D90 @ =0x00000221
	bl m4aSongNumStart
	ldr r1, [r5]
	ldr r0, _08073D94 @ =sub_8073D98
	str r0, [r1, #8]
	ldr r1, [r4, #0x68]
	ldr r0, [r1, #4]
	movs r2, #0x80
	lsls r2, r2, #0x14
	orrs r0, r2
	str r0, [r1, #4]
	ldr r1, [r4, #0x6c]
	ldr r0, [r1, #4]
	orrs r0, r2
	str r0, [r1, #4]
	adds r0, r4, #0
	bl sub_8074148
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08073D80: .4byte gCurTask
_08073D84: .4byte 0x0300003C
_08073D88: .4byte 0x03000044
_08073D8C: .4byte gCamera
_08073D90: .4byte 0x00000221
_08073D94: .4byte sub_8073D98

	thumb_func_start sub_8073D98
sub_8073D98: @ 0x08073D98
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	ldr r0, _08073DE0 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	ldrh r0, [r5, #0xa]
	adds r0, #0x20
	strh r0, [r5, #0xa]
	movs r1, #8
	ldrsh r0, [r5, r1]
	ldr r1, [r5]
	adds r1, r1, r0
	str r1, [r5]
	movs r0, #0xa
	ldrsh r2, [r5, r0]
	ldr r0, [r5, #4]
	adds r0, r0, r2
	str r0, [r5, #4]
	movs r2, #0xaf
	lsls r2, r2, #0xb
	cmp r1, r2
	bgt _08073DE4
	movs r1, #8
	ldrsh r0, [r5, r1]
	cmp r0, #0
	bge _08073DE4
	str r2, [r5]
	b _08073DFC
	.align 2, 0
_08073DE0: .4byte gCurTask
_08073DE4:
	ldr r1, [r5]
	ldr r0, _08073E48 @ =0x000621FF
	cmp r1, r0
	ble _08073E00
	movs r1, #8
	ldrsh r0, [r5, r1]
	cmp r0, #0
	ble _08073E00
	ldr r0, _08073E4C @ =0x00062200
	str r0, [r5]
	movs r2, #8
	ldrsh r0, [r5, r2]
_08073DFC:
	rsbs r0, r0, #0
	strh r0, [r5, #8]
_08073E00:
	ldr r0, [r5]
	lsls r0, r0, #8
	lsrs r0, r0, #0x10
	mov sl, r0
	ldr r0, [r5, #4]
	lsls r0, r0, #8
	lsrs r0, r0, #0x10
	mov r8, r0
	adds r2, r5, #0
	adds r2, #0x44
	ldrh r1, [r2]
	movs r0, #1
	ands r0, r1
	movs r6, #1
	str r2, [sp, #0x10]
	cmp r0, #0
	beq _08073E24
	movs r6, #0
_08073E24:
	cmp r6, #3
	bhi _08073EBE
	adds r7, r5, #0
	adds r7, #0x5c
	ldr r0, _08073E50 @ =gSineTable
	mov sb, r0
_08073E30:
	lsls r1, r6, #1
	adds r3, r7, r1
	ldrh r2, [r3]
	movs r0, #1
	ands r0, r6
	adds r4, r1, #0
	cmp r0, #0
	beq _08073E54
	adds r1, r2, #0
	subs r1, #0x3e
	b _08073E58
	.align 2, 0
_08073E48: .4byte 0x000621FF
_08073E4C: .4byte 0x00062200
_08073E50: .4byte gSineTable
_08073E54:
	adds r1, r2, #0
	adds r1, #0x3e
_08073E58:
	ldr r0, _08073F0C @ =0x000003FF
	ands r1, r0
	strh r1, [r3]
	adds r0, r7, r4
	ldrh r4, [r0]
	lsls r0, r4, #1
	add r0, sb
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r3, r0, #2
	adds r3, r3, r0
	asrs r3, r3, #0xc
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r4, r2
	lsls r0, r0, #1
	add r0, sb
	movs r2, #0
	ldrsh r1, [r0, r2]
	lsls r0, r1, #2
	adds r0, r0, r1
	asrs r0, r0, #0xc
	mov r2, sl
	lsls r1, r2, #0x10
	asrs r1, r1, #0x10
	adds r1, r1, r0
	mov r0, r8
	lsls r2, r0, #0x10
	asrs r2, r2, #0x10
	adds r2, r2, r3
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	str r4, [sp]
	movs r0, #0x14
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	ldr r0, [r5, #0x4c]
	str r0, [sp, #0xc]
	movs r0, #7
	movs r3, #0x80
	lsls r3, r3, #2
	bl sub_8079758
	adds r0, r6, #2
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #3
	bls _08073E30
_08073EBE:
	ldr r4, [sp, #0x10]
	ldrh r1, [r4]
	movs r0, #0x3f
	ands r0, r1
	cmp r0, #0
	bne _08073ED0
	ldr r0, _08073F10 @ =0x00000221
	bl m4aSongNumStart
_08073ED0:
	ldrh r0, [r4]
	subs r0, #1
	strh r0, [r4]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _08073EE8
	mov r2, r8
	lsls r1, r2, #0x10
	movs r0, #0xe6
	lsls r0, r0, #0x11
	cmp r1, r0
	ble _08073F1C
_08073EE8:
	ldr r0, [r5, #0x70]
	bl VramFree
	movs r0, #0
	str r0, [r5, #0x70]
	ldr r0, _08073F10 @ =0x00000221
	bl m4aSongNumStart
	movs r0, #0x96
	lsls r0, r0, #1
	ldr r1, [sp, #0x10]
	strh r0, [r1]
	ldr r0, _08073F14 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08073F18 @ =sub_8073F4C
	str r0, [r1, #8]
	b _08073F3C
	.align 2, 0
_08073F0C: .4byte 0x000003FF
_08073F10: .4byte 0x00000221
_08073F14: .4byte gCurTask
_08073F18: .4byte sub_8073F4C
_08073F1C:
	ldr r1, [r5, #0x68]
	ldr r0, [r1, #4]
	movs r2, #0x80
	lsls r2, r2, #0x14
	orrs r0, r2
	str r0, [r1, #4]
	ldr r1, [r5, #0x6c]
	ldr r0, [r1, #4]
	orrs r0, r2
	str r0, [r1, #4]
	adds r0, r5, #0
	bl sub_8074CF0
	adds r0, r5, #0
	bl sub_8074148
_08073F3C:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8073F4C
sub_8073F4C: @ 0x08073F4C
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	ldr r0, _08074028 @ =gCurTask
	ldr r2, [r0]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r7, r1, r0
	adds r0, #0x44
	adds r6, r1, r0
	ldrh r0, [r6]
	cmp r0, #0
	beq _08074040
	subs r0, #1
	strh r0, [r6]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0xf0
	bne _08073F8C
	movs r0, #0x80
	lsls r0, r0, #4
	movs r3, #1
	rsbs r3, r3, #0
	movs r1, #0x91
	str r1, [sp]
	movs r1, #8
	movs r2, #0
	bl sub_805256C
	ldr r0, _0807402C @ =0x00000221
	bl m4aSongNumStart
_08073F8C:
	ldrh r1, [r6]
	cmp r1, #0xef
	bhi _08074044
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08074014
	ldr r3, _08074030 @ =gPseudoRandom
	ldr r0, [r3]
	ldr r2, _08074034 @ =0x00196225
	muls r0, r2, r0
	ldr r1, _08074038 @ =0x3C6EF35F
	adds r0, r0, r1
	movs r4, #0xff
	ands r4, r0
	movs r5, #0xa0
	lsls r5, r5, #2
	adds r4, r4, r5
	muls r0, r2, r0
	adds r0, r0, r1
	str r0, [r3]
	movs r1, #0x30
	bl __umodsi3
	movs r1, #3
	adds r3, r0, #0
	ands r3, r1
	lsls r3, r3, #8
	ldr r5, _0807403C @ =gSineTable
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r4, r2
	lsls r1, r1, #1
	adds r1, r1, r5
	movs r2, #0
	ldrsh r1, [r1, r2]
	muls r1, r0, r1
	lsls r2, r4, #1
	adds r2, r2, r5
	movs r5, #0
	ldrsh r2, [r2, r5]
	muls r2, r0, r2
	lsrs r1, r1, #0xe
	movs r0, #0xba
	lsls r0, r0, #3
	adds r1, r1, r0
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	lsrs r2, r2, #0xe
	movs r5, #0xb8
	lsls r5, r5, #1
	adds r2, r2, r5
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	movs r5, #0x80
	lsls r5, r5, #3
	adds r0, r5, #0
	orrs r3, r0
	str r4, [sp]
	movs r0, #0x14
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	ldr r0, [r7, #0x4c]
	str r0, [sp, #0xc]
	movs r0, #7
	bl sub_8079758
_08074014:
	ldrh r1, [r6]
	movs r0, #0x3f
	ands r0, r1
	cmp r0, #0
	bne _08074044
	ldr r0, _0807402C @ =0x00000221
	bl m4aSongNumStart
	b _08074044
	.align 2, 0
_08074028: .4byte gCurTask
_0807402C: .4byte 0x00000221
_08074030: .4byte gPseudoRandom
_08074034: .4byte 0x00196225
_08074038: .4byte 0x3C6EF35F
_0807403C: .4byte gSineTable
_08074040:
	ldr r0, _0807404C @ =sub_8074050
	str r0, [r2, #8]
_08074044:
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807404C: .4byte sub_8074050

	thumb_func_start sub_8074050
sub_8074050: @ 0x08074050
	push {r4, lr}
	sub sp, #0x10
	ldr r0, _08074074 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r2, r1, r0
	ldr r3, [r2, #0x68]
	adds r0, #0x44
	adds r4, r1, r0
	ldrh r0, [r4]
	cmp r0, #0
	beq _08074078
	cmp r0, #1
	beq _080740A4
	b _080740C2
	.align 2, 0
_08074074: .4byte gCurTask
_08074078:
	ldr r0, [r2]
	asrs r0, r0, #8
	str r0, [sp]
	ldr r0, [r2, #4]
	asrs r0, r0, #8
	subs r0, #0x20
	str r0, [sp, #4]
	ldr r0, [r2]
	asrs r0, r0, #8
	str r0, [sp, #8]
	ldr r0, [r2, #4]
	asrs r0, r0, #8
	str r0, [sp, #0xc]
	ldr r1, _080740A0 @ =sub_807A37C
	mov r0, sp
	bl sub_8078E34
	movs r0, #1
	b _080740C0
	.align 2, 0
_080740A0: .4byte sub_807A37C
_080740A4:
	ldr r1, [r3, #4]
	movs r0, #0x80
	lsls r0, r0, #0x14
	ands r1, r0
	cmp r1, #0
	bne _080740C2
	ldr r0, [r2, #0x30]
	strb r1, [r0]
	ldr r0, [r2, #0x34]
	movs r1, #0xa
	strh r1, [r0]
	ldr r0, [r2, #0x38]
	strh r1, [r0]
	movs r0, #0x64
_080740C0:
	strh r0, [r4]
_080740C2:
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80740CC
sub_80740CC: @ 0x080740CC
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r2, r4, #0
	adds r2, #0x46
	ldrh r5, [r2]
	cmp r5, #0
	bne _0807410C
	bl sub_8074D1C
	adds r1, r4, #0
	adds r1, #0x4a
	ldrh r0, [r1]
	adds r0, #3
	strh r0, [r1]
	ldr r2, _08074104 @ =gSineTable
	ldr r1, _08074108 @ =0x000003FF
	ands r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	movs r2, #0
	ldrsh r1, [r0, r2]
	lsls r0, r1, #5
	subs r0, r0, r1
	asrs r0, r0, #5
	strh r0, [r4, #0xc]
	strh r5, [r4, #0xe]
	b _0807413C
	.align 2, 0
_08074104: .4byte gSineTable
_08074108: .4byte 0x000003FF
_0807410C:
	ldr r3, _08074144 @ =gSineTable
	adds r0, r4, #0
	adds r0, #0x4a
	ldrh r0, [r0]
	lsls r0, r0, #0x14
	lsrs r0, r0, #0x16
	lsls r0, r0, #1
	adds r0, r0, r3
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r1, r0, #2
	adds r1, r1, r0
	asrs r1, r1, #6
	strh r1, [r4, #0xe]
	ldrh r2, [r2]
	lsls r0, r2, #1
	adds r0, r0, r2
	lsls r0, r0, #3
	adds r0, r0, r3
	ldrh r0, [r0]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x14
	adds r1, r1, r0
	strh r1, [r4, #0xe]
_0807413C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08074144: .4byte gSineTable

	thumb_func_start sub_8074148
sub_8074148: @ 0x08074148
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	mov sl, r0
	mov r7, sl
	adds r7, #0x70
	movs r0, #0xb0
	lsls r0, r0, #1
	add r0, sl
	mov sb, r0
	mov r0, sl
	adds r0, #0x3c
	ldrb r0, [r0]
	str r0, [sp]
	mov r2, sl
	movs r3, #0xc
	ldrsh r1, [r2, r3]
	ldr r0, [r2]
	adds r0, r0, r1
	asrs r0, r0, #8
	ldr r5, _08074310 @ =gCamera
	ldr r1, [r5]
	subs r0, r0, r1
	strh r0, [r7, #0x10]
	movs r6, #0xe
	ldrsh r1, [r2, r6]
	ldr r0, [r2, #4]
	adds r0, r0, r1
	asrs r0, r0, #8
	ldr r1, [r5, #4]
	subs r0, r0, r1
	strh r0, [r7, #0x12]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	bl DisplaySprite
	adds r7, #0x50
	mov r0, sl
	movs r2, #0xc
	ldrsh r1, [r0, r2]
	ldr r0, [r0]
	adds r0, r0, r1
	asrs r0, r0, #8
	ldr r1, [r5]
	subs r0, r0, r1
	strh r0, [r7, #0x10]
	mov r3, sl
	movs r6, #0xe
	ldrsh r1, [r3, r6]
	ldr r0, [r3, #4]
	adds r0, r0, r1
	asrs r0, r0, #8
	ldr r1, [r5, #4]
	subs r0, r0, r1
	strh r0, [r7, #0x12]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	bl DisplaySprite
	movs r7, #0x88
	lsls r7, r7, #1
	add r7, sl
	mov r0, sl
	movs r2, #0xc
	ldrsh r1, [r0, r2]
	ldr r0, [r0]
	adds r0, r0, r1
	asrs r0, r0, #8
	ldr r1, [r5]
	subs r0, r0, r1
	strh r0, [r7, #0x10]
	mov r3, sl
	movs r6, #0xe
	ldrsh r1, [r3, r6]
	ldr r0, [r3, #4]
	adds r0, r0, r1
	asrs r0, r0, #8
	ldr r1, [r5, #4]
	subs r0, r0, r1
	strh r0, [r7, #0x12]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	bl DisplaySprite
	mov r0, sl
	adds r0, #0x5a
	ldr r1, _08074314 @ =0xFFFFFF00
	adds r4, r1, #0
	ldrh r0, [r0]
	adds r4, r4, r0
	ldr r2, _08074318 @ =0x000003FF
	adds r0, r2, #0
	ands r4, r0
	ldr r2, _0807431C @ =gSineTable
	lsls r0, r4, #1
	adds r0, r0, r2
	movs r6, #0
	ldrsh r3, [r0, r6]
	mov ip, r3
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r4, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	movs r6, #0
	ldrsh r3, [r0, r6]
	mov r8, r3
	mov r0, sl
	adds r0, #0x46
	ldrh r1, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r3, [r0]
	lsls r3, r3, #0x10
	asrs r3, r3, #0x1b
	mov r7, sl
	adds r7, #0x98
	mov r1, sl
	movs r2, #0xc
	ldrsh r0, [r1, r2]
	ldr r2, [r1]
	adds r2, r2, r0
	asrs r2, r2, #8
	ldr r0, [r5]
	subs r2, r2, r0
	strh r2, [r7, #0x10]
	movs r6, #0xe
	ldrsh r0, [r1, r6]
	ldr r1, [r1, #4]
	adds r1, r1, r0
	asrs r1, r1, #8
	ldr r0, [r5, #4]
	subs r1, r1, r0
	mov r0, r8
	muls r0, r3, r0
	asrs r0, r0, #0xe
	subs r2, r2, r0
	strh r2, [r7, #0x10]
	mov r0, ip
	muls r0, r3, r0
	asrs r0, r0, #0xe
	subs r1, r1, r0
	strh r1, [r7, #0x12]
	ldr r2, _08074320 @ =gUnknown_03002C24
	ldrb r0, [r2]
	adds r1, r0, #1
	strb r1, [r2]
	movs r1, #0x20
	orrs r0, r1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [r7, #8]
	ldrh r0, [r7, #0x10]
	mov r1, sb
	strh r0, [r1, #6]
	ldrh r0, [r7, #0x12]
	strh r0, [r1, #8]
	strh r4, [r1]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	mov r1, sb
	bl TransformSprite
	adds r0, r7, #0
	bl DisplaySprite
	adds r7, #0x50
	ldr r2, [sp]
	lsls r2, r2, #2
	str r2, [sp, #4]
	add r2, sl
	movs r3, #0x10
	ldrsh r1, [r2, r3]
	mov r6, sl
	ldr r0, [r6]
	adds r0, r0, r1
	asrs r0, r0, #8
	ldr r1, [r5]
	subs r0, r0, r1
	strh r0, [r7, #0x10]
	movs r0, #0x12
	ldrsh r1, [r2, r0]
	ldr r0, [r6, #4]
	adds r0, r0, r1
	asrs r0, r0, #8
	ldr r1, [r5, #4]
	subs r0, r0, r1
	strh r0, [r7, #0x12]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	ldr r0, [r7, #8]
	ldr r1, _08074324 @ =0xFFFFFBFF
	ands r0, r1
	str r0, [r7, #8]
	adds r0, r7, #0
	bl DisplaySprite
	ldr r0, [r7, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	str r0, [r7, #8]
	adds r0, r7, #0
	bl DisplaySprite
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08074310: .4byte gCamera
_08074314: .4byte 0xFFFFFF00
_08074318: .4byte 0x000003FF
_0807431C: .4byte gSineTable
_08074320: .4byte gUnknown_03002C24
_08074324: .4byte 0xFFFFFBFF

	thumb_func_start sub_8074328
sub_8074328: @ 0x08074328
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r6, r0, #0
	ldr r0, _08074414 @ =sub_807442C
	movs r2, #0x80
	lsls r2, r2, #6
	movs r1, #0
	mov sb, r1
	str r1, [sp]
	movs r1, #0x4c
	movs r3, #0
	bl TaskCreate
	ldrh r0, [r0, #6]
	movs r3, #0xc0
	lsls r3, r3, #0x12
	adds r3, r0, r3
	ldr r2, _08074418 @ =0x0300001C
	adds r0, r0, r2
	adds r1, r6, #0
	adds r1, #0x5a
	ldr r5, _0807441C @ =0xFFFFFF00
	adds r4, r5, #0
	ldrh r1, [r1]
	adds r4, r4, r1
	ldr r7, _08074420 @ =0x000003FF
	adds r1, r7, #0
	ands r4, r1
	ldr r2, _08074424 @ =gSineTable
	lsls r1, r4, #1
	adds r1, r1, r2
	movs r7, #0
	ldrsh r5, [r1, r7]
	mov sl, r5
	movs r5, #0x80
	lsls r5, r5, #1
	adds r1, r4, r5
	lsls r1, r1, #1
	adds r1, r1, r2
	movs r2, #0
	ldrsh r7, [r1, r2]
	mov r8, r7
	adds r1, r6, #0
	adds r1, #0x3d
	ldrb r1, [r1]
	movs r5, #0x41
	subs r5, r5, r1
	str r6, [r3]
	movs r7, #0xc
	ldrsh r2, [r6, r7]
	ldr r1, [r6]
	adds r1, r1, r2
	mov r7, r8
	asrs r2, r7, #1
	adds r1, r1, r2
	str r1, [r3, #4]
	movs r1, #0xe
	ldrsh r2, [r6, r1]
	ldr r1, [r6, #4]
	adds r1, r1, r2
	mov r7, sl
	asrs r2, r7, #1
	adds r1, r1, r2
	str r1, [r3, #8]
	mov r1, r8
	muls r1, r5, r1
	asrs r1, r1, #8
	movs r2, #0
	strh r1, [r3, #0xc]
	mov r1, sl
	muls r1, r5, r1
	asrs r1, r1, #8
	strh r1, [r3, #0xe]
	str r5, [r3, #0x10]
	strh r4, [r3, #0x14]
	movs r1, #0xc
	strb r1, [r3, #0x18]
	strb r2, [r3, #0x19]
	strb r2, [r3, #0x1a]
	strb r2, [r3, #0x1b]
	ldr r1, [r6, #0x68]
	str r1, [r3, #0x44]
	ldr r1, [r6, #0x6c]
	str r1, [r3, #0x48]
	ldr r1, [r6, #0x50]
	str r1, [r0]
	ldr r1, _08074428 @ =0x000004E4
	strh r1, [r0, #0xc]
	strb r2, [r0, #0x1a]
	subs r1, #0xe4
	strh r1, [r0, #0x14]
	mov r1, sb
	strh r1, [r0, #0xe]
	strh r1, [r0, #0x16]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	strb r2, [r0, #0x1f]
	subs r1, #0x11
	str r1, [r0, #0x20]
	movs r1, #0x80
	lsls r1, r1, #5
	str r1, [r0, #8]
	bl UpdateSpriteAnimation
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08074414: .4byte sub_807442C
_08074418: .4byte 0x0300001C
_0807441C: .4byte 0xFFFFFF00
_08074420: .4byte 0x000003FF
_08074424: .4byte gSineTable
_08074428: .4byte 0x000004E4

	thumb_func_start sub_807442C
sub_807442C: @ 0x0807442C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	movs r3, #0
	ldr r0, _080744B8 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r6, [r4]
	adds r0, #0x1c
	adds r7, r1, r0
	movs r1, #0x70
	adds r1, r1, r6
	mov r8, r1
	ldrb r1, [r4, #0x18]
	movs r0, #0x18
	ldrsb r0, [r4, r0]
	cmp r0, #0
	beq _08074488
	subs r0, r1, #1
	strb r0, [r4, #0x18]
	ldr r1, [r4, #0x10]
	subs r1, #4
	str r1, [r4, #0x10]
	ldr r2, _080744BC @ =gSineTable
	ldrh r0, [r4, #0x14]
	movs r5, #0x80
	lsls r5, r5, #1
	adds r0, r0, r5
	lsls r0, r0, #1
	adds r0, r0, r2
	movs r5, #0
	ldrsh r0, [r0, r5]
	muls r0, r1, r0
	asrs r0, r0, #8
	strh r0, [r4, #0xc]
	ldrh r0, [r4, #0x14]
	lsls r0, r0, #1
	adds r0, r0, r2
	movs r2, #0
	ldrsh r0, [r0, r2]
	muls r0, r1, r0
	asrs r0, r0, #8
	strh r0, [r4, #0xe]
_08074488:
	movs r5, #0xc
	ldrsh r0, [r4, r5]
	ldr r1, [r4, #4]
	adds r1, r1, r0
	str r1, [r4, #4]
	movs r0, #0xe
	ldrsh r2, [r4, r0]
	ldr r0, [r4, #8]
	adds r0, r0, r2
	str r0, [r4, #8]
	ldr r2, _080744C0 @ =0x00054400
	cmp r1, r2
	bgt _080744C4
	movs r1, #0xc
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bge _080744C4
	ldrb r0, [r4, #0x19]
	adds r0, #1
	strb r0, [r4, #0x19]
	str r2, [r4, #4]
	movs r2, #0xc
	ldrsh r0, [r4, r2]
	b _080744E2
	.align 2, 0
_080744B8: .4byte gCurTask
_080744BC: .4byte gSineTable
_080744C0: .4byte 0x00054400
_080744C4:
	ldr r1, [r4, #4]
	ldr r0, _0807452C @ =0x00065BFF
	cmp r1, r0
	ble _080744E8
	movs r5, #0xc
	ldrsh r0, [r4, r5]
	cmp r0, #0
	ble _080744E8
	ldrb r0, [r4, #0x19]
	adds r0, #1
	strb r0, [r4, #0x19]
	ldr r0, _08074530 @ =0x00065C00
	str r0, [r4, #4]
	movs r1, #0xc
	ldrsh r0, [r4, r1]
_080744E2:
	rsbs r0, r0, #0
	strh r0, [r4, #0xc]
	movs r3, #1
_080744E8:
	ldr r0, [r4, #8]
	movs r1, #0xb8
	lsls r1, r1, #8
	cmp r0, r1
	bgt _08074510
	movs r2, #0xe
	ldrsh r0, [r4, r2]
	cmp r0, #0
	bge _08074510
	cmp r3, #0
	bne _08074504
	ldrb r0, [r4, #0x19]
	adds r0, #1
	strb r0, [r4, #0x19]
_08074504:
	str r1, [r4, #8]
	movs r5, #0xe
	ldrsh r0, [r4, r5]
	rsbs r0, r0, #0
	strh r0, [r4, #0xe]
	movs r3, #1
_08074510:
	cmp r3, #0
	beq _0807451A
	ldr r0, _08074534 @ =0x00000232
	bl m4aSongNumStart
_0807451A:
	ldr r1, [r4, #8]
	ldr r0, _08074538 @ =0x00015FFF
	cmp r1, r0
	ble _08074540
	ldr r0, _0807453C @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
	b _08074668
	.align 2, 0
_0807452C: .4byte 0x00065BFF
_08074530: .4byte 0x00065C00
_08074534: .4byte 0x00000232
_08074538: .4byte 0x00015FFF
_0807453C: .4byte gCurTask
_08074540:
	ldrb r0, [r4, #0x19]
	cmp r0, #9
	bhi _08074550
	adds r5, r6, #0
	adds r5, #0x3d
	ldrb r0, [r5]
	cmp r0, #0
	bne _0807456C
_08074550:
	movs r0, #0x1e
	strb r0, [r4, #0x1b]
	ldr r0, _08074564 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08074568 @ =sub_8074DC4
	str r0, [r1, #8]
	bl _call_via_r0
	b _08074668
	.align 2, 0
_08074564: .4byte gCurTask
_08074568: .4byte sub_8074DC4
_0807456C:
	ldr r1, [r4, #0x44]
	adds r0, r4, #0
	bl sub_807467C
	ldr r1, [r4, #0x48]
	adds r0, r4, #0
	bl sub_807467C
	ldrb r0, [r4, #0x1a]
	cmp r0, #0
	beq _08074662
	movs r1, #0x3e
	ldrsh r0, [r6, r1]
	cmp r0, #0
	bne _08074662
	ldrb r0, [r5]
	cmp r0, #0
	beq _08074662
	ldr r0, [r4, #4]
	asrs r0, r0, #8
	adds r1, r7, #0
	adds r1, #0x24
	movs r3, #0
	ldrsb r3, [r1, r3]
	adds r2, r0, r3
	movs r5, #0xc
	ldrsh r1, [r6, r5]
	ldr r0, [r6]
	adds r0, r0, r1
	asrs r0, r0, #8
	mov r1, r8
	adds r1, #0x24
	movs r5, #0
	ldrsb r5, [r1, r5]
	adds r1, r0, r5
	cmp r2, r1
	bgt _080745CC
	adds r0, r7, #0
	adds r0, #0x26
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r0, r3
	adds r0, r2, r0
	cmp r0, r1
	bge _080745DE
	cmp r2, r1
	blt _08074662
_080745CC:
	mov r0, r8
	adds r0, #0x26
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r0, r5
	adds r0, r1, r0
	cmp r0, r2
	blt _08074662
_080745DE:
	ldr r0, [r4, #8]
	asrs r0, r0, #8
	adds r1, r7, #0
	adds r1, #0x25
	movs r5, #0
	ldrsb r5, [r1, r5]
	adds r3, r0, r5
	movs r0, #0xe
	ldrsh r1, [r6, r0]
	ldr r0, [r6, #4]
	adds r0, r0, r1
	asrs r0, r0, #8
	mov r1, r8
	adds r1, #0x25
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r2, r0, r1
	cmp r3, r2
	bgt _0807461C
	adds r0, r7, #0
	adds r0, #0x27
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r0, r5
	adds r0, r3, r0
	cmp r0, r2
	bge _0807462E
	cmp r3, r2
	blt _08074662
_0807461C:
	mov r0, r8
	adds r0, #0x27
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r0, r1
	adds r0, r2, r0
	cmp r0, r3
	blt _08074662
_0807462E:
	adds r0, r6, #0
	bl sub_8074AF0
	ldr r2, _0807464C @ =0x0000FE80
	strh r2, [r4, #0xe]
	movs r1, #0xc
	ldrsh r0, [r6, r1]
	ldr r1, [r6]
	adds r1, r1, r0
	ldr r0, [r4, #4]
	cmp r0, r1
	bge _08074650
	strh r2, [r4, #0xc]
	b _08074656
	.align 2, 0
_0807464C: .4byte 0x0000FE80
_08074650:
	movs r0, #0xc0
	lsls r0, r0, #1
	strh r0, [r4, #0xc]
_08074656:
	movs r0, #0x1e
	strb r0, [r4, #0x1b]
	ldr r0, _08074674 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08074678 @ =sub_8074DC4
	str r0, [r1, #8]
_08074662:
	adds r0, r4, #0
	bl sub_8074E18
_08074668:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08074674: .4byte gCurTask
_08074678: .4byte sub_8074DC4

	thumb_func_start sub_807467C
sub_807467C: @ 0x0807467C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r4, r0, #0
	adds r6, r1, #0
	ldr r0, [r4]
	mov r8, r0
	adds r7, r4, #0
	adds r7, #0x1c
	ldrb r0, [r4, #0x1b]
	cmp r0, #0
	beq _0807469C
	subs r0, #1
	strb r0, [r4, #0x1b]
	b _080747E6
_0807469C:
	adds r0, r6, #0
	bl sub_802C080
	cmp r0, #0
	beq _080746A8
	b _080747E6
_080746A8:
	ldr r1, [r4, #4]
	asrs r1, r1, #8
	ldr r2, [r4, #8]
	asrs r2, r2, #8
	str r6, [sp]
	adds r0, r7, #0
	movs r3, #0
	bl sub_8020E3C
	cmp r0, #0
	bne _080746C0
	b _080747D4
_080746C0:
	ldr r0, [r6, #4]
	movs r1, #0x10
	ands r0, r1
	cmp r0, #0
	beq _080746CC
	b _080747D4
_080746CC:
	movs r1, #0x30
	ldrsh r0, [r6, r1]
	cmp r0, #0xf7
	bne _080746D6
	b _080747D4
_080746D6:
	movs r0, #0xa
	strb r0, [r4, #0x1b]
	movs r0, #1
	strb r0, [r4, #0x1a]
	ldrb r0, [r4, #0x19]
	adds r0, #1
	strb r0, [r4, #0x19]
	ldr r0, [r6, #0x14]
	ldr r1, [r4, #8]
	subs r0, r0, r1
	lsls r0, r0, #8
	asrs r0, r0, #0x10
	ldr r1, [r6, #0x10]
	ldr r2, [r4, #4]
	subs r1, r1, r2
	lsls r1, r1, #8
	asrs r1, r1, #0x10
	bl sa2__sub_8004418
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	ldrh r0, [r4, #0x14]
	adds r1, r5, #0
	movs r2, #0xa
	bl sa2__sub_808558C
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _08074734
	ldrh r1, [r4, #0x14]
	subs r0, r1, r5
	cmp r0, #0
	blt _08074724
	subs r1, r1, r0
	ldr r0, _08074720 @ =0x000003FF
	b _0807472A
	.align 2, 0
_08074720: .4byte 0x000003FF
_08074724:
	subs r0, r5, r1
	subs r0, r1, r0
	ldr r1, _08074730 @ =0x000003FF
_0807472A:
	ands r0, r1
	strh r0, [r4, #0x14]
	b _08074750
	.align 2, 0
_08074730: .4byte 0x000003FF
_08074734:
	ldrh r1, [r4, #0x14]
	subs r0, r1, r5
	cmp r0, #0
	blt _08074748
	adds r1, r1, r0
	ldr r0, _08074744 @ =0x000003FF
	b _0807474C
	.align 2, 0
_08074744: .4byte 0x000003FF
_08074748:
	ldr r0, _080747C4 @ =0x000003FF
	adds r1, r5, #0
_0807474C:
	ands r1, r0
	strh r1, [r4, #0x14]
_08074750:
	ldr r2, _080747C8 @ =gSineTable
	ldrh r0, [r4, #0x14]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	movs r1, #0
	ldrsh r0, [r0, r1]
	ldr r1, [r4, #0x10]
	muls r0, r1, r0
	rsbs r0, r0, #0
	asrs r0, r0, #8
	strh r0, [r4, #0xc]
	ldrh r0, [r4, #0x14]
	lsls r0, r0, #1
	adds r0, r0, r2
	movs r2, #0
	ldrsh r0, [r0, r2]
	muls r0, r1, r0
	rsbs r0, r0, #0
	asrs r0, r0, #8
	strh r0, [r4, #0xe]
	ldrh r0, [r6, #0x1c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x11
	rsbs r0, r0, #0
	strh r0, [r6, #0x1c]
	ldrh r0, [r6, #0x18]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x11
	rsbs r0, r0, #0
	strh r0, [r6, #0x18]
	ldrh r0, [r6, #0x1a]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x11
	rsbs r0, r0, #0
	strh r0, [r6, #0x1a]
	mov r1, r8
	ldr r0, [r1, #0x54]
	str r0, [r7]
	ldr r0, _080747CC @ =0x000004E4
	strh r0, [r7, #0xc]
	movs r0, #1
	strb r0, [r7, #0x1a]
	movs r0, #0xff
	strb r0, [r7, #0x1b]
	movs r2, #0x30
	ldrsh r0, [r6, r2]
	cmp r0, #0xd4
	bne _080747BC
	adds r0, r6, #0
	bl Player_800DB30
_080747BC:
	ldr r0, _080747D0 @ =0x00000233
	bl m4aSongNumStart
	b _080747E6
	.align 2, 0
_080747C4: .4byte 0x000003FF
_080747C8: .4byte gSineTable
_080747CC: .4byte 0x000004E4
_080747D0: .4byte 0x00000233
_080747D4:
	ldr r1, [r4, #4]
	asrs r1, r1, #8
	ldr r2, [r4, #8]
	asrs r2, r2, #8
	str r6, [sp]
	adds r0, r7, #0
	movs r3, #0
	bl sub_8020CE0
_080747E6:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80747F4
sub_80747F4: @ 0x080747F4
	push {r4, r5, r6, lr}
	mov r6, sb
	mov r5, r8
	push {r5, r6}
	sub sp, #4
	adds r6, r0, #0
	mov r8, r1
	adds r5, r2, #0
	lsls r3, r3, #0x18
	mov sb, r3
	mov r0, sb
	lsrs r0, r0, #0x18
	mov sb, r0
	ldr r0, _080748B8 @ =sub_80748D0
	movs r2, #0x80
	lsls r2, r2, #6
	ldr r1, _080748BC @ =sub_8074D7C
	str r1, [sp]
	movs r1, #0x50
	movs r3, #0
	bl TaskCreate
	ldrh r3, [r0, #6]
	movs r2, #0xc0
	lsls r2, r2, #0x12
	adds r2, r3, r2
	ldr r1, _080748C0 @ =0x03000028
	adds r4, r3, r1
	str r5, [r2]
	lsls r6, r6, #8
	str r6, [r2, #0xc]
	mov r0, r8
	lsls r0, r0, #8
	str r0, [r2, #0x10]
	ldr r0, [r2, #0xc]
	ldr r1, [r2, #0x10]
	str r0, [r2, #4]
	str r1, [r2, #8]
	movs r1, #0
	mov r8, r1
	movs r6, #0
	strh r6, [r2, #0x14]
	strh r6, [r2, #0x16]
	ldr r1, _080748C4 @ =0x03000020
	adds r0, r3, r1
	mov r1, r8
	strb r1, [r0]
	movs r0, #0xfa
	lsls r0, r0, #3
	strh r0, [r2, #0x24]
	strh r6, [r2, #0x26]
	ldr r0, [r5, #0x68]
	str r0, [r2, #0x18]
	ldr r0, [r5, #0x6c]
	str r0, [r2, #0x1c]
	mov r0, sb
	lsls r0, r0, #2
	mov sb, r0
	adds r5, #0x34
	add r5, sb
	ldr r1, _080748C8 @ =0x03000024
	adds r3, r3, r1
	str r3, [r5]
	movs r0, #0x12
	bl VramMalloc
	str r0, [r4]
	ldr r0, _080748CC @ =0x000003A9
	strh r0, [r4, #0xc]
	mov r0, r8
	strb r0, [r4, #0x1a]
	movs r0, #0x90
	lsls r0, r0, #3
	strh r0, [r4, #0x14]
	strh r6, [r4, #0xe]
	strh r6, [r4, #0x16]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	movs r0, #0x10
	strb r0, [r4, #0x1c]
	mov r1, r8
	strb r1, [r4, #0x1f]
	subs r0, #0x11
	str r0, [r4, #0x20]
	movs r0, #0x80
	lsls r0, r0, #5
	str r0, [r4, #8]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080748B8: .4byte sub_80748D0
_080748BC: .4byte sub_8074D7C
_080748C0: .4byte 0x03000028
_080748C4: .4byte 0x03000020
_080748C8: .4byte 0x03000024
_080748CC: .4byte 0x000003A9

	thumb_func_start sub_80748D0
sub_80748D0: @ 0x080748D0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	ldr r0, _08074960 @ =gCurTask
	ldr r0, [r0]
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r7, r0, r1
	ldr r2, [r7]
	adds r1, #0x28
	adds r1, r0, r1
	str r1, [sp, #8]
	ldr r1, _08074964 @ =0x03000020
	adds r0, r0, r1
	ldrb r0, [r0]
	str r0, [sp, #4]
	ldrh r1, [r7, #0x24]
	movs r0, #0xfa
	lsls r0, r0, #3
	cmp r1, r0
	bne _08074910
	adds r0, r2, #0
	adds r0, #0x40
	ldrb r0, [r0]
	cmp r0, #0
	beq _08074910
	movs r0, #0
	strh r0, [r7, #0x24]
_08074910:
	movs r5, #0
	movs r2, #0x18
	adds r2, r2, r7
	mov sl, r2
	movs r0, #0x20
	adds r0, r0, r7
	mov r8, r0
	mov r6, r8
	movs r1, #1
	mov sb, r1
_08074924:
	lsls r0, r5, #2
	add r0, sl
	ldr r4, [r0]
	ldr r1, [r7, #0xc]
	asrs r1, r1, #8
	ldr r2, [r7, #0x10]
	asrs r2, r2, #8
	movs r0, #0
	str r0, [sp]
	ldr r0, [sp, #8]
	adds r3, r4, #0
	bl sub_8020950
	adds r1, r0, #0
	movs r0, #0x80
	lsls r0, r0, #9
	ands r0, r1
	cmp r0, #0
	beq _08074968
	lsls r1, r1, #0x18
	asrs r1, r1, #0x10
	ldr r0, [r4, #0x14]
	adds r0, r0, r1
	str r0, [r4, #0x14]
	mov r0, sb
	lsls r0, r5
	ldrb r1, [r6]
	orrs r0, r1
	b _08074970
	.align 2, 0
_08074960: .4byte gCurTask
_08074964: .4byte 0x03000020
_08074968:
	mov r1, sb
	lsls r1, r5
	ldrb r0, [r6]
	bics r0, r1
_08074970:
	strb r0, [r6]
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #1
	bls _08074924
	ldrh r2, [r7, #0x24]
	subs r0, r2, #2
	lsls r0, r0, #0x10
	ldr r1, _080749C4 @ =0x03E50000
	cmp r0, r1
	bhi _0807498C
	subs r0, r2, #1
	strh r0, [r7, #0x24]
_0807498C:
	ldr r3, [r7, #0x10]
	ldr r2, [r7, #8]
	ldr r0, [sp, #4]
	cmp r0, #0
	bne _080749AE
	mov r1, r8
	ldrb r0, [r1]
	cmp r0, #0
	bne _080749A0
	b _08074AA8
_080749A0:
	ldrh r0, [r7, #0x24]
	cmp r0, #0
	bne _080749AE
	cmp r3, r2
	bne _080749AE
	movs r0, #0x3c
	strh r0, [r7, #0x26]
_080749AE:
	mov r1, r8
	ldrb r0, [r1]
	cmp r0, #0
	beq _08074AA8
	subs r1, r3, r2
	cmp r1, #0
	blt _080749CC
	ldr r0, _080749C8 @ =0x00005FFF
	cmp r1, r0
	ble _080749D6
	b _08074ADA
	.align 2, 0
_080749C4: .4byte 0x03E50000
_080749C8: .4byte 0x00005FFF
_080749CC:
	subs r1, r2, r3
	ldr r0, _080749E8 @ =0x00005FFF
	cmp r1, r0
	ble _080749D6
	b _08074ADA
_080749D6:
	ldrh r1, [r7, #0x24]
	cmp r1, #1
	beq _08074A36
	cmp r1, #1
	bgt _080749EC
	cmp r1, #0
	beq _080749F6
	b _08074ADA
	.align 2, 0
_080749E8: .4byte 0x00005FFF
_080749EC:
	movs r0, #0xfa
	lsls r0, r0, #2
	cmp r1, r0
	beq _08074A6C
	b _08074ADA
_080749F6:
	ldrh r1, [r7, #0x26]
	movs r2, #0x26
	ldrsh r0, [r7, r2]
	cmp r0, #0
	beq _08074A04
	subs r0, r1, #1
	b _08074AD8
_08074A04:
	movs r1, #0xc0
	lsls r1, r1, #3
	adds r0, r3, r1
	str r0, [r7, #0x10]
	movs r5, #0
	mov r3, sl
	mov r2, r8
	movs r6, #1
_08074A14:
	lsls r0, r5, #2
	adds r0, r3, r0
	ldr r4, [r0]
	ldrb r0, [r2]
	asrs r0, r5
	ands r0, r6
	cmp r0, #0
	beq _08074A2A
	ldr r0, [r4, #0x14]
	adds r0, r0, r1
	str r0, [r4, #0x14]
_08074A2A:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #1
	bls _08074A14
	b _08074ADA
_08074A36:
	ldr r1, _08074A68 @ =0xFFFFFA00
	adds r0, r3, r1
	str r0, [r7, #0x10]
	movs r5, #0
	mov r3, r8
	movs r6, #1
	mov r2, sl
_08074A44:
	ldrb r0, [r3]
	asrs r0, r5
	ands r0, r6
	cmp r0, #0
	beq _08074A5A
	lsls r0, r5, #2
	adds r0, r2, r0
	ldr r4, [r0]
	ldr r0, [r4, #0x14]
	adds r0, r0, r1
	str r0, [r4, #0x14]
_08074A5A:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #1
	bls _08074A44
	b _08074ADA
	.align 2, 0
_08074A68: .4byte 0xFFFFFA00
_08074A6C:
	cmp r3, r2
	bgt _08074A74
	str r2, [r7, #0x10]
	b _08074ADA
_08074A74:
	ldr r1, _08074AA4 @ =0xFFFFFA00
	adds r0, r3, r1
	str r0, [r7, #0x10]
	movs r5, #0
	mov r3, r8
	movs r6, #1
	mov r2, sl
_08074A82:
	ldrb r0, [r3]
	asrs r0, r5
	ands r0, r6
	cmp r0, #0
	beq _08074A98
	lsls r0, r5, #2
	adds r0, r2, r0
	ldr r4, [r0]
	ldr r0, [r4, #0x14]
	adds r0, r0, r1
	str r0, [r4, #0x14]
_08074A98:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #1
	bls _08074A82
	b _08074ADA
	.align 2, 0
_08074AA4: .4byte 0xFFFFFA00
_08074AA8:
	adds r0, r3, #0
	adds r1, r2, #0
	cmp r0, r1
	beq _08074AD6
	cmp r0, r1
	ble _08074AC8
	ldr r2, _08074AC4 @ =0xFFFFFA00
	adds r0, r0, r2
	str r0, [r7, #0x10]
	cmp r0, r1
	bgt _08074AD6
	str r1, [r7, #0x10]
	b _08074AD6
	.align 2, 0
_08074AC4: .4byte 0xFFFFFA00
_08074AC8:
	movs r1, #0xc0
	lsls r1, r1, #3
	adds r0, r3, r1
	str r0, [r7, #0x10]
	cmp r0, r2
	blt _08074AD6
	str r2, [r7, #0x10]
_08074AD6:
	movs r0, #0
_08074AD8:
	strh r0, [r7, #0x26]
_08074ADA:
	adds r0, r7, #0
	bl sub_8074D90
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8074AF0
sub_8074AF0: @ 0x08074AF0
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	movs r0, #0x88
	lsls r0, r0, #1
	adds r6, r4, r0
	movs r1, #0x3e
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bne _08074B98
	adds r0, r4, #0
	adds r0, #0x3d
	ldrb r1, [r0]
	adds r5, r0, #0
	cmp r1, #0
	beq _08074B12
	subs r0, r1, #1
	strb r0, [r5]
_08074B12:
	ldr r0, _08074B28 @ =gStageData
	ldrb r0, [r0, #1]
	cmp r0, #0
	bne _08074B2C
	ldrb r0, [r5]
	cmp r0, #4
	bne _08074B38
	movs r0, #0x33
	bl sub_80299D4
	b _08074B38
	.align 2, 0
_08074B28: .4byte gStageData
_08074B2C:
	ldrb r0, [r5]
	cmp r0, #3
	bne _08074B38
	movs r0, #0x33
	bl sub_80299D4
_08074B38:
	movs r0, #0xeb
	bl m4aSongNumStart
	bl sub_807A468
	movs r0, #0xb4
	strh r0, [r4, #0x3e]
	movs r0, #2
	strb r0, [r6, #0x1a]
	movs r0, #0xff
	strb r0, [r6, #0x1b]
	ldr r0, _08074B84 @ =0x000004E6
	movs r1, #0
	movs r2, #0xb4
	movs r3, #0
	bl sub_8078DB0
	ldr r0, _08074B88 @ =0x000004E7
	movs r1, #0
	movs r2, #0xb4
	movs r3, #0
	bl sub_8078DB0
	ldr r1, _08074B8C @ =gStageData
	ldrb r0, [r1, #3]
	cmp r0, #5
	bne _08074B98
	ldrb r0, [r1, #6]
	cmp r0, #0
	bne _08074B90
	ldrb r0, [r5]
	cmp r0, #0
	beq _08074B98
	adds r1, r0, #0
	movs r0, #3
	bl sub_8027674
	b _08074B98
	.align 2, 0
_08074B84: .4byte 0x000004E6
_08074B88: .4byte 0x000004E7
_08074B8C: .4byte gStageData
_08074B90:
	ldrb r1, [r5]
	movs r0, #4
	bl sub_8027674
_08074B98:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08074BA0
sub_08074BA0: @ 0x08074BA0
	push {r4, r5, lr}
	ldr r1, _08074C10 @ =gStageData
	adds r5, r1, #0
	adds r5, #0x88
	ldr r1, [r5]
	ldrh r3, [r1, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r4, r3, r1
	ldrb r2, [r0, #2]
	movs r1, #0x7f
	ands r1, r2
	ldrb r2, [r0, #3]
	ldrb r0, [r0, #4]
	lsls r0, r0, #8
	orrs r2, r0
	cmp r1, #1
	bne _08074C28
	ldr r1, _08074C14 @ =0x0300003D
	adds r0, r3, r1
	movs r1, #0
	strb r1, [r0]
	ldr r0, _08074C18 @ =0x03000044
	adds r2, r3, r0
	movs r0, #0x96
	lsls r0, r0, #1
	strh r0, [r2]
	ldr r2, _08074C1C @ =0x0300005C
	adds r0, r3, r2
	strh r1, [r0]
	adds r2, #2
	adds r0, r3, r2
	strh r1, [r0]
	ldr r1, _08074C20 @ =0x03000060
	adds r0, r3, r1
	movs r1, #0x80
	lsls r1, r1, #2
	strh r1, [r0]
	adds r2, #4
	adds r0, r3, r2
	strh r1, [r0]
	ldr r1, [r4, #0x68]
	ldr r0, [r1, #4]
	movs r2, #0x80
	lsls r2, r2, #0x14
	orrs r0, r2
	str r0, [r1, #4]
	ldr r1, [r4, #0x6c]
	ldr r0, [r1, #4]
	orrs r0, r2
	str r0, [r1, #4]
	ldr r1, [r5]
	ldr r0, _08074C24 @ =sub_8073CE4
	str r0, [r1, #8]
	b _08074C48
	.align 2, 0
_08074C10: .4byte gStageData
_08074C14: .4byte 0x0300003D
_08074C18: .4byte 0x03000044
_08074C1C: .4byte 0x0300005C
_08074C20: .4byte 0x03000060
_08074C24: .4byte sub_8073CE4
_08074C28:
	cmp r1, #1
	blt _08074C48
	cmp r1, #4
	bgt _08074C48
	cmp r1, #3
	blt _08074C48
	ldr r1, _08074C50 @ =0x0300003D
	adds r0, r3, r1
	ldrb r1, [r0]
	lsls r0, r2, #0x18
	lsrs r0, r0, #0x18
	cmp r1, r0
	beq _08074C48
	adds r0, r4, #0
	bl sub_8074AF0
_08074C48:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08074C50: .4byte 0x0300003D

	thumb_func_start sub_8074C54
sub_8074C54: @ 0x08074C54
	push {r4, r5, lr}
	ldr r4, _08074C74 @ =gCurTask
	ldr r0, [r4]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	bl sub_8079FFC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08074C7C
	ldr r1, [r4]
	ldr r0, _08074C78 @ =sub_807391C
	b _08074C80
	.align 2, 0
_08074C74: .4byte gCurTask
_08074C78: .4byte sub_807391C
_08074C7C:
	ldr r1, [r4]
	ldr r0, _08074C90 @ =sub_8073ACC
_08074C80:
	str r0, [r1, #8]
	adds r0, r5, #0
	bl sub_8074148
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08074C90: .4byte sub_8073ACC

	thumb_func_start sub_8074C94
sub_8074C94: @ 0x08074C94
	push {lr}
	ldr r0, _08074CC0 @ =gCurTask
	ldr r0, [r0]
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	ldr r2, [r0, #0x68]
	ldr r1, [r2, #4]
	movs r3, #0x80
	lsls r3, r3, #0x14
	orrs r1, r3
	str r1, [r2, #4]
	ldr r2, [r0, #0x6c]
	ldr r1, [r2, #4]
	orrs r1, r3
	str r1, [r2, #4]
	bl sub_8074148
	pop {r0}
	bx r0
	.align 2, 0
_08074CC0: .4byte gCurTask

	thumb_func_start sub_8074CC4
sub_8074CC4: @ 0x08074CC4
	push {r4, lr}
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, [r4, #0x70]
	cmp r0, #0
	beq _08074CD8
	bl VramFree
_08074CD8:
	ldr r0, [r4, #0x4c]
	bl VramFree
	ldr r0, [r4, #0x50]
	bl VramFree
	ldr r0, [r4, #0x54]
	bl VramFree
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8074CF0
sub_8074CF0: @ 0x08074CF0
	push {lr}
	adds r2, r0, #0
	adds r3, r2, #0
	adds r3, #0x3c
	ldrb r0, [r3]
	lsls r0, r0, #2
	adds r1, r2, #0
	adds r1, #0x10
	adds r1, r1, r0
	ldr r0, [r2, #0xc]
	str r0, [r1]
	ldrb r0, [r3]
	adds r0, #1
	strb r0, [r3]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #8
	bne _08074D18
	movs r0, #0
	strb r0, [r3]
_08074D18:
	pop {r0}
	bx r0

	thumb_func_start sub_8074D1C
sub_8074D1C: @ 0x08074D1C
	adds r2, r0, #0
	adds r2, #0x58
	ldrh r1, [r2]
	adds r1, #7
	strh r1, [r2]
	ldr r3, _08074D3C @ =gSineTable
	ldr r2, _08074D40 @ =0x000003FF
	ands r1, r2
	lsls r1, r1, #1
	adds r1, r1, r3
	movs r2, #0
	ldrsh r1, [r1, r2]
	asrs r1, r1, #7
	adds r0, #0x5a
	strh r1, [r0]
	bx lr
	.align 2, 0
_08074D3C: .4byte gSineTable
_08074D40: .4byte 0x000003FF

	thumb_func_start sub_8074D44
sub_8074D44: @ 0x08074D44
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r4, #0
	adds r6, #0x70
	adds r0, r5, #0
	bl sub_802C080
	cmp r0, #0
	bne _08074D72
	movs r1, #0xc
	ldrsh r0, [r4, r1]
	ldr r1, [r4]
	adds r1, r1, r0
	asrs r1, r1, #8
	ldr r2, [r4, #4]
	asrs r2, r2, #8
	str r5, [sp]
	adds r0, r6, #0
	movs r3, #0
	bl sub_8020CE0
_08074D72:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8074D7C
sub_8074D7C: @ 0x08074D7C
	push {lr}
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	ldr r0, [r0, #0x28]
	bl VramFree
	pop {r0}
	bx r0

	thumb_func_start sub_8074D90
sub_8074D90: @ 0x08074D90
	push {r4, lr}
	adds r4, r0, #0
	adds r4, #0x28
	ldr r1, [r0, #0xc]
	asrs r1, r1, #8
	ldr r3, _08074DC0 @ =gCamera
	ldr r2, [r3]
	subs r1, r1, r2
	strh r1, [r4, #0x10]
	ldr r0, [r0, #0x10]
	asrs r0, r0, #8
	ldr r1, [r3, #4]
	subs r0, r0, r1
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08074DC0: .4byte gCamera

	thumb_func_start sub_8074DC4
sub_8074DC4: @ 0x08074DC4
	push {lr}
	ldr r3, _08074E00 @ =gCurTask
	ldr r0, [r3]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r2, r1, r0
	ldrh r0, [r2, #0xe]
	adds r0, #0x18
	strh r0, [r2, #0xe]
	movs r0, #0xc
	ldrsh r1, [r2, r0]
	ldr r0, [r2, #4]
	adds r0, r0, r1
	str r0, [r2, #4]
	movs r0, #0xe
	ldrsh r1, [r2, r0]
	ldr r0, [r2, #8]
	adds r0, r0, r1
	str r0, [r2, #8]
	ldrb r0, [r2, #0x1b]
	subs r1, r0, #1
	strb r1, [r2, #0x1b]
	lsls r0, r1, #0x18
	cmp r0, #0
	bne _08074E04
	ldr r0, [r3]
	bl TaskDestroy
	b _08074E12
	.align 2, 0
_08074E00: .4byte gCurTask
_08074E04:
	movs r0, #2
	ands r1, r0
	cmp r1, #0
	beq _08074E12
	adds r0, r2, #0
	bl sub_8074E18
_08074E12:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8074E18
sub_8074E18: @ 0x08074E18
	push {r4, lr}
	adds r4, r0, #0
	adds r4, #0x1c
	ldr r1, [r0, #4]
	asrs r1, r1, #8
	ldr r3, _08074E48 @ =gCamera
	ldr r2, [r3]
	subs r1, r1, r2
	strh r1, [r4, #0x10]
	ldr r0, [r0, #8]
	asrs r0, r0, #8
	ldr r1, [r3, #4]
	subs r0, r0, r1
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08074E48: .4byte gCamera

	thumb_func_start sub_8074E4C
sub_8074E4C: @ 0x08074E4C
	adds r3, r0, #0
	adds r1, r3, #0
	adds r1, #0x44
	movs r2, #0
	movs r0, #0x96
	lsls r0, r0, #1
	strh r0, [r1]
	adds r0, r3, #0
	adds r0, #0x5c
	strh r2, [r0]
	adds r0, #2
	strh r2, [r0]
	adds r0, #2
	movs r1, #0x80
	lsls r1, r1, #2
	strh r1, [r0]
	adds r0, #2
	strh r1, [r0]
	ldr r1, [r3, #0x68]
	ldr r0, [r1, #4]
	movs r2, #0x80
	lsls r2, r2, #0x14
	orrs r0, r2
	str r0, [r1, #4]
	ldr r1, [r3, #0x6c]
	ldr r0, [r1, #4]
	orrs r0, r2
	str r0, [r1, #4]
	bx lr
	.align 2, 0
    
    @ Called on init of Boss 7
	thumb_func_start sub_8074E88
sub_8074E88: @ 0x08074E88
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r4, r0, #0
	ldr r0, _08074F14 @ =sub_80776C8
	movs r2, #0x84
	lsls r2, r2, #6
	ldr r1, _08074F18 @ =sub_8077850
	str r1, [sp]
	movs r1, #0xd8
	movs r3, #0
	bl TaskCreate
	str r0, [sp, #4]
	ldrh r3, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r7, r3, r0
	ldr r2, _08074F1C @ =gStageData
	adds r0, r2, #0
	adds r0, #0x88
	ldr r1, [sp, #4]
	str r1, [r0]
	movs r0, #0x81
	lsls r0, r0, #0xb
	str r0, [r7]
	ldr r0, _08074F20 @ =0x00024900
	str r0, [r7, #4]
	movs r0, #0
	str r0, [r7, #0x14]
	str r0, [r7, #0x18]
	movs r1, #0
	strh r0, [r7, #0x32]
	str r0, [r7, #0x3c]
	str r0, [r7, #0x44]
	strh r0, [r7, #0x30]
	ldr r5, _08074F24 @ =0x03000022
	adds r0, r3, r5
	strb r1, [r0]
	adds r5, #1
	adds r0, r3, r5
	strb r1, [r0]
	adds r5, #1
	adds r0, r3, r5
	strb r1, [r0]
	adds r5, #1
	adds r0, r3, r5
	strb r1, [r0]
	adds r5, #1
	adds r0, r3, r5
	strb r1, [r0]
	adds r5, #1
	adds r0, r3, r5
	strb r1, [r0]
	adds r5, #1
	adds r0, r3, r5
	strb r1, [r0]
	adds r5, #0xac
	adds r0, r3, r5
	strb r1, [r0]
	ldrb r0, [r2, #1]
	cmp r0, #0
	bne _08074F2C
	ldr r0, _08074F28 @ =0x03000021
	adds r1, r3, r0
	movs r0, #8
	b _08074F32
	.align 2, 0
_08074F14: .4byte sub_80776C8
_08074F18: .4byte sub_8077850
_08074F1C: .4byte gStageData
_08074F20: .4byte 0x00024900
_08074F24: .4byte 0x03000022
_08074F28: .4byte 0x03000021
_08074F2C:
	ldr r5, _08075054 @ =0x03000021
	adds r1, r3, r5
	movs r0, #6
_08074F32:
	strb r0, [r1]
	str r4, [r7, #0x1c]
	ldr r2, _08075058 @ =gPlayers
	str r2, [r7, #0x50]
	adds r0, r2, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	lsls r1, r1, #0x1e
	lsrs r1, r1, #0x1e
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r2
	str r0, [r7, #0x54]
	movs r0, #0
	mov sl, r0
	movs r5, #0
	strh r5, [r7, #0x34]
	strh r5, [r7, #0x36]
	str r5, [r7, #8]
	str r5, [r7, #0xc]
	adds r0, r7, #0
	bl sub_8077918
	movs r0, #0x74
	bl VramMalloc
	str r0, [r7, #0x48]
	movs r0, #0x1e
	bl VramMalloc
	str r0, [r7, #0x4c]
	movs r0, #0x41
	bl VramMalloc
	adds r4, r0, #0
	adds r1, r7, #0
	adds r1, #0x58
	str r4, [r7, #0x58]
	movs r0, #0x9d
	lsls r0, r0, #3
	strh r0, [r1, #0xc]
	mov r0, sl
	strb r0, [r1, #0x1a]
	movs r0, #0xa8
	lsls r0, r0, #3
	strh r0, [r1, #0x14]
	strh r5, [r1, #0xe]
	strh r5, [r1, #0x16]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	movs r0, #0x10
	mov sb, r0
	mov r0, sb
	strb r0, [r1, #0x1c]
	mov r0, sl
	strb r0, [r1, #0x1f]
	movs r0, #1
	rsbs r0, r0, #0
	mov r8, r0
	str r0, [r1, #0x20]
	movs r6, #0x80
	lsls r6, r6, #5
	str r6, [r1, #8]
	adds r0, r1, #0
	bl UpdateSpriteAnimation
	movs r1, #0x90
	lsls r1, r1, #3
	adds r4, r4, r1
	adds r1, r7, #0
	adds r1, #0x80
	str r4, [r1]
	ldr r0, _0807505C @ =0x000004EB
	strh r0, [r1, #0xc]
	mov r0, sl
	strb r0, [r1, #0x1a]
	movs r0, #0xa0
	lsls r0, r0, #3
	strh r0, [r1, #0x14]
	strh r5, [r1, #0xe]
	strh r5, [r1, #0x16]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r1, #0x1b]
	mov r0, sb
	strb r0, [r1, #0x1c]
	mov r0, sl
	strb r0, [r1, #0x1f]
	mov r0, r8
	str r0, [r1, #0x20]
	str r6, [r1, #8]
	adds r0, r1, #0
	bl UpdateSpriteAnimation
	movs r1, #0x90
	lsls r1, r1, #1
	adds r4, r4, r1
	adds r1, r7, #0
	adds r1, #0xa8
	str r4, [r1]
	ldr r0, _08075060 @ =0x000004E9
	strh r0, [r1, #0xc]
	mov r0, sl
	strb r0, [r1, #0x1a]
	movs r0, #0xb0
	lsls r0, r0, #3
	strh r0, [r1, #0x14]
	strh r5, [r1, #0xe]
	strh r5, [r1, #0x16]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r1, #0x1b]
	mov r5, sb
	strb r5, [r1, #0x1c]
	mov r0, sl
	strb r0, [r1, #0x1f]
	mov r5, r8
	str r5, [r1, #0x20]
	str r6, [r1, #8]
	adds r0, r1, #0
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	bl sub_8076A54
	adds r1, r7, #0
	adds r1, #0xd0
	str r0, [r1]
	adds r0, r7, #0
	bl sub_8076550
	bl sub_807A4BC
	ldr r0, [sp, #4]
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08075054: .4byte 0x03000021
_08075058: .4byte gPlayers
_0807505C: .4byte 0x000004EB
_08075060: .4byte 0x000004E9

	thumb_func_start sub_8075064
sub_8075064: @ 0x08075064
	push {r4, r5, r6, r7, lr}
	ldr r0, _080750C4 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r7, r1, r0
	movs r5, #0
_08075074:
	lsls r0, r5, #2
	adds r1, r7, #0
	adds r1, #0x50
	adds r1, r1, r0
	ldr r4, [r1]
	ldr r2, [r4, #4]
	ldr r0, _080750C8 @ =0x08000100
	ands r0, r2
	cmp r0, #0
	bne _080750D4
	ldr r1, [r4, #0x14]
	ldr r0, _080750CC @ =0x0000D6FF
	cmp r1, r0
	ble _080750EC
	movs r0, #0x80
	lsls r0, r0, #0x14
	orrs r0, r2
	str r0, [r4, #4]
	movs r1, #0x80
	lsls r1, r1, #0x10
	ands r0, r1
	cmp r0, #0
	beq _080750A8
	adds r0, r4, #0
	bl sub_8016F28
_080750A8:
	ldr r1, [r4, #4]
	movs r0, #0x80
	lsls r0, r0, #0x11
	ands r0, r1
	cmp r0, #0
	beq _080750BA
	ldr r0, _080750D0 @ =0xFEFFFFFF
	ands r1, r0
	str r1, [r4, #4]
_080750BA:
	adds r0, r4, #0
	bl Player_800E67C
	b _080750EC
	.align 2, 0
_080750C4: .4byte gCurTask
_080750C8: .4byte 0x08000100
_080750CC: .4byte 0x0000D6FF
_080750D0: .4byte 0xFEFFFFFF
_080750D4:
	movs r0, #0x80
	lsls r0, r0, #0x14
	ands r0, r2
	cmp r0, #0
	beq _080750EC
	ldr r1, [r4, #0x14]
	ldr r0, _080751B4 @ =0x0000D6FF
	cmp r1, r0
	bgt _080750EC
	ldr r0, _080751B8 @ =0xF7FFFFFF
	ands r2, r0
	str r2, [r4, #4]
_080750EC:
	ldr r1, [r4, #0x10]
	ldr r0, _080751BC @ =0x0004A5FF
	cmp r1, r0
	ble _080750FE
	adds r0, #1
	str r0, [r4, #0x10]
	movs r0, #0
	strh r0, [r4, #0x18]
	strh r0, [r4, #0x1c]
_080750FE:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #1
	bls _08075074
	ldr r3, _080751C0 @ =gStageData
	ldrb r1, [r3, #6]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	ldr r2, _080751C4 @ =gPlayers
	adds r4, r0, r2
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	lsls r1, r1, #0x1e
	lsrs r1, r1, #0x1e
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r5, r0, r2
	ldr r1, [r4, #0x14]
	ldr r0, _080751C8 @ =0x000225FF
	cmp r1, r0
	ble _080751F0
	ldr r1, _080751CC @ =gCamera
	movs r0, #0xdc
	lsls r0, r0, #1
	str r0, [r1, #0x10]
	movs r0, #0xb6
	lsls r0, r0, #2
	str r0, [r1, #0x14]
	movs r6, #0
	strh r6, [r7, #0x30]
	ldrb r0, [r3, #3]
	cmp r0, #5
	beq _080751E4
	movs r0, #0x34
	bl sub_80299D4
	ldr r0, _080751D0 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080751D4 @ =sub_8075204
	str r0, [r1, #8]
	ldr r1, [r5, #0x14]
	ldr r0, _080751D8 @ =0x000289FF
	cmp r1, r0
	ble _080751F0
	adds r0, r5, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	movs r0, #0x1c
	ands r0, r1
	cmp r0, #8
	bne _080751F0
	strh r6, [r5, #0x1c]
	strh r6, [r5, #0x1a]
	strh r6, [r5, #0x18]
	ldr r0, [r4, #0x10]
	str r0, [r5, #0x10]
	ldr r0, [r4, #0x14]
	str r0, [r5, #0x14]
	adds r0, r4, #0
	adds r0, #0x27
	ldrb r0, [r0]
	adds r2, r5, #0
	adds r2, #0x27
	strb r0, [r2]
	adds r1, r5, #0
	adds r1, #0x4a
	movs r0, #0x78
	strh r0, [r1]
	adds r1, #0xc
	movs r0, #0xe
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x3c
	strb r0, [r1]
	ldr r0, [r5, #4]
	ldr r1, _080751DC @ =0xFFFFFEFF
	ands r0, r1
	str r0, [r5, #4]
	ldr r1, _080751E0 @ =Player_8005380
	adds r0, r5, #0
	bl SetPlayerCallback
	b _080751F0
	.align 2, 0
_080751B4: .4byte 0x0000D6FF
_080751B8: .4byte 0xF7FFFFFF
_080751BC: .4byte 0x0004A5FF
_080751C0: .4byte gStageData
_080751C4: .4byte gPlayers
_080751C8: .4byte 0x000225FF
_080751CC: .4byte gCamera
_080751D0: .4byte gCurTask
_080751D4: .4byte sub_8075204
_080751D8: .4byte 0x000289FF
_080751DC: .4byte 0xFFFFFEFF
_080751E0: .4byte Player_8005380
_080751E4:
	bl sub_8079FFC
	ldr r0, _080751FC @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08075200 @ =sub_80777AC
	str r0, [r1, #8]
_080751F0:
	adds r0, r7, #0
	bl sub_8076328
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080751FC: .4byte gCurTask
_08075200: .4byte sub_80777AC

	thumb_func_start sub_8075204
sub_8075204: @ 0x08075204
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r0, _08075244 @ =gCurTask
	ldr r0, [r0]
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r4, r0, r1
	ldr r2, _08075248 @ =0x030000D0
	adds r0, r0, r2
	ldr r0, [r0]
	ldrh r0, [r0, #6]
	adds r5, r0, r1
	ldrh r0, [r4, #0x30]
	adds r2, r0, #1
	strh r2, [r4, #0x30]
	ldr r0, [r4, #0x50]
	ldr r0, [r0, #4]
	movs r1, #0x80
	lsls r1, r1, #1
	ands r0, r1
	cmp r0, #0
	bne _08075250
	movs r0, #2
	ands r2, r0
	cmp r2, #0
	bne _08075250
	ldr r0, _0807524C @ =gDispCnt
	ldrh r2, [r0]
	orrs r1, r2
	b _08075258
	.align 2, 0
_08075244: .4byte gCurTask
_08075248: .4byte 0x030000D0
_0807524C: .4byte gDispCnt
_08075250:
	ldr r0, _0807526C @ =gDispCnt
	ldrh r2, [r0]
	ldr r1, _08075270 @ =0x0000FEFF
	ands r1, r2
_08075258:
	strh r1, [r0]
	adds r3, r0, #0
	ldrh r0, [r4, #0x30]
	cmp r0, #0x43
	beq _08075294
	cmp r0, #0x43
	bgt _08075274
	cmp r0, #0x1e
	beq _0807527A
	b _080752CA
	.align 2, 0
_0807526C: .4byte gDispCnt
_08075270: .4byte 0x0000FEFF
_08075274:
	cmp r0, #0x7f
	beq _0807529E
	b _080752CA
_0807527A:
	ldr r1, [r4, #0x50]
	ldr r0, [r1, #4]
	ldr r2, _08075290 @ =0xF7FFFFFF
	ands r0, r2
	str r0, [r1, #4]
	ldr r1, [r4, #0x54]
	ldr r0, [r1, #4]
	ands r0, r2
	str r0, [r1, #4]
	b _080752CA
	.align 2, 0
_08075290: .4byte 0xF7FFFFFF
_08075294:
	adds r0, r4, #0
	movs r1, #4
	bl sub_8077954
	b _080752CA
_0807529E:
	adds r1, r5, #0
	adds r1, #0xb1
	movs r2, #0
	movs r0, #1
	strb r0, [r1]
	ldrh r0, [r3]
	movs r5, #0x80
	lsls r5, r5, #1
	adds r1, r5, #0
	orrs r0, r1
	strh r0, [r3]
	strh r2, [r4, #0x30]
	adds r0, r4, #0
	movs r1, #0
	bl sub_8077954
	bl sub_807A4A8
	ldr r0, _08075314 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08075318 @ =sub_8075324
	str r0, [r1, #8]
_080752CA:
	movs r2, #0
	adds r5, r4, #0
	adds r5, #0x50
	movs r7, #0x80
	lsls r7, r7, #0x14
	mov ip, r7
	movs r3, #0
	ldr r0, _0807531C @ =0x0004A5FF
	mov r8, r0
	ldr r6, _08075320 @ =0x0004A600
_080752DE:
	lsls r0, r2, #2
	adds r0, r5, r0
	ldr r1, [r0]
	ldr r0, [r1, #4]
	mov r7, ip
	ands r0, r7
	cmp r0, #0
	beq _080752FA
	ldr r0, [r1, #0x10]
	cmp r0, r8
	ble _080752FA
	str r6, [r1, #0x10]
	strh r3, [r1, #0x18]
	strh r3, [r1, #0x1c]
_080752FA:
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #1
	bls _080752DE
	adds r0, r4, #0
	bl sub_8076328
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08075314: .4byte gCurTask
_08075318: .4byte sub_8075324
_0807531C: .4byte 0x0004A5FF
_08075320: .4byte 0x0004A600

	thumb_func_start sub_8075324
sub_8075324: @ 0x08075324
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	ldr r7, _080753C8 @ =gCurTask
	ldr r0, [r7]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r0, r0, r4
	mov r8, r0
	ldr r0, _080753CC @ =0x03000080
	adds r0, r0, r4
	mov sl, r0
	ldr r1, _080753D0 @ =0x03000058
	adds r1, r4, r1
	str r1, [sp]
	ldr r2, _080753D4 @ =0x030000A8
	adds r2, r4, r2
	str r2, [sp, #4]
	mov r3, r8
	ldr r6, [r3, #0x50]
	ldrh r0, [r3, #0x30]
	adds r0, #1
	movs r5, #0
	strh r0, [r3, #0x30]
	ldr r1, _080753D8 @ =0x03000026
	adds r0, r4, r1
	strb r5, [r0]
	mov r0, r8
	bl sub_80778D0
	mov r2, r8
	ldr r1, [r2, #0x50]
	mov r0, r8
	bl sub_8077874
	mov r3, r8
	ldr r1, [r3, #0x54]
	mov r0, r8
	bl sub_8077874
	mov r0, r8
	bl sub_8076420
	ldr r0, _080753DC @ =0x03000027
	adds r1, r4, r0
	ldrb r0, [r1]
	cmp r0, #0
	beq _08075404
	strb r5, [r1]
	ldr r1, _080753E0 @ =0x0300002B
	adds r0, r4, r1
	strb r5, [r0]
	movs r0, #1
	mov r2, r8
	strh r0, [r2, #0x2c]
	ldr r1, [r7]
	ldr r0, _080753E4 @ =sub_8075674
	str r0, [r1, #8]
	ldr r1, _080753E8 @ =gStageData
	ldrb r0, [r1, #3]
	ldr r3, _080753EC @ =0x03000021
	adds r3, r4, r3
	str r3, [sp, #8]
	cmp r0, #5
	beq _080753B0
	b _080755FC
_080753B0:
	ldrb r0, [r1, #6]
	cmp r0, #0
	bne _080753F0
	movs r0, #3
	movs r1, #0
	bl sub_8027674
	ldr r0, _080753EC @ =0x03000021
	adds r0, r4, r0
	str r0, [sp, #8]
	b _080755FC
	.align 2, 0
_080753C8: .4byte gCurTask
_080753CC: .4byte 0x03000080
_080753D0: .4byte 0x03000058
_080753D4: .4byte 0x030000A8
_080753D8: .4byte 0x03000026
_080753DC: .4byte 0x03000027
_080753E0: .4byte 0x0300002B
_080753E4: .4byte sub_8075674
_080753E8: .4byte gStageData
_080753EC: .4byte 0x03000021
_080753F0:
	movs r0, #4
	movs r1, #0
	bl sub_8027674
	ldr r1, _08075400 @ =0x03000021
	adds r1, r4, r1
	str r1, [sp, #8]
	b _080755FC
	.align 2, 0
_08075400: .4byte 0x03000021
_08075404:
	ldr r3, _0807544C @ =0x03000024
	adds r2, r4, r3
	ldrb r0, [r2]
	cmp r0, #0
	beq _08075420
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	ldr r1, _08075450 @ =0x03000021
	adds r1, r4, r1
	str r1, [sp, #8]
	cmp r0, #0
	beq _08075420
	b _080755FC
_08075420:
	ldr r1, _08075454 @ =gUnknown_080D5940
	ldr r3, _08075450 @ =0x03000021
	adds r0, r4, r3
	ldrb r0, [r0]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strb r0, [r2]
	movs r2, #0
	ldr r1, _08075458 @ =0x03000023
	adds r0, r4, r1
	ldrb r0, [r0]
	cmp r0, #0
	bne _08075464
	ldr r0, [r6, #4]
	movs r1, #0x80
	lsls r1, r1, #9
	ands r0, r1
	rsbs r0, r0, #0
	lsrs r2, r0, #0x1f
	b _08075472
	.align 2, 0
_0807544C: .4byte 0x03000024
_08075450: .4byte 0x03000021
_08075454: .4byte gUnknown_080D5940
_08075458: .4byte 0x03000023
_0807545C:
	movs r0, #1
	mov r2, sb
	strb r0, [r2]
	b _08075516
_08075464:
	ldr r0, [r6, #4]
	movs r1, #0x80
	lsls r1, r1, #9
	ands r0, r1
	cmp r0, #0
	bne _08075472
	movs r2, #1
_08075472:
	mov r1, r8
	adds r1, #0x25
	movs r0, #0
	strb r0, [r1]
	mov sb, r1
	mov r3, r8
	adds r3, #0x21
	str r3, [sp, #8]
	cmp r2, #0
	beq _08075516
	mov r1, r8
	ldr r0, [r1]
	ldr r1, [r1, #0x14]
	adds r0, r0, r1
	ldr r1, [r6, #0x10]
	subs r1, r1, r0
	adds r0, r1, #0
	cmp r1, #0
	bge _0807549A
	rsbs r0, r1, #0
_0807549A:
	asrs r1, r0, #8
	movs r2, #0
	ldr r3, _080754F4 @ =gUnknown_080D5978
	adds r4, r3, #0
_080754A2:
	lsls r5, r2, #3
	adds r0, r5, r4
	ldrh r0, [r0]
	cmp r1, r0
	bgt _0807550C
	ldr r6, _080754F8 @ =gPseudoRandom
	ldr r0, [r6]
	ldr r7, _080754FC @ =0x00196225
	muls r0, r7, r0
	ldr r2, _08075500 @ =0x3C6EF35F
	adds r4, r0, r2
	str r4, [r6]
	adds r0, r4, #0
	ldr r1, _08075504 @ =0x00002710
	str r3, [sp, #0xc]
	bl __umodsi3
	ldr r3, [sp, #0xc]
	adds r1, r3, #2
	adds r1, r5, r1
	ldrh r1, [r1]
	cmp r0, r1
	bhi _08075516
	adds r0, r4, #0
	muls r0, r7, r0
	ldr r3, _08075500 @ =0x3C6EF35F
	adds r0, r0, r3
	str r0, [r6]
	ldr r1, _08075504 @ =0x00002710
	bl __umodsi3
	ldr r2, _08075508 @ =gUnknown_080D597C
	adds r1, r5, r2
	ldrh r1, [r1]
	cmp r0, r1
	bls _0807545C
	movs r0, #2
	mov r3, sb
	strb r0, [r3]
	b _08075516
	.align 2, 0
_080754F4: .4byte gUnknown_080D5978
_080754F8: .4byte gPseudoRandom
_080754FC: .4byte 0x00196225
_08075500: .4byte 0x3C6EF35F
_08075504: .4byte 0x00002710
_08075508: .4byte gUnknown_080D597C
_0807550C:
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #3
	bls _080754A2
_08075516:
	mov r0, sb
	ldrb r1, [r0]
	cmp r1, #1
	beq _08075528
	cmp r1, #1
	ble _080755FC
	cmp r1, #2
	beq _08075548
	b _080755FC
_08075528:
	mov r2, r8
	adds r2, #0x2b
	movs r0, #0
	strb r0, [r2]
	mov r2, r8
	strh r1, [r2, #0x2c]
	ldr r0, _08075540 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08075544 @ =sub_8075C40
	str r0, [r1, #8]
	b _080755FC
	.align 2, 0
_08075540: .4byte gCurTask
_08075544: .4byte sub_8075C40
_08075548:
	mov r1, r8
	adds r1, #0x29
	movs r0, #0xc
	strb r0, [r1]
	ldr r0, _080755A4 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080755A8 @ =sub_8075DA4
	str r0, [r1, #8]
	mov r1, r8
	adds r1, #0x23
	ldrb r0, [r1]
	cmp r0, #0
	beq _080755BC
	movs r0, #0
	strb r0, [r1]
	ldr r1, _080755AC @ =gUnknown_080D5904
	ldrh r0, [r1, #8]
	mov r3, sl
	strh r0, [r3, #0xc]
	ldrh r0, [r1, #0xa]
	strb r0, [r3, #0x1a]
	ldr r0, _080755B0 @ =0x0000FFFF
	strh r0, [r3, #0x18]
	movs r0, #0xff
	strb r0, [r3, #0x1b]
	ldr r1, _080755B4 @ =gUnknown_080D58F4
	ldrh r0, [r1, #8]
	ldr r2, [sp]
	strh r0, [r2, #0xc]
	ldrh r0, [r1, #0xa]
	strb r0, [r2, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strh r0, [r2, #0x18]
	strb r0, [r2, #0x1b]
	ldr r1, _080755B8 @ =gUnknown_080D592C
	ldrh r0, [r1, #8]
	ldr r3, [sp, #4]
	strh r0, [r3, #0xc]
	ldrh r0, [r1, #0xa]
	strb r0, [r3, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strh r0, [r3, #0x18]
	strb r0, [r3, #0x1b]
	b _080755FC
	.align 2, 0
_080755A4: .4byte gCurTask
_080755A8: .4byte sub_8075DA4
_080755AC: .4byte gUnknown_080D5904
_080755B0: .4byte 0x0000FFFF
_080755B4: .4byte gUnknown_080D58F4
_080755B8: .4byte gUnknown_080D592C
_080755BC:
	movs r0, #1
	strb r0, [r1]
	ldr r1, _08075628 @ =gUnknown_080D5904
	ldrh r0, [r1, #0xc]
	mov r2, sl
	strh r0, [r2, #0xc]
	ldrh r0, [r1, #0xe]
	strb r0, [r2, #0x1a]
	ldr r0, _0807562C @ =0x0000FFFF
	strh r0, [r2, #0x18]
	movs r0, #0xff
	strb r0, [r2, #0x1b]
	ldr r1, _08075630 @ =gUnknown_080D58F4
	ldrh r0, [r1, #0xc]
	ldr r3, [sp]
	strh r0, [r3, #0xc]
	ldrh r0, [r1, #0xe]
	strb r0, [r3, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strh r0, [r3, #0x18]
	strb r0, [r3, #0x1b]
	ldr r1, _08075634 @ =gUnknown_080D592C
	ldrh r0, [r1, #0xc]
	ldr r2, [sp, #4]
	strh r0, [r2, #0xc]
	ldrh r0, [r1, #0xe]
	strb r0, [r2, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strh r0, [r2, #0x18]
	strb r0, [r2, #0x1b]
_080755FC:
	ldr r3, [sp, #8]
	ldrb r0, [r3]
	cmp r0, #0
	bne _08075654
	ldr r0, _08075638 @ =gStageData
	ldrb r0, [r0, #3]
	cmp r0, #5
	bne _0807563C
	mov r0, r8
	adds r0, #0xd4
	ldrb r0, [r0]
	cmp r0, #0
	bne _08075654
	mov r0, r8
	ldr r1, [r0, #0x14]
	lsls r1, r1, #8
	lsrs r1, r1, #0x10
	movs r0, #1
	bl sub_8027674
	b _08075646
	.align 2, 0
_08075628: .4byte gUnknown_080D5904
_0807562C: .4byte 0x0000FFFF
_08075630: .4byte gUnknown_080D58F4
_08075634: .4byte gUnknown_080D592C
_08075638: .4byte gStageData
_0807563C:
	mov r0, r8
	adds r0, #0xd4
	ldrb r0, [r0]
	cmp r0, #0
	bne _08075654
_08075646:
	mov r0, r8
	bl sub_8077A28
	ldr r0, _0807566C @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08075670 @ =sub_8075EE8
	str r0, [r1, #8]
_08075654:
	mov r0, r8
	bl sub_8076328
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807566C: .4byte gCurTask
_08075670: .4byte sub_8075EE8

	thumb_func_start sub_8075674
sub_8075674: @ 0x08075674
	push {r4, r5, r6, lr}
	ldr r0, _080756B4 @ =gCurTask
	ldr r0, [r0]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r4, r0
	adds r0, #0xa8
	adds r6, r4, r0
	ldrh r0, [r5, #0x30]
	adds r0, #1
	strh r0, [r5, #0x30]
	ldr r1, [r5, #0x50]
	adds r0, r5, #0
	bl sub_8077874
	ldr r1, [r5, #0x54]
	adds r0, r5, #0
	bl sub_8077874
	ldr r0, _080756B8 @ =0x0300002B
	adds r4, r4, r0
	ldrb r0, [r4]
	cmp r0, #0x1e
	bls _080756A8
	b _080759A0
_080756A8:
	lsls r0, r0, #2
	ldr r1, _080756BC @ =_080756C0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080756B4: .4byte gCurTask
_080756B8: .4byte 0x0300002B
_080756BC: .4byte _080756C0
_080756C0: @ jump table
	.4byte _0807573C @ case 0
	.4byte _080759A0 @ case 1
	.4byte _080759A0 @ case 2
	.4byte _080759A0 @ case 3
	.4byte _080759A0 @ case 4
	.4byte _080759A0 @ case 5
	.4byte _080759A0 @ case 6
	.4byte _080759A0 @ case 7
	.4byte _080759A0 @ case 8
	.4byte _080759A0 @ case 9
	.4byte _0807579E @ case 10
	.4byte _08075890 @ case 11
	.4byte _080759A0 @ case 12
	.4byte _080759A0 @ case 13
	.4byte _080759A0 @ case 14
	.4byte _080759A0 @ case 15
	.4byte _080759A0 @ case 16
	.4byte _080759A0 @ case 17
	.4byte _080759A0 @ case 18
	.4byte _080759A0 @ case 19
	.4byte _080758F8 @ case 20
	.4byte _080759A0 @ case 21
	.4byte _080759A0 @ case 22
	.4byte _080759A0 @ case 23
	.4byte _080759A0 @ case 24
	.4byte _080759A0 @ case 25
	.4byte _080759A0 @ case 26
	.4byte _080759A0 @ case 27
	.4byte _080759A0 @ case 28
	.4byte _080759A0 @ case 29
	.4byte _08075944 @ case 30
_0807573C:
	adds r1, r5, #0
	adds r1, #0x26
	movs r0, #3
	strb r0, [r1]
	ldr r1, _08075768 @ =gUnknown_080D592C
	ldrh r0, [r1, #0x10]
	strh r0, [r6, #0xc]
	ldrh r0, [r1, #0x12]
	strb r0, [r6, #0x1a]
	ldr r0, _0807576C @ =0x0000FFFF
	strh r0, [r6, #0x18]
	movs r0, #0xff
	strb r0, [r6, #0x1b]
	adds r0, r5, #0
	adds r0, #0x23
	ldrb r0, [r0]
	cmp r0, #0
	beq _08075770
	movs r0, #0xc0
	lsls r0, r0, #3
	strh r0, [r5, #0x32]
	b _08075780
	.align 2, 0
_08075768: .4byte gUnknown_080D592C
_0807576C: .4byte 0x0000FFFF
_08075770:
	movs r0, #0xfa
	lsls r0, r0, #8
	strh r0, [r5, #0x32]
	ldr r0, [r6, #8]
	movs r1, #0x80
	lsls r1, r1, #4
	orrs r0, r1
	str r0, [r6, #8]
_08075780:
	adds r0, r5, #0
	adds r0, #0xd0
	ldr r0, [r0]
	movs r1, #1
	bl sub_8077A04
	movs r0, #0x8d
	lsls r0, r0, #2
	bl m4aSongNumStart
	adds r1, r5, #0
	adds r1, #0x2b
	movs r0, #0xa
	strb r0, [r1]
	b _080759A0
_0807579E:
	movs r0, #0x32
	ldrsh r1, [r5, r0]
	ldr r0, [r5, #0x3c]
	adds r0, r0, r1
	str r0, [r5, #0x3c]
	movs r2, #0
	adds r0, r5, #0
	adds r0, #0x23
	ldrb r1, [r0]
	adds r4, r0, #0
	cmp r1, #0
	beq _080757C4
	ldr r0, [r5, #4]
	asrs r0, r0, #8
	movs r1, #0xb2
	lsls r1, r1, #2
	cmp r0, r1
	ble _080757D0
	b _080757D6
_080757C4:
	ldr r0, [r5, #4]
	asrs r0, r0, #8
	ldr r1, _08075828 @ =0x000001C7
	cmp r0, r1
	bgt _080757D0
	movs r2, #1
_080757D0:
	cmp r2, #0
	bne _080757D6
	b _080759A0
_080757D6:
	ldr r0, _0807582C @ =0x000004EE
	movs r1, #0
	movs r2, #0x3a
	movs r3, #0
	bl sub_8078DB0
	ldr r0, _08075830 @ =0x000004EF
	movs r1, #0
	movs r2, #0x3a
	movs r3, #0
	bl sub_8078DB0
	movs r0, #0
	strh r0, [r5, #0x32]
	adds r1, r5, #0
	adds r1, #0x2b
	movs r0, #0xb
	strb r0, [r1]
	ldr r1, _08075834 @ =gUnknown_080D592C
	ldrb r0, [r4]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r6, #0xc]
	ldrb r0, [r4]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldrh r0, [r0, #2]
	strb r0, [r6, #0x1a]
	ldr r0, _08075838 @ =0x0000FFFF
	strh r0, [r6, #0x18]
	movs r0, #0xff
	strb r0, [r6, #0x1b]
	ldrb r0, [r4]
	cmp r0, #0
	beq _0807583C
	adds r0, r5, #0
	movs r1, #8
	bl sub_8077954
	b _0807584C
	.align 2, 0
_08075828: .4byte 0x000001C7
_0807582C: .4byte 0x000004EE
_08075830: .4byte 0x000004EF
_08075834: .4byte gUnknown_080D592C
_08075838: .4byte 0x0000FFFF
_0807583C:
	ldr r0, [r6, #8]
	ldr r1, _08075870 @ =0xFFFFF7FF
	ands r0, r1
	str r0, [r6, #8]
	adds r0, r5, #0
	movs r1, #5
	bl sub_8077954
_0807584C:
	adds r1, r5, #0
	adds r1, #0x21
	ldrb r0, [r1]
	cmp r0, #0
	beq _0807585A
	subs r0, #1
	strb r0, [r1]
_0807585A:
	ldr r0, _08075874 @ =gStageData
	ldrb r0, [r0, #1]
	cmp r0, #0
	bne _08075878
	ldrb r0, [r1]
	cmp r0, #4
	bne _08075884
	movs r0, #0x35
	bl sub_80299D4
	b _08075884
	.align 2, 0
_08075870: .4byte 0xFFFFF7FF
_08075874: .4byte gStageData
_08075878:
	ldrb r0, [r1]
	cmp r0, #3
	bne _08075884
	movs r0, #0x35
	bl sub_80299D4
_08075884:
	movs r0, #0xeb
	bl m4aSongNumStart
	bl sub_807A468
	b _080759A0
_08075890:
	movs r2, #0
	adds r0, r5, #0
	adds r0, #0x23
	ldrb r1, [r0]
	adds r4, r0, #0
	cmp r1, #0
	beq _080758B6
	ldrh r0, [r5, #0x32]
	subs r0, #0x40
	strh r0, [r5, #0x32]
	movs r0, #0x32
	ldrsh r1, [r5, r0]
	ldr r0, [r5, #0x3c]
	adds r0, r0, r1
	str r0, [r5, #0x3c]
	cmp r0, #0
	bge _080758CE
	str r2, [r5, #0x3c]
	b _080758D2
_080758B6:
	ldrh r0, [r5, #0x32]
	adds r0, #0x40
	strh r0, [r5, #0x32]
	movs r0, #0x32
	ldrsh r1, [r5, r0]
	ldr r0, [r5, #0x3c]
	adds r0, r0, r1
	str r0, [r5, #0x3c]
	cmp r0, #0
	ble _080758CE
	str r2, [r5, #0x3c]
	movs r2, #1
_080758CE:
	cmp r2, #0
	beq _080759A0
_080758D2:
	movs r0, #0
	strh r0, [r5, #0x32]
	adds r1, r5, #0
	adds r1, #0x2b
	movs r0, #0x14
	strb r0, [r1]
	ldrb r0, [r4]
	cmp r0, #0
	beq _080758EE
	adds r0, r5, #0
	movs r1, #1
	bl sub_8077954
	b _080759A0
_080758EE:
	adds r0, r5, #0
	movs r1, #0
	bl sub_8077954
	b _080759A0
_080758F8:
	adds r4, r5, #0
	adds r4, #0xd0
	ldr r0, [r4]
	bl sub_8077174
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080759A0
	ldr r0, _08075940 @ =0x00000235
	bl m4aSongNumStart
	ldr r0, [r4]
	adds r1, r5, #0
	adds r1, #0x23
	ldrb r2, [r1]
	movs r1, #1
	eors r1, r2
	ldr r2, [r5]
	ldr r3, [r5, #0x14]
	adds r2, r2, r3
	movs r3, #0x80
	lsls r3, r3, #4
	bl sub_8077238
	ldr r0, [r4]
	movs r1, #3
	bl sub_8077A14
	movs r0, #0x3c
	strh r0, [r5, #0x2c]
	adds r1, r5, #0
	adds r1, #0x2b
	movs r0, #0x1e
	strb r0, [r1]
	b _080759A0
	.align 2, 0
_08075940: .4byte 0x00000235
_08075944:
	adds r4, r5, #0
	adds r4, #0xd0
	ldr r0, [r4]
	bl sub_8077174
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080759A0
	ldr r0, [r4]
	movs r1, #0
	bl sub_8077A04
	adds r0, r5, #0
	adds r0, #0x2b
	movs r4, #0
	strb r4, [r0]
	adds r0, r5, #0
	bl sub_8077918
	adds r0, r5, #0
	adds r0, #0x21
	ldrb r0, [r0]
	cmp r0, #0
	beq _08075998
	cmp r0, #4
	bhi _08075998
	adds r1, r5, #0
	adds r1, #0x29
	movs r0, #0x1e
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x2a
	strb r4, [r0]
	ldr r0, _08075990 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08075994 @ =sub_80759B4
	b _0807599E
	.align 2, 0
_08075990: .4byte gCurTask
_08075994: .4byte sub_80759B4
_08075998:
	ldr r0, _080759AC @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080759B0 @ =sub_8075324
_0807599E:
	str r0, [r1, #8]
_080759A0:
	adds r0, r5, #0
	bl sub_8076328
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080759AC: .4byte gCurTask
_080759B0: .4byte sub_8075324

	thumb_func_start sub_80759B4
sub_80759B4: @ 0x080759B4
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	ldr r0, _08075A40 @ =gCurTask
	ldr r0, [r0]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r0, r0, r5
	mov r8, r0
	ldr r0, _08075A44 @ =0x03000080
	adds r4, r5, r0
	ldr r1, _08075A48 @ =0x03000058
	adds r6, r5, r1
	ldr r2, _08075A4C @ =0x030000A8
	adds r3, r5, r2
	mov r1, r8
	ldrh r0, [r1, #0x30]
	adds r0, #1
	strh r0, [r1, #0x30]
	subs r2, #0x82
	adds r0, r5, r2
	movs r1, #4
	mov sb, r1
	mov r2, sb
	strb r2, [r0]
	mov r0, r8
	ldr r1, [r0, #0x50]
	str r3, [sp]
	bl sub_8077874
	mov r2, r8
	ldr r1, [r2, #0x54]
	mov r0, r8
	bl sub_8077874
	ldr r0, _08075A50 @ =0x0300002A
	adds r7, r5, r0
	ldrb r0, [r7]
	ldr r3, [sp]
	cmp r0, #0
	bne _08075A90
	ldr r1, _08075A54 @ =0x03000029
	adds r0, r5, r1
	movs r3, #1
	strb r3, [r0]
	ldrb r0, [r7]
	adds r0, #1
	strb r0, [r7]
	ldr r2, _08075A58 @ =gPseudoRandom
	ldr r1, [r2]
	ldr r0, _08075A5C @ =0x00196225
	muls r0, r1, r0
	ldr r1, _08075A60 @ =0x3C6EF35F
	adds r0, r0, r1
	str r0, [r2]
	lsrs r0, r0, #8
	ands r0, r3
	ldr r2, _08075A64 @ =0x03000022
	adds r1, r5, r2
	strb r0, [r1]
	cmp r0, #0
	beq _08075A6C
	ldr r0, _08075A68 @ =0xFFFFFC00
	mov r1, r8
	str r0, [r1, #8]
	b _08075A74
	.align 2, 0
_08075A40: .4byte gCurTask
_08075A44: .4byte 0x03000080
_08075A48: .4byte 0x03000058
_08075A4C: .4byte 0x030000A8
_08075A50: .4byte 0x0300002A
_08075A54: .4byte 0x03000029
_08075A58: .4byte gPseudoRandom
_08075A5C: .4byte 0x00196225
_08075A60: .4byte 0x3C6EF35F
_08075A64: .4byte 0x03000022
_08075A68: .4byte 0xFFFFFC00
_08075A6C:
	movs r0, #0x80
	lsls r0, r0, #3
	mov r2, r8
	str r0, [r2, #8]
_08075A74:
	mov r0, r8
	adds r0, #0x21
	ldrb r0, [r0]
	cmp r0, #1
	bhi _08075A80
	b _08075C0E
_08075A80:
	mov r1, r8
	ldr r0, [r1, #8]
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	mov r2, r8
	str r0, [r2, #8]
	b _08075C0E
_08075A90:
	mov r0, r8
	str r3, [sp]
	bl sub_80778D0
	ldr r0, _08075B10 @ =0x03000029
	adds r2, r5, r0
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	movs r1, #0xff
	mov ip, r1
	lsls r0, r0, #0x18
	ldr r3, [sp]
	cmp r0, #0
	beq _08075AB0
	b _08075C0E
_08075AB0:
	ldrb r1, [r7]
	movs r7, #1
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _08075B7C
	movs r0, #0xc
	strb r0, [r2]
	ldr r2, _08075B14 @ =0x03000023
	adds r1, r5, r2
	ldrb r0, [r1]
	cmp r0, #0
	beq _08075B28
	movs r0, #0
	strb r0, [r1]
	ldr r1, _08075B18 @ =gUnknown_080D5904
	ldrh r0, [r1, #8]
	strh r0, [r4, #0xc]
	ldrh r0, [r1, #0xa]
	strb r0, [r4, #0x1a]
	ldr r0, _08075B1C @ =0x0000FFFF
	strh r0, [r4, #0x18]
	ldrb r0, [r4, #0x1b]
	mov r1, ip
	orrs r0, r1
	strb r0, [r4, #0x1b]
	ldr r1, _08075B20 @ =gUnknown_080D58F4
	ldrh r0, [r1, #8]
	strh r0, [r6, #0xc]
	ldrh r0, [r1, #0xa]
	strb r0, [r6, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strh r0, [r6, #0x18]
	ldrb r0, [r6, #0x1b]
	mov r2, ip
	orrs r0, r2
	strb r0, [r6, #0x1b]
	ldr r1, _08075B24 @ =gUnknown_080D592C
	ldrh r0, [r1, #8]
	strh r0, [r3, #0xc]
	ldrh r0, [r1, #0xa]
	strb r0, [r3, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strh r0, [r3, #0x18]
	ldrb r0, [r3, #0x1b]
	b _08075BEA
	.align 2, 0
_08075B10: .4byte 0x03000029
_08075B14: .4byte 0x03000023
_08075B18: .4byte gUnknown_080D5904
_08075B1C: .4byte 0x0000FFFF
_08075B20: .4byte gUnknown_080D58F4
_08075B24: .4byte gUnknown_080D592C
_08075B28:
	strb r7, [r1]
	ldr r1, _08075B6C @ =gUnknown_080D5904
	ldrh r0, [r1, #0xc]
	strh r0, [r4, #0xc]
	ldrh r0, [r1, #0xe]
	strb r0, [r4, #0x1a]
	ldr r0, _08075B70 @ =0x0000FFFF
	strh r0, [r4, #0x18]
	ldrb r0, [r4, #0x1b]
	mov r1, ip
	orrs r0, r1
	strb r0, [r4, #0x1b]
	ldr r1, _08075B74 @ =gUnknown_080D58F4
	ldrh r0, [r1, #0xc]
	strh r0, [r6, #0xc]
	ldrh r0, [r1, #0xe]
	strb r0, [r6, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strh r0, [r6, #0x18]
	ldrb r0, [r6, #0x1b]
	mov r2, ip
	orrs r0, r2
	strb r0, [r6, #0x1b]
	ldr r1, _08075B78 @ =gUnknown_080D592C
	ldrh r0, [r1, #0xc]
	strh r0, [r3, #0xc]
	ldrh r0, [r1, #0xe]
	strb r0, [r3, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strh r0, [r3, #0x18]
	ldrb r0, [r3, #0x1b]
	b _08075BEA
	.align 2, 0
_08075B6C: .4byte gUnknown_080D5904
_08075B70: .4byte 0x0000FFFF
_08075B74: .4byte gUnknown_080D58F4
_08075B78: .4byte gUnknown_080D592C
_08075B7C:
	mov r0, sb
	strb r0, [r2]
	ldr r1, _08075C24 @ =gUnknown_080D5904
	ldr r0, _08075C28 @ =0x03000023
	adds r2, r5, r0
	ldrb r0, [r2]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r4, #0xc]
	ldrb r0, [r2]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldrh r0, [r0, #2]
	strb r0, [r4, #0x1a]
	ldr r0, _08075C2C @ =0x0000FFFF
	strh r0, [r4, #0x18]
	ldrb r0, [r4, #0x1b]
	mov r1, ip
	orrs r0, r1
	strb r0, [r4, #0x1b]
	ldr r1, _08075C30 @ =gUnknown_080D58F4
	ldrb r0, [r2]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r6, #0xc]
	ldrb r0, [r2]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldrh r0, [r0, #2]
	strb r0, [r6, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strh r0, [r6, #0x18]
	ldrb r0, [r6, #0x1b]
	mov r1, ip
	orrs r0, r1
	strb r0, [r6, #0x1b]
	ldr r1, _08075C34 @ =gUnknown_080D592C
	ldrb r0, [r2]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r3, #0xc]
	ldrb r0, [r2]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldrh r0, [r0, #2]
	strb r0, [r3, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strh r0, [r3, #0x18]
	ldrb r0, [r3, #0x1b]
	mov r2, ip
_08075BEA:
	orrs r0, r2
	strb r0, [r3, #0x1b]
	mov r1, r8
	adds r1, #0x2a
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x14
	bls _08075C0E
	mov r0, r8
	bl sub_8077918
	ldr r0, _08075C38 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08075C3C @ =sub_8075324
	str r0, [r1, #8]
_08075C0E:
	mov r0, r8
	bl sub_8076328
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08075C24: .4byte gUnknown_080D5904
_08075C28: .4byte 0x03000023
_08075C2C: .4byte 0x0000FFFF
_08075C30: .4byte gUnknown_080D58F4
_08075C34: .4byte gUnknown_080D592C
_08075C38: .4byte gCurTask
_08075C3C: .4byte sub_8075324

	thumb_func_start sub_8075C40
sub_8075C40: @ 0x08075C40
	push {r4, r5, r6, r7, lr}
	ldr r6, _08075C78 @ =gCurTask
	ldr r0, [r6]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	ldrh r0, [r4, #0x30]
	adds r0, #1
	strh r0, [r4, #0x30]
	ldr r1, [r4, #0x50]
	adds r0, r4, #0
	bl sub_8077874
	ldr r1, [r4, #0x54]
	adds r0, r4, #0
	bl sub_8077874
	ldr r0, _08075C7C @ =0x0300002B
	adds r7, r5, r0
	ldrb r0, [r7]
	cmp r0, #0xa
	beq _08075CD0
	cmp r0, #0xa
	bgt _08075C80
	cmp r0, #0
	beq _08075C8A
	b _08075D8E
	.align 2, 0
_08075C78: .4byte gCurTask
_08075C7C: .4byte 0x0300002B
_08075C80:
	cmp r0, #0x14
	beq _08075D22
	cmp r0, #0x1e
	beq _08075D6C
	b _08075D8E
_08075C8A:
	ldr r2, _08075CA4 @ =0x03000026
	adds r1, r5, r2
	movs r0, #2
	strb r0, [r1]
	ldr r1, _08075CA8 @ =0x03000023
	adds r0, r5, r1
	ldrb r0, [r0]
	cmp r0, #0
	beq _08075CAC
	movs r0, #0xc0
	lsls r0, r0, #3
	b _08075CB0
	.align 2, 0
_08075CA4: .4byte 0x03000026
_08075CA8: .4byte 0x03000023
_08075CAC:
	movs r0, #0xfa
	lsls r0, r0, #8
_08075CB0:
	strh r0, [r4, #0x32]
	adds r0, r4, #0
	adds r0, #0xd0
	ldr r0, [r0]
	movs r1, #1
	bl sub_8077A04
	movs r0, #0x8d
	lsls r0, r0, #2
	bl m4aSongNumStart
	adds r1, r4, #0
	adds r1, #0x2b
	movs r0, #0xa
	strb r0, [r1]
	b _08075D8E
_08075CD0:
	movs r2, #0
	ldr r1, _08075CF4 @ =0x03000023
	adds r0, r5, r1
	ldrb r0, [r0]
	cmp r0, #0
	beq _08075CF8
	ldrh r0, [r4, #0x32]
	subs r0, #0x40
	strh r0, [r4, #0x32]
	movs r0, #0x32
	ldrsh r1, [r4, r0]
	ldr r0, [r4, #0x3c]
	adds r0, r0, r1
	str r0, [r4, #0x3c]
	cmp r0, #0
	bge _08075D10
	str r2, [r4, #0x3c]
	b _08075D14
	.align 2, 0
_08075CF4: .4byte 0x03000023
_08075CF8:
	ldrh r0, [r4, #0x32]
	adds r0, #0x40
	strh r0, [r4, #0x32]
	movs r0, #0x32
	ldrsh r1, [r4, r0]
	ldr r0, [r4, #0x3c]
	adds r0, r0, r1
	str r0, [r4, #0x3c]
	cmp r0, #0
	ble _08075D10
	str r2, [r4, #0x3c]
	movs r2, #1
_08075D10:
	cmp r2, #0
	beq _08075D8E
_08075D14:
	movs r0, #0
	strh r0, [r4, #0x32]
	adds r1, r4, #0
	adds r1, #0x2b
	movs r0, #0x14
	strb r0, [r1]
	b _08075D8E
_08075D22:
	ldr r1, _08075D60 @ =0x030000D0
	adds r6, r5, r1
	ldr r0, [r6]
	bl sub_8077174
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08075D8E
	ldr r0, _08075D64 @ =0x00000235
	bl m4aSongNumStart
	ldr r0, [r6]
	ldr r2, _08075D68 @ =0x03000023
	adds r1, r5, r2
	ldrb r2, [r1]
	movs r1, #1
	eors r1, r2
	ldr r2, [r4]
	ldr r3, [r4, #0x14]
	adds r2, r2, r3
	movs r3, #0x80
	lsls r3, r3, #4
	bl sub_8077238
	ldr r0, [r6]
	movs r1, #3
	bl sub_8077A14
	movs r0, #0x1e
	strb r0, [r7]
	b _08075D8E
	.align 2, 0
_08075D60: .4byte 0x030000D0
_08075D64: .4byte 0x00000235
_08075D68: .4byte 0x03000023
_08075D6C:
	ldr r0, _08075D9C @ =0x030000D0
	adds r5, r5, r0
	ldr r0, [r5]
	bl sub_8077174
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08075D8E
	movs r0, #0
	strb r0, [r7]
	ldr r1, [r6]
	ldr r0, _08075DA0 @ =sub_8075324
	str r0, [r1, #8]
	ldr r0, [r5]
	movs r1, #0
	bl sub_8077A04
_08075D8E:
	adds r0, r4, #0
	bl sub_8076328
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08075D9C: .4byte 0x030000D0
_08075DA0: .4byte sub_8075324

	thumb_func_start sub_8075DA4
sub_8075DA4: @ 0x08075DA4
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	ldr r0, _08075EA8 @ =gCurTask
	mov sb, r0
	ldr r0, [r0]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	ldr r1, _08075EAC @ =0x03000080
	adds r6, r5, r1
	adds r0, #0x58
	adds r7, r5, r0
	adds r1, #0x28
	adds r1, r1, r5
	mov r8, r1
	ldrh r0, [r4, #0x30]
	adds r0, #1
	strh r0, [r4, #0x30]
	ldr r0, _08075EB0 @ =0x03000026
	adds r1, r5, r0
	movs r0, #1
	strb r0, [r1]
	ldr r1, [r4, #0x50]
	adds r0, r4, #0
	bl sub_8077874
	ldr r1, [r4, #0x54]
	adds r0, r4, #0
	bl sub_8077874
	ldr r0, _08075EB4 @ =0x03000029
	adds r1, r5, r0
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	movs r3, #0xff
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08075E96
	mov r0, sb
	ldr r1, [r0]
	ldr r0, _08075EB8 @ =sub_8075324
	str r0, [r1, #8]
	ldr r1, _08075EBC @ =gUnknown_080D5904
	ldr r0, _08075EC0 @ =0x03000023
	adds r2, r5, r0
	ldrb r0, [r2]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r6, #0xc]
	ldrb r0, [r2]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldrh r0, [r0, #2]
	strb r0, [r6, #0x1a]
	ldr r0, _08075EC4 @ =0x0000FFFF
	strh r0, [r6, #0x18]
	ldrb r0, [r6, #0x1b]
	orrs r0, r3
	strb r0, [r6, #0x1b]
	ldr r1, _08075EC8 @ =gUnknown_080D58F4
	ldrb r0, [r2]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r7, #0xc]
	ldrb r0, [r2]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldrh r0, [r0, #2]
	strb r0, [r7, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strh r0, [r7, #0x18]
	ldrb r0, [r7, #0x1b]
	orrs r0, r3
	strb r0, [r7, #0x1b]
	ldr r1, _08075ECC @ =gUnknown_080D592C
	ldrb r0, [r2]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldrh r0, [r0]
	mov r6, r8
	strh r0, [r6, #0xc]
	ldrb r0, [r2]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldrh r0, [r0, #2]
	strb r0, [r6, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strh r0, [r6, #0x18]
	ldrb r0, [r6, #0x1b]
	orrs r0, r3
	strb r0, [r6, #0x1b]
	ldr r2, _08075ED0 @ =gPseudoRandom
	ldr r1, [r2]
	ldr r0, _08075ED4 @ =0x00196225
	muls r0, r1, r0
	ldr r1, _08075ED8 @ =0x3C6EF35F
	adds r0, r0, r1
	str r0, [r2]
	ldr r1, _08075EDC @ =0x00002710
	bl __umodsi3
	ldr r1, _08075EE0 @ =0x00000BB7
	cmp r0, r1
	bhi _08075E96
	ldr r6, _08075EE4 @ =0x03000022
	adds r2, r5, r6
	ldrb r0, [r2]
	movs r1, #1
	eors r0, r1
	strb r0, [r2]
	ldr r0, [r4, #8]
	rsbs r0, r0, #0
	str r0, [r4, #8]
_08075E96:
	adds r0, r4, #0
	bl sub_8076328
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08075EA8: .4byte gCurTask
_08075EAC: .4byte 0x03000080
_08075EB0: .4byte 0x03000026
_08075EB4: .4byte 0x03000029
_08075EB8: .4byte sub_8075324
_08075EBC: .4byte gUnknown_080D5904
_08075EC0: .4byte 0x03000023
_08075EC4: .4byte 0x0000FFFF
_08075EC8: .4byte gUnknown_080D58F4
_08075ECC: .4byte gUnknown_080D592C
_08075ED0: .4byte gPseudoRandom
_08075ED4: .4byte 0x00196225
_08075ED8: .4byte 0x3C6EF35F
_08075EDC: .4byte 0x00002710
_08075EE0: .4byte 0x00000BB7
_08075EE4: .4byte 0x03000022

	thumb_func_start sub_8075EE8
sub_8075EE8: @ 0x08075EE8
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	ldr r0, _08075F28 @ =gCurTask
	mov r8, r0
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r2, _08075F2C @ =0x03000080
	adds r5, r1, r2
	ldr r7, _08075F30 @ =0x03000058
	adds r6, r1, r7
	adds r0, #0xa8
	adds r0, r0, r1
	mov sb, r0
	subs r7, #0x2d
	adds r2, r1, r7
	ldrb r0, [r2]
	cmp r0, #0x64
	beq _0807600A
	cmp r0, #0x64
	ble _08075F1E
	b _08076020
_08075F1E:
	cmp r0, #0
	beq _08075F34
	cmp r0, #0xa
	beq _08075FD8
	b _08076020
	.align 2, 0
_08075F28: .4byte gCurTask
_08075F2C: .4byte 0x03000080
_08075F30: .4byte 0x03000058
_08075F34:
	movs r0, #0xc
	strh r0, [r4, #0x2c]
	movs r0, #0xa
	strb r0, [r2]
	movs r2, #0
	ldr r0, _08075FC0 @ =0x03000023
	adds r0, r0, r1
	mov r8, r0
	ldr r7, _08075FC4 @ =0x03000050
	adds r3, r1, r7
	movs r0, #0x80
	lsls r0, r0, #0x14
	mov ip, r0
_08075F4E:
	lsls r0, r2, #2
	adds r0, r3, r0
	ldr r1, [r0]
	ldr r0, [r1, #4]
	mov r7, ip
	orrs r0, r7
	str r0, [r1, #4]
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #1
	bls _08075F4E
	movs r0, #0x80
	lsls r0, r0, #4
	movs r3, #1
	rsbs r3, r3, #0
	movs r1, #0x91
	str r1, [sp]
	movs r1, #0x40
	movs r2, #0
	bl sub_805256C
	mov r1, r8
	ldrb r0, [r1]
	cmp r0, #0
	beq _08076020
	movs r0, #0
	strb r0, [r1]
	ldr r1, _08075FC8 @ =gUnknown_080D5904
	ldrh r0, [r1, #8]
	strh r0, [r5, #0xc]
	ldrh r0, [r1, #0xa]
	strb r0, [r5, #0x1a]
	ldr r0, _08075FCC @ =0x0000FFFF
	strh r0, [r5, #0x18]
	movs r0, #0xff
	strb r0, [r5, #0x1b]
	ldr r1, _08075FD0 @ =gUnknown_080D58F4
	ldrh r0, [r1, #8]
	strh r0, [r6, #0xc]
	ldrh r0, [r1, #0xa]
	strb r0, [r6, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strh r0, [r6, #0x18]
	strb r0, [r6, #0x1b]
	ldr r1, _08075FD4 @ =gUnknown_080D592C
	ldrh r0, [r1, #8]
	mov r2, sb
	strh r0, [r2, #0xc]
	ldrh r0, [r1, #0xa]
	strb r0, [r2, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strh r0, [r2, #0x18]
	strb r0, [r2, #0x1b]
	b _08076020
	.align 2, 0
_08075FC0: .4byte 0x03000023
_08075FC4: .4byte 0x03000050
_08075FC8: .4byte gUnknown_080D5904
_08075FCC: .4byte 0x0000FFFF
_08075FD0: .4byte gUnknown_080D58F4
_08075FD4: .4byte gUnknown_080D592C
_08075FD8:
	ldrh r0, [r4, #0x2c]
	subs r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _08076020
	movs r0, #0x64
	strb r0, [r2]
	ldr r7, _08075FFC @ =0x03000023
	adds r0, r1, r7
	ldrb r0, [r0]
	cmp r0, #0
	beq _08076000
	adds r0, r4, #0
	movs r1, #9
	bl sub_8077954
	b _08076020
	.align 2, 0
_08075FFC: .4byte 0x03000023
_08076000:
	adds r0, r4, #0
	movs r1, #6
	bl sub_8077954
	b _08076020
_0807600A:
	movs r0, #0
	strb r0, [r2]
	movs r0, #0xb4
	strh r0, [r4, #0x30]
	ldr r0, _08076048 @ =0x00000221
	bl m4aSongNumStart
	mov r0, r8
	ldr r1, [r0]
	ldr r0, _0807604C @ =sub_8076050
	str r0, [r1, #8]
_08076020:
	ldr r1, [r4, #0x50]
	ldr r0, [r1, #4]
	movs r2, #0x80
	lsls r2, r2, #0x14
	orrs r0, r2
	str r0, [r1, #4]
	ldr r1, [r4, #0x54]
	ldr r0, [r1, #4]
	orrs r0, r2
	str r0, [r1, #4]
	adds r0, r4, #0
	bl sub_8076328
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08076048: .4byte 0x00000221
_0807604C: .4byte sub_8076050

	thumb_func_start sub_8076050
sub_8076050: @ 0x08076050
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	ldr r4, _0807607C @ =gCurTask
	ldr r0, [r4]
	ldrh r3, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r3, r0
	adds r0, #0x2b
	adds r2, r3, r0
	ldrb r1, [r2]
	cmp r1, #0xa
	beq _08076096
	cmp r1, #0xa
	bgt _08076080
	cmp r1, #0
	beq _08076088
	b _080761FA
	.align 2, 0
_0807607C: .4byte gCurTask
_08076080:
	cmp r1, #0xc8
	bne _08076086
	b _080761E4
_08076086:
	b _080761FA
_08076088:
	movs r0, #0xfa
	lsls r0, r0, #8
	strh r0, [r6, #0x32]
	strh r1, [r6, #0x2c]
	movs r0, #0xa
	strb r0, [r2]
	b _080761FA
_08076096:
	ldrh r0, [r6, #0x32]
	adds r0, #0x40
	strh r0, [r6, #0x32]
	movs r1, #0x32
	ldrsh r0, [r6, r1]
	ldr r2, [r6, #0x44]
	adds r2, r2, r0
	str r2, [r6, #0x44]
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	strh r0, [r6, #0x2c]
	ldr r0, [r6]
	ldr r1, [r6, #0x14]
	adds r0, r0, r1
	lsls r0, r0, #8
	lsrs r0, r0, #0x10
	str r0, [sp, #0x10]
	ldr r0, [r6, #4]
	adds r0, r0, r2
	lsls r0, r0, #8
	lsrs r0, r0, #0x10
	str r0, [sp, #0x14]
	movs r4, #0
	mov r8, r4
	ldr r0, _080760E8 @ =0x03000034
	adds r0, r0, r3
	mov sl, r0
_080760CC:
	mov r3, r8
	lsls r1, r3, #1
	mov r4, sl
	adds r3, r4, r1
	ldrh r2, [r3]
	movs r0, #1
	mov r4, r8
	ands r0, r4
	adds r4, r1, #0
	cmp r0, #0
	beq _080760EC
	adds r1, r2, #0
	subs r1, #0x40
	b _080760F0
	.align 2, 0
_080760E8: .4byte 0x03000034
_080760EC:
	adds r1, r2, #0
	adds r1, #0x40
_080760F0:
	ldr r0, _08076178 @ =0x000003FF
	ands r1, r0
	strh r1, [r3]
	mov r1, sl
	adds r0, r1, r4
	ldrh r4, [r0]
	mov sb, r4
	lsls r0, r4, #1
	ldr r3, _0807617C @ =gSineTable
	adds r0, r0, r3
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r2, r0, #2
	adds r2, r2, r0
	asrs r2, r2, #0xc
	movs r3, #0x80
	lsls r3, r3, #1
	adds r0, r4, r3
	lsls r0, r0, #1
	ldr r1, _0807617C @ =gSineTable
	adds r0, r0, r1
	movs r3, #0
	ldrsh r0, [r0, r3]
	lsls r1, r0, #2
	adds r1, r1, r0
	asrs r1, r1, #0xc
	ldr r3, [sp, #0x10]
	lsls r0, r3, #0x10
	asrs r0, r0, #0x10
	adds r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	mov ip, r5
	ldr r1, [sp, #0x14]
	lsls r0, r1, #0x10
	asrs r0, r0, #0x10
	adds r0, r0, r2
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	adds r7, r3, #0
	ldrh r1, [r6, #0x2c]
	movs r2, #1
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _08076180
	mov r0, r8
	ands r0, r2
	cmp r0, #0
	beq _080761AA
	lsls r1, r5, #0x10
	asrs r1, r1, #0x10
	lsls r2, r3, #0x10
	asrs r2, r2, #0x10
	str r4, [sp]
	movs r0, #0x14
	str r0, [sp, #4]
	movs r3, #0
	str r3, [sp, #8]
	ldr r0, [r6, #0x48]
	str r0, [sp, #0xc]
	movs r0, #7
	movs r3, #0x80
	lsls r3, r3, #2
	bl sub_8079758
	b _080761AA
	.align 2, 0
_08076178: .4byte 0x000003FF
_0807617C: .4byte gSineTable
_08076180:
	mov r3, r8
	ands r3, r2
	cmp r3, #0
	bne _080761AA
	mov r4, ip
	lsls r1, r4, #0x10
	asrs r1, r1, #0x10
	lsls r2, r7, #0x10
	asrs r2, r2, #0x10
	mov r0, sb
	str r0, [sp]
	movs r0, #0x14
	str r0, [sp, #4]
	str r3, [sp, #8]
	ldr r0, [r6, #0x48]
	str r0, [sp, #0xc]
	movs r0, #7
	movs r3, #0x80
	lsls r3, r3, #2
	bl sub_8079758
_080761AA:
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	cmp r0, #3
	bls _080760CC
	ldrh r1, [r6, #0x2c]
	movs r0, #0x3f
	ands r0, r1
	cmp r0, #0
	bne _080761C8
	ldr r0, _080761E0 @ =0x00000221
	bl m4aSongNumStart
_080761C8:
	ldr r0, [r6, #0x44]
	asrs r0, r0, #8
	movs r1, #0x96
	lsls r1, r1, #1
	cmp r0, r1
	ble _080761FA
	adds r1, r6, #0
	adds r1, #0x2b
	movs r0, #0xc8
	strb r0, [r1]
	b _080761FA
	.align 2, 0
_080761E0: .4byte 0x00000221
_080761E4:
	movs r0, #0
	strb r0, [r2]
	strh r0, [r6, #0x2c]
	movs r0, #0x78
	strh r0, [r6, #0x30]
	ldr r0, _08076210 @ =0x00000221
	bl m4aSongNumStart
	ldr r1, [r4]
	ldr r0, _08076214 @ =sub_8076218
	str r0, [r1, #8]
_080761FA:
	adds r0, r6, #0
	bl sub_8076328
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08076210: .4byte 0x00000221
_08076214: .4byte sub_8076218

	thumb_func_start sub_8076218
sub_8076218: @ 0x08076218
	push {r4, r5, r6, lr}
	ldr r2, _08076248 @ =gCurTask
	ldr r0, [r2]
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r3, r0, r1
	ldr r4, _0807624C @ =0x030000D0
	adds r0, r0, r4
	ldr r0, [r0]
	ldrh r0, [r0, #6]
	adds r5, r0, r1
	ldrh r1, [r3, #0x30]
	movs r0, #2
	ands r0, r1
	adds r6, r2, #0
	cmp r0, #0
	beq _08076258
	ldr r0, _08076250 @ =gDispCnt
	ldrh r2, [r0]
	ldr r1, _08076254 @ =0x0000FEFF
	ands r1, r2
	b _08076264
	.align 2, 0
_08076248: .4byte gCurTask
_0807624C: .4byte 0x030000D0
_08076250: .4byte gDispCnt
_08076254: .4byte 0x0000FEFF
_08076258:
	ldr r0, _080762A4 @ =gDispCnt
	ldrh r1, [r0]
	movs r4, #0x80
	lsls r4, r4, #1
	adds r2, r4, #0
	orrs r1, r2
_08076264:
	strh r1, [r0]
	adds r4, r0, #0
	ldrh r0, [r3, #0x30]
	subs r0, #1
	strh r0, [r3, #0x30]
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0
	bne _0807629C
	ldrh r1, [r4]
	ldr r0, _080762A8 @ =0x0000FEFF
	ands r0, r1
	strh r0, [r4]
	ldr r1, _080762AC @ =gCamera
	movs r0, #0xf5
	lsls r0, r0, #2
	str r0, [r1, #0x14]
	adds r0, r5, #0
	adds r0, #0xb2
	movs r1, #1
	strb r1, [r0]
	adds r0, r3, #0
	adds r0, #0x28
	strb r1, [r0]
	strh r2, [r3, #0x30]
	ldr r1, [r6]
	ldr r0, _080762B0 @ =sub_80762B4
	str r0, [r1, #8]
_0807629C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080762A4: .4byte gDispCnt
_080762A8: .4byte 0x0000FEFF
_080762AC: .4byte gCamera
_080762B0: .4byte sub_80762B4

	thumb_func_start sub_80762B4
sub_80762B4: @ 0x080762B4
	push {r4, lr}
	sub sp, #0x10
	ldr r0, _080762D4 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r1, [r4, #0x50]
	ldrh r0, [r4, #0x30]
	cmp r0, #0
	beq _080762D8
	cmp r0, #1
	beq _0807630C
	b _08076320
	.align 2, 0
_080762D4: .4byte gCurTask
_080762D8:
	ldr r0, [r4]
	ldr r1, [r4, #0x14]
	adds r0, r0, r1
	asrs r0, r0, #8
	str r0, [sp]
	ldr r0, _08076300 @ =0x000003AE
	str r0, [sp, #4]
	ldr r0, [r4]
	ldr r1, [r4, #0x14]
	adds r0, r0, r1
	asrs r0, r0, #8
	str r0, [sp, #8]
	ldr r0, _08076304 @ =0x000003B6
	str r0, [sp, #0xc]
	ldr r1, _08076308 @ =sub_807A37C
	mov r0, sp
	bl sub_8078E34
	movs r0, #1
	b _0807631E
	.align 2, 0
_08076300: .4byte 0x000003AE
_08076304: .4byte 0x000003B6
_08076308: .4byte sub_807A37C
_0807630C:
	ldr r1, [r1, #4]
	movs r0, #0x80
	lsls r0, r0, #0x14
	ands r1, r0
	cmp r1, #0
	bne _08076320
	ldr r0, [r4, #0x1c]
	strb r1, [r0]
	movs r0, #0x64
_0807631E:
	strh r0, [r4, #0x30]
_08076320:
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8076328
sub_8076328: @ 0x08076328
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	adds r0, #0xd0
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r3, r1, r0
	mov r7, r8
	adds r7, #0x58
	mov r1, r8
	ldr r0, [r1]
	ldr r1, [r1, #0x14]
	adds r0, r0, r1
	lsls r0, r0, #8
	lsrs r5, r0, #0x10
	asrs r1, r0, #0x10
	ldr r2, _0807636C @ =0xFFFFFCA0
	adds r0, r1, r2
	cmp r0, #0
	bge _0807635A
	adds r2, #0xf
	adds r0, r1, r2
_0807635A:
	asrs r0, r0, #4
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge _08076370
	movs r1, #0
	b _08076376
	.align 2, 0
_0807636C: .4byte 0xFFFFFCA0
_08076370:
	cmp r0, #0x14
	ble _08076376
	movs r1, #0x14
_08076376:
	adds r2, r3, #0
	adds r2, #0xc8
	lsls r0, r1, #0x18
	asrs r0, r0, #0x16
	adds r1, r3, #4
	adds r1, r1, r0
	ldr r4, [r2]
	ldr r0, [r1]
	adds r4, r4, r0
	lsls r4, r4, #8
	ldr r6, _0807641C @ =gCamera
	ldr r0, [r6]
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	subs r0, r5, r0
	strh r0, [r7, #0x10]
	mov r0, r8
	ldr r1, [r0, #0x3c]
	asrs r1, r1, #8
	asrs r4, r4, #0x10
	adds r1, r4, r1
	ldr r0, [r6, #4]
	subs r1, r1, r0
	mov r2, r8
	ldr r0, [r2, #0x44]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r7, #0x12]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	bl DisplaySprite
	mov r1, r8
	ldr r0, [r1, #0x3c]
	asrs r0, r0, #8
	adds r0, r4, r0
	lsls r0, r0, #8
	str r0, [r1, #4]
	mov r7, r8
	adds r7, #0x80
	ldr r0, [r6]
	subs r0, r5, r0
	strh r0, [r7, #0x10]
	ldr r1, [r1, #0x3c]
	asrs r1, r1, #8
	adds r1, r4, r1
	ldr r0, [r6, #4]
	subs r1, r1, r0
	mov r2, r8
	ldr r0, [r2, #0x44]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r7, #0x12]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	bl DisplaySprite
	adds r7, #0x28
	ldr r0, [r6]
	subs r5, r5, r0
	strh r5, [r7, #0x10]
	ldr r0, [r6, #4]
	subs r4, r4, r0
	mov r1, r8
	ldr r0, [r1, #0x44]
	asrs r0, r0, #8
	adds r4, r4, r0
	strh r4, [r7, #0x12]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	bl DisplaySprite
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807641C: .4byte gCamera

	thumb_func_start sub_8076420
sub_8076420: @ 0x08076420
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r5, r0, #0
	adds r7, r5, #0
	adds r7, #0xa8
	movs r0, #0
	mov r8, r0
	adds r0, r5, #0
	adds r0, #0x21
	ldrb r0, [r0]
	cmp r0, #0
	bne _08076440
	b _08076542
_08076440:
	ldr r4, _08076508 @ =gStageData
	ldrb r0, [r4, #6]
	lsls r0, r0, #2
	adds r2, r5, #0
	adds r2, #0x50
	adds r0, r2, r0
	ldr r0, [r0]
	ldr r0, [r0, #4]
	movs r1, #0x80
	lsls r1, r1, #1
	ands r0, r1
	mov sb, r2
	cmp r0, #0
	bne _08076542
	movs r0, #0x10
	ldrsh r1, [r7, r0]
	ldr r3, _0807650C @ =gCamera
	ldr r0, [r3]
	adds r0, r0, r1
	lsls r0, r0, #8
	movs r1, #0x12
	ldrsh r2, [r7, r1]
	ldr r1, [r3, #4]
	adds r1, r1, r2
	lsls r1, r1, #8
	bl sub_8004D68
	ldr r2, _08076510 @ =gPlayers
	ldrb r1, [r4, #6]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r1, r0, r2
	adds r0, r1, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	cmp r0, #1
	beq _080764B6
	adds r0, r1, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	lsls r1, r1, #0x1e
	lsrs r1, r1, #0x1e
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r2
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	cmp r0, #1
	bne _080764C4
_080764B6:
	adds r0, r7, #0
	bl sub_807A1DC
	cmp r0, #1
	bne _080764C4
	movs r0, #1
	mov r8, r0
_080764C4:
	movs r6, #0
_080764C6:
	lsls r0, r6, #2
	add r0, sb
	ldr r4, [r0]
	adds r0, r4, #0
	bl sub_802C080
	cmp r0, #0
	bne _0807652A
	ldr r1, [r7, #0x20]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	beq _0807652A
	ldr r1, [r5]
	ldr r0, [r5, #0x14]
	adds r1, r1, r0
	asrs r1, r1, #8
	ldr r2, [r5, #4]
	asrs r2, r2, #8
	str r4, [sp]
	adds r0, r7, #0
	movs r3, #0
	bl sub_8020E3C
	cmp r0, #1
	bne _08076514
	movs r1, #1
	mov r8, r1
	adds r0, r4, #0
	bl sub_80044CC
	b _0807652A
	.align 2, 0
_08076508: .4byte gStageData
_0807650C: .4byte gCamera
_08076510: .4byte gPlayers
_08076514:
	ldr r1, [r5]
	ldr r0, [r5, #0x14]
	adds r1, r1, r0
	asrs r1, r1, #8
	ldr r2, [r5, #4]
	asrs r2, r2, #8
	str r4, [sp]
	adds r0, r7, #0
	movs r3, #0
	bl sub_8020CE0
_0807652A:
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #1
	bls _080764C6
	mov r0, r8
	cmp r0, #1
	bne _08076542
	adds r0, r5, #0
	adds r0, #0x27
	mov r1, r8
	strb r1, [r0]
_08076542:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8076550
sub_8076550: @ 0x08076550
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r7, r0, #0
	ldr r0, _0807660C @ =sub_8076618
	movs r2, #0x88
	lsls r2, r2, #6
	movs r1, #0
	str r1, [sp]
	movs r1, #0x4c
	movs r3, #0
	bl TaskCreate
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	str r7, [r5, #0x48]
	movs r3, #0
	mov r8, r3
	adds r0, #0x40
	adds r6, r1, r0
	adds r4, r7, #0
	adds r4, #0x50
	subs r0, #0x3c
	adds r2, r1, r0
	movs r1, #1
	mov ip, r1
_0807658A:
	adds r0, r5, r3
	mov r1, r8
	strb r1, [r0]
	lsls r0, r3, #2
	adds r1, r6, r0
	adds r0, r4, r0
	ldr r0, [r0]
	str r0, [r1]
	lsls r0, r3, #1
	adds r0, r2, r0
	mov r1, ip
	strh r1, [r0]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #1
	bls _0807658A
	movs r3, #0
	adds r4, r5, #0
	adds r4, #0x18
	ldr r6, _08076610 @ =gUnknown_080D59EC
	adds r0, r6, #2
	mov ip, r0
_080765B8:
	lsls r1, r3, #2
	adds r2, r5, r1
	adds r0, r1, r6
	ldrh r0, [r0]
	strh r0, [r2, #8]
	add r1, ip
	ldrh r0, [r1]
	strh r0, [r2, #0xa]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #3
	bls _080765B8
	ldr r0, [r7, #0x4c]
	str r0, [r5, #0x18]
	movs r2, #0
	movs r1, #0
	ldr r0, _08076614 @ =0x000003C2
	strh r0, [r4, #0xc]
	strb r2, [r4, #0x1a]
	movs r0, #0x80
	lsls r0, r0, #2
	strh r0, [r4, #0x14]
	strh r1, [r4, #0xe]
	strh r1, [r4, #0x16]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	movs r0, #0x10
	strb r0, [r4, #0x1c]
	strb r2, [r4, #0x1f]
	subs r0, #0x11
	str r0, [r4, #0x20]
	str r1, [r4, #8]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807660C: .4byte sub_8076618
_08076610: .4byte gUnknown_080D59EC
_08076614: .4byte 0x000003C2

	thumb_func_start sub_8076618
sub_8076618: @ 0x08076618
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	ldr r0, _08076690 @ =gCurTask
	ldr r0, [r0]
	ldrh r2, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r2, r1
	mov sb, r0
	ldr r0, [r0, #0x48]
	adds r0, #0xd0
	ldr r0, [r0]
	ldrh r0, [r0, #6]
	adds r0, r0, r1
	str r0, [sp]
	adds r1, #0x18
	adds r1, r2, r1
	str r1, [sp, #4]
	movs r2, #0
	mov sl, r2
_08076648:
	mov r3, sl
	lsls r1, r3, #2
	mov r0, sb
	adds r0, #0x40
	adds r0, r0, r1
	ldr r4, [r0]
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	lsls r1, r1, #0x1e
	lsrs r1, r1, #0x1e
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	ldr r1, _08076694 @ =gPlayers
	adds r0, r0, r1
	mov r8, r0
	adds r0, r4, #0
	bl sub_802C080
	cmp r0, #0
	beq _0807667A
	b _08076942
_0807667A:
	mov r0, sb
	add r0, sl
	ldrb r1, [r0]
	str r0, [sp, #8]
	cmp r1, #0
	beq _08076698
	cmp r1, #0xa
	bne _0807668C
	b _080768F0
_0807668C:
	b _08076934
	.align 2, 0
_08076690: .4byte gCurTask
_08076694: .4byte gPlayers
_08076698:
	ldr r1, [r4, #4]
	movs r0, #0x80
	lsls r0, r0, #0x14
	ands r0, r1
	mov ip, r1
	cmp r0, #0
	beq _080766A8
	b _08076934
_080766A8:
	ldr r0, [r4, #0x14]
	asrs r3, r0, #8
	ldr r1, _080766D0 @ =0x000001B7
	adds r6, r0, #0
	cmp r3, r1
	bgt _080766B6
	b _08076934
_080766B6:
	ldr r0, [r4, #0x10]
	asrs r2, r0, #8
	ldr r1, _080766D4 @ =0x00000407
	adds r5, r0, #0
	cmp r2, r1
	bgt _080766DC
	ldr r0, _080766D8 @ =0x00000247
	movs r7, #1
	cmp r3, r0
	bgt _080766E6
	movs r7, #0
	b _080766E6
	.align 2, 0
_080766D0: .4byte 0x000001B7
_080766D4: .4byte 0x00000407
_080766D8: .4byte 0x00000247
_080766DC:
	ldr r0, _080766F8 @ =0x00000247
	movs r7, #3
	cmp r3, r0
	bgt _080766E6
	movs r7, #2
_080766E6:
	movs r2, #0
	cmp r7, #1
	beq _0807672C
	cmp r7, #1
	bgt _080766FC
	cmp r7, #0
	beq _08076706
	b _080767B0
	.align 2, 0
_080766F8: .4byte 0x00000247
_080766FC:
	cmp r7, #2
	beq _0807675C
	cmp r7, #3
	beq _0807678C
	b _080767B0
_08076706:
	asrs r1, r5, #8
	movs r0, #0xd8
	lsls r0, r0, #2
	cmp r1, r0
	bgt _080767B0
	asrs r1, r6, #8
	ldr r0, _08076728 @ =0x00000247
	cmp r1, r0
	bgt _080767B0
	movs r0, #0xd8
	lsls r0, r0, #0xa
	str r0, [r4, #0x10]
	ldr r1, [r4, #4]
	movs r0, #0x80
	lsls r0, r0, #9
	orrs r1, r0
	b _0807674C
	.align 2, 0
_08076728: .4byte 0x00000247
_0807672C:
	asrs r1, r5, #8
	movs r0, #0xd8
	lsls r0, r0, #2
	cmp r1, r0
	bgt _080767B0
	asrs r1, r6, #8
	movs r0, #0x92
	lsls r0, r0, #2
	cmp r1, r0
	ble _080767B0
	movs r0, #0xd8
	lsls r0, r0, #0xa
	str r0, [r4, #0x10]
	ldr r1, [r4, #4]
	ldr r0, _08076758 @ =0xFFFEFFFF
	ands r1, r0
_0807674C:
	movs r0, #2
	rsbs r0, r0, #0
	ands r1, r0
	str r1, [r4, #4]
	b _080767B6
	.align 2, 0
_08076758: .4byte 0xFFFEFFFF
_0807675C:
	asrs r1, r5, #8
	ldr r0, _08076780 @ =0x000004AE
	cmp r1, r0
	ble _080767B0
	asrs r1, r6, #8
	ldr r0, _08076784 @ =0x00000247
	cmp r1, r0
	bgt _080767B0
	ldr r0, _08076788 @ =0x0004AF00
	str r0, [r4, #0x10]
	ldr r1, [r4, #4]
	movs r0, #0x80
	lsls r0, r0, #9
	orrs r1, r0
	movs r0, #1
	orrs r1, r0
	str r1, [r4, #4]
	b _080767B6
	.align 2, 0
_08076780: .4byte 0x000004AE
_08076784: .4byte 0x00000247
_08076788: .4byte 0x0004AF00
_0807678C:
	asrs r1, r5, #8
	ldr r0, _080767EC @ =0x000004AE
	cmp r1, r0
	ble _080767B0
	asrs r1, r6, #8
	movs r0, #0x92
	lsls r0, r0, #2
	cmp r1, r0
	ble _080767B0
	ldr r0, _080767F0 @ =0x0004AF00
	str r0, [r4, #0x10]
	ldr r1, _080767F4 @ =0xFFFEFFFF
	mov r0, ip
	ands r1, r0
	movs r0, #1
	orrs r0, r1
	str r0, [r4, #4]
	movs r2, #1
_080767B0:
	cmp r2, #0
	bne _080767B6
	b _08076934
_080767B6:
	movs r2, #0
	movs r0, #0xa
	ldr r1, [sp, #8]
	strb r0, [r1]
	mov r3, sl
	lsls r1, r3, #1
	mov r0, sb
	adds r0, #4
	adds r0, r0, r1
	movs r1, #4
	strh r1, [r0]
	strh r2, [r4, #0x1a]
	ldr r1, [r4, #0x14]
	movs r0, #0x92
	lsls r0, r0, #0xa
	subs r1, r0, r1
	adds r2, r1, #0
	cmp r1, #0
	bge _080767DE
	rsbs r2, r1, #0
_080767DE:
	ldr r0, _080767F8 @ =0x00001FFF
	cmp r2, r0
	ble _08076804
	cmp r1, #0
	bge _08076800
	ldr r1, _080767FC @ =0xFFFFE000
	b _08076804
	.align 2, 0
_080767EC: .4byte 0x000004AE
_080767F0: .4byte 0x0004AF00
_080767F4: .4byte 0xFFFEFFFF
_080767F8: .4byte 0x00001FFF
_080767FC: .4byte 0xFFFFE000
_08076800:
	movs r1, #0x80
	lsls r1, r1, #6
_08076804:
	movs r2, #0x92
	lsls r2, r2, #0xa
	adds r0, r1, r2
	str r0, [r4, #0x14]
	ldr r0, [r4, #4]
	movs r1, #0x80
	lsls r1, r1, #0x14
	orrs r0, r1
	str r0, [r4, #4]
	cmp r7, #1
	bhi _0807683C
	ldr r1, [sp]
	adds r1, #0xb4
	movs r0, #0x14
	strb r0, [r1]
	movs r0, #0x80
	lsls r0, r0, #2
	strh r0, [r4, #0x18]
	strh r0, [r4, #0x1c]
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	movs r3, #0xd8
	lsls r3, r3, #2
	adds r0, r0, r3
	b _08076858
_0807683C:
	ldr r1, [sp]
	adds r1, #0xb4
	movs r0, #0
	strb r0, [r1]
	movs r0, #0xfe
	lsls r0, r0, #8
	strh r0, [r4, #0x18]
	strh r0, [r4, #0x1c]
	adds r0, r4, #0
	adds r0, #0x24
	movs r1, #0
	ldrsb r1, [r0, r1]
	ldr r0, _080768E4 @ =0x000004AF
	subs r0, r0, r1
_08076858:
	lsls r0, r0, #8
	str r0, [r4, #0x10]
	ldr r0, [r4, #4]
	movs r1, #0x80
	lsls r1, r1, #0x10
	ands r0, r1
	cmp r0, #0
	beq _080768B6
	adds r0, r4, #0
	bl sub_8016F28
	adds r2, r4, #0
	adds r2, #0x2c
	ldrb r0, [r2]
	movs r3, #5
	rsbs r3, r3, #0
	adds r1, r3, #0
	ands r0, r1
	strb r0, [r2]
	adds r0, r4, #0
	bl Player_8005528
	ldrh r0, [r4, #0x18]
	mov r1, r8
	strh r0, [r1, #0x18]
	ldrh r0, [r4, #0x1a]
	strh r0, [r1, #0x1a]
	ldrh r0, [r4, #0x1c]
	strh r0, [r1, #0x1c]
	ldr r0, [r4, #0x10]
	str r0, [r1, #0x10]
	ldr r0, [r4, #0x14]
	str r0, [r1, #0x14]
	ldr r2, [r1, #4]
	ldr r0, _080768E8 @ =0xFFFEFFFF
	ands r2, r0
	str r2, [r1, #4]
	ldr r0, [r4, #4]
	movs r1, #0x80
	lsls r1, r1, #9
	ands r0, r1
	orrs r2, r0
	mov r3, r8
	str r2, [r3, #4]
	mov r0, r8
	bl Player_8005528
_080768B6:
	ldr r1, _080768EC @ =0xFFFFFDFE
	adds r0, r1, #0
	ldrh r2, [r4, #0x34]
	adds r0, r0, r2
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #1
	bhi _08076934
	movs r3, #0xa4
	lsls r3, r3, #1
	adds r2, r4, r3
	ldrb r1, [r2]
	movs r0, #0x80
	subs r0, r0, r1
	strb r0, [r2]
	movs r1, #0x18
	ldrsh r0, [r4, r1]
	rsbs r0, r0, #0
	strh r0, [r4, #0x18]
	adds r0, r4, #0
	bl Player_8005528
	b _08076934
	.align 2, 0
_080768E4: .4byte 0x000004AF
_080768E8: .4byte 0xFFFEFFFF
_080768EC: .4byte 0xFFFFFDFE
_080768F0:
	mov r2, sl
	lsls r0, r2, #1
	mov r1, sb
	adds r1, #4
	adds r1, r1, r0
	ldrh r0, [r1]
	subs r0, #1
	movs r2, #0
	strh r0, [r1]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _08076934
	ldr r3, [sp, #8]
	strb r2, [r3]
	mov r0, sb
	ldr r1, [r0, #0x48]
	adds r0, r1, #0
	adds r0, #0x21
	ldrb r0, [r0]
	cmp r0, #0
	beq _0807691E
	ldr r0, [r4, #4]
	b _0807692E
_0807691E:
	adds r0, r1, #0
	adds r0, #0x28
	ldrb r0, [r0]
	cmp r0, #0
	beq _08076934
	ldr r0, [r4, #4]
	ldr r1, _080769B4 @ =0xFFFEFFFF
	ands r0, r1
_0807692E:
	ldr r1, _080769B8 @ =0xF7FFFFFF
	ands r0, r1
	str r0, [r4, #4]
_08076934:
	mov r1, sb
	ldr r0, [r1, #0x48]
	adds r0, #0x2e
	add r0, sl
	ldr r2, [sp, #8]
	ldrb r1, [r2]
	strb r1, [r0]
_08076942:
	mov r0, sl
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov sl, r0
	cmp r0, #1
	bhi _08076952
	b _08076648
_08076952:
	mov r3, sb
	ldr r4, [r3, #0x40]
	ldr r0, [r4, #0x14]
	asrs r0, r0, #8
	movs r1, #0xe1
	lsls r1, r1, #2
	cmp r0, r1
	ble _08076976
	ldr r0, [r4, #4]
	movs r1, #0x80
	lsls r1, r1, #1
	ands r0, r1
	cmp r0, #0
	bne _08076976
	ldr r0, _080769BC @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
_08076976:
	movs r7, #0
	ldr r4, _080769C0 @ =gCamera
_0807697A:
	lsls r1, r7, #2
	add r1, sb
	ldr r2, [r4]
	ldrh r0, [r1, #8]
	subs r0, r0, r2
	ldr r2, [sp, #4]
	strh r0, [r2, #0x10]
	ldr r2, [r4, #4]
	ldrh r0, [r1, #0xa]
	subs r0, r0, r2
	ldr r3, [sp, #4]
	strh r0, [r3, #0x12]
	ldr r0, [sp, #4]
	bl DisplaySprite
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #3
	bls _0807697A
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080769B4: .4byte 0xFFFEFFFF
_080769B8: .4byte 0xF7FFFFFF
_080769BC: .4byte gCurTask
_080769C0: .4byte gCamera

	thumb_func_start sub_80769C4
sub_80769C4: @ 0x080769C4
	push {r4, r5, r6, r7, lr}
	ldr r1, _08076A14 @ =gStageData
	adds r7, r1, #0
	adds r7, #0x88
	ldr r1, [r7]
	ldrh r3, [r1, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r6, r3, r1
	ldrb r1, [r0, #2]
	movs r4, #0x7f
	ands r4, r1
	adds r1, r4, #0
	ldrb r2, [r0, #3]
	ldrb r0, [r0, #4]
	lsls r0, r0, #8
	orrs r2, r0
	cmp r4, #1
	bne _08076A28
	ldr r0, _08076A18 @ =0x03000021
	adds r1, r3, r0
	movs r0, #0
	strb r0, [r1]
	ldr r1, _08076A1C @ =0x030000D4
	adds r5, r3, r1
	ldrb r1, [r5]
	cmp r1, #0
	bne _08076A46
	lsls r0, r2, #8
	str r0, [r6, #0x14]
	ldr r2, _08076A20 @ =0x0300002B
	adds r0, r3, r2
	strb r1, [r0]
	movs r0, #1
	strh r4, [r6, #0x2c]
	strb r0, [r5]
	ldr r1, [r7]
	ldr r0, _08076A24 @ =sub_8075EE8
	str r0, [r1, #8]
	b _08076A46
	.align 2, 0
_08076A14: .4byte gStageData
_08076A18: .4byte 0x03000021
_08076A1C: .4byte 0x030000D4
_08076A20: .4byte 0x0300002B
_08076A24: .4byte sub_8075EE8
_08076A28:
	cmp r1, #1
	blt _08076A46
	cmp r1, #4
	bgt _08076A46
	cmp r1, #3
	blt _08076A46
	ldr r1, _08076A4C @ =0x03000026
	adds r0, r3, r1
	ldrb r0, [r0]
	cmp r0, #0
	bne _08076A46
	ldr r2, _08076A50 @ =0x03000027
	adds r1, r3, r2
	movs r0, #1
	strb r0, [r1]
_08076A46:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08076A4C: .4byte 0x03000026
_08076A50: .4byte 0x03000027

	thumb_func_start sub_8076A54
sub_8076A54: @ 0x08076A54
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r6, r0, #0
	ldr r0, _08076B3C @ =sub_8076B58
	movs r1, #0x80
	lsls r1, r1, #1
	movs r2, #0x88
	lsls r2, r2, #6
	ldr r3, _08076B40 @ =sub_80779EC
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	mov r8, r0
	ldrh r3, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r3, r0
	ldr r1, _08076B44 @ =0x030000FC
	adds r0, r3, r1
	str r6, [r0]
	ldr r0, _08076B48 @ =0x030000C4
	adds r2, r3, r0
	ldr r0, [r6]
	ldr r1, [r6, #4]
	str r0, [r2]
	str r1, [r2, #4]
	movs r0, #0
	str r0, [r4]
	movs r2, #0
	ldr r1, _08076B4C @ =0x03000004
	adds r7, r3, r1
	movs r5, #0
	ldr r0, _08076B50 @ =0x03000058
	adds r3, r3, r0
_08076A9E:
	lsls r1, r2, #2
	adds r0, r7, r1
	str r5, [r0]
	adds r1, r3, r1
	str r5, [r1]
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0x14
	bls _08076A9E
	adds r1, r4, #0
	adds r1, #0xf4
	ldr r0, [r6, #0x50]
	str r0, [r1]
	adds r1, #4
	ldr r0, [r6, #0x54]
	str r0, [r1]
	adds r0, r4, #0
	adds r0, #0xac
	movs r5, #0
	str r5, [r0]
	adds r0, #4
	strb r5, [r0]
	adds r0, #1
	strb r5, [r0]
	adds r0, #1
	strb r5, [r0]
	adds r0, #1
	strb r5, [r0]
	subs r1, #0x44
	movs r0, #0xff
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0xb5
	strb r5, [r0]
	adds r0, #1
	strb r5, [r0]
	adds r0, #1
	strb r5, [r0]
	adds r0, #9
	str r5, [r0]
	subs r0, #8
	strb r5, [r0]
	adds r0, #4
	str r5, [r0]
	adds r4, #0xcc
	movs r0, #4
	bl VramMalloc
	str r0, [r4]
	movs r1, #0
	ldr r0, _08076B54 @ =0x000004EA
	strh r0, [r4, #0xc]
	strb r1, [r4, #0x1a]
	adds r0, #0xd6
	strh r0, [r4, #0x14]
	strh r5, [r4, #0xe]
	strh r5, [r4, #0x16]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r4, #0x1b]
	movs r0, #0x10
	strb r0, [r4, #0x1c]
	strb r1, [r4, #0x1f]
	subs r0, #0x11
	str r0, [r4, #0x20]
	movs r0, #0x80
	lsls r0, r0, #5
	str r0, [r4, #8]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	mov r0, r8
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08076B3C: .4byte sub_8076B58
_08076B40: .4byte sub_80779EC
_08076B44: .4byte 0x030000FC
_08076B48: .4byte 0x030000C4
_08076B4C: .4byte 0x03000004
_08076B50: .4byte 0x03000058
_08076B54: .4byte 0x000004EA

	thumb_func_start sub_8076B58
sub_8076B58: @ 0x08076B58
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	ldr r0, _08076CB0 @ =gCurTask
	ldr r0, [r0]
	ldrh r3, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r7, r3, r0
	adds r0, #0xcc
	adds r0, r3, r0
	str r0, [sp]
	ldr r1, _08076CB4 @ =0x030000B3
	adds r2, r3, r1
	ldrb r0, [r2]
	adds r0, #1
	movs r1, #3
	ands r0, r1
	strb r0, [r2]
	ldr r2, _08076CB8 @ =0x030000FC
	adds r0, r3, r2
	ldr r0, [r0]
	adds r0, #0x21
	ldrb r0, [r0]
	cmp r0, #0
	beq _08076C50
	ldr r1, _08076CBC @ =0x030000B1
	adds r0, r3, r1
	ldrb r0, [r0]
	cmp r0, #0
	beq _08076C50
	movs r2, #0
	mov sb, r2
	ldr r0, _08076CC0 @ =0x030000F4
	adds r0, r0, r3
	mov r8, r0
	movs r1, #5
	rsbs r1, r1, #0
	mov sl, r1
_08076BAC:
	mov r2, sb
	lsls r0, r2, #2
	add r0, r8
	ldr r5, [r0]
	adds r0, r5, #0
	bl sub_802C080
	cmp r0, #0
	bne _08076C42
	movs r2, #0
	ldr r0, [r5, #0x14]
	asrs r1, r0, #8
	movs r0, #0xb2
	lsls r0, r0, #2
	cmp r1, r0
	bgt _08076BD2
	ldr r0, _08076CC4 @ =0x000001C7
	cmp r1, r0
	bgt _08076BD4
_08076BD2:
	movs r2, #1
_08076BD4:
	adds r0, r5, #0
	adds r0, #0x4a
	movs r3, #0
	ldrsh r0, [r0, r3]
	cmp r0, #0
	bgt _08076BEC
	adds r0, r5, #0
	adds r0, #0x4c
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	ble _08076BEE
_08076BEC:
	movs r2, #0
_08076BEE:
	cmp r2, #0
	beq _08076C42
	mov r2, r8
	ldr r1, [r2]
	ldr r0, [r1, #4]
	movs r6, #0xc0
	lsls r6, r6, #0x10
	ands r0, r6
	cmp r0, #0
	beq _08076C16
	adds r0, r1, #0
	bl sub_8016F28
	mov r3, r8
	ldr r1, [r3]
	adds r1, #0x2c
	ldrb r0, [r1]
	mov r2, sl
	ands r0, r2
	strb r0, [r1]
_08076C16:
	adds r4, r7, #0
	adds r4, #0xf8
	ldr r1, [r4]
	ldr r0, [r1, #4]
	ands r0, r6
	cmp r0, #0
	beq _08076C3C
	adds r0, r1, #0
	bl sub_8016F28
	ldr r0, [r4]
	adds r0, #0x2c
	ldrb r1, [r0]
	mov r3, sl
	ands r1, r3
	strb r1, [r0]
	ldr r0, [r4]
	bl Player_8005380
_08076C3C:
	adds r0, r5, #0
	bl sub_80213F0
_08076C42:
	mov r0, sb
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov sb, r0
	cmp r0, #1
	bls _08076BAC
_08076C50:
	adds r0, r7, #0
	adds r0, #0xb2
	ldrb r6, [r0]
	cmp r6, #0
	beq _08076D0C
	movs r5, #0
	adds r7, #0xf4
	mov r8, r7
_08076C60:
	lsls r0, r5, #2
	add r0, r8
	ldr r4, [r0]
	ldr r0, [r4, #4]
	ldr r1, _08076CC8 @ =0xFFFEFFFF
	ands r0, r1
	str r0, [r4, #4]
	ldr r0, [sp]
	adds r1, r4, #0
	bl ResolvePlayerSpriteCollision
	adds r0, r4, #0
	bl sub_8016F28
	adds r0, r4, #0
	ldr r1, _08076CCC @ =Player_800E67C
	bl SetPlayerCallback
	adds r2, r4, #0
	adds r2, #0x2c
	ldrb r0, [r2]
	movs r3, #5
	rsbs r3, r3, #0
	adds r1, r3, #0
	ands r0, r1
	strb r0, [r2]
	ldr r0, [r4, #4]
	ldr r1, _08076CD0 @ =0xFFFFFEFF
	ands r0, r1
	str r0, [r4, #4]
	ldr r1, [r4, #0x10]
	ldr r0, _08076CD4 @ =0x000369FF
	cmp r1, r0
	ble _08076CDC
	adds r0, r1, #0
	ldr r1, _08076CD8 @ =0x0004A500
	cmp r0, r1
	ble _08076CDE
	adds r0, r1, #0
	b _08076CDE
	.align 2, 0
_08076CB0: .4byte gCurTask
_08076CB4: .4byte 0x030000B3
_08076CB8: .4byte 0x030000FC
_08076CBC: .4byte 0x030000B1
_08076CC0: .4byte 0x030000F4
_08076CC4: .4byte 0x000001C7
_08076CC8: .4byte 0xFFFEFFFF
_08076CCC: .4byte Player_800E67C
_08076CD0: .4byte 0xFFFFFEFF
_08076CD4: .4byte 0x000369FF
_08076CD8: .4byte 0x0004A500
_08076CDC:
	ldr r0, _08076D00 @ =0x00036A00
_08076CDE:
	str r0, [r4, #0x10]
	movs r0, #0
	strh r0, [r4, #0x18]
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #1
	bls _08076C60
	ldr r0, _08076D04 @ =0x00000236
	bl m4aSongNumStart
	ldr r0, _08076D08 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
	b _08076DB6
	.align 2, 0
_08076D00: .4byte 0x00036A00
_08076D04: .4byte 0x00000236
_08076D08: .4byte gCurTask
_08076D0C:
	adds r0, r7, #0
	bl sub_8076DD4
	ldr r4, _08076DC8 @ =gStageData
	ldrb r1, [r4, #6]
	adds r0, r7, #0
	bl sub_80772F0
	ldrb r0, [r4, #3]
	cmp r0, #5
	beq _08076D42
	ldrb r1, [r4, #6]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	ldr r1, _08076DCC @ =gPlayers
	adds r5, r0, r1
	adds r0, r5, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	lsls r1, r1, #0x1e
	lsrs r1, r1, #0x1e
	adds r0, r7, #0
	bl sub_80772F0
_08076D42:
	str r6, [r7, #4]
	str r6, [r7, #0x54]
	adds r0, r7, #0
	adds r0, #0xb3
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08076D62
	adds r0, r7, #0
	adds r0, #0xfc
	ldr r0, [r0]
	adds r0, #0x21
	ldrb r0, [r0]
	cmp r0, #0
	beq _08076DB6
_08076D62:
	adds r6, r7, #0
	adds r6, #0xcc
	adds r0, r7, #0
	adds r0, #0xc4
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r1, _08076DD0 @ =gCamera
	ldr r1, [r1]
	subs r0, r0, r1
	subs r0, #0xa0
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	movs r5, #0
	movs r0, #0xc8
	adds r0, r0, r7
	mov r8, r0
	adds r7, #4
_08076D84:
	strh r4, [r6, #0x10]
	lsls r1, r5, #2
	adds r1, r7, r1
	mov r2, r8
	ldr r0, [r2]
	ldr r1, [r1]
	adds r0, r0, r1
	asrs r0, r0, #8
	ldr r1, _08076DD0 @ =gCamera
	ldr r1, [r1, #4]
	subs r0, r0, r1
	strh r0, [r6, #0x12]
	adds r0, r6, #0
	bl DisplaySprite
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	lsls r0, r4, #0x10
	movs r3, #0x80
	lsls r3, r3, #0xd
	adds r0, r0, r3
	lsrs r4, r0, #0x10
	cmp r5, #0x14
	bls _08076D84
_08076DB6:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08076DC8: .4byte gStageData
_08076DCC: .4byte gPlayers
_08076DD0: .4byte gCamera

	thumb_func_start sub_8076DD4
sub_8076DD4: @ 0x08076DD4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	mov ip, r0
	movs r2, #0
	ldr r0, [r0, #0x58]
	cmp r0, #0
	beq _08076DF0
	movs r0, #0
	str r0, [sp]
	b _08076E0A
_08076DF0:
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0x14
	bhi _08076E0A
	lsls r0, r2, #2
	mov r1, ip
	adds r1, #0x58
	adds r1, r1, r0
	ldr r0, [r1]
	cmp r0, #0
	beq _08076DF0
	str r2, [sp]
_08076E0A:
	subs r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x12
	bls _08076E2E
	movs r3, #0
	mov r1, ip
	adds r1, #4
	movs r2, #0
_08076E1C:
	lsls r0, r3, #2
	adds r0, r1, r0
	str r2, [r0]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0x14
	bls _08076E1C
	b _0807715C
_08076E2E:
	mov r2, ip
	adds r2, #0xbc
	ldr r1, [sp]
	lsls r3, r1, #2
	mov r1, ip
	adds r1, #4
	adds r0, r1, r3
	ldr r0, [r0]
	str r0, [r2]
	mov r0, ip
	adds r0, #0xb5
	ldrb r4, [r0]
	movs r5, #0x58
	add r5, ip
	mov sb, r5
	str r1, [sp, #0x14]
	str r2, [sp, #0xc]
	mov r8, r3
	adds r6, r0, #0
	movs r7, #0xc0
	add r7, ip
	mov sl, r7
	adds r0, #2
	str r0, [sp, #4]
	adds r1, #0xb4
	str r1, [sp, #8]
	ldr r2, [sp]
	subs r2, #1
	str r2, [sp, #0x10]
	ldr r3, [sp]
	adds r3, #1
	str r3, [sp, #0x18]
	cmp r4, #0
	beq _08076EBC
	movs r3, #1
	movs r5, #0
	mov ip, r6
	ldr r7, [sp, #0x14]
	mov r4, sb
_08076E7C:
	mov r0, sl
	ldr r2, [r0]
	cmp r2, #0
	bge _08076E94
	mov r1, ip
	ldrb r0, [r1]
	lsls r1, r0, #2
	adds r0, r7, r1
	ldr r0, [r0]
	cmp r5, r0
	bge _08076EB8
	b _08076EA2
_08076E94:
	mov r1, ip
	ldrb r0, [r1]
	lsls r1, r0, #2
	adds r0, r7, r1
	ldr r0, [r0]
	cmp r5, r0
	ble _08076EB8
_08076EA2:
	adds r1, r4, r1
	ldr r0, [r1]
	adds r0, r0, r2
	str r0, [r1]
	ldrb r0, [r6]
	lsls r0, r0, #2
	adds r0, r4, r0
	ldr r0, [r0]
	adds r5, r5, r0
	cmp r3, #0
	bne _08076E7C
_08076EB8:
	movs r0, #0
	strb r0, [r6]
_08076EBC:
	mov r2, sb
	add r2, r8
	ldr r1, [r2]
	mov r3, sl
	ldr r0, [r3]
	adds r1, r1, r0
	str r1, [r2]
	ldr r2, [sp, #0x14]
	add r2, r8
	ldr r0, [r2]
	adds r0, r0, r1
	str r0, [r2]
	ldr r1, [sp, #4]
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	beq _08076F0C
	ldr r0, [r3]
	cmp r0, #0
	bge _08076EF8
	movs r0, #0
	ldrsb r0, [r1, r0]
	lsls r0, r0, #2
	add r0, sb
	ldr r0, [r0]
	cmp r0, #0
	bge _08076F0C
	movs r0, #0
	strb r0, [r1]
	b _08076F0C
_08076EF8:
	ldr r5, [sp, #4]
	movs r0, #0
	ldrsb r0, [r5, r0]
	lsls r0, r0, #2
	add r0, sb
	ldr r0, [r0]
	cmp r0, #0
	ble _08076F0C
	movs r0, #0
	strb r0, [r5]
_08076F0C:
	ldr r4, [sp, #8]
	ldrb r1, [r4]
	cmp r1, #0
	beq _08076F72
	ldr r7, [sp, #0xc]
	ldr r0, [r7]
	cmp r0, #0
	bge _08076F44
	ldr r0, [sp, #0x14]
	add r0, r8
	ldr r0, [r0]
	cmp r0, #0
	blt _08076F9C
	mov r2, sb
	add r2, r8
	ldr r0, [r2]
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	str r0, [r2]
	mov r1, sl
	ldr r0, [r1]
	rsbs r0, r0, #0
	str r0, [r1]
	ldrb r0, [r4]
	subs r0, #1
	strb r0, [r4]
	b _08076F9C
_08076F44:
	cmp r0, #0
	beq _08076F9C
	ldr r0, [sp, #0x14]
	add r0, r8
	ldr r0, [r0]
	cmp r0, #0
	bge _08076F9C
	mov r2, sb
	add r2, r8
	ldr r0, [r2]
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	str r0, [r2]
	mov r2, sl
	ldr r0, [r2]
	rsbs r0, r0, #0
	str r0, [r2]
	ldr r3, [sp, #8]
	ldrb r0, [r3]
	subs r0, #1
	strb r0, [r3]
	b _08076F9C
_08076F72:
	ldr r5, [sp, #0xc]
	ldr r0, [r5]
	cmp r0, #0
	bge _08076F86
	ldr r2, [sp, #0x14]
	add r2, r8
	ldr r0, [r2]
	cmp r0, #0
	blt _08076F9C
	b _08076F94
_08076F86:
	cmp r0, #0
	beq _08076F9C
	ldr r2, [sp, #0x14]
	add r2, r8
	ldr r0, [r2]
	cmp r0, #0
	bge _08076F9C
_08076F94:
	mov r0, sb
	add r0, r8
	str r1, [r0]
	str r1, [r2]
_08076F9C:
	ldr r4, [sp, #0x14]
	add r4, r8
	ldr r7, [sp, #0xc]
	ldr r0, [r7]
	ldr r1, [r4]
	subs r0, r0, r1
	str r0, [r7]
	mov r1, sl
	ldr r0, [r1]
	cmp r0, #0
	bge _08077088
	ldr r3, [sp]
	movs r0, #0x80
	lsls r0, r0, #2
	adds r1, r3, #0
	bl __divsi3
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	ldr r0, [r4]
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r5, r0, #1
	adds r6, r5, #0
	cmp r5, #0
	bge _08076FD2
	rsbs r6, r5, #0
_08076FD2:
	ldr r2, [sp, #0x10]
	lsls r0, r2, #0x18
	lsrs r2, r0, #0x18
	adds r4, r3, #0
	cmp r2, #0
	beq _0807701A
	ldr r7, _08077080 @ =gSineTable
	mov r8, r7
	movs r0, #0x80
	lsls r0, r0, #1
	mov sb, r0
_08076FE8:
	mov r1, sb
	adds r0, r4, r1
	lsls r0, r0, #1
	add r0, r8
	movs r7, #0
	ldrsh r0, [r0, r7]
	muls r0, r6, r0
	cmp r0, #0
	bge _08076FFE
	ldr r1, _08077084 @ =0x00003FFF
	adds r0, r0, r1
_08076FFE:
	asrs r1, r0, #0xe
	lsls r0, r2, #2
	ldr r7, [sp, #0x14]
	adds r0, r7, r0
	adds r1, r5, r1
	str r1, [r0]
	subs r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	adds r0, r4, r3
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r2, #0
	bne _08076FE8
_0807701A:
	movs r0, #0x14
	ldr r1, [sp]
	subs r0, r0, r1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	movs r0, #0x80
	lsls r0, r0, #2
	adds r1, r3, #0
	bl __divsi3
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	ldr r2, [sp, #0x18]
	lsls r0, r2, #0x18
	lsrs r2, r0, #0x18
	adds r4, r3, #0
	cmp r2, #0x13
	bls _08077040
	b _0807715C
_08077040:
	ldr r7, _08077080 @ =gSineTable
	mov r8, r7
	movs r0, #0x80
	lsls r0, r0, #1
	mov sb, r0
_0807704A:
	mov r1, sb
	adds r0, r4, r1
	lsls r0, r0, #1
	add r0, r8
	movs r7, #0
	ldrsh r0, [r0, r7]
	muls r0, r6, r0
	cmp r0, #0
	bge _08077060
	ldr r1, _08077084 @ =0x00003FFF
	adds r0, r0, r1
_08077060:
	asrs r1, r0, #0xe
	lsls r0, r2, #2
	ldr r7, [sp, #0x14]
	adds r0, r7, r0
	adds r1, r5, r1
	str r1, [r0]
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	adds r0, r4, r3
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r2, #0x13
	bls _0807704A
	b _0807715C
	.align 2, 0
_08077080: .4byte gSineTable
_08077084: .4byte 0x00003FFF
_08077088:
	ldr r3, [sp]
	movs r7, #0x80
	lsls r7, r7, #2
	adds r0, r7, #0
	adds r1, r3, #0
	bl __divsi3
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	ldr r0, [r4]
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r5, r0, #1
	adds r6, r5, #0
	cmp r5, #0
	bge _080770AA
	rsbs r6, r5, #0
_080770AA:
	ldr r1, [sp, #0x10]
	lsls r0, r1, #0x18
	lsrs r2, r0, #0x18
	subs r0, r7, r3
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r2, #0
	beq _080770F6
	ldr r7, _0807716C @ =gSineTable
	mov r8, r7
	movs r0, #0x80
	lsls r0, r0, #1
	mov sb, r0
_080770C4:
	mov r1, sb
	adds r0, r4, r1
	lsls r0, r0, #1
	add r0, r8
	movs r7, #0
	ldrsh r0, [r0, r7]
	muls r0, r6, r0
	cmp r0, #0
	bge _080770DA
	ldr r1, _08077170 @ =0x00003FFF
	adds r0, r0, r1
_080770DA:
	asrs r1, r0, #0xe
	lsls r0, r2, #2
	ldr r7, [sp, #0x14]
	adds r0, r7, r0
	adds r1, r5, r1
	str r1, [r0]
	subs r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	subs r0, r4, r3
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r2, #0
	bne _080770C4
_080770F6:
	movs r0, #0x14
	ldr r1, [sp]
	subs r0, r0, r1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	movs r4, #0x80
	lsls r4, r4, #2
	adds r0, r4, #0
	adds r1, r3, #0
	bl __divsi3
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	ldr r2, [sp, #0x18]
	lsls r0, r2, #0x18
	lsrs r2, r0, #0x18
	subs r4, r4, r3
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	cmp r2, #0x13
	bhi _0807715C
	ldr r7, _0807716C @ =gSineTable
	mov r8, r7
	movs r0, #0x80
	lsls r0, r0, #1
	mov sb, r0
_0807712A:
	mov r1, sb
	adds r0, r4, r1
	lsls r0, r0, #1
	add r0, r8
	movs r7, #0
	ldrsh r0, [r0, r7]
	muls r0, r6, r0
	cmp r0, #0
	bge _08077140
	ldr r1, _08077170 @ =0x00003FFF
	adds r0, r0, r1
_08077140:
	asrs r1, r0, #0xe
	lsls r0, r2, #2
	ldr r7, [sp, #0x14]
	adds r0, r7, r0
	adds r1, r5, r1
	str r1, [r0]
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	subs r0, r4, r3
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r2, #0x13
	bls _0807712A
_0807715C:
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807716C: .4byte gSineTable
_08077170: .4byte 0x00003FFF

	thumb_func_start sub_8077174
sub_8077174: @ 0x08077174
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	movs r1, #0
	mov sb, r1
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r0, r0, r1
	mov ip, r0
	movs r3, #0
	movs r4, #0
	movs r5, #0
	ldr r2, _080771DC @ =0x03000004
	adds r7, r1, r2
	adds r0, r2, #0
	adds r0, r0, r1
	mov r8, r0
	adds r2, #0x54
	adds r1, r1, r2
_0807719E:
	lsls r2, r3, #2
	adds r0, r7, r2
	ldr r0, [r0]
	cmp r0, #0
	bne _080771AE
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
_080771AE:
	adds r0, r1, r2
	ldr r0, [r0]
	mov r6, ip
	adds r6, #0x58
	cmp r0, #0
	bne _080771C0
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_080771C0:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0x14
	bls _0807719E
	cmp r4, #0x15
	bne _080771E0
	mov r1, ip
	adds r1, #0xb7
	movs r0, #0
	strb r0, [r1]
	movs r0, #1
	mov sb, r0
	b _0807722A
	.align 2, 0
_080771DC: .4byte 0x03000004
_080771E0:
	cmp r5, #0x15
	bne _0807722A
	movs r1, #0
	movs r3, #0
	movs r4, #0
	mov r5, r8
_080771EC:
	lsls r0, r3, #2
	adds r2, r5, r0
	ldr r0, [r2]
	cmp r0, #0
	bge _080771F8
	rsbs r0, r0, #0
_080771F8:
	cmp r0, r1
	ble _08077206
	ldr r1, [r2]
	cmp r1, #0
	bge _08077204
	rsbs r1, r1, #0
_08077204:
	adds r4, r3, #0
_08077206:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0x14
	bls _080771EC
	lsls r1, r4, #2
	mov r2, r8
	adds r0, r2, r1
	ldr r0, [r0]
	cmp r0, #0
	bge _08077222
	adds r1, r6, r1
	movs r0, #0x20
	b _08077228
_08077222:
	adds r1, r6, r1
	movs r0, #0x20
	rsbs r0, r0, #0
_08077228:
	str r0, [r1]
_0807722A:
	mov r0, sb
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_8077238
sub_8077238: @ 0x08077238
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov sb, r3
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	mov sl, r1
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r1, r1, r0
	mov ip, r1
	asrs r2, r2, #8
	ldr r1, _08077274 @ =0xFFFFFCA0
	adds r0, r2, r1
	cmp r0, #0
	bge _08077262
	adds r1, #0xf
	adds r0, r2, r1
_08077262:
	asrs r0, r0, #4
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge _08077278
	movs r4, #0
	b _0807727E
	.align 2, 0
_08077274: .4byte 0xFFFFFCA0
_08077278:
	cmp r0, #0x14
	ble _0807727E
	movs r4, #0x14
_0807727E:
	movs r1, #0
	lsls r2, r4, #0x18
	mov r3, ip
	adds r3, #0x58
	movs r0, #0xc0
	add r0, ip
	mov r8, r0
	movs r0, #0xb7
	add ip, r0
	asrs r6, r2, #0x18
	adds r5, r3, #0
	movs r7, #0
_08077296:
	lsls r0, r1, #0x18
	asrs r1, r0, #0x18
	cmp r1, r6
	beq _080772A4
	lsls r0, r1, #2
	adds r0, r5, r0
	str r7, [r0]
_080772A4:
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0x14
	ble _08077296
	mov r1, sl
	cmp r1, #0
	beq _080772CA
	asrs r0, r2, #0x16
	adds r0, r3, r0
	mov r1, sb
	adds r1, #1
	str r1, [r0]
	movs r0, #0x80
	rsbs r0, r0, #0
	mov r2, r8
	str r0, [r2]
	b _080772DC
_080772CA:
	asrs r0, r2, #0x16
	adds r0, r3, r0
	mov r2, sb
	rsbs r1, r2, #0
	adds r1, #1
	str r1, [r0]
	movs r0, #0x80
	mov r1, r8
	str r0, [r1]
_080772DC:
	mov r2, ip
	strb r4, [r2]
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80772F0
sub_80772F0: @ 0x080772F0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	adds r6, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	str r1, [sp, #4]
	movs r0, #0xcc
	adds r0, r0, r6
	mov r8, r0
	lsls r1, r1, #2
	adds r0, r6, #0
	adds r0, #0xf4
	adds r0, r0, r1
	ldr r4, [r0]
	movs r1, #0
	str r1, [sp, #0xc]
	movs r2, #0
	str r2, [sp, #0x10]
	adds r0, r6, #0
	adds r0, #0xc4
	ldr r0, [r0]
	asrs r0, r0, #8
	adds r7, r0, #0
	subs r7, #0xa0
	ldr r0, [r4, #0x10]
	asrs r1, r0, #8
	ldr r3, _0807734C @ =0xFFFFFCA0
	adds r0, r1, r3
	cmp r0, #0
	bge _08077338
	ldr r2, _08077350 @ =0xFFFFFCAF
	adds r0, r1, r2
_08077338:
	asrs r0, r0, #4
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	str r3, [sp, #8]
	asrs r0, r0, #0x18
	cmp r0, #0
	bge _08077354
	movs r0, #0
	str r0, [sp, #8]
	b _0807735C
	.align 2, 0
_0807734C: .4byte 0xFFFFFCA0
_08077350: .4byte 0xFFFFFCAF
_08077354:
	cmp r0, #0x14
	ble _0807735C
	movs r1, #0x14
	str r1, [sp, #8]
_0807735C:
	ldr r2, [sp, #8]
	lsls r3, r2, #0x18
	asrs r5, r3, #0x18
	lsls r0, r5, #4
	adds r7, r7, r0
	adds r0, r6, #0
	adds r0, #0xc8
	lsls r1, r5, #2
	adds r2, r6, #4
	adds r1, r2, r1
	ldr r0, [r0]
	ldr r1, [r1]
	adds r0, r0, r1
	asrs r0, r0, #8
	str r0, [sp, #0x14]
	ldr r1, [r4, #4]
	movs r0, #0x20
	ands r0, r1
	mov sb, r3
	mov sl, r2
	cmp r0, #0
	beq _080773C6
	ldr r0, [r4, #0x6c]
	cmp r0, r8
	bne _080773C6
	adds r0, r6, #0
	adds r0, #0xb4
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, r5
	bne _080773C6
	movs r0, #0x80
	lsls r0, r0, #9
	ands r1, r0
	cmp r1, #0
	beq _080773B4
	ldr r0, [r4, #0x14]
	ldr r3, _080773B0 @ =0xFFFFFC00
	adds r0, r0, r3
	b _080773BC
	.align 2, 0
_080773B0: .4byte 0xFFFFFC00
_080773B4:
	ldr r0, [r4, #0x14]
	movs r1, #0x80
	lsls r1, r1, #3
	adds r0, r0, r1
_080773BC:
	adds r1, r6, #0
	adds r1, #0xbc
	ldr r1, [r1]
	subs r0, r0, r1
	str r0, [r4, #0x14]
_080773C6:
	movs r2, #0x1a
	ldrsh r1, [r4, r2]
	cmp r1, #0
	bge _080773D0
	rsbs r1, r1, #0
_080773D0:
	movs r0, #0xc0
	lsls r0, r0, #2
	cmp r1, r0
	ble _080773DC
	movs r3, #1
	str r3, [sp, #0xc]
_080773DC:
	adds r0, r4, #0
	bl sub_802C0D4
	cmp r0, #0
	bne _0807742C
	str r0, [sp]
	mov r0, r8
	adds r1, r7, #0
	ldr r2, [sp, #0x14]
	adds r3, r4, #0
	bl sub_8020950
	adds r2, r0, #0
	movs r1, #0x80
	lsls r1, r1, #9
	adds r3, r2, #0
	ands r3, r1
	cmp r3, #0
	beq _08077412
	ldr r0, [r4, #4]
	ands r0, r1
	lsls r1, r2, #0x18
	asrs r1, r1, #0x10
	ldr r0, [r4, #0x14]
	adds r0, r0, r1
	str r0, [r4, #0x14]
	b _0807742C
_08077412:
	movs r0, #0x80
	lsls r0, r0, #0xa
	ands r0, r2
	cmp r0, #0
	beq _0807742C
	ldr r1, [r4, #0x14]
	ldr r7, _08077480 @ =0xFFFFFF00
	adds r1, r1, r7
	lsls r0, r2, #0x18
	asrs r0, r0, #0x10
	subs r1, r1, r0
	str r1, [r4, #0x14]
	strh r3, [r4, #0x1a]
_0807742C:
	ldr r0, _08077484 @ =gStageData
	ldr r1, [sp, #4]
	ldrb r0, [r0, #6]
	cmp r1, r0
	beq _08077438
	b _080776B8
_08077438:
	adds r0, r6, #0
	adds r0, #0xb6
	ldrb r0, [r0]
	cmp r0, #0
	beq _080774CC
	adds r0, r6, #0
	adds r0, #0xb7
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r7, r0, #0
	cmp r1, #0
	beq _080774E0
	movs r3, #0
	ldr r2, [r4, #4]
	movs r0, #0x20
	ands r0, r2
	cmp r0, #0
	beq _080774E0
	ldr r0, [r4, #0x6c]
	cmp r0, r8
	bne _080774E0
	adds r0, r6, #0
	adds r0, #0xfc
	ldr r1, [r0]
	adds r1, #0x23
	ldrb r1, [r1]
	adds r5, r0, #0
	cmp r1, #0
	bne _08077488
	movs r0, #0x80
	lsls r0, r0, #9
	ands r2, r0
	rsbs r0, r2, #0
	lsrs r3, r0, #0x1f
	b _08077494
	.align 2, 0
_08077480: .4byte 0xFFFFFF00
_08077484: .4byte gStageData
_08077488:
	movs r0, #0x80
	lsls r0, r0, #9
	ands r2, r0
	cmp r2, #0
	bne _08077494
	movs r3, #1
_08077494:
	movs r2, #0
	ldrsb r2, [r7, r2]
	subs r0, r2, #3
	mov r7, sb
	asrs r1, r7, #0x18
	cmp r0, r1
	bgt _080774E0
	adds r0, r2, #3
	cmp r0, r1
	blt _080774E0
	cmp r3, #0
	beq _080774E0
	ldr r0, [r5]
	adds r0, #0x21
	ldrb r0, [r0]
	cmp r0, #0
	beq _080774E0
	ldr r1, _080774C8 @ =sub_80068EC
	adds r0, r4, #0
	bl SetPlayerCallback
	movs r0, #0xfc
	lsls r0, r0, #8
	strh r0, [r4, #0x1a]
	b _080774E0
	.align 2, 0
_080774C8: .4byte sub_80068EC
_080774CC:
	ldr r0, [r4, #4]
	movs r1, #0x20
	ands r0, r1
	cmp r0, #0
	beq _080774E0
	ldr r0, [r4, #0x6c]
	cmp r0, r8
	bne _080774E0
	movs r0, #1
	str r0, [sp, #0x10]
_080774E0:
	ldr r1, [sp, #0x10]
	cmp r1, #0
	bne _080774E8
	b _08077646
_080774E8:
	adds r0, r6, #0
	adds r0, #0xb4
	movs r2, #0
	ldrsb r2, [r0, r2]
	mov r3, sb
	asrs r1, r3, #0x18
	adds r7, r0, #0
	cmp r2, r1
	bne _0807756E
	cmp r2, #0
	bne _08077500
	b _08077640
_08077500:
	cmp r2, #0x14
	bne _08077506
	b _08077640
_08077506:
	lsls r2, r2, #2
	subs r0, #0x5c
	adds r3, r0, r2
	ldr r0, [r3]
	cmp r0, #0
	bge _08077514
	rsbs r0, r0, #0
_08077514:
	cmp r0, #0x80
	ble _0807751A
	b _08077640
_0807751A:
	add r2, sl
	ldr r1, [r2]
	cmp r1, #0
	bge _08077524
	rsbs r1, r1, #0
_08077524:
	movs r0, #0xe0
	lsls r0, r0, #4
	cmp r1, r0
	ble _0807752E
	b _08077640
_0807752E:
	ldr r0, [r2]
	cmp r0, #0
	beq _0807753E
	adds r0, r6, #0
	adds r0, #0xc0
	ldr r0, [r0]
	rsbs r0, r0, #0
	b _0807763E
_0807753E:
	ldr r0, [r4, #4]
	movs r1, #0x80
	lsls r1, r1, #9
	ands r0, r1
	cmp r0, #0
	beq _0807755C
	ldr r0, _08077558 @ =0xFFFFFC00
	str r0, [r3]
	adds r1, r6, #0
	adds r1, #0xc0
	movs r0, #0x80
	str r0, [r1]
	b _08077640
	.align 2, 0
_08077558: .4byte 0xFFFFFC00
_0807755C:
	movs r0, #0x80
	lsls r0, r0, #3
	str r0, [r3]
	adds r1, r6, #0
	adds r1, #0xc0
	movs r0, #0x80
	rsbs r0, r0, #0
	str r0, [r1]
	b _08077640
_0807756E:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r2, r0
	beq _0807758E
	movs r0, #0
	ldrsb r0, [r7, r0]
	lsls r0, r0, #2
	add r0, sl
	ldr r1, [r0]
	cmp r1, #0
	bge _08077586
	rsbs r1, r1, #0
_08077586:
	movs r0, #0xe0
	lsls r0, r0, #4
	cmp r1, r0
	ble _08077594
_0807758E:
	ldr r0, [sp, #0xc]
	cmp r0, #0
	beq _08077640
_08077594:
	mov r1, sb
	asrs r0, r1, #0x18
	cmp r0, #0
	beq _08077640
	cmp r0, #0x14
	beq _08077640
	movs r1, #0
	adds r3, r6, #0
	adds r3, #0x58
	movs r2, #0xc0
	adds r2, r2, r6
	mov r8, r2
	adds r6, #0xb5
	mov ip, r6
	adds r5, r0, #0
	adds r2, r3, #0
	movs r6, #0
_080775B6:
	lsls r0, r1, #0x18
	asrs r1, r0, #0x18
	cmp r1, r5
	beq _080775C4
	lsls r0, r1, #2
	adds r0, r2, r0
	str r6, [r0]
_080775C4:
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0x14
	ble _080775B6
	ldr r0, [sp, #0xc]
	cmp r0, #0
	bne _080775EC
	mov r2, sb
	asrs r1, r2, #0x16
	mov r2, sl
	adds r0, r2, r1
	ldr r2, [r0]
	cmp r2, #0
	bge _080775E6
	rsbs r2, r2, #0
_080775E6:
	ldr r0, _08077600 @ =0x00000DFF
	cmp r2, r0
	ble _08077608
_080775EC:
	mov r1, sb
	asrs r0, r1, #0x16
	adds r2, r3, r0
	ldr r1, _08077604 @ =gUnknown_080D5998
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, #1
	str r0, [r2]
	b _08077610
	.align 2, 0
_08077600: .4byte 0x00000DFF
_08077604: .4byte gUnknown_080D5998
_08077608:
	adds r1, r3, r1
	movs r0, #0x80
	lsls r0, r0, #3
	str r0, [r1]
_08077610:
	mov r2, sp
	ldrb r0, [r2, #8]
	mov r2, ip
	strb r0, [r2]
	ldr r0, [r4, #4]
	movs r1, #0x80
	lsls r1, r1, #9
	ands r0, r1
	cmp r0, #0
	beq _08077638
	mov r1, sb
	asrs r0, r1, #0x16
	adds r0, r3, r0
	ldr r1, [r0]
	rsbs r1, r1, #0
	str r1, [r0]
	movs r0, #0x80
	mov r2, r8
	str r0, [r2]
	b _08077640
_08077638:
	movs r0, #0x80
	rsbs r0, r0, #0
	mov r3, r8
_0807763E:
	str r0, [r3]
_08077640:
	mov r0, sp
	ldrb r0, [r0, #8]
	b _080776B6
_08077646:
	adds r0, r6, #0
	adds r0, #0xb4
	movs r2, #0
	ldrsb r2, [r0, r2]
	movs r1, #1
	rsbs r1, r1, #0
	adds r7, r0, #0
	cmp r2, r1
	beq _080776B4
	movs r0, #0
	ldrsb r0, [r7, r0]
	lsls r0, r0, #2
	add r0, sl
	ldr r0, [r0]
	cmp r0, #0
	beq _080776B4
	movs r1, #0
	adds r3, r6, #0
	adds r3, #0x58
	adds r5, r7, #0
	adds r2, r3, #0
	movs r6, #0
_08077672:
	lsls r0, r1, #0x18
	asrs r1, r0, #0x18
	movs r0, #0
	ldrsb r0, [r5, r0]
	cmp r1, r0
	beq _08077684
	lsls r0, r1, #2
	adds r0, r2, r0
	str r6, [r0]
_08077684:
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0x14
	ble _08077672
	movs r0, #0
	ldrsb r0, [r7, r0]
	lsls r0, r0, #2
	adds r2, r3, r0
	ldr r0, [r2]
	cmp r0, #0
	bne _080776B4
	ldr r0, [r4, #4]
	movs r1, #0x80
	lsls r1, r1, #9
	ands r0, r1
	cmp r0, #0
	beq _080776B0
	movs r0, #0x20
	rsbs r0, r0, #0
	b _080776B2
_080776B0:
	movs r0, #0x20
_080776B2:
	str r0, [r2]
_080776B4:
	movs r0, #0xff
_080776B6:
	strb r0, [r7]
_080776B8:
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80776C8
sub_80776C8: @ 0x080776C8
	push {r4, r5, lr}
	ldr r4, _080776E8 @ =gCurTask
	ldr r2, [r4]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	ldr r0, [r5, #0x1c]
	ldrb r0, [r0]
	cmp r0, #3
	bne _080776EC
	adds r0, r2, #0
	bl TaskDestroy
	b _0807770C
	.align 2, 0
_080776E8: .4byte gCurTask
_080776EC:
	bl sub_8079FFC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08077700
	ldr r1, [r4]
	ldr r0, _080776FC @ =sub_8077718
	b _08077704
	.align 2, 0
_080776FC: .4byte sub_8077718
_08077700:
	ldr r1, [r4]
	ldr r0, _08077714 @ =sub_8077764
_08077704:
	str r0, [r1, #8]
	adds r0, r5, #0
	bl sub_8076328
_0807770C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08077714: .4byte sub_8077764

	thumb_func_start sub_8077718
sub_8077718: @ 0x08077718
	push {r4, r5, lr}
	ldr r5, _08077738 @ =gCurTask
	ldr r2, [r5]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, [r4, #0x1c]
	ldrb r0, [r0]
	cmp r0, #3
	bne _0807773C
	adds r0, r2, #0
	bl TaskDestroy
	b _0807775A
	.align 2, 0
_08077738: .4byte gCurTask
_0807773C:
	adds r0, r4, #0
	bl sub_8076328
	ldr r0, [r4, #0x1c]
	ldrb r0, [r0]
	cmp r0, #2
	bne _0807775A
	bl sub_807A074
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807775A
	ldr r1, [r5]
	ldr r0, _08077760 @ =sub_8077764
	str r0, [r1, #8]
_0807775A:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08077760: .4byte sub_8077764

	thumb_func_start sub_8077764
sub_8077764: @ 0x08077764
	push {r4, r5, lr}
	ldr r5, _08077784 @ =gCurTask
	ldr r2, [r5]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, [r4, #0x1c]
	ldrb r0, [r0]
	cmp r0, #3
	bne _08077788
	adds r0, r2, #0
	bl TaskDestroy
	b _080777A0
	.align 2, 0
_08077784: .4byte gCurTask
_08077788:
	adds r0, r4, #0
	bl sub_8076328
	ldr r0, [r4, #0x1c]
	ldrb r0, [r0]
	cmp r0, #2
	bne _080777A0
	movs r0, #0
	strh r0, [r4, #0x30]
	ldr r1, [r5]
	ldr r0, _080777A8 @ =sub_8075064
	str r0, [r1, #8]
_080777A0:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080777A8: .4byte sub_8075064

	thumb_func_start sub_80777AC
sub_80777AC: @ 0x080777AC
	push {r4, lr}
	ldr r0, _08077808 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	bl sub_807A074
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080777FC
	movs r1, #0
	ldr r3, _0807780C @ =gPlayers
	ldr r2, _08077810 @ =0x000001C1
_080777CA:
	lsls r0, r1, #0x10
	asrs r1, r0, #0x10
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r3
	ldr r0, [r0, #0x14]
	asrs r0, r0, #8
	cmp r0, r2
	ble _08077802
	adds r0, r1, #1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	ble _080777CA
	movs r0, #0x34
	bl sub_80299D4
	ldr r0, _08077808 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08077814 @ =sub_8075204
	str r0, [r1, #8]
_080777FC:
	adds r0, r4, #0
	bl sub_8076328
_08077802:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08077808: .4byte gCurTask
_0807780C: .4byte gPlayers
_08077810: .4byte 0x000001C1
_08077814: .4byte sub_8075204

	thumb_func_start sub_8077818
sub_8077818: @ 0x08077818
	bx lr
	.align 2, 0

	thumb_func_start sub_807781C
sub_807781C: @ 0x0807781C
	bx lr
	.align 2, 0

	thumb_func_start sub_8077820
sub_8077820: @ 0x08077820
	push {lr}
	ldr r0, _0807784C @ =gCurTask
	ldr r0, [r0]
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	ldr r2, [r0, #0x50]
	ldr r1, [r2, #4]
	movs r3, #0x80
	lsls r3, r3, #0x14
	orrs r1, r3
	str r1, [r2, #4]
	ldr r2, [r0, #0x54]
	ldr r1, [r2, #4]
	orrs r1, r3
	str r1, [r2, #4]
	bl sub_8076328
	pop {r0}
	bx r0
	.align 2, 0
_0807784C: .4byte gCurTask

	thumb_func_start sub_8077850
sub_8077850: @ 0x08077850
	push {r4, lr}
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	ldr r0, [r4, #0x48]
	bl VramFree
	ldr r0, [r4, #0x4c]
	bl VramFree
	ldr r0, [r4, #0x58]
	bl VramFree
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8077874
sub_8077874: @ 0x08077874
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r4, #0
	adds r6, #0x58
	adds r0, r5, #0
	bl sub_802C080
	cmp r0, #0
	bne _080778C0
	adds r0, r5, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	movs r1, #0x1c
	ands r1, r0
	cmp r1, #4
	beq _080778A0
	cmp r1, #8
	beq _080778A0
	cmp r1, #0x10
	bne _080778C0
_080778A0:
	adds r0, r4, #0
	adds r0, #0x21
	ldrb r0, [r0]
	cmp r0, #0
	beq _080778C0
	ldr r1, [r4]
	ldr r0, [r4, #0x14]
	adds r1, r1, r0
	asrs r1, r1, #8
	ldr r2, [r4, #4]
	asrs r2, r2, #8
	str r5, [sp]
	adds r0, r6, #0
	movs r3, #0
	bl sub_8020CE0
_080778C0:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
_080778C8:
	.byte 0x70, 0x47, 0x00, 0x00, 0x70, 0x47, 0x00, 0x00

	thumb_func_start sub_80778D0
sub_80778D0: @ 0x080778D0
	push {lr}
	adds r2, r0, #0
	adds r3, r2, #0
	adds r3, #0x22
	ldrb r0, [r3]
	cmp r0, #0
	beq _080778F4
	ldr r0, [r2, #0x14]
	ldr r1, [r2, #8]
	adds r0, r0, r1
	str r0, [r2, #0x14]
	ldr r1, _080778F0 @ =0xFFFF7400
	cmp r0, r1
	bge _0807790E
	movs r0, #0
	b _08077906
	.align 2, 0
_080778F0: .4byte 0xFFFF7400
_080778F4:
	ldr r0, [r2, #0x14]
	ldr r1, [r2, #8]
	adds r0, r0, r1
	str r0, [r2, #0x14]
	movs r1, #0x8c
	lsls r1, r1, #8
	cmp r0, r1
	ble _0807790E
	movs r0, #1
_08077906:
	strb r0, [r3]
	ldr r0, [r2, #8]
	rsbs r0, r0, #0
	str r0, [r2, #8]
_0807790E:
	movs r0, #0
	str r0, [r2, #0x18]
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8077918
sub_8077918: @ 0x08077918
	push {lr}
	adds r2, r0, #0
	adds r0, #0x22
	ldrb r0, [r0]
	cmp r0, #0
	beq _0807793C
	ldr r0, _08077938 @ =gUnknown_080D5954
	adds r1, r2, #0
	adds r1, #0x21
	ldrb r1, [r1]
	lsls r1, r1, #2
	adds r1, r1, r0
	ldr r0, [r1]
	rsbs r0, r0, #0
	b _0807794A
	.align 2, 0
_08077938: .4byte gUnknown_080D5954
_0807793C:
	ldr r0, _08077950 @ =gUnknown_080D5954
	adds r1, r2, #0
	adds r1, #0x21
	ldrb r1, [r1]
	lsls r1, r1, #2
	adds r1, r1, r0
	ldr r0, [r1]
_0807794A:
	str r0, [r2, #8]
	pop {r0}
	bx r0
	.align 2, 0
_08077950: .4byte gUnknown_080D5954

	thumb_func_start sub_8077954
sub_8077954: @ 0x08077954
	lsls r1, r1, #0x18
	adds r0, #0x80
	ldr r2, _08077970 @ =gUnknown_080D5904
	lsrs r1, r1, #0x16
	adds r1, r1, r2
	ldrh r2, [r1]
	strh r2, [r0, #0xc]
	ldrh r1, [r1, #2]
	strb r1, [r0, #0x1a]
	ldr r1, _08077974 @ =0x0000FFFF
	strh r1, [r0, #0x18]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	bx lr
	.align 2, 0
_08077970: .4byte gUnknown_080D5904
_08077974: .4byte 0x0000FFFF

	thumb_func_start sub_8077978
sub_8077978: @ 0x08077978
	bx lr
	.align 2, 0
_0807797C:
	.byte 0x70, 0x47, 0x00, 0x00
	.byte 0x70, 0x47, 0x00, 0x00

	thumb_func_start sub_8077984
sub_8077984: @ 0x08077984
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	adds r6, r7, #0
	adds r6, #0xcc
	adds r0, #0xc4
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r1, _080779E8 @ =gCamera
	ldr r1, [r1]
	subs r0, r0, r1
	subs r0, #0xa0
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	movs r5, #0
	movs r0, #0xc8
	adds r0, r0, r7
	mov r8, r0
_080779AA:
	strh r4, [r6, #0x10]
	lsls r0, r5, #2
	adds r1, r7, #4
	adds r1, r1, r0
	mov r2, r8
	ldr r0, [r2]
	ldr r1, [r1]
	adds r0, r0, r1
	asrs r0, r0, #8
	ldr r1, _080779E8 @ =gCamera
	ldr r1, [r1, #4]
	subs r0, r0, r1
	strh r0, [r6, #0x12]
	adds r0, r6, #0
	bl DisplaySprite
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	lsls r0, r4, #0x10
	movs r1, #0x80
	lsls r1, r1, #0xd
	adds r0, r0, r1
	lsrs r4, r0, #0x10
	cmp r5, #0x14
	bls _080779AA
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080779E8: .4byte gCamera

	thumb_func_start sub_80779EC
sub_80779EC: @ 0x080779EC
	push {lr}
	ldrh r0, [r0, #6]
	ldr r1, _08077A00 @ =0x030000CC
	adds r0, r0, r1
	ldr r0, [r0]
	bl VramFree
	pop {r0}
	bx r0
	.align 2, 0
_08077A00: .4byte 0x030000CC

	thumb_func_start sub_8077A04
sub_8077A04: @ 0x08077A04
	ldrh r0, [r0, #6]
	ldr r2, _08077A10 @ =0x030000B6
	adds r0, r0, r2
	strb r1, [r0]
	bx lr
	.align 2, 0
_08077A10: .4byte 0x030000B6

	thumb_func_start sub_8077A14
sub_8077A14: @ 0x08077A14
	ldrh r0, [r0, #6]
	ldr r2, _08077A20 @ =0x030000B8
	adds r0, r0, r2
	strb r1, [r0]
	bx lr
	.align 2, 0
_08077A20: .4byte 0x030000B8
_08077A24:
	.byte 0x70, 0x47, 0x00, 0x00

	thumb_func_start sub_8077A28
sub_8077A28: @ 0x08077A28
	adds r2, r0, #0
	adds r2, #0x2b
	movs r1, #0
	strb r1, [r2]
	movs r2, #1
	movs r1, #1
	strh r1, [r0, #0x2c]
	adds r0, #0xd4
	strb r2, [r0]
	bx lr

	thumb_func_start sub_8077A3C
sub_8077A3C: @ 0x08077A3C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	str r0, [sp, #8]
	adds r4, r1, #0
	adds r5, r2, #0
	str r3, [sp, #0xc]
	movs r3, #1
	add r0, sp, #4
	strb r3, [r0]
	ldr r0, _08077A98 @ =sub_8077C08
	movs r2, #0x84
	lsls r2, r2, #6
	ldr r1, _08077A9C @ =sub_8078A64
	str r1, [sp]
	movs r1, #0x84
	movs r3, #0
	bl TaskCreate
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r1, r0
	ldr r0, [sp, #8]
	str r0, [r6, #0x20]
	cmp r0, #0
	beq _08077AA0
	add r0, sp, #8
	movs r2, #0x98
	lsls r2, r2, #3
	add r1, sp, #4
	str r1, [sp]
	movs r1, #1
	movs r3, #0
	bl sub_807A3D8
	ldr r0, [r0, #0x14]
	adds r1, r0, #0
	adds r1, #0x10
	str r1, [r6, #8]
	adds r0, #0x12
	str r0, [r6, #0xc]
	b _08077AA4
	.align 2, 0
_08077A98: .4byte sub_8077C08
_08077A9C: .4byte sub_8078A64
_08077AA0:
	str r4, [r6, #8]
	str r5, [r6, #0xc]
_08077AA4:
	ldr r2, _08077BF8 @ =gPseudoRandom
	ldr r0, [r2]
	ldr r5, _08077BFC @ =0x00196225
	muls r0, r5, r0
	ldr r4, _08077C00 @ =0x3C6EF35F
	adds r0, r0, r4
	str r0, [r2]
	lsrs r0, r0, #8
	movs r1, #0x7f
	ands r0, r1
	movs r3, #1
	cmp r0, #0x3b
	bhi _08077AC0
	movs r3, #0xff
_08077AC0:
	add r0, sp, #4
	movs r1, #0
	strb r1, [r0]
	lsls r0, r3, #0x18
	adds r2, r6, #0
	adds r2, #0x54
	str r2, [sp, #0x10]
	adds r7, r6, #4
	str r7, [sp, #0x14]
	add r3, sp, #4
	adds r1, r6, #0
	adds r1, #0x10
	str r1, [sp, #0x18]
	ldr r2, _08077BF8 @ =gPseudoRandom
	mov ip, r2
	mov sl, r5
	mov sb, r4
	movs r7, #0x1f
	mov r8, r7
	asrs r5, r0, #0x18
	adds r4, r6, #0
	adds r4, #0x18
_08077AEC:
	ldrb r1, [r3]
	lsls r1, r1, #2
	ldr r0, [sp, #0x18]
	adds r1, r0, r1
	mov r2, ip
	ldr r0, [r2]
	mov r2, sl
	muls r2, r0, r2
	add r2, sb
	mov r7, ip
	str r2, [r7]
	lsrs r0, r2, #8
	mov r7, r8
	ands r0, r7
	muls r0, r5, r0
	str r0, [r1]
	ldrb r1, [r3]
	lsls r1, r1, #2
	adds r1, r4, r1
	mov r0, sl
	muls r0, r2, r0
	add r0, sb
	mov r2, ip
	str r0, [r2]
	lsrs r0, r0, #8
	ands r0, r7
	muls r0, r5, r0
	str r0, [r1]
	ldrb r1, [r3]
	lsls r1, r1, #2
	ldr r7, [sp, #0x18]
	adds r1, r7, r1
	ldr r0, [r1]
	lsls r0, r0, #8
	str r0, [r1]
	ldrb r1, [r3]
	lsls r1, r1, #2
	adds r1, r4, r1
	ldr r0, [r1]
	lsls r0, r0, #8
	str r0, [r1]
	ldrb r0, [r3]
	adds r0, #1
	strb r0, [r3]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bls _08077AEC
	ldr r0, [sp, #0x3c]
	str r0, [r6]
	ldr r0, _08077BF8 @ =gPseudoRandom
	ldr r1, [r0]
	ldr r0, _08077BFC @ =0x00196225
	muls r0, r1, r0
	ldr r1, _08077C00 @ =0x3C6EF35F
	adds r0, r0, r1
	ldr r2, _08077BF8 @ =gPseudoRandom
	str r0, [r2]
	lsrs r0, r0, #8
	movs r1, #3
	ands r0, r1
	add r2, sp, #4
	movs r1, #0
	strb r1, [r2]
	adds r4, r2, #0
	ldr r1, _08077C04 @ =gUnknown_080D59FC
	lsls r0, r0, #3
	adds r7, r0, r1
	adds r1, #4
	adds r0, r0, r1
	mov r8, r0
	movs r0, #0
	mov sb, r0
	movs r5, #0
_08077B80:
	ldrb r0, [r4]
	ldr r1, [sp, #0x10]
	cmp r0, #0
	beq _08077B8C
	adds r1, r6, #0
	adds r1, #0x24
_08077B8C:
	ldr r2, [sp, #0xc]
	str r2, [r1]
	mov r2, r8
	ldr r0, [r2]
	lsls r0, r0, #5
	ldr r2, [sp, #0xc]
	adds r2, r2, r0
	str r2, [sp, #0xc]
	ldrh r0, [r7]
	strh r0, [r1, #0xc]
	ldrb r0, [r7, #2]
	strb r0, [r1, #0x1a]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	strh r5, [r1, #0x10]
	strh r5, [r1, #0x12]
	movs r0, #0x90
	lsls r0, r0, #3
	strh r0, [r1, #0x14]
	strh r5, [r1, #0xe]
	strh r5, [r1, #0x16]
	movs r0, #0x10
	strb r0, [r1, #0x1c]
	mov r0, sb
	strb r0, [r1, #0x1f]
	movs r0, #0x80
	lsls r0, r0, #5
	str r0, [r1, #8]
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r1, #0x20]
	adds r0, r1, #0
	bl UpdateSpriteAnimation
	ldrb r0, [r4]
	ldr r1, [sp, #0x14]
	adds r0, r1, r0
	movs r1, #1
	strb r1, [r0]
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bls _08077B80
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08077BF8: .4byte gPseudoRandom
_08077BFC: .4byte 0x00196225
_08077C00: .4byte 0x3C6EF35F
_08077C04: .4byte gUnknown_080D59FC

	thumb_func_start sub_8077C08
sub_8077C08: @ 0x08077C08
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	movs r6, #1
	add r0, sp, #4
	strb r6, [r0]
	movs r0, #0
	str r0, [sp, #8]
	ldr r0, _08077C58 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r0, r0, r1
	mov r8, r0
	ldr r0, [r0, #0x20]
	cmp r0, #0
	beq _08077C60
	ldr r2, _08077C5C @ =0x03000020
	adds r0, r1, r2
	movs r2, #0x98
	lsls r2, r2, #3
	add r1, sp, #4
	str r1, [sp]
	movs r1, #1
	movs r3, #0
	bl sub_807A3D8
	ldr r0, [r0, #0x14]
	movs r2, #0x10
	ldrsh r4, [r0, r2]
	movs r1, #0x12
	ldrsh r0, [r0, r1]
	adds r5, r0, #0
	adds r5, #0x20
	b _08077C6E
	.align 2, 0
_08077C58: .4byte gCurTask
_08077C5C: .4byte 0x03000020
_08077C60:
	mov r2, r8
	ldr r0, [r2, #8]
	ldr r4, [r0]
	ldr r0, [r2, #0xc]
	ldr r5, [r0]
	asrs r4, r4, #8
	asrs r5, r5, #8
_08077C6E:
	add r1, sp, #4
	movs r0, #0
	strb r0, [r1]
	mov r0, r8
	adds r0, #0x54
	str r0, [sp, #0x10]
	movs r1, #4
	add r1, r8
	mov sb, r1
	add r7, sp, #4
	mov r2, sp
	strh r4, [r2, #0xc]
	ldr r0, _08077C90 @ =gPseudoRandom
	mov sl, r0
_08077C8A:
	ldr r4, [sp, #0x10]
	b _08077D02
	.align 2, 0
_08077C90: .4byte gPseudoRandom
_08077C94:
	mov r2, sl
	ldr r1, [r2]
	ldr r0, _08077D34 @ =0x00196225
	muls r0, r1, r0
	ldr r1, _08077D38 @ =0x3C6EF35F
	adds r0, r0, r1
	str r0, [r2]
	ldrb r1, [r7]
	lsls r1, r1, #2
	mov r0, r8
	adds r0, #0x10
	adds r0, r0, r1
	ldr r0, [r0]
	asrs r0, r0, #8
	mov r2, sp
	ldrh r2, [r2, #0xc]
	adds r0, r2, r0
	strh r0, [r4, #0x10]
	ldrb r1, [r7]
	lsls r1, r1, #2
	mov r0, r8
	adds r0, #0x18
	adds r0, r0, r1
	ldr r0, [r0]
	asrs r0, r0, #8
	adds r0, r5, r0
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r6, r0, #0
	adds r0, r4, #0
	bl DisplaySprite
	cmp r6, #0
	bne _08077CE6
	ldr r0, [sp, #8]
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #8]
_08077CE6:
	ldrb r0, [r7]
	add r0, sb
	strb r6, [r0]
	ldrb r0, [r7]
	adds r0, #1
	strb r0, [r7]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _08077D0C
	cmp r0, #0
	beq _08077C8A
	mov r4, r8
	adds r4, #0x24
_08077D02:
	ldrb r0, [r7]
	add r0, sb
	ldrb r0, [r0]
	cmp r0, #0
	bne _08077C94
_08077D0C:
	ldr r0, [sp, #8]
	cmp r0, #2
	bne _08077D22
	mov r2, r8
	ldr r1, [r2]
	movs r0, #0
	strb r0, [r1]
	ldr r0, _08077D3C @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
_08077D22:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08077D34: .4byte 0x00196225
_08077D38: .4byte 0x3C6EF35F
_08077D3C: .4byte gCurTask

	thumb_func_start sub_8077D40
sub_8077D40: @ 0x08077D40
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	adds r7, r0, #0
	movs r0, #0
	strb r0, [r7, #8]
	movs r0, #1
	str r0, [r7]
	ldr r2, _08077E60 @ =gPseudoRandom
	ldr r0, [r2]
	ldr r4, _08077E64 @ =0x00196225
	muls r0, r4, r0
	ldr r3, _08077E68 @ =0x3C6EF35F
	adds r0, r0, r3
	str r0, [r2]
	lsrs r0, r0, #8
	movs r1, #0x7f
	ands r0, r1
	movs r1, #1
	cmp r0, #0x3b
	bhi _08077D72
	movs r1, #0xff
_08077D72:
	movs r6, #0
	adds r0, r7, #0
	adds r0, #0x14
	str r0, [sp]
	lsls r1, r1, #0x18
	str r1, [sp, #0xc]
	adds r1, r7, #0
	adds r1, #0x1c
	str r1, [sp, #4]
	adds r0, #0x10
	str r0, [sp, #8]
	adds r1, #0x10
	str r1, [sp, #0x10]
	mov sl, r2
	mov sb, r4
	mov r8, r3
	movs r2, #0x1f
	mov ip, r2
	ldr r3, [sp, #0xc]
	asrs r5, r3, #0x18
_08077D9A:
	lsls r3, r6, #2
	ldr r0, [sp]
	adds r4, r0, r3
	mov r1, sl
	ldr r0, [r1]
	mov r1, sb
	muls r1, r0, r1
	add r1, r8
	lsrs r0, r1, #8
	mov r2, ip
	ands r0, r2
	muls r0, r5, r0
	str r0, [r4]
	ldr r0, [sp, #4]
	adds r2, r0, r3
	mov r0, sb
	muls r0, r1, r0
	add r0, r8
	mov r1, sl
	str r0, [r1]
	lsrs r0, r0, #8
	mov r1, ip
	ands r0, r1
	muls r0, r5, r0
	str r0, [r2]
	ldr r0, [r4]
	lsls r0, r0, #8
	str r0, [r4]
	ldr r0, [r2]
	lsls r0, r0, #8
	str r0, [r2]
	ldr r0, [sp, #8]
	adds r1, r0, r3
	ldr r0, [r4]
	str r0, [r1]
	ldr r1, [sp, #0x10]
	adds r3, r1, r3
	ldr r0, [r2]
	str r0, [r3]
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #1
	bls _08077D9A
	ldr r5, _08077E60 @ =gPseudoRandom
	ldr r0, [r5]
	ldr r6, _08077E64 @ =0x00196225
	adds r2, r0, #0
	muls r2, r6, r2
	ldr r4, _08077E68 @ =0x3C6EF35F
	adds r2, r2, r4
	lsrs r0, r2, #8
	movs r1, #0xf
	ands r0, r1
	ldr r3, [sp, #0xc]
	asrs r1, r3, #0x18
	adds r3, r0, #0
	muls r3, r1, r3
	adds r0, r2, #0
	muls r0, r6, r0
	adds r0, r0, r4
	str r0, [r5]
	lsrs r0, r0, #8
	movs r1, #0x3f
	ands r0, r1
	rsbs r0, r0, #0
	lsls r3, r3, #5
	str r3, [r7, #0x34]
	lsls r0, r0, #5
	str r0, [r7, #0x38]
	movs r6, #0
	mov r8, r5
	ldr r5, _08077E6C @ =gUnknown_080D5A44
	movs r0, #0
	mov sb, r0
	movs r4, #0
_08077E32:
	mov r2, r8
	ldr r1, [r2]
	ldr r0, _08077E64 @ =0x00196225
	muls r0, r1, r0
	ldr r3, _08077E68 @ =0x3C6EF35F
	adds r0, r0, r3
	str r0, [r2]
	lsrs r2, r0, #8
	movs r0, #3
	ands r2, r0
	cmp r2, #2
	bls _08077E4C
	movs r2, #2
_08077E4C:
	ldr r0, [r7, #0x40]
	cmp r0, #0
	bne _08077E70
	adds r3, r7, #0
	adds r3, #0xd4
	cmp r6, #0
	beq _08077E78
	subs r3, #0x30
	b _08077E78
	.align 2, 0
_08077E60: .4byte gPseudoRandom
_08077E64: .4byte 0x00196225
_08077E68: .4byte 0x3C6EF35F
_08077E6C: .4byte gUnknown_080D5A44
_08077E70:
	adds r3, r7, #0
	adds r3, #0xa4
	cmp r6, #0
	bne _08077ECA
_08077E78:
	ldr r0, [r7, #0x3c]
	str r0, [r3]
	lsls r2, r2, #3
	adds r0, r5, #4
	adds r0, r2, r0
	ldr r1, [r0]
	lsls r1, r1, #5
	ldr r0, [r7, #0x3c]
	adds r0, r0, r1
	str r0, [r7, #0x3c]
	adds r2, r2, r5
	ldrh r0, [r2]
	strh r0, [r3, #0xc]
	ldrb r0, [r2, #2]
	strb r0, [r3, #0x1a]
	movs r0, #0xff
	strb r0, [r3, #0x1b]
	strh r4, [r3, #0x10]
	strh r4, [r3, #0x12]
	movs r0, #0x40
	strh r0, [r3, #0x14]
	strh r4, [r3, #0xe]
	strh r4, [r3, #0x16]
	movs r0, #0x10
	strb r0, [r3, #0x1c]
	mov r0, sb
	strb r0, [r3, #0x1f]
	movs r0, #0x80
	lsls r0, r0, #5
	str r0, [r3, #8]
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r3, #0x20]
	adds r0, r3, #0
	bl UpdateSpriteAnimation
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #1
	bls _08077E32
_08077ECA:
	movs r6, #0
	ldr r1, _08077F04 @ =gPseudoRandom
	mov r8, r1
	ldr r5, _08077F08 @ =gUnknown_080D5A14
	movs r2, #0
	mov sb, r2
	movs r4, #0
_08077ED8:
	mov r3, r8
	ldr r1, [r3]
	ldr r0, _08077F0C @ =0x00196225
	muls r0, r1, r0
	ldr r1, _08077F10 @ =0x3C6EF35F
	adds r0, r0, r1
	str r0, [r3]
	lsrs r2, r0, #8
	movs r0, #7
	ands r2, r0
	cmp r2, #5
	bls _08077EF2
	movs r2, #5
_08077EF2:
	ldr r0, [r7, #0x40]
	cmp r0, #0
	bne _08077F14
	adds r3, r7, #0
	adds r3, #0x74
	cmp r6, #0
	beq _08077F1C
	subs r3, #0x30
	b _08077F1C
	.align 2, 0
_08077F04: .4byte gPseudoRandom
_08077F08: .4byte gUnknown_080D5A14
_08077F0C: .4byte 0x00196225
_08077F10: .4byte 0x3C6EF35F
_08077F14:
	adds r3, r7, #0
	adds r3, #0x44
	cmp r6, #0
	bne _08077F70
_08077F1C:
	ldr r0, [r7, #0x3c]
	str r0, [r3]
	lsls r2, r2, #3
	adds r0, r5, #4
	adds r0, r2, r0
	ldr r1, [r0]
	lsls r1, r1, #5
	ldr r0, [r7, #0x3c]
	adds r0, r0, r1
	str r0, [r7, #0x3c]
	adds r2, r2, r5
	ldrh r0, [r2]
	strh r0, [r3, #0xc]
	ldrb r0, [r2, #2]
	strb r0, [r3, #0x1a]
	movs r0, #0xff
	strb r0, [r3, #0x1b]
	strh r4, [r3, #0x10]
	strh r4, [r3, #0x12]
	strh r4, [r3, #0x14]
	strh r4, [r3, #0xe]
	strh r4, [r3, #0x16]
	movs r0, #0x10
	strb r0, [r3, #0x1c]
	mov r2, sb
	strb r2, [r3, #0x1f]
	movs r0, #0x80
	lsls r0, r0, #5
	str r0, [r3, #8]
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r3, #0x20]
	adds r0, r3, #0
	bl UpdateSpriteAnimation
	movs r0, #1
	strb r0, [r7, #8]
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #1
	bls _08077ED8
_08077F70:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8077F80
sub_8077F80: @ 0x08077F80
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	movs r1, #1
	add r0, sp, #4
	strb r1, [r0]
	movs r7, #0
	ldr r0, _08077FC8 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, [r4, #0x40]
	cmp r0, #0
	beq _08077FD0
	ldr r2, _08077FCC @ =0x03000040
	adds r0, r1, r2
	movs r2, #0x98
	lsls r2, r2, #3
	add r1, sp, #4
	str r1, [sp]
	movs r1, #1
	movs r3, #0
	bl sub_807A3D8
	ldr r1, [r0, #0x14]
	movs r2, #0x10
	ldrsh r1, [r1, r2]
	str r1, [sp, #8]
	ldr r0, [r0, #0x14]
	movs r1, #0x12
	ldrsh r0, [r0, r1]
	adds r0, #0x20
	add r1, sp, #8
	b _08077FE8
	.align 2, 0
_08077FC8: .4byte gCurTask
_08077FCC: .4byte 0x03000040
_08077FD0:
	ldr r0, [r4, #0xc]
	ldr r0, [r0]
	str r0, [sp, #8]
	ldr r0, [r4, #0x10]
	ldr r0, [r0]
	add r1, sp, #8
	str r0, [r1, #4]
	ldr r0, [sp, #8]
	asrs r0, r0, #8
	str r0, [sp, #8]
	ldr r0, [r1, #4]
	asrs r0, r0, #8
_08077FE8:
	str r0, [r1, #4]
	adds r5, r1, #0
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_8078A78
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_8078070
	ldrb r0, [r4, #8]
	cmp r0, #0
	beq _08078050
	add r1, sp, #4
	movs r0, #0
	strb r0, [r1]
	adds r6, r5, #0
	adds r3, r1, #0
	adds r5, r4, #0
	adds r5, #0x2c
_08078010:
	ldrb r2, [r3]
	lsls r0, r2, #2
	adds r0, r5, r0
	ldr r1, [r0]
	asrs r1, r1, #8
	ldr r0, [r6, #4]
	adds r0, r0, r1
	cmp r0, #0xb3
	ble _08078028
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
_08078028:
	adds r0, r2, #1
	strb r0, [r3]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bls _08078010
	ldr r1, [r4]
	cmp r1, #0
	bne _08078062
	cmp r7, #2
	bne _08078062
	ldr r0, [r4, #4]
	strb r1, [r0]
	ldr r0, _0807804C @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
	b _08078062
	.align 2, 0
_0807804C: .4byte gCurTask
_08078050:
	ldr r1, [r4]
	cmp r1, #0
	bne _08078062
	ldr r0, [r4, #4]
	strb r1, [r0]
	ldr r0, _0807806C @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
_08078062:
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807806C: .4byte gCurTask

	thumb_func_start sub_8078070
sub_8078070: @ 0x08078070
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	movs r7, #0
_08078078:
	ldr r0, [r5, #0x40]
	cmp r0, #0
	bne _0807808A
	adds r4, r5, #0
	adds r4, #0xd4
	cmp r7, #0
	beq _0807808E
	subs r4, #0x30
	b _0807808E
_0807808A:
	adds r4, r5, #0
	adds r4, #0xa4
_0807808E:
	ldr r2, _080780EC @ =gPseudoRandom
	ldr r1, [r2]
	ldr r0, _080780F0 @ =0x00196225
	muls r0, r1, r0
	ldr r1, _080780F4 @ =0x3C6EF35F
	adds r0, r0, r1
	str r0, [r2]
	ldr r0, [r5]
	cmp r0, #1
	bne _080780D2
	ldr r1, [r6]
	lsls r2, r7, #2
	adds r0, r5, #0
	adds r0, #0x14
	adds r0, r0, r2
	ldr r0, [r0]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r4, #0x10]
	ldr r1, [r6, #4]
	adds r0, r5, #0
	adds r0, #0x1c
	adds r0, r0, r2
	ldr r0, [r0]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	str r0, [r5]
	adds r0, r4, #0
	bl DisplaySprite
_080780D2:
	ldrb r0, [r5, #8]
	cmp r0, #0
	beq _0807812A
	ldr r0, [r5, #0x40]
	cmp r0, #0
	bne _080780F8
	adds r4, r5, #0
	adds r4, #0x74
	cmp r7, #0
	beq _080780FC
	subs r4, #0x30
	b _080780FC
	.align 2, 0
_080780EC: .4byte gPseudoRandom
_080780F0: .4byte 0x00196225
_080780F4: .4byte 0x3C6EF35F
_080780F8:
	adds r4, r5, #0
	adds r4, #0x44
_080780FC:
	ldr r1, [r6]
	lsls r2, r7, #2
	adds r0, r5, #0
	adds r0, #0x24
	adds r0, r0, r2
	ldr r0, [r0]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r4, #0x10]
	ldr r1, [r6, #4]
	adds r0, r5, #0
	adds r0, #0x2c
	adds r0, r0, r2
	ldr r0, [r0]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
_0807812A:
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #1
	bls _08078078
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_807813C
sub_807813C: @ 0x0807813C
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r4, r0, #0
	ldr r0, [r4, #0x20]
	ldr r3, [r4, #0xc]
	adds r0, r0, r3
	str r0, [r4, #0x20]
	asrs r0, r0, #8
	ldr r1, _08078160 @ =gCamera
	ldr r2, [r1]
	adds r5, r0, r2
	ldr r0, [r1, #0x1c]
	adds r7, r1, #0
	cmp r5, r0
	ble _08078164
	movs r0, #0xff
	b _0807816C
	.align 2, 0
_08078160: .4byte gCamera
_08078164:
	ldr r0, [r7, #0x18]
	cmp r5, r0
	bge _08078172
	movs r0, #1
_0807816C:
	strb r0, [r4, #5]
	rsbs r0, r3, #0
	str r0, [r4, #0xc]
_08078172:
	ldr r0, [r4, #0x24]
	ldr r1, [r4, #0x10]
	adds r0, r0, r1
	str r0, [r4, #0x24]
	ldr r1, [r4, #0x20]
	asrs r1, r1, #8
	ldr r2, [r7]
	adds r1, r1, r2
	asrs r0, r0, #8
	ldr r2, [r7, #4]
	adds r0, r0, r2
	adds r6, r0, #0
	movs r2, #0
	str r2, [sp]
	ldr r2, _080781A4 @ =sub_805217C
	str r2, [sp, #4]
	movs r2, #1
	movs r3, #8
	bl sub_8052394
	lsls r0, r0, #0x18
	cmp r0, #0
	bge _080781A8
	movs r0, #0xff
	b _080781B0
	.align 2, 0
_080781A4: .4byte sub_805217C
_080781A8:
	ldr r0, [r7, #0x10]
	cmp r6, r0
	bge _080781B8
	movs r0, #1
_080781B0:
	strb r0, [r4, #6]
	ldr r0, [r4, #0x10]
	rsbs r0, r0, #0
	str r0, [r4, #0x10]
_080781B8:
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80781C0
sub_80781C0: @ 0x080781C0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _08078360 @ =sub_8078C3C
	movs r2, #0x84
	lsls r2, r2, #6
	ldr r1, _08078364 @ =sub_8078C28
	str r1, [sp]
	movs r1, #0xbc
	movs r3, #0
	bl TaskCreate
	ldrh r0, [r0, #6]
	mov sb, r0
	movs r0, #0xc0
	lsls r0, r0, #0x12
	add r0, sb
	mov sl, r0
	str r5, [r0]
	ldr r2, _08078368 @ =gPseudoRandom
	ldr r0, [r2]
	ldr r6, _0807836C @ =0x00196225
	muls r0, r6, r0
	ldr r5, _08078370 @ =0x3C6EF35F
	adds r0, r0, r5
	str r0, [r2]
	lsrs r0, r0, #8
	movs r1, #1
	mov r8, r1
	ands r0, r1
	movs r3, #0
	mov r1, sl
	strb r0, [r1, #5]
	ldr r0, [r2]
	muls r0, r6, r0
	adds r0, r0, r5
	str r0, [r2]
	lsrs r0, r0, #8
	movs r1, #5
	ands r0, r1
	mov r1, sl
	strb r0, [r1, #6]
	strh r3, [r1, #8]
	str r3, [r1, #0x20]
	mov r3, r8
	strb r3, [r1, #4]
	str r4, [r1, #0x10]
	adds r0, r4, #4
	str r0, [r1, #0x14]
	ldr r0, [r4]
	str r0, [r1, #0x18]
	ldr r0, [r4, #4]
	str r0, [r1, #0x1c]
	ldr r1, _08078374 @ =gCamera
	ldr r0, [r1]
	mov r3, sl
	strh r0, [r3, #0xa]
	ldr r0, [r1, #4]
	strh r0, [r3, #0xc]
	movs r7, #0
	ldr r4, _08078378 @ =0x03000024
	add r4, sb
	adds r3, r2, #0
	ldr r0, _08078378 @ =0x03000024
	add r0, sb
	str r0, [sp, #0xc]
_0807824E:
	lsls r2, r7, #3
	adds r2, r4, r2
	ldr r0, [r3]
	muls r0, r6, r0
	adds r0, r0, r5
	str r0, [r3]
	lsrs r0, r0, #8
	movs r1, #0x1f
	ands r0, r1
	lsls r0, r0, #8
	ldr r1, _0807837C @ =0xFFFFF000
	adds r0, r0, r1
	str r0, [r2]
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #2
	bls _0807824E
	movs r7, #0
	movs r3, #0x28
	add r3, sl
	mov r8, r3
	movs r0, #0x3c
	add r0, sl
	mov sb, r0
	movs r1, #0x40
	add r1, sl
	mov ip, r1
	mov r3, sl
	adds r3, #0x60
	str r3, [sp, #8]
	mov r0, sl
	adds r0, #0x54
	str r0, [sp, #4]
	mov r4, r8
	ldr r3, _08078368 @ =gPseudoRandom
	ldr r6, _0807836C @ =0x00196225
	ldr r5, _08078370 @ =0x3C6EF35F
_0807829A:
	lsls r2, r7, #3
	adds r2, r4, r2
	ldr r0, [r3]
	muls r0, r6, r0
	adds r0, r0, r5
	str r0, [r3]
	lsrs r0, r0, #8
	movs r1, #0x1f
	ands r0, r1
	lsls r0, r0, #8
	ldr r1, _0807837C @ =0xFFFFF000
	adds r0, r0, r1
	str r0, [r2]
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #2
	bls _0807829A
	movs r7, #0
	mov r6, sb
	ldr r5, [sp, #0xc]
	mov r4, ip
	mov r3, r8
_080782C8:
	lsls r1, r7, #3
	adds r2, r6, r1
	adds r0, r5, r1
	ldr r0, [r0]
	str r0, [r2]
	adds r2, r4, r1
	adds r1, r3, r1
	ldr r0, [r1]
	str r0, [r2]
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #2
	bls _080782C8
	movs r7, #0
	ldr r5, _08078368 @ =gPseudoRandom
	ldr r3, _0807836C @ =0x00196225
	mov r8, r3
	ldr r6, _08078370 @ =0x3C6EF35F
_080782EE:
	lsls r3, r7, #2
	ldr r0, [sp, #8]
	adds r4, r0, r3
	ldr r0, [r5]
	mov r2, r8
	muls r2, r0, r2
	adds r2, r2, r6
	str r2, [r5]
	lsrs r0, r2, #8
	movs r1, #7
	ands r0, r1
	adds r0, #5
	lsls r0, r0, #7
	rsbs r0, r0, #0
	str r0, [r4]
	ldr r1, [sp, #4]
	adds r4, r1, r3
	mov r3, r8
	muls r3, r2, r3
	adds r2, r3, #0
	adds r2, r2, r6
	str r2, [r5]
	lsrs r0, r2, #8
	movs r1, #5
	ands r0, r1
	lsls r3, r0, #4
	str r3, [r4]
	mov r0, r8
	muls r0, r2, r0
	adds r0, r0, r6
	str r0, [r5]
	lsrs r0, r0, #8
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _0807833A
	rsbs r0, r3, #0
	str r0, [r4]
_0807833A:
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #2
	bls _080782EE
	movs r0, #0x90
	bl m4aSongNumStart
	mov r0, sl
	bl sub_8078380
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08078360: .4byte sub_8078C3C
_08078364: .4byte sub_8078C28
_08078368: .4byte gPseudoRandom
_0807836C: .4byte 0x00196225
_08078370: .4byte 0x3C6EF35F
_08078374: .4byte gCamera
_08078378: .4byte 0x03000024
_0807837C: .4byte 0xFFFFF000

	thumb_func_start sub_8078380
sub_8078380: @ 0x08078380
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r6, r0, #0
	ldr r5, _08078460 @ =gUnknown_080D5A44
	ldrb r0, [r6, #5]
	lsls r0, r0, #3
	adds r1, r5, #4
	adds r0, r0, r1
	ldrh r4, [r0]
	ldr r0, _08078464 @ =gUnknown_080D5A14
	mov r8, r0
	ldrb r0, [r6, #6]
	lsls r0, r0, #3
	mov r1, r8
	adds r1, #4
	adds r0, r0, r1
	ldrh r0, [r0]
	adds r0, r4, r0
	bl VramMalloc
	adds r7, r0, #0
	adds r0, r6, #0
	adds r0, #0x6c
	str r7, [r6, #0x6c]
	lsls r4, r4, #5
	adds r7, r7, r4
	ldrb r1, [r6, #5]
	lsls r1, r1, #3
	adds r1, r1, r5
	ldrh r1, [r1]
	movs r4, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r6, #5]
	lsls r1, r1, #3
	adds r1, r1, r5
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	adds r5, r1, #0
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r6, #0x24]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r6, #0x28]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r1, #0x40
	strh r1, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	movs r1, #0x10
	mov sl, r1
	mov r1, sl
	strb r1, [r0, #0x1c]
	movs r1, #0
	strb r1, [r0, #0x1f]
	str r4, [r0, #8]
	movs r1, #1
	rsbs r1, r1, #0
	mov sb, r1
	str r1, [r0, #0x20]
	bl UpdateSpriteAnimation
	ldrb r0, [r6, #6]
	cmp r0, #7
	beq _08078452
	adds r0, r6, #0
	adds r0, #0x94
	str r7, [r0]
	ldrb r1, [r6, #6]
	lsls r1, r1, #3
	add r1, r8
	ldrh r1, [r1]
	strh r1, [r0, #0xc]
	ldrb r1, [r6, #6]
	lsls r1, r1, #3
	add r1, r8
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	ldrb r1, [r0, #0x1b]
	orrs r1, r5
	strb r1, [r0, #0x1b]
	ldr r1, [r6, #0x3c]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r6, #0x40]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	mov r1, sl
	strb r1, [r0, #0x1c]
	movs r1, #0
	strb r1, [r0, #0x1f]
	str r4, [r0, #8]
	mov r1, sb
	str r1, [r0, #0x20]
	bl UpdateSpriteAnimation
_08078452:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08078460: .4byte gUnknown_080D5A44
_08078464: .4byte gUnknown_080D5A14

	thumb_func_start sub_8078468
sub_8078468: @ 0x08078468
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	mov ip, r0
	movs r0, #0
	mov r8, r0
	movs r6, #0
	mov r7, ip
	adds r7, #0x40
	ldr r3, _080784A8 @ =0x0000B3FF
	mov sb, r3
_08078480:
	lsls r2, r6, #3
	adds r0, r7, r2
	mov r3, ip
	ldr r1, [r3, #0x1c]
	ldr r0, [r0]
	adds r1, r1, r0
	adds r5, r2, #0
	cmp r1, sb
	bgt _080784D8
	lsls r0, r6, #2
	mov r1, ip
	adds r1, #0x54
	adds r3, r1, r0
	ldr r2, [r3]
	adds r4, r0, #0
	cmp r2, #0
	ble _080784AC
	adds r0, r2, #0
	adds r0, #0x10
	b _080784B0
	.align 2, 0
_080784A8: .4byte 0x0000B3FF
_080784AC:
	adds r0, r2, #0
	subs r0, #0x10
_080784B0:
	str r0, [r3]
	mov r2, ip
	adds r2, #0x3c
	adds r2, r2, r5
	adds r1, r1, r4
	ldr r0, [r2]
	ldr r1, [r1]
	adds r0, r0, r1
	str r0, [r2]
	mov r0, ip
	adds r0, #0x60
	adds r0, r0, r4
	ldr r1, [r0]
	adds r1, #0x40
	str r1, [r0]
	adds r2, r7, r5
	ldr r0, [r2]
	adds r0, r0, r1
	str r0, [r2]
	b _080784E2
_080784D8:
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
_080784E2:
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #2
	bls _08078480
	mov r0, r8
	cmp r0, #3
	beq _080784F6
	movs r0, #0
	b _080784F8
_080784F6:
	movs r0, #1
_080784F8:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_8078504
sub_8078504: @ 0x08078504
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x6c
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	mov r8, r0
	movs r7, #0
_0807851A:
	ldr r1, [r5, #0x10]
	lsls r2, r7, #3
	adds r0, r5, #0
	adds r0, #0x24
	adds r6, r0, r2
	ldr r0, [r1]
	ldr r1, [r6]
	adds r0, r0, r1
	asrs r3, r0, #8
	strh r3, [r4, #0x10]
	ldr r1, [r5, #0x14]
	adds r0, r5, #0
	adds r0, #0x28
	adds r2, r0, r2
	ldr r0, [r1]
	ldr r1, [r2]
	adds r0, r0, r1
	asrs r1, r0, #8
	strh r1, [r4, #0x12]
	cmp r7, #0
	beq _08078554
	ldr r0, [r6]
	asrs r0, r0, #8
	adds r0, r3, r0
	strh r0, [r4, #0x10]
	ldr r0, [r2]
	asrs r0, r0, #8
	adds r0, r1, r0
	strh r0, [r4, #0x12]
_08078554:
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #2
	bls _0807851A
	mov r0, r8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_8078570
sub_8078570: @ 0x08078570
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	movs r0, #0
	mov r8, r0
	mov r7, sp
_0807857E:
	ldrb r0, [r4, #6]
	cmp r0, #7
	beq _08078636
	adds r5, r4, #0
	adds r5, #0x94
	ldr r0, [r4, #0x10]
	ldr r1, [r0]
	ldr r6, [r4, #0x18]
	adds r3, r0, #0
	cmp r1, r6
	beq _080785E4
	ldr r0, [r4, #0x14]
	ldr r1, [r0]
	ldr r0, [r4, #0x1c]
	cmp r1, r0
	beq _080785E4
	ldr r2, _080785E0 @ =gCamera
	ldr r0, [r2]
	ldrh r1, [r4, #0xa]
	subs r0, r0, r1
	strh r0, [r7]
	ldr r0, [r2, #4]
	ldrh r1, [r4, #0xc]
	subs r0, r0, r1
	strh r0, [r7, #2]
	movs r2, #0
	ldrsh r1, [r7, r2]
	adds r1, r6, r1
	mov r0, r8
	lsls r3, r0, #3
	adds r0, r4, #0
	adds r0, #0x3c
	adds r0, r0, r3
	ldr r0, [r0]
	adds r1, r1, r0
	asrs r1, r1, #8
	strh r1, [r5, #0x10]
	movs r2, #2
	ldrsh r1, [r7, r2]
	ldr r0, [r4, #0x1c]
	adds r0, r0, r1
	adds r2, r4, #0
	adds r2, #0x40
	adds r1, r2, r3
	ldr r1, [r1]
	adds r0, r0, r1
	asrs r0, r0, #8
	strh r0, [r5, #0x12]
	b _080785FE
	.align 2, 0
_080785E0: .4byte gCamera
_080785E4:
	mov r0, r8
	lsls r2, r0, #3
	adds r1, r4, #0
	adds r1, #0x3c
	adds r1, r1, r2
	ldr r0, [r3]
	ldr r1, [r1]
	adds r0, r0, r1
	asrs r0, r0, #8
	strh r0, [r5, #0x10]
	adds r3, r2, #0
	adds r2, r4, #0
	adds r2, #0x40
_080785FE:
	ldr r0, [r4, #0x14]
	adds r1, r2, r3
	ldr r0, [r0]
	ldr r1, [r1]
	adds r0, r0, r1
	asrs r1, r0, #8
	strh r1, [r5, #0x12]
	mov r2, r8
	cmp r2, #0
	beq _08078630
	adds r0, r4, #0
	adds r0, #0x24
	adds r0, r0, r3
	ldr r0, [r0]
	asrs r0, r0, #8
	ldrh r2, [r5, #0x10]
	adds r0, r0, r2
	strh r0, [r5, #0x10]
	adds r0, r4, #0
	adds r0, #0x28
	adds r0, r0, r3
	ldr r0, [r0]
	asrs r0, r0, #8
	adds r0, r1, r0
	strh r0, [r5, #0x12]
_08078630:
	adds r0, r5, #0
	bl DisplaySprite
_08078636:
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	cmp r0, #2
	bls _0807857E
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8078650
sub_8078650: @ 0x08078650
	push {lr}
	adds r3, r0, #0
	ldr r0, [r3, #0x10]
	movs r1, #0xa0
	lsls r1, r1, #4
	adds r0, r0, r1
	str r0, [r3, #0x10]
	ldr r2, _08078694 @ =gSineTable
	asrs r0, r0, #7
	movs r1, #0xff
	ands r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r0, [r0]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x16
	lsls r1, r0, #4
	str r1, [r3, #0x14]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	str r0, [r3, #0x1c]
	ldr r1, [r3, #0x18]
	ldr r2, _08078698 @ =0xFFFFFC00
	adds r1, r1, r2
	str r1, [r3, #0x18]
	ldr r0, [r3, #0x20]
	adds r0, r0, r2
	str r0, [r3, #0x20]
	ldr r0, _0807869C @ =0xFFFFC400
	cmp r1, r0
	blt _080786A0
	movs r0, #0
	b _080786B0
	.align 2, 0
_08078694: .4byte gSineTable
_08078698: .4byte 0xFFFFFC00
_0807869C: .4byte 0xFFFFC400
_080786A0:
	ldr r1, [r3, #0x24]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	movs r0, #0
	str r0, [r3, #0x18]
	str r0, [r3, #0x20]
	str r0, [r3, #0x10]
	movs r0, #1
_080786B0:
	pop {r1}
	bx r1

	thumb_func_start sub_80786B4
sub_80786B4: @ 0x080786B4
	push {r4, r5, r6, lr}
	mov r6, sl
	mov r5, sb
	mov r4, r8
	push {r4, r5, r6}
	sub sp, #4
	adds r6, r0, #0
	mov r8, r1
	mov sb, r2
	mov sl, r3
	ldr r0, _08078754 @ =sub_8078764
	movs r2, #0x84
	lsls r2, r2, #6
	ldr r1, _08078758 @ =sub_8078D18
	str r1, [sp]
	movs r1, #0x4c
	movs r3, #0
	bl TaskCreate
	ldrh r4, [r0, #6]
	movs r5, #0xc0
	lsls r5, r5, #0x12
	adds r5, r4, r5
	ldr r0, [r6]
	str r0, [r5, #4]
	ldr r0, [r6, #4]
	str r0, [r5, #0xc]
	ldr r0, [r6, #8]
	str r0, [r5, #8]
	ldr r0, [r6, #0xc]
	str r0, [r5, #0x10]
	mov r0, r8
	str r0, [r5, #0x14]
	mov r1, sb
	str r1, [r5, #0x18]
	mov r0, sl
	str r0, [r5]
	ldr r6, _0807875C @ =gUnknown_080D5A44
	ldr r0, [r6, #0xc]
	bl VramMalloc
	ldr r1, _08078760 @ =0x0300001C
	adds r4, r4, r1
	str r0, [r4]
	ldrh r0, [r6, #8]
	movs r2, #0
	movs r1, #0
	strh r0, [r4, #0xc]
	ldrb r0, [r6, #0xa]
	strb r0, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	ldr r0, [r5, #4]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0xc]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	movs r0, #0x80
	strh r0, [r4, #0x14]
	strh r1, [r4, #0xe]
	strh r1, [r4, #0x16]
	movs r0, #0x10
	strb r0, [r4, #0x1c]
	strb r2, [r4, #0x1f]
	str r1, [r4, #8]
	subs r0, #0x11
	str r0, [r4, #0x20]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08078754: .4byte sub_8078764
_08078758: .4byte sub_8078D18
_0807875C: .4byte gUnknown_080D5A44
_08078760: .4byte 0x0300001C

	thumb_func_start sub_8078764
sub_8078764: @ 0x08078764
	push {r4, r5, r6, r7, lr}
	ldr r7, _080787D0 @ =gCurTask
	ldr r0, [r7]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r5, r0
	ldr r0, [r6, #0x14]
	ldr r0, [r0]
	ldr r1, [r6, #4]
	adds r0, r0, r1
	asrs r0, r0, #8
	strh r0, [r6, #0x2c]
	ldr r0, [r6, #0x18]
	ldr r0, [r0]
	ldr r1, [r6, #0xc]
	adds r0, r0, r1
	asrs r0, r0, #8
	strh r0, [r6, #0x2e]
	ldr r0, _080787D4 @ =0x0300001C
	adds r5, r5, r0
	adds r0, r5, #0
	bl DisplaySprite
	ldr r0, [r6, #0x14]
	ldr r0, [r0]
	ldr r1, [r6, #8]
	adds r0, r0, r1
	asrs r0, r0, #8
	strh r0, [r6, #0x2c]
	ldr r0, [r6, #0x18]
	ldr r0, [r0]
	ldr r1, [r6, #0x10]
	adds r0, r0, r1
	asrs r0, r0, #8
	strh r0, [r6, #0x2e]
	adds r0, r5, #0
	bl UpdateSpriteAnimation
	adds r4, r0, #0
	adds r0, r5, #0
	bl DisplaySprite
	cmp r4, #0
	bne _080787CA
	ldr r0, [r6]
	movs r1, #0
	strb r1, [r0]
	ldr r0, [r7]
	bl TaskDestroy
_080787CA:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080787D0: .4byte gCurTask
_080787D4: .4byte 0x0300001C

	thumb_func_start sub_80787D8
sub_80787D8: @ 0x080787D8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	mov r8, r0
	movs r7, #0
	ldr r0, _08078878 @ =gUnknown_080D5A64
	mov sl, r0
	movs r1, #0
	mov ip, r1
	ldr r0, _0807887C @ =gSineTable
	mov sb, r0
_080787F4:
	mov r1, ip
	str r1, [sp]
	str r1, [sp, #4]
	mov r1, sl
	adds r0, r7, r1
	ldrb r1, [r0]
	lsls r0, r1, #3
	add r0, sb
	ldrh r0, [r0]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x16
	lsls r5, r0, #3
	lsls r0, r0, #2
	adds r5, r5, r0
	str r5, [sp, #8]
	lsls r1, r1, #3
	movs r0, #0x80
	lsls r0, r0, #2
	adds r1, r1, r0
	add r1, sb
	ldrh r0, [r1]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x16
	lsls r2, r0, #3
	lsls r0, r0, #2
	adds r2, r2, r0
	str r2, [sp, #0xc]
	lsls r0, r7, #3
	mov r3, r8
	adds r3, #0x28
	adds r3, r3, r0
	mov r1, ip
	str r1, [r3]
	mov r4, r8
	adds r4, #0x24
	adds r4, r4, r0
	str r1, [r4]
	asrs r2, r2, #6
	lsls r1, r7, #1
	mov r0, r8
	adds r0, #8
	adds r6, r0, r1
	ldrh r0, [r6]
	lsrs r0, r0, #6
	adds r1, r2, #0
	muls r1, r0, r1
	lsls r1, r1, #4
	ldr r0, [r3]
	adds r0, r0, r1
	str r0, [r3]
	asrs r5, r5, #6
	ldrh r0, [r6]
	lsrs r0, r0, #6
	adds r1, r5, #0
	muls r1, r0, r1
	lsls r1, r1, #4
	ldr r0, [r4]
	adds r0, r0, r1
	str r0, [r4]
	ldrh r1, [r6]
	lsrs r0, r1, #6
	cmp r0, #0x10
	blo _08078880
	movs r0, #1
	b _08078892
	.align 2, 0
_08078878: .4byte gUnknown_080D5A64
_0807887C: .4byte gSineTable
_08078880:
	adds r0, r1, #0
	adds r0, #0x80
	strh r0, [r6]
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #7
	bls _080787F4
	movs r0, #0
_08078892:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80788A4
sub_80788A4: @ 0x080788A4
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	str r0, [sp, #8]
	adds r6, r1, #0
	adds r7, r2, #0
	adds r4, r3, #0
	movs r1, #1
	add r0, sp, #4
	strb r1, [r0]
	ldr r0, _080788FC @ =sub_8077F80
	movs r1, #0x82
	lsls r1, r1, #1
	movs r2, #0x84
	lsls r2, r2, #6
	ldr r3, _08078900 @ =sub_8078A68
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	ldr r0, [sp, #8]
	str r0, [r5, #0x40]
	str r4, [r5, #0x3c]
	cmp r0, #0
	beq _08078904
	add r0, sp, #8
	movs r2, #0x98
	lsls r2, r2, #3
	add r1, sp, #4
	str r1, [sp]
	movs r1, #1
	movs r3, #0
	bl sub_807A3D8
	ldr r0, [r0, #0x14]
	adds r1, r0, #0
	adds r1, #0x10
	str r1, [r5, #0xc]
	adds r0, #0x12
	str r0, [r5, #0x10]
	b _08078908
	.align 2, 0
_080788FC: .4byte sub_8077F80
_08078900: .4byte sub_8078A68
_08078904:
	str r6, [r5, #0xc]
	str r7, [r5, #0x10]
_08078908:
	movs r0, #0
	strb r0, [r5, #9]
	ldr r0, [sp, #0x20]
	str r0, [r5, #4]
	adds r0, r5, #0
	bl sub_8077D40
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8078920
sub_8078920: @ 0x08078920
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	ldr r0, _08078968 @ =sub_8078C90
	movs r2, #0x84
	lsls r2, r2, #6
	ldr r1, _0807896C @ =sub_8078C8C
	str r1, [sp]
	movs r1, #0x28
	movs r3, #0
	bl TaskCreate
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	str r5, [r0]
	str r4, [r0, #8]
	adds r4, #4
	str r4, [r0, #0xc]
	movs r1, #0
	str r1, [r0, #0x10]
	str r1, [r0, #0x14]
	str r1, [r0, #0x18]
	str r1, [r0, #0x1c]
	str r1, [r0, #0x20]
	movs r2, #0
	strh r1, [r0, #6]
	strb r2, [r0, #4]
	str r6, [r0, #0x24]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08078968: .4byte sub_8078C90
_0807896C: .4byte sub_8078C8C

	thumb_func_start sub_8078970
sub_8078970: @ 0x08078970
	push {r4, r5, r6, lr}
	mov r6, sb
	mov r5, r8
	push {r5, r6}
	sub sp, #4
	mov r8, r0
	mov sb, r1
	adds r5, r2, #0
	adds r4, r3, #0
	ldr r6, [sp, #0x1c]
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _080789E0 @ =sub_8078AC4
	movs r2, #0x84
	lsls r2, r2, #6
	ldr r1, _080789E4 @ =sub_8078AC0
	str r1, [sp]
	movs r1, #0x30
	movs r3, #0
	bl TaskCreate
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	movs r2, #0
	strh r2, [r0, #8]
	str r2, [r0, #0x1c]
	movs r1, #1
	strb r1, [r0, #5]
	movs r1, #0xff
	strb r1, [r0, #6]
	strb r4, [r0, #4]
	str r6, [r0]
	ldr r1, [r5]
	str r1, [r0, #0x20]
	ldr r1, [r5, #4]
	str r1, [r0, #0x24]
	movs r1, #0x80
	lsls r1, r1, #3
	str r1, [r0, #0xc]
	ldr r1, _080789E8 @ =0xFFFFFC00
	str r1, [r0, #0x10]
	str r2, [r0, #0x14]
	str r2, [r0, #0x18]
	mov r1, r8
	str r1, [r0, #0x28]
	mov r1, sb
	str r1, [r0, #0x2c]
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080789E0: .4byte sub_8078AC4
_080789E4: .4byte sub_8078AC0
_080789E8: .4byte 0xFFFFFC00

	thumb_func_start sub_80789EC
sub_80789EC: @ 0x080789EC
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	ldr r0, _08078A58 @ =sub_8078D34
	movs r2, #0x84
	lsls r2, r2, #6
	ldr r1, _08078A5C @ =sub_8078D30
	str r1, [sp]
	movs r1, #0x68
	movs r3, #0
	bl TaskCreate
	ldrh r3, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r0, r3, r0
	str r5, [r0]
	str r4, [r0, #0x18]
	adds r4, #4
	str r4, [r0, #0x1c]
	movs r1, #0
	str r1, [r0, #0x20]
	movs r2, #0
	strh r1, [r0, #6]
	strb r2, [r0, #4]
	str r6, [r0, #0x64]
	movs r2, #0
	ldr r0, _08078A60 @ =0x03000024
	adds r6, r3, r0
	movs r4, #0
	adds r0, #4
	adds r5, r3, r0
	subs r0, #0x20
	adds r3, r3, r0
_08078A34:
	lsls r1, r2, #3
	adds r0, r6, r1
	str r4, [r0]
	adds r1, r5, r1
	str r4, [r1]
	lsls r0, r2, #1
	adds r0, r3, r0
	strh r4, [r0]
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #7
	bls _08078A34
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08078A58: .4byte sub_8078D34
_08078A5C: .4byte sub_8078D30
_08078A60: .4byte 0x03000024

	thumb_func_start sub_8078A64
sub_8078A64: @ 0x08078A64
	bx lr
	.align 2, 0

	thumb_func_start sub_8078A68
sub_8078A68: @ 0x08078A68
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	ldr r1, [r0, #4]
	movs r0, #0
	strb r0, [r1]
	bx lr

	thumb_func_start sub_8078A78
sub_8078A78: @ 0x08078A78
	push {r4, r5, r6, r7, lr}
	mov ip, r0
	movs r4, #0
	mov r6, ip
	adds r6, #0x2c
	ldr r5, [r1, #4]
_08078A84:
	lsls r1, r4, #2
	adds r3, r6, r1
	ldr r0, [r3]
	asrs r0, r0, #8
	adds r0, r5, r0
	cmp r0, #0xb3
	bgt _08078AAE
	mov r2, ip
	adds r2, #0x24
	adds r2, r2, r1
	ldr r0, [r2]
	mov r7, ip
	ldr r1, [r7, #0x34]
	adds r0, r0, r1
	str r0, [r2]
	ldr r1, [r7, #0x38]
	adds r1, #0x20
	str r1, [r7, #0x38]
	ldr r0, [r3]
	adds r0, r0, r1
	str r0, [r3]
_08078AAE:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #1
	bls _08078A84
	movs r0, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_8078AC0
sub_8078AC0: @ 0x08078AC0
	bx lr
	.align 2, 0

	thumb_func_start sub_8078AC4
sub_8078AC4: @ 0x08078AC4
	push {r4, r5, lr}
	ldr r5, _08078AF4 @ =gCurTask
	ldr r0, [r5]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	adds r0, r4, #0
	bl sub_8078B74
	adds r0, r4, #0
	bl sub_807813C
	ldr r0, [r4]
	ldrb r0, [r0]
	cmp r0, #1
	bne _08078AEC
	ldr r0, [r5]
	bl TaskDestroy
_08078AEC:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08078AF4: .4byte gCurTask

	thumb_func_start sub_8078AF8
sub_8078AF8: @ 0x08078AF8
	push {r4, lr}
	ldr r4, _08078B1C @ =gCurTask
	ldr r0, [r4]
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	bl sub_8078BAC
	cmp r0, #1
	bne _08078B14
	ldr r1, [r4]
	ldr r0, _08078B20 @ =sub_8078B24
	str r0, [r1, #8]
_08078B14:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08078B1C: .4byte gCurTask
_08078B20: .4byte sub_8078B24

	thumb_func_start sub_8078B24
sub_8078B24: @ 0x08078B24
	push {lr}
	ldr r2, _08078B48 @ =gCurTask
	ldr r0, [r2]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r1, r1, r0
	ldrh r0, [r1, #8]
	cmp r0, #0xb3
	bls _08078B44
	ldr r1, [r1]
	movs r0, #1
	strb r0, [r1]
	ldr r1, [r2]
	ldr r0, _08078B4C @ =sub_8078B50
	str r0, [r1, #8]
_08078B44:
	pop {r0}
	bx r0
	.align 2, 0
_08078B48: .4byte gCurTask
_08078B4C: .4byte sub_8078B50

	thumb_func_start sub_8078B50
sub_8078B50: @ 0x08078B50
	push {lr}
	ldr r2, _08078B70 @ =gCurTask
	ldr r0, [r2]
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #2
	strb r0, [r1]
	ldr r0, [r2]
	bl TaskDestroy
	pop {r0}
	bx r0
	.align 2, 0
_08078B70: .4byte gCurTask

	thumb_func_start sub_8078B74
sub_8078B74: @ 0x08078B74
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r6, [r4, #0x28]
	ldrb r0, [r4, #4]
	cmp r0, #0
	beq _08078BA4
	movs r5, #0
	cmp r5, r0
	bhs _08078BA4
_08078B86:
	ldr r0, [r4, #0x20]
	asrs r0, r0, #8
	strh r0, [r6, #0x10]
	ldr r0, [r4, #0x24]
	asrs r0, r0, #8
	strh r0, [r6, #0x12]
	adds r0, r6, #0
	bl DisplaySprite
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	ldrb r0, [r4, #4]
	cmp r5, r0
	blo _08078B86
_08078BA4:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8078BAC
sub_8078BAC: @ 0x08078BAC
	push {r4, r5, lr}
	sub sp, #8
	adds r5, r0, #0
	movs r4, #0
	movs r1, #0
	movs r2, #0
	ldr r0, [r5, #0x28]
	movs r3, #0x12
	ldrsh r0, [r0, r3]
	ldr r3, _08078C14 @ =gCamera
	ldr r3, [r3, #4]
	adds r0, r0, r3
	str r4, [sp]
	ldr r3, _08078C18 @ =sub_805217C
	str r3, [sp, #4]
	movs r2, #0
	movs r3, #8
	bl sub_8052394
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge _08078BF2
	lsls r1, r0, #8
	ldr r0, [r5, #0x24]
	adds r0, r0, r1
	str r0, [r5, #0x24]
	movs r0, #0xff
	strb r0, [r5, #6]
	ldr r0, [r5, #0x10]
	asrs r0, r0, #1
	str r0, [r5, #0x10]
	ldr r0, [r5, #0x18]
	rsbs r0, r0, #0
	str r0, [r5, #0x18]
_08078BF2:
	movs r0, #6
	ldrsb r0, [r5, r0]
	lsls r0, r0, #8
	ldr r1, [r5, #0x18]
	subs r1, r1, r0
	str r1, [r5, #0x18]
	ldr r2, [r5, #0x10]
	adds r2, r2, r1
	str r2, [r5, #0x10]
	ldr r0, [r5, #0x24]
	adds r0, r0, r2
	str r0, [r5, #0x24]
	cmp r2, #0
	beq _08078C1C
	movs r0, #0
	b _08078C1E
	.align 2, 0
_08078C14: .4byte gCamera
_08078C18: .4byte sub_805217C
_08078C1C:
	movs r0, #1
_08078C1E:
	add sp, #8
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8078C28
sub_8078C28: @ 0x08078C28
	push {lr}
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	ldr r0, [r0, #0x6c]
	bl VramFree
	pop {r0}
	bx r0

	thumb_func_start sub_8078C3C
sub_8078C3C: @ 0x08078C3C
	push {r4, r5, lr}
	ldr r5, _08078C88 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldrb r0, [r4, #4]
	cmp r0, #1
	bne _08078C58
	adds r0, r4, #0
	bl sub_8078504
	strb r0, [r4, #4]
_08078C58:
	adds r0, r4, #0
	bl sub_8078570
	adds r0, r4, #0
	bl sub_8078468
	cmp r0, #1
	bne _08078C82
	ldr r0, [r4]
	ldrb r1, [r0]
	subs r1, #1
	strb r1, [r0]
	ldr r1, [r4]
	ldrb r0, [r1]
	cmp r0, #0xc8
	bls _08078C7C
	movs r0, #0
	strb r0, [r1]
_08078C7C:
	ldr r0, [r5]
	bl TaskDestroy
_08078C82:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08078C88: .4byte gCurTask

	thumb_func_start sub_8078C8C
sub_8078C8C: @ 0x08078C8C
	bx lr
	.align 2, 0

	thumb_func_start sub_8078C90
sub_8078C90: @ 0x08078C90
	push {r4, r5, lr}
	ldr r5, _08078CB4 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_8078650
	ldr r0, [r4]
	ldrb r0, [r0]
	cmp r0, #0
	bne _08078CB8
	ldr r0, [r5]
	bl TaskDestroy
	b _08078CBE
	.align 2, 0
_08078CB4: .4byte gCurTask
_08078CB8:
	adds r0, r4, #0
	bl sub_8078CC4
_08078CBE:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8078CC4
sub_8078CC4: @ 0x08078CC4
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r5, [r4, #0x24]
	ldr r0, [r4, #8]
	ldr r0, [r0]
	ldr r1, [r4, #0x14]
	adds r0, r0, r1
	asrs r0, r0, #8
	strh r0, [r5, #0x10]
	ldr r0, [r4, #0xc]
	ldr r0, [r0]
	ldr r1, [r4, #0x18]
	adds r0, r0, r1
	asrs r0, r0, #8
	strh r0, [r5, #0x12]
	adds r0, r5, #0
	bl DisplaySprite
	ldr r0, [r4, #8]
	ldr r0, [r0]
	ldr r1, [r4, #0x1c]
	adds r0, r0, r1
	asrs r0, r0, #8
	strh r0, [r5, #0x10]
	ldr r0, [r4, #0xc]
	ldr r0, [r0]
	ldr r1, [r4, #0x20]
	adds r0, r0, r1
	asrs r0, r0, #8
	strh r0, [r5, #0x12]
	adds r0, r5, #0
	bl UpdateSpriteAnimation
	adds r4, r0, #0
	adds r0, r5, #0
	bl DisplaySprite
	adds r0, r4, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8078D18
sub_8078D18: @ 0x08078D18
	push {lr}
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	ldr r0, [r0, #0x1c]
	bl VramFree
	pop {r0}
	bx r0

	thumb_func_start sub_8078D2C
sub_8078D2C: @ 0x08078D2C
	bx lr
	.align 2, 0

	thumb_func_start sub_8078D30
sub_8078D30: @ 0x08078D30
	bx lr
	.align 2, 0

	thumb_func_start sub_8078D34
sub_8078D34: @ 0x08078D34
	push {r4, r5, lr}
	ldr r5, _08078D68 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_8078D6C
	adds r0, r4, #0
	bl sub_80787D8
	cmp r0, #1
	bne _08078D60
	ldr r0, [r4]
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	ldr r0, [r5]
	bl TaskDestroy
_08078D60:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08078D68: .4byte gCurTask

	thumb_func_start sub_8078D6C
sub_8078D6C: @ 0x08078D6C
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r5, #0
_08078D72:
	ldr r0, [r4, #0x64]
	ldr r1, [r4, #0x18]
	lsls r3, r5, #3
	adds r2, r4, #0
	adds r2, #0x24
	adds r2, r2, r3
	ldr r1, [r1]
	ldr r2, [r2]
	adds r1, r1, r2
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r4, #0x1c]
	adds r2, r4, #0
	adds r2, #0x28
	adds r2, r2, r3
	ldr r1, [r1]
	ldr r2, [r2]
	adds r1, r1, r2
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	bl DisplaySprite
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #7
	bls _08078D72
	movs r0, #1
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_8078DB0
sub_8078DB0: @ 0x08078DB0
	push {r4, r5, r6, lr}
	mov r6, sb
	mov r5, r8
	push {r5, r6}
	sub sp, #4
	mov r8, r0
	mov sb, r1
	adds r5, r2, #0
	adds r6, r3, #0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r8, r0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	mov sb, r1
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	lsls r6, r6, #0x18
	lsrs r6, r6, #0x18
	ldr r0, _08078E2C @ =sub_807A514
	movs r2, #0xf0
	lsls r2, r2, #8
	movs r4, #0
	str r4, [sp]
	movs r1, #0x2c
	movs r3, #0
	bl TaskCreate
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r0, r1, r0
	movs r2, #0
	strh r5, [r0, #0x28]
	ldr r3, _08078E30 @ =0x0300002A
	adds r1, r1, r3
	strb r6, [r1]
	str r4, [r0]
	strh r4, [r0, #0x14]
	mov r1, r8
	strh r1, [r0, #0xc]
	mov r3, sb
	strb r3, [r0, #0x1a]
	strh r4, [r0, #0x16]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	movs r1, #0xa
	strb r1, [r0, #0x1c]
	strb r2, [r0, #0x1f]
	strh r4, [r0, #0x10]
	strh r4, [r0, #0x12]
	movs r1, #0x80
	lsls r1, r1, #0xc
	str r1, [r0, #8]
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08078E2C: .4byte sub_807A514
_08078E30: .4byte 0x0300002A

	thumb_func_start sub_8078E34
sub_8078E34: @ 0x08078E34
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov sb, r0
	adds r4, r1, #0
	ldr r0, _08078E98 @ =sub_807990C
	movs r2, #0x84
	lsls r2, r2, #6
	ldr r1, _08078E9C @ =sub_807A500
	str r1, [sp]
	movs r1, #0xc8
	movs r3, #0
	bl TaskCreate
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r0, r0, r1
	mov sl, r0
	movs r0, #0
	mov r2, sl
	strh r0, [r2]
	ldr r6, _08078EA0 @ =0x030000C4
	adds r0, r1, r6
	str r4, [r0]
	movs r3, #0
	ldr r0, _08078EA4 @ =0x03000004
	adds r5, r1, r0
	ldr r2, _08078EA8 @ =0x0300001C
	adds r6, r1, r2
	adds r0, #0x50
	adds r7, r1, r0
	adds r2, #0x70
	adds r2, r2, r1
	mov r8, r2
_08078E80:
	movs r2, #0
	adds r0, r3, #1
	mov ip, r0
	lsls r4, r3, #3
_08078E88:
	cmp r3, #2
	beq _08078EAC
	lsls r0, r2, #2
	adds r1, r0, r4
	adds r1, r5, r1
	add r0, sb
	ldr r0, [r0]
	b _08078EB8
	.align 2, 0
_08078E98: .4byte sub_807990C
_08078E9C: .4byte sub_807A500
_08078EA0: .4byte 0x030000C4
_08078EA4: .4byte 0x03000004
_08078EA8: .4byte 0x0300001C
_08078EAC:
	lsls r0, r2, #2
	adds r1, r0, #0
	adds r1, #0x10
	adds r1, r5, r1
	add r0, sb
	ldr r0, [r0, #8]
_08078EB8:
	str r0, [r1]
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #1
	bls _08078E88
	mov r1, ip
	lsls r0, r1, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #2
	bls _08078E80
	movs r0, #0x58
	bl VramMalloc
	mov r2, sl
	str r0, [r2, #0x1c]
	movs r4, #0
	movs r5, #0
	movs r1, #0x98
	lsls r1, r1, #3
	strh r1, [r6, #0x14]
	adds r1, #0x38
	strh r1, [r6, #0xc]
	movs r1, #4
	strb r1, [r6, #0x1a]
	strh r5, [r6, #0x16]
	movs r1, #0xff
	strb r1, [r6, #0x1b]
	movs r3, #0x10
	strb r3, [r6, #0x1c]
	strb r4, [r6, #0x1f]
	mov r2, sb
	ldr r1, [r2]
	strh r1, [r6, #0x10]
	ldr r1, [r2, #4]
	strh r1, [r6, #0x12]
	movs r2, #0x80
	lsls r2, r2, #6
	str r2, [r6, #8]
	movs r6, #0x80
	lsls r6, r6, #2
	adds r0, r0, r6
	mov r1, sl
	str r0, [r1, #0x54]
	movs r1, #0xa0
	lsls r1, r1, #3
	strh r1, [r7, #0x14]
	subs r1, #9
	strh r1, [r7, #0xc]
	strb r4, [r7, #0x1a]
	strh r5, [r7, #0x16]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r7, #0x1b]
	strb r3, [r7, #0x1c]
	movs r1, #9
	strb r1, [r7, #0x1f]
	mov r6, sb
	ldr r1, [r6]
	strh r1, [r7, #0x10]
	ldr r1, [r6, #4]
	strh r1, [r7, #0x12]
	str r2, [r7, #8]
	movs r1, #0x90
	lsls r1, r1, #3
	adds r0, r0, r1
	mov r6, r8
	str r0, [r6]
	strh r1, [r6, #0x14]
	ldr r0, _08078F70 @ =0x00000506
	strh r0, [r6, #0xc]
	strb r4, [r6, #0x1a]
	strh r5, [r6, #0x16]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r6, #0x1b]
	strb r3, [r6, #0x1c]
	strb r4, [r6, #0x1f]
	mov r1, sb
	ldr r0, [r1]
	strh r0, [r6, #0x10]
	ldr r0, [r1, #4]
	strh r0, [r6, #0x12]
	str r2, [r6, #8]
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08078F70: .4byte 0x00000506

	thumb_func_start sub_8078F74
sub_8078F74: @ 0x08078F74
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x20
	str r0, [sp, #0x14]
	mov sl, r2
	mov sb, r3
	ldr r0, [sp, #0x40]
	lsls r1, r1, #0x18
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsrs r1, r1, #8
	ldr r2, _08079014 @ =0xFFFF0000
	adds r1, r1, r2
	lsrs r7, r1, #0x10
	lsls r1, r7, #0x10
	cmp r1, #0
	bge _08078F9E
	b _08079180
_08078F9E:
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp, #0x18]
	lsls r0, r0, #1
	ldr r3, _08079018 @ =gSineTable
	adds r0, r0, r3
	str r0, [sp, #0x1c]
_08078FAC:
	asrs r0, r1, #0xe
	ldr r4, [sp, #0x14]
	adds r0, r0, r4
	ldr r5, [r0]
	ldr r1, _0807901C @ =0x040000D4
	adds r0, r5, #0
	adds r0, #0x10
	str r0, [r1]
	add r0, sp, #8
	str r0, [r1, #4]
	ldr r0, _08079020 @ =0x84000001
	str r0, [r1, #8]
	ldr r0, [r1, #8]
	ldr r1, [sp, #0x18]
	cmp r1, #0
	beq _08079024
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r1, r2
	lsls r0, r0, #1
	ldr r3, _08079018 @ =gSineTable
	adds r0, r0, r3
	movs r4, #0
	ldrsh r3, [r0, r4]
	movs r1, #0xc
	ldrsh r0, [r5, r1]
	adds r1, r3, #0
	muls r1, r0, r1
	asrs r1, r1, #6
	ldr r4, [sp, #0x1c]
	movs r0, #0
	ldrsh r2, [r4, r0]
	movs r4, #0xe
	ldrsh r0, [r5, r4]
	muls r0, r2, r0
	asrs r0, r0, #6
	subs r1, r1, r0
	str r1, [sp, #0xc]
	movs r1, #0xc
	ldrsh r0, [r5, r1]
	adds r1, r2, #0
	muls r1, r0, r1
	asrs r1, r1, #6
	movs r2, #0xe
	ldrsh r0, [r5, r2]
	muls r0, r3, r0
	asrs r0, r0, #6
	adds r1, r1, r0
	add r0, sp, #0xc
	str r1, [r0, #4]
	b _08079036
	.align 2, 0
_08079014: .4byte 0xFFFF0000
_08079018: .4byte gSineTable
_0807901C: .4byte 0x040000D4
_08079020: .4byte 0x84000001
_08079024:
	movs r3, #0xc
	ldrsh r0, [r5, r3]
	lsls r0, r0, #8
	str r0, [sp, #0xc]
	movs r4, #0xe
	ldrsh r0, [r5, r4]
	lsls r0, r0, #8
	add r1, sp, #0xc
	str r0, [r1, #4]
_08079036:
	mov r0, sb
	movs r2, #0
	ldrsh r1, [r0, r2]
	movs r0, #0x80
	lsls r0, r0, #1
	cmp r1, r0
	bne _08079058
	mov r3, sb
	movs r4, #2
	ldrsh r0, [r3, r4]
	lsls r2, r7, #0x10
	mov r8, r2
	mov r3, sl
	ldr r4, [r3]
	ldr r6, [r3, #4]
	cmp r0, r1
	beq _080790A0
_08079058:
	mov r4, sb
	movs r0, #0
	ldrsh r1, [r4, r0]
	ldr r0, [sp, #0xc]
	muls r0, r1, r0
	asrs r0, r0, #8
	str r0, [sp, #0xc]
	movs r2, #2
	ldrsh r1, [r4, r2]
	ldr r0, [sp, #0x10]
	muls r0, r1, r0
	asrs r0, r0, #8
	str r0, [sp, #0x10]
	movs r3, #0
	lsls r7, r7, #0x10
	mov r8, r7
	mov r7, sl
	ldr r4, [r7]
	ldr r6, [r7, #4]
_0807907E:
	lsls r0, r3, #1
	mov r2, sp
	adds r2, r2, r0
	adds r2, #8
	add r0, sb
	movs r7, #0
	ldrsh r1, [r0, r7]
	movs r7, #0
	ldrsh r0, [r2, r7]
	muls r0, r1, r0
	asrs r0, r0, #8
	strh r0, [r2]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #1
	bls _0807907E
_080790A0:
	ldr r0, [sp, #0xc]
	adds r0, r4, r0
	str r0, [sp, #0xc]
	add r2, sp, #0xc
	ldr r0, [r2, #4]
	adds r0, r6, r0
	str r0, [r2, #4]
	ldrh r0, [r5, #0xa]
	ldr r1, [sp, #0x18]
	adds r4, r1, r0
	ldr r3, _0807911C @ =0x000003FF
	adds r0, r3, #0
	ands r4, r0
	strh r4, [r5, #0x2c]
	ldrb r0, [r5, #2]
	cmp r0, #0
	beq _080790D4
	adds r0, r5, #0
	adds r0, #0x30
	ldrb r1, [r5, #2]
	str r4, [sp]
	ldr r7, [sp, #0x44]
	str r7, [sp, #4]
	add r3, sp, #8
	bl sub_8078F74
_080790D4:
	ldr r1, [sp, #0x44]
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldr r2, _08079120 @ =gCamera
	ldr r1, [r2]
	lsls r1, r1, #8
	ldr r0, [sp, #0xc]
	adds r0, r0, r1
	str r0, [r5, #0xc]
	ldr r1, [r2, #4]
	lsls r1, r1, #8
	ldr r0, [sp, #0x10]
	adds r0, r0, r1
	str r0, [r5, #8]
	mov r2, r8
	asrs r0, r2, #0x10
	ldr r3, [sp, #0x44]
	ldrb r3, [r3]
	adds r0, r0, r3
	movs r1, #2
	ands r0, r1
	cmp r0, #0
	beq _08079128
	movs r7, #0x80
	lsls r7, r7, #1
	adds r0, r4, r7
	lsls r0, r0, #1
	ldr r1, _08079124 @ =gSineTable
	adds r0, r0, r1
	ldrh r0, [r0]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x14
	strh r0, [r5, #0x10]
	adds r3, r1, #0
	b _0807913E
	.align 2, 0
_0807911C: .4byte 0x000003FF
_08079120: .4byte gCamera
_08079124: .4byte gSineTable
_08079128:
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r4, r2
	lsls r0, r0, #1
	ldr r3, _08079160 @ =gSineTable
	adds r0, r0, r3
	movs r7, #0
	ldrsh r0, [r0, r7]
	rsbs r0, r0, #0
	asrs r0, r0, #4
	strh r0, [r5, #0x10]
_0807913E:
	lsls r2, r4, #0x10
	mov r1, r8
	asrs r0, r1, #0x10
	ldr r4, [sp, #0x44]
	ldrb r4, [r4]
	adds r0, r0, r4
	movs r1, #4
	ands r0, r1
	cmp r0, #0
	beq _08079164
	lsrs r0, r2, #0xf
	adds r0, r0, r3
	ldrh r0, [r0]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x14
	b _08079170
	.align 2, 0
_08079160: .4byte gSineTable
_08079164:
	lsrs r0, r2, #0xf
	adds r0, r0, r3
	movs r7, #0
	ldrsh r0, [r0, r7]
	rsbs r0, r0, #0
	asrs r0, r0, #4
_08079170:
	strh r0, [r5, #0x12]
	ldr r0, _08079190 @ =0xFFFF0000
	add r0, r8
	lsrs r7, r0, #0x10
	lsls r1, r7, #0x10
	cmp r1, #0
	blt _08079180
	b _08078FAC
_08079180:
	add sp, #0x20
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08079190: .4byte 0xFFFF0000

@ Very similar to sub_8079468
	thumb_func_start sub_8079194
sub_8079194: @ 0x08079194
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x2c
	str r0, [sp, #0x24]
	adds r4, r1, #0
	str r3, [sp, #0x28]
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	mov sl, r2
	ldr r1, _080793B4 @ =gUnknown_080D5AE4
	add r0, sp, #0x10
	movs r2, #4
	bl memcpy
	add r1, sp, #0x20
	movs r0, #4
	strh r0, [r1]
	subs r4, #1
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	mov r8, r4
	lsls r0, r4, #0x10
	cmp r0, #0
	bge _080791D0
	b _08079454
_080791D0:
	asrs r0, r0, #0xe
	ldr r1, [sp, #0x24]
	adds r0, r0, r1
	ldr r5, [r0]
	ldr r6, [r5, #0xc]
	ldr r7, [r5, #8]
	ldrh r0, [r5, #0x12]
	adds r0, #0x40
	movs r2, #0
	strh r0, [r5, #0x12]
	movs r3, #0x10
	ldrsh r0, [r5, r3]
	adds r6, r6, r0
	movs r1, #0x12
	ldrsh r0, [r5, r1]
	adds r7, r7, r0
	asrs r0, r7, #8
	asrs r1, r6, #8
	str r2, [sp]
	ldr r2, _080793B8 @ =sub_805217C
	str r2, [sp, #4]
	movs r2, #1
	movs r3, #8
	bl sub_8052394
	adds r2, r0, #0
	cmp r2, #0
	bge _0807922A
	movs r3, #0x12
	ldrsh r0, [r5, r3]
	cmp r0, #0
	ble _0807922A
	lsls r1, r0, #6
	subs r0, r0, r1
	asrs r0, r0, #6
	strh r0, [r5, #0x12]
	movs r3, #0x10
	ldrsh r1, [r5, r3]
	lsls r0, r1, #6
	subs r0, r0, r1
	asrs r0, r0, #6
	strh r0, [r5, #0x10]
	adds r0, r2, #1
	lsls r0, r0, #8
	adds r7, r7, r0
_0807922A:
	ldr r0, _080793BC @ =gCamera
	ldr r1, [r0]
	asrs r4, r6, #8
	cmp r1, r4
	ble _0807923C
	movs r2, #0x10
	ldrsh r0, [r5, r2]
	cmp r0, #0
	blt _0807924C
_0807923C:
	adds r0, r1, #0
	adds r0, #0xf0
	cmp r0, r4
	bge _08079254
	movs r3, #0x10
	ldrsh r0, [r5, r3]
	cmp r0, #0
	ble _08079254
_0807924C:
	movs r1, #0x10
	ldrsh r0, [r5, r1]
	rsbs r0, r0, #0
	strh r0, [r5, #0x10]
_08079254:
	str r6, [r5, #0xc]
	str r7, [r5, #8]
	ldr r0, _080793C0 @ =gStageData
	mov r3, r8
	lsls r2, r3, #0x10
	asrs r1, r2, #0xd
	ldr r0, [r0, #0x1c]
	adds r3, r0, r1
	movs r0, #0x1f
	ands r3, r0
	mov sb, r2
	cmp r3, #0
	bne _0807928A
	lsls r1, r4, #0x10
	asrs r1, r1, #0x10
	lsls r2, r7, #8
	asrs r2, r2, #0x10
	str r3, [sp]
	movs r0, #0x14
	str r0, [sp, #4]
	str r3, [sp, #8]
	ldr r0, [sp, #0x28]
	str r0, [sp, #0xc]
	movs r0, #6
	movs r3, #0
	bl sub_8079758
_0807928A:
	ldr r1, _080793BC @ =gCamera
	ldr r0, [r1]
	lsls r0, r0, #8
	subs r6, r6, r0
	ldr r0, [r1, #4]
	lsls r0, r0, #8
	subs r7, r7, r0
	ldrb r0, [r5, #2]
	cmp r0, #0
	beq _080792AC
	adds r0, r5, #0
	adds r0, #0x30
	ldrb r1, [r5, #2]
	mov r2, sl
	ldr r3, [sp, #0x28]
	bl sub_8079194
_080792AC:
	movs r1, #0x2c
	ldrsh r0, [r5, r1]
	cmp r0, #0
	beq _080792BA
	ldrh r0, [r5, #0x2c]
	mov r2, sp
	strh r0, [r2, #0x20]
_080792BA:
	ldr r4, [r5, #0x14]
	cmp r4, #0
	bne _080792C2
	b _08079444
_080792C2:
	ldr r3, [r5, #0x18]
	mov ip, r3
	ldr r1, [r3]
	movs r0, #4
	ands r1, r0
	ldr r3, [r4, #8]
	cmp r1, #0
	beq _080792DE
	movs r0, #0x80
	lsls r0, r0, #7
	ands r0, r3
	cmp r0, #0
	beq _080792DE
	b _08079444
_080792DE:
	ldr r2, _080793C4 @ =0xFFFFCFFF
	ands r2, r3
	str r2, [r4, #8]
	ldr r1, [r5, #4]
	movs r3, #0xc0
	lsls r3, r3, #0x10
	ands r1, r3
	lsrs r1, r1, #0x16
	mov r8, r1
	mov r1, ip
	ldr r0, [r1]
	ands r0, r3
	lsrs r0, r0, #0x16
	mov r3, r8
	adds r1, r3, r0
	lsls r1, r1, #0xc
	orrs r2, r1
	str r2, [r4, #8]
	ldr r1, [r5, #4]
	ldr r2, _080793C8 @ =0x003FE000
	ands r1, r2
	lsrs r1, r1, #0xd
	mov r3, ip
	ldr r0, [r3]
	ands r0, r2
	lsrs r0, r0, #0xd
	adds r1, r1, r0
	lsls r1, r1, #6
	strh r1, [r4, #0x14]
	ldr r0, [r5, #0x18]
	ldr r0, [r0]
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	beq _080793E2
	mov r0, sp
	ldrh r0, [r0, #0x20]
	mov r8, r0
	mov r1, sp
	movs r2, #0x20
	ldrsh r0, [r1, r2]
	cmp r0, #0
	bne _08079350
	ldr r0, [r5, #0x14]
	ldr r0, [r0, #8]
	movs r1, #0xc0
	lsls r1, r1, #9
	ands r0, r1
	lsrs r0, r0, #0xf
	cmp r0, #1
	bls _080793E2
	ldr r0, _080793CC @ =gDispCnt
	ldrh r1, [r0]
	movs r0, #3
	ands r0, r1
	cmp r0, #0
	beq _080793E2
_08079350:
	ldr r4, [r5, #0x14]
	ldr r1, [r4, #8]
	movs r0, #0x20
	rsbs r0, r0, #0
	ands r1, r0
	str r1, [r4, #8]
	ldr r3, _080793D0 @ =gUnknown_03002C24
	ldrb r2, [r3]
	movs r0, #0x20
	orrs r0, r2
	orrs r1, r0
	str r1, [r4, #8]
	ldrb r0, [r3]
	adds r0, #1
	strb r0, [r3]
	ldr r2, [r5, #0x14]
	ldr r0, [r2, #8]
	movs r1, #0x40
	orrs r0, r1
	str r0, [r2, #8]
	add r3, sp, #0x14
	mov r0, r8
	strh r0, [r3]
	add r0, sp, #0x10
	ldrh r0, [r0]
	strh r0, [r3, #2]
	add r0, sp, #0x10
	ldrh r0, [r0, #2]
	strh r0, [r3, #4]
	asrs r0, r6, #8
	strh r0, [r3, #6]
	asrs r0, r7, #8
	strh r0, [r3, #8]
	ldr r0, [r5, #0x20]
	ldr r0, [r0, #4]
	movs r1, #0xf0
	lsls r1, r1, #0x18
	ands r0, r1
	cmp r0, #0
	beq _080793D8
	ldr r0, [r5, #0x14]
	ldr r2, [r0, #8]
	lsrs r2, r2, #0xf
	lsls r2, r2, #4
	ldr r1, _080793D4 @ =gEmptyTask
	adds r2, r2, r1
	adds r1, r3, #0
	bl sub_80BECF8
	b _08079422
	.align 2, 0
_080793B4: .4byte gUnknown_080D5AE4
_080793B8: .4byte sub_805217C
_080793BC: .4byte gCamera
_080793C0: .4byte gStageData
_080793C4: .4byte 0xFFFFCFFF
_080793C8: .4byte 0x003FE000
_080793CC: .4byte gDispCnt
_080793D0: .4byte gUnknown_03002C24
_080793D4: .4byte gEmptyTask
_080793D8:
	ldr r0, [r5, #0x14]
	adds r1, r3, #0
	bl TransformSprite
	b _08079422
_080793E2:
	ldr r1, [r5, #0x14]
	asrs r0, r6, #8
	strh r0, [r1, #0x10]
	ldr r1, [r5, #0x14]
	asrs r0, r7, #8
	strh r0, [r1, #0x12]
	ldr r3, [r5, #0x14]
	ldr r2, [r3, #8]
	movs r0, #0x21
	rsbs r0, r0, #0
	ands r2, r0
	str r2, [r3, #8]
	ldr r0, [r5, #4]
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _0807940C
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r2, r0
	str r2, [r3, #8]
_0807940C:
	ldr r0, [r5, #4]
	movs r1, #2
	ands r0, r1
	cmp r0, #0
	beq _08079422
	ldr r0, [r5, #0x14]
	ldr r1, [r0, #8]
	movs r2, #0x80
	lsls r2, r2, #4
	orrs r1, r2
	str r1, [r0, #8]
_08079422:
	mov r1, sl
	cmp r1, #0
	beq _08079444
	ldr r2, [r5, #0x14]
	ldr r0, [r2, #8]
	movs r1, #0xc0
	lsls r1, r1, #9
	ands r0, r1
	cmp r0, #0
	beq _0807943E
	adds r0, r2, #0
	bl sub_80BE46C
	b _08079444
_0807943E:
	adds r0, r2, #0
	bl DisplaySprite
_08079444:
	ldr r0, _08079464 @ =0xFFFF0000
	add r0, sb
	lsrs r0, r0, #0x10
	mov r8, r0
	lsls r0, r0, #0x10
	cmp r0, #0
	blt _08079454
	b _080791D0
_08079454:
	add sp, #0x2c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08079464: .4byte 0xFFFF0000

@ Very similar to sub_8079194
	thumb_func_start sub_8079468
sub_8079468: @ 0x08079468
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x2c
	str r0, [sp, #0x24]
	adds r4, r1, #0
	str r3, [sp, #0x28]
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	mov sl, r2
	ldr r1, _080796A0 @ =gUnknown_080D5AE4
	add r0, sp, #0x10
	movs r2, #4
	bl memcpy
	add r1, sp, #0x20
	movs r0, #4
	strh r0, [r1]
	subs r4, #1
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	mov r8, r4
	lsls r0, r4, #0x10
	cmp r0, #0
	bge _080794A4
	b _08079744
_080794A4:
	asrs r0, r0, #0xe
	ldr r1, [sp, #0x24]
	adds r0, r0, r1
	ldr r5, [r0]
	ldr r6, [r5, #0xc]
	ldr r7, [r5, #8]
	ldrh r2, [r5, #0x12]
	adds r1, r2, #0
	adds r1, #0x40
	movs r3, #0
	strh r1, [r5, #0x12]
	movs r4, #0x10
	ldrsh r0, [r5, r4]
	adds r6, r6, r0
	movs r4, #0x12
	ldrsh r0, [r5, r4]
	adds r7, r7, r0
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	ldr r0, _080796A4 @ =0xFFFFFC00
	cmp r1, r0
	bge _080794D8
	movs r1, #0x88
	lsls r1, r1, #3
	adds r0, r2, r1
	strh r0, [r5, #0x12]
_080794D8:
	asrs r0, r7, #8
	asrs r1, r6, #8
	str r3, [sp]
	ldr r2, _080796A8 @ =sub_805217C
	str r2, [sp, #4]
	movs r2, #1
	movs r3, #8
	bl sub_8052394
	adds r2, r0, #0
	cmp r2, #0
	bge _08079512
	movs r3, #0x12
	ldrsh r0, [r5, r3]
	cmp r0, #0
	ble _08079512
	lsls r1, r0, #6
	subs r0, r0, r1
	asrs r0, r0, #6
	strh r0, [r5, #0x12]
	movs r0, #0x10
	ldrsh r1, [r5, r0]
	lsls r0, r1, #6
	subs r0, r0, r1
	asrs r0, r0, #6
	strh r0, [r5, #0x10]
	adds r0, r2, #1
	lsls r0, r0, #8
	adds r7, r7, r0
_08079512:
	ldr r0, _080796AC @ =gCamera
	ldr r1, [r0]
	adds r0, r1, #0
	adds r0, #0x10
	asrs r4, r6, #8
	cmp r0, r4
	ble _08079528
	movs r2, #0x10
	ldrsh r0, [r5, r2]
	cmp r0, #0
	blt _08079538
_08079528:
	adds r0, r1, #0
	adds r0, #0xe0
	cmp r0, r4
	bge _08079540
	movs r3, #0x10
	ldrsh r0, [r5, r3]
	cmp r0, #0
	ble _08079540
_08079538:
	movs r1, #0x10
	ldrsh r0, [r5, r1]
	rsbs r0, r0, #0
	strh r0, [r5, #0x10]
_08079540:
	str r6, [r5, #0xc]
	str r7, [r5, #8]
	ldr r0, _080796B0 @ =gStageData
	mov r3, r8
	lsls r2, r3, #0x10
	asrs r1, r2, #0xd
	ldr r0, [r0, #0x1c]
	adds r3, r0, r1
	movs r0, #0x1f
	ands r3, r0
	mov sb, r2
	cmp r3, #0
	bne _08079576
	lsls r1, r4, #0x10
	asrs r1, r1, #0x10
	lsls r2, r7, #8
	asrs r2, r2, #0x10
	str r3, [sp]
	movs r0, #0x14
	str r0, [sp, #4]
	str r3, [sp, #8]
	ldr r4, [sp, #0x28]
	str r4, [sp, #0xc]
	movs r0, #6
	movs r3, #0
	bl sub_8079758
_08079576:
	ldr r1, _080796AC @ =gCamera
	ldr r0, [r1]
	lsls r0, r0, #8
	subs r6, r6, r0
	ldr r0, [r1, #4]
	lsls r0, r0, #8
	subs r7, r7, r0
	ldrb r0, [r5, #2]
	cmp r0, #0
	beq _08079598
	adds r0, r5, #0
	adds r0, #0x30
	ldrb r1, [r5, #2]
	mov r2, sl
	ldr r3, [sp, #0x28]
	bl sub_8079194
_08079598:
	movs r1, #0x2c
	ldrsh r0, [r5, r1]
	cmp r0, #0
	beq _080795A6
	ldrh r0, [r5, #0x2c]
	mov r2, sp
	strh r0, [r2, #0x20]
_080795A6:
	ldr r4, [r5, #0x14]
	cmp r4, #0
	bne _080795AE
	b _08079734
_080795AE:
	ldr r3, [r5, #0x18]
	mov ip, r3
	ldr r1, [r3]
	movs r0, #4
	ands r1, r0
	ldr r3, [r4, #8]
	cmp r1, #0
	beq _080795CA
	movs r0, #0x80
	lsls r0, r0, #7
	ands r0, r3
	cmp r0, #0
	beq _080795CA
	b _08079734
_080795CA:
	ldr r2, _080796B4 @ =0xFFFFCFFF
	ands r2, r3
	str r2, [r4, #8]
	ldr r1, [r5, #4]
	movs r3, #0xc0
	lsls r3, r3, #0x10
	ands r1, r3
	lsrs r1, r1, #0x16
	mov r8, r1
	mov r1, ip
	ldr r0, [r1]
	ands r0, r3
	lsrs r0, r0, #0x16
	mov r3, r8
	adds r1, r3, r0
	lsls r1, r1, #0xc
	orrs r2, r1
	str r2, [r4, #8]
	ldr r1, [r5, #4]
	ldr r2, _080796B8 @ =0x003FE000
	ands r1, r2
	lsrs r1, r1, #0xd
	mov r3, ip
	ldr r0, [r3]
	ands r0, r2
	lsrs r0, r0, #0xd
	adds r1, r1, r0
	lsls r1, r1, #6
	strh r1, [r4, #0x14]
	ldr r0, [r5, #0x18]
	ldr r0, [r0]
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	beq _080796D2
	mov r4, sp
	ldrh r4, [r4, #0x20]
	mov r8, r4
	mov r1, sp
	movs r2, #0x20
	ldrsh r0, [r1, r2]
	cmp r0, #0
	bne _0807963C
	ldr r0, [r5, #0x14]
	ldr r0, [r0, #8]
	movs r1, #0xc0
	lsls r1, r1, #9
	ands r0, r1
	lsrs r0, r0, #0xf
	cmp r0, #1
	bls _080796D2
	ldr r0, _080796BC @ =gDispCnt
	ldrh r1, [r0]
	movs r0, #3
	ands r0, r1
	cmp r0, #0
	beq _080796D2
_0807963C:
	ldr r4, [r5, #0x14]
	ldr r1, [r4, #8]
	movs r0, #0x20
	rsbs r0, r0, #0
	ands r1, r0
	str r1, [r4, #8]
	ldr r3, _080796C0 @ =gUnknown_03002C24
	ldrb r2, [r3]
	movs r0, #0x20
	orrs r0, r2
	orrs r1, r0
	str r1, [r4, #8]
	ldrb r0, [r3]
	adds r0, #1
	strb r0, [r3]
	ldr r2, [r5, #0x14]
	ldr r0, [r2, #8]
	movs r1, #0x40
	orrs r0, r1
	str r0, [r2, #8]
	add r3, sp, #0x14
	mov r4, r8
	strh r4, [r3]
	add r0, sp, #0x10
	ldrh r0, [r0]
	strh r0, [r3, #2]
	add r0, sp, #0x10
	ldrh r0, [r0, #2]
	strh r0, [r3, #4]
	asrs r0, r6, #8
	strh r0, [r3, #6]
	asrs r0, r7, #8
	strh r0, [r3, #8]
	ldr r0, [r5, #0x20]
	ldr r0, [r0, #4]
	movs r1, #0xf0
	lsls r1, r1, #0x18
	ands r0, r1
	cmp r0, #0
	beq _080796C8
	ldr r0, [r5, #0x14]
	ldr r2, [r0, #8]
	lsrs r2, r2, #0xf
	lsls r2, r2, #4
	ldr r1, _080796C4 @ =gEmptyTask
	adds r2, r2, r1
	adds r1, r3, #0
	bl sub_80BECF8
	b _08079712
	.align 2, 0
_080796A0: .4byte gUnknown_080D5AE4
_080796A4: .4byte 0xFFFFFC00
_080796A8: .4byte sub_805217C
_080796AC: .4byte gCamera
_080796B0: .4byte gStageData
_080796B4: .4byte 0xFFFFCFFF
_080796B8: .4byte 0x003FE000
_080796BC: .4byte gDispCnt
_080796C0: .4byte gUnknown_03002C24
_080796C4: .4byte gEmptyTask
_080796C8:
	ldr r0, [r5, #0x14]
	adds r1, r3, #0
	bl TransformSprite
	b _08079712
_080796D2:
	ldr r1, [r5, #0x14]
	asrs r0, r6, #8
	strh r0, [r1, #0x10]
	ldr r1, [r5, #0x14]
	asrs r0, r7, #8
	strh r0, [r1, #0x12]
	ldr r3, [r5, #0x14]
	ldr r2, [r3, #8]
	movs r0, #0x21
	rsbs r0, r0, #0
	ands r2, r0
	str r2, [r3, #8]
	ldr r0, [r5, #4]
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _080796FC
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r2, r0
	str r2, [r3, #8]
_080796FC:
	ldr r0, [r5, #4]
	movs r1, #2
	ands r0, r1
	cmp r0, #0
	beq _08079712
	ldr r0, [r5, #0x14]
	ldr r1, [r0, #8]
	movs r2, #0x80
	lsls r2, r2, #4
	orrs r1, r2
	str r1, [r0, #8]
_08079712:
	mov r0, sl
	cmp r0, #0
	beq _08079734
	ldr r2, [r5, #0x14]
	ldr r0, [r2, #8]
	movs r1, #0xc0
	lsls r1, r1, #9
	ands r0, r1
	cmp r0, #0
	beq _0807972E
	adds r0, r2, #0
	bl sub_80BE46C
	b _08079734
_0807972E:
	adds r0, r2, #0
	bl DisplaySprite
_08079734:
	ldr r0, _08079754 @ =0xFFFF0000
	add r0, sb
	lsrs r0, r0, #0x10
	mov r8, r0
	lsls r0, r0, #0x10
	cmp r0, #0
	blt _08079744
	b _080794A4
_08079744:
	add sp, #0x2c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08079754: .4byte 0xFFFF0000

	thumb_func_start sub_8079758
sub_8079758: @ 0x08079758
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	adds r4, r3, #0
	ldr r6, [sp, #0x30]
	ldr r5, [sp, #0x34]
	ldr r3, [sp, #0x38]
	mov r8, r3
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov sl, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	str r1, [sp, #4]
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	str r2, [sp, #8]
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	lsls r6, r6, #0x10
	lsrs r6, r6, #0x10
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	mov r0, r8
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r8, r0
	ldr r0, _0807980C @ =sub_807989C
	movs r2, #0x84
	lsls r2, r2, #6
	ldr r1, _08079810 @ =sub_807A4E4
	str r1, [sp]
	movs r1, #0x38
	movs r3, #0
	bl TaskCreate
	str r0, [sp, #0xc]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r0, r0, r1
	mov sb, r0
	ldr r2, _08079814 @ =0x03000010
	adds r7, r1, r2
	strb r5, [r0, #0xe]
	ldr r2, _08079818 @ =gSineTable
	ldr r1, _0807981C @ =0x000003FF
	ands r1, r6
	movs r3, #0x80
	lsls r3, r3, #1
	adds r0, r1, r3
	lsls r0, r0, #1
	adds r0, r0, r2
	movs r5, #0
	ldrsh r0, [r0, r5]
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	muls r0, r4, r0
	asrs r0, r0, #0xe
	mov r3, sb
	strh r0, [r3, #8]
	lsls r1, r1, #1
	adds r1, r1, r2
	movs r5, #0
	ldrsh r0, [r1, r5]
	muls r0, r4, r0
	asrs r0, r0, #0xe
	strh r0, [r3, #0xa]
	mov r0, r8
	strh r0, [r3, #0xc]
	ldr r1, [sp, #0x3c]
	cmp r1, #0
	beq _08079824
	movs r0, #0
	strb r0, [r3, #0xf]
	ldr r1, _08079820 @ =gUnknown_080D5A6C
	mov r3, sl
	lsls r2, r3, #1
	adds r0, r2, r3
	lsls r0, r0, #2
	adds r1, #8
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r5, [sp, #0x3c]
	adds r0, r5, r0
	adds r4, r2, #0
	b _0807983E
	.align 2, 0
_0807980C: .4byte sub_807989C
_08079810: .4byte sub_807A4E4
_08079814: .4byte 0x03000010
_08079818: .4byte gSineTable
_0807981C: .4byte 0x000003FF
_08079820: .4byte gUnknown_080D5A6C
_08079824:
	movs r0, #1
	mov r1, sb
	strb r0, [r1, #0xf]
	ldr r1, _08079898 @ =gUnknown_080D5A6C
	mov r2, sl
	lsls r4, r2, #1
	adds r0, r4, r2
	lsls r0, r0, #2
	adds r1, #4
	adds r0, r0, r1
	ldr r0, [r0]
	bl VramMalloc
_0807983E:
	str r0, [r7]
	movs r3, #0
	movs r2, #0
	movs r0, #0x80
	lsls r0, r0, #2
	strh r0, [r7, #0x14]
	ldr r1, _08079898 @ =gUnknown_080D5A6C
	mov r5, sl
	adds r0, r4, r5
	lsls r0, r0, #2
	adds r0, r0, r1
	ldrh r1, [r0]
	strh r1, [r7, #0xc]
	ldrb r0, [r0, #2]
	strb r0, [r7, #0x1a]
	strh r2, [r7, #0x16]
	movs r0, #0xff
	strb r0, [r7, #0x1b]
	movs r0, #0x10
	strb r0, [r7, #0x1c]
	strb r3, [r7, #0x1f]
	strh r2, [r7, #0x10]
	strh r2, [r7, #0x12]
	movs r0, #0x80
	lsls r0, r0, #5
	str r0, [r7, #8]
	ldr r1, [sp, #4]
	lsls r0, r1, #0x10
	asrs r0, r0, #8
	mov r2, sb
	str r0, [r2]
	ldr r3, [sp, #8]
	lsls r0, r3, #0x10
	asrs r0, r0, #8
	str r0, [r2, #4]
	ldr r0, [sp, #0xc]
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08079898: .4byte gUnknown_080D5A6C

	thumb_func_start sub_807989C
sub_807989C: @ 0x0807989C
	push {r4, lr}
	ldr r0, _080798BC @ =gCurTask
	ldr r2, [r0]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r3, r1, r0
	adds r0, #0x10
	adds r4, r1, r0
	ldrb r0, [r3, #0xe]
	cmp r0, #0
	bne _080798C0
	adds r0, r2, #0
	bl TaskDestroy
	b _08079900
	.align 2, 0
_080798BC: .4byte gCurTask
_080798C0:
	subs r0, #1
	strb r0, [r3, #0xe]
	ldrh r0, [r3, #0xc]
	ldrh r1, [r3, #0xa]
	adds r0, r0, r1
	strh r0, [r3, #0xa]
	movs r1, #8
	ldrsh r0, [r3, r1]
	ldr r1, [r3]
	adds r1, r1, r0
	str r1, [r3]
	movs r0, #0xa
	ldrsh r2, [r3, r0]
	ldr r0, [r3, #4]
	adds r0, r0, r2
	str r0, [r3, #4]
	asrs r1, r1, #8
	ldr r2, _08079908 @ =gCamera
	ldr r0, [r2]
	subs r1, r1, r0
	strh r1, [r4, #0x10]
	ldr r0, [r3, #4]
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
_08079900:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08079908: .4byte gCamera

	thumb_func_start sub_807990C
sub_807990C: @ 0x0807990C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r2, _08079980 @ =gCurTask
	ldr r0, [r2]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r1, r0
	movs r5, #0
	mov r8, r2
	adds r0, #4
	adds r0, r0, r1
	mov ip, r0
	ldr r3, _08079984 @ =gCamera
	ldr r0, _08079988 @ =0x03000008
	adds r7, r1, r0
_0807992E:
	lsls r2, r5, #3
	subs r0, r2, r5
	lsls r0, r0, #3
	adds r0, #0x1c
	adds r4, r6, r0
	mov r1, ip
	adds r0, r1, r2
	ldr r0, [r0]
	ldr r1, [r3]
	subs r0, r0, r1
	strh r0, [r4, #0x10]
	adds r2, r7, r2
	ldr r0, [r2]
	ldr r1, [r3, #4]
	subs r0, r0, r1
	strh r0, [r4, #0x12]
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #2
	bls _0807992E
	ldrh r0, [r6]
	adds r0, #1
	strh r0, [r6]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x96
	bhi _08079968
	b _08079A84
_08079968:
	movs r0, #0
	strh r0, [r6]
	ldr r0, _0807998C @ =gStageData
	ldrb r0, [r0, #9]
	cmp r0, #8
	bls _08079976
	b _08079A7C
_08079976:
	lsls r0, r0, #2
	ldr r1, _08079990 @ =_08079994
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08079980: .4byte gCurTask
_08079984: .4byte gCamera
_08079988: .4byte 0x03000008
_0807998C: .4byte gStageData
_08079990: .4byte _08079994
_08079994: @ jump table
	.4byte _08079A7C @ case 0
	.4byte _080799B8 @ case 1
	.4byte _08079A7C @ case 2
	.4byte _080799D8 @ case 3
	.4byte _08079A40 @ case 4
	.4byte _08079A04 @ case 5
	.4byte _08079A7C @ case 6
	.4byte _08079A7C @ case 7
	.4byte _08079A7C @ case 8
_080799B8:
	adds r4, r6, #0
	adds r4, #0x8c
	movs r1, #0
	ldr r0, _080799D0 @ =0x0000050A
	strh r0, [r4, #0xc]
	strb r1, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	mov r0, r8
	ldr r1, [r0]
	ldr r0, _080799D4 @ =sub_8079C60
	b _08079A82
	.align 2, 0
_080799D0: .4byte 0x0000050A
_080799D4: .4byte sub_8079C60
_080799D8:
	adds r4, r6, #0
	adds r4, #0x8c
	movs r1, #0
	ldr r0, _080799FC @ =0x00000517
	strh r0, [r4, #0xc]
	strb r1, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	str r0, [r4, #8]
	mov r0, r8
	ldr r1, [r0]
	ldr r0, _08079A00 @ =sub_8079B8C
	b _08079A82
	.align 2, 0
_080799FC: .4byte 0x00000517
_08079A00: .4byte sub_8079B8C
_08079A04:
	adds r4, r6, #0
	adds r4, #0x1c
	movs r2, #0
	movs r1, #0
	movs r0, #0xb0
	lsls r0, r0, #2
	strh r0, [r4, #0x14]
	str r1, [r4, #8]
	adds r4, #0x38
	adds r0, #0x40
	strh r0, [r4, #0x14]
	str r1, [r4, #8]
	adds r4, #0x38
	ldr r0, _08079A38 @ =0x0000050A
	strh r0, [r4, #0xc]
	strb r2, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	movs r0, #0xa0
	lsls r0, r0, #2
	strh r0, [r4, #0x14]
	str r1, [r4, #8]
	mov r0, r8
	ldr r1, [r0]
	ldr r0, _08079A3C @ =sub_8079D40
	b _08079A82
	.align 2, 0
_08079A38: .4byte 0x0000050A
_08079A3C: .4byte sub_8079D40
_08079A40:
	adds r4, r6, #0
	adds r4, #0x1c
	movs r2, #0
	movs r1, #0
	movs r0, #0xb0
	lsls r0, r0, #2
	strh r0, [r4, #0x14]
	str r1, [r4, #8]
	adds r4, #0x38
	adds r0, #0x40
	strh r0, [r4, #0x14]
	str r1, [r4, #8]
	adds r4, #0x38
	ldr r0, _08079A74 @ =0x0000050A
	strh r0, [r4, #0xc]
	strb r2, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	movs r0, #0xa0
	lsls r0, r0, #2
	strh r0, [r4, #0x14]
	str r1, [r4, #8]
	mov r0, r8
	ldr r1, [r0]
	ldr r0, _08079A78 @ =sub_8079DFC
	b _08079A82
	.align 2, 0
_08079A74: .4byte 0x0000050A
_08079A78: .4byte sub_8079DFC
_08079A7C:
	mov r0, r8
	ldr r1, [r0]
	ldr r0, _08079AB0 @ =sub_8079AB4
_08079A82:
	str r0, [r1, #8]
_08079A84:
	movs r5, #0
_08079A86:
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, #0x1c
	adds r4, r6, r0
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #2
	bls _08079A86
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08079AB0: .4byte sub_8079AB4

	thumb_func_start sub_8079AB4
sub_8079AB4: @ 0x08079AB4
	push {r4, r5, r6, r7, lr}
	ldr r2, _08079B7C @ =gCurTask
	ldr r0, [r2]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r1, r0
	movs r5, #0
	mov ip, r2
	ldr r7, _08079B80 @ =gCamera
_08079AC8:
	adds r3, r6, #0
	adds r3, #8
	cmp r5, #2
	beq _08079ADA
	lsls r1, r5, #3
	adds r1, r3, r1
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
_08079ADA:
	lsls r2, r5, #3
	subs r0, r2, r5
	lsls r0, r0, #3
	adds r0, #0x1c
	adds r4, r6, r0
	adds r0, r6, #4
	adds r0, r0, r2
	ldr r0, [r0]
	ldr r1, [r7]
	subs r0, r0, r1
	strh r0, [r4, #0x10]
	adds r2, r3, r2
	ldr r0, [r2]
	ldr r1, [r7, #4]
	subs r0, r0, r1
	strh r0, [r4, #0x12]
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #2
	bls _08079AC8
	ldrh r0, [r6]
	adds r0, #1
	strh r0, [r6]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x32
	bls _08079B52
	adds r4, r6, #0
	adds r4, #0x1c
	movs r0, #8
	strb r0, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	str r0, [r4, #8]
	adds r4, #0x38
	ldr r0, [r4, #8]
	orrs r0, r1
	str r0, [r4, #8]
	adds r4, #0x38
	ldr r0, _08079B84 @ =0x0000050A
	strh r0, [r4, #0xc]
	movs r0, #0
	strb r0, [r4, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r4, #0x1b]
	ldr r0, [r4, #8]
	orrs r0, r1
	str r0, [r4, #8]
	movs r0, #0
	strh r0, [r6]
	mov r0, ip
	ldr r1, [r0]
	ldr r0, _08079B88 @ =sub_8079EDC
	str r0, [r1, #8]
_08079B52:
	movs r5, #0
_08079B54:
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, #0x1c
	adds r4, r6, r0
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #2
	bls _08079B54
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08079B7C: .4byte gCurTask
_08079B80: .4byte gCamera
_08079B84: .4byte 0x0000050A
_08079B88: .4byte sub_8079EDC

	thumb_func_start sub_8079B8C
sub_8079B8C: @ 0x08079B8C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r2, _08079C4C @ =gCurTask
	ldr r0, [r2]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r1, r0
	movs r5, #0
	mov r8, r2
	adds r0, #8
	adds r0, r0, r1
	mov ip, r0
	ldr r3, _08079C50 @ =gCamera
	ldr r0, _08079C54 @ =0x03000004
	adds r7, r1, r0
_08079BAE:
	lsls r1, r5, #3
	mov r0, ip
	adds r2, r0, r1
	ldr r0, [r2]
	subs r0, #1
	str r0, [r2]
	subs r0, r1, r5
	lsls r0, r0, #3
	adds r0, #0x1c
	adds r4, r6, r0
	adds r1, r7, r1
	ldr r0, [r1]
	ldr r1, [r3]
	subs r0, r0, r1
	strh r0, [r4, #0x10]
	ldr r0, [r2]
	ldr r1, [r3, #4]
	subs r0, r0, r1
	strh r0, [r4, #0x12]
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #2
	bls _08079BAE
	ldrh r0, [r6]
	adds r0, #1
	strh r0, [r6]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x8c
	bls _08079C20
	adds r4, r6, #0
	adds r4, #0x1c
	movs r0, #8
	strb r0, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	str r0, [r4, #8]
	adds r4, #0x38
	ldr r0, [r4, #8]
	orrs r0, r1
	str r0, [r4, #8]
	adds r4, #0x38
	ldr r0, [r4, #8]
	ldr r1, _08079C58 @ =0xFFFFFBFF
	ands r0, r1
	str r0, [r4, #8]
	movs r0, #0
	strh r0, [r6]
	mov r0, r8
	ldr r1, [r0]
	ldr r0, _08079C5C @ =sub_8079EDC
	str r0, [r1, #8]
_08079C20:
	movs r5, #0
_08079C22:
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, #0x1c
	adds r4, r6, r0
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #2
	bls _08079C22
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08079C4C: .4byte gCurTask
_08079C50: .4byte gCamera
_08079C54: .4byte 0x03000004
_08079C58: .4byte 0xFFFFFBFF
_08079C5C: .4byte sub_8079EDC

	thumb_func_start sub_8079C60
sub_8079C60: @ 0x08079C60
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r2, _08079D2C @ =gCurTask
	ldr r0, [r2]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r1, r0
	movs r5, #0
	mov r8, r2
	adds r0, #8
	adds r0, r0, r1
	mov ip, r0
	ldr r3, _08079D30 @ =gCamera
	ldr r0, _08079D34 @ =0x03000004
	adds r7, r1, r0
_08079C82:
	lsls r1, r5, #3
	mov r0, ip
	adds r2, r0, r1
	ldr r0, [r2]
	subs r0, #1
	str r0, [r2]
	subs r0, r1, r5
	lsls r0, r0, #3
	adds r0, #0x1c
	adds r4, r6, r0
	adds r1, r7, r1
	ldr r0, [r1]
	ldr r1, [r3]
	subs r0, r0, r1
	strh r0, [r4, #0x10]
	ldr r0, [r2]
	ldr r1, [r3, #4]
	subs r0, r0, r1
	strh r0, [r4, #0x12]
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #2
	bls _08079C82
	ldrh r0, [r6]
	adds r0, #1
	strh r0, [r6]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x64
	bls _08079D00
	adds r4, r6, #0
	adds r4, #0x1c
	movs r0, #8
	strb r0, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	str r0, [r4, #8]
	adds r4, #0x38
	ldr r0, [r4, #8]
	orrs r0, r1
	str r0, [r4, #8]
	adds r4, #0x38
	ldr r0, _08079D38 @ =0x0000050A
	strh r0, [r4, #0xc]
	movs r0, #0
	strb r0, [r4, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r4, #0x1b]
	ldr r0, [r4, #8]
	orrs r0, r1
	str r0, [r4, #8]
	movs r0, #0
	strh r0, [r6]
	mov r0, r8
	ldr r1, [r0]
	ldr r0, _08079D3C @ =sub_8079EDC
	str r0, [r1, #8]
_08079D00:
	movs r5, #0
_08079D02:
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, #0x1c
	adds r4, r6, r0
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #2
	bls _08079D02
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08079D2C: .4byte gCurTask
_08079D30: .4byte gCamera
_08079D34: .4byte 0x03000004
_08079D38: .4byte 0x0000050A
_08079D3C: .4byte sub_8079EDC

	thumb_func_start sub_8079D40
sub_8079D40: @ 0x08079D40
	push {r4, r5, r6, r7, lr}
	ldr r0, _08079DB4 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r1, r0
	movs r5, #0
	adds r0, #8
	adds r0, r0, r1
	mov ip, r0
	ldr r3, _08079DB8 @ =gCamera
	ldr r0, _08079DBC @ =0x03000004
	adds r7, r1, r0
_08079D5C:
	lsls r1, r5, #3
	mov r0, ip
	adds r2, r0, r1
	ldr r0, [r2]
	subs r0, #1
	str r0, [r2]
	subs r0, r1, r5
	lsls r0, r0, #3
	adds r0, #0x1c
	adds r4, r6, r0
	adds r1, r7, r1
	ldr r0, [r1]
	ldr r1, [r3]
	subs r0, r0, r1
	strh r0, [r4, #0x10]
	ldr r0, [r2]
	ldr r1, [r3, #4]
	subs r0, r0, r1
	strh r0, [r4, #0x12]
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #2
	bls _08079D5C
	ldrh r0, [r6]
	adds r2, r0, #1
	strh r2, [r6]
	lsls r1, r2, #0x10
	movs r0, #0xc8
	lsls r0, r0, #0x11
	cmp r1, r0
	bls _08079DC0
	adds r0, r6, #0
	adds r0, #0xc4
	ldr r0, [r0]
	cmp r0, #0
	beq _08079DAA
	bl _call_via_r0
_08079DAA:
	ldr r0, _08079DB4 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
	b _08079DF0
	.align 2, 0
_08079DB4: .4byte gCurTask
_08079DB8: .4byte gCamera
_08079DBC: .4byte 0x03000004
_08079DC0:
	lsls r0, r2, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0xa0
	bne _08079DCE
	ldr r0, _08079DF8 @ =0x0000027E
	bl m4aSongNumStart
_08079DCE:
	movs r5, #0
_08079DD0:
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, #0x1c
	adds r4, r6, r0
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #2
	bls _08079DD0
_08079DF0:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08079DF8: .4byte 0x0000027E

	thumb_func_start sub_8079DFC
sub_8079DFC: @ 0x08079DFC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r2, _08079EC8 @ =gCurTask
	ldr r0, [r2]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r1, r0
	movs r5, #0
	mov r8, r2
	adds r0, #8
	adds r0, r0, r1
	mov ip, r0
	ldr r3, _08079ECC @ =gCamera
	ldr r0, _08079ED0 @ =0x03000004
	adds r7, r1, r0
_08079E1E:
	lsls r1, r5, #3
	mov r0, ip
	adds r2, r0, r1
	ldr r0, [r2]
	subs r0, #1
	str r0, [r2]
	subs r0, r1, r5
	lsls r0, r0, #3
	adds r0, #0x1c
	adds r4, r6, r0
	adds r1, r7, r1
	ldr r0, [r1]
	ldr r1, [r3]
	subs r0, r0, r1
	strh r0, [r4, #0x10]
	ldr r0, [r2]
	ldr r1, [r3, #4]
	subs r0, r0, r1
	strh r0, [r4, #0x12]
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #2
	bls _08079E1E
	ldrh r0, [r6]
	adds r0, #1
	strh r0, [r6]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0xb4
	bls _08079E9C
	adds r4, r6, #0
	adds r4, #0x1c
	movs r0, #8
	strb r0, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	str r0, [r4, #8]
	adds r4, #0x38
	ldr r0, [r4, #8]
	orrs r0, r1
	str r0, [r4, #8]
	adds r4, #0x38
	ldr r0, _08079ED4 @ =0x0000050A
	strh r0, [r4, #0xc]
	movs r0, #0
	strb r0, [r4, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r4, #0x1b]
	ldr r0, [r4, #8]
	orrs r0, r1
	str r0, [r4, #8]
	movs r0, #0
	strh r0, [r6]
	mov r0, r8
	ldr r1, [r0]
	ldr r0, _08079ED8 @ =sub_8079EDC
	str r0, [r1, #8]
_08079E9C:
	movs r5, #0
_08079E9E:
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, #0x1c
	adds r4, r6, r0
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #2
	bls _08079E9E
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08079EC8: .4byte gCurTask
_08079ECC: .4byte gCamera
_08079ED0: .4byte 0x03000004
_08079ED4: .4byte 0x0000050A
_08079ED8: .4byte sub_8079EDC

	thumb_func_start sub_8079EDC
sub_8079EDC: @ 0x08079EDC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	movs r0, #1
	mov r8, r0
	ldr r0, _08079F5C @ =gCurTask
	ldr r0, [r0]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r4, r0
	ldrh r0, [r6]
	cmp r0, #0
	bne _08079F08
	ldr r0, _08079F60 @ =0x0000027E
	bl m4aSongNumStart
	mov r1, r8
	strh r1, [r6]
_08079F08:
	movs r5, #0
	ldr r2, _08079F64 @ =0x03000004
	adds r2, r4, r2
	str r2, [sp]
	ldr r0, _08079F68 @ =gCamera
	mov sb, r0
	ldr r1, _08079F6C @ =0x03000008
	adds r1, r1, r4
	mov sl, r1
	ldr r2, _08079F70 @ =gStageData
	mov ip, r2
	mov r7, sb
_08079F20:
	lsls r2, r5, #3
	ldr r1, [sp]
	adds r0, r1, r2
	ldr r1, [r0]
	adds r1, #1
	str r1, [r0]
	subs r0, r2, r5
	lsls r0, r0, #3
	adds r0, #0x1c
	adds r4, r6, r0
	ldr r0, [r7]
	subs r3, r1, r0
	strh r3, [r4, #0x10]
	add r2, sl
	ldr r0, [r2]
	ldr r1, [r7, #4]
	subs r0, r0, r1
	strh r0, [r4, #0x12]
	mov r2, ip
	ldrb r0, [r2, #9]
	cmp r0, #1
	bne _08079F78
	lsls r0, r3, #0x10
	asrs r0, r0, #0x10
	ldr r1, _08079F74 @ =0x0000013F
	cmp r0, r1
	bgt _08079F96
	movs r2, #0
	mov r8, r2
	b _08079F96
	.align 2, 0
_08079F5C: .4byte gCurTask
_08079F60: .4byte 0x0000027E
_08079F64: .4byte 0x03000004
_08079F68: .4byte gCamera
_08079F6C: .4byte 0x03000008
_08079F70: .4byte gStageData
_08079F74: .4byte 0x0000013F
_08079F78:
	movs r0, #0x10
	ldrsh r1, [r4, r0]
	mov r2, sb
	ldr r0, [r2]
	adds r1, r1, r0
	mov r2, ip
	ldrb r0, [r2, #9]
	lsls r0, r0, #1
	ldr r2, _08079FC0 @ =gUnknown_080D5AE8
	adds r0, r0, r2
	ldrh r0, [r0]
	cmp r1, r0
	bge _08079F96
	movs r0, #0
	mov r8, r0
_08079F96:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #2
	bls _08079F20
	mov r1, r8
	cmp r1, #0
	beq _08079FC8
	adds r0, r6, #0
	adds r0, #0xc4
	ldr r0, [r0]
	cmp r0, #0
	beq _08079FB4
	bl _call_via_r0
_08079FB4:
	ldr r0, _08079FC4 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
	b _08079FEA
	.align 2, 0
_08079FC0: .4byte gUnknown_080D5AE8
_08079FC4: .4byte gCurTask
_08079FC8:
	movs r5, #0
_08079FCA:
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, #0x1c
	adds r4, r6, r0
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #2
	bls _08079FCA
_08079FEA:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8079FFC
sub_8079FFC: @ 0x08079FFC
	push {r4, lr}
	ldr r2, _0807A060 @ =gStageData
	ldrb r0, [r2, #3]
	cmp r0, #5
	bne _0807A06C
	movs r0, #0xb7
	adds r0, r0, r2
	mov ip, r0
	ldrb r3, [r0]
	cmp r3, #0
	bne _0807A054
	ldrb r1, [r2, #6]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	ldr r1, _0807A064 @ =gPlayers
	adds r4, r0, r1
	adds r0, r2, #0
	adds r0, #0xb6
	strb r3, [r0]
	movs r0, #1
	mov r1, ip
	strb r0, [r1]
	ldr r1, _0807A068 @ =gCamera
	movs r2, #0
	ldrsh r0, [r1, r2]
	movs r2, #4
	ldrsh r1, [r1, r2]
	bl sub_8027620
	ldr r0, [r4, #4]
	movs r1, #0x80
	lsls r1, r1, #0x10
	ands r0, r1
	cmp r0, #0
	beq _0807A054
	adds r0, r4, #0
	bl sub_8016F28
	adds r0, r4, #0
	bl Player_8005380
_0807A054:
	ldr r0, _0807A060 @ =gStageData
	adds r0, #0xb6
	movs r1, #0
	strb r1, [r0]
	movs r0, #1
	b _0807A06E
	.align 2, 0
_0807A060: .4byte gStageData
_0807A064: .4byte gPlayers
_0807A068: .4byte gCamera
_0807A06C:
	movs r0, #0
_0807A06E:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_807A074
sub_807A074: @ 0x0807A074
	push {r4, r5, lr}
	movs r5, #0
	ldr r2, _0807A08C @ =gStageData
	ldrb r0, [r2, #4]
	subs r0, #6
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #2
	bhi _0807A090
	movs r0, #0
	b _0807A0E0
	.align 2, 0
_0807A08C: .4byte gStageData
_0807A090:
	ldrb r1, [r2, #6]
	cmp r1, #0
	bne _0807A0C4
	adds r4, r2, #0
	adds r4, #0xb6
	ldrb r0, [r4]
	cmp r0, #0
	beq _0807A0AE
	cmp r0, #1
	beq _0807A0B8
	adds r0, #1
	movs r1, #7
	ands r0, r1
	strb r0, [r4]
	b _0807A0DE
_0807A0AE:
	bl sub_8027658
	movs r0, #2
	strb r0, [r4]
	b _0807A0DE
_0807A0B8:
	movs r5, #1
	strb r1, [r4]
	adds r0, r2, #0
	adds r0, #0xb7
	strb r1, [r0]
	b _0807A0DE
_0807A0C4:
	adds r3, r2, #0
	adds r3, #0xb6
	ldrb r0, [r3]
	cmp r0, #0
	beq _0807A0DE
	movs r5, #1
	movs r1, #0
	strb r1, [r3]
	adds r0, r2, #0
	adds r0, #0xb7
	strb r1, [r0]
	bl sub_8027658
_0807A0DE:
	adds r0, r5, #0
_0807A0E0:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807A0E8
sub_0807A0E8: @ 0x0807A0E8
	push {lr}
	adds r2, r0, #0
	lsls r1, r1, #0x10
	lsrs r3, r1, #0x10
	ldr r0, _0807A104 @ =gStageData
	ldrb r0, [r0, #9]
	cmp r0, #8
	bhi _0807A1D8
	lsls r0, r0, #2
	ldr r1, _0807A108 @ =_0807A10C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0807A104: .4byte gStageData
_0807A108: .4byte _0807A10C
_0807A10C: @ jump table
	.4byte _0807A130 @ case 0
	.4byte _0807A146 @ case 1
	.4byte _0807A15C @ case 2
	.4byte _0807A168 @ case 3
	.4byte _0807A17E @ case 4
	.4byte _0807A18A @ case 5
	.4byte _0807A1A0 @ case 6
	.4byte _0807A1AC @ case 7
	.4byte _0807A1CE @ case 8
_0807A130:
	ldrb r1, [r2, #2]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	bne _0807A1B6
	lsls r1, r3, #0x10
	asrs r1, r1, #0x10
	adds r0, r2, #0
	bl sub_0806A69C
	b _0807A1D8
_0807A146:
	ldrb r1, [r2, #2]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	bne _0807A1B6
	lsls r1, r3, #0x10
	asrs r1, r1, #0x10
	adds r0, r2, #0
	bl sub_0806CDB8
	b _0807A1D8
_0807A15C:
	lsls r1, r3, #0x10
	asrs r1, r1, #0x10
	adds r0, r2, #0
	bl sub_0806DAD4
	b _0807A1D8
_0807A168:
	ldrb r1, [r2, #2]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	bne _0807A1B6
	lsls r1, r3, #0x10
	asrs r1, r1, #0x10
	adds r0, r2, #0
	bl sub_08071594
	b _0807A1D8
_0807A17E:
	lsls r1, r3, #0x10
	asrs r1, r1, #0x10
	adds r0, r2, #0
	bl sub_80732CC
	b _0807A1D8
_0807A18A:
	ldrb r1, [r2, #2]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	bne _0807A1B6
	lsls r1, r3, #0x10
	asrs r1, r1, #0x10
	adds r0, r2, #0
	bl sub_08074BA0
	b _0807A1D8
_0807A1A0:
	lsls r1, r3, #0x10
	asrs r1, r1, #0x10
	adds r0, r2, #0
	bl sub_80769C4
	b _0807A1D8
_0807A1AC:
	ldrb r1, [r2, #2]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _0807A1C2
_0807A1B6:
	lsls r1, r3, #0x10
	asrs r1, r1, #0x10
	adds r0, r2, #0
	bl sub_08067EA0
	b _0807A1D8
_0807A1C2:
	lsls r1, r3, #0x10
	asrs r1, r1, #0x10
	adds r0, r2, #0
	bl sub_0807F4F0
	b _0807A1D8
_0807A1CE:
	lsls r1, r3, #0x10
	asrs r1, r1, #0x10
	adds r0, r2, #0
	bl sub_08085588
_0807A1D8:
	pop {r0}
	bx r0

	thumb_func_start sub_807A1DC
sub_807A1DC: @ 0x0807A1DC
	push {r4, r5, r6, r7, lr}
	adds r3, r0, #0
	movs r0, #0
	mov ip, r0
	ldr r0, _0807A29C @ =gStageData
	adds r0, #0x98
	ldr r0, [r0]
	ldrh r4, [r0, #6]
	ldr r1, _0807A2A0 @ =0x03000020
	adds r6, r4, r1
	ldr r0, [r3, #0x20]
	movs r1, #1
	rsbs r1, r1, #0
	cmp r0, r1
	beq _0807A294
	ldr r0, [r6, #0x28]
	cmp r0, r1
	beq _0807A294
	movs r5, #0x10
	ldrsh r1, [r3, r5]
	adds r0, r3, #0
	adds r0, #0x24
	movs r5, #0
	ldrsb r5, [r0, r5]
	adds r2, r1, r5
	movs r7, #0x10
	ldrsh r1, [r6, r7]
	ldr r7, _0807A2A4 @ =0x0300004C
	adds r0, r4, r7
	movs r7, #0
	ldrsb r7, [r0, r7]
	adds r1, r1, r7
	cmp r2, r1
	bgt _0807A236
	adds r0, r3, #0
	adds r0, #0x26
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r0, r5
	adds r0, r2, r0
	cmp r0, r1
	bge _0807A248
	cmp r2, r1
	blt _0807A294
_0807A236:
	ldr r5, _0807A2A8 @ =0x0300004E
	adds r0, r4, r5
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r0, r7
	adds r0, r1, r0
	cmp r0, r2
	blt _0807A294
_0807A248:
	movs r7, #0x12
	ldrsh r0, [r3, r7]
	adds r1, r3, #0
	adds r1, #0x25
	movs r4, #0
	ldrsb r4, [r1, r4]
	adds r2, r0, r4
	movs r1, #0x12
	ldrsh r0, [r6, r1]
	adds r1, r6, #0
	adds r1, #0x2d
	movs r5, #0
	ldrsb r5, [r1, r5]
	adds r1, r0, r5
	cmp r2, r1
	bgt _0807A27E
	adds r0, r3, #0
	adds r0, #0x27
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r0, r4
	adds r0, r2, r0
	cmp r0, r1
	bge _0807A290
	cmp r2, r1
	blt _0807A294
_0807A27E:
	adds r0, r6, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r0, r5
	adds r0, r1, r0
	cmp r0, r2
	blt _0807A294
_0807A290:
	movs r5, #1
	mov ip, r5
_0807A294:
	mov r0, ip
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0807A29C: .4byte gStageData
_0807A2A0: .4byte 0x03000020
_0807A2A4: .4byte 0x0300004C
_0807A2A8: .4byte 0x0300004E

	thumb_func_start sub_807A2AC
sub_807A2AC: @ 0x0807A2AC
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	ldr r1, _0807A358 @ =gUnknown_080D5AF6
	mov r0, sp
	movs r2, #8
	bl memcpy
	ldr r0, _0807A35C @ =gStageData
	ldrb r0, [r0, #3]
	cmp r0, #0
	bne _0807A370
	ldr r5, _0807A360 @ =gPlayers
	movs r0, #0xa8
	lsls r0, r0, #1
	adds r4, r5, r0
	ldr r0, [r5, #4]
	movs r1, #0x80
	lsls r1, r1, #0x10
	ands r0, r1
	cmp r0, #0
	bne _0807A370
	ldr r1, [r4, #4]
	movs r0, #0x80
	lsls r0, r0, #0x11
	ands r0, r1
	mov ip, r1
	cmp r0, #0
	bne _0807A370
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	bne _0807A330
	ldr r6, _0807A364 @ =gCamera
	mov r0, sp
	movs r2, #0
	ldrsh r1, [r0, r2]
	ldr r0, [r6]
	adds r3, r0, r1
	ldr r0, [r4, #0x10]
	asrs r2, r0, #8
	cmp r3, r2
	bgt _0807A330
	mov r0, sp
	movs r7, #4
	ldrsh r0, [r0, r7]
	subs r0, r0, r1
	adds r0, r3, r0
	cmp r0, r2
	blt _0807A330
	mov r0, sp
	movs r2, #2
	ldrsh r1, [r0, r2]
	ldr r0, [r6, #4]
	adds r3, r0, r1
	ldr r0, [r4, #0x14]
	asrs r2, r0, #8
	cmp r3, r2
	bgt _0807A330
	mov r0, sp
	movs r6, #6
	ldrsh r0, [r0, r6]
	subs r0, r0, r1
	adds r0, r3, r0
	cmp r0, r2
	bge _0807A370
_0807A330:
	ldr r0, _0807A368 @ =0xFFFFFEFF
	mov r7, ip
	ands r0, r7
	str r0, [r4, #4]
	ldr r1, _0807A36C @ =Player_8005380
	adds r0, r4, #0
	bl SetPlayerCallback
	ldr r0, [r5, #0x10]
	str r0, [r4, #0x10]
	ldr r0, [r5, #0x14]
	str r0, [r4, #0x14]
	adds r0, r5, #0
	adds r0, #0x27
	ldrb r1, [r0]
	adds r0, r4, #0
	adds r0, #0x27
	strb r1, [r0]
	movs r0, #1
	b _0807A372
	.align 2, 0
_0807A358: .4byte gUnknown_080D5AF6
_0807A35C: .4byte gStageData
_0807A360: .4byte gPlayers
_0807A364: .4byte gCamera
_0807A368: .4byte 0xFFFFFEFF
_0807A36C: .4byte Player_8005380
_0807A370:
	movs r0, #0
_0807A372:
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_807A37C
sub_807A37C: @ 0x0807A37C
	push {r4, lr}
	ldr r1, _0807A3A0 @ =gCamera
	ldr r0, [r1, #0x1c]
	movs r3, #0xf0
	lsls r3, r3, #1
	adds r0, r0, r3
	str r0, [r1, #0x1c]
	movs r3, #0
	ldr r4, _0807A3A4 @ =gPlayers
_0807A38E:
	cmp r3, #0
	beq _0807A3A8
	adds r0, r2, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	lsls r1, r1, #0x1e
	lsrs r1, r1, #0x1e
	b _0807A3AC
	.align 2, 0
_0807A3A0: .4byte gCamera
_0807A3A4: .4byte gPlayers
_0807A3A8:
	ldr r0, _0807A3D0 @ =gStageData
	ldrb r1, [r0, #6]
_0807A3AC:
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r2, r0, r4
	ldr r0, [r2, #4]
	ldr r1, _0807A3D4 @ =0xF7FFFFFF
	ands r0, r1
	str r0, [r2, #4]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #1
	bls _0807A38E
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807A3D0: .4byte gStageData
_0807A3D4: .4byte 0xF7FFFFFF

	thumb_func_start sub_807A3D8
sub_807A3D8: @ 0x0807A3D8
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	mov sb, r0
	ldr r6, [sp, #0x20]
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	mov r8, r1
	lsls r2, r2, #0x10
	lsrs r7, r2, #0x10
	lsls r3, r3, #0x18
	lsrs r5, r3, #0x18
	movs r3, #0
	ldrb r0, [r6]
	cmp r0, #0
	bne _0807A400
	movs r0, #0
	b _0807A45A
_0807A400:
	movs r4, #0
	cmp r3, r8
	bhs _0807A458
	mov r0, sb
	ldr r1, [r0]
_0807A40A:
	ldr r2, [r1, #0x14]
	ldrh r0, [r2, #0xc]
	cmp r0, r7
	bne _0807A424
	ldrb r0, [r2, #0x1a]
	cmp r0, r5
	bne _0807A424
	ldrb r0, [r6]
	subs r0, #1
	strb r0, [r6]
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807A442
_0807A424:
	ldrb r0, [r1, #2]
	cmp r0, #0
	beq _0807A444
	adds r0, r1, #0
	adds r0, #0x30
	ldrb r1, [r1, #2]
	str r6, [sp]
	adds r2, r7, #0
	adds r3, r5, #0
	bl sub_807A3D8
	adds r3, r0, #0
	cmp r3, #0
	beq _0807A444
	b _0807A45A
_0807A442:
	adds r3, r1, #0
_0807A444:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, r8
	bhs _0807A458
	lsls r0, r4, #2
	add r0, sb
	ldr r1, [r0]
	cmp r3, #0
	beq _0807A40A
_0807A458:
	adds r0, r3, #0
_0807A45A:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_807A468
sub_807A468: @ 0x0807A468
	push {lr}
	ldr r2, _0807A48C @ =gPseudoRandom
	ldr r1, [r2]
	ldr r0, _0807A490 @ =0x00196225
	muls r0, r1, r0
	ldr r1, _0807A494 @ =0x3C6EF35F
	adds r0, r0, r1
	str r0, [r2]
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _0807A498
	movs r0, #0x9f
	lsls r0, r0, #2
	bl m4aSongNumStart
	b _0807A49E
	.align 2, 0
_0807A48C: .4byte gPseudoRandom
_0807A490: .4byte 0x00196225
_0807A494: .4byte 0x3C6EF35F
_0807A498:
	ldr r0, _0807A4A4 @ =0x0000027D
	bl m4aSongNumStart
_0807A49E:
	pop {r0}
	bx r0
	.align 2, 0
_0807A4A4: .4byte 0x0000027D

	thumb_func_start sub_807A4A8
sub_807A4A8: @ 0x0807A4A8
	ldr r0, _0807A4B8 @ =gStageData
	adds r2, r0, #0
	adds r2, #0xb6
	movs r1, #0
	strb r1, [r2]
	adds r0, #0xb7
	strb r1, [r0]
	bx lr
	.align 2, 0
_0807A4B8: .4byte gStageData

	thumb_func_start sub_807A4BC
sub_807A4BC: @ 0x0807A4BC
	push {lr}
	ldr r1, _0807A4DC @ =gStageData
	ldrb r0, [r1, #3]
	cmp r0, #5
	bne _0807A4D8
	ldrb r0, [r1, #9]
	lsls r1, r0, #5
	subs r1, r1, r0
	lsls r1, r1, #2
	adds r1, r1, r0
	lsls r1, r1, #3
	adds r1, r1, r0
	ldr r0, _0807A4E0 @ =gPseudoRandom
	str r1, [r0]
_0807A4D8:
	pop {r0}
	bx r0
	.align 2, 0
_0807A4DC: .4byte gStageData
_0807A4E0: .4byte gPseudoRandom

	thumb_func_start sub_807A4E4
sub_807A4E4: @ 0x0807A4E4
	push {lr}
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r1, r1, r0
	ldrb r0, [r1, #0xf]
	cmp r0, #0
	beq _0807A4FA
	ldr r0, [r1, #0x10]
	bl VramFree
_0807A4FA:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_807A500
sub_807A500: @ 0x0807A500
	push {lr}
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	ldr r0, [r0, #0x1c]
	bl VramFree
	pop {r0}
	bx r0

	thumb_func_start sub_807A514
sub_807A514: @ 0x0807A514
	push {lr}
	ldr r0, _0807A538 @ =gCurTask
	ldr r3, [r0]
	ldrh r2, [r3, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r1, r2, r0
	ldrh r0, [r1, #0x28]
	subs r0, #1
	strh r0, [r1, #0x28]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0807A53C
	adds r0, r3, #0
	bl TaskDestroy
	b _0807A56C
	.align 2, 0
_0807A538: .4byte gCurTask
_0807A53C:
	ldr r3, _0807A554 @ =0x0300002A
	adds r0, r2, r3
	ldrb r0, [r0]
	cmp r0, #0
	beq _0807A55C
	adds r0, r1, #0
	bl sa2__sub_80036E0
	ldr r0, _0807A558 @ =gFlags
	ldr r1, [r0]
	movs r2, #1
	b _0807A568
	.align 2, 0
_0807A554: .4byte 0x0300002A
_0807A558: .4byte gFlags
_0807A55C:
	adds r0, r1, #0
	bl UpdateSpriteAnimation
	ldr r0, _0807A570 @ =gFlags
	ldr r1, [r0]
	movs r2, #2
_0807A568:
	orrs r1, r2
	str r1, [r0]
_0807A56C:
	pop {r0}
	bx r0
	.align 2, 0
_0807A570: .4byte gFlags

	thumb_func_start sub_807A574
sub_807A574: @ 0x0807A574
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	mov r8, r0
	adds r4, r1, #0
	adds r5, r3, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	mov sl, r2
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	ldr r0, _0807A6A4 @ =sub_807A784
	movs r1, #0x86
	lsls r1, r1, #1
	movs r2, #0x84
	lsls r2, r2, #6
	movs r3, #0
	mov sb, r3
	str r3, [sp]
	bl TaskCreate
	ldrh r7, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r7, r0
	adds r0, #0x60
	adds r0, r0, r7
	mov ip, r0
	ldr r1, _0807A6A8 @ =gUnknown_080D5B00
	lsls r0, r4, #1
	adds r0, r0, r4
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	str r0, [r6]
	ldr r1, _0807A6AC @ =0x03000024
	adds r1, r7, r1
	str r1, [sp, #4]
	strb r4, [r1]
	ldr r2, _0807A6B0 @ =0x03000025
	adds r0, r7, r2
	strb r5, [r0]
	ldr r3, _0807A6B4 @ =0x03000026
	adds r0, r7, r3
	mov r1, sl
	strb r1, [r0]
	mov r3, r8
	ldr r2, [r3, #8]
	ldr r0, [r3, #0x44]
	movs r1, #0x80
	lsls r1, r1, #3
	ands r0, r1
	adds r1, r2, r1
	cmp r0, #0
	beq _0807A5F0
	ldr r0, _0807A6B8 @ =0xFFFFFC00
	adds r1, r2, r0
_0807A5F0:
	str r1, [r6, #4]
	mov r1, r8
	ldr r0, [r1, #0xc]
	ldr r2, _0807A6BC @ =0xFFFFF800
	adds r0, r0, r2
	str r0, [r6, #8]
	mov r3, r8
	adds r3, #0x20
	movs r1, #0
	ldrsb r1, [r3, r1]
	movs r0, #4
	subs r0, r0, r1
	lsls r0, r0, #5
	adds r0, #0x20
	strh r0, [r6, #0x14]
	mov r0, sb
	strh r0, [r6, #0x16]
	strh r0, [r6, #0x18]
	strh r0, [r6, #0x1a]
	mov r0, sl
	adds r0, #0x24
	add r0, r8
	str r0, [r6, #0x1c]
	mov r0, r8
	adds r0, #0x31
	str r0, [r6, #0x20]
	ldr r0, _0807A6C0 @ =gStageData
	ldrb r1, [r0, #6]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	ldr r2, _0807A6C4 @ =gPlayers
	adds r0, r0, r2
	str r0, [r6, #0x2c]
	adds r0, #0x2b
	ldrb r1, [r0]
	lsls r1, r1, #0x1e
	lsrs r1, r1, #0x1e
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r2
	str r0, [r6, #0x30]
	mov r1, r8
	ldr r0, [r1, #0x44]
	lsrs r0, r0, #0xa
	movs r1, #1
	ands r0, r1
	ldr r2, _0807A6C8 @ =0x03000027
	adds r1, r7, r2
	strb r0, [r1]
	ldrb r1, [r3]
	ldr r3, _0807A6CC @ =0x03000028
	adds r0, r7, r3
	strb r1, [r0]
	mov r0, r8
	str r0, [r6, #0x34]
	mov r2, sb
	mov r1, ip
	strh r2, [r1]
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r1, #2]
	strh r0, [r1, #4]
	strh r2, [r1, #6]
	strh r2, [r1, #8]
	mov r3, r8
	ldr r1, [r3, #4]
	adds r0, r6, #0
	bl sub_807A6D4
	ldr r1, [sp, #4]
	ldrb r0, [r1]
	cmp r0, #8
	beq _0807A694
	ldr r0, _0807A6D0 @ =0x0000020F
	bl m4aSongNumStart
_0807A694:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807A6A4: .4byte sub_807A784
_0807A6A8: .4byte gUnknown_080D5B00
_0807A6AC: .4byte 0x03000024
_0807A6B0: .4byte 0x03000025
_0807A6B4: .4byte 0x03000026
_0807A6B8: .4byte 0xFFFFFC00
_0807A6BC: .4byte 0xFFFFF800
_0807A6C0: .4byte gStageData
_0807A6C4: .4byte gPlayers
_0807A6C8: .4byte 0x03000027
_0807A6CC: .4byte 0x03000028
_0807A6D0: .4byte 0x0000020F

	thumb_func_start sub_807A6D4
sub_807A6D4: @ 0x0807A6D4
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r7, r0, #0
	adds r6, r1, #0
	adds r3, r7, #0
	adds r3, #0x38
	str r6, [r7, #0x38]
	movs r2, #0
	movs r1, #0
	ldr r0, _0807A77C @ =0x00000512
	strh r0, [r3, #0xc]
	strb r2, [r3, #0x1a]
	subs r0, #0x92
	strh r0, [r3, #0x14]
	strh r1, [r3, #0xe]
	strh r1, [r3, #0x16]
	movs r0, #0xff
	strb r0, [r3, #0x1b]
	movs r0, #0x10
	strb r0, [r3, #0x1c]
	strb r2, [r3, #0x1f]
	subs r0, #0x11
	str r0, [r3, #0x20]
	movs r0, #0x80
	lsls r0, r0, #5
	str r0, [r3, #8]
	strh r1, [r3, #0x10]
	strh r1, [r3, #0x12]
	adds r0, r3, #0
	bl UpdateSpriteAnimation
	adds r6, #0x80
	movs r4, #0
	movs r0, #0
	mov sb, r0
	movs r5, #0
	ldr r0, _0807A780 @ =0x000004F9
	mov r8, r0
_0807A724:
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #3
	adds r0, #0x6c
	adds r3, r7, r0
	str r6, [r3]
	mov r0, r8
	strh r0, [r3, #0xc]
	movs r0, #1
	strb r0, [r3, #0x1a]
	movs r0, #0xa0
	lsls r0, r0, #2
	strh r0, [r3, #0x14]
	strh r5, [r3, #0xe]
	strh r5, [r3, #0x16]
	movs r0, #0xff
	strb r0, [r3, #0x1b]
	movs r0, #0x10
	strb r0, [r3, #0x1c]
	mov r0, sb
	strb r0, [r3, #0x1f]
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r3, #0x20]
	strh r5, [r3, #0x10]
	strh r5, [r3, #0x12]
	movs r0, #0x80
	lsls r0, r0, #0xc
	str r0, [r3, #8]
	adds r0, r3, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #3
	bls _0807A724
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807A77C: .4byte 0x00000512
_0807A780: .4byte 0x000004F9

	thumb_func_start sub_807A784
sub_807A784: @ 0x0807A784
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	ldr r2, _0807A7C0 @ =gCurTask
	ldr r0, [r2]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r1, r0
	adds r0, #0x38
	adds r0, r0, r1
	mov r8, r0
	movs r7, #0
	ldr r0, [r6, #0x34]
	cmp r0, #0
	beq _0807A7C4
	adds r0, #0x20
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bgt _0807A7C4
	ldr r0, [r6, #0x1c]
	strb r7, [r0]
	ldr r0, [r2]
	bl TaskDestroy
	b _0807A83E
	.align 2, 0
_0807A7C0: .4byte gCurTask
_0807A7C4:
	ldr r1, [r6]
	adds r0, r6, #0
	bl _call_via_r1
	orrs r7, r0
	ldr r5, [r6, #4]
	lsls r5, r5, #8
	ldr r4, [r6, #8]
	lsls r4, r4, #8
	asrs r5, r5, #0x10
	asrs r4, r4, #0x10
	ldr r0, [r6, #0x2c]
	str r0, [sp]
	mov r0, r8
	adds r1, r5, #0
	adds r2, r4, #0
	movs r3, #0
	bl sub_8020CE0
	orrs r7, r0
	ldr r0, [r6, #0x30]
	str r0, [sp]
	mov r0, r8
	adds r1, r5, #0
	adds r2, r4, #0
	movs r3, #0
	bl sub_8020CE0
	orrs r7, r0
	adds r0, r6, #0
	movs r1, #1
	bl sub_807B664
	orrs r7, r0
	cmp r7, #0
	beq _0807A830
	movs r0, #0
	strh r0, [r6, #0x1a]
	ldr r0, _0807A828 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0807A82C @ =sub_807B5E4
	str r0, [r1, #8]
	adds r0, r6, #0
	bl sub_807A8B4
	movs r0, #0x90
	bl m4aSongNumStart
	b _0807A83E
	.align 2, 0
_0807A828: .4byte gCurTask
_0807A82C: .4byte sub_807B5E4
_0807A830:
	ldr r0, [r6, #4]
	str r0, [r6, #0xc]
	ldr r0, [r6, #8]
	str r0, [r6, #0x10]
	adds r0, r6, #0
	bl sub_807A84C
_0807A83E:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_807A84C
sub_807A84C: @ 0x0807A84C
	push {r4, r5, r6, lr}
	adds r2, r0, #0
	adds r4, r2, #0
	adds r4, #0x38
	adds r6, r2, #0
	adds r6, #0x60
	ldr r5, [r2, #4]
	asrs r5, r5, #8
	ldr r1, _0807A8AC @ =gCamera
	ldr r0, [r1]
	subs r5, r5, r0
	strh r5, [r4, #0x10]
	ldr r0, [r2, #8]
	asrs r0, r0, #8
	ldr r1, [r1, #4]
	subs r0, r0, r1
	strh r0, [r4, #0x12]
	ldr r2, [r4, #8]
	movs r0, #0x80
	rsbs r0, r0, #0
	ands r2, r0
	ldr r3, _0807A8B0 @ =gUnknown_03002C24
	ldrb r0, [r3]
	adds r1, r0, #1
	strb r1, [r3]
	movs r1, #0x60
	orrs r0, r1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	orrs r2, r0
	str r2, [r4, #8]
	strh r5, [r6, #6]
	ldrh r0, [r4, #0x12]
	strh r0, [r6, #8]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	adds r1, r6, #0
	bl TransformSprite
	adds r0, r4, #0
	bl DisplaySprite
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0807A8AC: .4byte gCamera
_0807A8B0: .4byte gUnknown_03002C24

	thumb_func_start sub_807A8B4
sub_807A8B4: @ 0x0807A8B4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	mov r8, r0
	ldrh r3, [r0, #0x1a]
	lsls r0, r3, #0x10
	asrs r4, r0, #0x10
	asrs r0, r0, #0x12
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	add r1, sp, #4
	ldr r0, _0807A96C @ =gUnknown_080D5B78
	ldm r0!, {r2, r6, r7}
	stm r1!, {r2, r6, r7}
	ldr r0, [r0]
	str r0, [r1]
	cmp r5, #3
	bls _0807A8E0
	movs r5, #3
_0807A8E0:
	mov r1, r8
	ldr r0, [r1, #4]
	asrs r0, r0, #8
	ldr r2, _0807A970 @ =gCamera
	ldr r1, [r2]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	mov r6, r8
	ldr r0, [r6, #8]
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov sb, r0
	movs r0, #3
	ands r0, r3
	cmp r0, #0
	bne _0807A95C
	cmp r4, #0xc
	bgt _0807A95C
	lsls r1, r5, #2
	adds r0, r1, r5
	lsls r0, r0, #3
	adds r0, #0x6c
	adds r6, r6, r0
	mov r2, r8
	adds r2, #0x60
	mov r0, sp
	adds r0, r0, r1
	adds r0, #4
	ldr r4, [r0]
	ldr r3, _0807A974 @ =gSineTable
	ldrh r0, [r2]
	lsls r0, r0, #1
	adds r0, r0, r3
	movs r1, #0
	ldrsh r0, [r0, r1]
	adds r1, r0, #0
	muls r1, r4, r1
	asrs r1, r1, #0x16
	lsls r0, r7, #0x10
	asrs r0, r0, #0x10
	adds r0, r0, r1
	strh r0, [r6, #0x10]
	ldrh r0, [r2]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r0, r2
	lsls r0, r0, #1
	adds r0, r0, r3
	movs r7, #0
	ldrsh r0, [r0, r7]
	adds r1, r0, #0
	muls r1, r4, r1
	asrs r1, r1, #0x16
	mov r2, sb
	lsls r0, r2, #0x10
	asrs r0, r0, #0x10
	adds r0, r0, r1
	strh r0, [r6, #0x12]
_0807A95C:
	mov r6, r8
	movs r7, #0x1a
	ldrsh r0, [r6, r7]
	cmp r0, #0x14
	bgt _0807A978
	movs r0, #0
	b _0807A986
	.align 2, 0
_0807A96C: .4byte gUnknown_080D5B78
_0807A970: .4byte gCamera
_0807A974: .4byte gSineTable
_0807A978:
	mov r1, r8
	movs r2, #0x1a
	ldrsh r0, [r1, r2]
	subs r0, #0x14
	asrs r0, r0, #2
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
_0807A986:
	adds r7, r0, #0
	adds r5, #1
	mov sb, r5
	cmp r7, sb
	bge _0807A9EE
	ldr r6, _0807AA00 @ =gCamera
	mov sl, r6
_0807A994:
	lsls r0, r7, #2
	adds r0, r0, r7
	lsls r0, r0, #3
	adds r0, #0x6c
	mov r1, r8
	adds r6, r1, r0
	mov r2, sl
	ldr r0, [r2]
	ldrh r5, [r6, #0x10]
	adds r5, r5, r0
	ldr r0, [r2, #4]
	ldrh r4, [r6, #0x12]
	adds r4, r4, r0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	ldr r0, [r1, #0x2c]
	str r0, [sp]
	adds r0, r6, #0
	adds r1, r5, #0
	adds r2, r4, #0
	movs r3, #0
	bl sub_8020CE0
	mov r1, r8
	ldr r0, [r1, #0x30]
	str r0, [sp]
	adds r0, r6, #0
	adds r1, r5, #0
	adds r2, r4, #0
	movs r3, #0
	bl sub_8020CE0
	adds r0, r6, #0
	bl UpdateSpriteAnimation
	adds r0, r6, #0
	bl DisplaySprite
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, sb
	blt _0807A994
_0807A9EE:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807AA00: .4byte gCamera

	thumb_func_start sub_807AA04
sub_807AA04: @ 0x0807AA04
	push {r4, r5, r6, lr}
	adds r3, r0, #0
	adds r0, #0x24
	ldrb r1, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	ldr r1, _0807AA74 @ =gUnknown_080D5B00
	adds r4, r0, r1
	adds r0, r3, #0
	adds r0, #0x60
	movs r5, #0
	strh r5, [r0]
	ldr r1, _0807AA78 @ =gSineTable
	movs r2, #0x80
	lsls r2, r2, #4
	adds r0, r1, r2
	movs r6, #0
	ldrsh r2, [r0, r6]
	movs r6, #0x14
	ldrsh r0, [r3, r6]
	muls r0, r2, r0
	asrs r0, r0, #0xe
	ldrh r2, [r3, #0x16]
	adds r0, r0, r2
	strh r0, [r3, #0x16]
	movs r6, #0xc0
	lsls r6, r6, #3
	adds r1, r1, r6
	movs r0, #0
	ldrsh r1, [r1, r0]
	movs r2, #0x14
	ldrsh r0, [r3, r2]
	muls r0, r1, r0
	asrs r0, r0, #0xe
	ldrh r6, [r3, #0x18]
	adds r0, r0, r6
	strh r0, [r3, #0x18]
	movs r1, #0x18
	ldrsh r0, [r3, r1]
	ldr r1, [r3, #8]
	adds r1, r1, r0
	str r1, [r3, #8]
	ldr r0, _0807AA7C @ =gCamera
	ldr r0, [r0, #0x10]
	lsls r0, r0, #8
	cmp r1, r0
	bge _0807AA6A
	strh r5, [r3, #0x18]
	ldr r0, [r4, #4]
	str r0, [r3]
_0807AA6A:
	movs r0, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_0807AA74: .4byte gUnknown_080D5B00
_0807AA78: .4byte gSineTable
_0807AA7C: .4byte gCamera

	thumb_func_start sub_807AA80
sub_807AA80: @ 0x0807AA80
	push {r4, r5, lr}
	sub sp, #0x28
	mov ip, r0
	mov r1, sp
	ldr r0, _0807AB00 @ =gUnknown_080D5B88
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r5}
	stm r1!, {r2, r3, r5}
	ldm r0!, {r2, r4, r5}
	stm r1!, {r2, r4, r5}
	ldr r0, [r0]
	str r0, [r1]
	mov r0, ip
	adds r0, #0x60
	movs r3, #0x80
	lsls r3, r3, #2
	strh r3, [r0]
	subs r0, #0x3b
	ldrb r0, [r0]
	lsls r0, r0, #2
	mov r4, sp
	adds r2, r4, r0
	ldr r0, _0807AB04 @ =gCamera
	ldr r1, [r0]
	lsls r1, r1, #8
	ldr r0, [r2]
	adds r0, r0, r1
	mov r5, ip
	str r0, [r5, #4]
	ldr r1, _0807AB08 @ =gSineTable
	lsls r0, r3, #1
	adds r0, r1, r0
	movs r4, #0
	ldrsh r2, [r0, r4]
	movs r4, #0x14
	ldrsh r0, [r5, r4]
	muls r0, r2, r0
	asrs r0, r0, #0xe
	ldrh r5, [r5, #0x16]
	adds r0, r0, r5
	mov r2, ip
	strh r0, [r2, #0x16]
	adds r1, r1, r3
	movs r3, #0
	ldrsh r1, [r1, r3]
	movs r4, #0x14
	ldrsh r0, [r2, r4]
	muls r0, r1, r0
	asrs r0, r0, #0xe
	ldrh r5, [r2, #0x18]
	adds r0, r0, r5
	strh r0, [r2, #0x18]
	movs r0, #0x18
	ldrsh r1, [r2, r0]
	ldr r0, [r2, #8]
	adds r0, r0, r1
	str r0, [r2, #8]
	movs r0, #0
	add sp, #0x28
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_0807AB00: .4byte gUnknown_080D5B88
_0807AB04: .4byte gCamera
_0807AB08: .4byte gSineTable

	thumb_func_start sub_807AB0C
sub_807AB0C: @ 0x0807AB0C
	push {r4, r5, r6, lr}
	sub sp, #0x28
	adds r2, r0, #0
	adds r0, #0x24
	ldrb r1, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	ldr r1, _0807AB7C @ =gUnknown_080D5B00
	adds r4, r0, r1
	mov r1, sp
	ldr r0, _0807AB80 @ =gUnknown_080D5BB0
	ldm r0!, {r3, r5, r6}
	stm r1!, {r3, r5, r6}
	ldm r0!, {r3, r5, r6}
	stm r1!, {r3, r5, r6}
	ldm r0!, {r3, r5, r6}
	stm r1!, {r3, r5, r6}
	ldr r0, [r0]
	str r0, [r1]
	ldrh r0, [r2, #0x18]
	subs r0, #0x40
	strh r0, [r2, #0x18]
	movs r1, #0x18
	ldrsh r0, [r2, r1]
	ldr r1, [r2, #8]
	adds r1, r1, r0
	str r1, [r2, #8]
	ldr r0, _0807AB84 @ =gCamera
	ldr r0, [r0, #0x10]
	lsls r0, r0, #8
	cmp r1, r0
	bge _0807ABAE
	adds r3, r2, #0
	adds r3, #0x60
	movs r0, #0x80
	lsls r0, r0, #2
	strh r0, [r3]
	adds r0, r2, #0
	adds r0, #0x27
	ldrb r0, [r0]
	cmp r0, #0
	beq _0807AB88
	adds r0, r2, #0
	adds r0, #0x26
	ldrb r0, [r0]
	lsls r0, r0, #2
	add r0, sp
	ldr r1, [r0]
	lsls r1, r1, #8
	ldr r0, [r2, #4]
	subs r0, r0, r1
	str r0, [r2, #4]
	ldrh r0, [r3]
	subs r0, #0x50
	b _0807ABA0
	.align 2, 0
_0807AB7C: .4byte gUnknown_080D5B00
_0807AB80: .4byte gUnknown_080D5BB0
_0807AB84: .4byte gCamera
_0807AB88:
	adds r0, r2, #0
	adds r0, #0x26
	ldrb r0, [r0]
	lsls r0, r0, #2
	add r0, sp
	ldr r1, [r0]
	lsls r1, r1, #8
	ldr r0, [r2, #4]
	adds r0, r0, r1
	str r0, [r2, #4]
	ldrh r0, [r3]
	adds r0, #0x50
_0807ABA0:
	strh r0, [r3]
	movs r0, #0
	str r0, [r2, #8]
	strh r0, [r2, #0x18]
	strh r0, [r2, #0x16]
	ldr r0, [r4, #4]
	str r0, [r2]
_0807ABAE:
	movs r0, #0
	add sp, #0x28
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_807ABB8
sub_807ABB8: @ 0x0807ABB8
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x27
	ldrb r0, [r0]
	cmp r0, #0
	beq _0807ABDC
	ldrh r2, [r4, #0x14]
	lsls r1, r2, #0x10
	asrs r1, r1, #0x12
	adds r0, r4, #0
	adds r0, #0x26
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r1, r1, r0
	ldrh r0, [r4, #0x16]
	adds r1, r1, r0
	strh r1, [r4, #0x16]
	b _0807ABF2
_0807ABDC:
	ldrh r2, [r4, #0x14]
	lsls r1, r2, #0x10
	asrs r1, r1, #0x12
	adds r0, r4, #0
	adds r0, #0x26
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r1, r1, r0
	ldrh r0, [r4, #0x16]
	subs r0, r0, r1
	strh r0, [r4, #0x16]
_0807ABF2:
	ldrh r1, [r4, #0x18]
	adds r1, #0x20
	lsls r0, r2, #0x10
	asrs r0, r0, #0x11
	adds r1, r1, r0
	strh r1, [r4, #0x18]
	movs r1, #0x16
	ldrsh r0, [r4, r1]
	ldr r2, [r4, #4]
	adds r2, r2, r0
	str r2, [r4, #4]
	movs r3, #0x18
	ldrsh r0, [r4, r3]
	ldr r1, [r4, #8]
	adds r1, r1, r0
	str r1, [r4, #8]
	ldr r0, [r4, #0x10]
	subs r0, r0, r1
	lsls r0, r0, #8
	asrs r0, r0, #0x10
	ldr r1, [r4, #0xc]
	subs r1, r1, r2
	lsls r1, r1, #8
	asrs r1, r1, #0x10
	bl sa2__sub_8004418
	adds r2, r4, #0
	adds r2, #0x60
	ldr r1, _0807AC40 @ =0xFFFFFF00
	adds r0, r0, r1
	ldr r3, _0807AC44 @ =0x000003FF
	adds r1, r3, #0
	ands r0, r1
	strh r0, [r2]
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0807AC40: .4byte 0xFFFFFF00
_0807AC44: .4byte 0x000003FF

	thumb_func_start sub_807AC48
sub_807AC48: @ 0x0807AC48
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r0, #0x24
	ldrb r1, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	ldr r1, _0807AC74 @ =gUnknown_080D5B00
	adds r3, r0, r1
	movs r7, #0
	ldrh r2, [r4, #0x18]
	movs r0, #0x18
	ldrsh r1, [r4, r0]
	ldr r0, _0807AC78 @ =0xFFFFFD00
	cmp r1, r0
	ble _0807AC7C
	adds r0, r2, #0
	subs r0, #0x30
	strh r0, [r4, #0x18]
	adds r5, r4, #0
	adds r5, #0x27
	b _0807AC94
	.align 2, 0
_0807AC74: .4byte gUnknown_080D5B00
_0807AC78: .4byte 0xFFFFFD00
_0807AC7C:
	adds r0, r4, #0
	adds r0, #0x27
	ldrb r1, [r0]
	adds r5, r0, #0
	cmp r1, #0
	beq _0807AC8E
	ldrh r0, [r4, #0x16]
	adds r0, #0x50
	b _0807AC92
_0807AC8E:
	ldrh r0, [r4, #0x16]
	subs r0, #0x50
_0807AC92:
	strh r0, [r4, #0x16]
_0807AC94:
	movs r0, #0x16
	ldrsh r1, [r4, r0]
	ldr r0, [r4, #4]
	adds r2, r0, r1
	str r2, [r4, #4]
	movs r0, #0x18
	ldrsh r1, [r4, r0]
	ldr r0, [r4, #8]
	adds r0, r0, r1
	str r0, [r4, #8]
	ldrb r0, [r5]
	cmp r0, #0
	beq _0807ACC4
	ldr r1, _0807ACC0 @ =gCamera
	ldr r0, [r1, #0x1c]
	adds r0, #0x14
	lsls r0, r0, #8
	adds r6, r1, #0
	cmp r2, r0
	ble _0807ACD4
	b _0807ACD8
	.align 2, 0
_0807ACC0: .4byte gCamera
_0807ACC4:
	ldr r1, _0807AD14 @ =gCamera
	ldr r0, [r1, #0x18]
	subs r0, #0x14
	lsls r0, r0, #8
	adds r6, r1, #0
	cmp r2, r0
	bge _0807ACD4
	movs r7, #1
_0807ACD4:
	cmp r7, #0
	beq _0807AD4E
_0807ACD8:
	ldr r0, [r3, #4]
	str r0, [r4]
	movs r0, #0
	strh r0, [r4, #0x16]
	strh r0, [r4, #0x18]
	ldr r2, [r6, #0x14]
	subs r2, #0x28
	adds r3, r4, #0
	adds r3, #0x26
	ldrb r1, [r3]
	movs r0, #1
	ands r0, r1
	movs r1, #0x46
	muls r0, r1, r0
	subs r2, r2, r0
	lsls r2, r2, #8
	str r2, [r4, #8]
	adds r0, r4, #0
	adds r0, #0x28
	ldrb r1, [r0]
	cmp r1, #1
	bne _0807AD20
	ldrb r0, [r3]
	ands r1, r0
	cmp r1, #0
	beq _0807AD18
	ldrb r0, [r3]
	lsls r0, r0, #8
	adds r0, r2, r0
	b _0807AD1E
	.align 2, 0
_0807AD14: .4byte gCamera
_0807AD18:
	ldrb r0, [r3]
	lsls r0, r0, #8
	subs r0, r2, r0
_0807AD1E:
	str r0, [r4, #8]
_0807AD20:
	ldrb r0, [r5]
	cmp r0, #0
	beq _0807AD3A
	ldr r0, [r6, #0x1c]
	adds r0, #0x14
	lsls r0, r0, #8
	ldrb r2, [r3]
	lsls r2, r2, #2
	movs r1, #0x32
	subs r1, r1, r2
	lsls r1, r1, #0xa
	adds r0, r0, r1
	b _0807AD4C
_0807AD3A:
	ldr r0, [r6, #0x18]
	subs r0, #0x14
	lsls r0, r0, #8
	ldrb r2, [r3]
	lsls r2, r2, #2
	movs r1, #0x32
	subs r1, r1, r2
	lsls r1, r1, #0xa
	subs r0, r0, r1
_0807AD4C:
	str r0, [r4, #4]
_0807AD4E:
	ldr r0, [r4, #0x10]
	ldr r1, [r4, #8]
	subs r0, r0, r1
	lsls r0, r0, #8
	asrs r0, r0, #0x10
	ldr r1, [r4, #0xc]
	ldr r2, [r4, #4]
	subs r1, r1, r2
	lsls r1, r1, #8
	asrs r1, r1, #0x10
	bl sa2__sub_8004418
	adds r2, r4, #0
	adds r2, #0x60
	ldr r1, _0807AD80 @ =0xFFFFFF00
	adds r0, r0, r1
	ldr r3, _0807AD84 @ =0x000003FF
	adds r1, r3, #0
	ands r0, r1
	strh r0, [r2]
	movs r0, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0807AD80: .4byte 0xFFFFFF00
_0807AD84: .4byte 0x000003FF

	thumb_func_start sub_807AD88
sub_807AD88: @ 0x0807AD88
	push {r4, r5, lr}
	sub sp, #0x14
	adds r4, r0, #0
	ldr r1, _0807ADC4 @ =gUnknown_080D5BD8
	mov r0, sp
	movs r2, #0x14
	bl memcpy
	movs r5, #0
	adds r0, r4, #0
	adds r0, #0x27
	ldrb r0, [r0]
	cmp r0, #0
	beq _0807ADCC
	ldr r0, _0807ADC8 @ =gCamera
	ldr r0, [r0, #0x18]
	adds r0, #0x28
	lsls r0, r0, #8
	ldr r1, [r4, #4]
	cmp r1, r0
	blt _0807ADDA
	adds r0, r4, #0
	adds r0, #0x26
	ldrb r0, [r0]
	lsls r0, r0, #1
	add r0, sp
	ldrh r0, [r0]
	rsbs r0, r0, #0
	b _0807ADF0
	.align 2, 0
_0807ADC4: .4byte gUnknown_080D5BD8
_0807ADC8: .4byte gCamera
_0807ADCC:
	ldr r0, _0807ADE0 @ =gCamera
	ldr r0, [r0, #0x1c]
	subs r0, #0x28
	lsls r0, r0, #8
	ldr r1, [r4, #4]
	cmp r1, r0
	ble _0807ADE4
_0807ADDA:
	movs r5, #1
	b _0807ADF2
	.align 2, 0
_0807ADE0: .4byte gCamera
_0807ADE4:
	adds r0, r4, #0
	adds r0, #0x26
	ldrb r0, [r0]
	lsls r0, r0, #1
	add r0, sp
	ldrh r0, [r0]
_0807ADF0:
	strh r0, [r4, #0x16]
_0807ADF2:
	movs r0, #0x16
	ldrsh r2, [r4, r0]
	adds r2, r1, r2
	str r2, [r4, #4]
	movs r1, #0x18
	ldrsh r0, [r4, r1]
	ldr r1, [r4, #8]
	adds r1, r1, r0
	str r1, [r4, #8]
	ldr r0, [r4, #0x10]
	subs r0, r0, r1
	lsls r0, r0, #8
	asrs r0, r0, #0x10
	ldr r1, [r4, #0xc]
	subs r1, r1, r2
	lsls r1, r1, #8
	asrs r1, r1, #0x10
	bl sa2__sub_8004418
	adds r2, r4, #0
	adds r2, #0x60
	ldr r3, _0807AE34 @ =0xFFFFFF00
	adds r0, r0, r3
	ldr r3, _0807AE38 @ =0x000003FF
	adds r1, r3, #0
	ands r0, r1
	strh r0, [r2]
	adds r0, r5, #0
	add sp, #0x14
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_0807AE34: .4byte 0xFFFFFF00
_0807AE38: .4byte 0x000003FF

	thumb_func_start sub_807AE3C
sub_807AE3C: @ 0x0807AE3C
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r0, #0x24
	ldrb r1, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	ldr r1, _0807AE80 @ =gUnknown_080D5B00
	adds r7, r0, r1
	movs r6, #0
	ldr r3, _0807AE84 @ =gCamera
	ldr r1, [r3, #0x14]
	subs r1, #0xa0
	adds r5, r4, #0
	adds r5, #0x26
	ldrb r2, [r5]
	lsls r0, r2, #2
	adds r0, r0, r2
	lsls r0, r0, #2
	adds r1, r1, r0
	lsls r1, r1, #8
	ldr r0, [r4, #8]
	mov ip, r3
	cmp r0, r1
	bgt _0807AE88
	ldrh r0, [r4, #0x1a]
	adds r0, #1
	strh r0, [r4, #0x1a]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xf
	bgt _0807AEFA
	movs r6, #1
	b _0807AF30
	.align 2, 0
_0807AE80: .4byte gUnknown_080D5B00
_0807AE84: .4byte gCamera
_0807AE88:
	movs r1, #0x1a
	ldrsh r0, [r4, r1]
	ldrh r3, [r4, #0x1a]
	cmp r0, #0
	bne _0807AEBC
	adds r0, r4, #0
	adds r0, #0x27
	ldrb r0, [r0]
	cmp r0, #0
	beq _0807AEA0
	movs r0, #0xd0
	b _0807AEA2
_0807AEA0:
	ldr r0, _0807AF28 @ =0x0000FF30
_0807AEA2:
	strh r0, [r4, #0x16]
	adds r2, r4, #0
	adds r2, #0x26
	ldrb r1, [r2]
	movs r0, #6
	subs r0, r0, r1
	movs r1, #0x6c
	muls r1, r0, r1
	ldr r5, _0807AF2C @ =0xFFFFFD00
	adds r0, r5, #0
	subs r0, r0, r1
	strh r0, [r4, #0x18]
	adds r5, r2, #0
_0807AEBC:
	adds r0, r3, #1
	strh r0, [r4, #0x1a]
	ldrh r0, [r4, #0x18]
	adds r0, #0x20
	strh r0, [r4, #0x18]
	movs r0, #0x16
	ldrsh r1, [r4, r0]
	ldr r0, [r4, #4]
	adds r0, r0, r1
	str r0, [r4, #4]
	movs r1, #0x18
	ldrsh r0, [r4, r1]
	ldr r3, [r4, #8]
	adds r3, r3, r0
	str r3, [r4, #8]
	mov r2, ip
	ldr r1, [r2, #0x14]
	subs r1, #0xa0
	ldrb r2, [r5]
	lsls r0, r2, #2
	adds r0, r0, r2
	lsls r0, r0, #2
	adds r1, r1, r0
	lsls r1, r1, #8
	cmp r3, r1
	bge _0807AEF4
	movs r0, #0
	strh r0, [r4, #0x1a]
_0807AEF4:
	movs r0, #0
	cmp r0, #0
	beq _0807AF7C
_0807AEFA:
	cmp r6, #0
	bne _0807AF30
	ldr r0, [r7, #4]
	str r0, [r4]
	strh r6, [r4, #0x1a]
	ldr r2, [r4, #0x2c]
	ldr r0, [r4, #8]
	ldr r1, [r2, #0x14]
	subs r0, r0, r1
	lsls r0, r0, #8
	asrs r0, r0, #0x10
	ldr r1, [r4, #4]
	ldr r2, [r2, #0x10]
	subs r1, r1, r2
	lsls r1, r1, #8
	asrs r1, r1, #0x10
	bl sa2__sub_8004418
	adds r1, r4, #0
	adds r1, #0x60
	strh r0, [r1]
	adds r3, r1, #0
	b _0807AF56
	.align 2, 0
_0807AF28: .4byte 0x0000FF30
_0807AF2C: .4byte 0xFFFFFD00
_0807AF30:
	adds r0, r4, #0
	adds r0, #0x27
	ldrb r0, [r0]
	cmp r0, #0
	beq _0807AF44
	adds r0, r4, #0
	adds r0, #0x60
	ldrh r1, [r0]
	adds r1, #0x40
	b _0807AF4C
_0807AF44:
	adds r0, r4, #0
	adds r0, #0x60
	ldrh r1, [r0]
	subs r1, #0x40
_0807AF4C:
	ldr r3, _0807AF74 @ =0x000003FF
	adds r2, r3, #0
	ands r1, r2
	strh r1, [r0]
	adds r3, r0, #0
_0807AF56:
	movs r0, #0
	strh r0, [r4, #0x16]
	strh r0, [r4, #0x18]
	ldr r0, _0807AF78 @ =gCamera
	ldr r1, [r0, #0x14]
	subs r1, #0xa0
	ldrb r2, [r5]
	lsls r0, r2, #2
	adds r0, r0, r2
	lsls r0, r0, #2
	adds r1, r1, r0
	lsls r1, r1, #8
	str r1, [r4, #8]
	b _0807AF9C
	.align 2, 0
_0807AF74: .4byte 0x000003FF
_0807AF78: .4byte gCamera
_0807AF7C:
	ldr r0, [r4, #0x10]
	ldr r1, [r4, #8]
	subs r0, r0, r1
	lsls r0, r0, #8
	asrs r0, r0, #0x10
	ldr r1, [r4, #0xc]
	ldr r2, [r4, #4]
	subs r1, r1, r2
	lsls r1, r1, #8
	asrs r1, r1, #0x10
	bl sa2__sub_8004418
	adds r1, r4, #0
	adds r1, #0x60
	strh r0, [r1]
	adds r3, r1, #0
_0807AF9C:
	ldr r5, _0807AFB4 @ =0xFFFFFF00
	adds r0, r5, #0
	ldrh r1, [r3]
	adds r0, r0, r1
	ldr r2, _0807AFB8 @ =0x000003FF
	adds r1, r2, #0
	ands r0, r1
	strh r0, [r3]
	movs r0, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0807AFB4: .4byte 0xFFFFFF00
_0807AFB8: .4byte 0x000003FF

	thumb_func_start sub_807AFBC
sub_807AFBC: @ 0x0807AFBC
	push {r4, r5, r6, lr}
	mov ip, r0
	movs r4, #0
	ldrh r0, [r0, #0x1a]
	adds r0, #1
	mov r1, ip
	strh r0, [r1, #0x1a]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x78
	bne _0807AFD6
	movs r4, #1
	b _0807B038
_0807AFD6:
	mov r3, ip
	movs r5, #0x1a
	ldrsh r2, [r3, r5]
	mov r0, ip
	adds r0, #0x28
	ldrb r1, [r0]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	cmp r2, r0
	blt _0807B038
	mov r0, ip
	adds r0, #0x60
	ldr r6, _0807B058 @ =0xFFFFFF00
	adds r1, r6, #0
	ldrh r0, [r0]
	adds r1, r1, r0
	ldr r2, _0807B05C @ =0x000003FF
	adds r0, r2, #0
	ands r1, r0
	ldr r3, _0807B060 @ =gSineTable
	movs r5, #0x80
	lsls r5, r5, #1
	adds r0, r1, r5
	lsls r0, r0, #1
	adds r0, r0, r3
	movs r6, #0
	ldrsh r2, [r0, r6]
	mov r5, ip
	movs r6, #0x14
	ldrsh r0, [r5, r6]
	adds r0, #0x40
	muls r0, r2, r0
	asrs r0, r0, #0x10
	ldrh r2, [r5, #0x16]
	adds r0, r0, r2
	strh r0, [r5, #0x16]
	lsls r1, r1, #1
	adds r1, r1, r3
	movs r3, #0
	ldrsh r1, [r1, r3]
	movs r6, #0x14
	ldrsh r0, [r5, r6]
	adds r0, #0x40
	muls r0, r1, r0
	asrs r0, r0, #0x10
	ldrh r1, [r5, #0x18]
	adds r0, r0, r1
	strh r0, [r5, #0x18]
_0807B038:
	mov r2, ip
	movs r3, #0x16
	ldrsh r1, [r2, r3]
	ldr r0, [r2, #4]
	adds r0, r0, r1
	str r0, [r2, #4]
	movs r5, #0x18
	ldrsh r1, [r2, r5]
	ldr r0, [r2, #8]
	adds r0, r0, r1
	str r0, [r2, #8]
	adds r0, r4, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_0807B058: .4byte 0xFFFFFF00
_0807B05C: .4byte 0x000003FF
_0807B060: .4byte gSineTable

	thumb_func_start sub_807B064
sub_807B064: @ 0x0807B064
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x24
	ldrb r1, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	ldr r1, _0807B0B0 @ =gUnknown_080D5B00
	adds r2, r0, r1
	ldr r0, _0807B0B4 @ =gCamera
	ldr r0, [r0, #0x14]
	subs r0, #0x96
	lsls r1, r0, #8
	ldr r3, [r4, #8]
	cmp r3, r1
	ble _0807B0BC
	movs r0, #0
	strh r0, [r4, #0x16]
	ldr r0, _0807B0B8 @ =0x0000FC20
	strh r0, [r4, #0x18]
	ldr r2, [r4, #4]
	movs r0, #0x18
	ldrsh r1, [r4, r0]
	adds r1, r3, r1
	str r1, [r4, #8]
	ldr r0, [r4, #0x10]
	subs r0, r0, r1
	lsls r0, r0, #8
	asrs r0, r0, #0x10
	ldr r1, [r4, #0xc]
	subs r1, r1, r2
	lsls r1, r1, #8
	asrs r1, r1, #0x10
	bl sa2__sub_8004418
	adds r1, r4, #0
	adds r1, #0x60
	b _0807B0E6
	.align 2, 0
_0807B0B0: .4byte gUnknown_080D5B00
_0807B0B4: .4byte gCamera
_0807B0B8: .4byte 0x0000FC20
_0807B0BC:
	ldr r0, [r2, #4]
	str r0, [r4]
	movs r0, #0
	strh r0, [r4, #0x1a]
	strh r0, [r4, #0x16]
	strh r0, [r4, #0x18]
	str r1, [r4, #8]
	adds r0, r4, #0
	adds r0, #0x27
	ldrb r0, [r0]
	cmp r0, #0
	beq _0807B0DE
	adds r1, r4, #0
	adds r1, #0x60
	movs r0, #0x88
	lsls r0, r0, #2
	b _0807B0E6
_0807B0DE:
	adds r1, r4, #0
	adds r1, #0x60
	movs r0, #0xf8
	lsls r0, r0, #2
_0807B0E6:
	strh r0, [r1]
	adds r2, r1, #0
	ldr r1, _0807B104 @ =0xFFFFFF00
	adds r0, r1, #0
	ldrh r3, [r2]
	adds r0, r0, r3
	ldr r3, _0807B108 @ =0x000003FF
	adds r1, r3, #0
	ands r0, r1
	strh r0, [r2]
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0807B104: .4byte 0xFFFFFF00
_0807B108: .4byte 0x000003FF

	thumb_func_start sub_807B10C
sub_807B10C: @ 0x0807B10C
	push {r4, r5, r6, lr}
	adds r3, r0, #0
	adds r6, r3, #0
	adds r6, #0x60
	ldr r1, _0807B180 @ =0xFFFFFF00
	adds r0, r1, #0
	ldrh r2, [r6]
	adds r4, r0, r2
	ldr r1, _0807B184 @ =0x000003FF
	adds r0, r1, #0
	ands r4, r0
	ldr r2, _0807B188 @ =gSineTable
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r4, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	movs r1, #0
	ldrsh r0, [r0, r1]
	ldrh r1, [r3, #0x14]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x11
	adds r1, #0x40
	muls r0, r1, r0
	lsls r0, r0, #6
	lsrs r5, r0, #0x10
	strh r5, [r3, #0x16]
	lsls r0, r4, #1
	adds r0, r0, r2
	movs r2, #0
	ldrsh r0, [r0, r2]
	muls r0, r1, r0
	asrs r0, r0, #0xa
	strh r0, [r3, #0x18]
	movs r0, #0x16
	ldrsh r1, [r3, r0]
	ldr r0, [r3, #4]
	adds r2, r0, r1
	str r2, [r3, #4]
	movs r0, #0x18
	ldrsh r1, [r3, r0]
	ldr r0, [r3, #8]
	adds r0, r0, r1
	str r0, [r3, #8]
	lsls r0, r5, #0x10
	cmp r0, #0
	bge _0807B190
	ldr r0, _0807B18C @ =gCamera
	ldr r0, [r0, #0x18]
	lsls r0, r0, #8
	cmp r2, r0
	bge _0807B190
	str r0, [r3, #4]
	movs r4, #0x88
	lsls r4, r4, #2
	adds r2, r6, #0
	b _0807B1C8
	.align 2, 0
_0807B180: .4byte 0xFFFFFF00
_0807B184: .4byte 0x000003FF
_0807B188: .4byte gSineTable
_0807B18C: .4byte gCamera
_0807B190:
	lsls r0, r5, #0x10
	cmp r0, #0
	ble _0807B1B4
	ldr r0, _0807B1B0 @ =gCamera
	ldr r0, [r0, #0x1c]
	lsls r0, r0, #8
	ldr r1, [r3, #4]
	cmp r1, r0
	ble _0807B1B4
	str r0, [r3, #4]
	movs r4, #0xf8
	lsls r4, r4, #2
	adds r2, r3, #0
	adds r2, #0x60
	b _0807B1C8
	.align 2, 0
_0807B1B0: .4byte gCamera
_0807B1B4:
	adds r1, r3, #0
	adds r1, #0x60
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r2, #0
	ldrh r3, [r1]
	adds r0, r0, r3
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	adds r2, r1, #0
_0807B1C8:
	ldr r1, _0807B1DC @ =0xFFFFFF00
	adds r0, r4, r1
	ldr r3, _0807B1E0 @ =0x000003FF
	adds r1, r3, #0
	ands r0, r1
	strh r0, [r2]
	movs r0, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_0807B1DC: .4byte 0xFFFFFF00
_0807B1E0: .4byte 0x000003FF

	thumb_func_start sub_807B1E4
sub_807B1E4: @ 0x0807B1E4
	push {r4, r5, lr}
	adds r3, r0, #0
	adds r0, #0x24
	ldrb r1, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	ldr r1, _0807B20C @ =gUnknown_080D5B00
	adds r5, r0, r1
	adds r0, r3, #0
	adds r0, #0x27
	ldrb r0, [r0]
	cmp r0, #0
	beq _0807B210
	adds r0, r3, #0
	adds r0, #0x60
	ldrh r1, [r0]
	adds r1, #0xc0
	b _0807B218
	.align 2, 0
_0807B20C: .4byte gUnknown_080D5B00
_0807B210:
	adds r0, r3, #0
	adds r0, #0x60
	ldrh r1, [r0]
	subs r1, #0xc0
_0807B218:
	ldr r4, _0807B278 @ =0x000003FF
	adds r2, r4, #0
	ands r1, r2
	strh r1, [r0]
	adds r4, r0, #0
	movs r1, #0x1a
	ldrsh r0, [r3, r1]
	cmp r0, #0
	bne _0807B238
	ldr r0, [r3, #8]
	movs r2, #0x80
	lsls r2, r2, #4
	adds r0, r0, r2
	str r0, [r3, #8]
	movs r0, #1
	strh r0, [r3, #0x1a]
_0807B238:
	ldr r0, [r3, #0x20]
	ldrb r0, [r0]
	cmp r0, #0
	beq _0807B26E
	ldr r0, [r5, #4]
	str r0, [r3]
	movs r0, #0x5a
	strh r0, [r3, #0x1a]
	ldr r2, [r3, #0x2c]
	ldr r0, [r3, #8]
	ldr r1, [r2, #0x14]
	subs r0, r0, r1
	lsls r0, r0, #8
	asrs r0, r0, #0x10
	ldr r1, [r3, #4]
	ldr r2, [r2, #0x10]
	subs r1, r1, r2
	lsls r1, r1, #8
	asrs r1, r1, #0x10
	bl sa2__sub_8004418
	ldr r1, _0807B27C @ =0xFFFFFF00
	adds r0, r0, r1
	ldr r2, _0807B278 @ =0x000003FF
	adds r1, r2, #0
	ands r0, r1
	strh r0, [r4]
_0807B26E:
	movs r0, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_0807B278: .4byte 0x000003FF
_0807B27C: .4byte 0xFFFFFF00

	thumb_func_start sub_807B280
sub_807B280: @ 0x0807B280
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x1c
	adds r6, r0, #0
	adds r1, r6, #0
	adds r1, #0x60
	ldr r2, _0807B358 @ =0xFFFFFF00
	adds r0, r2, #0
	ldrh r1, [r1]
	adds r7, r0, r1
	ldr r4, _0807B35C @ =0x000003FF
	adds r0, r4, #0
	ands r7, r0
	ldr r1, _0807B360 @ =gUnknown_080D5BEC
	mov r0, sp
	movs r2, #0x1c
	bl memcpy
	movs r0, #0
	mov r8, r0
	adds r0, r6, #0
	adds r0, #0x24
	ldrb r1, [r0]
	movs r0, #6
	eors r1, r0
	rsbs r0, r1, #0
	orrs r0, r1
	lsrs r1, r0, #0x1f
	ldrh r0, [r6, #0x1a]
	subs r0, #1
	strh r0, [r6, #0x1a]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0807B2CA
	movs r2, #1
	mov r8, r2
_0807B2CA:
	ldr r5, _0807B364 @ =gSineTable
	movs r4, #0x80
	lsls r4, r4, #1
	adds r0, r7, r4
	lsls r0, r0, #1
	adds r0, r0, r5
	movs r2, #0
	ldrsh r3, [r0, r2]
	movs r4, #0x26
	adds r4, r4, r6
	mov ip, r4
	ldrb r0, [r4]
	lsls r0, r0, #1
	lsls r2, r1, #3
	subs r2, r2, r1
	lsls r2, r2, #1
	adds r0, r0, r2
	add r0, sp
	movs r4, #0
	ldrsh r1, [r0, r4]
	adds r4, r6, #0
	adds r4, #0x28
	ldrb r0, [r4]
	lsls r0, r0, #2
	subs r0, #0x10
	subs r1, r1, r0
	adds r0, r3, #0
	muls r0, r1, r0
	asrs r0, r0, #0xe
	ldrh r1, [r6, #0x16]
	adds r0, r0, r1
	strh r0, [r6, #0x16]
	lsls r0, r7, #1
	adds r0, r0, r5
	movs r1, #0
	ldrsh r3, [r0, r1]
	mov r1, ip
	ldrb r0, [r1]
	lsls r0, r0, #1
	adds r0, r0, r2
	add r0, sp
	movs r2, #0
	ldrsh r1, [r0, r2]
	ldrb r0, [r4]
	lsls r0, r0, #2
	subs r0, #0x10
	subs r1, r1, r0
	adds r0, r3, #0
	muls r0, r1, r0
	asrs r0, r0, #0xe
	ldrh r4, [r6, #0x18]
	adds r0, r0, r4
	strh r0, [r6, #0x18]
	movs r0, #0x16
	ldrsh r1, [r6, r0]
	ldr r0, [r6, #4]
	adds r0, r0, r1
	str r0, [r6, #4]
	movs r2, #0x18
	ldrsh r1, [r6, r2]
	ldr r0, [r6, #8]
	adds r0, r0, r1
	str r0, [r6, #8]
	mov r0, r8
	add sp, #0x1c
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0807B358: .4byte 0xFFFFFF00
_0807B35C: .4byte 0x000003FF
_0807B360: .4byte gUnknown_080D5BEC
_0807B364: .4byte gSineTable

	thumb_func_start sub_807B368
sub_807B368: @ 0x0807B368
	push {r4, r5, r6, lr}
	mov ip, r0
	adds r0, #0x24
	ldrb r1, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	ldr r1, _0807B3B0 @ =gUnknown_080D5B00
	adds r4, r0, r1
	mov r1, ip
	movs r2, #0x1a
	ldrsh r0, [r1, r2]
	cmp r0, #0xf
	bgt _0807B3F4
	cmp r0, #0
	bne _0807B3DE
	mov r0, ip
	adds r0, #0x28
	ldrb r1, [r0]
	movs r0, #4
	subs r0, r0, r1
	lsls r0, r0, #2
	adds r0, #0x20
	mov r3, ip
	strh r0, [r3, #0x14]
	mov r0, ip
	adds r0, #0x27
	ldrb r0, [r0]
	cmp r0, #0
	beq _0807B3B4
	ldr r0, [r3, #4]
	movs r5, #0x80
	lsls r5, r5, #3
	adds r0, r0, r5
	str r0, [r3, #4]
	b _0807B3BE
	.align 2, 0
_0807B3B0: .4byte gUnknown_080D5B00
_0807B3B4:
	mov r6, ip
	ldr r0, [r6, #4]
	ldr r1, _0807B40C @ =0xFFFFFC00
	adds r0, r0, r1
	str r0, [r6, #4]
_0807B3BE:
	mov r2, ip
	ldr r0, [r2, #8]
	movs r3, #0x80
	lsls r3, r3, #4
	adds r0, r0, r3
	str r0, [r2, #8]
	mov r0, ip
	adds r0, #0x26
	ldrb r1, [r0]
	movs r0, #0xaa
	muls r1, r0, r1
	mov r0, ip
	adds r0, #0x60
	strh r1, [r0]
	movs r0, #1
	strh r0, [r2, #0x1a]
_0807B3DE:
	mov r5, ip
	movs r6, #0x16
	ldrsh r1, [r5, r6]
	ldr r0, [r5, #4]
	adds r0, r0, r1
	str r0, [r5, #4]
	movs r0, #0x18
	ldrsh r1, [r5, r0]
	ldr r0, [r5, #8]
	adds r0, r0, r1
	str r0, [r5, #8]
_0807B3F4:
	mov r0, ip
	adds r0, #0x27
	ldrb r0, [r0]
	cmp r0, #0
	beq _0807B414
	mov r0, ip
	adds r0, #0x60
	ldrh r1, [r0]
	adds r1, #0x10
	ldr r3, _0807B410 @ =0x000003FF
	adds r2, r3, #0
	b _0807B420
	.align 2, 0
_0807B40C: .4byte 0xFFFFFC00
_0807B410: .4byte 0x000003FF
_0807B414:
	mov r0, ip
	adds r0, #0x60
	ldrh r1, [r0]
	subs r1, #0x10
	ldr r5, _0807B48C @ =0x000003FF
	adds r2, r5, #0
_0807B420:
	ands r1, r2
	strh r1, [r0]
	ldr r6, _0807B490 @ =0xFFFFFF00
	adds r1, r6, #0
	ldrh r0, [r0]
	adds r1, r1, r0
	ldr r2, _0807B48C @ =0x000003FF
	adds r0, r2, #0
	ands r1, r0
	ldr r3, _0807B494 @ =gSineTable
	movs r5, #0x80
	lsls r5, r5, #1
	adds r0, r1, r5
	lsls r0, r0, #1
	adds r0, r0, r3
	movs r6, #0
	ldrsh r2, [r0, r6]
	mov r5, ip
	movs r6, #0x14
	ldrsh r0, [r5, r6]
	muls r0, r2, r0
	asrs r0, r0, #0xb
	strh r0, [r5, #0x16]
	lsls r1, r1, #1
	adds r1, r1, r3
	movs r0, #0
	ldrsh r1, [r1, r0]
	movs r2, #0x14
	ldrsh r0, [r5, r2]
	muls r0, r1, r0
	asrs r0, r0, #0xb
	strh r0, [r5, #0x18]
	movs r3, #0x16
	ldrsh r1, [r5, r3]
	ldr r0, [r5, #4]
	adds r0, r0, r1
	str r0, [r5, #4]
	movs r6, #0x18
	ldrsh r1, [r5, r6]
	ldr r0, [r5, #8]
	adds r0, r0, r1
	str r0, [r5, #8]
	ldr r0, [r5, #0x20]
	ldrb r0, [r0]
	cmp r0, #0
	beq _0807B484
	ldr r0, [r4, #4]
	str r0, [r5]
	movs r0, #0x2d
	strh r0, [r5, #0x1a]
_0807B484:
	movs r0, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_0807B48C: .4byte 0x000003FF
_0807B490: .4byte 0xFFFFFF00
_0807B494: .4byte gSineTable

	thumb_func_start sub_807B498
sub_807B498: @ 0x0807B498
	push {r4, r5, r6, lr}
	adds r3, r0, #0
	adds r1, r3, #0
	adds r1, #0x60
	ldr r2, _0807B4D0 @ =0xFFFFFF00
	adds r0, r2, #0
	ldrh r6, [r1]
	adds r4, r0, r6
	ldr r0, _0807B4D4 @ =0x000003FF
	adds r2, r0, #0
	ands r4, r2
	movs r5, #0
	ldrh r0, [r3, #0x1a]
	subs r0, #1
	strh r0, [r3, #0x1a]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0807B4BE
	movs r5, #1
_0807B4BE:
	adds r0, r3, #0
	adds r0, #0x27
	ldrb r0, [r0]
	cmp r0, #0
	beq _0807B4D8
	ldrh r0, [r1]
	adds r0, #8
	b _0807B4DC
	.align 2, 0
_0807B4D0: .4byte 0xFFFFFF00
_0807B4D4: .4byte 0x000003FF
_0807B4D8:
	ldrh r0, [r1]
	subs r0, #8
_0807B4DC:
	ands r0, r2
	strh r0, [r1]
	ldr r2, _0807B528 @ =gSineTable
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r4, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	movs r6, #0
	ldrsh r1, [r0, r6]
	movs r6, #0x14
	ldrsh r0, [r3, r6]
	muls r0, r1, r0
	asrs r0, r0, #9
	strh r0, [r3, #0x16]
	lsls r0, r4, #1
	adds r0, r0, r2
	movs r2, #0
	ldrsh r1, [r0, r2]
	movs r6, #0x14
	ldrsh r0, [r3, r6]
	muls r0, r1, r0
	asrs r0, r0, #9
	strh r0, [r3, #0x18]
	movs r0, #0x16
	ldrsh r1, [r3, r0]
	ldr r0, [r3, #4]
	adds r0, r0, r1
	str r0, [r3, #4]
	movs r2, #0x18
	ldrsh r1, [r3, r2]
	ldr r0, [r3, #8]
	adds r0, r0, r1
	str r0, [r3, #8]
	adds r0, r5, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_0807B528: .4byte gSineTable

	thumb_func_start sub_807B52C
sub_807B52C: @ 0x0807B52C
	push {r4, r5, lr}
	adds r1, r0, #0
	adds r1, #0x60
	ldr r3, _0807B590 @ =0xFFFFFF00
	adds r2, r3, #0
	ldrh r1, [r1]
	adds r2, r2, r1
	ldr r5, _0807B594 @ =0x000003FF
	adds r1, r5, #0
	ands r2, r1
	ldr r4, _0807B598 @ =gSineTable
	movs r3, #0x80
	lsls r3, r3, #1
	adds r1, r2, r3
	lsls r1, r1, #1
	adds r1, r1, r4
	movs r5, #0
	ldrsh r3, [r1, r5]
	movs r5, #0x14
	ldrsh r1, [r0, r5]
	muls r1, r3, r1
	asrs r1, r1, #0xe
	ldrh r3, [r0, #0x16]
	adds r1, r1, r3
	strh r1, [r0, #0x16]
	lsls r2, r2, #1
	adds r2, r2, r4
	movs r5, #0
	ldrsh r2, [r2, r5]
	movs r3, #0x14
	ldrsh r1, [r0, r3]
	muls r1, r2, r1
	asrs r1, r1, #0xe
	ldrh r5, [r0, #0x18]
	adds r1, r1, r5
	strh r1, [r0, #0x18]
	movs r1, #0x16
	ldrsh r2, [r0, r1]
	ldr r1, [r0, #4]
	adds r1, r1, r2
	str r1, [r0, #4]
	movs r3, #0x18
	ldrsh r2, [r0, r3]
	ldr r1, [r0, #8]
	adds r1, r1, r2
	str r1, [r0, #8]
	movs r0, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_0807B590: .4byte 0xFFFFFF00
_0807B594: .4byte 0x000003FF
_0807B598: .4byte gSineTable

	thumb_func_start sub_807B59C
sub_807B59C: @ 0x0807B59C
	push {r4, lr}
	adds r3, r0, #0
	adds r0, #0x24
	ldrb r1, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	ldr r1, _0807B5DC @ =gUnknown_080D5B00
	adds r4, r0, r1
	adds r1, r3, #0
	adds r1, #0x60
	movs r0, #0
	strh r0, [r1]
	ldrh r1, [r3, #0x18]
	subs r1, #0x20
	strh r1, [r3, #0x18]
	movs r0, #0x18
	ldrsh r2, [r3, r0]
	ldr r0, [r3, #8]
	adds r0, r0, r2
	str r0, [r3, #8]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	ldr r0, _0807B5E0 @ =0xFFFFFC00
	cmp r1, r0
	bge _0807B5D4
	ldr r0, [r4, #4]
	str r0, [r3]
_0807B5D4:
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0807B5DC: .4byte gUnknown_080D5B00
_0807B5E0: .4byte 0xFFFFFC00

	thumb_func_start sub_807B5E4
sub_807B5E4: @ 0x0807B5E4
	push {r4, lr}
	ldr r2, _0807B614 @ =gCurTask
	ldr r0, [r2]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, [r4, #0x34]
	cmp r0, #0
	beq _0807B618
	adds r0, #0x20
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bgt _0807B618
	ldr r0, [r4, #0x1c]
	movs r1, #0
	strb r1, [r0]
	ldr r0, [r2]
	bl TaskDestroy
	b _0807B65E
	.align 2, 0
_0807B614: .4byte gCurTask
_0807B618:
	movs r0, #0x16
	ldrsh r1, [r4, r0]
	ldr r0, [r4, #4]
	adds r0, r0, r1
	str r0, [r4, #4]
	movs r0, #0x18
	ldrsh r1, [r4, r0]
	ldr r0, [r4, #8]
	adds r0, r0, r1
	str r0, [r4, #8]
	adds r0, r4, #0
	movs r1, #0
	bl sub_807B664
	ldrh r0, [r4, #0x1a]
	adds r0, #1
	strh r0, [r4, #0x1a]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x20
	bne _0807B658
	ldr r1, [r4, #0x1c]
	movs r0, #0
	strb r0, [r1]
	ldr r0, _0807B654 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
	b _0807B65E
	.align 2, 0
_0807B654: .4byte gCurTask
_0807B658:
	adds r0, r4, #0
	bl sub_807A8B4
_0807B65E:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_807B664
sub_807B664: @ 0x0807B664
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r4, r0, #0
	adds r6, r1, #0
	movs r5, #0
	ldr r0, [r4, #8]
	adds r0, #0xa
	asrs r0, r0, #8
	ldr r1, [r4, #4]
	asrs r1, r1, #8
	str r5, [sp]
	ldr r2, _0807B6C0 @ =sub_805217C
	str r2, [sp, #4]
	movs r2, #1
	movs r3, #8
	bl sub_80517FC
	cmp r0, #0
	bgt _0807B6B4
	adds r0, #1
	lsls r0, r0, #8
	ldr r1, [r4, #8]
	adds r1, r1, r0
	ldr r0, _0807B6C4 @ =0xFFFFFF00
	ands r1, r0
	subs r1, #1
	str r1, [r4, #8]
	cmp r6, #0
	beq _0807B6B2
	movs r0, #0x80
	lsls r0, r0, #2
	movs r3, #1
	rsbs r3, r3, #0
	movs r1, #0x91
	str r1, [sp]
	movs r1, #0x40
	movs r2, #0
	bl sub_805256C
_0807B6B2:
	movs r5, #1
_0807B6B4:
	adds r0, r5, #0
	add sp, #8
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_0807B6C0: .4byte sub_805217C
_0807B6C4: .4byte 0xFFFFFF00

@ void* unk
	thumb_func_start sub_807B6C8
sub_807B6C8: @ 0x0807B6C8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, _0807B704 @ =sub_8081904
	movs r1, #0xd6
	lsls r1, r1, #2
	movs r2, #0x84
	lsls r2, r2, #6
	ldr r3, _0807B708 @ =sub_80817E0
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	ldrh r2, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r2, r2, r1
	mov ip, r2
	ldr r2, _0807B70C @ =gStageData
	adds r1, r2, #0
	adds r1, #0x88
	str r0, [r1]
	ldrb r0, [r2, #1]
	cmp r0, #0
	bne _0807B710
	movs r0, #8
	b _0807B712
	.align 2, 0
_0807B704: .4byte sub_8081904
_0807B708: .4byte sub_80817E0
_0807B70C: .4byte gStageData
_0807B710:
	movs r0, #6
_0807B712:
	mov r1, ip
	strb r0, [r1]
	mov r0, ip
	str r4, [r0, #4]
	movs r3, #0
	movs r0, #1
	mov r1, ip
	strh r0, [r1, #0x14]
	strh r3, [r1, #0x16]
	strh r0, [r1, #8]
	strh r3, [r1, #0xc]
	ldr r2, _0807B7E8 @ =gPlayers
	str r2, [r1, #0x20]
	adds r0, r2, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	lsls r1, r1, #0x1e
	lsrs r1, r1, #0x1e
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r2
	mov r1, ip
	str r0, [r1, #0x24]
	movs r0, #0x94
	lsls r0, r0, #2
	add r0, ip
	str r3, [r0]
	movs r0, #0x8a
	lsls r0, r0, #2
	add r0, ip
	str r3, [r0]
	movs r1, #0
	ldr r5, _0807B7EC @ =gDispCnt
	ldr r6, _0807B7F0 @ =gBgScrollRegs
	ldr r7, _0807B7F4 @ =gBgCntRegs
	ldr r0, _0807B7F8 @ =gUnknown_03006230
	mov r8, r0
	ldr r4, _0807B7FC @ =gUnknown_03003590
	mov r2, ip
	adds r2, #0x7c
_0807B768:
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, r2, r0
	str r3, [r0]
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #3
	bls _0807B768
	movs r0, #0
	mov r1, ip
	str r0, [r1, #0x18]
	movs r1, #0
	movs r2, #0xb2
	lsls r2, r2, #2
	add r2, ip
	movs r3, #0
_0807B78C:
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, r2, r0
	str r3, [r0]
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #2
	bls _0807B78C
	movs r0, #0x9e
	lsls r0, r0, #2
	add r0, ip
	movs r2, #0
	str r2, [r0]
	movs r0, #0xa8
	lsls r0, r0, #2
	add r0, ip
	str r2, [r0]
	ldrh r1, [r5]
	ldr r0, _0807B800 @ =0x0000FEFF
	ands r0, r1
	strh r0, [r5]
	movs r1, #0
	strh r2, [r6]
	strh r2, [r6, #2]
	ldr r0, _0807B804 @ =0x00009B0E
	strh r0, [r7]
	mov r0, r8
	strb r1, [r0]
	strb r1, [r4]
	strb r1, [r4, #1]
	movs r0, #0xff
	strb r0, [r4, #2]
	movs r0, #0x20
	strb r0, [r4, #3]
	mov r0, ip
	bl sub_807C074
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807B7E8: .4byte gPlayers
_0807B7EC: .4byte gDispCnt
_0807B7F0: .4byte gBgScrollRegs
_0807B7F4: .4byte gBgCntRegs
_0807B7F8: .4byte gUnknown_03006230
_0807B7FC: .4byte gUnknown_03003590
_0807B800: .4byte 0x0000FEFF
_0807B804: .4byte 0x00009B0E

	thumb_func_start sub_807B808
sub_807B808: @ 0x0807B808
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	ldr r0, _0807B854 @ =gCurTask
	mov sb, r0
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r5, [r4, #0x20]
	ldr r6, [r4, #0x24]
	adds r0, r4, #0
	bl sub_807C14C
	adds r0, r4, #0
	bl sub_80816C0
	mov r1, sp
	mov r0, sp
	movs r2, #0
	mov r8, r2
	movs r7, #0
	strh r7, [r0, #2]
	strh r7, [r1]
	ldrh r1, [r4, #0xc]
	cmp r1, #0x64
	beq _0807B8B0
	cmp r1, #0x64
	bgt _0807B858
	cmp r1, #0
	beq _0807B874
	cmp r1, #0xa
	beq _0807B896
	b _0807B9A8
	.align 2, 0
_0807B854: .4byte gCurTask
_0807B858:
	cmp r1, #0xc8
	bne _0807B85E
	b _0807B95E
_0807B85E:
	cmp r1, #0xc8
	bgt _0807B868
	cmp r1, #0x6e
	beq _0807B94C
	b _0807B9A8
_0807B868:
	movs r0, #0xfa
	lsls r0, r0, #2
	cmp r1, r0
	bne _0807B872
	b _0807B99C
_0807B872:
	b _0807B9A8
_0807B874:
	movs r0, #0xc
	bl sub_807FB7C
	movs r0, #0
	bl sub_807FB7C
	movs r0, #0xa
	bl sub_807FB7C
	movs r0, #0xb
	bl sub_807FB7C
	movs r0, #5
	strh r0, [r4, #8]
	movs r0, #0xa
	strh r0, [r4, #0xc]
	b _0807B9A8
_0807B896:
	ldrh r0, [r4, #8]
	subs r0, #1
	strh r0, [r4, #8]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0807B8A4
	b _0807B9A8
_0807B8A4:
	movs r0, #0x36
	bl sub_80299D4
	movs r0, #0x64
	strh r0, [r4, #0xc]
	b _0807B9A8
_0807B8B0:
	ldr r0, [r5, #0x10]
	asrs r0, r0, #8
	ldr r1, _0807B8C4 @ =0x0000068C
	cmp r0, r1
	ble _0807B8CC
	ldr r0, _0807B8C8 @ =0x00068D00
	str r0, [r5, #0x10]
	strh r7, [r5, #0x1c]
	strh r7, [r5, #0x18]
	b _0807B8D2
	.align 2, 0
_0807B8C4: .4byte 0x0000068C
_0807B8C8: .4byte 0x00068D00
_0807B8CC:
	mov r1, sp
	movs r0, #0x10
	strh r0, [r1]
_0807B8D2:
	ldr r0, [r6, #0x10]
	asrs r0, r0, #8
	ldr r1, _0807B8E8 @ =0x00000664
	cmp r0, r1
	ble _0807B8F0
	ldr r0, _0807B8EC @ =0x00066500
	str r0, [r6, #0x10]
	movs r0, #0
	strh r0, [r6, #0x1c]
	strh r0, [r6, #0x18]
	b _0807B8FC
	.align 2, 0
_0807B8E8: .4byte 0x00000664
_0807B8EC: .4byte 0x00066500
_0807B8F0:
	mov r2, sp
	mov r0, sp
	ldrh r1, [r0, #2]
	movs r0, #0x10
	orrs r0, r1
	strh r0, [r2, #2]
_0807B8FC:
	ldrh r1, [r5, #0x1e]
	mov r0, sp
	ldrh r0, [r0]
	strh r0, [r5, #0x1e]
	eors r1, r0
	ands r1, r0
	strh r1, [r5, #0x20]
	ldrh r1, [r6, #0x1e]
	mov r0, sp
	ldrh r0, [r0, #2]
	strh r0, [r6, #0x1e]
	eors r1, r0
	ands r1, r0
	strh r1, [r6, #0x20]
	ldr r0, [r5, #0x10]
	asrs r0, r0, #8
	ldr r1, _0807B948 @ =0x0000068C
	cmp r0, r1
	ble _0807B9A8
	ldr r0, [r5, #0x14]
	asrs r0, r0, #8
	cmp r0, #0xb2
	ble _0807B9A8
	ldr r0, [r6, #0x10]
	asrs r0, r0, #8
	subs r1, #0x28
	cmp r0, r1
	ble _0807B9A8
	ldr r0, [r6, #0x14]
	asrs r0, r0, #8
	cmp r0, #0xb2
	ble _0807B9A8
	movs r0, #0x1e
	strh r0, [r4, #8]
	movs r0, #0x6e
	strh r0, [r4, #0xc]
	b _0807B9A8
	.align 2, 0
_0807B948: .4byte 0x0000068C
_0807B94C:
	ldrh r0, [r4, #8]
	subs r0, #1
	strh r0, [r4, #8]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0807B9A8
	movs r0, #0xc8
	strh r0, [r4, #0xc]
	b _0807B9A8
_0807B95E:
	ldr r1, _0807B994 @ =gCamera
	movs r0, #0x10
	str r0, [r1, #0x10]
	adds r0, r4, #0
	bl sub_807BCCC
	adds r0, r4, #0
	bl sub_807BEF0
	adds r0, r4, #0
	bl sub_807D6C4
	adds r0, r4, #0
	bl sub_807CBC8
	mov r0, r8
	strb r0, [r4, #0x10]
	strb r0, [r4, #0x12]
	movs r0, #1
	strh r0, [r4, #8]
	strh r7, [r4, #0xc]
	mov r2, sb
	ldr r1, [r2]
	ldr r0, _0807B998 @ =sub_807B9B8
	str r0, [r1, #8]
	b _0807B9A8
	.align 2, 0
_0807B994: .4byte gCamera
_0807B998: .4byte sub_807B9B8
_0807B99C:
	strh r7, [r5, #0x1c]
	strh r7, [r5, #0x18]
	strh r7, [r6, #0x1c]
	strh r7, [r6, #0x18]
	bl sub_807A4A8
_0807B9A8:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_807B9B8
sub_807B9B8: @ 0x0807B9B8
	push {r4, lr}
	sub sp, #4
	ldr r3, _0807B9E8 @ =gCurTask
	ldr r0, [r3]
	ldrh r2, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r2, r0
	ldrh r0, [r4, #0xc]
	cmp r0, #0x14
	bne _0807B9D0
	b _0807BAD0
_0807B9D0:
	cmp r0, #0x14
	bgt _0807B9F6
	cmp r0, #0xa
	beq _0807BA80
	cmp r0, #0xa
	bgt _0807B9EC
	cmp r0, #0
	beq _0807BA26
	cmp r0, #1
	beq _0807BA30
	b _0807BBD4
	.align 2, 0
_0807B9E8: .4byte gCurTask
_0807B9EC:
	cmp r0, #0xb
	beq _0807BAAA
	cmp r0, #0xc
	beq _0807BA94
	b _0807BBD4
_0807B9F6:
	cmp r0, #0x1f
	bne _0807B9FC
	b _0807BB64
_0807B9FC:
	cmp r0, #0x1f
	bgt _0807BA0C
	cmp r0, #0x15
	beq _0807BAE2
	cmp r0, #0x1e
	bne _0807BA0A
	b _0807BB30
_0807BA0A:
	b _0807BBD4
_0807BA0C:
	cmp r0, #0x64
	bne _0807BA12
	b _0807BBB0
_0807BA12:
	cmp r0, #0x64
	bgt _0807BA1E
	cmp r0, #0x20
	bne _0807BA1C
	b _0807BB8E
_0807BA1C:
	b _0807BBD4
_0807BA1E:
	cmp r0, #0xc8
	bne _0807BA24
	b _0807BBC2
_0807BA24:
	b _0807BBD4
_0807BA26:
	movs r0, #0x3c
	strh r0, [r4, #8]
	movs r0, #1
	strh r0, [r4, #0xc]
	b _0807BBD4
_0807BA30:
	ldrh r0, [r4, #8]
	subs r0, #1
	strh r0, [r4, #8]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0807BA3E
	b _0807BBD4
_0807BA3E:
	ldr r0, _0807BA78 @ =0x00000237
	bl m4aSongNumStart
	movs r0, #0x78
	strh r0, [r4, #8]
	movs r0, #0xa
	strh r0, [r4, #0xc]
	ldr r2, _0807BA7C @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #1
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	movs r0, #0x80
	lsls r0, r0, #4
	movs r3, #1
	rsbs r3, r3, #0
	movs r1, #0xd3
	str r1, [sp]
	movs r1, #4
	movs r2, #0
	bl sub_805256C
	movs r0, #0xd2
	bl sub_807FB7C
	b _0807BBD4
	.align 2, 0
_0807BA78: .4byte 0x00000237
_0807BA7C: .4byte gDispCnt
_0807BA80:
	ldrh r0, [r4, #8]
	subs r0, #1
	strh r0, [r4, #8]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0807BA8E
	b _0807BBD4
_0807BA8E:
	movs r0, #0xc
	strh r0, [r4, #0xc]
	b _0807BBD4
_0807BA94:
	ldr r1, _0807BACC @ =0x03000120
	adds r0, r2, r1
	ldr r0, [r0]
	asrs r0, r0, #8
	cmp r0, #0xb7
	bgt _0807BAAA
	movs r0, #0xdc
	bl sub_807FB7C
	movs r0, #0xb
	strh r0, [r4, #0xc]
_0807BAAA:
	movs r3, #0x90
	lsls r3, r3, #1
	adds r0, r4, r3
	ldr r1, [r0]
	subs r1, #0x80
	str r1, [r0]
	movs r0, #0x98
	lsls r0, r0, #8
	cmp r1, r0
	ble _0807BAC0
	b _0807BBD4
_0807BAC0:
	movs r0, #0x3c
	strh r0, [r4, #8]
	movs r0, #0x14
	strh r0, [r4, #0xc]
	b _0807BBD4
	.align 2, 0
_0807BACC: .4byte 0x03000120
_0807BAD0:
	ldrh r0, [r4, #8]
	subs r0, #1
	strh r0, [r4, #8]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0807BBD4
	movs r0, #0x15
	strh r0, [r4, #0xc]
	b _0807BBD4
_0807BAE2:
	ldr r0, _0807BB1C @ =0x03000144
	adds r1, r2, r0
	ldr r0, [r1]
	movs r3, #0x80
	lsls r3, r3, #1
	adds r0, r0, r3
	str r0, [r1]
	ldr r0, _0807BB20 @ =0x0300016C
	adds r2, r2, r0
	ldr r0, [r2]
	ldr r3, _0807BB24 @ =0xFFFFFF00
	adds r0, r0, r3
	str r0, [r2]
	ldr r1, [r1]
	ldr r0, _0807BB28 @ =0x000613FF
	cmp r1, r0
	ble _0807BBD4
	movs r0, #0x1e
	strh r0, [r4, #8]
	strh r0, [r4, #0xc]
	ldr r0, _0807BB2C @ =0x00000237
	bl m4aSongNumStop
	adds r0, r4, #0
	movs r1, #0
	movs r2, #1
	bl sub_8081A74
	b _0807BBD4
	.align 2, 0
_0807BB1C: .4byte 0x03000144
_0807BB20: .4byte 0x0300016C
_0807BB24: .4byte 0xFFFFFF00
_0807BB28: .4byte 0x000613FF
_0807BB2C: .4byte 0x00000237
_0807BB30:
	ldrh r0, [r4, #8]
	subs r0, #1
	strh r0, [r4, #8]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0807BBD4
	movs r0, #0x24
	strh r0, [r4, #8]
	movs r0, #0x1f
	strh r0, [r4, #0xc]
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0
	bl sub_8081A74
	adds r0, r4, #0
	movs r1, #0
	movs r2, #4
	bl sub_8081AD4
	adds r0, r4, #0
	movs r1, #1
	movs r2, #4
	bl sub_8081AD4
	b _0807BBD4
_0807BB64:
	ldrh r0, [r4, #8]
	subs r0, #1
	strh r0, [r4, #8]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0807BBD4
	movs r0, #0x24
	strh r0, [r4, #8]
	movs r0, #0x20
	strh r0, [r4, #0xc]
	adds r0, r4, #0
	movs r1, #0
	movs r2, #5
	bl sub_8081AD4
	adds r0, r4, #0
	movs r1, #1
	movs r2, #5
	bl sub_8081AD4
	b _0807BBD4
_0807BB8E:
	ldrh r0, [r4, #8]
	subs r0, #1
	strh r0, [r4, #8]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0807BBD4
	movs r0, #0xfa
	bl sub_807FB7C
	movs r0, #0x14
	bl sub_807FB7C
	movs r0, #0x1e
	strh r0, [r4, #8]
	movs r0, #0x64
	strh r0, [r4, #0xc]
	b _0807BBD4
_0807BBB0:
	ldrh r0, [r4, #8]
	subs r0, #1
	strh r0, [r4, #8]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0807BBD4
	movs r0, #0xc8
	strh r0, [r4, #0xc]
	b _0807BBD4
_0807BBC2:
	movs r2, #0
	movs r1, #0
	movs r0, #1
	strh r0, [r4, #8]
	strh r1, [r4, #0xc]
	strb r2, [r4, #1]
	ldr r1, [r3]
	ldr r0, _0807BC00 @ =sub_807BC04
	str r0, [r1, #8]
_0807BBD4:
	adds r0, r4, #0
	bl sub_807BD88
	adds r0, r4, #0
	bl sub_807BFEC
	adds r0, r4, #0
	bl sub_807DB60
	adds r0, r4, #0
	bl sub_807D81C
	adds r0, r4, #0
	bl sub_807C14C
	adds r0, r4, #0
	bl sub_80816C0
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807BC00: .4byte sub_807BC04

	thumb_func_start sub_807BC04
sub_807BC04: @ 0x0807BC04
	push {r4, r5, lr}
	ldr r0, _0807BC84 @ =gCurTask
	ldr r0, [r0]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	ldr r1, _0807BC88 @ =gUnknown_08E2ED00
	ldrb r0, [r4, #1]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r4, #0
	bl _call_via_r1
	adds r0, r4, #0
	bl sub_807ED8C
	adds r0, r4, #0
	bl sub_807BD88
	adds r0, r4, #0
	bl sub_807DB60
	adds r0, r4, #0
	bl sub_807D81C
	adds r0, r4, #0
	bl sub_807BFEC
	adds r0, r4, #0
	bl sub_807C14C
	adds r0, r4, #0
	bl sub_80816C0
	ldr r0, _0807BC8C @ =gStageData
	ldrb r1, [r0, #6]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	ldr r1, _0807BC90 @ =gPlayers
	adds r4, r0, r1
	ldr r0, [r4, #0x14]
	asrs r0, r0, #8
	cmp r0, #0xd9
	ble _0807BCBA
	ldr r0, [r4, #4]
	movs r1, #0x80
	lsls r1, r1, #1
	ands r0, r1
	cmp r0, #0
	bne _0807BC98
	movs r0, #0xa0
	bl sub_807FB7C
	ldr r1, _0807BC94 @ =sub_8008E38
	adds r0, r4, #0
	bl SetPlayerCallback
	b _0807BCBA
	.align 2, 0
_0807BC84: .4byte gCurTask
_0807BC88: .4byte gUnknown_08E2ED00
_0807BC8C: .4byte gStageData
_0807BC90: .4byte gPlayers
_0807BC94: .4byte sub_8008E38
_0807BC98:
	ldr r1, [r4]
	ldr r5, _0807BCC0 @ =sub_8008E38
	cmp r1, r5
	beq _0807BCBA
	ldr r0, _0807BCC4 @ =sub_800913C
	cmp r1, r0
	beq _0807BCBA
	ldr r0, _0807BCC8 @ =sub_800DF9C
	cmp r1, r0
	beq _0807BCBA
	movs r0, #0xa0
	bl sub_807FB7C
	adds r0, r4, #0
	adds r1, r5, #0
	bl SetPlayerCallback
_0807BCBA:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807BCC0: .4byte sub_8008E38
_0807BCC4: .4byte sub_800913C
_0807BCC8: .4byte sub_800DF9C

	thumb_func_start sub_807BCCC
sub_807BCCC: @ 0x0807BCCC
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	mov ip, r0
	movs r0, #0xf4
	lsls r0, r0, #1
	add r0, ip
	movs r1, #0x92
	lsls r1, r1, #1
	add r1, ip
	movs r4, #0
	str r4, [r1]
	movs r1, #0x94
	lsls r1, r1, #1
	add r1, ip
	str r4, [r1]
	movs r2, #0x96
	lsls r2, r2, #1
	add r2, ip
	movs r1, #0
	mov r8, r1
	movs r1, #1
	strh r1, [r2]
	movs r1, #0x97
	lsls r1, r1, #1
	add r1, ip
	strh r4, [r1]
	movs r2, #0x8e
	lsls r2, r2, #1
	add r2, ip
	movs r1, #0xcf
	lsls r1, r1, #0xb
	str r1, [r2]
	movs r1, #0x90
	lsls r1, r1, #1
	add r1, ip
	movs r3, #0xb0
	lsls r3, r3, #9
	str r3, [r1]
	ldr r6, _0807BD70 @ =gBgScrollRegs
	ldr r1, [r2]
	asrs r1, r1, #8
	ldr r5, _0807BD74 @ =gCamera
	ldr r2, [r5]
	subs r1, r1, r2
	movs r2, #0x80
	subs r1, r2, r1
	strh r1, [r6]
	asrs r3, r3, #8
	ldr r1, [r5, #4]
	subs r3, r3, r1
	subs r2, r2, r3
	strh r2, [r6, #2]
	ldr r1, _0807BD78 @ =0x0600C000
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _0807BD7C @ =0x0600D800
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	ldr r1, _0807BD80 @ =0x000001D3
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	movs r1, #0x20
	strh r1, [r0, #0x26]
	strh r1, [r0, #0x28]
	ldr r1, _0807BD84 @ =0x00000212
	add r1, ip
	mov r2, r8
	strb r2, [r1]
	strh r4, [r0, #0x2e]
	bl DrawBackground
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0807BD70: .4byte gBgScrollRegs
_0807BD74: .4byte gCamera
_0807BD78: .4byte 0x0600C000
_0807BD7C: .4byte 0x0600D800
_0807BD80: .4byte 0x000001D3
_0807BD84: .4byte 0x00000212

	thumb_func_start sub_807BD88
sub_807BD88: @ 0x0807BD88
	push {r4, r5, r6, lr}
	mov ip, r0
	movs r3, #0x97
	lsls r3, r3, #1
	add r3, ip
	ldrh r0, [r3]
	cmp r0, #0xa
	beq _0807BDA2
	cmp r0, #0xa
	ble _0807BE1A
	cmp r0, #0x14
	beq _0807BDFC
	b _0807BE1A
_0807BDA2:
	movs r5, #0x8e
	lsls r5, r5, #1
	add r5, ip
	movs r4, #0x92
	lsls r4, r4, #1
	add r4, ip
	ldr r2, _0807BDF8 @ =gUnknown_080D5C80
	movs r3, #0x96
	lsls r3, r3, #1
	add r3, ip
	movs r1, #0
	ldrsh r0, [r3, r1]
	lsls r0, r0, #2
	adds r0, r0, r2
	movs r6, #0
	ldrsh r1, [r0, r6]
	lsls r1, r1, #8
	ldr r0, [r4]
	adds r0, r0, r1
	str r0, [r5]
	movs r5, #0x90
	lsls r5, r5, #1
	add r5, ip
	movs r4, #0x94
	lsls r4, r4, #1
	add r4, ip
	movs r1, #0
	ldrsh r0, [r3, r1]
	lsls r0, r0, #2
	adds r2, #2
	adds r0, r0, r2
	movs r2, #0
	ldrsh r1, [r0, r2]
	lsls r1, r1, #8
	ldr r0, [r4]
	adds r0, r0, r1
	str r0, [r5]
	ldrh r0, [r3]
	adds r0, #1
	movs r1, #7
	ands r0, r1
	b _0807BE18
	.align 2, 0
_0807BDF8: .4byte gUnknown_080D5C80
_0807BDFC:
	movs r2, #0x90
	lsls r2, r2, #1
	add r2, ip
	movs r1, #0x94
	lsls r1, r1, #1
	add r1, ip
	ldr r0, [r2]
	ldr r1, [r1]
	adds r0, r0, r1
	str r0, [r2]
	ldr r1, _0807BE4C @ =0x00015FFF
	cmp r0, r1
	ble _0807BE1A
	movs r0, #0
_0807BE18:
	strh r0, [r3]
_0807BE1A:
	ldr r4, _0807BE50 @ =gBgScrollRegs
	movs r0, #0x8e
	lsls r0, r0, #1
	add r0, ip
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r3, _0807BE54 @ =gCamera
	ldr r1, [r3]
	subs r0, r0, r1
	movs r2, #0x80
	subs r0, r2, r0
	strh r0, [r4]
	movs r0, #0x90
	lsls r0, r0, #1
	add r0, ip
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r1, [r3, #4]
	subs r0, r0, r1
	subs r2, r2, r0
	strh r2, [r4, #2]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0807BE4C: .4byte 0x00015FFF
_0807BE50: .4byte gBgScrollRegs
_0807BE54: .4byte gCamera

	thumb_func_start sub_807BE58
sub_807BE58: @ 0x0807BE58
	push {r4, lr}
	adds r2, r0, #0
	lsls r1, r1, #0x18
	lsrs r3, r1, #0x18
	cmp r3, #1
	beq _0807BEA4
	cmp r3, #1
	bgt _0807BE6E
	cmp r3, #0
	beq _0807BE74
	b _0807BEE8
_0807BE6E:
	cmp r3, #0xa
	beq _0807BECC
	b _0807BEE8
_0807BE74:
	movs r0, #0x92
	lsls r0, r0, #1
	adds r1, r2, r0
	movs r4, #0x8e
	lsls r4, r4, #1
	adds r0, r2, r4
	ldr r0, [r0]
	str r0, [r1]
	movs r0, #0x94
	lsls r0, r0, #1
	adds r1, r2, r0
	adds r4, #4
	adds r0, r2, r4
	ldr r0, [r0]
	str r0, [r1]
	movs r1, #0x96
	lsls r1, r1, #1
	adds r0, r2, r1
	strh r3, [r0]
	movs r3, #0x97
	lsls r3, r3, #1
	adds r1, r2, r3
	movs r0, #0xa
	b _0807BEE6
_0807BEA4:
	movs r4, #0x97
	lsls r4, r4, #1
	adds r1, r2, r4
	movs r0, #0
	strh r0, [r1]
	movs r0, #0x8e
	lsls r0, r0, #1
	adds r1, r2, r0
	movs r3, #0x92
	lsls r3, r3, #1
	adds r0, r2, r3
	ldr r0, [r0]
	str r0, [r1]
	subs r4, #0xe
	adds r1, r2, r4
	adds r3, #4
	adds r0, r2, r3
	ldr r0, [r0]
	str r0, [r1]
	b _0807BEE8
_0807BECC:
	movs r4, #0x94
	lsls r4, r4, #1
	adds r1, r2, r4
	movs r0, #0x80
	str r0, [r1]
	adds r0, #0xac
	adds r1, r2, r0
	movs r0, #0
	strh r0, [r1]
	movs r3, #0x97
	lsls r3, r3, #1
	adds r1, r2, r3
	movs r0, #0x14
_0807BEE6:
	strh r0, [r1]
_0807BEE8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_807BEF0
sub_807BEF0: @ 0x0807BEF0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov sl, r0
	movs r0, #0x98
	lsls r0, r0, #1
	add r0, sl
	mov r8, r0
	movs r0, #0x8e
	lsls r0, r0, #1
	add r0, sl
	ldr r0, [r0]
	mov r1, r8
	str r0, [r1]
	movs r0, #0x9a
	lsls r0, r0, #1
	add r0, sl
	mov sb, r0
	movs r0, #0x90
	lsls r0, r0, #1
	add r0, sl
	ldr r0, [r0]
	ldr r1, _0807BFDC @ =0xFFFFB800
	adds r0, r0, r1
	mov r1, sb
	str r0, [r1]
	movs r7, #0x94
	lsls r7, r7, #2
	add r7, sl
	movs r0, #0x10
	bl VramMalloc
	str r0, [r7]
	movs r6, #0
	movs r5, #0
	ldr r0, _0807BFE0 @ =0x000004F2
	strh r0, [r7, #0xc]
	strb r6, [r7, #0x1a]
	adds r0, #0x8e
	strh r0, [r7, #0x14]
	strh r5, [r7, #0xe]
	strh r5, [r7, #0x16]
	movs r0, #0xff
	strb r0, [r7, #0x1b]
	movs r1, #0x10
	strb r1, [r7, #0x1c]
	strb r6, [r7, #0x1f]
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r7, #0x20]
	movs r1, #0x80
	lsls r1, r1, #6
	str r1, [r7, #8]
	mov r1, r8
	ldr r0, [r1]
	asrs r0, r0, #8
	ldr r4, _0807BFE4 @ =gCamera
	ldr r1, [r4]
	subs r0, r0, r1
	strh r0, [r7, #0x10]
	mov r1, sb
	ldr r0, [r1]
	asrs r0, r0, #8
	ldr r1, [r4, #4]
	subs r0, r0, r1
	strh r0, [r7, #0x12]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	movs r7, #0x8a
	lsls r7, r7, #2
	add r7, sl
	movs r0, #8
	bl VramMalloc
	str r0, [r7]
	ldr r0, _0807BFE8 @ =0x000004F3
	strh r0, [r7, #0xc]
	strb r6, [r7, #0x1a]
	adds r0, #0x8d
	strh r0, [r7, #0x14]
	strh r5, [r7, #0xe]
	strh r5, [r7, #0x16]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r7, #0x1b]
	movs r1, #0x10
	strb r1, [r7, #0x1c]
	strb r6, [r7, #0x1f]
	str r0, [r7, #0x20]
	movs r0, #0x80
	lsls r0, r0, #6
	str r0, [r7, #8]
	mov r1, r8
	ldr r0, [r1]
	asrs r0, r0, #8
	ldr r1, [r4]
	subs r0, r0, r1
	strh r0, [r7, #0x10]
	mov r1, sb
	ldr r0, [r1]
	asrs r0, r0, #8
	ldr r1, [r4, #4]
	subs r0, r0, r1
	strh r0, [r7, #0x12]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807BFDC: .4byte 0xFFFFB800
_0807BFE0: .4byte 0x000004F2
_0807BFE4: .4byte gCamera
_0807BFE8: .4byte 0x000004F3

	thumb_func_start sub_807BFEC
sub_807BFEC: @ 0x0807BFEC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	movs r5, #0x98
	lsls r5, r5, #1
	add r5, r8
	movs r0, #0x8e
	lsls r0, r0, #1
	add r0, r8
	ldr r0, [r0]
	str r0, [r5]
	movs r6, #0x9a
	lsls r6, r6, #1
	add r6, r8
	movs r0, #0x90
	lsls r0, r0, #1
	add r0, r8
	ldr r0, [r0]
	ldr r1, _0807C06C @ =0xFFFFB800
	adds r0, r0, r1
	str r0, [r6]
	movs r7, #0x8a
	lsls r7, r7, #2
	add r7, r8
	ldr r0, [r5]
	asrs r0, r0, #8
	ldr r4, _0807C070 @ =gCamera
	ldr r1, [r4]
	subs r0, r0, r1
	strh r0, [r7, #0x10]
	ldr r0, [r6]
	asrs r0, r0, #8
	ldr r1, [r4, #4]
	subs r0, r0, r1
	strh r0, [r7, #0x12]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	bl DisplaySprite
	movs r7, #0x94
	lsls r7, r7, #2
	add r7, r8
	ldr r0, [r5]
	asrs r0, r0, #8
	ldr r1, [r4]
	subs r0, r0, r1
	strh r0, [r7, #0x10]
	ldr r0, [r6]
	asrs r0, r0, #8
	ldr r1, [r4, #4]
	subs r0, r0, r1
	strh r0, [r7, #0x12]
	adds r0, r7, #0
	bl DisplaySprite
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807C06C: .4byte 0xFFFFB800
_0807C070: .4byte gCamera

	thumb_func_start sub_807C074
sub_807C074: @ 0x0807C074
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r5, r0, #0
	movs r0, #0x15
	bl VramMalloc
	mov sl, r0
	movs r6, #0
	movs r0, #0
	mov sb, r0
	movs r7, #0
	ldr r2, _0807C140 @ =gCamera
	mov r8, r2
_0807C094:
	lsls r3, r6, #2
	adds r3, r3, r6
	lsls r4, r3, #3
	adds r4, #0x7c
	adds r4, r5, r4
	mov r0, sl
	str r0, [r4]
	ldr r0, _0807C144 @ =0x000003BF
	strh r0, [r4, #0xc]
	mov r2, sb
	strb r2, [r4, #0x1a]
	movs r0, #0xa0
	lsls r0, r0, #3
	strh r0, [r4, #0x14]
	strh r7, [r4, #0xe]
	strh r7, [r4, #0x16]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	movs r0, #0x10
	strb r0, [r4, #0x1c]
	strb r2, [r4, #0x1f]
	subs r0, #0x11
	str r0, [r4, #0x20]
	movs r0, #0x80
	lsls r0, r0, #5
	str r0, [r4, #8]
	lsls r3, r3, #2
	adds r1, r5, r3
	movs r0, #1
	strh r0, [r1, #0x3c]
	strh r7, [r1, #0x3e]
	adds r0, r5, #0
	adds r0, #0x34
	adds r0, r0, r3
	str r7, [r0]
	adds r0, r5, #0
	adds r0, #0x38
	adds r0, r0, r3
	str r7, [r0]
	adds r1, r5, #0
	adds r1, #0x2c
	adds r1, r1, r3
	lsls r0, r6, #4
	subs r0, r0, r6
	lsls r0, r0, #2
	subs r0, r0, r6
	ldr r2, _0807C148 @ =0x0000061F
	adds r0, r0, r2
	lsls r0, r0, #8
	str r0, [r1]
	adds r2, r5, #0
	adds r2, #0x30
	adds r2, r2, r3
	movs r0, #0xcc
	lsls r0, r0, #8
	str r0, [r2]
	ldr r0, [r1]
	asrs r0, r0, #8
	mov r3, r8
	ldr r1, [r3]
	subs r0, r0, r1
	strh r0, [r4, #0x10]
	ldr r0, [r2]
	asrs r0, r0, #8
	ldr r1, [r3, #4]
	subs r0, r0, r1
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r4, #0x27
	ldrb r0, [r4]
	adds r0, #0x20
	strb r0, [r4]
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #3
	bls _0807C094
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807C140: .4byte gCamera
_0807C144: .4byte 0x000003BF
_0807C148: .4byte 0x0000061F

	thumb_func_start sub_807C14C
sub_807C14C: @ 0x0807C14C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r6, r0, #0
	movs r0, #0
	mov r8, r0
_0807C15C:
	ldrb r0, [r6]
	mov r1, r8
	lsls r1, r1, #2
	mov ip, r1
	adds r1, r6, #0
	adds r1, #0x38
	cmp r0, #0
	bne _0807C18E
	mov r0, ip
	add r0, r8
	lsls r0, r0, #2
	adds r3, r6, r0
	ldrh r2, [r3, #0x3e]
	cmp r2, #0x64
	beq _0807C17E
	cmp r2, #0x6e
	bne _0807C18E
_0807C17E:
	adds r2, r6, #0
	adds r2, #0x38
	adds r1, r2, r0
	ldr r0, _0807C1C0 @ =0xFFFFFC00
	str r0, [r1]
	movs r0, #0xc8
	strh r0, [r3, #0x3e]
	adds r1, r2, #0
_0807C18E:
	mov r0, ip
	add r0, r8
	lsls r0, r0, #2
	adds r2, r6, #0
	adds r2, #0x30
	adds r4, r2, r0
	ldr r7, [r4]
	adds r5, r1, r0
	ldr r1, [r5]
	adds r1, r7, r1
	str r1, [r4]
	subs r7, r7, r1
	adds r3, r6, r0
	ldrh r0, [r3, #0x3e]
	mov sb, r2
	cmp r0, #0x64
	beq _0807C1C4
	cmp r0, #0x64
	ble _0807C208
	cmp r0, #0x6e
	beq _0807C1DC
	cmp r0, #0xc8
	beq _0807C1F8
	b _0807C208
	.align 2, 0
_0807C1C0: .4byte 0xFFFFFC00
_0807C1C4:
	ldr r0, _0807C1D8 @ =0x0000F3FF
	cmp r1, r0
	ble _0807C208
	adds r0, #1
	str r0, [r4]
	movs r0, #0x78
	strh r0, [r3, #0x3c]
	movs r0, #0x6e
	b _0807C206
	.align 2, 0
_0807C1D8: .4byte 0x0000F3FF
_0807C1DC:
	ldrh r0, [r3, #0x3c]
	subs r0, #1
	strh r0, [r3, #0x3c]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0807C208
	ldr r0, [r5]
	rsbs r0, r0, #0
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	str r0, [r5]
	movs r0, #0xc8
	b _0807C206
_0807C1F8:
	movs r0, #0xcc
	lsls r0, r0, #8
	cmp r1, r0
	bgt _0807C208
	str r0, [r4]
	movs r0, #0
	str r0, [r5]
_0807C206:
	strh r0, [r3, #0x3e]
_0807C208:
	mov r2, ip
	add r2, r8
	lsls r0, r2, #3
	adds r0, #0x7c
	adds r0, r6, r0
	lsls r2, r2, #2
	adds r1, r6, #0
	adds r1, #0x2c
	adds r1, r1, r2
	ldr r1, [r1]
	add r2, sb
	ldr r2, [r2]
	str r7, [sp]
	movs r3, #0
	bl sub_807C374
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	cmp r0, #3
	bls _0807C15C
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_807C244
sub_807C244: @ 0x0807C244
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	mov sb, r0
	mov r8, r1
	adds r7, r2, #0
	str r3, [sp, #4]
	ldr r0, [sp, #0x2c]
	mov sl, r0
	ldr r0, _0807C2BC @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r1, r1, r0
	str r1, [sp, #8]
	movs r6, #0
	movs r5, #0
_0807C26E:
	lsls r0, r5, #2
	ldr r1, [sp, #8]
	adds r1, #0x20
	adds r1, r1, r0
	ldr r4, [r1]
	adds r0, r4, #0
	bl sub_802C080
	cmp r0, #0
	bne _0807C356
	ldr r1, [r4, #4]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0807C2CC
	ldr r0, [r4, #0x6c]
	cmp r0, sb
	bne _0807C2CC
	ldr r0, [r4, #0x10]
	ldr r2, [sp, #4]
	subs r0, r0, r2
	str r0, [r4, #0x10]
	movs r0, #4
	ands r1, r0
	cmp r1, #0
	bne _0807C2C0
	ldr r0, [r4, #0x14]
	movs r1, #0x80
	lsls r1, r1, #3
	adds r0, r0, r1
	mov r2, sl
	subs r0, r0, r2
	str r0, [r4, #0x14]
	movs r0, #1
	lsls r0, r5
	orrs r6, r0
	lsls r0, r6, #0x18
	lsrs r6, r0, #0x18
	b _0807C2CC
	.align 2, 0
_0807C2BC: .4byte gCurTask
_0807C2C0:
	ldr r0, [r4, #0x14]
	mov r1, sl
	subs r0, r0, r1
	ldr r2, _0807C31C @ =0xFFFFFE00
	adds r0, r0, r2
	str r0, [r4, #0x14]
_0807C2CC:
	ldr r1, [r4, #0x10]
	mov r2, r8
	subs r0, r1, r2
	cmp r0, #0
	bge _0807C2DA
	mov r2, r8
	subs r0, r2, r1
_0807C2DA:
	asrs r0, r0, #8
	cmp r0, #0x40
	bgt _0807C356
	ldr r1, [r4, #0x14]
	subs r0, r1, r7
	cmp r0, #0
	bge _0807C2EA
	subs r0, r7, r1
_0807C2EA:
	asrs r0, r0, #8
	cmp r0, #0x40
	bgt _0807C356
	movs r0, #0
	str r0, [sp]
	mov r0, sb
	mov r2, r8
	asrs r1, r2, #8
	asrs r2, r7, #8
	adds r3, r4, #0
	bl sub_8020950
	adds r2, r0, #0
	movs r3, #0x80
	lsls r3, r3, #9
	ands r3, r2
	cmp r3, #0
	beq _0807C320
	lsls r1, r2, #0x18
	asrs r1, r1, #0x10
	ldr r0, [r4, #0x14]
	adds r0, r0, r1
	str r0, [r4, #0x14]
	b _0807C33C
	.align 2, 0
_0807C31C: .4byte 0xFFFFFE00
_0807C320:
	movs r0, #0x80
	lsls r0, r0, #0xa
	ands r0, r2
	cmp r0, #0
	beq _0807C33C
	ldr r1, [r4, #0x14]
	movs r0, #0x80
	lsls r0, r0, #1
	adds r1, r1, r0
	lsls r0, r2, #0x18
	asrs r0, r0, #0x10
	adds r1, r1, r0
	str r1, [r4, #0x14]
	strh r3, [r4, #0x1a]
_0807C33C:
	movs r0, #0xc0
	lsls r0, r0, #0xc
	ands r0, r2
	cmp r0, #0
	beq _0807C356
	lsls r0, r2, #0x10
	asrs r0, r0, #0x18
	lsls r0, r0, #8
	ldr r1, [r4, #0x10]
	adds r1, r1, r0
	str r1, [r4, #0x10]
	movs r0, #0
	strh r0, [r4, #0x18]
_0807C356:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #1
	bls _0807C26E
	adds r0, r6, #0
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_807C374
sub_807C374: @ 0x0807C374
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	mov sb, r0
	mov r8, r1
	adds r7, r2, #0
	str r3, [sp, #4]
	ldr r0, [sp, #0x2c]
	mov sl, r0
	ldr r0, _0807C434 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r1, r1, r0
	str r1, [sp, #8]
	movs r6, #0
	movs r5, #0
_0807C39E:
	lsls r0, r5, #2
	ldr r1, [sp, #8]
	adds r1, #0x20
	adds r1, r1, r0
	ldr r4, [r1]
	adds r0, r4, #0
	bl sub_802C080
	cmp r0, #0
	bne _0807C46E
	ldr r0, [r4, #4]
	movs r1, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0807C3DC
	ldr r0, [r4, #0x6c]
	cmp r0, sb
	bne _0807C3DC
	ldr r0, [r4, #0x10]
	ldr r1, [sp, #4]
	subs r0, r0, r1
	str r0, [r4, #0x10]
	mov r2, sl
	cmp r2, #0
	beq _0807C3DC
	ldr r0, [r4, #0x14]
	movs r1, #0x80
	lsls r1, r1, #3
	adds r0, r0, r1
	subs r0, r0, r2
	str r0, [r4, #0x14]
_0807C3DC:
	ldr r1, [r4, #0x10]
	mov r2, r8
	subs r0, r1, r2
	cmp r0, #0
	bge _0807C3EA
	mov r2, r8
	subs r0, r2, r1
_0807C3EA:
	asrs r0, r0, #8
	cmp r0, #0x40
	bgt _0807C46E
	ldr r1, [r4, #0x14]
	subs r0, r1, r7
	cmp r0, #0
	bge _0807C3FA
	subs r0, r7, r1
_0807C3FA:
	asrs r0, r0, #8
	cmp r0, #0x40
	bgt _0807C46E
	movs r0, #0
	str r0, [sp]
	mov r0, sb
	mov r2, r8
	asrs r1, r2, #8
	asrs r2, r7, #8
	adds r3, r4, #0
	bl sub_8020950
	adds r2, r0, #0
	movs r3, #0x80
	lsls r3, r3, #9
	ands r3, r2
	cmp r3, #0
	beq _0807C438
	lsls r1, r2, #0x18
	asrs r1, r1, #0x10
	ldr r0, [r4, #0x14]
	adds r0, r0, r1
	str r0, [r4, #0x14]
	movs r0, #1
	lsls r0, r5
	orrs r6, r0
	lsls r0, r6, #0x18
	lsrs r6, r0, #0x18
	b _0807C454
	.align 2, 0
_0807C434: .4byte gCurTask
_0807C438:
	movs r0, #0x80
	lsls r0, r0, #0xa
	ands r0, r2
	cmp r0, #0
	beq _0807C454
	ldr r1, [r4, #0x14]
	movs r0, #0x80
	lsls r0, r0, #1
	adds r1, r1, r0
	lsls r0, r2, #0x18
	asrs r0, r0, #0x10
	adds r1, r1, r0
	str r1, [r4, #0x14]
	strh r3, [r4, #0x1a]
_0807C454:
	movs r0, #0xc0
	lsls r0, r0, #0xc
	ands r0, r2
	cmp r0, #0
	beq _0807C46E
	lsls r0, r2, #0x10
	asrs r0, r0, #0x18
	lsls r0, r0, #8
	ldr r1, [r4, #0x10]
	adds r1, r1, r0
	str r1, [r4, #0x10]
	movs r0, #0
	strh r0, [r4, #0x18]
_0807C46E:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #1
	bls _0807C39E
	adds r0, r6, #0
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_807C48C
sub_807C48C: @ 0x0807C48C
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	ldr r0, _0807C514 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r1, r0
	movs r5, #0
_0807C49E:
	lsls r0, r5, #2
	adds r1, r6, #0
	adds r1, #0x20
	adds r1, r1, r0
	ldr r4, [r1]
	adds r0, r4, #0
	bl sub_802C0D4
	cmp r0, #0
	bne _0807C504
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	movs r1, #0x1c
	ands r1, r0
	cmp r1, #4
	beq _0807C4C8
	cmp r1, #8
	beq _0807C4C8
	cmp r1, #0x10
	bne _0807C504
_0807C4C8:
	ldr r1, [r4, #4]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0807C504
	ldr r0, [r4, #0x6c]
	cmp r0, r7
	bne _0807C504
	movs r0, #0x21
	rsbs r0, r0, #0
	ands r1, r0
	movs r0, #4
	orrs r1, r0
	str r1, [r4, #4]
	movs r0, #0
	str r0, [r4, #0x6c]
	adds r0, r4, #0
	bl sub_8016F28
	adds r2, r4, #0
	adds r2, #0x2c
	ldrb r0, [r2]
	movs r3, #5
	rsbs r3, r3, #0
	adds r1, r3, #0
	ands r0, r1
	strb r0, [r2]
	adds r0, r4, #0
	bl Player_8005380
_0807C504:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #1
	bls _0807C49E
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807C514: .4byte gCurTask

	thumb_func_start sub_807C518
sub_807C518: @ 0x0807C518
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r5, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r1, r0, #3
	movs r2, #0xa2
	lsls r2, r2, #1
	adds r0, r1, r2
	adds r0, r0, r5
	mov r8, r0
	movs r2, #0x9e
	lsls r2, r2, #2
	adds r0, r1, r2
	adds r6, r5, r0
	movs r7, #0
_0807C540:
	lsls r0, r7, #2
	adds r1, r5, #0
	adds r1, #0x20
	adds r1, r1, r0
	ldr r4, [r1]
	adds r0, r4, #0
	bl sub_802C080
	cmp r0, #0
	bne _0807C5BA
	adds r0, r6, #0
	adds r0, #0x27
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #8
	mov r1, r8
	ldr r2, [r1, #4]
	adds r0, r2, r0
	ldr r1, [r4, #0x14]
	adds r3, r2, #0
	cmp r1, r0
	ble _0807C5BA
	ldr r0, [r4, #4]
	movs r1, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0807C5A8
	adds r0, r5, #0
	adds r0, #0x7c
	ldr r1, [r4, #0x6c]
	cmp r1, r0
	beq _0807C594
	adds r0, #0x28
	cmp r1, r0
	beq _0807C594
	adds r0, #0x28
	cmp r1, r0
	beq _0807C594
	adds r0, #0x28
	cmp r1, r0
	bne _0807C5BA
_0807C594:
	mov r2, r8
	ldr r1, [r2]
	asrs r1, r1, #8
	asrs r2, r3, #8
	str r4, [sp]
	adds r0, r6, #0
	movs r3, #0
	bl sub_8020CE0
	b _0807C5BA
_0807C5A8:
	mov r0, r8
	ldr r1, [r0]
	asrs r1, r1, #8
	asrs r2, r2, #8
	str r4, [sp]
	adds r0, r6, #0
	movs r3, #0
	bl sub_8020CE0
_0807C5BA:
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #1
	bls _0807C540
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_807C5D0
sub_807C5D0: @ 0x0807C5D0
	push {r4, r5, r6, lr}
	ldr r0, _0807C66C @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	movs r6, #0
_0807C5E0:
	lsls r0, r6, #2
	adds r1, r5, #0
	adds r1, #0x20
	adds r1, r1, r0
	ldr r4, [r1]
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	movs r1, #0x1c
	ands r1, r0
	cmp r1, #4
	beq _0807C600
	cmp r1, #8
	beq _0807C600
	cmp r1, #0x10
	bne _0807C65C
_0807C600:
	adds r0, r4, #0
	bl sub_802C0D4
	adds r3, r0, #0
	cmp r3, #0
	bne _0807C65C
	ldr r2, [r4, #4]
	movs r0, #0x20
	ands r0, r2
	cmp r0, #0
	beq _0807C65C
	adds r0, r5, #0
	adds r0, #0x7c
	ldr r1, [r4, #0x6c]
	cmp r1, r0
	beq _0807C65C
	adds r0, #0x28
	cmp r1, r0
	beq _0807C65C
	adds r0, #0x28
	cmp r1, r0
	beq _0807C65C
	adds r0, #0x28
	cmp r1, r0
	beq _0807C65C
	movs r0, #0x21
	rsbs r0, r0, #0
	ands r2, r0
	movs r0, #4
	orrs r2, r0
	str r2, [r4, #4]
	str r3, [r4, #0x6c]
	adds r0, r4, #0
	bl sub_8016F28
	adds r2, r4, #0
	adds r2, #0x2c
	ldrb r0, [r2]
	movs r3, #5
	rsbs r3, r3, #0
	adds r1, r3, #0
	ands r0, r1
	strb r0, [r2]
	adds r0, r4, #0
	bl Player_8005380
_0807C65C:
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #1
	bls _0807C5E0
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0807C66C: .4byte gCurTask

	thumb_func_start sub_807C670
sub_807C670: @ 0x0807C670
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r5, #0
	ldr r1, _0807C6AC @ =gUnknown_080D5CA0
	mov r0, sp
	movs r2, #4
	bl memcpy
	ldr r2, _0807C6B0 @ =gPseudoRandom
	ldr r1, [r2]
	ldr r0, _0807C6B4 @ =0x00196225
	muls r0, r1, r0
	ldr r1, _0807C6B8 @ =0x3C6EF35F
	adds r0, r0, r1
	str r0, [r2]
	adds r2, r0, #0
	ldr r1, _0807C6BC @ =0x00002710
	bl __umodsi3
	adds r2, r0, #0
	ldr r0, _0807C6C0 @ =gStageData
	ldrb r0, [r0, #1]
	cmp r0, #0
	bne _0807C6C4
	ldrb r0, [r4]
	cmp r0, #4
	bhi _0807C6CC
	b _0807C6E4
	.align 2, 0
_0807C6AC: .4byte gUnknown_080D5CA0
_0807C6B0: .4byte gPseudoRandom
_0807C6B4: .4byte 0x00196225
_0807C6B8: .4byte 0x3C6EF35F
_0807C6BC: .4byte 0x00002710
_0807C6C0: .4byte gStageData
_0807C6C4:
	ldrb r0, [r4]
	cmp r0, #3
	bhi _0807C6CC
	movs r5, #1
_0807C6CC:
	cmp r5, #0
	bne _0807C6E4
	ldrb r0, [r4, #0x12]
	add r0, sp
	ldrb r0, [r0]
	strb r0, [r4, #1]
	ldrb r0, [r4, #0x12]
	adds r0, #1
	movs r1, #3
	ands r0, r1
	strb r0, [r4, #0x12]
	b _0807C718
_0807C6E4:
	ldr r0, _0807C6F0 @ =0x000009C3
	cmp r2, r0
	bhi _0807C6F4
	movs r0, #1
	b _0807C716
	.align 2, 0
_0807C6F0: .4byte 0x000009C3
_0807C6F4:
	ldr r0, _0807C700 @ =0x00001387
	cmp r2, r0
	bhi _0807C704
	movs r0, #2
	b _0807C716
	.align 2, 0
_0807C700: .4byte 0x00001387
_0807C704:
	ldr r0, _0807C710 @ =0x00001D4B
	cmp r2, r0
	bhi _0807C714
	movs r0, #3
	b _0807C716
	.align 2, 0
_0807C710: .4byte 0x00001D4B
_0807C714:
	movs r0, #4
_0807C716:
	strb r0, [r4, #1]
_0807C718:
	movs r1, #0
	movs r0, #1
	strh r0, [r4, #8]
	strh r1, [r4, #0xc]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_807C728
sub_807C728: @ 0x0807C728
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r4, r0, #0
	movs r2, #0
	ldrh r1, [r4, #0xc]
	cmp r1, #0xa
	beq _0807C7EC
	cmp r1, #0xa
	bgt _0807C746
	cmp r1, #0
	beq _0807C752
	b _0807C892
_0807C746:
	movs r0, #0xfa
	lsls r0, r0, #2
	cmp r1, r0
	bne _0807C750
	b _0807C86C
_0807C750:
	b _0807C892
_0807C752:
	movs r3, #0
	ldr r0, _0807C7DC @ =gPseudoRandom
	mov sl, r0
	movs r1, #0xca
	lsls r1, r1, #1
	adds r1, r1, r4
	mov ip, r1
	movs r2, #0x8e
	lsls r2, r2, #1
	adds r7, r4, r2
	movs r0, #0xcc
	lsls r0, r0, #1
	adds r6, r4, r0
	movs r1, #0x90
	lsls r1, r1, #1
	adds r5, r4, r1
	adds r2, #0x90
	mov sb, r2
	mov r8, r3
_0807C778:
	lsls r1, r3, #3
	subs r1, r1, r3
	lsls r1, r1, #2
	adds r0, r4, r1
	add r0, sb
	mov r2, r8
	strh r2, [r0]
	mov r0, ip
	adds r2, r0, r1
	ldr r0, [r7]
	str r0, [r2]
	adds r1, r6, r1
	ldr r0, [r5]
	ldr r2, _0807C7E0 @ =0xFFFFE000
	adds r0, r0, r2
	str r0, [r1]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #2
	bls _0807C778
	mov r0, sl
	ldr r1, [r0]
	ldr r0, _0807C7E4 @ =0x00196225
	muls r0, r1, r0
	ldr r1, _0807C7E8 @ =0x3C6EF35F
	adds r0, r0, r1
	mov r2, sl
	str r0, [r2]
	movs r1, #1
	ands r0, r1
	strb r0, [r4, #2]
	movs r0, #0x96
	lsls r0, r0, #2
	strh r0, [r4, #0xa]
	strh r1, [r4, #8]
	movs r0, #0xa
	strh r0, [r4, #0xc]
	adds r0, r4, #0
	movs r1, #0
	movs r2, #1
	bl sub_807DB00
	adds r0, r4, #0
	movs r1, #1
	movs r2, #1
	bl sub_807DB00
	b _0807C892
	.align 2, 0
_0807C7DC: .4byte gPseudoRandom
_0807C7E0: .4byte 0xFFFFE000
_0807C7E4: .4byte 0x00196225
_0807C7E8: .4byte 0x3C6EF35F
_0807C7EC:
	ldrb r0, [r4, #2]
	cmp r0, #0
	bne _0807C800
	ldrh r0, [r4, #0xa]
	subs r0, #1
	strh r0, [r4, #0xa]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0807C808
	b _0807C80C
_0807C800:
	ldrh r0, [r4, #0x16]
	cmp r0, #0
	beq _0807C808
	movs r2, #1
_0807C808:
	cmp r2, #0
	beq _0807C842
_0807C80C:
	movs r3, #0
	movs r6, #0xd6
	lsls r6, r6, #1
	movs r5, #0xd4
	lsls r5, r5, #1
	movs r2, #0xef
_0807C818:
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #2
	adds r1, r4, r0
	adds r0, r1, r6
	ldrh r0, [r0]
	cmp r0, #1
	bne _0807C82C
	adds r0, r1, r5
	strh r2, [r0]
_0807C82C:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #2
	bls _0807C818
	movs r0, #0x3c
	strh r0, [r4, #8]
	movs r0, #0xfa
	lsls r0, r0, #2
	strh r0, [r4, #0xc]
	b _0807C892
_0807C842:
	ldrh r0, [r4, #8]
	subs r0, #1
	strh r0, [r4, #8]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0807C892
	adds r0, r4, #0
	bl sub_807CD4C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0807C866
	adds r0, r4, #0
	bl sub_807CDF0
	movs r0, #0x3c
	strh r0, [r4, #8]
	b _0807C892
_0807C866:
	movs r0, #1
	strh r0, [r4, #8]
	b _0807C892
_0807C86C:
	ldrh r0, [r4, #8]
	subs r0, #1
	strh r0, [r4, #8]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0807C892
	adds r0, r4, #0
	movs r1, #0
	movs r2, #5
	bl sub_807DB00
	adds r0, r4, #0
	movs r1, #1
	movs r2, #5
	bl sub_807DB00
	adds r0, r4, #0
	bl sub_8081BBC
_0807C892:
	adds r0, r4, #0
	bl sub_807CFAC
	adds r0, r4, #0
	bl sub_807CCA8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_807C8AC
sub_807C8AC: @ 0x0807C8AC
	push {r4, r5, lr}
	adds r4, r0, #0
	ldrh r1, [r4, #0xc]
	cmp r1, #0x64
	beq _0807C960
	cmp r1, #0x64
	bgt _0807C8CE
	cmp r1, #0xa
	beq _0807C90C
	cmp r1, #0xa
	bgt _0807C8C8
	cmp r1, #0
	beq _0807C8EA
	b _0807C9B8
_0807C8C8:
	cmp r1, #0x14
	beq _0807C91E
	b _0807C9B8
_0807C8CE:
	movs r5, #0xfa
	lsls r5, r5, #1
	cmp r1, r5
	beq _0807C988
	cmp r1, r5
	bgt _0807C8E0
	cmp r1, #0xc8
	beq _0807C97A
	b _0807C9B8
_0807C8E0:
	movs r0, #0xfa
	lsls r0, r0, #2
	cmp r1, r0
	beq _0807C99E
	b _0807C9B8
_0807C8EA:
	adds r0, r4, #0
	movs r1, #0
	movs r2, #2
	bl sub_807DB00
	adds r0, r4, #0
	movs r1, #1
	movs r2, #2
	bl sub_807DB00
	movs r0, #0xf0
	strh r0, [r4, #8]
	movs r0, #1
	strb r0, [r4, #0xe]
	movs r0, #0xa
	strh r0, [r4, #0xc]
	b _0807C9B8
_0807C90C:
	ldrh r0, [r4, #8]
	subs r0, #1
	strh r0, [r4, #8]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0807C9B8
	movs r0, #0x14
	strh r0, [r4, #0xc]
	b _0807C9B8
_0807C91E:
	ldr r2, _0807C950 @ =gPseudoRandom
	ldr r1, [r2]
	ldr r0, _0807C954 @ =0x00196225
	muls r0, r1, r0
	ldr r1, _0807C958 @ =0x3C6EF35F
	adds r0, r0, r1
	str r0, [r2]
	ldr r1, _0807C95C @ =0x00002710
	bl __umodsi3
	lsrs r0, r0, #2
	movs r1, #3
	ands r0, r1
	strb r0, [r4, #3]
	movs r0, #1
	strb r0, [r4, #2]
	ldrb r2, [r4, #3]
	adds r0, r4, #0
	movs r1, #1
	bl sub_807D8B4
	movs r0, #0x64
	strh r0, [r4, #0xc]
	b _0807C9B8
	.align 2, 0
_0807C950: .4byte gPseudoRandom
_0807C954: .4byte 0x00196225
_0807C958: .4byte 0x3C6EF35F
_0807C95C: .4byte 0x00002710
_0807C960:
	adds r0, r4, #0
	movs r1, #0
	bl sub_807D9B4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807C9B8
	ldrb r0, [r4, #0xe]
	adds r0, #1
	strb r0, [r4, #0xe]
	movs r0, #0xc8
	strh r0, [r4, #0xc]
	b _0807C9B8
_0807C97A:
	adds r0, r4, #0
	movs r1, #0x14
	movs r2, #0
	bl sub_807D8B4
	strh r5, [r4, #0xc]
	b _0807C9B8
_0807C988:
	adds r0, r4, #0
	movs r1, #1
	bl sub_807D9B4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807C9B8
	movs r0, #0xfa
	lsls r0, r0, #2
	strh r0, [r4, #0xc]
	b _0807C9B8
_0807C99E:
	adds r0, r4, #0
	movs r1, #0
	movs r2, #5
	bl sub_807DB00
	adds r0, r4, #0
	movs r1, #1
	movs r2, #5
	bl sub_807DB00
	adds r0, r4, #0
	bl sub_8081BBC
_0807C9B8:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_807C9C0
sub_807C9C0: @ 0x0807C9C0
	push {r4, lr}
	adds r4, r0, #0
	ldrh r1, [r4, #0xc]
	cmp r1, #0xa
	beq _0807CA00
	cmp r1, #0xa
	bgt _0807C9D4
	cmp r1, #0
	beq _0807C9DE
	b _0807CA30
_0807C9D4:
	movs r0, #0xfa
	lsls r0, r0, #2
	cmp r1, r0
	beq _0807CA16
	b _0807CA30
_0807C9DE:
	adds r0, r4, #0
	movs r1, #0
	movs r2, #3
	bl sub_807DB00
	adds r0, r4, #0
	movs r1, #1
	movs r2, #3
	bl sub_807DB00
	movs r0, #0
	movs r1, #1
	strh r1, [r4, #8]
	strb r0, [r4, #0xe]
	movs r0, #0xa
	strh r0, [r4, #0xc]
	b _0807CA30
_0807CA00:
	adds r0, r4, #0
	movs r1, #0
	bl sub_807D9B4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807CA30
	movs r0, #0xfa
	lsls r0, r0, #2
	strh r0, [r4, #0xc]
	b _0807CA30
_0807CA16:
	adds r0, r4, #0
	movs r1, #0
	movs r2, #5
	bl sub_807DB00
	adds r0, r4, #0
	movs r1, #1
	movs r2, #5
	bl sub_807DB00
	adds r0, r4, #0
	bl sub_8081BBC
_0807CA30:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_807CA38
sub_807CA38: @ 0x0807CA38
	push {r4, lr}
	adds r4, r0, #0
	ldrh r1, [r4, #0xc]
	cmp r1, #0x6e
	beq _0807CB00
	cmp r1, #0x6e
	bgt _0807CA5A
	cmp r1, #0xa
	beq _0807CA9A
	cmp r1, #0xa
	bgt _0807CA54
	cmp r1, #0
	beq _0807CA78
	b _0807CB70
_0807CA54:
	cmp r1, #0x64
	beq _0807CAAA
	b _0807CB70
_0807CA5A:
	movs r0, #0xff
	lsls r0, r0, #1
	cmp r1, r0
	beq _0807CB42
	cmp r1, r0
	bgt _0807CA6E
	subs r0, #0xa
	cmp r1, r0
	beq _0807CB32
	b _0807CB70
_0807CA6E:
	movs r0, #0xfa
	lsls r0, r0, #2
	cmp r1, r0
	beq _0807CB56
	b _0807CB70
_0807CA78:
	adds r0, r4, #0
	movs r1, #0
	movs r2, #4
	bl sub_807DB00
	adds r0, r4, #0
	movs r1, #1
	movs r2, #4
	bl sub_807DB00
	movs r0, #0
	movs r1, #1
	strh r1, [r4, #8]
	strb r0, [r4, #0xe]
	movs r0, #0xa
	strh r0, [r4, #0xc]
	b _0807CB70
_0807CA9A:
	adds r0, r4, #0
	movs r1, #2
	bl sub_807D9B4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807CB70
	b _0807CB1C
_0807CAAA:
	ldrh r0, [r4, #8]
	subs r0, #1
	strh r0, [r4, #8]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0807CABA
	movs r0, #0x6e
	strh r0, [r4, #0xc]
_0807CABA:
	movs r1, #8
	ldrsh r0, [r4, r1]
	cmp r0, #0xa
	bne _0807CB70
	ldrb r0, [r4, #0xe]
	cmp r0, #0
	bne _0807CAE4
	ldr r0, [r4, #0x20]
	ldr r0, [r0, #0x10]
	asrs r0, r0, #8
	ldr r1, _0807CADC @ =gCamera
	ldr r1, [r1]
	subs r0, r0, r1
	cmp r0, #0x77
	bgt _0807CAE0
	movs r0, #0
	b _0807CAE2
	.align 2, 0
_0807CADC: .4byte gCamera
_0807CAE0:
	movs r0, #1
_0807CAE2:
	strb r0, [r4, #2]
_0807CAE4:
	ldr r0, _0807CAFC @ =gUnknown_080D5C78
	ldrb r1, [r4, #2]
	lsls r1, r1, #2
	ldrb r2, [r4, #0xe]
	adds r1, r1, r2
	adds r1, r1, r0
	ldrb r1, [r1]
	adds r0, r4, #0
	bl sub_807DA34
	b _0807CB70
	.align 2, 0
_0807CAFC: .4byte gUnknown_080D5C78
_0807CB00:
	adds r0, r4, #0
	movs r1, #2
	bl sub_807D9B4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807CB70
	ldrb r0, [r4, #0xe]
	adds r0, #1
	strb r0, [r4, #0xe]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #2
	bhi _0807CB26
_0807CB1C:
	movs r0, #0x1e
	strh r0, [r4, #8]
	movs r0, #0x64
	strh r0, [r4, #0xc]
	b _0807CB70
_0807CB26:
	movs r0, #0xff
	lsls r0, r0, #1
	strh r0, [r4, #0xc]
	movs r0, #0x3c
	strh r0, [r4, #8]
	b _0807CB70
_0807CB32:
	adds r0, r4, #0
	movs r1, #0
	bl sub_807D9B4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807CB70
	b _0807CB4E
_0807CB42:
	ldrh r0, [r4, #8]
	subs r0, #1
	strh r0, [r4, #8]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0807CB70
_0807CB4E:
	movs r0, #0xfa
	lsls r0, r0, #2
	strh r0, [r4, #0xc]
	b _0807CB70
_0807CB56:
	adds r0, r4, #0
	movs r1, #0
	movs r2, #5
	bl sub_807DB00
	adds r0, r4, #0
	movs r1, #1
	movs r2, #5
	bl sub_807DB00
	adds r0, r4, #0
	bl sub_8081BBC
_0807CB70:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_807CB78
sub_807CB78: @ 0x0807CB78
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0xc]
	cmp r0, #0xa
	beq _0807CB90
	cmp r0, #0xa
	ble _0807CBC2
	cmp r0, #0x14
	beq _0807CBC2
	cmp r0, #0x64
	beq _0807CBB6
	b _0807CBC2
_0807CB90:
	ldrh r0, [r4, #8]
	subs r0, #1
	strh r0, [r4, #8]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0807CBC2
	movs r0, #0x14
	strh r0, [r4, #0xc]
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0xa
	bl sub_807DB00
	adds r0, r4, #0
	movs r1, #1
	movs r2, #0xa
	bl sub_807DB00
	b _0807CBC2
_0807CBB6:
	movs r2, #0
	movs r1, #0
	movs r0, #1
	strh r0, [r4, #8]
	strh r1, [r4, #0xc]
	strb r2, [r4, #1]
_0807CBC2:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_807CBC8
sub_807CBC8: @ 0x0807CBC8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r5, r0, #0
	movs r0, #0x74
	bl VramMalloc
	str r0, [r5, #0x18]
	str r0, [sp]
	movs r6, #0
	movs r0, #0
	mov sl, r0
	movs r1, #0
	mov r8, r1
	ldr r2, _0807CCA4 @ =gCamera
	mov sb, r2
_0807CBEE:
	lsls r0, r6, #2
	adds r0, r0, r6
	lsls r0, r0, #3
	movs r3, #0xb2
	lsls r3, r3, #2
	adds r0, r0, r3
	adds r0, r5, r0
	ldr r7, [sp]
	str r7, [r0]
	movs r1, #0x9e
	lsls r1, r1, #3
	strh r1, [r0, #0xc]
	mov r1, sl
	strb r1, [r0, #0x1a]
	movs r1, #0xa0
	lsls r1, r1, #3
	strh r1, [r0, #0x14]
	mov r2, r8
	strh r2, [r0, #0xe]
	strh r2, [r0, #0x16]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	mov r3, sl
	strb r3, [r0, #0x1f]
	subs r1, #0x11
	str r1, [r0, #0x20]
	movs r1, #0x80
	lsls r1, r1, #5
	str r1, [r0, #8]
	lsls r4, r6, #3
	subs r4, r4, r6
	lsls r4, r4, #2
	movs r7, #0xca
	lsls r7, r7, #1
	adds r2, r5, r7
	adds r2, r2, r4
	movs r1, #0xcf
	lsls r1, r1, #0xb
	str r1, [r2]
	movs r1, #0xcc
	lsls r1, r1, #1
	adds r3, r5, r1
	adds r3, r3, r4
	movs r1, #0xb0
	lsls r1, r1, #9
	str r1, [r3]
	ldr r1, [r2]
	asrs r1, r1, #8
	mov r7, sb
	ldr r2, [r7]
	subs r1, r1, r2
	strh r1, [r0, #0x10]
	ldr r1, [r3]
	asrs r1, r1, #8
	ldr r2, [r7, #4]
	subs r1, r1, r2
	strh r1, [r0, #0x12]
	bl UpdateSpriteAnimation
	adds r1, r5, r4
	movs r2, #0xd6
	lsls r2, r2, #1
	adds r0, r1, r2
	mov r3, r8
	strh r3, [r0]
	movs r7, #0xd7
	lsls r7, r7, #1
	adds r1, r1, r7
	movs r0, #1
	strh r0, [r1]
	ldr r0, [sp]
	movs r1, #0x90
	lsls r1, r1, #3
	adds r0, r0, r1
	str r0, [sp]
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #2
	bls _0807CBEE
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807CCA4: .4byte gCamera

	thumb_func_start sub_807CCA8
sub_807CCA8: @ 0x0807CCA8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	movs r7, #0
	ldr r0, _0807CD28 @ =gCamera
	mov r8, r0
_0807CCB6:
	lsls r0, r7, #3
	subs r0, r0, r7
	lsls r2, r0, #2
	adds r3, r6, r2
	movs r1, #0xd6
	lsls r1, r1, #1
	adds r0, r3, r1
	ldrh r0, [r0]
	cmp r0, #0
	beq _0807CD38
	lsls r0, r7, #2
	adds r0, r0, r7
	lsls r0, r0, #3
	movs r4, #0xb2
	lsls r4, r4, #2
	adds r0, r0, r4
	adds r5, r6, r0
	subs r1, #0x18
	adds r0, r6, r1
	adds r0, r0, r2
	ldr r0, [r0]
	asrs r0, r0, #8
	mov r4, r8
	ldr r1, [r4]
	subs r0, r0, r1
	strh r0, [r5, #0x10]
	movs r1, #0xcc
	lsls r1, r1, #1
	adds r0, r6, r1
	adds r0, r0, r2
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r1, [r4, #4]
	subs r0, r0, r1
	strh r0, [r5, #0x12]
	movs r2, #0xd7
	lsls r2, r2, #1
	adds r4, r3, r2
	ldrh r1, [r4]
	movs r2, #0
	ldrsh r0, [r4, r2]
	cmp r0, #0
	beq _0807CD2C
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0807CD20
	adds r0, r5, #0
	bl UpdateSpriteAnimation
	adds r0, r5, #0
	bl DisplaySprite
_0807CD20:
	ldrh r0, [r4]
	subs r0, #1
	strh r0, [r4]
	b _0807CD38
	.align 2, 0
_0807CD28: .4byte gCamera
_0807CD2C:
	adds r0, r5, #0
	bl UpdateSpriteAnimation
	adds r0, r5, #0
	bl DisplaySprite
_0807CD38:
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #2
	bls _0807CCB6
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_807CD4C
sub_807CD4C: @ 0x0807CD4C
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	movs r7, #0
	movs r1, #0xd6
	lsls r1, r1, #1
	adds r0, r4, r1
	ldrh r0, [r0]
	cmp r0, #0
	beq _0807CD7E
	movs r2, #0xe4
	lsls r2, r2, #1
	adds r0, r4, r2
	ldrh r0, [r0]
	cmp r0, #0
	beq _0807CD7E
	movs r3, #0xf2
	lsls r3, r3, #1
	adds r0, r4, r3
	ldrh r0, [r0]
	cmp r0, #0
	beq _0807CD7E
	movs r0, #0
	b _0807CDE6
_0807CD7A:
	movs r7, #1
	b _0807CDE4
_0807CD7E:
	movs r5, #0
	ldr r6, _0807CDEC @ =0x000017FF
_0807CD82:
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r3, r0, #2
	adds r0, r4, r3
	movs r1, #0xd6
	lsls r1, r1, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	cmp r0, #0
	beq _0807CDDA
	movs r2, #0xca
	lsls r2, r2, #1
	adds r0, r4, r2
	adds r0, r0, r3
	subs r2, #0x78
	adds r1, r4, r2
	ldr r2, [r0]
	ldr r0, [r1]
	subs r2, r2, r0
	movs r1, #0xcc
	lsls r1, r1, #1
	adds r0, r4, r1
	adds r0, r0, r3
	ldr r1, [r0]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r1, r3
	movs r3, #0x90
	lsls r3, r3, #1
	adds r0, r4, r3
	ldr r0, [r0]
	subs r1, r1, r0
	adds r0, r2, #0
	muls r0, r2, r0
	adds r2, r1, #0
	muls r2, r1, r2
	adds r1, r2, #0
	adds r0, r0, r1
	bl Sqrt
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, r6
	bls _0807CD7A
_0807CDDA:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #2
	bls _0807CD82
_0807CDE4:
	adds r0, r7, #0
_0807CDE6:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0807CDEC: .4byte 0x000017FF

	thumb_func_start sub_807CDF0
sub_807CDF0: @ 0x0807CDF0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	movs r0, #0
	mov ip, r0
_0807CDFC:
	mov r2, ip
	lsls r1, r2, #3
	subs r0, r1, r2
	lsls r6, r0, #2
	adds r2, r5, r6
	movs r7, #0xd6
	lsls r7, r7, #1
	adds r3, r2, r7
	ldrh r4, [r3]
	adds r7, r1, #0
	cmp r4, #0
	beq _0807CE16
	b _0807CF86
_0807CE16:
	movs r0, #1
	strh r0, [r3]
	movs r1, #0xd4
	lsls r1, r1, #1
	adds r0, r2, r1
	strh r4, [r0]
	movs r3, #0xd7
	lsls r3, r3, #1
	adds r1, r2, r3
	movs r0, #0x1e
	strh r0, [r1]
	movs r0, #0xca
	lsls r0, r0, #1
	adds r1, r5, r0
	adds r1, r1, r6
	movs r2, #0x8e
	lsls r2, r2, #1
	adds r0, r5, r2
	ldr r0, [r0]
	str r0, [r1]
	subs r3, #0x16
	adds r1, r5, r3
	adds r1, r1, r6
	adds r2, #4
	adds r0, r5, r2
	ldr r0, [r0]
	ldr r3, _0807CE78 @ =0xFFFFE000
	adds r0, r0, r3
	str r0, [r1]
	ldr r2, _0807CE7C @ =gPseudoRandom
	ldr r1, [r2]
	ldr r0, _0807CE80 @ =0x00196225
	muls r0, r1, r0
	ldr r1, _0807CE84 @ =0x3C6EF35F
	adds r0, r0, r1
	str r0, [r2]
	ldr r1, _0807CE88 @ =0x000003FF
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	lsrs r0, r0, #0x17
	cmp r0, #7
	bhi _0807CEE4
	lsls r0, r0, #2
	ldr r1, _0807CE8C @ =_0807CE90
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0807CE78: .4byte 0xFFFFE000
_0807CE7C: .4byte gPseudoRandom
_0807CE80: .4byte 0x00196225
_0807CE84: .4byte 0x3C6EF35F
_0807CE88: .4byte 0x000003FF
_0807CE8C: .4byte _0807CE90
_0807CE90: @ jump table
	.4byte _0807CEB0 @ case 0
	.4byte _0807CEC2 @ case 1
	.4byte _0807CED0 @ case 2
	.4byte _0807CEB0 @ case 3
	.4byte _0807CEB0 @ case 4
	.4byte _0807CEC2 @ case 5
	.4byte _0807CED0 @ case 6
	.4byte _0807CEB0 @ case 7
_0807CEB0:
	mov r3, ip
	subs r0, r7, r3
	lsls r0, r0, #2
	adds r0, r5, r0
	movs r1, #0xd5
	lsls r1, r1, #1
	adds r0, r0, r1
	strh r2, [r0]
	b _0807CEE4
_0807CEC2:
	mov r3, ip
	subs r0, r7, r3
	lsls r0, r0, #2
	adds r0, r5, r0
	adds r1, r2, #0
	subs r1, #0x80
	b _0807CEDC
_0807CED0:
	mov r3, ip
	subs r0, r7, r3
	lsls r0, r0, #2
	adds r0, r5, r0
	adds r1, r2, #0
	adds r1, #0x80
_0807CEDC:
	movs r2, #0xd5
	lsls r2, r2, #1
	adds r0, r0, r2
	strh r1, [r0]
_0807CEE4:
	mov r3, ip
	subs r0, r7, r3
	lsls r2, r0, #2
	movs r7, #0xd2
	lsls r7, r7, #1
	adds r0, r5, r7
	adds r6, r0, r2
	ldr r1, _0807CFA0 @ =gUnknown_080D5C50
	ldrb r0, [r5, #0x10]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	str r1, [r6]
	movs r3, #0xce
	lsls r3, r3, #1
	adds r0, r5, r3
	adds r4, r0, r2
	ldr r7, _0807CFA4 @ =gSineTable
	mov r8, r7
	adds r0, r5, r2
	movs r7, #0xd5
	lsls r7, r7, #1
	adds r3, r0, r7
	ldrh r0, [r3]
	subs r7, #0xaa
	adds r0, r0, r7
	lsls r0, r0, #1
	add r0, r8
	movs r7, #0
	ldrsh r0, [r0, r7]
	muls r0, r1, r0
	cmp r0, #0
	bge _0807CF2A
	ldr r1, _0807CFA8 @ =0x00003FFF
	adds r0, r0, r1
_0807CF2A:
	asrs r0, r0, #0xe
	str r0, [r4]
	movs r7, #0xd0
	lsls r7, r7, #1
	adds r0, r5, r7
	adds r2, r0, r2
	ldrh r0, [r3]
	lsls r0, r0, #1
	add r0, r8
	movs r3, #0
	ldrsh r1, [r0, r3]
	ldr r0, [r6]
	muls r0, r1, r0
	cmp r0, #0
	bge _0807CF4C
	ldr r7, _0807CFA8 @ =0x00003FFF
	adds r0, r0, r7
_0807CF4C:
	asrs r0, r0, #0xe
	str r0, [r2]
	mov r1, ip
	lsls r0, r1, #2
	add r0, ip
	lsls r0, r0, #3
	movs r2, #0xb2
	lsls r2, r2, #2
	adds r0, r0, r2
	adds r0, r5, r0
	movs r4, #0
	movs r1, #0x9e
	lsls r1, r1, #3
	strh r1, [r0, #0xc]
	strb r4, [r0, #0x1a]
	movs r0, #0x8e
	lsls r0, r0, #2
	bl m4aSongNumStart
	ldrb r0, [r5, #0x10]
	adds r0, #1
	strb r0, [r5, #0x10]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #2
	bls _0807CF82
	strb r4, [r5, #0x10]
_0807CF82:
	movs r3, #3
	mov ip, r3
_0807CF86:
	mov r0, ip
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov ip, r0
	cmp r0, #2
	bhi _0807CF96
	b _0807CDFC
_0807CF96:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807CFA0: .4byte gUnknown_080D5C50
_0807CFA4: .4byte gSineTable
_0807CFA8: .4byte 0x00003FFF

	thumb_func_start sub_807CFAC
sub_807CFAC: @ 0x0807CFAC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	adds r7, r0, #0
	movs r0, #0
	str r0, [sp, #4]
_0807CFBE:
	ldr r1, [sp, #4]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	movs r2, #0xb2
	lsls r2, r2, #2
	adds r0, r0, r2
	adds r0, r7, r0
	str r0, [sp, #0x10]
	lsls r1, r1, #3
	ldr r3, [sp, #4]
	subs r0, r1, r3
	lsls r4, r0, #2
	adds r5, r7, r4
	mov r8, r5
	movs r3, #0xd6
	lsls r3, r3, #1
	add r3, r8
	ldrh r5, [r3]
	str r1, [sp, #0x14]
	cmp r5, #1
	beq _0807D002
	ldr r6, [sp, #4]
	adds r6, #1
	cmp r5, #1
	bgt _0807CFF4
	b _0807D286
_0807CFF4:
	cmp r5, #0x64
	bne _0807CFFA
	b _0807D1F6
_0807CFFA:
	cmp r5, #0x6e
	bne _0807D000
	b _0807D270
_0807D000:
	b _0807D286
_0807D002:
	movs r1, #0xca
	lsls r1, r1, #1
	adds r0, r7, r1
	adds r0, r0, r4
	mov sl, r0
	ldr r3, [r0]
	movs r2, #0xcc
	lsls r2, r2, #1
	adds r0, r7, r2
	adds r6, r0, r4
	ldr r0, [r6]
	mov sb, r0
	adds r1, #8
	adds r0, r7, r1
	adds r0, r0, r4
	ldr r0, [r0]
	adds r0, r3, r0
	mov r2, sl
	str r0, [r2]
	adds r1, #4
	adds r0, r7, r1
	adds r0, r0, r4
	ldr r1, [r6]
	ldr r0, [r0]
	adds r1, r1, r0
	str r1, [r6]
	adds r0, r7, #0
	ldr r1, [sp, #4]
	str r3, [sp, #0x18]
	bl sub_807D41C
	mov r2, sl
	ldr r0, [r2]
	ldr r3, [sp, #0x18]
	subs r3, r3, r0
	ldr r1, [r6]
	mov r0, sb
	subs r0, r0, r1
	mov sb, r0
	ldr r0, [sp, #0x10]
	adds r0, #0x27
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #8
	adds r1, r1, r0
	str r1, [sp, #0xc]
	movs r2, #0xca
	lsls r2, r2, #1
	adds r1, r4, r2
	adds r1, r7, r1
	adds r0, r7, #0
	str r3, [sp, #0x18]
	bl sub_807D37C
	movs r0, #0xd7
	lsls r0, r0, #1
	add r0, r8
	movs r1, #0
	ldrsh r0, [r0, r1]
	ldr r3, [sp, #0x18]
	cmp r0, #0
	bne _0807D13C
	mov r2, sl
	ldr r1, [r2]
	ldr r2, [r6]
	mov r0, sb
	str r0, [sp]
	ldr r0, [sp, #0x10]
	bl sub_807C244
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #8]
	ldr r4, [r7, #0x20]
	adds r0, r4, #0
	bl sub_802C080
	cmp r0, #0
	bne _0807D0EE
	ldr r1, [sp, #8]
	ands r5, r1
	cmp r5, #0
	beq _0807D0CC
	ldr r0, [r6]
	asrs r0, r0, #8
	cmp r0, #0x20
	bgt _0807D0EE
	adds r0, r4, #0
	adds r0, #0x4a
	movs r2, #0
	ldrsh r0, [r0, r2]
	cmp r0, #0
	bne _0807D0EE
	ldrb r0, [r7]
	cmp r0, #0
	beq _0807D0EE
	adds r0, r4, #0
	bl sub_80213F0
	b _0807D0EE
_0807D0CC:
	ldr r0, [r4, #0x14]
	ldr r3, [sp, #0xc]
	cmp r0, r3
	ble _0807D0EE
	ldrb r0, [r7]
	cmp r0, #0
	beq _0807D0EE
	mov r5, sl
	ldr r1, [r5]
	asrs r1, r1, #8
	ldr r2, [r6]
	asrs r2, r2, #8
	str r4, [sp]
	ldr r0, [sp, #0x10]
	movs r3, #0
	bl sub_8020CE0
_0807D0EE:
	ldr r4, [r7, #0x24]
	adds r0, r4, #0
	bl sub_802C080
	cmp r0, #0
	bne _0807D13C
	movs r0, #2
	ldr r1, [sp, #8]
	ands r0, r1
	cmp r0, #0
	bne _0807D13C
	ldr r0, [r4, #0x14]
	ldr r2, [sp, #0xc]
	cmp r0, r2
	ble _0807D13C
	ldrb r0, [r7]
	cmp r0, #0
	beq _0807D13C
	ldr r3, [sp, #0x14]
	ldr r5, [sp, #4]
	subs r2, r3, r5
	lsls r2, r2, #2
	movs r1, #0xca
	lsls r1, r1, #1
	adds r0, r7, r1
	adds r0, r0, r2
	ldr r1, [r0]
	asrs r1, r1, #8
	movs r3, #0xcc
	lsls r3, r3, #1
	adds r0, r7, r3
	adds r0, r0, r2
	ldr r2, [r0]
	asrs r2, r2, #8
	str r4, [sp]
	ldr r0, [sp, #0x10]
	movs r3, #0
	bl sub_8020CE0
_0807D13C:
	ldr r5, [sp, #0x14]
	ldr r1, [sp, #4]
	subs r0, r5, r1
	lsls r0, r0, #2
	adds r0, r7, r0
	movs r2, #0xd4
	lsls r2, r2, #1
	adds r1, r0, r2
	ldrh r2, [r1]
	movs r3, #0
	ldrsh r0, [r1, r3]
	cmp r0, #0
	beq _0807D1B2
	adds r0, r2, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xb4
	beq _0807D1B2
	cmp r0, #0xf0
	bne _0807D1B2
	movs r0, #1
	ldr r5, [sp, #8]
	ands r0, r5
	cmp r0, #0
	beq _0807D182
	ldr r4, [r7, #0x20]
	adds r0, r4, #0
	bl sub_802C080
	cmp r0, #0
	bne _0807D182
	adds r0, r4, #0
	bl sub_80213F0
_0807D182:
	movs r0, #2
	ldr r1, [sp, #8]
	ands r0, r1
	cmp r0, #0
	beq _0807D19E
	ldr r4, [r7, #0x24]
	adds r0, r4, #0
	bl sub_802C080
	cmp r0, #0
	bne _0807D19E
	adds r0, r4, #0
	bl sub_80213F0
_0807D19E:
	ldr r2, [sp, #0x14]
	ldr r3, [sp, #4]
	subs r0, r2, r3
	lsls r0, r0, #2
	adds r0, r7, r0
	movs r5, #0xd6
	lsls r5, r5, #1
	adds r0, r0, r5
	movs r1, #0x64
	strh r1, [r0]
_0807D1B2:
	ldr r0, [sp, #8]
	cmp r0, #0
	beq _0807D1DA
	ldr r1, [sp, #0x14]
	ldr r2, [sp, #4]
	subs r0, r1, r2
	lsls r0, r0, #2
	adds r0, r7, r0
	movs r3, #0xd4
	lsls r3, r3, #1
	adds r1, r0, r3
	movs r5, #0
	ldrsh r0, [r1, r5]
	adds r6, r2, #0
	adds r6, #1
	cmp r0, #0
	bne _0807D286
	movs r0, #1
	strh r0, [r1]
	b _0807D286
_0807D1DA:
	ldr r1, [sp, #0x14]
	ldr r2, [sp, #4]
	subs r0, r1, r2
	lsls r0, r0, #2
	adds r0, r7, r0
	movs r3, #0xd4
	lsls r3, r3, #1
	adds r0, r0, r3
	mov r5, sp
	ldrh r5, [r5, #8]
	strh r5, [r0]
	adds r6, r2, #0
	adds r6, #1
	b _0807D286
_0807D1F6:
	movs r1, #0xd4
	lsls r1, r1, #1
	add r1, r8
	movs r4, #0
	movs r2, #0
	movs r0, #0x1e
	strh r0, [r1]
	movs r0, #0x6e
	strh r0, [r3]
	movs r0, #0xd7
	lsls r0, r0, #1
	add r0, r8
	strh r2, [r0]
	ldr r0, _0807D268 @ =0x00000239
	bl m4aSongNumStart
	ldr r0, _0807D26C @ =0x000004F6
	ldr r1, [sp, #0x10]
	strh r0, [r1, #0xc]
	strb r4, [r1, #0x1a]
	movs r2, #0
	str r2, [sp, #8]
	adds r2, r7, #0
	adds r2, #0x20
	movs r3, #0x20
	mov r8, r3
	movs r5, #0x21
	rsbs r5, r5, #0
	mov sb, r5
	movs r3, #0
_0807D232:
	ldr r1, [sp, #8]
	lsls r0, r1, #2
	adds r0, r2, r0
	ldr r4, [r0]
	ldr r1, [r4, #4]
	adds r0, r1, #0
	mov r5, r8
	ands r0, r5
	cmp r0, #0
	beq _0807D256
	ldr r0, [r4, #0x6c]
	ldr r5, [sp, #0x10]
	cmp r0, r5
	bne _0807D256
	mov r0, sb
	ands r1, r0
	str r1, [r4, #4]
	str r3, [r4, #0x6c]
_0807D256:
	ldr r0, [sp, #8]
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #8]
	cmp r0, #1
	bls _0807D232
	b _0807D286
	.align 2, 0
_0807D268: .4byte 0x00000239
_0807D26C: .4byte 0x000004F6
_0807D270:
	movs r1, #0xd4
	lsls r1, r1, #1
	add r1, r8
	ldrh r0, [r1]
	subs r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bne _0807D286
	strh r0, [r3]
_0807D286:
	lsls r0, r6, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #4]
	cmp r0, #2
	bhi _0807D292
	b _0807CFBE
_0807D292:
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_807D2A4
sub_807D2A4: @ 0x0807D2A4
	push {r4, lr}
	adds r3, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	adds r0, r1, #0
	ldrh r2, [r3, #0x16]
	cmp r1, #1
	beq _0807D2E2
	cmp r1, #1
	bgt _0807D2BE
	cmp r1, #0
	beq _0807D2C8
	b _0807D328
_0807D2BE:
	cmp r0, #2
	beq _0807D2F4
	cmp r0, #3
	beq _0807D308
	b _0807D328
_0807D2C8:
	ldr r0, _0807D2D8 @ =0x000002FF
	cmp r2, r0
	bls _0807D2DC
	movs r1, #0x80
	lsls r1, r1, #3
	adds r0, r1, #0
	b _0807D322
	.align 2, 0
_0807D2D8: .4byte 0x000002FF
_0807D2DC:
	movs r4, #0x80
	lsls r4, r4, #3
	b _0807D320
_0807D2E2:
	cmp r2, #0xff
	bls _0807D2EE
	movs r1, #0x80
	lsls r1, r1, #3
	adds r0, r1, #0
	b _0807D322
_0807D2EE:
	movs r4, #0x80
	lsls r4, r4, #3
	b _0807D320
_0807D2F4:
	ldr r0, _0807D304 @ =0x000001FF
	cmp r2, r0
	bls _0807D31C
	movs r1, #0xc0
	lsls r1, r1, #3
	adds r0, r1, #0
	b _0807D322
	.align 2, 0
_0807D304: .4byte 0x000001FF
_0807D308:
	ldr r0, _0807D318 @ =0x000002FF
	cmp r2, r0
	bls _0807D31C
	movs r1, #0xc0
	lsls r1, r1, #3
	adds r0, r1, #0
	b _0807D322
	.align 2, 0
_0807D318: .4byte 0x000002FF
_0807D31C:
	movs r4, #0x80
	lsls r4, r4, #2
_0807D320:
	adds r0, r4, #0
_0807D322:
	subs r0, r0, r2
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
_0807D328:
	ldr r0, _0807D370 @ =0x000003FF
	ands r2, r0
	strh r2, [r3, #0x16]
	ldr r2, _0807D374 @ =gSineTable
	ldrh r0, [r3, #0x16]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	movs r4, #0
	ldrsh r0, [r0, r4]
	ldr r1, [r3, #0x10]
	muls r0, r1, r0
	cmp r0, #0
	bge _0807D34C
	ldr r4, _0807D378 @ =0x00003FFF
	adds r0, r0, r4
_0807D34C:
	asrs r0, r0, #0xe
	str r0, [r3, #8]
	ldrh r0, [r3, #0x16]
	lsls r0, r0, #1
	adds r0, r0, r2
	movs r2, #0
	ldrsh r0, [r0, r2]
	muls r0, r1, r0
	cmp r0, #0
	bge _0807D364
	ldr r4, _0807D378 @ =0x00003FFF
	adds r0, r0, r4
_0807D364:
	asrs r0, r0, #0xe
	str r0, [r3, #0xc]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807D370: .4byte 0x000003FF
_0807D374: .4byte gSineTable
_0807D378: .4byte 0x00003FFF

	thumb_func_start sub_807D37C
sub_807D37C: @ 0x0807D37C
	push {r4, r5, r6, r7, lr}
	adds r4, r1, #0
	movs r5, #0
	ldr r0, [r4]
	asrs r0, r0, #8
	ldr r2, _0807D400 @ =gCamera
	ldr r1, [r2]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	ldr r0, [r4, #4]
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	cmp r0, #0
	bgt _0807D3B4
	ldrh r1, [r4, #0x16]
	movs r0, #0x80
	lsls r0, r0, #2
	cmp r1, r0
	bls _0807D3B4
	adds r0, r4, #0
	movs r1, #0
	bl sub_807D2A4
	movs r5, #1
_0807D3B4:
	ldr r0, [r4, #4]
	asrs r0, r0, #8
	adds r0, #8
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xbf
	ble _0807D3D8
	ldrh r1, [r4, #0x16]
	ldr r0, _0807D404 @ =0x000001FF
	cmp r1, r0
	bhi _0807D3D8
	cmp r5, #0
	bne _0807D40C
	adds r0, r4, #0
	movs r1, #1
	bl sub_807D2A4
	movs r5, #2
_0807D3D8:
	cmp r5, #0
	bne _0807D40C
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xb3
	bgt _0807D3F6
	lsls r0, r7, #0x10
	asrs r1, r0, #0x10
	movs r0, #0x14
	rsbs r0, r0, #0
	cmp r1, r0
	ble _0807D3F6
	ldr r0, _0807D408 @ =0x00000103
	cmp r1, r0
	ble _0807D414
_0807D3F6:
	movs r0, #0
	strh r0, [r4, #0x18]
	movs r5, #3
	b _0807D414
	.align 2, 0
_0807D400: .4byte gCamera
_0807D404: .4byte 0x000001FF
_0807D408: .4byte 0x00000103
_0807D40C:
	movs r0, #0x8e
	lsls r0, r0, #2
	bl m4aSongNumStart
_0807D414:
	adds r0, r5, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_807D41C
sub_807D41C: @ 0x0807D41C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	str r0, [sp, #4]
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	str r1, [sp, #8]
	movs r7, #0
	ldr r1, _0807D458 @ =gUnknown_080D5CA4
	mov r0, sp
	movs r2, #4
	bl memcpy
	ldr r1, [sp, #8]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #2
	movs r2, #0xca
	lsls r2, r2, #1
	adds r0, r0, r2
	ldr r3, [sp, #4]
	adds r5, r3, r0
	adds r0, r1, #0
	add r0, sp
	ldrb r0, [r0]
	b _0807D5DC
	.align 2, 0
_0807D458: .4byte gUnknown_080D5CA4
_0807D45C:
	ldr r0, [sp, #8]
	cmp sb, r0
	bne _0807D464
	b _0807D5D4
_0807D464:
	mov r1, sb
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #2
	movs r2, #0xca
	lsls r2, r2, #1
	adds r0, r0, r2
	ldr r3, [sp, #4]
	adds r4, r3, r0
	ldrh r0, [r4, #0x18]
	cmp r0, #0
	bne _0807D47E
	b _0807D5D4
_0807D47E:
	ldr r1, [r5]
	ldr r0, [r4]
	subs r1, r1, r0
	mov ip, r1
	ldr r1, [r5, #4]
	ldr r0, [r4, #4]
	subs r6, r1, r0
	mov r1, ip
	mov r0, ip
	muls r0, r1, r0
	adds r1, r6, #0
	muls r1, r6, r1
	adds r0, r0, r1
	bl Sqrt
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x18
	cmp r0, #0x13
	bls _0807D4A6
	b _0807D5D4
_0807D4A6:
	ldr r1, [r5]
	ldr r0, [r4]
	subs r1, r1, r0
	ldr r0, [r5, #4]
	ldr r2, [r4, #4]
	subs r0, r0, r2
	lsls r0, r0, #8
	asrs r0, r0, #0x10
	lsls r1, r1, #8
	asrs r1, r1, #0x10
	bl sa2__sub_8004418
	strh r0, [r5, #0x16]
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r0, r2
	ldr r3, _0807D604 @ =0x000003FF
	adds r1, r3, #0
	ands r0, r1
	strh r0, [r4, #0x16]
	ldr r0, [r5]
	ldr r1, [r4]
	adds r0, r0, r1
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	mov ip, r0
	ldr r0, [r5, #4]
	ldr r1, [r4, #4]
	adds r0, r0, r1
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r6, r0, #1
	ldr r7, _0807D608 @ =gSineTable
	ldrh r3, [r5, #0x16]
	movs r0, #0x80
	lsls r0, r0, #1
	mov sl, r0
	adds r0, r3, r0
	lsls r0, r0, #1
	adds r0, r0, r7
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r2, #0xb
	mov r8, r2
	mov r1, r8
	muls r1, r0, r1
	adds r0, r1, #0
	cmp r0, #0
	bge _0807D50C
	adds r0, #0x3f
_0807D50C:
	asrs r2, r0, #6
	lsls r0, r3, #1
	adds r0, r0, r7
	movs r3, #0
	ldrsh r0, [r0, r3]
	mov r1, r8
	muls r1, r0, r1
	adds r0, r1, #0
	cmp r0, #0
	bge _0807D522
	adds r0, #0x3f
_0807D522:
	asrs r1, r0, #6
	mov r3, ip
	adds r0, r3, r2
	str r0, [r5]
	adds r0, r6, r1
	str r0, [r5, #4]
	ldrh r3, [r5, #0x16]
	mov r1, sl
	adds r0, r3, r1
	lsls r0, r0, #1
	adds r0, r0, r7
	movs r2, #0
	ldrsh r0, [r0, r2]
	ldr r2, [r5, #0x10]
	muls r0, r2, r0
	cmp r0, #0
	bge _0807D548
	ldr r1, _0807D60C @ =0x00003FFF
	adds r0, r0, r1
_0807D548:
	asrs r0, r0, #0xe
	str r0, [r5, #8]
	lsls r0, r3, #1
	adds r0, r0, r7
	movs r3, #0
	ldrsh r0, [r0, r3]
	muls r0, r2, r0
	cmp r0, #0
	bge _0807D55E
	ldr r1, _0807D60C @ =0x00003FFF
	adds r0, r0, r1
_0807D55E:
	asrs r0, r0, #0xe
	str r0, [r5, #0xc]
	ldrh r3, [r4, #0x16]
	mov r2, sl
	adds r0, r3, r2
	lsls r0, r0, #1
	adds r0, r0, r7
	movs r1, #0
	ldrsh r0, [r0, r1]
	mov r2, r8
	muls r2, r0, r2
	adds r0, r2, #0
	cmp r0, #0
	bge _0807D57C
	adds r0, #0x3f
_0807D57C:
	asrs r2, r0, #6
	lsls r0, r3, #1
	adds r0, r0, r7
	movs r3, #0
	ldrsh r0, [r0, r3]
	mov r1, r8
	muls r1, r0, r1
	adds r0, r1, #0
	cmp r0, #0
	bge _0807D592
	adds r0, #0x3f
_0807D592:
	asrs r1, r0, #6
	mov r3, ip
	adds r0, r3, r2
	str r0, [r4]
	adds r0, r6, r1
	str r0, [r4, #4]
	ldrh r2, [r4, #0x16]
	mov r1, sl
	adds r0, r2, r1
	lsls r0, r0, #1
	adds r0, r0, r7
	movs r3, #0
	ldrsh r0, [r0, r3]
	ldr r1, [r4, #0x10]
	muls r0, r1, r0
	cmp r0, #0
	bge _0807D5B8
	ldr r3, _0807D60C @ =0x00003FFF
	adds r0, r0, r3
_0807D5B8:
	asrs r0, r0, #0xe
	str r0, [r4, #8]
	lsls r0, r2, #1
	adds r0, r0, r7
	movs r2, #0
	ldrsh r0, [r0, r2]
	muls r0, r1, r0
	cmp r0, #0
	bge _0807D5CE
	ldr r3, _0807D60C @ =0x00003FFF
	adds r0, r0, r3
_0807D5CE:
	asrs r0, r0, #0xe
	str r0, [r4, #0xc]
	movs r7, #1
_0807D5D4:
	mov r0, sb
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
_0807D5DC:
	mov sb, r0
	cmp r0, #2
	bhi _0807D5E4
	b _0807D45C
_0807D5E4:
	cmp r7, #0
	beq _0807D5F0
	movs r0, #0x8e
	lsls r0, r0, #2
	bl m4aSongNumStart
_0807D5F0:
	adds r0, r7, #0
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0807D604: .4byte 0x000003FF
_0807D608: .4byte gSineTable
_0807D60C: .4byte 0x00003FFF

	thumb_func_start sub_807D610
sub_807D610: @ 0x0807D610
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	str r0, [sp]
	adds r5, r1, #0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	mov sb, r2
	movs r7, #0
	movs r2, #0
	movs r1, #0xca
	lsls r1, r1, #1
	adds r4, r0, r1
	movs r3, #0xd5
	lsls r3, r3, #1
	mov r8, r3
	movs r6, #0x80
	mov ip, r6
	movs r0, #0x80
	lsls r0, r0, #2
	mov sl, r0
_0807D640:
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r3, r0, #2
	ldr r6, [sp]
	adds r1, r6, r3
	movs r6, #0xd6
	lsls r6, r6, #1
	adds r0, r1, r6
	ldrh r0, [r0]
	cmp r0, #0
	beq _0807D6A4
	mov r0, sb
	cmp r0, #0
	bne _0807D680
	adds r0, r4, r3
	ldr r0, [r0]
	cmp r0, r5
	bgt _0807D6A4
	mov r3, r8
	adds r0, r1, r3
	ldrh r0, [r0]
	subs r6, #0xac
	cmp r0, r6
	bls _0807D6A4
	ldr r1, _0807D67C @ =0x000002FF
	cmp r0, r1
	bhi _0807D6A4
	mov r7, ip
	orrs r7, r2
	b _0807D6A2
	.align 2, 0
_0807D67C: .4byte 0x000002FF
_0807D680:
	adds r0, r4, r3
	ldr r0, [r0]
	cmp r0, r5
	blt _0807D6A4
	add r1, r8
	ldr r3, _0807D6C0 @ =0xFFFFFF00
	adds r0, r3, #0
	ldrh r1, [r1]
	adds r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, sl
	bls _0807D6A4
	mov r6, ip
	orrs r2, r6
	lsls r0, r2, #0x18
	lsrs r7, r0, #0x18
_0807D6A2:
	movs r2, #3
_0807D6A4:
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #2
	bls _0807D640
	adds r0, r7, #0
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0807D6C0: .4byte 0xFFFFFF00

	thumb_func_start sub_807D6C4
sub_807D6C4: @ 0x0807D6C4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov sl, r0
	movs r5, #0xa2
	lsls r5, r5, #1
	add r5, sl
	ldr r0, _0807D804 @ =0x0005C400
	str r0, [r5]
	movs r6, #0xa4
	lsls r6, r6, #1
	add r6, sl
	movs r4, #0x98
	lsls r4, r4, #8
	str r4, [r6]
	mov r0, sl
	movs r1, #0
	movs r2, #0
	bl sub_807DB00
	movs r0, #0xb6
	lsls r0, r0, #1
	add r0, sl
	mov sb, r0
	ldr r0, _0807D808 @ =0x00072C00
	mov r1, sb
	str r0, [r1]
	movs r0, #0xb8
	lsls r0, r0, #1
	add r0, sl
	mov r8, r0
	str r4, [r0]
	mov r0, sl
	movs r1, #1
	movs r2, #0
	bl sub_807DB00
	movs r7, #0x9e
	lsls r7, r7, #2
	add r7, sl
	movs r2, #0xd0
	lsls r2, r2, #2
	add r2, sl
	movs r0, #0x40
	str r2, [sp]
	bl VramMalloc
	str r0, [r7]
	ldr r1, _0807D80C @ =0x000004F1
	strh r1, [r7, #0xc]
	movs r0, #0
	strb r0, [r7, #0x1a]
	adds r1, #0xf
	strh r1, [r7, #0x14]
	movs r0, #0
	strh r0, [r7, #0xe]
	strh r0, [r7, #0x16]
	movs r0, #0xff
	strb r0, [r7, #0x1b]
	movs r1, #0x10
	strb r1, [r7, #0x1c]
	movs r0, #0
	strb r0, [r7, #0x1f]
	movs r1, #1
	rsbs r1, r1, #0
	str r1, [r7, #0x20]
	ldr r0, _0807D810 @ =0x0000106A
	str r0, [r7, #8]
	ldr r0, [r5]
	asrs r0, r0, #8
	ldr r5, _0807D814 @ =gCamera
	ldr r1, [r5]
	subs r0, r0, r1
	strh r0, [r7, #0x10]
	ldr r0, [r6]
	asrs r0, r0, #8
	ldr r1, [r5, #4]
	subs r0, r0, r1
	strh r0, [r7, #0x12]
	ldr r2, [sp]
	movs r0, #0
	strh r0, [r2]
	ldrh r0, [r7, #0x10]
	strh r0, [r2, #6]
	ldrh r0, [r7, #0x12]
	strh r0, [r2, #8]
	movs r4, #0x80
	lsls r4, r4, #1
	strh r4, [r2, #2]
	strh r4, [r2, #4]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	movs r7, #0xa8
	lsls r7, r7, #2
	add r7, sl
	movs r2, #0xd3
	lsls r2, r2, #2
	add r2, sl
	movs r0, #0x40
	str r2, [sp]
	bl VramMalloc
	str r0, [r7]
	ldr r1, _0807D80C @ =0x000004F1
	strh r1, [r7, #0xc]
	movs r0, #6
	strb r0, [r7, #0x1a]
	movs r0, #0xa0
	lsls r0, r0, #3
	strh r0, [r7, #0x14]
	movs r1, #0
	strh r1, [r7, #0xe]
	strh r1, [r7, #0x16]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r7, #0x1b]
	movs r0, #0x10
	strb r0, [r7, #0x1c]
	strb r1, [r7, #0x1f]
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r7, #0x20]
	ldr r0, _0807D818 @ =0x0000106B
	str r0, [r7, #8]
	mov r1, sb
	ldr r0, [r1]
	asrs r0, r0, #8
	ldr r1, [r5]
	subs r0, r0, r1
	strh r0, [r7, #0x10]
	mov r1, r8
	ldr r0, [r1]
	asrs r0, r0, #8
	ldr r1, [r5, #4]
	subs r0, r0, r1
	strh r0, [r7, #0x12]
	ldr r2, [sp]
	movs r0, #0
	strh r0, [r2]
	ldrh r0, [r7, #0x10]
	strh r0, [r2, #6]
	ldrh r0, [r7, #0x12]
	strh r0, [r2, #8]
	strh r4, [r2, #2]
	strh r4, [r2, #4]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807D804: .4byte 0x0005C400
_0807D808: .4byte 0x00072C00
_0807D80C: .4byte 0x000004F1
_0807D810: .4byte 0x0000106A
_0807D814: .4byte gCamera
_0807D818: .4byte 0x0000106B

	thumb_func_start sub_807D81C
sub_807D81C: @ 0x0807D81C
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	movs r0, #0x9e
	lsls r0, r0, #2
	adds r5, r6, r0
	movs r1, #0xd0
	lsls r1, r1, #2
	adds r3, r6, r1
	movs r1, #0xa2
	lsls r1, r1, #1
	adds r0, r6, r1
	ldr r2, [r0]
	asrs r2, r2, #8
	ldr r4, _0807D8B0 @ =gCamera
	ldr r0, [r4]
	subs r2, r2, r0
	strh r2, [r5, #0x10]
	adds r1, #4
	adds r0, r6, r1
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r1, [r4, #4]
	subs r0, r0, r1
	strh r0, [r5, #0x12]
	strh r2, [r3, #6]
	ldrh r0, [r5, #0x12]
	strh r0, [r3, #8]
	adds r0, r5, #0
	adds r1, r3, #0
	bl TransformSprite
	adds r0, r5, #0
	bl UpdateSpriteAnimation
	adds r0, r5, #0
	bl DisplaySprite
	movs r0, #0xa8
	lsls r0, r0, #2
	adds r5, r6, r0
	movs r1, #0xd3
	lsls r1, r1, #2
	adds r3, r6, r1
	movs r1, #0xb6
	lsls r1, r1, #1
	adds r0, r6, r1
	ldr r2, [r0]
	asrs r2, r2, #8
	ldr r0, [r4]
	subs r2, r2, r0
	strh r2, [r5, #0x10]
	adds r1, #4
	adds r0, r6, r1
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r1, [r4, #4]
	subs r0, r0, r1
	strh r0, [r5, #0x12]
	strh r2, [r3, #6]
	ldrh r0, [r5, #0x12]
	strh r0, [r3, #8]
	adds r0, r5, #0
	adds r1, r3, #0
	bl TransformSprite
	adds r0, r5, #0
	bl UpdateSpriteAnimation
	adds r0, r5, #0
	bl DisplaySprite
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0807D8B0: .4byte gCamera

	thumb_func_start sub_807D8B4
sub_807D8B4: @ 0x0807D8B4
	push {r4, lr}
	adds r3, r0, #0
	lsls r1, r1, #0x18
	lsrs r0, r1, #0x18
	adds r4, r0, #0
	lsls r2, r2, #0x18
	lsrs r1, r2, #0x18
	adds r2, r1, #0
	cmp r0, #1
	beq _0807D910
	cmp r0, #1
	bgt _0807D8D2
	cmp r0, #0
	beq _0807D8DC
	b _0807D9AC
_0807D8D2:
	cmp r4, #0xa
	beq _0807D978
	cmp r4, #0x14
	beq _0807D998
	b _0807D9AC
_0807D8DC:
	cmp r1, #1
	bhi _0807D8F8
	movs r0, #0x80
	movs r4, #0xaf
	lsls r4, r4, #1
	adds r2, r3, r4
	orrs r1, r0
	strb r1, [r2]
	movs r0, #0xc1
	lsls r0, r0, #1
	adds r1, r3, r0
	movs r0, #0xfa
	lsls r0, r0, #2
	b _0807D9AA
_0807D8F8:
	movs r0, #0x80
	movs r4, #0xc3
	lsls r4, r4, #1
	adds r2, r3, r4
	orrs r1, r0
	strb r1, [r2]
	movs r0, #0xad
	lsls r0, r0, #1
	adds r1, r3, r0
	movs r0, #0xfa
	lsls r0, r0, #2
	b _0807D9AA
_0807D910:
	cmp r1, #1
	beq _0807D93A
	cmp r1, #1
	bgt _0807D91E
	cmp r1, #0
	beq _0807D928
	b _0807D9AC
_0807D91E:
	cmp r2, #2
	beq _0807D94C
	cmp r2, #3
	beq _0807D962
	b _0807D9AC
_0807D928:
	movs r2, #0xaf
	lsls r2, r2, #1
	adds r1, r3, r2
	movs r0, #0x80
	strb r0, [r1]
	movs r4, #0xc3
	lsls r4, r4, #1
	adds r1, r3, r4
	b _0807D95C
_0807D93A:
	movs r0, #0xaf
	lsls r0, r0, #1
	adds r1, r3, r0
	movs r0, #0x80
	strb r0, [r1]
	movs r2, #0xc3
	lsls r2, r2, #1
	adds r1, r3, r2
	b _0807D972
_0807D94C:
	movs r4, #0xaf
	lsls r4, r4, #1
	adds r1, r3, r4
	movs r0, #0x81
	strb r0, [r1]
	movs r0, #0xc3
	lsls r0, r0, #1
	adds r1, r3, r0
_0807D95C:
	movs r0, #0x82
	strb r0, [r1]
	b _0807D9AC
_0807D962:
	movs r2, #0xaf
	lsls r2, r2, #1
	adds r1, r3, r2
	movs r0, #0x81
	strb r0, [r1]
	movs r4, #0xc3
	lsls r4, r4, #1
	adds r1, r3, r4
_0807D972:
	movs r0, #0x83
	strb r0, [r1]
	b _0807D9AC
_0807D978:
	movs r0, #0xaf
	lsls r0, r0, #1
	adds r1, r3, r0
	movs r0, #0
	strb r0, [r1]
	movs r2, #0xc3
	lsls r2, r2, #1
	adds r1, r3, r2
	strb r0, [r1]
	movs r4, #0xad
	lsls r4, r4, #1
	adds r1, r3, r4
	movs r0, #0x14
	strh r0, [r1]
	subs r2, #4
	b _0807D9A8
_0807D998:
	movs r4, #0xad
	lsls r4, r4, #1
	adds r1, r3, r4
	movs r0, #0x96
	lsls r0, r0, #1
	strh r0, [r1]
	movs r2, #0xc1
	lsls r2, r2, #1
_0807D9A8:
	adds r1, r3, r2
_0807D9AA:
	strh r0, [r1]
_0807D9AC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_807D9B4
sub_807D9B4: @ 0x0807D9B4
	push {r4, lr}
	adds r2, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	adds r0, r1, #0
	movs r3, #0
	cmp r1, #1
	beq _0807D9F2
	cmp r1, #1
	bgt _0807D9CE
	cmp r1, #0
	beq _0807D9D4
	b _0807DA2A
_0807D9CE:
	cmp r0, #2
	beq _0807DA10
	b _0807DA2A
_0807D9D4:
	movs r1, #0xad
	lsls r1, r1, #1
	adds r0, r2, r1
	ldrh r1, [r0]
	movs r0, #0xfa
	lsls r0, r0, #2
	cmp r1, r0
	bne _0807DA2A
	movs r4, #0xc1
	lsls r4, r4, #1
	adds r0, r2, r4
	ldrh r0, [r0]
	cmp r0, r1
	bne _0807DA2A
	b _0807DA28
_0807D9F2:
	movs r1, #0xad
	lsls r1, r1, #1
	adds r0, r2, r1
	ldrh r1, [r0]
	movs r0, #0xaf
	lsls r0, r0, #1
	cmp r1, r0
	bne _0807DA2A
	movs r4, #0xc1
	lsls r4, r4, #1
	adds r0, r2, r4
	ldrh r0, [r0]
	cmp r0, r1
	bne _0807DA2A
	b _0807DA28
_0807DA10:
	movs r1, #0xad
	lsls r1, r1, #1
	adds r0, r2, r1
	ldrh r0, [r0]
	cmp r0, #0x6e
	bne _0807DA2A
	movs r4, #0xc1
	lsls r4, r4, #1
	adds r0, r2, r4
	ldrh r0, [r0]
	cmp r0, #0x6e
	bne _0807DA2A
_0807DA28:
	movs r3, #1
_0807DA2A:
	adds r0, r3, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_807DA34
sub_807DA34: @ 0x0807DA34
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	mov r8, r0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	adds r7, r1, #0
	lsls r0, r7, #2
	adds r0, r0, r7
	lsls r0, r0, #3
	movs r1, #0xa2
	lsls r1, r1, #1
	adds r0, r0, r1
	mov r2, r8
	adds r6, r2, r0
	ldr r4, [r2, #0x20]
	ldr r1, [r4, #0x10]
	asrs r1, r1, #8
	ldr r0, [r6]
	asrs r0, r0, #8
	subs r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	ldr r3, _0807DAE4 @ =0xFFFF0000
	ldr r2, [sp]
	ands r2, r3
	orrs r2, r1
	str r2, [sp]
	ldr r1, [r4, #0x14]
	asrs r1, r1, #8
	ldr r0, [r6, #4]
	asrs r0, r0, #8
	subs r1, r1, r0
	lsls r1, r1, #0x10
	ldr r0, _0807DAE8 @ =0x0000FFFF
	ands r0, r2
	orrs r0, r1
	str r0, [sp]
	mov r5, sp
	ldr r0, [sp, #4]
	ands r0, r3
	str r0, [sp, #4]
	mov r0, sp
	movs r1, #8
	bl sa2__sub_8085A9C
	mov r0, sp
	movs r1, #0
	ldrsh r0, [r0, r1]
	str r0, [r6, #8]
	movs r2, #2
	ldrsh r0, [r5, r2]
	str r0, [r6, #0xc]
	ldr r2, [r4, #0x10]
	ldr r0, [r6]
	subs r2, r2, r0
	ldr r1, [r4, #0x14]
	ldr r0, [r6, #4]
	subs r1, r1, r0
	adds r0, r2, #0
	muls r0, r2, r0
	adds r2, r1, #0
	muls r2, r1, r2
	adds r1, r2, #0
	adds r0, r0, r1
	bl Sqrt
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	str r0, [r6, #0x24]
	asrs r0, r0, #4
	str r0, [r6, #0x1c]
	movs r0, #0
	str r0, [r6, #0x20]
	movs r0, #0xa
	strh r0, [r6, #0x14]
	movs r0, #0xc8
	strh r0, [r6, #0x16]
	movs r1, #0xa8
	lsls r1, r1, #2
	add r1, r8
	cmp r7, #0
	beq _0807DAEC
	movs r0, #0x98
	lsls r0, r0, #3
	b _0807DAF0
	.align 2, 0
_0807DAE4: .4byte 0xFFFF0000
_0807DAE8: .4byte 0x0000FFFF
_0807DAEC:
	movs r0, #0xa0
	lsls r0, r0, #3
_0807DAF0:
	strh r0, [r1, #0x14]
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_807DB00
sub_807DB00: @ 0x0807DB00
	push {r4, r5, lr}
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	lsls r3, r1, #2
	adds r3, r3, r1
	lsls r3, r3, #3
	movs r4, #0xa6
	lsls r4, r4, #1
	adds r1, r0, r4
	adds r1, r1, r3
	movs r4, #0
	str r4, [r1]
	movs r5, #0xa8
	lsls r5, r5, #1
	adds r1, r0, r5
	adds r1, r1, r3
	str r4, [r1]
	adds r0, r0, r3
	mov ip, r0
	movs r1, #0xac
	lsls r1, r1, #1
	add r1, ip
	movs r3, #0
	movs r5, #1
	movs r0, #1
	strh r0, [r1]
	movs r0, #0xad
	lsls r0, r0, #1
	add r0, ip
	strh r4, [r0]
	movs r0, #0xae
	lsls r0, r0, #1
	add r0, ip
	strb r2, [r0]
	ldr r0, _0807DB58 @ =0x0000015D
	add r0, ip
	strb r3, [r0]
	ldr r0, _0807DB5C @ =0x00000157
	add r0, ip
	strb r5, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807DB58: .4byte 0x0000015D
_0807DB5C: .4byte 0x00000157

	thumb_func_start sub_807DB60
sub_807DB60: @ 0x0807DB60
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	mov r8, r0
	movs r0, #0
	str r0, [sp, #4]
_0807DB72:
	movs r2, #0
	mov r1, r8
	strb r2, [r1, #0x11]
	ldr r3, [sp, #4]
	lsls r5, r3, #2
	adds r0, r5, r3
	lsls r0, r0, #3
	movs r1, #0xa2
	lsls r1, r1, #1
	adds r0, r0, r1
	mov r2, r8
	adds r6, r2, r0
	ldr r4, _0807DBEC @ =gUnknown_08E2ED18
	ldrb r0, [r6, #0x18]
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r2, [r0]
	mov r0, r8
	adds r1, r3, #0
	bl _call_via_r2
	ldrb r0, [r6, #0x18]
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r1, [r0]
	ldr r0, _0807DBF0 @ =sub_807E214
	str r5, [sp, #0x10]
	cmp r1, r0
	bne _0807DBC2
	ldrb r0, [r6, #0x1b]
	cmp r0, #0
	beq _0807DBC2
	mov r3, r8
	ldr r0, [r3, #0x20]
	ldr r1, [r0]
	ldr r0, _0807DBF4 @ =sub_8081A3C
	cmp r1, r0
	beq _0807DBC2
	movs r0, #0
	strb r0, [r6, #0x1b]
_0807DBC2:
	ldrb r0, [r6, #0x13]
	ldr r1, [sp, #4]
	lsls r1, r1, #1
	str r1, [sp, #0xc]
	ldr r2, [sp, #4]
	adds r2, #1
	str r2, [sp, #8]
	cmp r0, #0
	beq _0807DC92
	mov r3, r8
	ldrb r0, [r3]
	cmp r0, #0
	beq _0807DC92
	ldrb r0, [r3, #0x11]
	cmp r0, #0
	beq _0807DBF8
	mov r0, r8
	ldr r1, [sp, #4]
	bl sub_807C518
	b _0807DC92
	.align 2, 0
_0807DBEC: .4byte gUnknown_08E2ED18
_0807DBF0: .4byte sub_807E214
_0807DBF4: .4byte sub_8081A3C
_0807DBF8:
	ldr r1, [sp, #0x10]
	ldr r2, [sp, #4]
	adds r0, r1, r2
	lsls r0, r0, #3
	mov r3, r8
	adds r7, r0, r3
	movs r0, #0x9e
	lsls r0, r0, #2
	adds r7, r7, r0
	ldr r1, [r6]
	mov sl, r1
	ldr r6, [r6, #4]
	ldr r0, _0807DC70 @ =gCurTask
	ldr r0, [r0]
	ldrh r0, [r0, #6]
	movs r2, #0xc0
	lsls r2, r2, #0x12
	adds r5, r0, r2
	movs r3, #0
	mov sb, r3
_0807DC20:
	mov r1, sb
	lsls r0, r1, #2
	adds r1, r5, #0
	adds r1, #0x20
	adds r1, r1, r0
	ldr r4, [r1]
	adds r0, r4, #0
	bl sub_802C080
	cmp r0, #0
	bne _0807DC84
	ldr r0, [r4, #4]
	movs r1, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0807DC74
	adds r0, r5, #0
	adds r0, #0x7c
	ldr r1, [r4, #0x6c]
	cmp r1, r0
	beq _0807DC5C
	adds r0, #0x28
	cmp r1, r0
	beq _0807DC5C
	adds r0, #0x28
	cmp r1, r0
	beq _0807DC5C
	adds r0, #0x28
	cmp r1, r0
	bne _0807DC84
_0807DC5C:
	str r4, [sp]
	adds r0, r7, #0
	mov r2, sl
	asrs r1, r2, #8
	asrs r2, r6, #8
	movs r3, #0
	bl sub_8020CE0
	b _0807DC84
	.align 2, 0
_0807DC70: .4byte gCurTask
_0807DC74:
	str r4, [sp]
	adds r0, r7, #0
	mov r3, sl
	asrs r1, r3, #8
	asrs r2, r6, #8
	movs r3, #0
	bl sub_8020CE0
_0807DC84:
	mov r0, sb
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov sb, r0
	cmp r0, #1
	bls _0807DC20
_0807DC92:
	ldr r1, [sp, #0x10]
	ldr r2, [sp, #4]
	adds r0, r1, r2
	lsls r0, r0, #3
	movs r3, #0x9e
	lsls r3, r3, #2
	adds r0, r0, r3
	add r0, r8
	ldr r3, [sp, #0xc]
	adds r1, r3, r2
	lsls r1, r1, #2
	movs r2, #0xd0
	lsls r2, r2, #2
	adds r1, r1, r2
	add r1, r8
	movs r2, #0
	ldr r3, [sp, #4]
	bl sub_807F334
	ldr r3, [sp, #8]
	lsls r0, r3, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #4]
	cmp r0, #1
	bhi _0807DCC6
	b _0807DB72
_0807DCC6:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_807DCD8
sub_807DCD8: @ 0x0807DCD8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r2, r0, #0
	lsls r1, r1, #0x18
	lsrs r7, r1, #0x18
	lsls r0, r7, #2
	adds r0, r0, r7
	lsls r5, r0, #3
	movs r1, #0xa2
	lsls r1, r1, #1
	adds r0, r5, r1
	adds r4, r2, r0
	movs r3, #0
	mov r8, r3
	ldrh r0, [r4, #0x16]
	cmp r0, #0xa
	beq _0807DD3C
	cmp r0, #0xa
	bgt _0807DD06
	cmp r0, #0
	beq _0807DD0C
	b _0807DE14
_0807DD06:
	cmp r0, #0x14
	beq _0807DE04
	b _0807DE14
_0807DD0C:
	cmp r7, #0
	bne _0807DD1A
	ldr r0, [r4]
	movs r6, #0xc8
	lsls r6, r6, #6
	adds r1, r0, r6
	b _0807DD20
_0807DD1A:
	ldr r0, [r4]
	ldr r3, _0807DD38 @ =0xFFFFCE00
	adds r1, r0, r3
_0807DD20:
	adds r0, r2, #0
	adds r2, r7, #0
	bl sub_807D610
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0
	beq _0807DE14
	strb r3, [r4, #0x19]
	movs r0, #0xa
	b _0807DE12
	.align 2, 0
_0807DD38: .4byte 0xFFFFCE00
_0807DD3C:
	ldrb r0, [r4, #0x19]
	movs r3, #0x7f
	ands r3, r0
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r1, r0, #2
	adds r0, r2, r1
	movs r6, #0xd6
	lsls r6, r6, #1
	adds r0, r0, r6
	ldrh r0, [r0]
	cmp r0, #0
	bne _0807DD62
	mov r0, r8
	strb r0, [r4, #0x19]
	movs r0, #0x3c
	strh r0, [r4, #0x14]
	movs r0, #0x14
	b _0807DE12
_0807DD62:
	movs r6, #0xcc
	lsls r6, r6, #1
	adds r0, r2, r6
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r0, [r4, #4]
	cmp r1, r0
	ble _0807DD7E
	movs r1, #0xa8
	lsls r1, r1, #1
	adds r0, r2, r1
	adds r0, r0, r5
	adds r1, #0xb0
	b _0807DD88
_0807DD7E:
	movs r6, #0xa8
	lsls r6, r6, #1
	adds r0, r2, r6
	adds r0, r0, r5
	ldr r1, _0807DE00 @ =0xFFFFFE00
_0807DD88:
	str r1, [r0]
	ldr r1, [r4, #4]
	ldr r0, [r4, #0xc]
	adds r6, r1, r0
	str r6, [r4, #4]
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r5, r0, #2
	movs r0, #0xca
	lsls r0, r0, #1
	mov ip, r0
	adds r0, r2, r0
	adds r0, r0, r5
	ldr r1, [r4]
	ldr r0, [r0]
	subs r3, r1, r0
	adds r0, r3, #0
	cmp r3, #0
	bge _0807DDB0
	rsbs r0, r3, #0
_0807DDB0:
	asrs r3, r0, #8
	movs r1, #0xcc
	lsls r1, r1, #1
	adds r0, r2, r1
	adds r0, r0, r5
	ldr r0, [r0]
	subs r1, r6, r0
	adds r0, r1, #0
	cmp r1, #0
	bge _0807DDC6
	rsbs r0, r1, #0
_0807DDC6:
	asrs r1, r0, #8
	cmp r3, #0xf
	bgt _0807DDE4
	cmp r1, #0x1f
	bgt _0807DDE4
	mov r3, ip
	adds r0, r5, r3
	adds r0, r2, r0
	adds r1, r7, #2
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	bl sub_807D2A4
	movs r6, #1
	mov r8, r6
_0807DDE4:
	mov r0, r8
	cmp r0, #0
	beq _0807DE14
	movs r0, #0x8e
	lsls r0, r0, #2
	bl m4aSongNumStart
	movs r0, #0
	strb r0, [r4, #0x19]
	movs r0, #0x3c
	strh r0, [r4, #0x14]
	movs r0, #0x14
	b _0807DE12
	.align 2, 0
_0807DE00: .4byte 0xFFFFFE00
_0807DE04:
	ldrh r0, [r4, #0x14]
	subs r0, #1
	strh r0, [r4, #0x14]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bne _0807DE14
_0807DE12:
	strh r0, [r4, #0x16]
_0807DE14:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_807DE20
sub_807DE20: @ 0x0807DE20
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	lsls r1, r1, #0x18
	lsrs r3, r1, #0x18
	lsls r0, r3, #2
	adds r0, r0, r3
	lsls r0, r0, #3
	mov sb, r0
	movs r0, #0xa2
	lsls r0, r0, #1
	add r0, sb
	adds r5, r7, r0
	movs r0, #0x9e
	lsls r0, r0, #2
	add r0, sb
	adds r0, r0, r7
	mov r8, r0
	lsls r0, r3, #1
	adds r0, r0, r3
	lsls r0, r0, #2
	movs r1, #0xd0
	lsls r1, r1, #2
	adds r0, r0, r1
	adds r2, r7, r0
	movs r4, #0
	mov sl, r4
	ldrh r6, [r5, #0x16]
	cmp r6, #0x78
	bne _0807DE66
	b _0807E0D2
_0807DE66:
	cmp r6, #0x78
	bgt _0807DE96
	cmp r6, #0x14
	beq _0807DF50
	cmp r6, #0x14
	bgt _0807DE7C
	cmp r6, #0
	beq _0807DEDC
	cmp r6, #0xa
	beq _0807DEEC
	b _0807E200
_0807DE7C:
	cmp r6, #0x64
	bne _0807DE82
	b _0807DFEE
_0807DE82:
	cmp r6, #0x64
	bgt _0807DE8E
	cmp r6, #0x1e
	bne _0807DE8C
	b _0807DFDC
_0807DE8C:
	b _0807E200
_0807DE8E:
	cmp r6, #0x6e
	bne _0807DE94
	b _0807E0B0
_0807DE94:
	b _0807E200
_0807DE96:
	movs r0, #0x9b
	lsls r0, r0, #1
	cmp r6, r0
	bne _0807DEA0
	b _0807E19C
_0807DEA0:
	cmp r6, r0
	bgt _0807DEC2
	cmp r6, #0xd2
	bne _0807DEAA
	b _0807E170
_0807DEAA:
	cmp r6, #0xd2
	bgt _0807DEB6
	cmp r6, #0xc8
	bne _0807DEB4
	b _0807E124
_0807DEB4:
	b _0807E200
_0807DEB6:
	movs r0, #0x96
	lsls r0, r0, #1
	cmp r6, r0
	bne _0807DEC0
	b _0807E182
_0807DEC0:
	b _0807E200
_0807DEC2:
	movs r0, #0xaf
	lsls r0, r0, #1
	cmp r6, r0
	bne _0807DECC
	b _0807E200
_0807DECC:
	cmp r6, r0
	ble _0807DED2
	b _0807E200
_0807DED2:
	subs r0, #0x1e
	cmp r6, r0
	bne _0807DEDA
	b _0807E1D0
_0807DEDA:
	b _0807E200
_0807DEDC:
	ldr r0, _0807DEE8 @ =0xFFFFFE00
	str r0, [r5, #0xc]
	mov r0, sl
	strb r0, [r5, #0x1a]
	movs r0, #0xa
	b _0807E1FE
	.align 2, 0
_0807DEE8: .4byte 0xFFFFFE00
_0807DEEC:
	cmp r3, #0
	bne _0807DF00
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #1
	cmp r1, r0
	beq _0807DF16
	adds r0, r1, #0
	adds r0, #0x10
	b _0807DF0E
_0807DF00:
	ldrh r1, [r2]
	movs r0, #0xc0
	lsls r0, r0, #2
	cmp r1, r0
	beq _0807DF16
	adds r0, r1, #0
	subs r0, #0x10
_0807DF0E:
	ldr r4, _0807DF3C @ =0x000003FF
	adds r1, r4, #0
	ands r0, r1
	strh r0, [r2]
_0807DF16:
	movs r1, #0x90
	lsls r1, r1, #1
	adds r0, r7, r1
	ldr r0, [r0]
	ldr r4, _0807DF40 @ =0xFFFFC000
	adds r2, r0, r4
	ldr r0, [r5, #4]
	ldr r1, [r5, #0xc]
	adds r0, r0, r1
	str r0, [r5, #4]
	cmp r0, r2
	ble _0807DF30
	b _0807E200
_0807DF30:
	cmp r3, #0
	bne _0807DF44
	movs r0, #0x80
	lsls r0, r0, #2
	b _0807DF46
	.align 2, 0
_0807DF3C: .4byte 0x000003FF
_0807DF40: .4byte 0xFFFFC000
_0807DF44:
	ldr r0, _0807DF4C @ =0xFFFFFE00
_0807DF46:
	str r0, [r5, #8]
	movs r0, #0x14
	b _0807E1FE
	.align 2, 0
_0807DF4C: .4byte 0xFFFFFE00
_0807DF50:
	ldr r0, [r5]
	ldr r1, [r5, #8]
	adds r2, r0, r1
	str r2, [r5]
	cmp r3, #0
	bne _0807DF78
	cmp r1, #0
	blt _0807DF70
	ldr r0, _0807DF6C @ =0x000667FF
	cmp r2, r0
	ble _0807DF9A
	adds r0, #1
	b _0807DF94
	.align 2, 0
_0807DF6C: .4byte 0x000667FF
_0807DF70:
	ldr r0, _0807DF74 @ =0x00061400
	b _0807DF90
	.align 2, 0
_0807DF74: .4byte 0x00061400
_0807DF78:
	cmp r1, #0
	blt _0807DF8C
	ldr r0, _0807DF88 @ =0x0006DBFF
	cmp r2, r0
	ble _0807DF9A
	adds r0, #1
	b _0807DF94
	.align 2, 0
_0807DF88: .4byte 0x0006DBFF
_0807DF8C:
	movs r0, #0xd1
	lsls r0, r0, #0xb
_0807DF90:
	cmp r2, r0
	bgt _0807DF9A
_0807DF94:
	str r0, [r5]
	rsbs r0, r1, #0
	str r0, [r5, #8]
_0807DF9A:
	ldrb r2, [r5, #0x1a]
	movs r0, #0x80
	ands r0, r2
	cmp r0, #0
	bne _0807DFA6
	b _0807E200
_0807DFA6:
	movs r1, #0x7f
	ands r1, r2
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r1, r7, #0
	adds r1, #0x2c
	adds r1, r1, r0
	ldr r1, [r1]
	ldr r0, [r5]
	subs r2, r1, r0
	adds r0, r2, #0
	cmp r2, #0
	bge _0807DFC4
	rsbs r0, r2, #0
_0807DFC4:
	asrs r2, r0, #8
	cmp r2, #1
	ble _0807DFCC
	b _0807E200
_0807DFCC:
	str r1, [r5]
	movs r0, #0x1e
	strh r0, [r5, #0x14]
	strh r0, [r5, #0x16]
	movs r0, #0xc0
	lsls r0, r0, #3
	str r0, [r5, #0xc]
	b _0807E200
_0807DFDC:
	ldrh r0, [r5, #0x14]
	subs r0, #1
	strh r0, [r5, #0x14]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0807DFEA
	b _0807E200
_0807DFEA:
	movs r0, #0x64
	b _0807E1FE
_0807DFEE:
	ldr r4, [r5, #4]
	ldr r0, [r5, #0xc]
	adds r0, r4, r0
	str r0, [r5, #4]
	subs r4, r4, r0
	mov r0, r8
	adds r1, r2, #0
	movs r2, #1
	bl sub_807F334
	ldr r1, [r5]
	ldr r2, [r5, #4]
	str r4, [sp]
	mov r0, r8
	movs r3, #0
	bl sub_807C244
	movs r0, #1
	strb r0, [r7, #0x11]
	ldrb r0, [r5, #0x1a]
	movs r1, #0x7f
	ands r1, r0
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r2, r0, #2
	adds r0, r7, #0
	adds r0, #0x38
	adds r3, r0, r2
	ldr r0, [r3]
	cmp r0, #0
	bgt _0807E064
	movs r0, #0xa4
	lsls r0, r0, #1
	adds r1, r7, r0
	add r1, sb
	adds r0, r7, #0
	adds r0, #0x30
	adds r0, r0, r2
	ldr r1, [r1]
	ldr r0, [r0]
	subs r1, r1, r0
	adds r0, r1, #0
	cmp r1, #0
	bge _0807E048
	rsbs r0, r1, #0
_0807E048:
	asrs r1, r0, #8
	cmp r1, #0x13
	bgt _0807E064
	movs r1, #0xa8
	lsls r1, r1, #1
	adds r0, r7, r1
	add r0, sb
	ldr r0, [r0]
	str r0, [r3]
	adds r0, r7, r2
	strh r6, [r0, #0x3e]
	ldr r0, _0807E094 @ =0x0000023A
	bl m4aSongNumStart
_0807E064:
	ldr r1, [r5, #4]
	ldr r0, _0807E098 @ =0x0000F3FF
	cmp r1, r0
	bgt _0807E06E
	b _0807E200
_0807E06E:
	ldr r0, _0807E09C @ =0xFFFFFE80
	str r0, [r5, #0xc]
	ldr r2, _0807E0A0 @ =gPseudoRandom
	ldr r1, [r2]
	ldr r0, _0807E0A4 @ =0x00196225
	muls r0, r1, r0
	ldr r3, _0807E0A8 @ =0x3C6EF35F
	adds r0, r0, r3
	str r0, [r2]
	movs r1, #3
	ands r0, r1
	ldr r1, _0807E0AC @ =gUnknown_080D5C70
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r5, #0x14]
	movs r0, #0x6e
	b _0807E1FE
	.align 2, 0
_0807E094: .4byte 0x0000023A
_0807E098: .4byte 0x0000F3FF
_0807E09C: .4byte 0xFFFFFE80
_0807E0A0: .4byte gPseudoRandom
_0807E0A4: .4byte 0x00196225
_0807E0A8: .4byte 0x3C6EF35F
_0807E0AC: .4byte gUnknown_080D5C70
_0807E0B0:
	mov r0, r8
	adds r1, r2, #0
	movs r2, #1
	bl sub_807F334
	ldrh r0, [r5, #0x14]
	subs r0, #1
	strh r0, [r5, #0x14]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0807E0C8
	b _0807E200
_0807E0C8:
	movs r0, #0x78
	strh r0, [r5, #0x16]
	movs r0, #1
	strb r0, [r5, #0x13]
	b _0807E200
_0807E0D2:
	ldr r4, [r5, #4]
	ldr r0, [r5, #0xc]
	adds r0, r4, r0
	str r0, [r5, #4]
	subs r4, r4, r0
	mov r0, r8
	adds r1, r2, #0
	movs r2, #1
	bl sub_807F334
	ldr r1, [r5]
	ldr r2, [r5, #4]
	str r4, [sp]
	mov r0, r8
	movs r3, #0
	bl sub_807C244
	movs r0, #1
	strb r0, [r7, #0x11]
	movs r4, #0x90
	lsls r4, r4, #1
	adds r0, r7, r4
	ldr r0, [r0]
	ldr r1, _0807E120 @ =0xFFFFC000
	adds r2, r0, r1
	ldr r3, [r5, #4]
	cmp r3, r2
	ble _0807E10C
	b _0807E200
_0807E10C:
	ldr r1, [r5]
	mov r0, r8
	adds r2, r3, #0
	bl sub_807C48C
	mov r3, sl
	strb r3, [r5, #0x13]
	movs r0, #0xc8
	b _0807E1FE
	.align 2, 0
_0807E120: .4byte 0xFFFFC000
_0807E124:
	cmp r3, #0
	bne _0807E144
	ldrh r0, [r2]
	subs r0, #0x10
	ldr r4, _0807E140 @ =0x000003FF
	adds r1, r4, #0
	ands r0, r1
	strh r0, [r2]
	movs r1, #0x80
	lsls r1, r1, #1
	cmp r0, r1
	bne _0807E15C
	b _0807E162
	.align 2, 0
_0807E140: .4byte 0x000003FF
_0807E144:
	ldrh r0, [r2]
	adds r0, #0x10
	ldr r3, _0807E16C @ =0x000003FF
	adds r1, r3, #0
	ands r0, r1
	strh r0, [r2]
	movs r1, #0xc0
	lsls r1, r1, #2
	cmp r0, r1
	bne _0807E15C
	movs r4, #1
	mov sl, r4
_0807E15C:
	mov r0, sl
	cmp r0, #0
	beq _0807E200
_0807E162:
	movs r0, #0x1e
	strh r0, [r5, #0x14]
	movs r0, #0xd2
	b _0807E1FE
	.align 2, 0
_0807E16C: .4byte 0x000003FF
_0807E170:
	ldrh r0, [r5, #0x14]
	subs r0, #1
	strh r0, [r5, #0x14]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0807E200
	movs r0, #0xfa
	lsls r0, r0, #2
	b _0807E1FE
_0807E182:
	cmp r3, #0
	bne _0807E190
	ldr r0, _0807E18C @ =0xFFFFFE00
	b _0807E194
	.align 2, 0
_0807E18C: .4byte 0xFFFFFE00
_0807E190:
	movs r0, #0x80
	lsls r0, r0, #2
_0807E194:
	str r0, [r5, #8]
	movs r0, #0x9b
	lsls r0, r0, #1
	b _0807E1FE
_0807E19C:
	ldr r1, [r5]
	ldr r0, [r5, #8]
	adds r1, r1, r0
	str r1, [r5]
	cmp r3, #0
	bne _0807E1BC
	ldr r0, _0807E1B8 @ =0x00061400
	cmp r1, r0
	bgt _0807E200
	str r0, [r5]
	movs r0, #0xa0
	lsls r0, r0, #1
	b _0807E1FE
	.align 2, 0
_0807E1B8: .4byte 0x00061400
_0807E1BC:
	ldr r0, _0807E1CC @ =0x0006DBFF
	cmp r1, r0
	ble _0807E200
	adds r0, #1
	str r0, [r5]
	movs r0, #0xa0
	lsls r0, r0, #1
	b _0807E1FE
	.align 2, 0
_0807E1CC: .4byte 0x0006DBFF
_0807E1D0:
	cmp r3, #0
	bne _0807E1E4
	ldrh r0, [r2]
	subs r0, #0x10
	ldr r3, _0807E1E0 @ =0x000003FF
	adds r1, r3, #0
	b _0807E1EC
	.align 2, 0
_0807E1E0: .4byte 0x000003FF
_0807E1E4:
	ldrh r0, [r2]
	adds r0, #0x10
	ldr r4, _0807E210 @ =0x000003FF
	adds r1, r4, #0
_0807E1EC:
	ands r0, r1
	strh r0, [r2]
	ldrh r0, [r2]
	cmp r0, #0
	bne _0807E200
	movs r0, #1
	strb r0, [r5, #0x13]
	movs r0, #0xaf
	lsls r0, r0, #1
_0807E1FE:
	strh r0, [r5, #0x16]
_0807E200:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807E210: .4byte 0x000003FF

	thumb_func_start sub_807E214
sub_807E214: @ 0x0807E214
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x30
	mov r8, r0
	lsls r1, r1, #0x18
	lsrs r6, r1, #0x18
	lsls r0, r6, #2
	adds r0, r0, r6
	lsls r0, r0, #3
	movs r1, #0xa2
	lsls r1, r1, #1
	adds r0, r0, r1
	mov r2, r8
	adds r4, r2, r0
	movs r7, #0
	ldrh r1, [r4, #0x16]
	cmp r1, #0xc8
	bne _0807E23C
	b _0807E3E0
_0807E23C:
	cmp r1, #0xc8
	bgt _0807E254
	cmp r1, #0xa
	beq _0807E292
	cmp r1, #0xa
	bgt _0807E24E
	cmp r1, #0
	beq _0807E282
	b _0807E53A
_0807E24E:
	cmp r1, #0x64
	beq _0807E31E
	b _0807E53A
_0807E254:
	movs r2, #0x9b
	lsls r2, r2, #1
	cmp r1, r2
	bne _0807E25E
	b _0807E424
_0807E25E:
	cmp r1, r2
	bgt _0807E26E
	movs r0, #0x96
	lsls r0, r0, #1
	cmp r1, r0
	bne _0807E26C
	b _0807E414
_0807E26C:
	b _0807E53A
_0807E26E:
	movs r0, #0xa0
	lsls r0, r0, #1
	cmp r1, r0
	bne _0807E278
	b _0807E484
_0807E278:
	adds r0, #0xb4
	cmp r1, r0
	bne _0807E280
	b _0807E508
_0807E280:
	b _0807E53A
_0807E282:
	str r7, [r4, #8]
	str r7, [r4, #0xc]
	strb r7, [r4, #0x1b]
	str r7, [r4, #0x1c]
	movs r0, #0x79
	strh r0, [r4, #0x14]
	movs r0, #0xa
	b _0807E538
_0807E292:
	ldr r1, [r4, #0xc]
	ldr r0, [r4, #0x1c]
	adds r1, r1, r0
	str r1, [r4, #0xc]
	cmp r1, #0
	bge _0807E2AC
	ldr r0, _0807E2A8 @ =0xFFFFFE00
	cmp r1, r0
	bgt _0807E2B6
	b _0807E2B4
	.align 2, 0
_0807E2A8: .4byte 0xFFFFFE00
_0807E2AC:
	ldr r0, _0807E2D4 @ =0x000001FF
	cmp r1, r0
	ble _0807E2B6
	adds r0, #1
_0807E2B4:
	str r0, [r4, #0xc]
_0807E2B6:
	ldr r1, [r4, #4]
	ldr r0, [r4, #0xc]
	adds r7, r1, r0
	str r7, [r4, #4]
	ldrh r0, [r4, #0x14]
	subs r0, #1
	strh r0, [r4, #0x14]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0807E2EC
	cmp r6, #0
	bne _0807E2D8
	movs r0, #0x80
	lsls r0, r0, #3
	b _0807E2DA
	.align 2, 0
_0807E2D4: .4byte 0x000001FF
_0807E2D8:
	ldr r0, _0807E2E8 @ =0xFFFFFC00
_0807E2DA:
	str r0, [r4, #8]
	movs r1, #0
	movs r0, #0x64
	strh r0, [r4, #0x16]
	strb r1, [r4, #0x13]
	b _0807E53A
	.align 2, 0
_0807E2E8: .4byte 0xFFFFFC00
_0807E2EC:
	movs r1, #0x14
	ldrsh r0, [r4, r1]
	movs r1, #0xa
	bl __modsi3
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0807E2FE
	b _0807E53A
_0807E2FE:
	mov r2, r8
	ldr r5, [r2, #0x20]
	ldr r0, [r5, #0x14]
	ldr r1, _0807E314 @ =0xFFFFF000
	adds r0, r0, r1
	cmp r7, r0
	ble _0807E318
	movs r0, #0x40
	rsbs r0, r0, #0
	str r0, [r4, #0x1c]
	b _0807E53A
	.align 2, 0
_0807E314: .4byte 0xFFFFF000
_0807E318:
	movs r0, #0x40
	str r0, [r4, #0x1c]
	b _0807E53A
_0807E31E:
	ldr r3, [r4]
	ldr r0, [r4, #8]
	adds r1, r3, r0
	str r1, [r4]
	cmp r6, #0
	bne _0807E338
	ldr r0, _0807E334 @ =0x000667FF
	cmp r1, r0
	ble _0807E344
	adds r0, #1
	b _0807E340
	.align 2, 0
_0807E334: .4byte 0x000667FF
_0807E338:
	movs r0, #0xd1
	lsls r0, r0, #0xb
	cmp r1, r0
	bgt _0807E344
_0807E340:
	str r0, [r4]
	movs r7, #1
_0807E344:
	ldr r1, [r4]
	subs r3, r3, r1
	lsls r0, r6, #2
	adds r0, r0, r6
	lsls r0, r0, #3
	movs r2, #0x9e
	lsls r2, r2, #2
	adds r0, r0, r2
	add r0, r8
	ldr r2, [r4, #4]
	movs r5, #0
	str r5, [sp]
	bl sub_807C244
	cmp r7, #0
	bne _0807E366
	b _0807E53A
_0807E366:
	movs r0, #0xc8
	strh r0, [r4, #0x16]
	cmp r6, #0
	bne _0807E370
	b _0807E53A
_0807E370:
	bl sub_807C5D0
	str r5, [sp, #0x28]
	add r0, sp, #0x2c
	movs r1, #0xf0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	mov r1, sp
	adds r1, #0x2e
	movs r0, #0x10
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x1e
	strb r0, [r1]
	mov r0, r8
	ldr r5, [r0, #0x20]
	adds r0, r5, #0
	adds r0, #0x4a
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _0807E3D4
	movs r6, #0x8e
	lsls r6, r6, #1
	add r6, r8
	ldr r1, [r6]
	asrs r1, r1, #8
	ldr r2, [r4, #4]
	asrs r2, r2, #8
	str r5, [sp]
	str r0, [sp, #4]
	add r0, sp, #8
	movs r3, #0
	bl sub_8020700
	cmp r0, #0
	beq _0807E3D4
	movs r0, #1
	strb r0, [r4, #0x1b]
	movs r0, #0xa0
	bl sub_807FB7C
	adds r0, r5, #0
	bl sub_8081A10
	ldr r0, [r6]
	str r0, [r5, #0x10]
	ldr r0, [r4, #4]
	str r0, [r5, #0x14]
_0807E3D4:
	ldr r0, _0807E3DC @ =0x0000023B
	bl m4aSongNumStart
	b _0807E53A
	.align 2, 0
_0807E3DC: .4byte 0x0000023B
_0807E3E0:
	cmp r6, #0
	bne _0807E3E6
	b _0807E53A
_0807E3E6:
	adds r1, r4, #0
	subs r1, #0x28
	ldrh r0, [r1, #0x16]
	cmp r0, #0xc8
	beq _0807E3F2
	b _0807E53A
_0807E3F2:
	ldrb r0, [r4, #0x1b]
	cmp r0, #0
	beq _0807E3FE
	movs r0, #0x96
	lsls r0, r0, #1
	b _0807E402
_0807E3FE:
	movs r0, #0xfa
	lsls r0, r0, #1
_0807E402:
	strh r0, [r4, #0x16]
	strh r0, [r1, #0x16]
	ldr r0, [r4, #8]
	rsbs r0, r0, #0
	str r0, [r4, #8]
	ldr r0, [r1, #8]
	rsbs r0, r0, #0
	str r0, [r1, #8]
	b _0807E53A
_0807E414:
	ldr r0, _0807E420 @ =0xFFFFF800
	str r0, [r4, #0xc]
	movs r0, #4
	strb r0, [r4, #0x1b]
	strh r2, [r4, #0x16]
	b _0807E53A
	.align 2, 0
_0807E420: .4byte 0xFFFFF800
_0807E424:
	ldr r1, [r4, #4]
	ldr r0, [r4, #0xc]
	adds r1, r1, r0
	str r1, [r4, #4]
	adds r0, #0x80
	str r0, [r4, #0xc]
	cmp r6, #0
	beq _0807E440
	ldrb r0, [r4, #0x1b]
	cmp r0, #0
	beq _0807E440
	mov r2, r8
	ldr r5, [r2, #0x20]
	str r1, [r5, #0x14]
_0807E440:
	ldr r1, [r4, #4]
	ldr r0, _0807E480 @ =0x0000AFFF
	cmp r1, r0
	ble _0807E53A
	ldr r0, [r4, #0xc]
	cmp r0, #0
	blt _0807E53A
	movs r0, #0xb0
	lsls r0, r0, #8
	str r0, [r4, #4]
	movs r0, #0x1e
	strh r0, [r4, #0x14]
	movs r0, #0xa0
	lsls r0, r0, #1
	strh r0, [r4, #0x16]
	cmp r6, #0
	beq _0807E53A
	adds r0, #0xfc
	bl m4aSongNumStart
	movs r0, #0x80
	lsls r0, r0, #4
	movs r3, #1
	rsbs r3, r3, #0
	movs r1, #0x91
	str r1, [sp]
	movs r1, #0x20
	movs r2, #0
	bl sub_805256C
	b _0807E53A
	.align 2, 0
_0807E480: .4byte 0x0000AFFF
_0807E484:
	ldrh r0, [r4, #0x14]
	subs r0, #1
	strh r0, [r4, #0x14]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0807E53A
	ldrb r0, [r4, #0x1b]
	cmp r0, #0
	beq _0807E49A
	subs r0, #1
	strb r0, [r4, #0x1b]
_0807E49A:
	ldrb r0, [r4, #0x1b]
	cmp r0, #1
	bhi _0807E4FA
	cmp r6, #0
	beq _0807E4EE
	mov r1, r8
	ldr r5, [r1, #0x20]
	cmp r0, #0
	beq _0807E4EE
	adds r6, r5, #0
	adds r6, #0x4a
	movs r2, #0
	ldrsh r0, [r6, r2]
	cmp r0, #0
	bgt _0807E4C4
	adds r0, r5, #0
	adds r0, #0x4c
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	ble _0807E4E8
_0807E4C4:
	adds r0, r5, #0
	adds r0, #0x9e
	strh r7, [r0]
	ldr r0, [r5, #4]
	movs r1, #0x21
	rsbs r1, r1, #0
	ands r0, r1
	str r0, [r5, #4]
	str r7, [r5, #0x6c]
	ldr r1, _0807E4E4 @ =Player_8008CD0
	adds r0, r5, #0
	bl SetPlayerCallback
	movs r0, #0x78
	strh r0, [r6]
	b _0807E4EE
	.align 2, 0
_0807E4E4: .4byte Player_8008CD0
_0807E4E8:
	adds r0, r5, #0
	bl Player_8014550
_0807E4EE:
	movs r0, #0xfa
	lsls r0, r0, #1
	strh r0, [r4, #0x16]
	movs r0, #1
	strb r0, [r4, #0x13]
	b _0807E53A
_0807E4FA:
	ldr r0, _0807E504 @ =0xFFFFF600
	str r0, [r4, #0xc]
	strh r2, [r4, #0x16]
	b _0807E53A
	.align 2, 0
_0807E504: .4byte 0xFFFFF600
_0807E508:
	ldr r1, [r4]
	ldr r0, [r4, #8]
	adds r1, r1, r0
	str r1, [r4]
	cmp r6, #0
	bne _0807E524
	ldr r0, _0807E520 @ =0x00061400
	cmp r1, r0
	bgt _0807E530
	str r0, [r4]
	b _0807E534
	.align 2, 0
_0807E520: .4byte 0x00061400
_0807E524:
	ldr r0, _0807E548 @ =0x0006DBFF
	cmp r1, r0
	ble _0807E530
	adds r0, #1
	str r0, [r4]
	movs r7, #1
_0807E530:
	cmp r7, #0
	beq _0807E53A
_0807E534:
	movs r0, #0xfa
	lsls r0, r0, #2
_0807E538:
	strh r0, [r4, #0x16]
_0807E53A:
	add sp, #0x30
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807E548: .4byte 0x0006DBFF

	thumb_func_start sub_807E54C
sub_807E54C: @ 0x0807E54C
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r7, r0, #0
	lsls r1, r1, #0x18
	lsrs r6, r1, #0x18
	lsls r0, r6, #2
	adds r0, r0, r6
	lsls r0, r0, #3
	movs r1, #0xa2
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r5, r7, r0
	lsls r0, r6, #1
	adds r0, r0, r6
	lsls r0, r0, #2
	movs r2, #0xd0
	lsls r2, r2, #2
	adds r0, r0, r2
	adds r3, r7, r0
	movs r4, #0
	ldrh r2, [r5, #0x16]
	cmp r2, #0xc8
	bne _0807E57C
	b _0807E78C
_0807E57C:
	cmp r2, #0xc8
	bgt _0807E59C
	cmp r2, #0x14
	bne _0807E586
	b _0807E6B2
_0807E586:
	cmp r2, #0x14
	bgt _0807E594
	cmp r2, #0
	beq _0807E5C8
	cmp r2, #0xa
	beq _0807E66C
	b _0807E98C
_0807E594:
	cmp r2, #0x64
	bne _0807E59A
	b _0807E6C8
_0807E59A:
	b _0807E98C
_0807E59C:
	cmp r2, #0xe6
	bne _0807E5A2
	b _0807E854
_0807E5A2:
	cmp r2, #0xe6
	bgt _0807E5B4
	cmp r2, #0xd2
	bne _0807E5AC
	b _0807E7AC
_0807E5AC:
	cmp r2, #0xdc
	bne _0807E5B2
	b _0807E83C
_0807E5B2:
	b _0807E98C
_0807E5B4:
	movs r0, #0x96
	lsls r0, r0, #1
	cmp r2, r0
	bne _0807E5BE
	b _0807E8B4
_0807E5BE:
	adds r0, #0xa
	cmp r2, r0
	bne _0807E5C6
	b _0807E940
_0807E5C6:
	b _0807E98C
_0807E5C8:
	cmp r6, #0
	beq _0807E5D2
	cmp r6, #1
	beq _0807E5E0
	b _0807E5F0
_0807E5D2:
	movs r3, #0x9e
	lsls r3, r3, #2
	adds r2, r7, r3
	ldr r0, _0807E5DC @ =gUnknown_080D5C08
	b _0807E5E8
	.align 2, 0
_0807E5DC: .4byte gUnknown_080D5C08
_0807E5E0:
	movs r0, #0xa8
	lsls r0, r0, #2
	adds r2, r7, r0
	ldr r0, _0807E600 @ =gUnknown_080D5C20
_0807E5E8:
	ldrh r1, [r0, #4]
	strh r1, [r2, #0xc]
	ldrh r0, [r0, #6]
	strb r0, [r2, #0x1a]
_0807E5F0:
	cmp r6, #0
	bne _0807E604
	ldr r0, [r5]
	asrs r0, r0, #8
	movs r2, #0xc6
	lsls r2, r2, #3
	adds r1, r2, #0
	b _0807E60E
	.align 2, 0
_0807E600: .4byte gUnknown_080D5C20
_0807E604:
	ldr r0, [r5]
	asrs r0, r0, #8
	movs r3, #0xd8
	lsls r3, r3, #3
	adds r1, r3, #0
_0807E60E:
	subs r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	ldr r2, _0807E664 @ =0xFFFF0000
	ldr r0, [sp]
	ands r0, r2
	orrs r0, r1
	str r0, [sp]
	ldr r0, [r5, #4]
	asrs r0, r0, #8
	movs r1, #0x60
	subs r1, r1, r0
	lsls r1, r1, #0x10
	ldr r2, _0807E668 @ =0x0000FFFF
	ldr r0, [sp]
	ands r0, r2
	orrs r0, r1
	str r0, [sp]
	ldr r1, _0807E664 @ =0xFFFF0000
	mov r4, sp
	ldr r0, [sp, #4]
	ands r0, r1
	str r0, [sp, #4]
	mov r0, sp
	movs r1, #8
	bl sa2__sub_8085A9C
	mov r0, sp
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #1
	str r0, [r5, #8]
	movs r2, #2
	ldrsh r0, [r4, r2]
	lsls r0, r0, #1
	str r0, [r5, #0xc]
	movs r0, #0xc0
	lsls r0, r0, #2
	strh r0, [r5, #0x10]
	movs r0, #0xa
	strh r0, [r5, #0x16]
	b _0807E98C
	.align 2, 0
_0807E664: .4byte 0xFFFF0000
_0807E668: .4byte 0x0000FFFF
_0807E66C:
	ldr r0, [r5]
	ldr r1, [r5, #8]
	adds r0, r0, r1
	str r0, [r5]
	ldr r0, [r5, #4]
	ldr r1, [r5, #0xc]
	adds r0, r0, r1
	str r0, [r5, #4]
	movs r1, #0xc0
	lsls r1, r1, #7
	cmp r0, r1
	bgt _0807E68C
	strb r4, [r5, #0x13]
	strh r2, [r5, #0x14]
	movs r0, #0x14
	strh r0, [r5, #0x16]
_0807E68C:
	cmp r6, #0
	bne _0807E6A0
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #1
	cmp r1, r0
	bne _0807E69C
	b _0807E98C
_0807E69C:
	adds r0, r1, #0
	b _0807E982
_0807E6A0:
	ldrh r1, [r3]
	movs r0, #0xc0
	lsls r0, r0, #2
	cmp r1, r0
	bne _0807E6AC
	b _0807E98C
_0807E6AC:
	adds r0, r1, #0
	subs r0, #0x10
	b _0807E984
_0807E6B2:
	ldrh r0, [r5, #0x14]
	subs r0, #1
	strh r0, [r5, #0x14]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0807E6C0
	b _0807E98C
_0807E6C0:
	strh r4, [r5, #0x14]
	movs r0, #0x64
	strh r0, [r5, #0x16]
	b _0807E98C
_0807E6C8:
	cmp r6, #0
	bne _0807E71C
	ldr r4, _0807E718 @ =gSineTable
	ldrh r3, [r5, #0x10]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r3, r1
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r2, #0
	ldrsh r1, [r0, r2]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	cmp r0, #0
	bge _0807E6EA
	adds r0, #0x3f
_0807E6EA:
	asrs r2, r0, #6
	lsls r0, r3, #1
	adds r0, r0, r4
	movs r3, #0
	ldrsh r1, [r0, r3]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	cmp r0, #0
	bge _0807E700
	adds r0, #0x3f
_0807E700:
	asrs r1, r0, #6
	movs r3, #0xc6
	lsls r3, r3, #0xb
	adds r0, r2, r3
	str r0, [r5]
	movs r2, #0xf0
	lsls r2, r2, #7
	adds r0, r1, r2
	str r0, [r5, #4]
	ldrh r0, [r5, #0x10]
	subs r0, #0x10
	b _0807E766
	.align 2, 0
_0807E718: .4byte gSineTable
_0807E71C:
	ldr r4, _0807E780 @ =gSineTable
	ldrh r3, [r5, #0x10]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r3, r1
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r2, #0
	ldrsh r1, [r0, r2]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	cmp r0, #0
	bge _0807E73A
	adds r0, #0x3f
_0807E73A:
	asrs r2, r0, #6
	lsls r0, r3, #1
	adds r0, r0, r4
	movs r3, #0
	ldrsh r1, [r0, r3]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	cmp r0, #0
	bge _0807E750
	adds r0, #0x3f
_0807E750:
	asrs r1, r0, #6
	movs r3, #0xd8
	lsls r3, r3, #0xb
	adds r0, r2, r3
	str r0, [r5]
	movs r2, #0xf0
	lsls r2, r2, #7
	adds r0, r1, r2
	str r0, [r5, #4]
	ldrh r0, [r5, #0x10]
	adds r0, #0x10
_0807E766:
	ldr r3, _0807E784 @ =0x000003FF
	adds r1, r3, #0
	ands r0, r1
	strh r0, [r5, #0x10]
	ldrh r0, [r5, #0x14]
	adds r0, #0x10
	strh r0, [r5, #0x14]
	lsls r0, r0, #0x10
	ldr r1, _0807E788 @ =0x07FF0000
	cmp r0, r1
	bgt _0807E77E
	b _0807E98C
_0807E77E:
	b _0807E8AE
	.align 2, 0
_0807E780: .4byte gSineTable
_0807E784: .4byte 0x000003FF
_0807E788: .4byte 0x07FF0000
_0807E78C:
	ldrh r0, [r5, #0x14]
	subs r0, #1
	strh r0, [r5, #0x14]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0807E79A
	b _0807E98C
_0807E79A:
	ldr r0, _0807E7A8 @ =0x0000023D
	bl m4aSongNumStart
	movs r0, #0xd2
	strh r0, [r5, #0x16]
	b _0807E98C
	.align 2, 0
_0807E7A8: .4byte 0x0000023D
_0807E7AC:
	ldr r1, [r5, #0x20]
	ldr r0, [r5, #0x24]
	cmp r1, r0
	bge _0807E7E0
	ldr r2, [r5, #0x1c]
	adds r0, r1, r2
	str r0, [r5, #0x20]
	ldr r0, [r5, #8]
	muls r0, r2, r0
	cmp r0, #0
	bge _0807E7C4
	adds r0, #0xff
_0807E7C4:
	asrs r0, r0, #8
	ldr r1, [r5]
	adds r1, r1, r0
	str r1, [r5]
	ldr r0, [r5, #0xc]
	muls r0, r2, r0
	cmp r0, #0
	bge _0807E7D6
	adds r0, #0xff
_0807E7D6:
	asrs r1, r0, #8
	ldr r0, [r5, #4]
	adds r0, r0, r1
	str r0, [r5, #4]
	b _0807E7E2
_0807E7E0:
	movs r4, #1
_0807E7E2:
	ldrh r2, [r3, #2]
	movs r0, #2
	ldrsh r1, [r3, r0]
	ldr r0, _0807E7FC @ =0x000001FF
	cmp r1, r0
	bgt _0807E800
	adds r0, r2, #0
	adds r0, #0x10
	strh r0, [r3, #2]
	ldrh r0, [r3, #4]
	adds r0, #0x10
	strh r0, [r3, #4]
	b _0807E804
	.align 2, 0
_0807E7FC: .4byte 0x000001FF
_0807E800:
	movs r0, #2
	orrs r4, r0
_0807E804:
	movs r2, #2
	ldrsh r1, [r3, r2]
	movs r0, #0xc0
	lsls r0, r0, #1
	cmp r1, r0
	ble _0807E82C
	lsls r0, r6, #2
	adds r0, r0, r6
	lsls r0, r0, #3
	movs r1, #0x9e
	lsls r1, r1, #2
	adds r0, r0, r1
	adds r0, r7, r0
	adds r1, r3, #0
	movs r2, #2
	adds r3, r6, #0
	bl sub_807F334
	movs r0, #1
	strb r0, [r5, #0x13]
_0807E82C:
	cmp r4, #3
	beq _0807E832
	b _0807E98C
_0807E832:
	movs r0, #0xa
	strh r0, [r5, #0x14]
	movs r0, #0xdc
	strh r0, [r5, #0x16]
	b _0807E98C
_0807E83C:
	ldrh r0, [r5, #0x14]
	subs r0, #1
	strh r0, [r5, #0x14]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0807E84A
	b _0807E98C
_0807E84A:
	movs r0, #0xe6
	strh r0, [r5, #0x16]
	movs r0, #0
	strb r0, [r5, #0x13]
	b _0807E98C
_0807E854:
	ldr r1, [r5, #0x20]
	cmp r1, #0
	ble _0807E888
	ldr r0, [r5, #0x1c]
	subs r1, r1, r0
	str r1, [r5, #0x20]
	rsbs r2, r0, #0
	ldr r0, [r5, #8]
	muls r0, r2, r0
	cmp r0, #0
	bge _0807E86C
	adds r0, #0xff
_0807E86C:
	asrs r0, r0, #8
	ldr r1, [r5]
	adds r1, r1, r0
	str r1, [r5]
	ldr r0, [r5, #0xc]
	muls r0, r2, r0
	cmp r0, #0
	bge _0807E87E
	adds r0, #0xff
_0807E87E:
	asrs r1, r0, #8
	ldr r0, [r5, #4]
	adds r0, r0, r1
	str r0, [r5, #4]
	b _0807E88A
_0807E888:
	movs r4, #1
_0807E88A:
	ldrh r2, [r3, #2]
	movs r0, #2
	ldrsh r1, [r3, r0]
	movs r0, #0x80
	lsls r0, r0, #1
	cmp r1, r0
	ble _0807E8A6
	adds r0, r2, #0
	subs r0, #0x10
	strh r0, [r3, #2]
	ldrh r0, [r3, #4]
	subs r0, #0x10
	strh r0, [r3, #4]
	b _0807E8AA
_0807E8A6:
	movs r0, #2
	orrs r4, r0
_0807E8AA:
	cmp r4, #3
	bne _0807E98C
_0807E8AE:
	movs r0, #0x6e
	strh r0, [r5, #0x16]
	b _0807E98C
_0807E8B4:
	cmp r6, #0
	bne _0807E8C8
	ldr r0, [r5]
	asrs r0, r0, #8
	ldr r2, _0807E8C4 @ =0x00000614
	adds r1, r2, #0
	b _0807E8D0
	.align 2, 0
_0807E8C4: .4byte 0x00000614
_0807E8C8:
	ldr r0, [r5]
	asrs r0, r0, #8
	ldr r3, _0807E90C @ =0x000006DC
	adds r1, r3, #0
_0807E8D0:
	subs r1, r1, r0
	mov r0, sp
	strh r1, [r0]
	ldr r0, [r5, #4]
	asrs r0, r0, #8
	movs r1, #0x98
	subs r1, r1, r0
	mov r4, sp
	movs r0, #0
	strh r1, [r4, #2]
	strh r0, [r4, #4]
	mov r0, sp
	movs r1, #8
	bl sa2__sub_8085A9C
	mov r0, sp
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #1
	str r0, [r5, #8]
	movs r2, #2
	ldrsh r0, [r4, r2]
	lsls r0, r0, #1
	str r0, [r5, #0xc]
	cmp r6, #0
	beq _0807E910
	cmp r6, #1
	beq _0807E920
	b _0807E930
	.align 2, 0
_0807E90C: .4byte 0x000006DC
_0807E910:
	movs r3, #0x9e
	lsls r3, r3, #2
	adds r2, r7, r3
	ldr r0, _0807E91C @ =gUnknown_080D5C08
	b _0807E928
	.align 2, 0
_0807E91C: .4byte gUnknown_080D5C08
_0807E920:
	movs r0, #0xa8
	lsls r0, r0, #2
	adds r2, r7, r0
	ldr r0, _0807E93C @ =gUnknown_080D5C20
_0807E928:
	ldrh r1, [r0, #0xc]
	strh r1, [r2, #0xc]
	ldrh r0, [r0, #0xe]
	strb r0, [r2, #0x1a]
_0807E930:
	movs r0, #1
	strb r0, [r5, #0x13]
	movs r0, #0x9b
	lsls r0, r0, #1
	strh r0, [r5, #0x16]
	b _0807E98C
	.align 2, 0
_0807E93C: .4byte gUnknown_080D5C20
_0807E940:
	ldr r1, [r5]
	ldr r0, [r5, #8]
	adds r2, r1, r0
	str r2, [r5]
	ldr r0, [r5, #4]
	ldr r1, [r5, #0xc]
	adds r0, r0, r1
	str r0, [r5, #4]
	cmp r6, #0
	bne _0807E970
	ldr r0, _0807E96C @ =0x00061400
	cmp r2, r0
	bgt _0807E960
	movs r0, #0xfa
	lsls r0, r0, #2
	strh r0, [r5, #0x16]
_0807E960:
	ldrh r0, [r3]
	cmp r0, #0
	beq _0807E98C
	subs r0, #0x10
	b _0807E984
	.align 2, 0
_0807E96C: .4byte 0x00061400
_0807E970:
	ldr r0, _0807E994 @ =0x0006DBFF
	cmp r2, r0
	ble _0807E97C
	movs r0, #0xfa
	lsls r0, r0, #2
	strh r0, [r5, #0x16]
_0807E97C:
	ldrh r0, [r3]
	cmp r0, #0
	beq _0807E98C
_0807E982:
	adds r0, #0x10
_0807E984:
	ldr r2, _0807E998 @ =0x000003FF
	adds r1, r2, #0
	ands r0, r1
	strh r0, [r3]
_0807E98C:
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807E994: .4byte 0x0006DBFF
_0807E998: .4byte 0x000003FF

	thumb_func_start sub_807E99C
sub_807E99C: @ 0x0807E99C
	push {r4, r5, lr}
	sub sp, #8
	adds r4, r0, #0
	lsls r1, r1, #0x18
	lsrs r2, r1, #0x18
	lsls r0, r2, #2
	adds r0, r0, r2
	lsls r0, r0, #3
	movs r1, #0xa2
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r5, r4, r0
	lsls r0, r2, #1
	adds r0, r0, r2
	lsls r0, r0, #2
	movs r1, #0xd0
	lsls r1, r1, #2
	adds r0, r0, r1
	adds r3, r4, r0
	ldrh r0, [r5, #0x16]
	cmp r0, #0x1f
	bls _0807E9CA
	b _0807EBAC
_0807E9CA:
	lsls r0, r0, #2
	ldr r1, _0807E9D4 @ =_0807E9D8
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0807E9D4: .4byte _0807E9D8
_0807E9D8: @ jump table
	.4byte _0807EA58 @ case 0
	.4byte _0807EBAC @ case 1
	.4byte _0807EBAC @ case 2
	.4byte _0807EBAC @ case 3
	.4byte _0807EBAC @ case 4
	.4byte _0807EBAC @ case 5
	.4byte _0807EBAC @ case 6
	.4byte _0807EBAC @ case 7
	.4byte _0807EBAC @ case 8
	.4byte _0807EBAC @ case 9
	.4byte _0807EADC @ case 10
	.4byte _0807EBAC @ case 11
	.4byte _0807EBAC @ case 12
	.4byte _0807EBAC @ case 13
	.4byte _0807EBAC @ case 14
	.4byte _0807EBAC @ case 15
	.4byte _0807EBAC @ case 16
	.4byte _0807EBAC @ case 17
	.4byte _0807EBAC @ case 18
	.4byte _0807EBAC @ case 19
	.4byte _0807EB1E @ case 20
	.4byte _0807EBAC @ case 21
	.4byte _0807EBAC @ case 22
	.4byte _0807EBAC @ case 23
	.4byte _0807EBAC @ case 24
	.4byte _0807EBAC @ case 25
	.4byte _0807EBAC @ case 26
	.4byte _0807EBAC @ case 27
	.4byte _0807EBAC @ case 28
	.4byte _0807EBAC @ case 29
	.4byte _0807EB3A @ case 30
	.4byte _0807EB6C @ case 31
_0807EA58:
	cmp r2, #0
	bne _0807EA6E
	movs r2, #0x98
	lsls r2, r2, #1
	adds r0, r4, r2
	ldr r1, [r0]
	asrs r1, r1, #8
	ldr r0, [r5]
	asrs r0, r0, #8
	adds r0, #0x20
	b _0807EA7E
_0807EA6E:
	movs r1, #0x98
	lsls r1, r1, #1
	adds r0, r4, r1
	ldr r1, [r0]
	asrs r1, r1, #8
	ldr r0, [r5]
	asrs r0, r0, #8
	subs r0, #0x20
_0807EA7E:
	subs r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	ldr r2, _0807EAD4 @ =0xFFFF0000
	ldr r0, [sp]
	ands r0, r2
	orrs r0, r1
	str r0, [sp]
	movs r2, #0x9a
	lsls r2, r2, #1
	adds r0, r4, r2
	ldr r1, [r0]
	asrs r1, r1, #8
	ldr r0, [r5, #4]
	asrs r0, r0, #8
	subs r1, r1, r0
	lsls r1, r1, #0x10
	ldr r2, _0807EAD8 @ =0x0000FFFF
	ldr r0, [sp]
	ands r0, r2
	orrs r0, r1
	str r0, [sp]
	ldr r1, _0807EAD4 @ =0xFFFF0000
	mov r4, sp
	ldr r0, [sp, #4]
	ands r0, r1
	str r0, [sp, #4]
	mov r0, sp
	movs r1, #8
	bl sa2__sub_8085A9C
	mov r0, sp
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #1
	str r0, [r5, #8]
	movs r2, #2
	ldrsh r0, [r4, r2]
	lsls r0, r0, #1
	str r0, [r5, #0xc]
	movs r0, #0xa
	b _0807EBAA
	.align 2, 0
_0807EAD4: .4byte 0xFFFF0000
_0807EAD8: .4byte 0x0000FFFF
_0807EADC:
	ldr r1, [r5]
	ldr r0, [r5, #8]
	adds r3, r1, r0
	str r3, [r5]
	ldr r0, [r5, #4]
	ldr r1, [r5, #0xc]
	adds r0, r0, r1
	str r0, [r5, #4]
	cmp r2, #0
	bne _0807EB08
	movs r1, #0x98
	lsls r1, r1, #1
	adds r0, r4, r1
	ldr r0, [r0]
	ldr r2, _0807EB04 @ =0xFFFFE000
	adds r0, r0, r2
	cmp r0, r3
	bgt _0807EBAC
	movs r0, #0x14
	b _0807EBAA
	.align 2, 0
_0807EB04: .4byte 0xFFFFE000
_0807EB08:
	movs r1, #0x98
	lsls r1, r1, #1
	adds r0, r4, r1
	ldr r0, [r0]
	movs r2, #0x80
	lsls r2, r2, #6
	adds r0, r0, r2
	cmp r0, r3
	blt _0807EBAC
	movs r0, #0x14
	b _0807EBAA
_0807EB1E:
	cmp r2, #0
	beq _0807EBAC
	adds r1, r5, #0
	subs r1, #0x28
	ldrh r0, [r5, #0x16]
	cmp r0, #0x14
	bne _0807EBAC
	ldrh r0, [r1, #0x16]
	cmp r0, #0x14
	bne _0807EBAC
	movs r0, #0x1e
	strh r0, [r5, #0x16]
	strh r0, [r1, #0x16]
	b _0807EBAC
_0807EB3A:
	cmp r2, #0
	beq _0807EB44
	cmp r2, #1
	beq _0807EB54
	b _0807EB64
_0807EB44:
	movs r0, #0x9e
	lsls r0, r0, #2
	adds r2, r4, r0
	ldr r0, _0807EB50 @ =gUnknown_080D5C08
	b _0807EB5C
	.align 2, 0
_0807EB50: .4byte gUnknown_080D5C08
_0807EB54:
	movs r1, #0xa8
	lsls r1, r1, #2
	adds r2, r4, r1
	ldr r0, _0807EB68 @ =gUnknown_080D5C20
_0807EB5C:
	ldrh r1, [r0, #0x10]
	strh r1, [r2, #0xc]
	ldrh r0, [r0, #0x12]
	strb r0, [r2, #0x1a]
_0807EB64:
	movs r0, #0x1f
	b _0807EBAA
	.align 2, 0
_0807EB68: .4byte gUnknown_080D5C20
_0807EB6C:
	cmp r2, #0
	bne _0807EB94
	ldrh r0, [r3]
	subs r0, #8
	ldr r2, _0807EB90 @ =0x000003FF
	adds r1, r2, #0
	ands r0, r1
	strh r0, [r3]
	movs r1, #0xc0
	lsls r1, r1, #2
	cmp r0, r1
	bne _0807EBAC
	movs r0, #0x64
	strh r0, [r5, #0x16]
	movs r0, #0xa
	strh r0, [r4, #0xc]
	b _0807EBAC
	.align 2, 0
_0807EB90: .4byte 0x000003FF
_0807EB94:
	ldrh r0, [r3]
	adds r0, #8
	ldr r2, _0807EBB4 @ =0x000003FF
	adds r1, r2, #0
	ands r0, r1
	strh r0, [r3]
	movs r1, #0x80
	lsls r1, r1, #1
	cmp r0, r1
	bne _0807EBAC
	movs r0, #0x64
_0807EBAA:
	strh r0, [r5, #0x16]
_0807EBAC:
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807EBB4: .4byte 0x000003FF

	thumb_func_start sub_807EBB8
sub_807EBB8: @ 0x0807EBB8
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r7, r0, #0
	lsls r1, r1, #0x18
	lsrs r6, r1, #0x18
	lsls r0, r6, #2
	adds r0, r0, r6
	lsls r0, r0, #3
	movs r1, #0xa2
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r5, r7, r0
	lsls r0, r6, #1
	adds r0, r0, r6
	lsls r0, r0, #2
	movs r2, #0xd0
	lsls r2, r2, #2
	adds r0, r0, r2
	adds r2, r7, r0
	ldrh r0, [r5, #0x16]
	cmp r0, #0xa
	beq _0807EC98
	cmp r0, #0xa
	bgt _0807EBEE
	cmp r0, #0
	beq _0807EBF4
	b _0807ECEE
_0807EBEE:
	cmp r0, #0x14
	beq _0807ECBC
	b _0807ECEE
_0807EBF4:
	cmp r6, #0
	bne _0807EC08
	ldr r0, [r5]
	asrs r0, r0, #8
	ldr r3, _0807EC04 @ =0x00000614
	adds r1, r3, #0
	b _0807EC10
	.align 2, 0
_0807EC04: .4byte 0x00000614
_0807EC08:
	ldr r0, [r5]
	asrs r0, r0, #8
	ldr r2, _0807EC64 @ =0x000006DC
	adds r1, r2, #0
_0807EC10:
	subs r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	ldr r2, _0807EC68 @ =0xFFFF0000
	ldr r0, [sp]
	ands r0, r2
	orrs r0, r1
	str r0, [sp]
	ldr r0, [r5, #4]
	asrs r0, r0, #8
	movs r1, #0x98
	subs r1, r1, r0
	lsls r1, r1, #0x10
	ldr r2, _0807EC6C @ =0x0000FFFF
	ldr r0, [sp]
	ands r0, r2
	orrs r0, r1
	str r0, [sp]
	ldr r1, _0807EC68 @ =0xFFFF0000
	mov r4, sp
	ldr r0, [sp, #4]
	ands r0, r1
	str r0, [sp, #4]
	mov r0, sp
	movs r1, #8
	bl sa2__sub_8085A9C
	mov r0, sp
	movs r3, #0
	ldrsh r0, [r0, r3]
	lsls r0, r0, #1
	str r0, [r5, #8]
	movs r1, #2
	ldrsh r0, [r4, r1]
	lsls r0, r0, #1
	str r0, [r5, #0xc]
	cmp r6, #0
	beq _0807EC70
	cmp r6, #1
	beq _0807EC80
	b _0807EC90
	.align 2, 0
_0807EC64: .4byte 0x000006DC
_0807EC68: .4byte 0xFFFF0000
_0807EC6C: .4byte 0x0000FFFF
_0807EC70:
	movs r3, #0x9e
	lsls r3, r3, #2
	adds r2, r7, r3
	ldr r0, _0807EC7C @ =gUnknown_080D5C08
	b _0807EC88
	.align 2, 0
_0807EC7C: .4byte gUnknown_080D5C08
_0807EC80:
	movs r0, #0xa8
	lsls r0, r0, #2
	adds r2, r7, r0
	ldr r0, _0807EC94 @ =gUnknown_080D5C20
_0807EC88:
	ldrh r1, [r0, #0x14]
	strh r1, [r2, #0xc]
	ldrh r0, [r0, #0x16]
	strb r0, [r2, #0x1a]
_0807EC90:
	movs r0, #0xa
	b _0807ECEC
	.align 2, 0
_0807EC94: .4byte gUnknown_080D5C20
_0807EC98:
	cmp r6, #0
	bne _0807ECA2
	ldrh r0, [r2]
	adds r0, #8
	b _0807ECA6
_0807ECA2:
	ldrh r0, [r2]
	subs r0, #8
_0807ECA6:
	ldr r3, _0807ECB8 @ =0x000003FF
	adds r1, r3, #0
	ands r0, r1
	strh r0, [r2]
	ldrh r0, [r2]
	cmp r0, #0
	bne _0807ECEE
	movs r0, #0x14
	b _0807ECEC
	.align 2, 0
_0807ECB8: .4byte 0x000003FF
_0807ECBC:
	ldr r1, [r5]
	ldr r0, [r5, #8]
	adds r2, r1, r0
	str r2, [r5]
	ldr r0, [r5, #4]
	ldr r1, [r5, #0xc]
	adds r0, r0, r1
	str r0, [r5, #4]
	cmp r6, #0
	bne _0807ECE4
	ldr r0, _0807ECE0 @ =0x00061400
	cmp r2, r0
	bgt _0807ECEE
	movs r0, #0x1e
	strh r0, [r5, #0x16]
	movs r0, #0x64
	strh r0, [r7, #0xc]
	b _0807ECEE
	.align 2, 0
_0807ECE0: .4byte 0x00061400
_0807ECE4:
	ldr r0, _0807ECF8 @ =0x0006DBFF
	cmp r2, r0
	ble _0807ECEE
	movs r0, #0x1e
_0807ECEC:
	strh r0, [r5, #0x16]
_0807ECEE:
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807ECF8: .4byte 0x0006DBFF

	thumb_func_start sub_807ECFC
sub_807ECFC: @ 0x0807ECFC
	push {r4, r5, r6, lr}
	sub sp, #0x10
	adds r6, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	movs r1, #0xa2
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r4, r6, r0
	ldrh r1, [r4, #0x16]
	cmp r1, #0
	beq _0807ED20
	cmp r1, #0xa
	beq _0807ED30
	b _0807ED84
_0807ED20:
	str r1, [r4, #8]
	ldr r0, _0807ED2C @ =0xFFFFFD00
	str r0, [r4, #0xc]
	strh r1, [r4, #0x14]
	movs r0, #0xa
	b _0807ED82
	.align 2, 0
_0807ED2C: .4byte 0xFFFFFD00
_0807ED30:
	ldr r1, [r4]
	ldr r0, [r4, #8]
	adds r3, r1, r0
	str r3, [r4]
	ldr r1, [r4, #4]
	ldr r0, [r4, #0xc]
	adds r2, r1, r0
	str r2, [r4, #4]
	adds r0, #0x40
	str r0, [r4, #0xc]
	ldrh r0, [r4, #0x14]
	adds r0, #1
	movs r5, #0
	strh r0, [r4, #0x14]
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _0807ED72
	lsls r1, r3, #8
	asrs r1, r1, #0x10
	lsls r2, r2, #8
	asrs r2, r2, #0x10
	movs r3, #0xc0
	lsls r3, r3, #2
	str r5, [sp]
	movs r0, #0x1e
	str r0, [sp, #4]
	str r5, [sp, #8]
	ldr r0, [r6, #0x18]
	str r0, [sp, #0xc]
	movs r0, #7
	bl sub_8079758
_0807ED72:
	ldr r0, [r4, #4]
	asrs r0, r0, #8
	movs r1, #0x96
	lsls r1, r1, #9
	cmp r0, r1
	ble _0807ED84
	movs r0, #0xfa
	lsls r0, r0, #2
_0807ED82:
	strh r0, [r4, #0x16]
_0807ED84:
	add sp, #0x10
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_807ED8C
sub_807ED8C: @ 0x0807ED8C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x10
	adds r5, r0, #0
	ldrh r1, [r5, #0x16]
	cmp r1, #0x6e
	bne _0807ED9E
	b _0807F200
_0807ED9E:
	cmp r1, #0x6e
	bgt _0807EDB6
	cmp r1, #1
	beq _0807EDFE
	cmp r1, #1
	bgt _0807EDB0
	cmp r1, #0
	beq _0807EDDA
	b _0807F200
_0807EDB0:
	cmp r1, #0x64
	beq _0807EE64
	b _0807F200
_0807EDB6:
	cmp r1, #0xd2
	bne _0807EDBC
	b _0807F010
_0807EDBC:
	cmp r1, #0xd2
	bgt _0807EDC8
	cmp r1, #0xc8
	bne _0807EDC6
	b _0807EF44
_0807EDC6:
	b _0807F200
_0807EDC8:
	cmp r1, #0xdc
	bne _0807EDCE
	b _0807F064
_0807EDCE:
	movs r0, #0xfa
	lsls r0, r0, #2
	cmp r1, r0
	bne _0807EDD8
	b _0807F1A0
_0807EDD8:
	b _0807F200
_0807EDDA:
	ldrb r0, [r5, #1]
	cmp r0, #4
	ble _0807EDE2
	b _0807F200
_0807EDE2:
	cmp r0, #1
	bge _0807EDE8
	b _0807F200
_0807EDE8:
	adds r0, r5, #0
	bl sub_807F228
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0807EDF6
	b _0807F200
_0807EDF6:
	adds r0, r5, #0
	bl sub_807F434
	b _0807F200
_0807EDFE:
	ldrh r0, [r5, #0x14]
	subs r0, #1
	strh r0, [r5, #0x14]
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	cmp r4, #0
	beq _0807EE0E
	b _0807F200
_0807EE0E:
	adds r0, r5, #0
	movs r1, #1
	bl sub_807BE58
	ldrb r0, [r5]
	cmp r0, #0
	beq _0807EE34
	movs r0, #0x8a
	lsls r0, r0, #2
	adds r2, r5, r0
	ldr r1, _0807EE30 @ =gUnknown_080D5C38
	ldrh r0, [r1]
	strh r0, [r2, #0xc]
	ldrh r0, [r1, #2]
	strb r0, [r2, #0x1a]
	strh r4, [r5, #0x16]
	b _0807F200
	.align 2, 0
_0807EE30: .4byte gUnknown_080D5C38
_0807EE34:
	ldr r1, _0807EE48 @ =gStageData
	ldrb r0, [r1, #3]
	cmp r0, #5
	bne _0807EE58
	ldrb r0, [r1, #6]
	cmp r0, #0
	beq _0807EE4C
	movs r0, #0x6e
	strh r0, [r5, #0x16]
	b _0807F200
	.align 2, 0
_0807EE48: .4byte gStageData
_0807EE4C:
	adds r0, r1, #0
	adds r0, #0xae
	ldrh r1, [r0]
	movs r0, #1
	bl sub_8027674
_0807EE58:
	adds r0, r5, #0
	bl sub_8081C08
	movs r0, #0x64
	strh r0, [r5, #0x16]
	b _0807F200
_0807EE64:
	ldrh r0, [r5, #0x14]
	subs r0, #1
	strh r0, [r5, #0x14]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0807EE72
	b _0807F200
_0807EE72:
	movs r3, #0
	ldr r4, _0807EEA8 @ =gPlayers
_0807EE76:
	lsls r0, r3, #2
	adds r0, r0, r3
	lsls r0, r0, #2
	adds r0, r0, r3
	lsls r0, r0, #4
	adds r2, r0, r4
	ldr r0, [r2, #4]
	movs r1, #0x80
	lsls r1, r1, #1
	ands r0, r1
	cmp r0, #0
	beq _0807EEAC
	adds r0, r2, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	movs r1, #0x1c
	ands r1, r0
	cmp r1, #4
	beq _0807EEA0
	cmp r1, #0xc
	bne _0807EEAC
_0807EEA0:
	movs r0, #4
	strh r0, [r5, #0x14]
	b _0807F200
	.align 2, 0
_0807EEA8: .4byte gPlayers
_0807EEAC:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #1
	bls _0807EE76
	ldr r1, _0807EEE8 @ =gStageData
	movs r0, #4
	strb r0, [r1, #4]
	adds r0, r5, #0
	movs r1, #0xa
	bl sub_807BE58
	movs r0, #0x80
	lsls r0, r0, #4
	movs r3, #1
	rsbs r3, r3, #0
	movs r1, #0xd3
	str r1, [sp]
	movs r1, #4
	movs r2, #0
	bl sub_805256C
	ldrb r0, [r5]
	cmp r0, #0
	beq _0807EEEC
	subs r0, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	b _0807EEEE
	.align 2, 0
_0807EEE8: .4byte gStageData
_0807EEEC:
	movs r1, #0
_0807EEEE:
	ldr r0, _0807EF38 @ =gUnknown_080D5C48
	adds r0, r1, r0
	ldrb r0, [r0]
	movs r1, #0
	strh r0, [r5, #8]
	strh r1, [r5, #0xc]
	movs r0, #5
	strb r0, [r5, #1]
	adds r0, r5, #0
	movs r2, #0xb
	bl sub_807DB00
	adds r0, r5, #0
	movs r1, #1
	movs r2, #0xb
	bl sub_807DB00
	movs r1, #0x8a
	lsls r1, r1, #2
	adds r2, r5, r1
	ldr r1, _0807EF3C @ =gUnknown_080D5C38
	ldrh r0, [r1, #0xc]
	strh r0, [r2, #0xc]
	ldrh r0, [r1, #0xe]
	strb r0, [r2, #0x1a]
	ldr r0, _0807EF40 @ =0x00000221
	bl m4aSongNumStart
	movs r0, #0x96
	bl sub_807FB7C
	movs r0, #0
	bl sub_807FB7C
	movs r0, #0xc8
	strh r0, [r5, #0x16]
	b _0807F200
	.align 2, 0
_0807EF38: .4byte gUnknown_080D5C48
_0807EF3C: .4byte gUnknown_080D5C38
_0807EF40: .4byte 0x00000221
_0807EF44:
	ldrh r1, [r5, #0x14]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0807EFC4
	ldr r3, _0807EFF8 @ =gPseudoRandom
	ldr r0, [r3]
	ldr r2, _0807EFFC @ =0x00196225
	muls r0, r2, r0
	ldr r1, _0807F000 @ =0x3C6EF35F
	adds r0, r0, r1
	ldr r7, _0807F004 @ =0x000003FF
	ands r7, r0
	muls r0, r2, r0
	adds r0, r0, r1
	str r0, [r3]
	movs r1, #0x30
	bl __umodsi3
	adds r2, r0, #0
	ldr r1, _0807F008 @ =gSineTable
	movs r3, #0x80
	lsls r3, r3, #1
	adds r0, r7, r3
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r4, #0
	ldrsh r0, [r0, r4]
	muls r0, r2, r0
	lsrs r4, r0, #6
	lsls r0, r7, #1
	adds r0, r0, r1
	movs r6, #0
	ldrsh r0, [r0, r6]
	muls r0, r2, r0
	lsrs r6, r0, #6
	movs r1, #0x8e
	lsls r1, r1, #1
	adds r0, r5, r1
	ldr r1, [r0]
	adds r1, r1, r4
	lsls r1, r1, #8
	asrs r1, r1, #0x10
	movs r2, #0x90
	lsls r2, r2, #1
	adds r0, r5, r2
	ldr r2, [r0]
	adds r2, r2, r6
	asrs r2, r2, #8
	subs r2, #0x30
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	movs r3, #0xc0
	lsls r3, r3, #2
	str r7, [sp]
	movs r0, #0x1e
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	ldr r0, [r5, #0x18]
	str r0, [sp, #0xc]
	movs r0, #7
	bl sub_8079758
_0807EFC4:
	ldrh r0, [r5, #0x14]
	adds r0, #1
	strh r0, [r5, #0x14]
	movs r1, #0x3f
	ands r0, r1
	cmp r0, #0
	bne _0807EFD8
	ldr r0, _0807F00C @ =0x00000221
	bl m4aSongNumStart
_0807EFD8:
	movs r3, #0x97
	lsls r3, r3, #1
	adds r0, r5, r3
	ldrh r0, [r0]
	cmp r0, #0
	beq _0807EFE6
	b _0807F200
_0807EFE6:
	movs r0, #0xd2
	strh r0, [r5, #0x16]
	movs r0, #0x3c
	strh r0, [r5, #0x14]
	movs r0, #0xa
	bl sub_807FB7C
	b _0807F200
	.align 2, 0
_0807EFF8: .4byte gPseudoRandom
_0807EFFC: .4byte 0x00196225
_0807F000: .4byte 0x3C6EF35F
_0807F004: .4byte 0x000003FF
_0807F008: .4byte gSineTable
_0807F00C: .4byte 0x00000221
_0807F010:
	movs r1, #0
	ldr r3, _0807F058 @ =gPlayers
	movs r2, #0xb4
	lsls r2, r2, #1
_0807F018:
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r3
	adds r0, #0x52
	strh r2, [r0]
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #3
	bls _0807F018
	ldrh r0, [r5, #0x14]
	subs r0, #1
	strh r0, [r5, #0x14]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0807F040
	b _0807F200
_0807F040:
	movs r0, #0xb4
	strh r0, [r5, #0x14]
	movs r0, #0xdc
	strh r0, [r5, #0x16]
	ldr r0, _0807F05C @ =0x00000221
	bl m4aSongNumStart
	ldr r1, _0807F060 @ =gUnknown_03001CF0
	movs r0, #0xa0
	lsls r0, r0, #1
	strh r0, [r1, #6]
	b _0807F200
	.align 2, 0
_0807F058: .4byte gPlayers
_0807F05C: .4byte 0x00000221
_0807F060: .4byte gUnknown_03001CF0
_0807F064:
	movs r1, #0
	ldr r3, _0807F14C @ =gPlayers
	movs r2, #0xb4
	lsls r2, r2, #1
_0807F06C:
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r3
	adds r0, #0x52
	strh r2, [r0]
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #3
	bls _0807F06C
	ldrh r1, [r5, #0x14]
	movs r4, #1
	mov r8, r4
	mov r0, r8
	ands r0, r1
	cmp r0, #0
	beq _0807F120
	ldr r4, _0807F150 @ =gPseudoRandom
	ldr r0, [r4]
	ldr r3, _0807F154 @ =0x00196225
	adds r1, r0, #0
	muls r1, r3, r1
	ldr r2, _0807F158 @ =0x3C6EF35F
	adds r1, r1, r2
	movs r0, #0xff
	ands r0, r1
	movs r6, #0xa0
	lsls r6, r6, #2
	adds r7, r0, r6
	adds r0, r1, #0
	muls r0, r3, r0
	adds r0, r0, r2
	str r0, [r4]
	movs r1, #0x30
	bl __umodsi3
	adds r2, r0, #0
	movs r0, #3
	adds r3, r2, #0
	ands r3, r0
	lsls r3, r3, #8
	ldr r1, _0807F15C @ =gSineTable
	movs r4, #0x80
	lsls r4, r4, #1
	adds r0, r7, r4
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r6, #0
	ldrsh r0, [r0, r6]
	muls r0, r2, r0
	lsrs r4, r0, #6
	lsls r0, r7, #1
	adds r0, r0, r1
	movs r1, #0
	ldrsh r0, [r0, r1]
	muls r0, r2, r0
	lsrs r6, r0, #6
	movs r2, #0x8e
	lsls r2, r2, #1
	adds r0, r5, r2
	ldr r1, [r0]
	adds r1, r1, r4
	lsls r1, r1, #8
	asrs r1, r1, #0x10
	movs r4, #0x90
	lsls r4, r4, #1
	adds r0, r5, r4
	ldr r2, [r0]
	adds r2, r2, r6
	asrs r2, r2, #8
	subs r2, #0x60
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	movs r6, #0x80
	lsls r6, r6, #3
	adds r0, r6, #0
	orrs r3, r0
	str r7, [sp]
	movs r0, #0x1e
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	ldr r0, [r5, #0x18]
	str r0, [sp, #0xc]
	movs r0, #7
	bl sub_8079758
_0807F120:
	ldrh r1, [r5, #0x14]
	movs r0, #0x3f
	ands r0, r1
	cmp r0, #0
	bne _0807F130
	ldr r0, _0807F160 @ =0x00000221
	bl m4aSongNumStart
_0807F130:
	movs r1, #0x14
	ldrsh r0, [r5, r1]
	ldrh r3, [r5, #0x14]
	cmp r0, #0x3c
	bne _0807F16C
	ldr r1, _0807F164 @ =gBldRegs
	movs r2, #0
	ldr r0, _0807F168 @ =0x00003FBF
	strh r0, [r1]
	movs r0, #8
	strh r0, [r1, #2]
	strh r2, [r1, #4]
	b _0807F184
	.align 2, 0
_0807F14C: .4byte gPlayers
_0807F150: .4byte gPseudoRandom
_0807F154: .4byte 0x00196225
_0807F158: .4byte 0x3C6EF35F
_0807F15C: .4byte gSineTable
_0807F160: .4byte 0x00000221
_0807F164: .4byte gBldRegs
_0807F168: .4byte 0x00003FBF
_0807F16C:
	cmp r0, #0x3b
	bgt _0807F184
	mov r0, r8
	ands r0, r3
	cmp r0, #0
	beq _0807F184
	ldr r1, _0807F19C @ =gBldRegs
	ldrh r0, [r1, #4]
	cmp r0, #0x10
	beq _0807F184
	adds r0, #1
	strh r0, [r1, #4]
_0807F184:
	subs r0, r3, #1
	strh r0, [r5, #0x14]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0807F200
	movs r0, #0x3c
	strh r0, [r5, #0x14]
	movs r0, #0xfa
	lsls r0, r0, #2
	strh r0, [r5, #0x16]
	b _0807F200
	.align 2, 0
_0807F19C: .4byte gBldRegs
_0807F1A0:
	ldrh r0, [r5, #0x14]
	subs r0, #1
	strh r0, [r5, #0x14]
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	bne _0807F200
	movs r0, #1
	strh r0, [r5, #8]
	strh r1, [r5, #0xc]
	ldr r0, _0807F20C @ =gStageData
	ldrb r0, [r0, #3]
	cmp r0, #0
	bne _0807F1F8
	ldr r4, _0807F210 @ =gPlayers
	movs r3, #0xaa
	lsls r3, r3, #1
	adds r2, r4, r3
	ldr r0, [r2]
	ldr r1, _0807F214 @ =0xFFFFFEFF
	ands r0, r1
	str r0, [r2]
	movs r6, #0xa8
	lsls r6, r6, #1
	adds r0, r4, r6
	ldr r1, _0807F218 @ =Player_8005380
	bl SetPlayerCallback
	movs r0, #0xb0
	lsls r0, r0, #1
	adds r1, r4, r0
	ldr r0, [r4, #0x10]
	str r0, [r1]
	movs r2, #0xb2
	lsls r2, r2, #1
	adds r1, r4, r2
	ldr r0, [r4, #0x14]
	str r0, [r1]
	adds r0, r4, #0
	adds r0, #0x27
	ldrb r0, [r0]
	ldr r3, _0807F21C @ =0x00000177
	adds r1, r4, r3
	strb r0, [r1]
_0807F1F8:
	ldr r0, _0807F220 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0807F224 @ =sub_807F568
	str r0, [r1, #8]
_0807F200:
	add sp, #0x10
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807F20C: .4byte gStageData
_0807F210: .4byte gPlayers
_0807F214: .4byte 0xFFFFFEFF
_0807F218: .4byte Player_8005380
_0807F21C: .4byte 0x00000177
_0807F220: .4byte gCurTask
_0807F224: .4byte sub_807F568

	thumb_func_start sub_807F228
sub_807F228: @ 0x0807F228
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov sb, r0
	movs r0, #0
	mov sl, r0
	movs r0, #0x94
	lsls r0, r0, #2
	add r0, sb
	mov r8, r0
	movs r0, #0x98
	lsls r0, r0, #1
	add r0, sb
	ldr r0, [r0]
	movs r1, #0x9a
	lsls r1, r1, #1
	add r1, sb
	ldr r1, [r1]
	bl sub_8004D68
	ldr r2, _0807F2FC @ =gPlayers
	ldr r0, _0807F300 @ =gStageData
	ldrb r1, [r0, #6]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r1, r0, r2
	adds r0, r1, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	cmp r0, #1
	beq _0807F298
	adds r0, r1, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	lsls r1, r1, #0x1e
	lsrs r1, r1, #0x1e
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r2
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	cmp r0, #1
	bne _0807F2A6
_0807F298:
	mov r0, r8
	bl sub_807A1DC
	cmp r0, #1
	bne _0807F2A6
	movs r0, #1
	mov sl, r0
_0807F2A6:
	movs r7, #0
_0807F2A8:
	lsls r0, r7, #2
	adds r0, r0, r7
	lsls r0, r0, #2
	adds r0, r0, r7
	lsls r0, r0, #4
	ldr r1, _0807F2FC @ =gPlayers
	adds r4, r0, r1
	adds r0, r4, #0
	bl sub_802C080
	cmp r0, #0
	bne _0807F316
	mov r0, r8
	ldr r1, [r0, #0x20]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	beq _0807F316
	movs r6, #0x98
	lsls r6, r6, #1
	add r6, sb
	ldr r1, [r6]
	asrs r1, r1, #8
	movs r5, #0x9a
	lsls r5, r5, #1
	add r5, sb
	ldr r2, [r5]
	asrs r2, r2, #8
	str r4, [sp]
	mov r0, r8
	movs r3, #0
	bl sub_8020E3C
	cmp r0, #1
	bne _0807F304
	movs r0, #1
	mov sl, r0
	adds r0, r4, #0
	bl sub_80044CC
	b _0807F316
	.align 2, 0
_0807F2FC: .4byte gPlayers
_0807F300: .4byte gStageData
_0807F304:
	ldr r1, [r6]
	asrs r1, r1, #8
	ldr r2, [r5]
	asrs r2, r2, #8
	str r4, [sp]
	mov r0, r8
	movs r3, #0
	bl sub_8020CE0
_0807F316:
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #1
	bls _0807F2A8
	mov r0, sl
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_807F334
sub_807F334: @ 0x0807F334
	push {r4, r5, r6, r7, lr}
	mov ip, r0
	adds r6, r1, #0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	cmp r2, #1
	beq _0807F382
	cmp r2, #1
	ble _0807F34E
	cmp r2, #2
	beq _0807F3B6
_0807F34E:
	cmp r3, #0
	bne _0807F366
	mov r1, ip
	adds r1, #0x24
	movs r0, #0xf3
	strb r0, [r1]
	adds r1, #1
	movs r0, #0xed
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	b _0807F378
_0807F366:
	mov r1, ip
	adds r1, #0x24
	movs r0, #0xf8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0xed
	strb r0, [r1]
	adds r1, #1
	movs r0, #0xd
_0807F378:
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x1e
	strb r0, [r1]
	b _0807F42C
_0807F382:
	cmp r3, #0
	bne _0807F39A
	mov r1, ip
	adds r1, #0x24
	movs r0, #0xe2
	strb r0, [r1]
	adds r1, #1
	movs r0, #0xf3
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x13
	b _0807F3AC
_0807F39A:
	mov r1, ip
	adds r1, #0x24
	movs r0, #0xed
	strb r0, [r1]
	adds r1, #1
	movs r0, #0xf3
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x1e
_0807F3AC:
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	strb r0, [r1]
	b _0807F42C
_0807F3B6:
	cmp r3, #0
	bne _0807F3D2
	mov r4, ip
	adds r4, #0x24
	movs r0, #0xe2
	strb r0, [r4]
	mov r3, ip
	adds r3, #0x25
	movs r0, #0xf3
	strb r0, [r3]
	mov r2, ip
	adds r2, #0x26
	movs r0, #0x13
	b _0807F3E8
_0807F3D2:
	mov r4, ip
	adds r4, #0x24
	movs r0, #0xed
	strb r0, [r4]
	mov r3, ip
	adds r3, #0x25
	movs r0, #0xf3
	strb r0, [r3]
	mov r2, ip
	adds r2, #0x26
	movs r0, #0x1e
_0807F3E8:
	strb r0, [r2]
	mov r1, ip
	adds r1, #0x27
	movs r0, #8
	strb r0, [r1]
	adds r5, r1, #0
	movs r1, #0
	ldrsb r1, [r4, r1]
	movs r7, #2
	ldrsh r0, [r6, r7]
	muls r0, r1, r0
	asrs r0, r0, #8
	strb r0, [r4]
	movs r1, #0
	ldrsb r1, [r3, r1]
	movs r4, #4
	ldrsh r0, [r6, r4]
	muls r0, r1, r0
	asrs r0, r0, #8
	strb r0, [r3]
	movs r1, #0
	ldrsb r1, [r2, r1]
	movs r7, #2
	ldrsh r0, [r6, r7]
	muls r0, r1, r0
	asrs r0, r0, #8
	strb r0, [r2]
	movs r1, #0
	ldrsb r1, [r5, r1]
	movs r2, #4
	ldrsh r0, [r6, r2]
	muls r0, r1, r0
	asrs r0, r0, #8
	strb r0, [r5]
_0807F42C:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_807F434
sub_807F434: @ 0x0807F434
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0x78
	strh r0, [r4, #0x14]
	adds r0, r4, #0
	movs r1, #0
	bl sub_807BE58
	movs r0, #0x8a
	lsls r0, r0, #2
	adds r2, r4, r0
	ldr r1, _0807F494 @ =gUnknown_080D5C38
	ldrh r0, [r1, #8]
	strh r0, [r2, #0xc]
	ldrh r0, [r1, #0xa]
	strb r0, [r2, #0x1a]
	ldr r0, _0807F498 @ =0x000004F4
	movs r1, #0x14
	ldrsh r2, [r4, r1]
	movs r1, #0
	movs r3, #0
	bl sub_8078DB0
	ldr r0, _0807F49C @ =0x000004F5
	movs r1, #0x14
	ldrsh r2, [r4, r1]
	movs r1, #0
	movs r3, #0
	bl sub_8078DB0
	ldrb r0, [r4]
	subs r1, r0, #1
	strb r1, [r4]
	movs r0, #1
	strh r0, [r4, #0x16]
	ldr r0, _0807F4A0 @ =gStageData
	ldrb r0, [r0, #1]
	cmp r0, #0
	bne _0807F4A4
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #4
	bne _0807F4B2
	movs r0, #0x37
	bl sub_80299D4
	b _0807F4B2
	.align 2, 0
_0807F494: .4byte gUnknown_080D5C38
_0807F498: .4byte 0x000004F4
_0807F49C: .4byte 0x000004F5
_0807F4A0: .4byte gStageData
_0807F4A4:
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #3
	bne _0807F4B2
	movs r0, #0x37
	bl sub_80299D4
_0807F4B2:
	movs r0, #0xeb
	bl m4aSongNumStart
	bl sub_807A468
	ldr r1, _0807F4DC @ =gStageData
	ldrb r0, [r1, #3]
	cmp r0, #5
	bne _0807F4E8
	ldrb r0, [r1, #6]
	cmp r0, #0
	bne _0807F4E0
	ldrb r0, [r4]
	cmp r0, #0
	beq _0807F4E8
	adds r1, r0, #0
	movs r0, #3
	bl sub_8027674
	b _0807F4E8
	.align 2, 0
_0807F4DC: .4byte gStageData
_0807F4E0:
	ldrb r1, [r4]
	movs r0, #4
	bl sub_8027674
_0807F4E8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807F4F0
sub_0807F4F0: @ 0x0807F4F0
	push {r4, r5, lr}
	ldr r5, _0807F538 @ =gStageData
	adds r1, r5, #0
	adds r1, #0x88
	ldr r1, [r1]
	ldrh r4, [r1, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r3, r4, r1
	ldrb r2, [r0, #2]
	movs r1, #0x7f
	ands r1, r2
	ldrb r2, [r0, #3]
	ldrb r0, [r0, #4]
	lsls r0, r0, #8
	orrs r2, r0
	adds r0, r2, #0
	cmp r1, #1
	bne _0807F544
	movs r0, #0
	strb r0, [r3]
	adds r0, r5, #0
	adds r0, #0xae
	strh r2, [r0]
	movs r0, #0x3c
	strh r0, [r3, #0x14]
	ldr r0, _0807F53C @ =0x03000228
	adds r2, r4, r0
	ldr r1, _0807F540 @ =gUnknown_080D5C38
	ldrh r0, [r1]
	strh r0, [r2, #0xc]
	ldrh r0, [r1, #2]
	strb r0, [r2, #0x1a]
	movs r0, #0x64
	strh r0, [r3, #0x16]
	b _0807F560
	.align 2, 0
_0807F538: .4byte gStageData
_0807F53C: .4byte 0x03000228
_0807F540: .4byte gUnknown_080D5C38
_0807F544:
	cmp r1, #1
	blt _0807F560
	cmp r1, #4
	bgt _0807F560
	cmp r1, #3
	blt _0807F560
	ldrb r1, [r3]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r1, r0
	beq _0807F560
	adds r0, r3, #0
	bl sub_807F434
_0807F560:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_807F568
sub_807F568: @ 0x0807F568
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r0, _0807F61C @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r7, r1, r0
	ldr r0, _0807F620 @ =gStageData
	adds r0, #0xac
	movs r1, #0
	strh r1, [r0]
	adds r0, r7, #0
	bl sub_807C14C
	movs r4, #0
	ldr r5, _0807F624 @ =gCamera
_0807F58C:
	lsls r3, r4, #2
	adds r3, r3, r4
	lsls r0, r3, #3
	adds r0, #0x7c
	adds r0, r7, r0
	lsls r3, r3, #2
	adds r1, r7, #0
	adds r1, #0x2c
	adds r1, r1, r3
	ldr r1, [r1]
	asrs r1, r1, #8
	ldr r2, [r5]
	subs r1, r1, r2
	strh r1, [r0, #0x10]
	adds r1, r7, #0
	adds r1, #0x30
	adds r1, r1, r3
	ldr r1, [r1]
	asrs r1, r1, #8
	ldr r2, [r5, #4]
	subs r1, r1, r2
	strh r1, [r0, #0x12]
	bl DisplaySprite
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #3
	bls _0807F58C
	ldrh r1, [r7, #0xc]
	ldr r0, _0807F628 @ =0x00000406
	cmp r1, r0
	beq _0807F5F0
	movs r1, #0
	ldr r3, _0807F62C @ =gPlayers
	movs r2, #0xb4
	lsls r2, r2, #1
_0807F5D6:
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r3
	adds r0, #0x52
	strh r2, [r0]
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #3
	bls _0807F5D6
_0807F5F0:
	ldrh r1, [r7, #0xc]
	ldr r2, _0807F630 @ =0x000007DA
	cmp r1, r2
	bne _0807F5FA
	b _0807F904
_0807F5FA:
	cmp r1, r2
	bgt _0807F684
	ldr r4, _0807F634 @ =0x000003E9
	cmp r1, r4
	bne _0807F606
	b _0807F80C
_0807F606:
	cmp r1, r4
	bgt _0807F64A
	cmp r1, #0xa
	bne _0807F610
	b _0807F7BC
_0807F610:
	cmp r1, #0xa
	bgt _0807F638
	cmp r1, #0
	beq _0807F700
	b _0807FB6C
	.align 2, 0
_0807F61C: .4byte gCurTask
_0807F620: .4byte gStageData
_0807F624: .4byte gCamera
_0807F628: .4byte 0x00000406
_0807F62C: .4byte gPlayers
_0807F630: .4byte 0x000007DA
_0807F634: .4byte 0x000003E9
_0807F638:
	cmp r1, #0x64
	bne _0807F63E
	b _0807F7C2
_0807F63E:
	movs r0, #0xfa
	lsls r0, r0, #2
	cmp r1, r0
	bne _0807F648
	b _0807F7DA
_0807F648:
	b _0807FB6C
_0807F64A:
	ldr r0, _0807F66C @ =0x00000406
	mov r8, r0
	cmp r1, r8
	bne _0807F654
	b _0807FB6C
_0807F654:
	cmp r1, r8
	bgt _0807F670
	subs r0, #0x14
	cmp r1, r0
	bne _0807F660
	b _0807F834
_0807F660:
	adds r0, #0xa
	cmp r1, r0
	bne _0807F668
	b _0807F84A
_0807F668:
	b _0807FB6C
	.align 2, 0
_0807F66C: .4byte 0x00000406
_0807F670:
	movs r0, #0xfa
	lsls r0, r0, #3
	cmp r1, r0
	bne _0807F67A
	b _0807F898
_0807F67A:
	adds r0, #1
	cmp r1, r0
	bne _0807F682
	b _0807F8DC
_0807F682:
	b _0807FB6C
_0807F684:
	ldr r4, _0807F6A8 @ =0x00000802
	cmp r1, r4
	bne _0807F68C
	b _0807FAA0
_0807F68C:
	cmp r1, r4
	bgt _0807F6CC
	ldr r5, _0807F6AC @ =0x000007EE
	cmp r1, r5
	bne _0807F698
	b _0807F994
_0807F698:
	cmp r1, r5
	bgt _0807F6B4
	ldr r0, _0807F6B0 @ =0x000007E4
	cmp r1, r0
	bne _0807F6A4
	b _0807F934
_0807F6A4:
	b _0807FB6C
	.align 2, 0
_0807F6A8: .4byte 0x00000802
_0807F6AC: .4byte 0x000007EE
_0807F6B0: .4byte 0x000007E4
_0807F6B4:
	ldr r0, _0807F6C8 @ =0x000007F3
	cmp r1, r0
	bne _0807F6BC
	b _0807F9EC
_0807F6BC:
	adds r0, #5
	cmp r1, r0
	bne _0807F6C4
	b _0807FA2A
_0807F6C4:
	b _0807FB6C
	.align 2, 0
_0807F6C8: .4byte 0x000007F3
_0807F6CC:
	movs r5, #0x82
	lsls r5, r5, #4
	cmp r1, r5
	bne _0807F6D6
	b _0807FB40
_0807F6D6:
	cmp r1, r5
	bgt _0807F6F0
	ldr r0, _0807F6EC @ =0x0000080C
	cmp r1, r0
	bne _0807F6E2
	b _0807FAD6
_0807F6E2:
	adds r0, #0xa
	cmp r1, r0
	bne _0807F6EA
	b _0807FAFC
_0807F6EA:
	b _0807FB6C
	.align 2, 0
_0807F6EC: .4byte 0x0000080C
_0807F6F0:
	ldr r0, _0807F6FC @ =0x000008FC
	cmp r1, r0
	bne _0807F6F8
	b _0807FB58
_0807F6F8:
	b _0807FB6C
	.align 2, 0
_0807F6FC: .4byte 0x000008FC
_0807F700:
	ldr r6, _0807F7A8 @ =gStageData
	ldrb r1, [r6, #6]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	ldr r2, _0807F7AC @ =gPlayers
	adds r0, r0, r2
	adds r1, r0, #0
	adds r1, #0x4a
	movs r5, #0
	strh r5, [r1]
	adds r0, #0x2b
	ldrb r1, [r0]
	lsls r1, r1, #0x1e
	lsrs r1, r1, #0x1e
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r2
	adds r0, #0x4a
	strh r5, [r0]
	ldr r0, [r7, #0x18]
	cmp r0, #0
	beq _0807F73E
	bl VramFree
	str r5, [r7, #0x18]
_0807F73E:
	movs r1, #0x9e
	lsls r1, r1, #2
	adds r4, r7, r1
	ldr r0, [r4]
	cmp r0, #0
	beq _0807F750
	bl VramFree
	str r5, [r4]
_0807F750:
	movs r2, #0xa8
	lsls r2, r2, #2
	adds r4, r7, r2
	ldr r0, [r4]
	cmp r0, #0
	beq _0807F762
	bl VramFree
	str r5, [r4]
_0807F762:
	movs r0, #0x94
	lsls r0, r0, #2
	adds r4, r7, r0
	ldr r0, [r4]
	cmp r0, #0
	beq _0807F774
	bl VramFree
	str r5, [r4]
_0807F774:
	movs r1, #0x8a
	lsls r1, r1, #2
	adds r4, r7, r1
	ldr r0, [r4]
	cmp r0, #0
	beq _0807F786
	bl VramFree
	str r5, [r4]
_0807F786:
	ldr r2, _0807F7B0 @ =gDispCnt
	ldrh r1, [r2]
	ldr r0, _0807F7B4 @ =0x00009EFF
	ands r0, r1
	strh r0, [r2]
	ldr r0, _0807F7B8 @ =gBgScrollRegs
	strh r5, [r0]
	strh r5, [r0, #2]
	bl sub_80299FC
	movs r0, #9
	strb r0, [r6, #4]
	movs r0, #7
	strb r0, [r6, #9]
	movs r0, #0xa
	strh r0, [r7, #0xc]
	b _0807FB6C
	.align 2, 0
_0807F7A8: .4byte gStageData
_0807F7AC: .4byte gPlayers
_0807F7B0: .4byte gDispCnt
_0807F7B4: .4byte 0x00009EFF
_0807F7B8: .4byte gBgScrollRegs
_0807F7BC:
	movs r0, #0x64
	strh r0, [r7, #0xc]
	b _0807FB6C
_0807F7C2:
	bl sub_80561A8
	cmp r0, #0
	beq _0807F7D2
	movs r0, #0xfa
	lsls r0, r0, #3
	strh r0, [r7, #0xc]
	b _0807FB6C
_0807F7D2:
	movs r0, #0xfa
	lsls r0, r0, #2
	strh r0, [r7, #0xc]
	b _0807FB6C
_0807F7DA:
	movs r0, #1
	bl sub_807FB7C
	movs r0, #0
	bl sub_808178C
	movs r0, #0
	bl sub_80808E8
	movs r0, #2
	bl sub_807FB7C
	ldr r0, _0807F808 @ =gCamera
	ldr r1, [r0, #0x1c]
	movs r2, #0x96
	lsls r2, r2, #2
	adds r1, r1, r2
	str r1, [r0, #0x1c]
	movs r0, #0x96
	lsls r0, r0, #3
	strh r0, [r7, #8]
	strh r4, [r7, #0xc]
	b _0807FB6C
	.align 2, 0
_0807F808: .4byte gCamera
_0807F80C:
	ldr r1, _0807F830 @ =gBldRegs
	ldrh r0, [r1, #4]
	subs r0, #1
	strh r0, [r1, #4]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	beq _0807F81E
	b _0807FB6C
_0807F81E:
	strh r0, [r1]
	strh r0, [r1, #2]
	strh r0, [r1, #4]
	movs r0, #0x96
	lsls r0, r0, #3
	strh r0, [r7, #8]
	subs r0, #0xbe
	strh r0, [r7, #0xc]
	b _0807FB6C
	.align 2, 0
_0807F830: .4byte gBldRegs
_0807F834:
	ldrh r0, [r7, #8]
	subs r0, #1
	strh r0, [r7, #8]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0807F842
	b _0807FB6C
_0807F842:
	movs r0, #0xff
	lsls r0, r0, #2
	strh r0, [r7, #0xc]
	b _0807FB6C
_0807F84A:
	ldr r0, _0807F88C @ =gStageData
	ldrb r1, [r0, #6]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	ldr r4, _0807F890 @ =gPlayers
	adds r6, r0, r4
	ldr r5, _0807F894 @ =Player_8005E80
	adds r0, r6, #0
	adds r1, r5, #0
	bl SetPlayerCallback
	adds r0, r6, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	lsls r1, r1, #0x1e
	lsrs r1, r1, #0x1e
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r6, r0, r4
	adds r0, r6, #0
	adds r1, r5, #0
	bl SetPlayerCallback
	mov r4, r8
	strh r4, [r7, #0xc]
	b _0807FB6C
	.align 2, 0
_0807F88C: .4byte gStageData
_0807F890: .4byte gPlayers
_0807F894: .4byte Player_8005E80
_0807F898:
	movs r0, #1
	bl sub_807FB7C
	movs r0, #1
	bl sub_80808E8
	str r0, [r7, #0x28]
	movs r0, #1
	bl sub_808178C
	movs r0, #2
	bl sub_807FB7C
	ldr r1, _0807F8D4 @ =gCamera
	ldr r0, [r1, #0x1c]
	movs r2, #0xf0
	lsls r2, r2, #1
	adds r0, r0, r2
	str r0, [r1, #0x1c]
	ldr r0, [r1, #4]
	str r0, [r1, #0x10]
	movs r0, #0xb8
	lsls r0, r0, #2
	strh r0, [r7, #8]
	bl m4aMPlayAllStop
	ldr r0, _0807F8D8 @ =0x000007D1
	strh r0, [r7, #0xc]
	b _0807FB6C
	.align 2, 0
_0807F8D4: .4byte gCamera
_0807F8D8: .4byte 0x000007D1
_0807F8DC:
	ldr r1, _0807F900 @ =gBldRegs
	ldrh r0, [r1, #4]
	subs r0, #1
	strh r0, [r1, #4]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	beq _0807F8EE
	b _0807FB6C
_0807F8EE:
	strh r0, [r1]
	strh r0, [r1, #2]
	strh r0, [r1, #4]
	movs r0, #0xb8
	lsls r0, r0, #2
	strh r0, [r7, #8]
	strh r2, [r7, #0xc]
	b _0807FB6C
	.align 2, 0
_0807F900: .4byte gBldRegs
_0807F904:
	ldrh r0, [r7, #8]
	subs r0, #1
	strh r0, [r7, #8]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0807F912
	b _0807FB6C
_0807F912:
	ldr r1, _0807F92C @ =gCamera
	ldr r0, [r1, #0x1c]
	subs r0, #0xf0
	str r0, [r1, #0x18]
	movs r0, #0xc8
	strh r0, [r7, #8]
	movs r0, #0x3c
	bl m4aSongNumStart
	ldr r0, _0807F930 @ =0x000007E4
	strh r0, [r7, #0xc]
	b _0807FB6C
	.align 2, 0
_0807F92C: .4byte gCamera
_0807F930: .4byte 0x000007E4
_0807F934:
	ldrh r0, [r7, #8]
	subs r0, #1
	strh r0, [r7, #8]
	lsls r0, r0, #0x10
	asrs r3, r0, #0x10
	cmp r3, #0
	beq _0807F944
	b _0807FB6C
_0807F944:
	ldr r2, _0807F97C @ =gDispCnt
	ldrh r0, [r2]
	movs r4, #0x80
	lsls r4, r4, #6
	adds r1, r4, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _0807F980 @ =gWinRegs
	ldr r0, _0807F984 @ =0x00007778
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	movs r0, #0x3c
	strh r0, [r1, #8]
	movs r0, #0x1c
	strh r0, [r1, #0xa]
	ldr r1, _0807F988 @ =gBldRegs
	ldr r0, _0807F98C @ =0x00003FBF
	strh r0, [r1]
	movs r0, #8
	strh r0, [r1, #2]
	strh r0, [r1, #4]
	strh r3, [r7, #0xa]
	strh r5, [r7, #0xc]
	ldr r0, _0807F990 @ =0x0000029B
	bl m4aSongNumStart
	b _0807FB6C
	.align 2, 0
_0807F97C: .4byte gDispCnt
_0807F980: .4byte gWinRegs
_0807F984: .4byte 0x00007778
_0807F988: .4byte gBldRegs
_0807F98C: .4byte 0x00003FBF
_0807F990: .4byte 0x0000029B
_0807F994:
	ldrh r0, [r7, #0xa]
	adds r0, #0x20
	strh r0, [r7, #0xa]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xff
	ble _0807F9B2
	movs r0, #0x78
	strh r0, [r7, #8]
	movs r0, #2
	strh r0, [r7, #0xa]
	movs r0, #0
	strb r0, [r7, #0xe]
	ldr r0, _0807F9E0 @ =0x000007F3
	strh r0, [r7, #0xc]
_0807F9B2:
	ldr r1, _0807F9E4 @ =gSineTable
	movs r2, #0xa
	ldrsh r0, [r7, r2]
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r4, #0
	ldrsh r0, [r0, r4]
	cmp r0, #0
	bge _0807F9C8
	ldr r1, _0807F9E8 @ =0x000001FF
	adds r0, r0, r1
_0807F9C8:
	asrs r1, r0, #9
	movs r0, #0x78
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r0, #0
	bge _0807F9D8
	movs r4, #0
_0807F9D8:
	adds r0, r1, #0
	adds r0, #0x78
	b _0807FA72
	.align 2, 0
_0807F9E0: .4byte 0x000007F3
_0807F9E4: .4byte gSineTable
_0807F9E8: .4byte 0x000001FF
_0807F9EC:
	movs r4, #0x58
	movs r3, #0x98
	ldrh r0, [r7, #8]
	subs r0, #1
	strh r0, [r7, #8]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bne _0807FA08
	strh r0, [r7, #0xa]
	movs r0, #0xff
	lsls r0, r0, #3
	strh r0, [r7, #0xc]
	b _0807FA7E
_0807FA08:
	ldrh r0, [r7, #0xa]
	subs r0, #1
	strh r0, [r7, #0xa]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0807FA7E
	movs r0, #2
	strh r0, [r7, #0xa]
	ldrb r0, [r7, #0xe]
	movs r1, #1
	eors r0, r1
	strb r0, [r7, #0xe]
	cmp r0, #0
	bne _0807FA7E
	movs r4, #0x60
	movs r3, #0x90
	b _0807FA7E
_0807FA2A:
	ldrh r0, [r7, #0xa]
	adds r0, #8
	strh r0, [r7, #0xa]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xff
	ble _0807FA44
	movs r0, #4
	strh r0, [r7, #8]
	ldr r0, _0807FA90 @ =0x0000029B
	bl m4aSongNumStop
	strh r4, [r7, #0xc]
_0807FA44:
	ldr r1, _0807FA94 @ =gSineTable
	movs r2, #0xa
	ldrsh r0, [r7, r2]
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r4, #0
	ldrsh r1, [r0, r4]
	movs r0, #0x58
	muls r0, r1, r0
	cmp r0, #0
	bge _0807FA5E
	ldr r1, _0807FA98 @ =0x00003FFF
	adds r0, r0, r1
_0807FA5E:
	asrs r1, r0, #0xe
	movs r0, #0x58
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r0, #0
	bge _0807FA6E
	movs r4, #0
_0807FA6E:
	adds r0, r1, #0
	adds r0, #0x98
_0807FA72:
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xf0
	ble _0807FA7E
	movs r3, #0xf0
_0807FA7E:
	ldr r2, _0807FA9C @ =gWinRegs
	lsls r1, r4, #0x10
	asrs r1, r1, #8
	lsls r0, r3, #0x10
	asrs r0, r0, #0x10
	orrs r0, r1
	strh r0, [r2]
	b _0807FB6C
	.align 2, 0
_0807FA90: .4byte 0x0000029B
_0807FA94: .4byte gSineTable
_0807FA98: .4byte 0x00003FFF
_0807FA9C: .4byte gWinRegs
_0807FAA0:
	ldrh r0, [r7, #8]
	subs r0, #1
	strh r0, [r7, #8]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0807FB6C
	ldr r1, _0807FAC8 @ =gBldRegs
	ldrh r0, [r1, #4]
	adds r0, #1
	strh r0, [r1, #4]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x10
	bne _0807FAD0
	movs r0, #0x78
	strh r0, [r7, #8]
	ldr r0, _0807FACC @ =0x0000080C
	strh r0, [r7, #0xc]
	b _0807FB6C
	.align 2, 0
_0807FAC8: .4byte gBldRegs
_0807FACC: .4byte 0x0000080C
_0807FAD0:
	movs r0, #4
	strh r0, [r7, #8]
	b _0807FB6C
_0807FAD6:
	ldrh r0, [r7, #8]
	subs r0, #1
	strh r0, [r7, #8]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0807FB6C
	ldr r0, [r7, #0x28]
	bl sub_8081DF4
	ldr r0, _0807FAF4 @ =0x0000023F
	bl m4aSongNumStart
	ldr r0, _0807FAF8 @ =0x00000816
	strh r0, [r7, #0xc]
	b _0807FB6C
	.align 2, 0
_0807FAF4: .4byte 0x0000023F
_0807FAF8: .4byte 0x00000816
_0807FAFC:
	ldr r4, _0807FB2C @ =gBldRegs
	ldrh r0, [r4, #4]
	subs r0, #1
	strh r0, [r4, #4]
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	cmp r3, #0
	bne _0807FB6C
	ldr r2, _0807FB30 @ =gDispCnt
	ldrh r1, [r2]
	ldr r0, _0807FB34 @ =0x0000DFFF
	ands r0, r1
	strh r0, [r2]
	ldr r0, _0807FB38 @ =gWinRegs
	strh r3, [r0, #8]
	strh r3, [r0, #0xa]
	strh r3, [r4]
	strh r3, [r4, #2]
	strh r3, [r4, #4]
	ldr r0, _0807FB3C @ =0x0000078A
	strh r0, [r7, #8]
	strh r5, [r7, #0xc]
	b _0807FB6C
	.align 2, 0
_0807FB2C: .4byte gBldRegs
_0807FB30: .4byte gDispCnt
_0807FB34: .4byte 0x0000DFFF
_0807FB38: .4byte gWinRegs
_0807FB3C: .4byte 0x0000078A
_0807FB40:
	ldrh r0, [r7, #8]
	subs r0, #1
	strh r0, [r7, #8]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0807FB6C
	ldr r0, _0807FB54 @ =0x000008FC
	strh r0, [r7, #0xc]
	b _0807FB6C
	.align 2, 0
_0807FB54: .4byte 0x000008FC
_0807FB58:
	movs r0, #0x58
	bl m4aSongNumStart
	bl sub_8002508
	ldr r0, _0807FB78 @ =0x0000091A
	strh r0, [r7, #0xc]
	movs r0, #0x1e
	bl sub_807FB7C
_0807FB6C:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807FB78: .4byte 0x0000091A

	thumb_func_start sub_807FB7C
sub_807FB7C: @ 0x0807FB7C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	adds r4, r3, #0
	ldr r7, _0807FBE0 @ =gPlayers
	movs r0, #0x2b
	adds r0, r0, r7
	mov sb, r0
	ldrb r1, [r0]
	lsls r1, r1, #0x1e
	lsrs r1, r1, #0x1e
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r6, r0, r7
	ldr r2, [r7, #4]
	movs r1, #0x80
	lsls r1, r1, #1
	mov r8, r1
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _0807FBB6
	b _0807FE36
_0807FBB6:
	ldr r5, [r6, #4]
	ands r5, r1
	cmp r5, #0
	beq _0807FBC0
	b _0807FE36
_0807FBC0:
	cmp r3, #0x1e
	bne _0807FBC6
	b _0807FD64
_0807FBC6:
	cmp r3, #0x1e
	bgt _0807FBFC
	cmp r3, #0xa
	beq _0807FCBC
	cmp r3, #0xa
	bgt _0807FBEA
	cmp r3, #1
	beq _0807FC44
	cmp r3, #1
	bgt _0807FBE4
	cmp r3, #0
	beq _0807FC3A
	b _0807FE36
	.align 2, 0
_0807FBE0: .4byte gPlayers
_0807FBE4:
	cmp r3, #2
	beq _0807FCB0
	b _0807FE36
_0807FBEA:
	cmp r3, #0xc
	bne _0807FBF0
	b _0807FE36
_0807FBF0:
	cmp r3, #0xc
	blt _0807FCC8
	cmp r3, #0x14
	bne _0807FBFA
	b _0807FD40
_0807FBFA:
	b _0807FE36
_0807FBFC:
	cmp r3, #0xc8
	bne _0807FC02
	b _0807FDE2
_0807FC02:
	cmp r3, #0xc8
	bgt _0807FC20
	cmp r3, #0x96
	bne _0807FC0C
	b _0807FD88
_0807FC0C:
	cmp r3, #0x96
	bgt _0807FC18
	cmp r3, #0x64
	bne _0807FC16
	b _0807FD78
_0807FC16:
	b _0807FE36
_0807FC18:
	cmp r3, #0xa0
	bne _0807FC1E
	b _0807FDA0
_0807FC1E:
	b _0807FE36
_0807FC20:
	cmp r3, #0xdc
	bne _0807FC26
	b _0807FE0C
_0807FC26:
	cmp r3, #0xdc
	bgt _0807FC32
	cmp r3, #0xd2
	bne _0807FC30
	b _0807FDFC
_0807FC30:
	b _0807FE36
_0807FC32:
	cmp r4, #0xfa
	bne _0807FC38
	b _0807FE24
_0807FC38:
	b _0807FE36
_0807FC3A:
	movs r1, #0x80
	lsls r1, r1, #0x14
	orrs r2, r1
	str r2, [r7, #4]
	b _0807FCA2
_0807FC44:
	ldr r0, _0807FCAC @ =gStageData
	adds r0, #0xac
	strh r5, [r0]
	movs r1, #2
	rsbs r1, r1, #0
	ands r2, r1
	str r2, [r7, #4]
	ldr r0, [r6, #4]
	ands r0, r1
	subs r1, #0xff
	ands r0, r1
	str r0, [r6, #4]
	ldr r0, [r6, #8]
	ands r0, r1
	str r0, [r6, #8]
	strh r5, [r7, #0x1c]
	strh r5, [r7, #0x18]
	strh r5, [r7, #0x1a]
	adds r0, r7, #0
	adds r0, #0x4a
	strh r5, [r0]
	adds r0, r7, #0
	bl Player_8005380
	movs r0, #0xcf
	lsls r0, r0, #0xb
	str r0, [r7, #0x10]
	movs r4, #0xb3
	lsls r4, r4, #8
	str r4, [r7, #0x14]
	strh r5, [r6, #0x1c]
	strh r5, [r6, #0x18]
	strh r5, [r6, #0x1a]
	adds r0, r6, #0
	adds r0, #0x4a
	strh r5, [r0]
	adds r0, r6, #0
	bl Player_8005380
	movs r0, #0xcb
	lsls r0, r0, #0xb
	str r0, [r6, #0x10]
	str r4, [r6, #0x14]
	ldr r0, [r7, #4]
	movs r1, #0x20
	orrs r0, r1
	str r0, [r7, #4]
_0807FCA2:
	ldr r0, [r6, #4]
	orrs r0, r1
	str r0, [r6, #4]
	b _0807FE36
	.align 2, 0
_0807FCAC: .4byte gStageData
_0807FCB0:
	ldr r1, _0807FCB8 @ =0xF7FFFFFF
	ands r2, r1
	str r2, [r7, #4]
	b _0807FD38
	.align 2, 0
_0807FCB8: .4byte 0xF7FFFFFF
_0807FCBC:
	ldr r1, _0807FCC4 @ =gStageData
	movs r0, #9
	strb r0, [r1, #4]
	b _0807FD52
	.align 2, 0
_0807FCC4: .4byte gStageData
_0807FCC8:
	movs r4, #0xc0
	lsls r4, r4, #0x10
	ands r2, r4
	cmp r2, #0
	beq _0807FCE6
	adds r0, r7, #0
	bl sub_8016F28
	adds r2, r7, #0
	adds r2, #0x2c
	ldrb r1, [r2]
	movs r0, #5
	rsbs r0, r0, #0
	ands r0, r1
	strb r0, [r2]
_0807FCE6:
	ldr r0, [r6, #4]
	ands r0, r4
	cmp r0, #0
	beq _0807FD02
	adds r0, r6, #0
	bl sub_8016F28
	adds r2, r6, #0
	adds r2, #0x2c
	ldrb r1, [r2]
	movs r0, #5
	rsbs r0, r0, #0
	ands r0, r1
	strb r0, [r2]
_0807FD02:
	ldr r0, [r7, #4]
	mov r1, r8
	ands r0, r1
	cmp r0, #0
	bne _0807FD12
	adds r0, r7, #0
	bl Player_8005380
_0807FD12:
	ldr r0, [r6, #4]
	mov r1, r8
	ands r0, r1
	cmp r0, #0
	beq _0807FD28
	mov r0, sb
	ldrb r1, [r0]
	movs r0, #0x1c
	ands r0, r1
	cmp r0, #8
	bne _0807FD2E
_0807FD28:
	adds r0, r6, #0
	bl Player_8005380
_0807FD2E:
	ldr r0, [r7, #4]
	movs r1, #0x21
	rsbs r1, r1, #0
	ands r0, r1
	str r0, [r7, #4]
_0807FD38:
	ldr r0, [r6, #4]
	ands r0, r1
	str r0, [r6, #4]
	b _0807FE36
_0807FD40:
	ldr r1, _0807FD5C @ =gStageData
	movs r0, #3
	strb r0, [r1, #4]
	ldr r1, _0807FD60 @ =0xF7FFFFFF
	ands r2, r1
	str r2, [r7, #4]
	ldr r0, [r6, #4]
	ands r0, r1
	str r0, [r6, #4]
_0807FD52:
	strh r5, [r7, #0x1e]
	strh r5, [r7, #0x20]
	strh r5, [r6, #0x1e]
	strh r5, [r6, #0x20]
	b _0807FE36
	.align 2, 0
_0807FD5C: .4byte gStageData
_0807FD60: .4byte 0xF7FFFFFF
_0807FD64:
	adds r2, r6, #0
	adds r2, #0x2a
	ldrb r1, [r2]
	movs r0, #0x10
	rsbs r0, r0, #0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	strb r0, [r2]
	b _0807FE36
_0807FD78:
	ldr r1, _0807FD84 @ =sub_8081810
	adds r0, r7, #0
	bl SetPlayerCallback
	b _0807FE36
	.align 2, 0
_0807FD84: .4byte sub_8081810
_0807FD88:
	bl sub_807C5D0
	ldr r1, [r7]
	ldr r0, _0807FD9C @ =sub_8081A3C
	cmp r1, r0
	bne _0807FE36
	adds r0, r7, #0
	bl Player_8005380
	b _0807FE36
	.align 2, 0
_0807FD9C: .4byte sub_8081A3C
_0807FDA0:
	movs r4, #0xc0
	lsls r4, r4, #0x10
	ands r2, r4
	cmp r2, #0
	beq _0807FDBE
	adds r0, r7, #0
	bl sub_8016F28
	adds r2, r7, #0
	adds r2, #0x2c
	ldrb r1, [r2]
	movs r0, #5
	rsbs r0, r0, #0
	ands r0, r1
	strb r0, [r2]
_0807FDBE:
	ldr r0, [r6, #4]
	ands r0, r4
	cmp r0, #0
	beq _0807FE36
	adds r0, r6, #0
	bl sub_8016F28
	adds r2, r6, #0
	adds r2, #0x2c
	ldrb r1, [r2]
	movs r0, #5
	rsbs r0, r0, #0
	ands r0, r1
	strb r0, [r2]
	adds r0, r6, #0
	bl Player_8005380
	b _0807FE36
_0807FDE2:
	strh r5, [r6, #0x18]
	strh r5, [r6, #0x1a]
	ldr r4, _0807FDF8 @ =sub_808183C
	adds r0, r6, #0
	adds r1, r4, #0
	bl SetPlayerCallback
	adds r0, r6, #0
	bl _call_via_r4
	b _0807FE36
	.align 2, 0
_0807FDF8: .4byte sub_808183C
_0807FDFC:
	movs r0, #1
	orrs r2, r0
	str r2, [r7, #4]
	ldr r4, _0807FE08 @ =sub_8081840
	b _0807FE0E
	.align 2, 0
_0807FE08: .4byte sub_8081840
_0807FE0C:
	ldr r4, _0807FE20 @ =sub_808186C
_0807FE0E:
	adds r0, r7, #0
	adds r1, r4, #0
	bl SetPlayerCallback
	adds r0, r6, #0
	adds r1, r4, #0
	bl SetPlayerCallback
	b _0807FE36
	.align 2, 0
_0807FE20: .4byte sub_808186C
_0807FE24:
	ldr r4, _0807FE44 @ =Player_8005380
	adds r0, r7, #0
	adds r1, r4, #0
	bl SetPlayerCallback
	adds r0, r6, #0
	adds r1, r4, #0
	bl SetPlayerCallback
_0807FE36:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807FE44: .4byte Player_8005380

	thumb_func_start sub_807FE48
sub_807FE48: @ 0x0807FE48
	push {r4, r5, r6, lr}
	ldr r0, _0807FEA8 @ =gCurTask
	ldr r0, [r0]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r5, r0
	ldr r6, _0807FEAC @ =gPlayers
	adds r0, r6, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	lsrs r0, r0, #0x1e
	lsls r4, r0, #2
	adds r4, r4, r0
	lsls r4, r4, #2
	adds r4, r4, r0
	lsls r4, r4, #4
	adds r4, r4, r6
	movs r0, #0
	strh r0, [r5, #0x16]
	strh r0, [r5, #0x14]
	ldr r1, _0807FEB0 @ =gUnknown_08E2ED48
	ldrb r0, [r5]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r5, #0
	bl _call_via_r1
	ldrh r1, [r6, #0x1e]
	ldrh r0, [r5, #0x14]
	strh r0, [r6, #0x1e]
	eors r1, r0
	ands r1, r0
	strh r1, [r6, #0x20]
	ldrh r1, [r4, #0x1e]
	ldrh r0, [r5, #0x16]
	strh r0, [r4, #0x1e]
	eors r1, r0
	ands r1, r0
	strh r1, [r4, #0x20]
	adds r0, r5, #0
	bl sub_8080548
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0807FEA8: .4byte gCurTask
_0807FEAC: .4byte gPlayers
_0807FEB0: .4byte gUnknown_08E2ED48

	thumb_func_start sub_807FEB4
sub_807FEB4: @ 0x0807FEB4
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r3, _0807FEEC @ =gPlayers
	adds r0, r3, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	lsls r1, r1, #0x1e
	lsrs r1, r1, #0x1e
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r2, r0, r3
	ldrh r1, [r4, #0x12]
	cmp r1, #0xc8
	bne _0807FED8
	b _08080076
_0807FED8:
	cmp r1, #0xc8
	bgt _0807FEFC
	cmp r1, #0xa
	beq _0807FF2E
	cmp r1, #0xa
	bgt _0807FEF0
	cmp r1, #0
	beq _0807FF24
	b _08080076
	.align 2, 0
_0807FEEC: .4byte gPlayers
_0807FEF0:
	cmp r1, #0x64
	beq _0807FF44
	cmp r1, #0x82
	bne _0807FEFA
	b _08080054
_0807FEFA:
	b _08080076
_0807FEFC:
	movs r5, #0x9b
	lsls r5, r5, #1
	cmp r1, r5
	beq _0807FFB0
	cmp r1, r5
	bgt _0807FF12
	movs r0, #0x96
	lsls r0, r0, #1
	cmp r1, r0
	beq _0807FF70
	b _08080076
_0807FF12:
	movs r0, #0xa0
	lsls r0, r0, #1
	cmp r1, r0
	beq _0807FFEC
	adds r0, #0xa
	cmp r1, r0
	bne _0807FF22
	b _0808001C
_0807FF22:
	b _08080076
_0807FF24:
	movs r0, #0xb9
	lsls r0, r0, #1
	strh r0, [r4, #0x10]
	movs r0, #0xa
	b _08080074
_0807FF2E:
	ldrh r0, [r4, #0x10]
	subs r0, #1
	strh r0, [r4, #0x10]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0807FF3C
	b _08080076
_0807FF3C:
	movs r0, #0xb4
	strh r0, [r4, #0x10]
	movs r0, #0x64
	b _08080074
_0807FF44:
	ldrh r0, [r4, #0x14]
	movs r3, #0x10
	movs r2, #0
	orrs r0, r3
	strh r0, [r4, #0x14]
	ldrh r1, [r4, #0x10]
	movs r5, #0x10
	ldrsh r0, [r4, r5]
	cmp r0, #0x95
	bgt _0807FF5E
	ldrh r0, [r4, #0x16]
	orrs r0, r3
	strh r0, [r4, #0x16]
_0807FF5E:
	subs r0, r1, #1
	strh r0, [r4, #0x10]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0807FF6A
	b _08080076
_0807FF6A:
	movs r0, #0x96
	lsls r0, r0, #1
	b _08080074
_0807FF70:
	ldr r0, [r3, #0x10]
	asrs r2, r0, #8
	ldr r0, _0807FFA8 @ =0x00000898
	cmp r2, r0
	ble _0807FF82
	ldrh r1, [r4, #0x14]
	movs r0, #0x20
	orrs r0, r1
	strh r0, [r4, #0x14]
_0807FF82:
	ldr r0, _0807FFAC @ =0x000008CB
	cmp r2, r0
	ble _08080076
	ldr r0, [r3, #4]
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _08080076
	movs r1, #0
	movs r0, #0x3c
	strh r0, [r4, #0x10]
	strh r1, [r3, #0x1c]
	strh r1, [r3, #0x18]
	strh r1, [r3, #0x1a]
	adds r0, r3, #0
	bl Player_8005380
	strh r5, [r4, #0x12]
	b _08080076
	.align 2, 0
_0807FFA8: .4byte 0x00000898
_0807FFAC: .4byte 0x000008CB
_0807FFB0:
	ldrh r0, [r4, #0x10]
	subs r0, #1
	movs r3, #0
	strh r0, [r4, #0x10]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0807FFC8
	movs r0, #0x14
	strh r0, [r4, #0x10]
	movs r0, #0xa0
	lsls r0, r0, #1
	strh r0, [r4, #0x12]
_0807FFC8:
	ldr r0, [r2, #0x10]
	asrs r0, r0, #8
	ldr r1, _0807FFE8 @ =0x00000897
	cmp r0, r1
	ble _08080076
	movs r1, #0x18
	ldrsh r0, [r2, r1]
	cmp r0, #0
	beq _08080076
	strh r3, [r2, #0x1c]
	strh r3, [r2, #0x18]
	strh r3, [r2, #0x1a]
	adds r0, r2, #0
	bl Player_8005380
	b _08080076
	.align 2, 0
_0807FFE8: .4byte 0x00000897
_0807FFEC:
	ldrh r1, [r4, #0x14]
	movs r0, #0x10
	adds r2, r0, #0
	orrs r2, r1
	strh r2, [r4, #0x14]
	ldrh r0, [r4, #0x10]
	subs r0, #1
	strh r0, [r4, #0x10]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _08080076
	ldr r0, [r3, #0xc]
	movs r1, #0x40
	orrs r0, r1
	str r0, [r3, #0xc]
	ldr r0, _08080018 @ =gStageData
	ldrh r0, [r0, #0x14]
	orrs r2, r0
	strh r2, [r4, #0x14]
	movs r0, #0xa5
	lsls r0, r0, #1
	b _08080074
	.align 2, 0
_08080018: .4byte gStageData
_0808001C:
	ldrh r1, [r4, #0x14]
	movs r0, #0x10
	orrs r0, r1
	ldr r1, _0808004C @ =gStageData
	ldrh r1, [r1, #0x14]
	orrs r0, r1
	strh r0, [r4, #0x14]
	ldr r0, [r3, #0x10]
	asrs r0, r0, #8
	ldr r1, _08080050 @ =0x0000090F
	cmp r0, r1
	ble _08080076
	movs r5, #0x18
	ldrsh r0, [r3, r5]
	rsbs r0, r0, #0
	strh r0, [r3, #0x18]
	movs r0, #0
	strh r0, [r3, #0x1a]
	adds r0, r3, #0
	bl sub_80044CC
	movs r0, #0x82
	b _08080074
	.align 2, 0
_0808004C: .4byte gStageData
_08080050: .4byte 0x0000090F
_08080054:
	ldr r0, [r3, #0x14]
	asrs r0, r0, #8
	cmp r0, #0xb0
	ble _08080076
	movs r1, #0x1a
	ldrsh r0, [r3, r1]
	cmp r0, #0
	ble _08080076
	movs r0, #0
	strh r0, [r3, #0x1c]
	strh r0, [r3, #0x18]
	strh r0, [r3, #0x1a]
	adds r0, r3, #0
	bl Player_8005380
	movs r0, #0xc8
_08080074:
	strh r0, [r4, #0x12]
_08080076:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_808007C
sub_808007C: @ 0x0808007C
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	ldr r5, _080800B4 @ =gPlayers
	ldr r1, _080800B8 @ =gStageData
	movs r2, #0
	movs r0, #9
	strb r0, [r1, #4]
	ldrh r1, [r4, #0x12]
	cmp r1, #0xbe
	bne _08080092
	b _08080374
_08080092:
	cmp r1, #0xbe
	bgt _080800EE
	cmp r1, #0x82
	bne _0808009C
	b _08080200
_0808009C:
	cmp r1, #0x82
	bgt _080800C8
	cmp r1, #0x64
	beq _0808017E
	cmp r1, #0x64
	bgt _080800BC
	cmp r1, #0
	beq _0808015A
	cmp r1, #0xa
	beq _08080168
	b _080804AC
	.align 2, 0
_080800B4: .4byte gPlayers
_080800B8: .4byte gStageData
_080800BC:
	cmp r1, #0x6e
	beq _080801A8
	cmp r1, #0x78
	bne _080800C6
	b _080801D4
_080800C6:
	b _080804AC
_080800C8:
	cmp r1, #0xab
	bne _080800CE
	b _08080318
_080800CE:
	cmp r1, #0xab
	bgt _080800E0
	cmp r1, #0x8c
	bne _080800D8
	b _08080230
_080800D8:
	cmp r1, #0xaa
	bne _080800DE
	b _080802F8
_080800DE:
	b _080804AC
_080800E0:
	cmp r1, #0xac
	bne _080800E6
	b _08080334
_080800E6:
	cmp r1, #0xb4
	bne _080800EC
	b _08080358
_080800EC:
	b _080804AC
_080800EE:
	cmp r1, #0xfa
	bne _080800F4
	b _0808048C
_080800F4:
	cmp r1, #0xfa
	bgt _0808011E
	cmp r1, #0xdc
	bne _080800FE
	b _080803FC
_080800FE:
	cmp r1, #0xdc
	bgt _08080110
	cmp r1, #0xc8
	bne _08080108
	b _080803A0
_08080108:
	cmp r1, #0xd2
	bne _0808010E
	b _080803D8
_0808010E:
	b _080804AC
_08080110:
	cmp r1, #0xe6
	bne _08080116
	b _0808043C
_08080116:
	cmp r1, #0xf0
	bne _0808011C
	b _08080460
_0808011C:
	b _080804AC
_0808011E:
	movs r2, #0x82
	lsls r2, r2, #2
	cmp r1, r2
	bne _08080128
	b _0808028E
_08080128:
	cmp r1, r2
	bgt _08080140
	movs r0, #0xfa
	lsls r0, r0, #1
	cmp r1, r0
	bne _08080136
	b _08080250
_08080136:
	adds r0, #0xa
	cmp r1, r0
	bne _0808013E
	b _08080274
_0808013E:
	b _080804AC
_08080140:
	movs r0, #0x96
	lsls r0, r0, #2
	cmp r1, r0
	bne _0808014A
	b _08080420
_0808014A:
	cmp r1, r0
	ble _08080150
	b _080804AC
_08080150:
	subs r0, #0x46
	cmp r1, r0
	bne _08080158
	b _080802D0
_08080158:
	b _080804AC
_0808015A:
	ldr r0, _08080164 @ =0x00000181
	strh r0, [r4, #0x10]
	movs r0, #0xa
	b _080804AA
	.align 2, 0
_08080164: .4byte 0x00000181
_08080168:
	ldrh r0, [r4, #0x10]
	subs r0, #1
	strh r0, [r4, #0x10]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _08080176
	b _080804AC
_08080176:
	movs r0, #0x87
	strh r0, [r4, #0x10]
	movs r0, #0x64
	b _080804AA
_0808017E:
	ldrh r0, [r4, #0x14]
	movs r3, #0x10
	movs r2, #0
	orrs r0, r3
	strh r0, [r4, #0x14]
	ldrh r1, [r4, #0x10]
	movs r5, #0x10
	ldrsh r0, [r4, r5]
	cmp r0, #0x45
	bgt _08080198
	ldrh r0, [r4, #0x16]
	orrs r0, r3
	strh r0, [r4, #0x16]
_08080198:
	subs r0, r1, #1
	strh r0, [r4, #0x10]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _080801A4
	b _080804AC
_080801A4:
	movs r0, #0x6e
	b _080804AA
_080801A8:
	ldr r0, [r5, #0x10]
	asrs r0, r0, #8
	ldr r1, _080801D0 @ =0x0000085C
	cmp r0, r1
	bgt _080801B4
	b _080804AC
_080801B4:
	strh r2, [r5, #0x1c]
	strh r2, [r5, #0x18]
	strh r2, [r5, #0x1a]
	adds r0, r5, #0
	bl Player_8005380
	movs r0, #0xd6
	strh r0, [r4, #0x10]
	movs r0, #0x78
	strh r0, [r4, #0x12]
	movs r0, #0xc8
	bl sub_807FB7C
	b _080804AC
	.align 2, 0
_080801D0: .4byte 0x0000085C
_080801D4:
	ldrh r0, [r4, #0x10]
	subs r0, #1
	strh r0, [r4, #0x10]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _080801E2
	b _080804AC
_080801E2:
	ldr r1, _080801F8 @ =Player_8008CD0
	adds r0, r5, #0
	bl SetPlayerCallback
	ldr r0, _080801FC @ =0x0000029A
	bl m4aSongNumStart
	movs r0, #0xa
	strh r0, [r4, #0xc]
	movs r0, #0x82
	b _080804AA
	.align 2, 0
_080801F8: .4byte Player_8008CD0
_080801FC: .4byte 0x0000029A
_08080200:
	ldr r0, [r5, #0x10]
	asrs r0, r0, #8
	ldr r1, _0808022C @ =0x00000803
	cmp r0, r1
	ble _0808020C
	b _080804AC
_0808020C:
	ldr r0, [r5, #4]
	movs r1, #2
	rsbs r1, r1, #0
	ands r0, r1
	str r0, [r5, #4]
	strh r2, [r5, #0x1c]
	strh r2, [r5, #0x18]
	strh r2, [r5, #0x1a]
	adds r0, r5, #0
	adds r0, #0x4a
	strh r2, [r0]
	adds r0, r5, #0
	bl Player_8005380
	movs r0, #0x8c
	b _080804AA
	.align 2, 0
_0808022C: .4byte 0x00000803
_08080230:
	ldr r0, _0808024C @ =gBldRegs
	ldrh r0, [r0, #4]
	cmp r0, #0x10
	beq _0808023A
	b _080804AC
_0808023A:
	ldrh r1, [r4, #0x14]
	movs r0, #0x80
	orrs r0, r1
	strh r0, [r4, #0x14]
	movs r0, #0xd2
	lsls r0, r0, #1
	strh r0, [r4, #0x10]
	adds r0, #0x50
	b _080804AA
	.align 2, 0
_0808024C: .4byte gBldRegs
_08080250:
	ldrh r0, [r4, #0x10]
	subs r0, #1
	strh r0, [r4, #0x10]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0808025E
	b _080804AC
_0808025E:
	ldr r1, _08080270 @ =Player_8008CD0
	adds r0, r5, #0
	bl SetPlayerCallback
	movs r0, #0xb4
	strh r0, [r4, #0x10]
	movs r0, #0xff
	lsls r0, r0, #1
	b _080804AA
	.align 2, 0
_08080270: .4byte Player_8008CD0
_08080274:
	ldrh r0, [r4, #0x10]
	subs r0, #1
	strh r0, [r4, #0x10]
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	beq _08080284
	b _080804AC
_08080284:
	strh r2, [r4, #0x12]
	adds r0, r5, #0
	adds r0, #0x4a
	strh r1, [r0]
	b _080804AC
_0808028E:
	ldrh r1, [r4, #0x14]
	movs r0, #0x10
	movs r7, #0
	orrs r0, r1
	strh r0, [r4, #0x14]
	ldr r1, [r5, #0x10]
	asrs r1, r1, #8
	ldr r6, _080802C8 @ =gCamera
	ldr r0, [r6]
	adds r0, #0x78
	cmp r1, r0
	bge _080802A8
	b _080804AC
_080802A8:
	movs r0, #0x64
	bl sub_807FB7C
	ldr r0, [r6]
	adds r0, #0x78
	lsls r0, r0, #8
	str r0, [r5, #0x10]
	movs r0, #0x3c
	strh r0, [r4, #0x10]
	ldr r0, _080802CC @ =0x00000212
	strh r0, [r4, #0x12]
	movs r0, #0x73
	bl m4aSongNumStart
	b _080804AC
	.align 2, 0
_080802C8: .4byte gCamera
_080802CC: .4byte 0x00000212
_080802D0:
	ldrh r0, [r4, #0x10]
	subs r0, #1
	strh r0, [r4, #0x10]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _080802DE
	b _080804AC
_080802DE:
	movs r0, #0x93
	lsls r0, r0, #1
	strh r0, [r5, #0x30]
	adds r0, #0xba
	strh r0, [r4, #0x10]
	movs r0, #0xaa
	strh r0, [r4, #0x12]
	movs r0, #0x64
	strh r0, [r4, #0xc]
	movs r0, #0x3d
	bl m4aSongNumStart
	b _080804AC
_080802F8:
	ldrh r0, [r4, #0x10]
	subs r0, #1
	strh r0, [r4, #0x10]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _08080306
	b _080804AC
_08080306:
	ldr r0, _08080314 @ =0x00000127
	strh r0, [r5, #0x30]
	movs r0, #0x1e
	strh r0, [r4, #0x10]
	movs r0, #0xab
	b _080804AA
	.align 2, 0
_08080314: .4byte 0x00000127
_08080318:
	ldrh r0, [r4, #0x10]
	subs r0, #1
	strh r0, [r4, #0x10]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _08080326
	b _080804AC
_08080326:
	ldr r0, _08080330 @ =0x0000FF80
	strh r0, [r5, #0x1a]
	movs r0, #0xac
	b _080804AA
	.align 2, 0
_08080330: .4byte 0x0000FF80
_08080334:
	movs r1, #0x1a
	ldrsh r0, [r5, r1]
	ldr r1, [r5, #0x14]
	adds r1, r1, r0
	str r1, [r5, #0x14]
	asrs r1, r1, #8
	ldr r0, _08080354 @ =gCamera
	ldr r0, [r0, #4]
	adds r0, #0x64
	cmp r1, r0
	ble _0808034C
	b _080804AC
_0808034C:
	movs r0, #1
	strh r0, [r4, #0x10]
	movs r0, #0xb4
	b _080804AA
	.align 2, 0
_08080354: .4byte gCamera
_08080358:
	ldrh r0, [r4, #0x10]
	subs r0, #1
	strh r0, [r4, #0x10]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _08080366
	b _080804AC
_08080366:
	movs r0, #0x94
	lsls r0, r0, #1
	strh r0, [r5, #0x30]
	movs r0, #0x78
	strh r0, [r4, #0x10]
	movs r0, #0xbe
	b _080804AA
_08080374:
	ldrh r0, [r4, #0x10]
	subs r0, #1
	strh r0, [r4, #0x10]
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	beq _08080384
	b _080804AC
_08080384:
	ldr r1, _08080398 @ =gBldRegs
	ldr r0, _0808039C @ =0x00003FBF
	strh r0, [r1]
	movs r0, #8
	strh r0, [r1, #2]
	strh r2, [r1, #4]
	movs r0, #1
	strh r0, [r4, #0x10]
	movs r0, #0xc8
	b _080804AA
	.align 2, 0
_08080398: .4byte gBldRegs
_0808039C: .4byte 0x00003FBF
_080803A0:
	ldrh r0, [r4, #0x10]
	subs r0, #1
	strh r0, [r4, #0x10]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _080803AE
	b _080804AC
_080803AE:
	movs r0, #4
	strh r0, [r4, #0x10]
	ldr r1, _080803D4 @ =gBldRegs
	ldrh r0, [r1, #4]
	adds r0, #1
	strh r0, [r1, #4]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x10
	bne _080804AC
	movs r0, #0
	strb r0, [r4, #1]
	movs r0, #0xfa
	lsls r0, r0, #2
	strh r0, [r4, #0xc]
	movs r0, #0x3c
	strh r0, [r4, #0x10]
	movs r0, #0xd2
	b _080804AA
	.align 2, 0
_080803D4: .4byte gBldRegs
_080803D8:
	ldrh r0, [r4, #0x10]
	subs r0, #1
	strh r0, [r4, #0x10]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _080804AC
	ldr r0, _080803F4 @ =0x00000129
	strh r0, [r5, #0x30]
	movs r0, #0xdc
	strh r0, [r4, #0x12]
	ldr r0, _080803F8 @ =0x0000023F
	bl m4aSongNumStart
	b _080804AC
	.align 2, 0
_080803F4: .4byte 0x00000129
_080803F8: .4byte 0x0000023F
_080803FC:
	ldr r1, _0808041C @ =gBldRegs
	ldrh r0, [r1, #4]
	subs r0, #1
	strh r0, [r1, #4]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _080804AC
	strh r0, [r1]
	strh r0, [r1, #2]
	strh r0, [r1, #4]
	movs r0, #0x78
	strh r0, [r4, #0x10]
	movs r0, #0x96
	lsls r0, r0, #2
	b _080804AA
	.align 2, 0
_0808041C: .4byte gBldRegs
_08080420:
	ldrh r0, [r4, #0x10]
	subs r0, #1
	strh r0, [r4, #0x10]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _080804AC
	ldr r0, [r5, #4]
	movs r1, #1
	orrs r0, r1
	str r0, [r5, #4]
	movs r0, #0x78
	strh r0, [r4, #0x10]
	movs r0, #0xe6
	b _080804AA
_0808043C:
	ldrh r0, [r4, #0x10]
	subs r0, #1
	strh r0, [r4, #0x10]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _080804AC
	ldr r0, [r5, #4]
	movs r1, #2
	rsbs r1, r1, #0
	ands r0, r1
	str r0, [r5, #4]
	movs r0, #0x95
	lsls r0, r0, #1
	strh r0, [r5, #0x30]
	movs r0, #0x1e
	strh r0, [r4, #0x10]
	movs r0, #0xf0
	b _080804AA
_08080460:
	ldrh r0, [r4, #0x10]
	subs r0, #1
	strh r0, [r4, #0x10]
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	bne _080804AC
	ldr r0, _08080488 @ =0x0000012B
	strh r0, [r5, #0x30]
	strh r1, [r5, #0x18]
	movs r0, #0xfe
	lsls r0, r0, #8
	strh r0, [r5, #0x1a]
	movs r0, #0xfa
	strh r0, [r4, #0x12]
	movs r0, #0x70
	bl m4aSongNumStart
	b _080804AC
	.align 2, 0
_08080488: .4byte 0x0000012B
_0808048C:
	ldrh r0, [r5, #0x1a]
	subs r0, #0x2a
	strh r0, [r5, #0x1a]
	movs r0, #0x1a
	ldrsh r1, [r5, r0]
	ldr r0, [r5, #0x14]
	adds r0, r0, r1
	str r0, [r5, #0x14]
	asrs r0, r0, #8
	movs r1, #0x10
	rsbs r1, r1, #0
	cmp r0, r1
	bge _080804AC
	movs r0, #0x96
	lsls r0, r0, #1
_080804AA:
	strh r0, [r4, #0x12]
_080804AC:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80804B4
sub_80804B4: @ 0x080804B4
	push {r4, r5, r6, r7, lr}
	adds r3, r0, #0
	adds r2, r3, #0
	adds r2, #0xa8
	ldr r6, [r3, #0x18]
	movs r0, #0
	strb r0, [r3, #1]
	movs r5, #0
	movs r4, #0
	ldr r7, _08080544 @ =gUnknown_080D5CA8
	adds r0, r7, #4
	mov ip, r0
_080804CC:
	lsls r1, r5, #2
	adds r1, r1, r5
	lsls r1, r1, #2
	adds r0, r3, #0
	adds r0, #0x1c
	adds r0, r0, r1
	str r4, [r0]
	adds r0, r3, #0
	adds r0, #0x20
	adds r0, r0, r1
	str r4, [r0]
	adds r0, r3, #0
	adds r0, #0x24
	adds r0, r0, r1
	str r4, [r0]
	adds r0, r3, #0
	adds r0, #0x28
	adds r0, r0, r1
	str r4, [r0]
	adds r1, r3, r1
	movs r0, #1
	strh r0, [r1, #0x2c]
	strh r4, [r1, #0x2e]
	str r6, [r2]
	movs r0, #0xa0
	lsls r0, r0, #2
	strh r0, [r2, #0x14]
	lsls r1, r5, #1
	adds r1, r1, r5
	lsls r1, r1, #1
	adds r0, r1, r7
	ldrh r0, [r0]
	strh r0, [r2, #0xc]
	adds r0, r7, #2
	adds r0, r1, r0
	ldrh r0, [r0]
	strb r0, [r2, #0x1a]
	strh r4, [r2, #0x16]
	movs r0, #0xff
	strb r0, [r2, #0x1b]
	movs r0, #0x10
	strb r0, [r2, #0x1c]
	add r1, ip
	ldrh r0, [r1]
	strb r0, [r2, #0x1f]
	strh r4, [r2, #0x10]
	strh r4, [r2, #0x12]
	movs r0, #0x80
	lsls r0, r0, #5
	str r0, [r2, #8]
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	adds r2, #0x28
	adds r6, #0x80
	cmp r5, #6
	bls _080804CC
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08080544: .4byte gUnknown_080D5CA8

	thumb_func_start sub_8080548
sub_8080548: @ 0x08080548
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov ip, r0
	ldr r1, _08080574 @ =gPlayers
	ldrh r0, [r0, #0xc]
	cmp r0, #0x1e
	bne _08080560
	b _0808066C
_08080560:
	cmp r0, #0x1e
	bgt _08080578
	cmp r0, #0xa
	beq _08080592
	cmp r0, #0xa
	bgt _0808056E
	b _0808087A
_0808056E:
	cmp r0, #0x14
	beq _08080600
	b _0808087A
	.align 2, 0
_08080574: .4byte gPlayers
_08080578:
	cmp r0, #0x64
	bne _0808057E
	b _080806F4
_0808057E:
	cmp r0, #0x64
	bgt _0808058A
	cmp r0, #0x28
	bne _08080588
	b _080806B0
_08080588:
	b _0808087A
_0808058A:
	cmp r0, #0x6e
	bne _08080590
	b _080807AC
_08080590:
	b _0808087A
_08080592:
	movs r5, #0
	movs r0, #0x1c
	add r0, ip
	mov sb, r0
	movs r2, #0x20
	add r2, ip
	mov r8, r2
	ldr r7, [r1, #0x14]
	mov r6, ip
	adds r6, #0x24
	movs r3, #0x28
	add r3, ip
	mov sl, r3
	ldr r4, _080805F4 @ =gUnknown_080D5CD4
_080805AE:
	lsls r2, r5, #2
	adds r2, r2, r5
	lsls r2, r2, #2
	mov r0, sb
	adds r1, r0, r2
	ldr r3, _080805F8 @ =gCamera
	ldr r0, [r3]
	adds r0, #0x78
	lsls r0, r0, #8
	str r0, [r1]
	mov r1, r8
	adds r0, r1, r2
	str r7, [r0]
	adds r3, r6, r2
	lsls r1, r5, #3
	adds r0, r1, r4
	ldr r0, [r0]
	str r0, [r3]
	add r2, sl
	ldr r3, _080805FC @ =gUnknown_080D5CD8
	adds r1, r1, r3
	ldr r0, [r1]
	str r0, [r2]
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #6
	bls _080805AE
	movs r0, #1
	mov r1, ip
	strb r0, [r1, #1]
	movs r0, #0x14
	strh r0, [r1, #0xc]
	b _0808087A
	.align 2, 0
_080805F4: .4byte gUnknown_080D5CD4
_080805F8: .4byte gCamera
_080805FC: .4byte gUnknown_080D5CD8
_08080600:
	movs r5, #0
	movs r6, #0
	movs r2, #0x20
	add r2, ip
	mov r8, r2
_0808060A:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r3, r0, #2
	mov r0, r8
	adds r4, r0, r3
	ldr r0, [r4]
	asrs r0, r0, #8
	cmp r0, #0xbb
	ble _0808062A
	movs r0, #0xbc
	lsls r0, r0, #8
	str r0, [r4]
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	b _08080650
_0808062A:
	mov r2, ip
	adds r2, #0x1c
	adds r2, r2, r3
	mov r0, ip
	adds r0, #0x24
	adds r0, r0, r3
	ldr r1, [r2]
	ldr r0, [r0]
	adds r1, r1, r0
	str r1, [r2]
	mov r0, ip
	adds r0, #0x28
	adds r0, r0, r3
	ldr r1, [r0]
	adds r1, #0x2a
	str r1, [r0]
	ldr r0, [r4]
	adds r0, r0, r1
	str r0, [r4]
_08080650:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #6
	bls _0808060A
	cmp r6, #7
	beq _08080660
	b _0808087A
_08080660:
	movs r0, #0xb4
	mov r1, ip
	strh r0, [r1, #0xe]
	movs r0, #0x1e
	strh r0, [r1, #0xc]
	b _0808087A
_0808066C:
	mov r2, ip
	ldrh r0, [r2, #0xe]
	subs r0, #1
	strh r0, [r2, #0xe]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0808067C
	b _0808087A
_0808067C:
	movs r5, #0
	adds r2, #0x28
	ldr r3, _080806AC @ =gUnknown_080D5CD8
_08080682:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #2
	adds r1, r2, r0
	lsls r0, r5, #3
	adds r0, r0, r3
	ldr r0, [r0]
	cmp r0, #0
	bge _08080696
	adds r0, #7
_08080696:
	asrs r0, r0, #3
	str r0, [r1]
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #6
	bls _08080682
	movs r0, #0x28
	mov r3, ip
	strh r0, [r3, #0xc]
	b _0808087A
	.align 2, 0
_080806AC: .4byte gUnknown_080D5CD8
_080806B0:
	movs r5, #0
	ldr r6, _080806F0 @ =gBldRegs
	mov r4, ip
	adds r4, #0x20
	mov r3, ip
	adds r3, #0x28
_080806BC:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #2
	adds r2, r4, r0
	adds r0, r3, r0
	ldr r1, [r2]
	ldr r0, [r0]
	adds r1, r1, r0
	str r1, [r2]
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #6
	bls _080806BC
	ldrh r0, [r6, #4]
	cmp r0, #0x10
	beq _080806E0
	b _0808087A
_080806E0:
	movs r0, #0
	mov r1, ip
	strb r0, [r1, #1]
	movs r0, #0xfa
	lsls r0, r0, #2
	strh r0, [r1, #0xc]
	b _0808087A
	.align 2, 0
_080806F0: .4byte gBldRegs
_080806F4:
	movs r0, #0
	mov r2, ip
	strh r0, [r2, #2]
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r2, #8]
	lsls r0, r0, #2
	str r0, [r2, #4]
	ldr r1, _0808079C @ =gCamera
	ldr r0, [r1]
	adds r0, #0x78
	lsls r0, r0, #8
	str r0, [r2, #0x24]
	ldr r0, [r1, #4]
	adds r0, #0x68
	lsls r0, r0, #8
	str r0, [r2, #0x28]
	movs r5, #0
	movs r7, #0
	movs r3, #0x1c
	add r3, ip
	mov sb, r3
	movs r0, #0x20
	add r0, ip
	mov r8, r0
	ldr r1, _080807A0 @ =gSineTable
	mov sl, r1
	ldr r4, _080807A4 @ =0x00003FFF
_0808072C:
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r7, r2
	lsls r0, r0, #1
	add r0, sl
	movs r3, #0
	ldrsh r1, [r0, r3]
	mov r2, ip
	ldr r0, [r2, #4]
	muls r0, r1, r0
	cmp r0, #0
	bge _08080746
	adds r0, r0, r4
_08080746:
	asrs r6, r0, #0xe
	lsls r0, r7, #1
	add r0, sl
	movs r3, #0
	ldrsh r1, [r0, r3]
	mov r2, ip
	ldr r0, [r2, #8]
	muls r0, r1, r0
	cmp r0, #0
	bge _0808075C
	adds r0, r0, r4
_0808075C:
	asrs r3, r0, #0xe
	lsls r1, r5, #2
	adds r1, r1, r5
	lsls r1, r1, #2
	mov r0, sb
	adds r0, r0, r1
	str r0, [sp]
	mov r2, ip
	ldr r0, [r2, #0x24]
	adds r0, r6, r0
	ldr r2, [sp]
	str r0, [r2]
	add r1, r8
	mov r2, ip
	ldr r0, [r2, #0x28]
	adds r0, r3, r0
	str r0, [r1]
	adds r7, #0x92
	ldr r3, _080807A8 @ =0x000003FF
	adds r0, r3, #0
	ands r7, r0
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #6
	bls _0808072C
	movs r0, #1
	strb r0, [r2, #1]
	movs r0, #0x6e
	strh r0, [r2, #0xc]
	b _0808087A
	.align 2, 0
_0808079C: .4byte gCamera
_080807A0: .4byte gSineTable
_080807A4: .4byte 0x00003FFF
_080807A8: .4byte 0x000003FF
_080807AC:
	mov r1, ip
	ldrh r0, [r1, #2]
	subs r0, #8
	ldr r2, _08080850 @ =0x000003FF
	adds r1, r2, #0
	ands r0, r1
	mov r3, ip
	strh r0, [r3, #2]
	ldr r0, [r3, #8]
	subs r0, #0x40
	str r0, [r3, #8]
	asrs r0, r0, #8
	cmp r0, #8
	bgt _080807CE
	movs r0, #0x80
	lsls r0, r0, #4
	str r0, [r3, #8]
_080807CE:
	mov r1, ip
	ldr r0, [r1, #8]
	lsls r0, r0, #2
	str r0, [r1, #4]
	mov r4, ip
	adds r4, #0xa8
	movs r5, #0
	ldrh r7, [r1, #2]
	movs r2, #0x1c
	add r2, ip
	mov sb, r2
	movs r3, #0x20
	add r3, ip
	mov r8, r3
	ldr r0, _08080854 @ =0x00003FFF
	mov sl, r0
_080807EE:
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r7, r1
	lsls r0, r0, #1
	ldr r2, _08080858 @ =gSineTable
	adds r0, r0, r2
	movs r3, #0
	ldrsh r1, [r0, r3]
	mov r2, ip
	ldr r0, [r2, #4]
	muls r0, r1, r0
	cmp r0, #0
	bge _0808080A
	add r0, sl
_0808080A:
	asrs r6, r0, #0xe
	lsls r0, r7, #1
	ldr r3, _08080858 @ =gSineTable
	adds r0, r0, r3
	movs r2, #0
	ldrsh r1, [r0, r2]
	mov r3, ip
	ldr r0, [r3, #8]
	muls r0, r1, r0
	cmp r0, #0
	bge _08080822
	add r0, sl
_08080822:
	asrs r3, r0, #0xe
	lsls r1, r5, #2
	adds r1, r1, r5
	lsls r1, r1, #2
	mov r0, sb
	adds r0, r0, r1
	str r0, [sp]
	mov r2, ip
	ldr r0, [r2, #0x24]
	adds r0, r6, r0
	ldr r2, [sp]
	str r0, [r2]
	add r1, r8
	mov r2, ip
	ldr r0, [r2, #0x28]
	adds r0, r3, r0
	str r0, [r1]
	ldr r3, _0808085C @ =0x000001FF
	cmp r7, r3
	bhi _08080860
	movs r0, #0x80
	lsls r0, r0, #2
	b _08080864
	.align 2, 0
_08080850: .4byte 0x000003FF
_08080854: .4byte 0x00003FFF
_08080858: .4byte gSineTable
_0808085C: .4byte 0x000001FF
_08080860:
	movs r0, #0x98
	lsls r0, r0, #3
_08080864:
	strh r0, [r4, #0x14]
	adds r7, #0x92
	ldr r1, _080808E0 @ =0x000003FF
	adds r0, r1, #0
	ands r7, r0
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	adds r4, #0x28
	cmp r5, #6
	bls _080807EE
_0808087A:
	mov r2, ip
	ldrb r0, [r2, #1]
	cmp r0, #0
	beq _080808CE
	mov r4, ip
	adds r4, #0xa8
	movs r5, #0
	movs r3, #0x1c
	add r3, ip
	mov sb, r3
	movs r0, #0x20
	add r0, ip
	mov r8, r0
	ldr r6, _080808E4 @ =gCamera
_08080896:
	lsls r2, r5, #2
	adds r2, r2, r5
	lsls r2, r2, #2
	mov r1, sb
	adds r0, r1, r2
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r1, [r6]
	subs r0, r0, r1
	strh r0, [r4, #0x10]
	add r2, r8
	ldr r0, [r2]
	asrs r0, r0, #8
	ldr r1, [r6, #4]
	subs r0, r0, r1
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	adds r4, #0x28
	cmp r5, #6
	bls _08080896
_080808CE:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080808E0: .4byte 0x000003FF
_080808E4: .4byte gCamera

	thumb_func_start sub_80808E8
sub_80808E8: @ 0x080808E8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _0808099C @ =sub_8080AD4
	movs r1, #0x8e
	lsls r1, r1, #1
	movs r2, #0x84
	lsls r2, r2, #6
	ldr r3, _080809A0 @ =sub_8081C4C
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	str r0, [sp, #4]
	ldrh r2, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r7, r2, r0
	movs r1, #0
	strb r4, [r7]
	movs r0, #1
	strh r0, [r7, #4]
	strh r1, [r7, #6]
	strh r1, [r7, #2]
	str r1, [r7, #0xc]
	str r1, [r7, #0x10]
	movs r4, #0
	ldr r0, _080809A4 @ =0x03000068
	adds r1, r2, r0
	movs r3, #0
	adds r5, r1, #0
_08080932:
	lsls r0, r4, #3
	subs r0, r0, r4
	lsls r0, r0, #3
	adds r0, r1, r0
	str r3, [r0]
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #2
	bls _08080932
	movs r4, #0
	adds r1, r7, #0
	adds r1, #0x1c
	str r1, [sp, #8]
	adds r2, r7, #0
	adds r2, #0x20
	str r2, [sp, #0xc]
	movs r0, #0x24
	adds r0, r0, r7
	mov sl, r0
	adds r6, r7, #0
	adds r6, #0xa0
	movs r1, #0xd8
	adds r1, r1, r7
	mov r8, r1
	ldr r2, _080809A8 @ =gCamera
	mov sb, r2
	mov ip, r4
_0808096A:
	cmp r4, #2
	beq _080809AC
	lsls r3, r4, #3
	subs r2, r3, r4
	lsls r2, r2, #2
	adds r1, r7, #0
	adds r1, #0x14
	adds r1, r1, r2
	str r1, [sp, #0x14]
	mov r1, sb
	ldr r0, [r1]
	adds r0, #0x78
	lsls r0, r0, #8
	ldr r1, [sp, #0x14]
	str r0, [r1]
	adds r1, r7, #0
	adds r1, #0x18
	adds r1, r1, r2
	mov r2, sb
	ldr r0, [r2, #4]
	adds r0, #0xb4
	lsls r0, r0, #8
	str r0, [r1]
	b _080809C0
	.align 2, 0
_0808099C: .4byte sub_8080AD4
_080809A0: .4byte sub_8081C4C
_080809A4: .4byte 0x03000068
_080809A8: .4byte gCamera
_080809AC:
	mov r1, sb
	ldr r0, [r1]
	adds r0, #0x8c
	lsls r0, r0, #8
	str r0, [r7, #0x4c]
	ldr r0, [r1, #4]
	adds r0, #0xd4
	lsls r0, r0, #8
	str r0, [r7, #0x50]
	movs r3, #0x10
_080809C0:
	subs r1, r3, r4
	lsls r1, r1, #2
	ldr r2, [sp, #8]
	adds r0, r2, r1
	mov r2, ip
	str r2, [r0]
	ldr r2, [sp, #0xc]
	adds r0, r2, r1
	mov r2, ip
	str r2, [r0]
	mov r2, sl
	adds r0, r2, r1
	mov r2, ip
	str r2, [r0]
	adds r1, r7, r1
	movs r0, #1
	strh r0, [r1, #0x28]
	strh r2, [r1, #0x2a]
	ldrb r0, [r7]
	cmp r0, #0
	beq _080809EE
	movs r0, #0xfa
	lsls r0, r0, #2
_080809EE:
	strh r0, [r1, #0x2c]
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #2
	bls _0808096A
	ldrb r0, [r7]
	cmp r0, #0
	bne _08080A08
	movs r0, #0x74
	bl VramMalloc
	b _08080A0A
_08080A08:
	movs r0, #0
_08080A0A:
	str r0, [r7, #8]
	movs r0, #0x80
	bl VramMalloc
	adds r1, r0, #0
	str r1, [r7, #0xc]
	str r1, [r7, #0x68]
	movs r2, #0
	movs r4, #0
	movs r0, #0xa8
	lsls r0, r0, #3
	strh r0, [r5, #0x14]
	subs r0, #0x48
	strh r0, [r5, #0xc]
	movs r0, #4
	strb r0, [r5, #0x1a]
	strh r4, [r5, #0x16]
	movs r0, #0xff
	strb r0, [r5, #0x1b]
	movs r0, #0x10
	mov sl, r0
	mov r0, sl
	strb r0, [r5, #0x1c]
	strb r2, [r5, #0x1f]
	strh r4, [r5, #0x10]
	strh r4, [r5, #0x12]
	movs r0, #0x80
	lsls r0, r0, #5
	mov sb, r0
	str r0, [r5, #8]
	movs r0, #0x80
	lsls r0, r0, #4
	adds r1, r1, r0
	str r1, [r6]
	movs r0, #0xb0
	lsls r0, r0, #3
	strh r0, [r6, #0x14]
	subs r0, #0x89
	strh r0, [r6, #0xc]
	strb r2, [r6, #0x1a]
	strh r4, [r6, #0x16]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r6, #0x1b]
	mov r1, sl
	strb r1, [r6, #0x1c]
	movs r0, #9
	strb r0, [r6, #0x1f]
	strh r4, [r6, #0x10]
	strh r4, [r6, #0x12]
	mov r0, sb
	str r0, [r6, #8]
	movs r0, #0x88
	lsls r0, r0, #1
	adds r1, r7, r0
	ldrh r0, [r7, #2]
	strh r0, [r1]
	ldrh r0, [r6, #0x10]
	strh r0, [r1, #6]
	ldrh r0, [r6, #0x12]
	strh r0, [r1, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r1, #2]
	strh r0, [r1, #4]
	movs r0, #0x24
	str r2, [sp, #0x10]
	bl VramMalloc
	adds r1, r0, #0
	str r1, [r7, #0x10]
	mov r0, r8
	str r1, [r0]
	movs r0, #0xa0
	lsls r0, r0, #3
	mov r1, r8
	strh r0, [r1, #0x14]
	adds r0, #0xa
	strh r0, [r1, #0xc]
	ldr r2, [sp, #0x10]
	strb r2, [r1, #0x1a]
	strh r4, [r1, #0x16]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r1, #0x1b]
	mov r0, sl
	strb r0, [r1, #0x1c]
	strb r2, [r1, #0x1f]
	strh r4, [r1, #0x10]
	strh r4, [r1, #0x12]
	mov r2, sb
	str r2, [r1, #8]
	ldr r0, [sp, #4]
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_8080AD4
sub_8080AD4: @ 0x08080AD4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	ldr r0, _08080B1C @ =gCurTask
	ldr r1, [r0]
	ldrh r2, [r1, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r5, r2, r1
	ldr r1, _08080B20 @ =0x03000110
	adds r7, r2, r1
	ldrh r1, [r5, #0x2c]
	adds r3, r0, #0
	cmp r1, #0xc8
	bne _08080B00
	ldr r4, _08080B24 @ =0x03000064
	adds r0, r2, r4
	ldrh r0, [r0]
	cmp r0, #0xc8
	beq _08080B12
_08080B00:
	movs r0, #0xfa
	lsls r0, r0, #3
	cmp r1, r0
	bne _08080B28
	ldr r4, _08080B24 @ =0x03000064
	adds r0, r2, r4
	ldrh r0, [r0]
	cmp r0, r1
	bne _08080B28
_08080B12:
	ldr r0, [r3]
	bl TaskDestroy
	b _08080BC0
	.align 2, 0
_08080B1C: .4byte gCurTask
_08080B20: .4byte 0x03000110
_08080B24: .4byte 0x03000064
_08080B28:
	adds r0, r5, #0
	bl sub_8080BD0
	adds r0, r5, #0
	bl sub_80811E0
	movs r6, #0
	movs r0, #0x14
	adds r0, r0, r5
	mov sl, r0
	movs r1, #0x18
	adds r1, r1, r5
	mov sb, r1
	ldr r2, _08080B9C @ =gCamera
	mov r8, r2
_08080B46:
	lsls r2, r6, #3
	subs r2, r2, r6
	lsls r0, r2, #3
	adds r0, #0x68
	adds r4, r5, r0
	lsls r2, r2, #2
	mov r3, sl
	adds r0, r3, r2
	ldr r0, [r0]
	asrs r0, r0, #8
	mov r3, r8
	ldr r1, [r3]
	subs r0, r0, r1
	strh r0, [r4, #0x10]
	add r2, sb
	ldr r0, [r2]
	asrs r0, r0, #8
	ldr r1, [r3, #4]
	subs r0, r0, r1
	strh r0, [r4, #0x12]
	ldr r0, [r4, #8]
	movs r1, #0x20
	ands r0, r1
	cmp r0, #0
	beq _08080BA0
	ldrh r0, [r5, #2]
	strh r0, [r7]
	ldrh r0, [r4, #0x10]
	strh r0, [r7, #6]
	ldrh r0, [r4, #0x12]
	strh r0, [r7, #8]
	adds r0, r4, #0
	adds r1, r7, #0
	bl TransformSprite
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	b _08080BAC
	.align 2, 0
_08080B9C: .4byte gCamera
_08080BA0:
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
_08080BAC:
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #2
	bhi _08080BC0
	cmp r6, #2
	bne _08080B46
	ldr r0, [r5, #0x10]
	cmp r0, #0
	bne _08080B46
_08080BC0:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8080BD0
sub_8080BD0: @ 0x08080BD0
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	adds r6, r0, #0
	adds r5, r6, #0
	adds r5, #0x14
	movs r0, #0x30
	adds r0, r0, r6
	mov sb, r0
	adds r7, r6, #0
	adds r7, #0x68
	adds r3, r6, #0
	adds r3, #0xa0
	ldrh r1, [r5, #0x18]
	ldr r4, _08080C20 @ =0x0000041A
	cmp r1, r4
	bne _08080BF8
	b _0808100C
_08080BF8:
	cmp r1, r4
	bgt _08080C7C
	cmp r1, #0x32
	bne _08080C02
	b _08080DD4
_08080C02:
	cmp r1, #0x32
	bgt _08080C32
	cmp r1, #0x14
	bne _08080C0C
	b _08080D58
_08080C0C:
	cmp r1, #0x14
	bgt _08080C24
	cmp r1, #0
	bne _08080C16
	b _08080D30
_08080C16:
	cmp r1, #0xa
	bne _08080C1C
	b _08080D38
_08080C1C:
	b _080811C6
	.align 2, 0
_08080C20: .4byte 0x0000041A
_08080C24:
	cmp r1, #0x1e
	bne _08080C2A
	b _08080D70
_08080C2A:
	cmp r1, #0x28
	bne _08080C30
	b _08080D8C
_08080C30:
	b _080811C6
_08080C32:
	ldr r2, _08080C50 @ =0x000003F2
	cmp r1, r2
	bne _08080C3A
	b _08080F38
_08080C3A:
	cmp r1, r2
	bgt _08080C54
	cmp r1, #0x64
	bne _08080C44
	b _08080E2C
_08080C44:
	movs r0, #0xfa
	lsls r0, r0, #2
	cmp r1, r0
	bne _08080C4E
	b _08080F34
_08080C4E:
	b _080811C6
	.align 2, 0
_08080C50: .4byte 0x000003F2
_08080C54:
	ldr r2, _08080C6C @ =0x00000406
	cmp r1, r2
	bne _08080C5C
	b _08080F6C
_08080C5C:
	cmp r1, r2
	bgt _08080C70
	movs r0, #0xff
	lsls r0, r0, #2
	cmp r1, r0
	bne _08080C6A
	b _08080F58
_08080C6A:
	b _080811C6
	.align 2, 0
_08080C6C: .4byte 0x00000406
_08080C70:
	movs r0, #0x82
	lsls r0, r0, #3
	cmp r1, r0
	bne _08080C7A
	b _08080FB4
_08080C7A:
	b _080811C6
_08080C7C:
	ldr r4, _08080CA8 @ =0x0000046A
	cmp r1, r4
	bne _08080C84
	b _0808111C
_08080C84:
	cmp r1, r4
	bgt _08080CDC
	movs r0, #0x87
	lsls r0, r0, #3
	cmp r1, r0
	bne _08080C92
	b _0808103E
_08080C92:
	cmp r1, r0
	bgt _08080CB0
	ldr r2, _08080CAC @ =0x00000424
	cmp r1, r2
	bne _08080C9E
	b _080811C6
_08080C9E:
	subs r0, #0xa
	cmp r1, r0
	bne _08080CA6
	b _0808102C
_08080CA6:
	b _080811C6
	.align 2, 0
_08080CA8: .4byte 0x0000046A
_08080CAC: .4byte 0x00000424
_08080CB0:
	ldr r2, _08080CC8 @ =0x00000456
	cmp r1, r2
	bne _08080CB8
	b _08081092
_08080CB8:
	cmp r1, r2
	bgt _08080CD0
	ldr r0, _08080CCC @ =0x0000044C
	cmp r1, r0
	bne _08080CC4
	b _08081084
_08080CC4:
	b _080811C6
	.align 2, 0
_08080CC8: .4byte 0x00000456
_08080CCC: .4byte 0x0000044C
_08080CD0:
	movs r0, #0x8c
	lsls r0, r0, #3
	cmp r1, r0
	bne _08080CDA
	b _080810E0
_08080CDA:
	b _080811C6
_08080CDC:
	movs r2, #0x91
	lsls r2, r2, #3
	cmp r1, r2
	bne _08080CE6
	b _0808116A
_08080CE6:
	cmp r1, r2
	bgt _08080D00
	ldr r0, _08080CFC @ =0x00000474
	cmp r1, r0
	bne _08080CF2
	b _08081128
_08080CF2:
	adds r0, #0xa
	cmp r1, r0
	bne _08080CFA
	b _08081154
_08080CFA:
	b _080811C6
	.align 2, 0
_08080CFC: .4byte 0x00000474
_08080D00:
	ldr r2, _08080D18 @ =0x0000049C
	cmp r1, r2
	bne _08080D08
	b _08081180
_08080D08:
	cmp r1, r2
	bgt _08080D20
	ldr r0, _08080D1C @ =0x00000492
	cmp r1, r0
	bne _08080D14
	b _0808113C
_08080D14:
	b _080811C6
	.align 2, 0
_08080D18: .4byte 0x0000049C
_08080D1C: .4byte 0x00000492
_08080D20:
	ldr r0, _08080D2C @ =0x000004A6
	cmp r1, r0
	bne _08080D28
	b _080811AC
_08080D28:
	b _080811C6
	.align 2, 0
_08080D2C: .4byte 0x000004A6
_08080D30:
	movs r0, #0x4b
	strh r0, [r5, #0x14]
	movs r0, #0xa
	b _080811C4
_08080D38:
	ldrh r0, [r5, #0x14]
	subs r0, #1
	strh r0, [r5, #0x14]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	beq _08080D48
	b _080811C6
_08080D48:
	str r0, [r5, #8]
	ldr r0, _08080D54 @ =0xFFFFFF00
	str r0, [r5, #0xc]
	movs r0, #0x14
	b _080811C4
	.align 2, 0
_08080D54: .4byte 0xFFFFFF00
_08080D58:
	ldr r0, [r5, #4]
	ldr r1, [r5, #0xc]
	adds r0, r0, r1
	str r0, [r5, #4]
	asrs r0, r0, #8
	cmp r0, #0x6e
	ble _08080D68
	b _080811C6
_08080D68:
	movs r0, #0x28
	strh r0, [r5, #0x14]
	movs r0, #0x1e
	b _080811C4
_08080D70:
	ldrh r0, [r5, #0x14]
	subs r0, #1
	strh r0, [r5, #0x14]
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	beq _08080D80
	b _080811C6
_08080D80:
	movs r0, #0xc0
	lsls r0, r0, #1
	str r0, [r5, #8]
	str r1, [r5, #0xc]
	movs r0, #0x28
	b _08080F88
_08080D8C:
	ldr r0, [r6, #0x14]
	ldr r1, [r5, #8]
	adds r0, r0, r1
	str r0, [r6, #0x14]
	asrs r1, r0, #8
	ldr r0, _08080DBC @ =0x00000923
	cmp r1, r0
	ble _08080DC0
	movs r0, #0
	strh r0, [r5, #0x16]
	movs r0, #0x20
	strh r0, [r5, #0x14]
	ldr r0, [r6, #0x14]
	str r0, [r5, #8]
	ldr r0, [r5, #4]
	str r0, [r5, #0xc]
	movs r0, #0x32
	strh r0, [r5, #0x18]
	movs r0, #0x9f
	lsls r0, r0, #2
	bl m4aSongNumStart
	b _080811C6
	.align 2, 0
_08080DBC: .4byte 0x00000923
_08080DC0:
	ldr r0, _08080DD0 @ =0x00000833
	cmp r1, r0
	bgt _08080DC8
	b _080811C6
_08080DC8:
	movs r0, #0xc0
	lsls r0, r0, #1
	str r0, [r5, #8]
	b _080811C6
	.align 2, 0
_08080DD0: .4byte 0x00000833
_08080DD4:
	ldr r2, _08080E24 @ =gUnknown_080D5C80
	ldrh r0, [r5, #0x16]
	lsls r0, r0, #2
	adds r0, r0, r2
	movs r3, #0
	ldrsh r1, [r0, r3]
	lsls r1, r1, #8
	ldr r0, [r5, #8]
	adds r0, r0, r1
	str r0, [r6, #0x14]
	ldrh r0, [r5, #0x16]
	lsls r0, r0, #2
	adds r2, #2
	adds r0, r0, r2
	movs r4, #0
	ldrsh r1, [r0, r4]
	lsls r1, r1, #8
	ldr r0, [r5, #0xc]
	adds r0, r0, r1
	str r0, [r5, #4]
	ldrh r0, [r5, #0x16]
	adds r0, #1
	movs r1, #7
	ands r0, r1
	strh r0, [r5, #0x16]
	ldrh r0, [r5, #0x14]
	subs r0, #1
	strh r0, [r5, #0x14]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _08080E14
	b _080811C6
_08080E14:
	movs r0, #0x80
	str r0, [r5, #0xc]
	movs r0, #0x64
	strh r0, [r5, #0x18]
	ldr r0, _08080E28 @ =0x00000221
	bl m4aSongNumStart
	b _080811C6
	.align 2, 0
_08080E24: .4byte gUnknown_080D5C80
_08080E28: .4byte 0x00000221
_08080E2C:
	ldrh r0, [r5, #0x16]
	adds r0, #8
	ldr r2, _08080F10 @ =0x000001FF
	adds r1, r2, #0
	ands r0, r1
	strh r0, [r5, #0x16]
	ldr r3, _08080F14 @ =gSineTable
	mov ip, r3
	ldrh r0, [r5, #0x16]
	lsls r0, r0, #1
	add r0, ip
	movs r4, #0
	ldrsh r0, [r0, r4]
	cmp r0, #0
	bge _08080E4C
	adds r0, #0x3f
_08080E4C:
	asrs r4, r0, #6
	ldr r0, [r6, #0x14]
	adds r0, r0, r4
	str r0, [r6, #0x14]
	ldr r1, [r5, #4]
	ldr r0, [r5, #0xc]
	adds r1, r1, r0
	mov r8, r1
	str r1, [r5, #4]
	ldrh r0, [r5, #0x14]
	adds r0, #1
	strh r0, [r5, #0x14]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #9
	ble _08080EEA
	ldr r0, _08080F18 @ =gStageData
	ldr r0, [r0, #0x1c]
	movs r1, #3
	ands r0, r1
	cmp r0, #0
	bne _08080ED0
	ldr r4, _08080F1C @ =gPseudoRandom
	ldr r0, [r4]
	ldr r3, _08080F20 @ =0x00196225
	muls r0, r3, r0
	ldr r2, _08080F24 @ =0x3C6EF35F
	adds r0, r0, r2
	ldr r1, _08080F28 @ =0x000003FF
	ands r1, r0
	muls r0, r3, r0
	adds r0, r0, r2
	str r0, [r4]
	movs r3, #0xf
	ands r3, r0
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r1, r2
	lsls r0, r0, #1
	add r0, ip
	movs r4, #0
	ldrsh r0, [r0, r4]
	muls r0, r3, r0
	lsrs r4, r0, #6
	lsls r0, r1, #1
	add r0, ip
	movs r1, #0
	ldrsh r0, [r0, r1]
	adds r1, r0, #0
	muls r1, r3, r1
	lsrs r1, r1, #6
	ldr r0, [r6, #0x14]
	adds r0, r0, r4
	lsls r0, r0, #8
	asrs r0, r0, #0x10
	add r1, r8
	lsls r1, r1, #8
	asrs r1, r1, #0x10
	movs r3, #0x80
	lsls r3, r3, #2
	movs r4, #0x1e
	str r4, [sp]
	ldr r4, [r6, #8]
	str r4, [sp, #4]
	bl sub_8086D64
_08080ED0:
	ldr r0, [r6, #0x14]
	asrs r0, r0, #8
	ldr r1, _08080F2C @ =0x00000996
	cmp r0, r1
	bgt _08080EEA
	ldrh r1, [r5, #0x14]
	movs r0, #0x3f
	ands r0, r1
	cmp r0, #0
	bne _08080EEA
	ldr r0, _08080F30 @ =0x00000221
	bl m4aSongNumStart
_08080EEA:
	movs r2, #0x14
	ldrsh r0, [r5, r2]
	cmp r0, #0xa
	bne _08080F00
	movs r0, #0x9f
	lsls r0, r0, #3
	strh r0, [r7, #0xc]
	movs r0, #4
	strb r0, [r7, #0x1a]
	movs r0, #0xff
	strb r0, [r7, #0x1b]
_08080F00:
	ldr r0, [r5, #4]
	asrs r0, r0, #8
	cmp r0, #0xf9
	bgt _08080F0A
	b _080811C6
_08080F0A:
	movs r0, #0xc8
	b _080811C4
	.align 2, 0
_08080F10: .4byte 0x000001FF
_08080F14: .4byte gSineTable
_08080F18: .4byte gStageData
_08080F1C: .4byte gPseudoRandom
_08080F20: .4byte 0x00196225
_08080F24: .4byte 0x3C6EF35F
_08080F28: .4byte 0x000003FF
_08080F2C: .4byte 0x00000996
_08080F30: .4byte 0x00000221
_08080F34:
	movs r0, #0x4b
	b _08081164
_08080F38:
	ldrh r0, [r5, #0x14]
	subs r0, #1
	strh r0, [r5, #0x14]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	beq _08080F48
	b _080811C6
_08080F48:
	str r0, [r5, #8]
	ldr r0, _08080F54 @ =0xFFFFFF00
	str r0, [r5, #0xc]
	movs r0, #0xff
	lsls r0, r0, #2
	b _080811C4
	.align 2, 0
_08080F54: .4byte 0xFFFFFF00
_08080F58:
	ldr r0, [r5, #4]
	ldr r1, [r5, #0xc]
	adds r0, r0, r1
	str r0, [r5, #4]
	asrs r0, r0, #8
	cmp r0, #0x6e
	ble _08080F68
	b _080811C6
_08080F68:
	movs r0, #0x28
	b _08081164
_08080F6C:
	ldrh r0, [r5, #0x14]
	subs r0, #1
	strh r0, [r5, #0x14]
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	beq _08080F7C
	b _080811C6
_08080F7C:
	movs r0, #0xc0
	lsls r0, r0, #1
	str r0, [r5, #8]
	str r1, [r5, #0xc]
	movs r0, #0x82
	lsls r0, r0, #3
_08080F88:
	strh r0, [r5, #0x18]
	movs r0, #0x9f
	lsls r0, r0, #3
	strh r0, [r7, #0xc]
	movs r0, #8
	strb r0, [r7, #0x1a]
	movs r0, #0xff
	strb r0, [r7, #0x1b]
	ldr r0, [r7, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	str r0, [r7, #8]
	ldr r0, [r3, #8]
	orrs r0, r1
	str r0, [r3, #8]
	ldr r0, _08080FB0 @ =0x0000027E
	bl m4aSongNumStart
	b _080811C6
	.align 2, 0
_08080FB0: .4byte 0x0000027E
_08080FB4:
	ldr r0, [r6, #0x14]
	ldr r1, [r5, #8]
	adds r0, r0, r1
	str r0, [r6, #0x14]
	asrs r0, r0, #8
	ldr r1, _08080FE8 @ =0x000008FB
	cmp r0, r1
	ble _08080FF4
	ldr r0, _08080FEC @ =0xFFFFFF00
	str r0, [r5, #8]
	movs r1, #0
	movs r0, #0x9f
	lsls r0, r0, #3
	strh r0, [r7, #0xc]
	strb r1, [r7, #0x1a]
	movs r0, #0xff
	strb r0, [r7, #0x1b]
	ldr r0, [r7, #8]
	ldr r1, _08080FF0 @ =0xFFFFFBFF
	ands r0, r1
	str r0, [r7, #8]
	ldr r0, [r3, #8]
	ands r0, r1
	str r0, [r3, #8]
	strh r4, [r5, #0x18]
	b _080811C6
	.align 2, 0
_08080FE8: .4byte 0x000008FB
_08080FEC: .4byte 0xFFFFFF00
_08080FF0: .4byte 0xFFFFFBFF
_08080FF4:
	ldr r0, [r5]
	asrs r0, r0, #8
	ldr r1, _08081008 @ =0x000007CF
	cmp r0, r1
	bgt _08081000
	b _080811C6
_08081000:
	movs r0, #0xa0
	lsls r0, r0, #2
	str r0, [r5, #8]
	b _080811C6
	.align 2, 0
_08081008: .4byte 0x000007CF
_0808100C:
	ldr r0, [r6, #0x14]
	ldr r1, [r5, #8]
	adds r0, r0, r1
	str r0, [r6, #0x14]
	asrs r0, r0, #8
	ldr r1, _08081024 @ =0x000008BB
	cmp r0, r1
	ble _0808101E
	b _080811C6
_0808101E:
	ldr r0, _08081028 @ =0x00000424
	b _080811C4
	.align 2, 0
_08081024: .4byte 0x000008BB
_08081028: .4byte 0x00000424
_0808102C:
	movs r0, #0x9f
	lsls r0, r0, #3
	strh r0, [r7, #0xc]
	movs r0, #8
	strb r0, [r7, #0x1a]
	movs r0, #0xff
	strb r0, [r7, #0x1b]
	strh r2, [r5, #0x18]
	b _080811C6
_0808103E:
	movs r0, #0x9f
	lsls r0, r0, #3
	strh r0, [r7, #0xc]
	movs r0, #0xc
	strb r0, [r7, #0x1a]
	movs r0, #0xff
	strb r0, [r7, #0x1b]
	movs r0, #0xa0
	lsls r0, r0, #2
	strh r0, [r7, #0x14]
	ldr r0, _08081080 @ =0x000004F7
	strh r0, [r3, #0xc]
	movs r0, #5
	strb r0, [r3, #0x1a]
	subs r0, #6
	strb r0, [r3, #0x1b]
	movs r0, #0xb0
	lsls r0, r0, #2
	strh r0, [r3, #0x14]
	ldr r0, [r7, #8]
	movs r1, #0x3e
	orrs r0, r1
	str r0, [r7, #8]
	ldr r0, [r3, #8]
	movs r1, #0x3f
	orrs r0, r1
	str r0, [r3, #8]
	movs r0, #0xe0
	lsls r0, r0, #2
	strh r0, [r6, #2]
	adds r0, #0xa4
	b _080811C4
	.align 2, 0
_08081080: .4byte 0x000004F7
_08081084:
	movs r0, #0
	str r0, [r5, #8]
	movs r0, #0x80
	lsls r0, r0, #4
	str r0, [r5, #0xc]
	strh r2, [r5, #0x18]
	b _080811C6
_08081092:
	ldr r0, [r6, #0x14]
	ldr r1, [r5, #8]
	adds r0, r0, r1
	str r0, [r6, #0x14]
	ldr r1, [r5, #4]
	ldr r0, [r5, #0xc]
	adds r1, r1, r0
	str r1, [r5, #4]
	asrs r1, r1, #8
	ldr r0, _080810D8 @ =gCamera
	ldr r0, [r0, #4]
	adds r0, #0x79
	cmp r1, r0
	bge _080810B0
	b _080811C6
_080810B0:
	movs r0, #0x80
	lsls r0, r0, #4
	movs r3, #1
	rsbs r3, r3, #0
	movs r1, #0x91
	str r1, [sp]
	movs r1, #0x40
	movs r2, #0
	bl sub_805256C
	movs r0, #0x9f
	lsls r0, r0, #2
	bl m4aSongNumStart
	ldr r0, _080810DC @ =0xFFFFFC00
	str r0, [r5, #0xc]
	movs r0, #0x8c
	lsls r0, r0, #3
	b _080811C4
	.align 2, 0
_080810D8: .4byte gCamera
_080810DC: .4byte 0xFFFFFC00
_080810E0:
	ldr r0, [r5, #0xc]
	adds r0, #0x2a
	str r0, [r5, #0xc]
	ldr r1, [r5, #4]
	adds r1, r1, r0
	str r1, [r5, #4]
	ldrh r1, [r6, #2]
	movs r0, #0xc0
	lsls r0, r0, #2
	cmp r1, r0
	beq _080810FC
	adds r0, r1, #0
	subs r0, #8
	strh r0, [r6, #2]
_080810FC:
	ldr r1, [r5, #4]
	asrs r1, r1, #8
	ldr r0, _08081118 @ =gCamera
	ldr r0, [r0, #4]
	adds r0, #0x79
	cmp r1, r0
	blt _080811C6
	ldr r0, [r5, #0xc]
	cmp r0, #0
	ble _080811C6
	movs r0, #0
	str r0, [r5, #0xc]
	strh r4, [r5, #0x18]
	b _080811C6
	.align 2, 0
_08081118: .4byte gCamera
_0808111C:
	ldr r0, _08081124 @ =0x000004E2
	strh r0, [r5, #0x14]
	subs r0, #0x6e
	b _080811C4
	.align 2, 0
_08081124: .4byte 0x000004E2
_08081128:
	ldrh r0, [r5, #0x14]
	subs r0, #1
	strh r0, [r5, #0x14]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _080811C6
	ldr r0, _08081138 @ =0x00000492
	b _080811C4
	.align 2, 0
_08081138: .4byte 0x00000492
_0808113C:
	ldrh r0, [r6, #2]
	adds r0, #8
	ldr r3, _08081150 @ =0x000003FF
	adds r1, r3, #0
	ands r0, r1
	strh r0, [r6, #2]
	cmp r0, #0
	bne _080811C6
	movs r0, #0xb4
	b _08081164
	.align 2, 0
_08081150: .4byte 0x000003FF
_08081154:
	ldrh r0, [r5, #0x14]
	subs r0, #1
	strh r0, [r5, #0x14]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _080811C6
	movs r0, #0x96
	lsls r0, r0, #1
_08081164:
	strh r0, [r5, #0x14]
	strh r2, [r5, #0x18]
	b _080811C6
_0808116A:
	ldrh r0, [r5, #0x14]
	subs r0, #1
	strh r0, [r5, #0x14]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _080811C6
	ldr r0, _0808117C @ =0x00000492
	b _080811C4
	.align 2, 0
_0808117C: .4byte 0x00000492
_08081180:
	ldrh r0, [r5, #0x14]
	subs r0, #1
	strh r0, [r5, #0x14]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _080811C6
	movs r0, #0x80
	lsls r0, r0, #3
	str r0, [r5, #8]
	ldr r0, _080811A4 @ =0xFFFFFC00
	str r0, [r5, #0xc]
	ldr r0, _080811A8 @ =0x000004A6
	strh r0, [r5, #0x18]
	movs r0, #0x70
	bl m4aSongNumStart
	b _080811C6
	.align 2, 0
_080811A4: .4byte 0xFFFFFC00
_080811A8: .4byte 0x000004A6
_080811AC:
	ldr r0, [r6, #0x14]
	ldr r1, [r5, #8]
	adds r0, r0, r1
	str r0, [r6, #0x14]
	ldr r0, [r5, #4]
	ldr r1, [r5, #0xc]
	adds r0, r0, r1
	str r0, [r5, #4]
	cmp r0, #0
	bge _080811C6
	movs r0, #0xfa
	lsls r0, r0, #3
_080811C4:
	strh r0, [r5, #0x18]
_080811C6:
	ldr r0, [r5]
	mov r4, sb
	str r0, [r4]
	ldr r0, [r5, #4]
	str r0, [r4, #4]
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80811E0
sub_80811E0: @ 0x080811E0
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x4c
	adds r3, r5, #0
	adds r3, #0xd8
	ldrh r1, [r4, #0x18]
	ldr r2, _08081218 @ =0x000003F2
	cmp r1, r2
	bne _080811F6
	b _0808148E
_080811F6:
	cmp r1, r2
	bgt _08081260
	cmp r1, #0x32
	bne _08081200
	b _08081380
_08081200:
	cmp r1, #0x32
	bgt _0808122A
	cmp r1, #0x14
	bne _0808120A
	b _08081328
_0808120A:
	cmp r1, #0x14
	bgt _0808121C
	cmp r1, #0
	beq _08081300
	cmp r1, #0xa
	beq _08081308
	b _080816B8
	.align 2, 0
_08081218: .4byte 0x000003F2
_0808121C:
	cmp r1, #0x1e
	bne _08081222
	b _08081340
_08081222:
	cmp r1, #0x28
	bne _08081228
	b _0808135E
_08081228:
	b _080816B8
_0808122A:
	cmp r1, #0x50
	bne _08081230
	b _080813EC
_08081230:
	cmp r1, #0x50
	bgt _08081242
	cmp r1, #0x3c
	bne _0808123A
	b _080813A4
_0808123A:
	cmp r1, #0x46
	bne _08081240
	b _080813CC
_08081240:
	b _080816B8
_08081242:
	cmp r1, #0x64
	bne _08081248
	b _08081464
_08081248:
	cmp r1, #0x64
	bgt _08081254
	cmp r1, #0x5a
	bne _08081252
	b _08081420
_08081252:
	b _080816B8
_08081254:
	movs r0, #0xfa
	lsls r0, r0, #2
	cmp r1, r0
	bne _0808125E
	b _08081486
_0808125E:
	b _080816B8
_08081260:
	ldr r6, _08081290 @ =0x0000042E
	cmp r1, r6
	bne _08081268
	b _08081598
_08081268:
	cmp r1, r6
	bgt _080812AC
	movs r2, #0x82
	lsls r2, r2, #3
	cmp r1, r2
	bne _08081276
	b _08081504
_08081276:
	cmp r1, r2
	bgt _08081294
	movs r0, #0xff
	lsls r0, r0, #2
	cmp r1, r0
	bne _08081284
	b _080814B0
_08081284:
	adds r0, #0xa
	cmp r1, r0
	bne _0808128C
	b _080814CC
_0808128C:
	b _080816B8
	.align 2, 0
_08081290: .4byte 0x0000042E
_08081294:
	ldr r0, _080812A8 @ =0x0000041A
	cmp r1, r0
	bne _0808129C
	b _08081544
_0808129C:
	adds r0, #0xa
	cmp r1, r0
	bne _080812A4
	b _08081570
_080812A4:
	b _080816B8
	.align 2, 0
_080812A8: .4byte 0x0000041A
_080812AC:
	ldr r6, _080812CC @ =0x00000442
	cmp r1, r6
	bne _080812B4
	b _0808163C
_080812B4:
	cmp r1, r6
	bgt _080812D4
	ldr r0, _080812D0 @ =0x00000433
	cmp r1, r0
	bne _080812C0
	b _080815E6
_080812C0:
	adds r0, #5
	cmp r1, r0
	bne _080812C8
	b _08081600
_080812C8:
	b _080816B8
	.align 2, 0
_080812CC: .4byte 0x00000442
_080812D0: .4byte 0x00000433
_080812D4:
	ldr r2, _080812EC @ =0x00000456
	cmp r1, r2
	bne _080812DC
	b _0808168C
_080812DC:
	cmp r1, r2
	bgt _080812F4
	ldr r0, _080812F0 @ =0x0000044C
	cmp r1, r0
	bne _080812E8
	b _08081664
_080812E8:
	b _080816B8
	.align 2, 0
_080812EC: .4byte 0x00000456
_080812F0: .4byte 0x0000044C
_080812F4:
	movs r0, #0x8c
	lsls r0, r0, #3
	cmp r1, r0
	bne _080812FE
	b _080816A8
_080812FE:
	b _080816B8
_08081300:
	movs r0, #0x4b
	strh r0, [r4, #0x14]
	movs r0, #0xa
	b _080816B6
_08081308:
	ldrh r0, [r4, #0x14]
	subs r0, #1
	strh r0, [r4, #0x14]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	beq _08081318
	b _080816B8
_08081318:
	str r0, [r4, #8]
	ldr r0, _08081324 @ =0xFFFFFF00
	str r0, [r4, #0xc]
	movs r0, #0x14
	b _080816B6
	.align 2, 0
_08081324: .4byte 0xFFFFFF00
_08081328:
	ldr r0, [r4, #4]
	ldr r1, [r4, #0xc]
	adds r0, r0, r1
	str r0, [r4, #4]
	asrs r0, r0, #8
	cmp r0, #0x8e
	ble _08081338
	b _080816B8
_08081338:
	movs r0, #0x28
	strh r0, [r4, #0x14]
	movs r0, #0x1e
	b _080816B6
_08081340:
	ldrh r0, [r4, #0x14]
	subs r0, #1
	strh r0, [r4, #0x14]
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	beq _08081350
	b _080816B8
_08081350:
	movs r0, #0xc0
	lsls r0, r0, #1
	str r0, [r4, #8]
	str r1, [r4, #0xc]
	movs r0, #0x28
	strh r0, [r4, #0x18]
	b _080814E6
_0808135E:
	ldr r0, [r5, #0x4c]
	ldr r1, [r4, #8]
	adds r0, r0, r1
	str r0, [r5, #0x4c]
	asrs r0, r0, #8
	ldr r1, _0808137C @ =0x00000819
	cmp r0, r1
	bgt _08081370
	b _080816B8
_08081370:
	movs r0, #0x80
	lsls r0, r0, #1
	str r0, [r4, #8]
	movs r0, #0x32
	b _080816B6
	.align 2, 0
_0808137C: .4byte 0x00000819
_08081380:
	ldr r0, [r5, #0x4c]
	ldr r1, [r4, #8]
	adds r0, r0, r1
	str r0, [r5, #0x4c]
	asrs r0, r0, #8
	ldr r1, _080813A0 @ =0x000008F2
	cmp r0, r1
	bgt _08081392
	b _080816B8
_08081392:
	movs r0, #0
	str r0, [r4, #8]
	movs r0, #0x80
	str r0, [r4, #0xc]
	movs r0, #0x3c
	strh r0, [r4, #0x14]
	b _080816B6
	.align 2, 0
_080813A0: .4byte 0x000008F2
_080813A4:
	ldr r0, [r4, #4]
	ldr r1, [r4, #0xc]
	adds r0, r0, r1
	str r0, [r4, #4]
	asrs r0, r0, #8
	cmp r0, #0xb3
	bgt _080813B4
	b _080816B8
_080813B4:
	ldr r0, _080813C8 @ =0x0000050B
	strh r0, [r3, #0xc]
	movs r0, #1
	strb r0, [r3, #0x1a]
	movs r0, #0xff
	strb r0, [r3, #0x1b]
	movs r0, #0x14
	strh r0, [r4, #0x14]
	movs r0, #0x46
	b _080816B6
	.align 2, 0
_080813C8: .4byte 0x0000050B
_080813CC:
	ldrh r0, [r4, #0x14]
	subs r0, #1
	strh r0, [r4, #0x14]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _080813DA
	b _080816B8
_080813DA:
	movs r0, #0x3c
	strh r0, [r4, #0x14]
	movs r0, #0x50
	strh r0, [r4, #0x18]
	ldr r0, _080813E8 @ =0x00000506
	b _08081586
	.align 2, 0
_080813E8: .4byte 0x00000506
_080813EC:
	ldrh r0, [r4, #0x14]
	subs r0, #1
	strh r0, [r4, #0x14]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _080813FA
	b _080816B8
_080813FA:
	movs r0, #0x96
	strh r0, [r4, #0x14]
	movs r0, #0x5a
	strh r0, [r4, #0x18]
	ldr r0, _08081418 @ =0x0000050B
	strh r0, [r3, #0xc]
	movs r0, #2
	strb r0, [r3, #0x1a]
	movs r0, #0xff
	strb r0, [r3, #0x1b]
	ldr r0, [r3, #8]
	ldr r1, _0808141C @ =0xFFFFFBFF
	ands r0, r1
	str r0, [r3, #8]
	b _080816B8
	.align 2, 0
_08081418: .4byte 0x0000050B
_0808141C: .4byte 0xFFFFFBFF
_08081420:
	ldrh r0, [r4, #0x14]
	subs r0, #1
	strh r0, [r4, #0x14]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0808142E
	b _080816B8
_0808142E:
	movs r0, #0x80
	lsls r0, r0, #1
	str r0, [r4, #8]
	ldr r0, _0808145C @ =0xFFFFFC00
	str r0, [r4, #0xc]
	ldr r0, _08081460 @ =0x0000050A
	strh r0, [r3, #0xc]
	movs r0, #0
	strb r0, [r3, #0x1a]
	movs r0, #0xff
	strb r0, [r3, #0x1b]
	ldr r0, [r3, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	str r0, [r3, #8]
	movs r0, #0x64
	strh r0, [r4, #0x18]
	movs r0, #0x74
	bl m4aSongNumStart
	b _080816B8
	.align 2, 0
_0808145C: .4byte 0xFFFFFC00
_08081460: .4byte 0x0000050A
_08081464:
	ldr r0, [r4, #0xc]
	adds r0, #0x2a
	str r0, [r4, #0xc]
	ldr r0, [r5, #0x4c]
	ldr r1, [r4, #8]
	adds r0, r0, r1
	str r0, [r5, #0x4c]
	ldr r0, [r4, #4]
	ldr r1, [r4, #0xc]
	adds r0, r0, r1
	str r0, [r4, #4]
	asrs r0, r0, #8
	cmp r0, #0xf9
	bgt _08081482
	b _080816B8
_08081482:
	movs r0, #0xc8
	b _080816B6
_08081486:
	movs r0, #0x4b
	strh r0, [r4, #0x14]
	strh r2, [r4, #0x18]
	b _080816B8
_0808148E:
	ldrh r0, [r4, #0x14]
	subs r0, #1
	strh r0, [r4, #0x14]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	beq _0808149E
	b _080816B8
_0808149E:
	str r0, [r4, #8]
	ldr r0, _080814AC @ =0xFFFFFF00
	str r0, [r4, #0xc]
	movs r0, #0xff
	lsls r0, r0, #2
	b _080816B6
	.align 2, 0
_080814AC: .4byte 0xFFFFFF00
_080814B0:
	ldr r0, [r4, #4]
	ldr r1, [r4, #0xc]
	adds r0, r0, r1
	str r0, [r4, #4]
	asrs r0, r0, #8
	cmp r0, #0x8e
	ble _080814C0
	b _080816B8
_080814C0:
	movs r0, #0x28
	strh r0, [r4, #0x14]
	ldr r0, _080814C8 @ =0x00000406
	b _080816B6
	.align 2, 0
_080814C8: .4byte 0x00000406
_080814CC:
	ldrh r0, [r4, #0x14]
	subs r0, #1
	strh r0, [r4, #0x14]
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	beq _080814DC
	b _080816B8
_080814DC:
	movs r0, #0xc0
	lsls r0, r0, #1
	str r0, [r4, #8]
	str r1, [r4, #0xc]
	strh r2, [r4, #0x18]
_080814E6:
	ldr r0, _08081500 @ =0x0000050A
	strh r0, [r3, #0xc]
	movs r0, #0
	strb r0, [r3, #0x1a]
	movs r0, #0xff
	strb r0, [r3, #0x1b]
	ldr r0, [r3, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	str r0, [r3, #8]
	b _080816B8
	.align 2, 0
_08081500: .4byte 0x0000050A
_08081504:
	ldr r0, [r5, #0x4c]
	ldr r1, [r4, #8]
	adds r0, r0, r1
	str r0, [r5, #0x4c]
	asrs r1, r0, #8
	ldr r0, _08081528 @ =0x000008AB
	cmp r1, r0
	ble _08081530
	movs r0, #0
	str r0, [r4, #8]
	movs r0, #0x80
	lsls r0, r0, #2
	str r0, [r4, #0xc]
	movs r0, #0x3c
	strh r0, [r4, #0x14]
	ldr r0, _0808152C @ =0x0000041A
	b _080816B6
	.align 2, 0
_08081528: .4byte 0x000008AB
_0808152C: .4byte 0x0000041A
_08081530:
	ldr r0, _08081540 @ =0x0000076B
	cmp r1, r0
	bgt _08081538
	b _080816B8
_08081538:
	movs r0, #0x80
	lsls r0, r0, #2
	str r0, [r4, #8]
	b _080816B8
	.align 2, 0
_08081540: .4byte 0x0000076B
_08081544:
	ldr r0, [r4, #4]
	ldr r1, [r4, #0xc]
	adds r0, r0, r1
	str r0, [r4, #4]
	asrs r0, r0, #8
	cmp r0, #0xb3
	bgt _08081554
	b _080816B8
_08081554:
	ldr r0, _08081568 @ =0x0000050B
	strh r0, [r3, #0xc]
	movs r0, #1
	strb r0, [r3, #0x1a]
	movs r0, #0xff
	strb r0, [r3, #0x1b]
	movs r0, #0x14
	strh r0, [r4, #0x14]
	ldr r0, _0808156C @ =0x00000424
	b _080816B6
	.align 2, 0
_08081568: .4byte 0x0000050B
_0808156C: .4byte 0x00000424
_08081570:
	ldrh r0, [r4, #0x14]
	subs r0, #1
	strh r0, [r4, #0x14]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0808157E
	b _080816B8
_0808157E:
	movs r0, #0xb4
	strh r0, [r4, #0x14]
	strh r6, [r4, #0x18]
	ldr r0, _08081594 @ =0x00000509
_08081586:
	strh r0, [r3, #0xc]
	movs r0, #0
	strb r0, [r3, #0x1a]
	movs r0, #0xff
	strb r0, [r3, #0x1b]
	b _080816B8
	.align 2, 0
_08081594: .4byte 0x00000509
_08081598:
	ldrh r0, [r4, #0x14]
	subs r1, r0, #1
	strh r1, [r4, #0x14]
	lsls r0, r1, #0x10
	cmp r0, #0
	bne _080815D4
	movs r0, #0xa
	strh r0, [r4, #0x14]
	ldr r0, _080815C8 @ =0x00000433
	strh r0, [r4, #0x18]
	adds r0, #0xd8
	strh r0, [r3, #0xc]
	movs r0, #0
	strb r0, [r3, #0x1a]
	movs r0, #0xff
	strb r0, [r3, #0x1b]
	ldr r0, [r3, #8]
	ldr r1, _080815CC @ =0xFFFFFBFF
	ands r0, r1
	str r0, [r3, #8]
	ldr r0, _080815D0 @ =0x00000223
	bl m4aSongNumStart
	b _080816B8
	.align 2, 0
_080815C8: .4byte 0x00000433
_080815CC: .4byte 0xFFFFFBFF
_080815D0: .4byte 0x00000223
_080815D4:
	movs r0, #0x3f
	ands r1, r0
	cmp r1, #0
	bne _080816B8
	movs r0, #0x89
	lsls r0, r0, #2
	bl m4aSongNumStart
	b _080816B8
_080815E6:
	ldrh r0, [r4, #0x14]
	subs r0, #1
	strh r0, [r4, #0x14]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _080816B8
	ldr r0, _080815FC @ =0xFFFFFC00
	str r0, [r4, #8]
	movs r0, #0x87
	lsls r0, r0, #3
	b _080816B6
	.align 2, 0
_080815FC: .4byte 0xFFFFFC00
_08081600:
	ldr r0, [r5, #0x4c]
	ldr r1, [r4, #8]
	adds r0, r0, r1
	str r0, [r5, #0x4c]
	asrs r0, r0, #8
	ldr r1, _08081630 @ =0x0000085C
	cmp r0, r1
	bgt _080816B8
	movs r1, #0
	movs r2, #0
	ldr r0, _08081634 @ =0x00000509
	strh r0, [r3, #0xc]
	strb r1, [r3, #0x1a]
	movs r0, #0xff
	strb r0, [r3, #0x1b]
	str r2, [r4, #8]
	str r2, [r4, #0xc]
	movs r0, #0x78
	strh r0, [r4, #0x14]
	strh r6, [r4, #0x18]
	ldr r0, _08081638 @ =0x00000223
	bl m4aSongNumStop
	b _080816B8
	.align 2, 0
_08081630: .4byte 0x0000085C
_08081634: .4byte 0x00000509
_08081638: .4byte 0x00000223
_0808163C:
	ldrh r0, [r4, #0x14]
	subs r0, #1
	strh r0, [r4, #0x14]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _080816B8
	ldr r0, _0808165C @ =0x000005CA
	strh r0, [r3, #0xc]
	movs r0, #0
	strb r0, [r3, #0x1a]
	movs r0, #0xff
	strb r0, [r3, #0x1b]
	movs r0, #0xb4
	strh r0, [r4, #0x14]
	ldr r0, _08081660 @ =0x0000044C
	b _080816B6
	.align 2, 0
_0808165C: .4byte 0x000005CA
_08081660: .4byte 0x0000044C
_08081664:
	ldrh r0, [r4, #0x14]
	subs r0, #1
	strh r0, [r4, #0x14]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _080816B8
	ldr r0, _08081688 @ =0x000005CA
	strh r0, [r3, #0xc]
	movs r0, #1
	strb r0, [r3, #0x1a]
	movs r0, #0xff
	strb r0, [r3, #0x1b]
	movs r0, #0x80
	rsbs r0, r0, #0
	str r0, [r4, #0xc]
	strh r2, [r4, #0x18]
	b _080816B8
	.align 2, 0
_08081688: .4byte 0x000005CA
_0808168C:
	ldr r0, [r4, #4]
	ldr r1, [r4, #0xc]
	adds r0, r0, r1
	str r0, [r4, #4]
	ldr r0, _080816A4 @ =gBldRegs
	ldrh r0, [r0, #4]
	cmp r0, #0x10
	bne _080816B8
	movs r0, #0x8c
	lsls r0, r0, #3
	b _080816B6
	.align 2, 0
_080816A4: .4byte gBldRegs
_080816A8:
	ldr r0, [r5, #0x10]
	bl VramFree
	movs r0, #0
	str r0, [r5, #0x10]
	movs r0, #0xfa
	lsls r0, r0, #3
_080816B6:
	strh r0, [r4, #0x18]
_080816B8:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80816C0
sub_80816C0: @ 0x080816C0
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	movs r4, #0
	ldr r6, _08081708 @ =gCamera
_080816C8:
	lsls r3, r4, #2
	adds r3, r3, r4
	lsls r0, r3, #3
	adds r0, #0x7c
	adds r0, r5, r0
	lsls r3, r3, #2
	adds r1, r5, #0
	adds r1, #0x2c
	adds r1, r1, r3
	ldr r1, [r1]
	asrs r1, r1, #8
	ldr r2, [r6]
	subs r1, r1, r2
	strh r1, [r0, #0x10]
	adds r1, r5, #0
	adds r1, #0x30
	adds r1, r1, r3
	ldr r1, [r1]
	asrs r1, r1, #8
	ldr r2, [r6, #4]
	subs r1, r1, r2
	strh r1, [r0, #0x12]
	bl DisplaySprite
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #3
	bls _080816C8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08081708: .4byte gCamera

	thumb_func_start sub_808170C
sub_808170C: @ 0x0808170C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x7c]
	cmp r0, #0
	beq _0808171E
	bl VramFree
	movs r0, #0
	str r0, [r4, #0x7c]
_0808171E:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8081724
sub_8081724: @ 0x08081724
	push {r4, r5, lr}
	adds r3, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	lsls r0, r2, #2
	adds r0, r0, r2
	lsls r2, r0, #2
	adds r0, r3, #0
	adds r0, #0x38
	adds r5, r0, r2
	ldr r0, [r5]
	cmp r0, #0
	bgt _08081782
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r4, r0, #3
	movs r0, #0xa4
	lsls r0, r0, #1
	adds r1, r3, r0
	adds r1, r1, r4
	adds r0, r3, #0
	adds r0, #0x30
	adds r0, r0, r2
	ldr r1, [r1]
	ldr r0, [r0]
	subs r1, r1, r0
	adds r0, r1, #0
	cmp r1, #0
	bge _08081764
	rsbs r0, r1, #0
_08081764:
	asrs r1, r0, #8
	cmp r1, #0x13
	bgt _08081782
	movs r1, #0xa8
	lsls r1, r1, #1
	adds r0, r3, r1
	adds r0, r0, r4
	ldr r0, [r0]
	str r0, [r5]
	adds r1, r3, r2
	movs r0, #0x64
	strh r0, [r1, #0x3e]
	ldr r0, _08081788 @ =0x0000023A
	bl m4aSongNumStart
_08081782:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08081788: .4byte 0x0000023A

	thumb_func_start sub_808178C
sub_808178C: @ 0x0808178C
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	ldr r0, _080817D8 @ =sub_807FE48
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x88
	lsls r2, r2, #6
	ldr r3, _080817DC @ =sub_8081C24
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	movs r1, #0
	strb r5, [r4]
	movs r0, #1
	strh r0, [r4, #0x10]
	strh r1, [r4, #0x12]
	strh r1, [r4, #0xc]
	strh r1, [r4, #0x16]
	strh r1, [r4, #0x14]
	movs r0, #0x1c
	bl VramMalloc
	str r0, [r4, #0x18]
	adds r0, r4, #0
	bl sub_80804B4
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080817D8: .4byte sub_807FE48
_080817DC: .4byte sub_8081C24

	thumb_func_start sub_80817E0
sub_80817E0: @ 0x080817E0
	push {r4, lr}
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, [r4, #0x18]
	cmp r0, #0
	beq _080817F8
	bl VramFree
	movs r0, #0
	str r0, [r4, #0x18]
_080817F8:
	adds r0, r4, #0
	bl sub_8081AA0
	adds r0, r4, #0
	bl sub_8081A40
	adds r0, r4, #0
	bl sub_808170C
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8081810
sub_8081810: @ 0x08081810
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r1, #0
	ldr r0, _08081834 @ =0x00000125
	strh r0, [r4, #0x30]
	strh r1, [r4, #0x18]
	strh r1, [r4, #0x1a]
	ldr r5, _08081838 @ =sub_808183C
	adds r0, r4, #0
	adds r1, r5, #0
	bl SetPlayerCallback
	adds r0, r4, #0
	bl _call_via_r5
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08081834: .4byte 0x00000125
_08081838: .4byte sub_808183C

	thumb_func_start sub_808183C
sub_808183C: @ 0x0808183C
	bx lr
	.align 2, 0

	thumb_func_start sub_8081840
sub_8081840: @ 0x08081840
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r0, #0
	strh r0, [r4, #0x1c]
	strh r0, [r4, #0x18]
	strh r0, [r4, #0x1a]
	movs r0, #0x96
	strh r0, [r4, #0x30]
	ldr r5, _08081868 @ =sub_8081894
	adds r0, r4, #0
	adds r1, r5, #0
	bl SetPlayerCallback
	adds r0, r4, #0
	bl _call_via_r5
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08081868: .4byte sub_8081894

	thumb_func_start sub_808186C
sub_808186C: @ 0x0808186C
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r0, #0
	strh r0, [r4, #0x1c]
	strh r0, [r4, #0x18]
	strh r0, [r4, #0x1a]
	strh r0, [r4, #0x30]
	ldr r5, _08081890 @ =sub_8081894
	adds r0, r4, #0
	adds r1, r5, #0
	bl SetPlayerCallback
	adds r0, r4, #0
	bl _call_via_r5
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08081890: .4byte sub_8081894

	thumb_func_start sub_8081894
sub_8081894: @ 0x08081894
	bx lr
	.align 2, 0

	thumb_func_start sub_8081898
sub_8081898: @ 0x08081898
	push {r4, r5, r6, lr}
	ldr r6, _080818F4 @ =gCurTask
	ldr r0, [r6]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	ldr r4, [r5, #0x20]
	adds r0, r5, #0
	bl sub_807C14C
	adds r0, r5, #0
	bl sub_80816C0
	ldr r0, [r4, #0x10]
	asrs r0, r0, #8
	ldr r1, _080818F8 @ =0x0000066C
	cmp r0, r1
	ble _080818EC
	ldr r1, _080818FC @ =gCamera
	movs r0, #0x10
	str r0, [r1, #0x10]
	adds r0, r5, #0
	bl sub_807BCCC
	adds r0, r5, #0
	bl sub_807BEF0
	adds r0, r5, #0
	bl sub_807D6C4
	adds r0, r5, #0
	bl sub_807CBC8
	movs r1, #0
	strb r1, [r5, #0x10]
	movs r0, #1
	strh r0, [r5, #8]
	strh r1, [r5, #0xc]
	ldr r1, [r6]
	ldr r0, _08081900 @ =sub_807B9B8
	str r0, [r1, #8]
_080818EC:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080818F4: .4byte gCurTask
_080818F8: .4byte 0x0000066C
_080818FC: .4byte gCamera
_08081900: .4byte sub_807B9B8

	thumb_func_start sub_8081904
sub_8081904: @ 0x08081904
	push {r4, r5, lr}
	ldr r5, _08081930 @ =gCurTask
	ldr r0, [r5]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	adds r0, r4, #0
	bl sub_807C14C
	adds r0, r4, #0
	bl sub_80816C0
	ldr r0, [r4, #4]
	ldrb r0, [r0]
	cmp r0, #3
	bne _08081934
	ldr r0, [r5]
	bl TaskDestroy
	b _0808194E
	.align 2, 0
_08081930: .4byte gCurTask
_08081934:
	bl sub_8079FFC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08081948
	ldr r1, [r5]
	ldr r0, _08081944 @ =sub_8081958
	b _0808194C
	.align 2, 0
_08081944: .4byte sub_8081958
_08081948:
	ldr r1, [r5]
	ldr r0, _08081954 @ =sub_807B808
_0808194C:
	str r0, [r1, #8]
_0808194E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08081954: .4byte sub_807B808

	thumb_func_start sub_8081958
sub_8081958: @ 0x08081958
	push {r4, r5, lr}
	ldr r5, _08081978 @ =gCurTask
	ldr r2, [r5]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, [r4, #4]
	ldrb r0, [r0]
	cmp r0, #3
	bne _0808197C
	adds r0, r2, #0
	bl TaskDestroy
	b _080819B2
	.align 2, 0
_08081978: .4byte gCurTask
_0808197C:
	adds r0, r4, #0
	bl sub_807C14C
	adds r0, r4, #0
	bl sub_80816C0
	ldr r0, [r4, #4]
	ldrb r0, [r0]
	cmp r0, #2
	bne _080819B2
	bl sub_807A074
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080819B2
	movs r0, #0
	bl sub_807FB7C
	movs r0, #0xa
	bl sub_807FB7C
	movs r0, #0xb
	bl sub_807FB7C
	ldr r1, [r5]
	ldr r0, _080819B8 @ =sub_80819BC
	str r0, [r1, #8]
_080819B2:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080819B8: .4byte sub_80819BC

	thumb_func_start sub_80819BC
sub_80819BC: @ 0x080819BC
	push {r4, r5, lr}
	ldr r5, _080819DC @ =gCurTask
	ldr r2, [r5]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, [r4, #4]
	ldrb r0, [r0]
	cmp r0, #3
	bne _080819E0
	adds r0, r2, #0
	bl TaskDestroy
	b _08081A06
	.align 2, 0
_080819DC: .4byte gCurTask
_080819E0:
	adds r0, r4, #0
	bl sub_807C14C
	adds r0, r4, #0
	bl sub_80816C0
	ldr r0, [r4, #4]
	ldrb r0, [r0]
	cmp r0, #2
	bne _08081A06
	movs r0, #5
	strh r0, [r4, #8]
	movs r0, #0xa
	strh r0, [r4, #0xc]
	bl sub_807A4BC
	ldr r1, [r5]
	ldr r0, _08081A0C @ =sub_807B808
	str r0, [r1, #8]
_08081A06:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08081A0C: .4byte sub_807B808

	thumb_func_start sub_8081A10
sub_8081A10: @ 0x08081A10
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r0, #0
	strh r0, [r4, #0x1c]
	strh r0, [r4, #0x18]
	strh r0, [r4, #0x1a]
	movs r0, #0x96
	strh r0, [r4, #0x30]
	ldr r5, _08081A38 @ =sub_8081A3C
	adds r0, r4, #0
	adds r1, r5, #0
	bl SetPlayerCallback
	adds r0, r4, #0
	bl _call_via_r5
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08081A38: .4byte sub_8081A3C

	thumb_func_start sub_8081A3C
sub_8081A3C: @ 0x08081A3C
	bx lr
	.align 2, 0

	thumb_func_start sub_8081A40
sub_8081A40: @ 0x08081A40
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r0, #0x94
	lsls r0, r0, #2
	adds r4, r5, r0
	ldr r0, [r4]
	cmp r0, #0
	beq _08081A58
	bl VramFree
	movs r0, #0
	str r0, [r4]
_08081A58:
	movs r0, #0x8a
	lsls r0, r0, #2
	adds r4, r5, r0
	ldr r0, [r4]
	cmp r0, #0
	beq _08081A6C
	bl VramFree
	movs r0, #0
	str r0, [r4]
_08081A6C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8081A74
sub_8081A74: @ 0x08081A74
	push {lr}
	lsls r1, r1, #0x18
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	cmp r1, #0
	bne _08081A98
	movs r1, #0x8a
	lsls r1, r1, #2
	adds r3, r0, r1
	ldr r1, _08081A9C @ =gUnknown_080D5C38
	lsls r2, r2, #2
	adds r0, r2, r1
	ldrh r0, [r0]
	strh r0, [r3, #0xc]
	adds r1, #2
	adds r2, r2, r1
	ldrh r0, [r2]
	strb r0, [r3, #0x1a]
_08081A98:
	pop {r0}
	bx r0
	.align 2, 0
_08081A9C: .4byte gUnknown_080D5C38

	thumb_func_start sub_8081AA0
sub_8081AA0: @ 0x08081AA0
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r0, #0x9e
	lsls r0, r0, #2
	adds r4, r5, r0
	ldr r0, [r4]
	cmp r0, #0
	beq _08081AB8
	bl VramFree
	movs r0, #0
	str r0, [r4]
_08081AB8:
	movs r0, #0xa8
	lsls r0, r0, #2
	adds r4, r5, r0
	ldr r0, [r4]
	cmp r0, #0
	beq _08081ACC
	bl VramFree
	movs r0, #0
	str r0, [r4]
_08081ACC:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8081AD4
sub_8081AD4: @ 0x08081AD4
	push {lr}
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	cmp r1, #0
	beq _08081AE8
	cmp r1, #1
	beq _08081AF8
	b _08081B10
_08081AE8:
	movs r1, #0x9e
	lsls r1, r1, #2
	adds r3, r0, r1
	ldr r1, _08081AF4 @ =gUnknown_080D5C08
	b _08081B00
	.align 2, 0
_08081AF4: .4byte gUnknown_080D5C08
_08081AF8:
	movs r1, #0xa8
	lsls r1, r1, #2
	adds r3, r0, r1
	ldr r1, _08081B14 @ =gUnknown_080D5C20
_08081B00:
	lsls r2, r2, #2
	adds r0, r2, r1
	ldrh r0, [r0]
	strh r0, [r3, #0xc]
	adds r1, #2
	adds r2, r2, r1
	ldrh r0, [r2]
	strb r0, [r3, #0x1a]
_08081B10:
	pop {r0}
	bx r0
	.align 2, 0
_08081B14: .4byte gUnknown_080D5C20

	thumb_func_start sub_8081B18
sub_8081B18: @ 0x08081B18
	bx lr
	.align 2, 0
_08081B1C:
	.byte 0x70, 0x47, 0x00, 0x00
	.byte 0x70, 0x47, 0x00, 0x00

	thumb_func_start sub_8081B24
sub_8081B24: @ 0x08081B24
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	mov sb, r0
	mov r8, r1
	adds r7, r2, #0
	ldr r0, _08081B90 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	movs r6, #0
_08081B42:
	lsls r0, r6, #2
	adds r1, r5, #0
	adds r1, #0x20
	adds r1, r1, r0
	ldr r4, [r1]
	adds r0, r4, #0
	bl sub_802C080
	cmp r0, #0
	bne _08081BA4
	ldr r0, [r4, #4]
	movs r1, #0x20
	ands r0, r1
	cmp r0, #0
	beq _08081B94
	adds r0, r5, #0
	adds r0, #0x7c
	ldr r1, [r4, #0x6c]
	cmp r1, r0
	beq _08081B7C
	adds r0, #0x28
	cmp r1, r0
	beq _08081B7C
	adds r0, #0x28
	cmp r1, r0
	beq _08081B7C
	adds r0, #0x28
	cmp r1, r0
	bne _08081BA4
_08081B7C:
	str r4, [sp]
	mov r0, sb
	mov r2, r8
	asrs r1, r2, #8
	asrs r2, r7, #8
	movs r3, #0
	bl sub_8020CE0
	b _08081BA4
	.align 2, 0
_08081B90: .4byte gCurTask
_08081B94:
	str r4, [sp]
	mov r0, sb
	mov r2, r8
	asrs r1, r2, #8
	asrs r2, r7, #8
	movs r3, #0
	bl sub_8020CE0
_08081BA4:
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #1
	bls _08081B42
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8081BBC
sub_8081BBC: @ 0x08081BBC
	push {lr}
	adds r2, r0, #0
	ldrb r0, [r2]
	cmp r0, #0
	beq _08081BCE
	subs r0, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	b _08081BD0
_08081BCE:
	movs r1, #0
_08081BD0:
	ldr r0, _08081BE4 @ =gUnknown_080D5C48
	adds r0, r1, r0
	ldrb r0, [r0]
	movs r1, #0
	strh r0, [r2, #8]
	strh r1, [r2, #0xc]
	movs r0, #5
	strb r0, [r2, #1]
	pop {r0}
	bx r0
	.align 2, 0
_08081BE4: .4byte gUnknown_080D5C48

	thumb_func_start sub_8081BE8
sub_8081BE8: @ 0x08081BE8
	push {lr}
	adds r2, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	cmp r1, #0
	beq _08081BFA
	cmp r1, #1
	beq _08081BFE
	b _08081C02
_08081BFA:
	movs r0, #0xa
	b _08081C00
_08081BFE:
	movs r0, #0x64
_08081C00:
	strh r0, [r2, #0xc]
_08081C02:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8081C08
sub_8081C08: @ 0x08081C08
	movs r1, #0x3c
	strh r1, [r0, #0x14]
	movs r1, #0x8a
	lsls r1, r1, #2
	adds r0, r0, r1
	ldr r2, _08081C20 @ =gUnknown_080D5C38
	ldrh r1, [r2]
	strh r1, [r0, #0xc]
	ldrh r1, [r2, #2]
	strb r1, [r0, #0x1a]
	bx lr
	.align 2, 0
_08081C20: .4byte gUnknown_080D5C38

	thumb_func_start sub_8081C24
sub_8081C24: @ 0x08081C24
	push {r4, lr}
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r1, _08081C48 @ =gStageData
	movs r0, #5
	strb r0, [r1, #4]
	ldr r0, [r4, #0x18]
	cmp r0, #0
	beq _08081C42
	bl VramFree
	movs r0, #0
	str r0, [r4, #0x18]
_08081C42:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08081C48: .4byte gStageData

	thumb_func_start sub_8081C4C
sub_8081C4C: @ 0x08081C4C
	push {r4, lr}
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, [r4, #8]
	cmp r0, #0
	beq _08081C64
	bl VramFree
	movs r0, #0
	str r0, [r4, #8]
_08081C64:
	ldr r0, [r4, #0xc]
	cmp r0, #0
	beq _08081C6E
	bl VramFree
_08081C6E:
	ldr r0, [r4, #0x10]
	cmp r0, #0
	beq _08081C78
	bl VramFree
_08081C78:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8081C80
sub_8081C80: @ 0x08081C80
	push {r4, r5, lr}
	sub sp, #4
	ldr r0, _08081CB0 @ =sub_8081E74
	ldr r1, _08081CB4 @ =0x00000878
	movs r2, #0xc4
	lsls r2, r2, #6
	ldr r3, _08081CB8 @ =sub_8081D64
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	ldrh r2, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r5, r2, r1
	ldr r2, _08081CBC @ =gStageData
	adds r1, r2, #0
	adds r1, #0x88
	str r0, [r1]
	ldrb r0, [r2, #1]
	cmp r0, #0
	bne _08081CC0
	movs r0, #0xc
	b _08081CC2
	.align 2, 0
_08081CB0: .4byte sub_8081E74
_08081CB4: .4byte 0x00000878
_08081CB8: .4byte sub_8081D64
_08081CBC: .4byte gStageData
_08081CC0:
	movs r0, #0xa
_08081CC2:
	strb r0, [r5]
	movs r4, #0
	movs r2, #0
	movs r3, #1
	movs r0, #1
	strh r0, [r5, #0x10]
	strh r2, [r5, #0x12]
	strh r0, [r5, #4]
	strh r2, [r5, #8]
	strb r4, [r5, #1]
	strb r4, [r5, #0xa]
	strb r4, [r5, #0xc]
	strb r4, [r5, #0xd]
	str r2, [r5, #0x6c]
	strb r4, [r5, #0x17]
	str r2, [r5, #0x18]
	ldr r1, _08081D54 @ =gBgScrollRegs
	movs r0, #0x68
	strh r0, [r1]
	movs r0, #0x30
	strh r0, [r1, #2]
	ldr r1, _08081D58 @ =gCamera
	adds r1, #0x5c
	ldrh r0, [r1]
	orrs r0, r3
	strh r0, [r1]
	movs r1, #0xe3
	lsls r1, r1, #2
	adds r0, r5, r1
	str r2, [r0]
	adds r1, #0x28
	adds r0, r5, r1
	str r2, [r0]
	adds r1, #0xa0
	adds r0, r5, r1
	str r2, [r0]
	ldr r1, _08081D5C @ =0x00000814
	adds r0, r5, r1
	str r2, [r0]
	str r2, [r5, #0x1c]
	str r2, [r5, #0x20]
	str r2, [r5, #0x24]
	str r2, [r5, #0x6c]
	str r2, [r5, #0x74]
	bl sub_807A4BC
	ldr r1, _08081D60 @ =gPlayers
	str r1, [r5, #0x28]
	movs r2, #0xa8
	lsls r2, r2, #1
	adds r0, r1, r2
	str r0, [r5, #0x2c]
	subs r2, #8
	adds r1, r1, r2
	adds r0, r5, #0
	adds r0, #0x58
	str r0, [r1]
	ldr r0, [r5, #0x2c]
	adds r0, r0, r2
	adds r1, r5, #0
	adds r1, #0x68
	str r1, [r0]
	adds r0, r5, #0
	adds r0, #0x70
	strb r4, [r0]
	adds r0, r5, #0
	bl sub_80853D8
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08081D54: .4byte gBgScrollRegs
_08081D58: .4byte gCamera
_08081D5C: .4byte 0x00000814
_08081D60: .4byte gPlayers

	thumb_func_start sub_8081D64
sub_8081D64: @ 0x08081D64
	push {r4, r5, lr}
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r4, r0
	ldr r1, _08081DE4 @ =0x0300038C
	adds r0, r4, r1
	ldr r0, [r0]
	cmp r0, #0
	beq _08081D7C
	bl VramFree
_08081D7C:
	ldr r1, _08081DE8 @ =0x030003B4
	adds r0, r4, r1
	ldr r0, [r0]
	cmp r0, #0
	beq _08081D8A
	bl VramFree
_08081D8A:
	ldr r1, _08081DEC @ =0x03000454
	adds r0, r4, r1
	ldr r0, [r0]
	cmp r0, #0
	beq _08081D98
	bl VramFree
_08081D98:
	ldr r1, _08081DF0 @ =gUnknown_03000814
	adds r0, r4, r1
	ldr r0, [r0]
	cmp r0, #0
	beq _08081DA6
	bl VramFree
_08081DA6:
	ldrb r0, [r5, #1]
	cmp r0, #6
	beq _08081DDE
	ldr r0, [r5, #0x1c]
	cmp r0, #0
	beq _08081DB6
	bl VramFree
_08081DB6:
	ldr r0, [r5, #0x20]
	cmp r0, #0
	beq _08081DC0
	bl VramFree
_08081DC0:
	ldr r0, [r5, #0x24]
	cmp r0, #0
	beq _08081DCA
	bl VramFree
_08081DCA:
	ldr r0, [r5, #0x6c]
	cmp r0, #0
	beq _08081DD4
	bl VramFree
_08081DD4:
	ldr r0, [r5, #0x74]
	cmp r0, #0
	beq _08081DDE
	bl VramFree
_08081DDE:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08081DE4: .4byte 0x0300038C
_08081DE8: .4byte 0x030003B4
_08081DEC: .4byte 0x03000454
_08081DF0: .4byte gUnknown_03000814

	thumb_func_start sub_8081DF4
sub_8081DF4: @ 0x08081DF4
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r0, _08081E5C @ =sub_8086FA4
	ldr r1, _08081E60 @ =0x00000878
	movs r2, #0x84
	lsls r2, r2, #6
	ldr r3, _08081E64 @ =sub_8086ED8
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	ldrh r3, [r0, #6]
	movs r4, #0xc0
	lsls r4, r4, #0x12
	adds r4, r3, r4
	str r5, [r4, #0x30]
	movs r1, #0
	movs r2, #0
	movs r0, #1
	strh r0, [r4, #4]
	strh r2, [r4, #8]
	movs r0, #6
	strb r0, [r4, #1]
	strb r1, [r4, #0xa]
	strb r1, [r4, #0xc]
	strb r1, [r4, #0xd]
	strb r1, [r4, #0x17]
	str r2, [r4, #0x18]
	str r2, [r4, #0x6c]
	ldr r0, _08081E68 @ =gPlayers
	str r0, [r4, #0x28]
	movs r1, #0xa8
	lsls r1, r1, #1
	adds r0, r0, r1
	str r0, [r4, #0x2c]
	ldr r1, _08081E6C @ =0x0300038C
	adds r0, r3, r1
	str r2, [r0]
	ldr r0, _08081E70 @ =0x03000454
	adds r3, r3, r0
	str r2, [r3]
	adds r0, r4, #0
	bl sub_8081FBC
	adds r0, r4, #0
	bl sub_8082A4C
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08081E5C: .4byte sub_8086FA4
_08081E60: .4byte 0x00000878
_08081E64: .4byte sub_8086ED8
_08081E68: .4byte gPlayers
_08081E6C: .4byte 0x0300038C
_08081E70: .4byte 0x03000454

	thumb_func_start sub_8081E74
sub_8081E74: @ 0x08081E74
	push {r4, r5, r6, lr}
	ldr r6, _08081EDC @ =gCurTask
	ldr r0, [r6]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	ldr r0, _08081EE0 @ =gStageData
	ldrb r0, [r0, #4]
	cmp r0, #3
	bne _08081ED4
	ldr r2, _08081EE4 @ =gDispCnt
	ldrh r1, [r2]
	ldr r0, _08081EE8 @ =0x00009FFF
	ands r0, r1
	ldr r1, _08081EEC @ =0x0000FEFF
	ands r0, r1
	strh r0, [r2]
	ldr r1, _08081EF0 @ =gCamera
	adds r1, #0x5c
	ldrh r2, [r1]
	ldr r0, _08081EF4 @ =0x0000FFFE
	ands r0, r2
	movs r4, #0
	strh r0, [r1]
	movs r0, #1
	strh r0, [r5, #4]
	strh r4, [r5, #8]
	movs r0, #0x3c
	strh r0, [r5, #6]
	adds r0, r5, #0
	bl sub_8081FBC
	adds r0, r5, #0
	bl sub_80824F4
	movs r0, #0x10
	bl VramMalloc
	str r0, [r5, #0x1c]
	movs r0, #0x10
	bl VramMalloc
	str r0, [r5, #0x20]
	str r4, [r5, #0x24]
	ldr r1, [r6]
	ldr r0, _08081EF8 @ =sub_8086F08
	str r0, [r1, #8]
_08081ED4:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08081EDC: .4byte gCurTask
_08081EE0: .4byte gStageData
_08081EE4: .4byte gDispCnt
_08081EE8: .4byte 0x00009FFF
_08081EEC: .4byte 0x0000FEFF
_08081EF0: .4byte gCamera
_08081EF4: .4byte 0x0000FFFE
_08081EF8: .4byte sub_8086F08

	thumb_func_start sub_8081EFC
sub_8081EFC: @ 0x08081EFC
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r1, _08081F14 @ =gStageData
	adds r4, r1, #0
	adds r4, #0xac
	ldrh r3, [r4]
	cmp r3, #0
	beq _08081F18
	ldrb r0, [r5]
	cmp r0, #0
	bne _08081F6C
	b _08081FB0
	.align 2, 0
_08081F14: .4byte gStageData
_08081F18:
	ldrb r0, [r1, #4]
	cmp r0, #7
	beq _08081F46
	ldr r2, [r5, #0x28]
	ldr r0, [r2, #4]
	movs r4, #0x80
	lsls r4, r4, #1
	ands r0, r4
	cmp r0, #0
	bne _08081F34
	ldr r1, _08081F68 @ =sub_80105F0
	adds r0, r2, #0
	bl SetPlayerCallback
_08081F34:
	ldr r2, [r5, #0x2c]
	ldr r0, [r2, #4]
	ands r0, r4
	cmp r0, #0
	bne _08081F46
	ldr r1, _08081F68 @ =sub_80105F0
	adds r0, r2, #0
	bl SetPlayerCallback
_08081F46:
	adds r3, r5, #0
	adds r3, #0x5f
	ldrb r0, [r3]
	adds r2, r0, #0
	cmp r2, #1
	bne _08081FB0
	adds r0, #1
	movs r1, #0
	strb r0, [r3]
	strh r2, [r5, #4]
	strh r1, [r5, #8]
	movs r0, #7
	strb r0, [r5, #1]
	ldrb r0, [r5, #0xc]
	strb r0, [r5, #0xd]
	b _08081FB0
	.align 2, 0
_08081F68: .4byte sub_80105F0
_08081F6C:
	ldrb r0, [r1, #4]
	cmp r0, #7
	bne _08081F76
	strb r0, [r5, #1]
	b _08081FB0
_08081F76:
	ldr r2, [r5, #0x28]
	ldr r0, [r2, #4]
	movs r1, #0x80
	lsls r1, r1, #1
	ands r0, r1
	cmp r0, #0
	bne _08081FB0
	ldrh r0, [r5, #6]
	subs r0, #1
	strh r0, [r5, #6]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _08081FB0
	movs r0, #0x3c
	strh r0, [r5, #6]
	subs r0, r3, #1
	strh r0, [r4]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _08081FB0
	ldr r4, _08081FB8 @ =sub_80105F0
	adds r0, r2, #0
	adds r1, r4, #0
	bl SetPlayerCallback
	ldr r0, [r5, #0x2c]
	adds r1, r4, #0
	bl SetPlayerCallback
_08081FB0:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08081FB8: .4byte sub_80105F0

	thumb_func_start sub_8081FBC
sub_8081FBC: @ 0x08081FBC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	ldrb r0, [r7, #1]
	cmp r0, #6
	beq _08082014
	adds r4, r7, #0
	adds r4, #0x9c
	ldr r0, _08082010 @ =gCamera
	ldr r1, [r0]
	adds r0, r1, #0
	adds r0, #0xc8
	lsls r0, r0, #8
	str r0, [r4]
	adds r3, r7, #0
	adds r3, #0xa0
	movs r2, #0xf0
	lsls r2, r2, #7
	str r2, [r3]
	adds r0, r7, #0
	adds r0, #0xf4
	adds r1, #0x78
	lsls r1, r1, #8
	str r1, [r0]
	adds r0, #4
	str r2, [r0]
	subs r0, #0x48
	str r2, [r0]
	adds r1, r7, #0
	adds r1, #0xb4
	movs r0, #0
	str r0, [r1]
	movs r0, #0x84
	lsls r0, r0, #1
	adds r1, r7, r0
	movs r0, #1
	b _0808204C
	.align 2, 0
_08082010: .4byte gCamera
_08082014:
	adds r4, r7, #0
	adds r4, #0x9c
	ldr r0, _08082110 @ =gCamera
	ldr r2, [r0]
	adds r2, #0x78
	lsls r2, r2, #8
	str r2, [r4]
	adds r3, r7, #0
	adds r3, #0xa0
	ldr r0, [r0, #4]
	adds r0, #0x50
	lsls r0, r0, #8
	str r0, [r3]
	adds r1, r7, #0
	adds r1, #0xf4
	str r2, [r1]
	adds r1, #4
	str r0, [r1]
	adds r0, r7, #0
	adds r0, #0xb0
	movs r1, #0
	str r1, [r0]
	adds r0, #4
	str r1, [r0]
	movs r0, #0x84
	lsls r0, r0, #1
	adds r1, r7, r0
	movs r0, #2
_0808204C:
	strb r0, [r1]
	mov r8, r4
	mov sl, r3
	adds r0, r7, #0
	adds r0, #0xfc
	movs r4, #0
	str r4, [r0]
	movs r1, #0xb8
	adds r1, r1, r7
	mov sb, r1
	movs r5, #0
	strh r4, [r1]
	adds r1, r7, #0
	adds r1, #0xa4
	movs r0, #0x80
	lsls r0, r0, #3
	str r0, [r1]
	adds r0, r7, #0
	adds r0, #0xee
	strb r5, [r0]
	adds r0, #1
	strb r5, [r0]
	adds r0, #1
	strh r4, [r0]
	adds r0, r7, #0
	movs r1, #0
	bl sub_8086FF8
	movs r0, #0xe3
	lsls r0, r0, #2
	adds r6, r7, r0
	ldr r1, _08082114 @ =0x0000083C
	adds r3, r7, r1
	movs r0, #0x80
	str r3, [sp]
	bl VramMalloc
	str r0, [r6]
	ldr r0, _08082118 @ =0x000004FD
	strh r0, [r6, #0xc]
	strb r5, [r6, #0x1a]
	movs r0, #0xa0
	lsls r0, r0, #2
	strh r0, [r6, #0x14]
	strh r4, [r6, #0xe]
	strh r4, [r6, #0x16]
	movs r0, #0xff
	strb r0, [r6, #0x1b]
	movs r0, #0x10
	strb r0, [r6, #0x1c]
	strb r5, [r6, #0x1f]
	subs r0, #0x11
	str r0, [r6, #0x20]
	movs r1, #0x80
	lsls r1, r1, #5
	str r1, [r6, #8]
	ldrb r0, [r7, #1]
	ldr r3, [sp]
	cmp r0, #6
	beq _080820CA
	movs r0, #0x2a
	orrs r0, r1
	str r0, [r6, #8]
_080820CA:
	mov r1, r8
	ldr r0, [r1]
	asrs r0, r0, #8
	ldr r2, _08082110 @ =gCamera
	ldr r1, [r2]
	subs r0, r0, r1
	strh r0, [r6, #0x10]
	mov r1, sl
	ldr r0, [r1]
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	strh r0, [r6, #0x12]
	mov r1, sb
	ldrh r0, [r1]
	strh r0, [r3]
	ldrh r0, [r6, #0x10]
	strh r0, [r3, #6]
	ldrh r0, [r6, #0x12]
	strh r0, [r3, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r3, #2]
	strh r0, [r3, #4]
	adds r0, r6, #0
	bl UpdateSpriteAnimation
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08082110: .4byte gCamera
_08082114: .4byte 0x0000083C
_08082118: .4byte 0x000004FD

	thumb_func_start sub_808211C
sub_808211C: @ 0x0808211C
	push {r4, r5, r6, lr}
	mov ip, r0
	ldr r0, [r0, #0x28]
	ldr r0, [r0, #0x10]
	asrs r0, r0, #8
	ldr r2, _08082148 @ =gCamera
	adds r1, r2, #0
	adds r1, #0x6a
	movs r3, #0
	ldrsh r1, [r1, r3]
	lsls r1, r1, #1
	adds r1, r0, r1
	ldr r0, [r2]
	subs r0, r1, r0
	adds r1, r0, #0
	subs r1, #0xb4
	adds r3, r2, #0
	cmp r1, #0
	bgt _0808214C
	movs r1, #0
	b _0808214E
	.align 2, 0
_08082148: .4byte gCamera
_0808214C:
	rsbs r1, r1, #0
_0808214E:
	ldr r0, _08082180 @ =gStageData
	ldrb r0, [r0, #3]
	cmp r0, #5
	bne _08082186
	cmp r1, #0
	bne _08082186
	mov r4, ip
	ldr r0, [r4, #0x2c]
	ldr r0, [r0, #0x10]
	asrs r0, r0, #8
	adds r1, r3, #0
	adds r1, #0x6a
	movs r5, #0
	ldrsh r1, [r1, r5]
	lsls r1, r1, #1
	adds r1, r0, r1
	ldr r0, [r3]
	subs r0, r1, r0
	adds r1, r0, #0
	subs r1, #0xb4
	cmp r1, #0
	bgt _08082184
	movs r1, #0
	b _08082186
	.align 2, 0
_08082180: .4byte gStageData
_08082184:
	rsbs r1, r1, #0
_08082186:
	mov r2, ip
	ldrb r0, [r2, #1]
	cmp r0, #7
	bne _08082190
	movs r1, #0
_08082190:
	adds r4, r3, #0
	adds r4, #0x6a
	movs r5, #0
	ldrsh r0, [r4, r5]
	mov r5, ip
	ldrb r2, [r5, #0x17]
	cmp r0, #0
	bne _080821A4
	cmp r2, #0
	beq _080821C0
_080821A4:
	cmp r2, #0
	beq _080821AE
	subs r0, r2, #1
	mov r1, ip
	strb r0, [r1, #0x17]
_080821AE:
	movs r2, #0
	ldrsh r0, [r4, r2]
	cmp r0, #0
	beq _080821BC
	movs r0, #1
	mov r4, ip
	strb r0, [r4, #0x17]
_080821BC:
	mov r5, ip
	ldr r1, [r5, #0x18]
_080821C0:
	mov r0, ip
	str r1, [r0, #0x18]
	mov r2, ip
	adds r2, #0xf4
	adds r1, #0x78
	ldr r0, [r3]
	adds r0, r0, r1
	lsls r0, r0, #8
	str r0, [r2]
	mov r1, ip
	adds r1, #0xee
	movs r0, #0
	strb r0, [r1]
	mov r0, ip
	adds r0, #0xed
	ldrb r0, [r0]
	adds r6, r2, #0
	adds r5, r1, #0
	mov r3, ip
	adds r3, #0xb0
	mov r4, ip
	adds r4, #0xb4
	cmp r0, #8
	bls _080821F2
	b _08082360
_080821F2:
	lsls r0, r0, #2
	ldr r1, _080821FC @ =_08082200
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080821FC: .4byte _08082200
_08082200: @ jump table
	.4byte _08082360 @ case 0
	.4byte _08082224 @ case 1
	.4byte _08082248 @ case 2
	.4byte _08082270 @ case 3
	.4byte _080822C0 @ case 4
	.4byte _080822F0 @ case 5
	.4byte _08082310 @ case 6
	.4byte _08082360 @ case 7
	.4byte _08082338 @ case 8
_08082224:
	mov r0, ip
	adds r0, #0xb0
	ldr r1, [r0]
	ldr r2, _08082244 @ =0xFFFFFE00
	adds r1, r1, r2
	str r1, [r0]
	adds r3, r0, #0
	mov r4, ip
	adds r4, #0xb4
	cmp r1, #0
	ble _0808223C
	b _08082360
_0808223C:
	movs r0, #0
	str r0, [r3]
	b _0808232C
	.align 2, 0
_08082244: .4byte 0xFFFFFE00
_08082248:
	mov r0, ip
	adds r0, #0xb0
	ldr r1, [r0]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r1, r1, r3
	str r1, [r0]
	ldr r2, _0808226C @ =0x000077FF
	adds r3, r0, #0
	mov r4, ip
	adds r4, #0xb4
	cmp r1, r2
	bgt _08082264
	b _08082360
_08082264:
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r3]
	b _0808232C
	.align 2, 0
_0808226C: .4byte 0x000077FF
_08082270:
	ldr r5, _080822BC @ =gSineTable
	mov r4, ip
	adds r4, #0xe0
	ldrh r0, [r4]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r5
	movs r2, #0
	ldrsh r1, [r0, r2]
	mov r2, ip
	adds r2, #0xfc
	ldr r0, [r2]
	muls r0, r1, r0
	mov r3, ip
	adds r3, #0xb0
	cmp r0, #0
	bge _08082298
	adds r0, #0x3f
_08082298:
	asrs r0, r0, #6
	str r0, [r3]
	ldrh r0, [r4]
	lsls r0, r0, #1
	adds r0, r0, r5
	movs r4, #0
	ldrsh r1, [r0, r4]
	ldr r0, [r2]
	muls r0, r1, r0
	mov r4, ip
	adds r4, #0xb4
	cmp r0, #0
	bge _080822B4
	adds r0, #0x3f
_080822B4:
	asrs r0, r0, #6
	str r0, [r4]
	b _08082360
	.align 2, 0
_080822BC: .4byte gSineTable
_080822C0:
	mov r0, ip
	adds r0, #0xb4
	ldr r3, [r0]
	adds r4, r0, #0
	cmp r3, #0
	bge _080822DE
	adds r0, r3, #0
	adds r0, #0x80
	str r0, [r4]
	mov r3, ip
	adds r3, #0xb0
	cmp r0, #0
	blt _08082360
	movs r0, #0
	b _0808232A
_080822DE:
	adds r0, r3, #0
	subs r0, #0x80
	str r0, [r4]
	mov r3, ip
	adds r3, #0xb0
	cmp r0, #0
	bgt _08082360
	movs r0, #0
	b _0808232A
_080822F0:
	mov r1, ip
	adds r1, #0xb4
	ldr r0, [r1]
	subs r0, #0x80
	str r0, [r1]
	ldr r2, _0808230C @ =0xFFFFA000
	mov r3, ip
	adds r3, #0xb0
	adds r4, r1, #0
	cmp r0, r2
	bgt _08082360
	str r2, [r4]
	b _0808232C
	.align 2, 0
_0808230C: .4byte 0xFFFFA000
_08082310:
	mov r0, ip
	adds r0, #0xb4
	ldr r1, [r0]
	adds r1, #0x80
	str r1, [r0]
	ldr r2, _08082334 @ =0x00005FFF
	mov r3, ip
	adds r3, #0xb0
	adds r4, r0, #0
	cmp r1, r2
	ble _08082360
	movs r0, #0xc0
	lsls r0, r0, #7
_0808232A:
	str r0, [r4]
_0808232C:
	movs r0, #1
	strb r0, [r5]
	b _08082360
	.align 2, 0
_08082334: .4byte 0x00005FFF
_08082338:
	mov r4, ip
	adds r4, #0xa8
	ldr r0, [r4]
	adds r0, #4
	str r0, [r4]
	mov r3, ip
	adds r3, #0xb0
	mov r1, ip
	adds r1, #0xa4
	ldr r0, [r3]
	ldr r1, [r1]
	adds r0, r0, r1
	str r0, [r3]
	mov r2, ip
	adds r2, #0xb4
	ldr r0, [r2]
	ldr r1, [r4]
	adds r0, r0, r1
	str r0, [r2]
	adds r4, r2, #0
_08082360:
	mov r2, ip
	adds r2, #0x9c
	ldr r0, [r6]
	ldr r1, [r3]
	adds r0, r0, r1
	str r0, [r2]
	adds r2, #4
	mov r0, ip
	adds r0, #0xf8
	ldr r0, [r0]
	ldr r1, [r4]
	adds r0, r0, r1
	str r0, [r2]
	mov r0, ip
	movs r1, #0
	bl sub_8082E2C
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_8082388
sub_8082388: @ 0x08082388
	push {r4, r5, lr}
	adds r3, r0, #0
	movs r0, #0xe3
	lsls r0, r0, #2
	adds r4, r3, r0
	ldr r1, _080823A8 @ =0x0000083C
	adds r5, r3, r1
	movs r1, #0x84
	lsls r1, r1, #1
	adds r0, r3, r1
	ldrb r0, [r0]
	cmp r0, #1
	beq _080823AC
	cmp r0, #2
	beq _080823F4
	b _0808241E
	.align 2, 0
_080823A8: .4byte 0x0000083C
_080823AC:
	adds r0, r3, #0
	adds r0, #0x9c
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r2, _080823F0 @ =gCamera
	ldr r1, [r2]
	subs r0, r0, r1
	strh r0, [r4, #0x10]
	adds r0, r3, #0
	adds r0, #0xa0
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	strh r0, [r4, #0x12]
	adds r0, r3, #0
	adds r0, #0xb8
	ldrh r0, [r0]
	strh r0, [r5]
	ldrh r0, [r4, #0x10]
	strh r0, [r5, #6]
	ldrh r0, [r4, #0x12]
	strh r0, [r5, #8]
	adds r0, r4, #0
	adds r1, r5, #0
	bl TransformSprite
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	b _0808241E
	.align 2, 0
_080823F0: .4byte gCamera
_080823F4:
	adds r0, r3, #0
	adds r0, #0x9c
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r2, _08082424 @ =gCamera
	ldr r1, [r2]
	subs r0, r0, r1
	strh r0, [r4, #0x10]
	adds r0, r3, #0
	adds r0, #0xa0
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
_0808241E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08082424: .4byte gCamera

	thumb_func_start sub_8082428
sub_8082428: @ 0x08082428
	push {lr}
	adds r1, r0, #0
	movs r0, #0xe3
	lsls r0, r0, #2
	adds r2, r1, r0
	adds r3, r1, #0
	adds r3, #0xef
	ldrb r0, [r3]
	cmp r0, #0x34
	beq _080824EA
	cmp r0, #0x34
	bgt _0808244A
	cmp r0, #0x32
	beq _08082462
	cmp r0, #0x32
	bgt _08082478
	b _080824EA
_0808244A:
	cmp r0, #0x65
	beq _080824A8
	cmp r0, #0x65
	bgt _08082458
	cmp r0, #0x64
	beq _08082494
	b _080824EA
_08082458:
	cmp r0, #0x66
	beq _080824C4
	cmp r0, #0x96
	beq _080824C8
	b _080824EA
_08082462:
	adds r1, #0xf0
	movs r0, #6
	strh r0, [r1]
	ldr r0, _08082474 @ =0x000004FD
	strh r0, [r2, #0xc]
	movs r0, #1
	strb r0, [r2, #0x1a]
	b _080824E4
	.align 2, 0
_08082474: .4byte 0x000004FD
_08082478:
	adds r1, #0xf0
	ldrh r0, [r1]
	subs r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _080824EA
	ldr r0, _08082490 @ =0x000004FD
	strh r0, [r2, #0xc]
	movs r0, #2
	strb r0, [r2, #0x1a]
	b _080824E4
	.align 2, 0
_08082490: .4byte 0x000004FD
_08082494:
	adds r1, #0xf0
	movs r0, #6
	strh r0, [r1]
	ldr r0, _080824A4 @ =0x000004FD
	strh r0, [r2, #0xc]
	movs r0, #1
	strb r0, [r2, #0x1a]
	b _080824E4
	.align 2, 0
_080824A4: .4byte 0x000004FD
_080824A8:
	adds r1, #0xf0
	ldrh r0, [r1]
	subs r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _080824EA
	ldr r0, _080824C0 @ =0x000004FD
	strh r0, [r2, #0xc]
	movs r0, #0
	strb r0, [r2, #0x1a]
	b _080824E4
	.align 2, 0
_080824C0: .4byte 0x000004FD
_080824C4:
	movs r0, #0
	b _080824E8
_080824C8:
	movs r0, #0x84
	lsls r0, r0, #1
	adds r1, r1, r0
	movs r0, #2
	strb r0, [r1]
	movs r1, #0
	ldr r0, _080824F0 @ =0x00000507
	strh r0, [r2, #0xc]
	strb r1, [r2, #0x1a]
	subs r0, #0x47
	strh r0, [r2, #0x14]
	movs r0, #0x80
	lsls r0, r0, #5
	str r0, [r2, #8]
_080824E4:
	ldrb r0, [r3]
	adds r0, #1
_080824E8:
	strb r0, [r3]
_080824EA:
	pop {r0}
	bx r0
	.align 2, 0
_080824F0: .4byte 0x00000507

	thumb_func_start sub_80824F4
sub_80824F4: @ 0x080824F4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	adds r7, r0, #0
	movs r0, #0x10
	bl VramMalloc
	str r0, [sp, #4]
	movs r0, #1
	bl VramMalloc
	str r0, [sp, #8]
	movs r0, #0
	mov r8, r0
	movs r1, #0x80
	str r1, [sp]
_0808251A:
	ldr r2, [sp]
	movs r3, #0x80
	lsls r3, r3, #1
	adds r0, r2, r3
	lsls r0, r0, #1
	ldr r4, _0808276C @ =gSineTable
	adds r0, r0, r4
	movs r5, #0
	ldrsh r1, [r0, r5]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #2
	cmp r0, #0
	bge _08082538
	adds r0, #0x3f
_08082538:
	asrs r4, r0, #6
	ldr r1, [sp]
	lsls r0, r1, #1
	ldr r2, _0808276C @ =gSineTable
	adds r0, r0, r2
	movs r3, #0
	ldrsh r1, [r0, r3]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #2
	cmp r0, #0
	bge _08082552
	adds r0, #0x3f
_08082552:
	asrs r3, r0, #6
	mov r5, r8
	lsls r1, r5, #1
	add r1, r8
	lsls r2, r1, #3
	movs r5, #0x86
	lsls r5, r5, #1
	adds r0, r7, r5
	adds r0, r0, r2
	mov sb, r0
	adds r5, r7, #0
	adds r5, #0x9c
	ldr r0, [r5]
	adds r0, r0, r4
	mov r4, sb
	str r0, [r4]
	movs r4, #0x88
	lsls r4, r4, #1
	adds r0, r7, r4
	adds r0, r0, r2
	mov ip, r0
	adds r4, r7, #0
	adds r4, #0xa0
	ldr r0, [r4]
	adds r0, r0, r3
	mov r3, ip
	str r0, [r3]
	adds r2, r7, r2
	movs r0, #0x90
	lsls r0, r0, #1
	adds r2, r2, r0
	mov r3, sp
	ldrh r3, [r3]
	strh r3, [r2]
	mov r3, r8
	lsls r0, r3, #2
	add r0, r8
	lsls r0, r0, #3
	movs r3, #0xed
	lsls r3, r3, #2
	adds r0, r0, r3
	adds r6, r7, r0
	lsls r1, r1, #2
	ldr r0, _08082770 @ =0x00000848
	adds r1, r1, r0
	adds r3, r7, r1
	ldr r1, [sp, #4]
	str r1, [r6]
	ldr r0, _08082774 @ =0x000004FE
	strh r0, [r6, #0xc]
	movs r0, #1
	strb r0, [r6, #0x1a]
	movs r0, #0xa0
	lsls r0, r0, #2
	strh r0, [r6, #0x14]
	movs r0, #0
	strh r0, [r6, #0xe]
	strh r0, [r6, #0x16]
	movs r0, #0xff
	strb r0, [r6, #0x1b]
	movs r0, #0x10
	strb r0, [r6, #0x1c]
	movs r1, #0
	strb r1, [r6, #0x1f]
	subs r0, #0x11
	str r0, [r6, #0x20]
	movs r0, #0x20
	movs r1, #0x80
	lsls r1, r1, #5
	orrs r0, r1
	mov r1, r8
	adds r1, #0xb
	orrs r1, r0
	str r1, [r6, #8]
	str r5, [sp, #0x14]
	str r4, [sp, #0x18]
	mov r4, r8
	cmp r4, #0
	beq _080825F8
	movs r0, #0x80
	lsls r0, r0, #0xc
	orrs r1, r0
	str r1, [r6, #8]
_080825F8:
	mov r5, sb
	ldr r1, [r5]
	asrs r1, r1, #8
	ldr r4, _08082778 @ =gCamera
	ldr r0, [r4]
	subs r1, r1, r0
	strh r1, [r6, #0x10]
	mov r1, ip
	ldr r0, [r1]
	asrs r0, r0, #8
	ldr r1, [r4, #4]
	subs r0, r0, r1
	strh r0, [r6, #0x12]
	ldr r5, _0808277C @ =0xFFFFFD80
	adds r0, r5, #0
	ldrh r2, [r2]
	adds r0, r0, r2
	ldr r2, _08082780 @ =0x000003FF
	adds r1, r2, #0
	ands r0, r1
	strh r0, [r3]
	ldrh r0, [r6, #0x10]
	strh r0, [r3, #6]
	ldrh r0, [r6, #0x12]
	strh r0, [r3, #8]
	movs r5, #0x80
	lsls r5, r5, #1
	strh r5, [r3, #2]
	adds r0, r5, #0
	strh r0, [r3, #4]
	adds r0, r6, #0
	bl UpdateSpriteAnimation
	movs r5, #0
	mov r1, r8
	lsls r0, r1, #4
	adds r1, #1
	str r1, [sp, #0x10]
	mov r2, r8
	subs r2, r0, r2
	mov sb, r2
	lsls r0, r2, #4
	ldr r3, _08082784 @ =0x00000454
	adds r0, r0, r3
	adds r0, r7, r0
	str r0, [sp, #0xc]
	mov sl, r4
_08082656:
	lsls r1, r5, #2
	adds r1, r1, r5
	lsls r2, r1, #2
	mov r4, sb
	lsls r0, r4, #3
	adds r2, r2, r0
	movs r0, #0xb6
	lsls r0, r0, #1
	adds r3, r7, r0
	adds r3, r3, r2
	ldr r4, [sp, #0x14]
	ldr r0, [r4]
	str r0, [r3]
	movs r0, #0xb8
	lsls r0, r0, #1
	adds r4, r7, r0
	adds r4, r4, r2
	ldr r2, [sp, #0x18]
	ldr r0, [r2]
	str r0, [r4]
	lsls r1, r1, #3
	ldr r0, [sp, #0xc]
	adds r6, r0, r1
	ldr r1, [sp, #8]
	str r1, [r6]
	ldr r0, _08082788 @ =0x000004FF
	strh r0, [r6, #0xc]
	movs r2, #0
	strb r2, [r6, #0x1a]
	subs r0, #0x3f
	strh r0, [r6, #0x14]
	movs r0, #0
	strh r0, [r6, #0xe]
	strh r0, [r6, #0x16]
	movs r0, #0xff
	strb r0, [r6, #0x1b]
	movs r0, #0x10
	strb r0, [r6, #0x1c]
	movs r1, #0
	strb r1, [r6, #0x1f]
	subs r0, #0x11
	str r0, [r6, #0x20]
	movs r2, #0x80
	lsls r2, r2, #5
	str r2, [r6, #8]
	ldr r0, [r3]
	asrs r0, r0, #8
	mov r3, sl
	ldr r1, [r3]
	subs r0, r0, r1
	strh r0, [r6, #0x10]
	ldr r0, [r4]
	asrs r0, r0, #8
	ldr r1, [r3, #4]
	subs r0, r0, r1
	strh r0, [r6, #0x12]
	mov r4, r8
	cmp r4, #0
	bne _080826D0
	cmp r5, #0
	beq _080826D6
_080826D0:
	movs r0, #0x81
	lsls r0, r0, #0xc
	str r0, [r6, #8]
_080826D6:
	adds r0, r6, #0
	bl UpdateSpriteAnimation
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #5
	bls _08082656
	ldr r1, [sp, #0x10]
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	ldr r2, [sp]
	movs r3, #0x80
	lsls r3, r3, #1
	adds r0, r2, r3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	str r0, [sp]
	mov r4, r8
	cmp r4, #3
	bhi _08082704
	b _0808251A
_08082704:
	ldr r5, _0808278C @ =0x00000814
	adds r6, r7, r5
	movs r0, #0x10
	bl VramMalloc
	str r0, [r6]
	movs r3, #0
	movs r1, #0
	ldr r0, _08082790 @ =0x00000504
	strh r0, [r6, #0xc]
	strb r3, [r6, #0x1a]
	movs r0, #0x90
	lsls r0, r0, #2
	strh r0, [r6, #0x14]
	strh r1, [r6, #0xe]
	strh r1, [r6, #0x16]
	movs r0, #0xff
	strb r0, [r6, #0x1b]
	movs r0, #0x10
	strb r0, [r6, #0x1c]
	strb r3, [r6, #0x1f]
	subs r0, #0x11
	str r0, [r6, #0x20]
	movs r0, #0x80
	lsls r0, r0, #5
	str r0, [r6, #8]
	movs r1, #0x86
	lsls r1, r1, #1
	adds r0, r7, r1
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r2, _08082778 @ =gCamera
	ldr r1, [r2]
	subs r0, r0, r1
	strh r0, [r6, #0x10]
	movs r4, #0x88
	lsls r4, r4, #1
	adds r0, r7, r4
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	strh r0, [r6, #0x12]
	strb r3, [r7, #0xf]
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808276C: .4byte gSineTable
_08082770: .4byte 0x00000848
_08082774: .4byte 0x000004FE
_08082778: .4byte gCamera
_0808277C: .4byte 0xFFFFFD80
_08082780: .4byte 0x000003FF
_08082784: .4byte 0x00000454
_08082788: .4byte 0x000004FF
_0808278C: .4byte 0x00000814
_08082790: .4byte 0x00000504

	thumb_func_start sub_8082794
sub_8082794: @ 0x08082794
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r6, r0, #0
	ldrb r0, [r6]
	cmp r0, #0
	bne _080827AA
	b _08082924
_080827AA:
	movs r7, #0
	ldr r0, _08082908 @ =gCamera
	mov sb, r0
_080827B0:
	lsls r0, r7, #2
	adds r0, r0, r7
	lsls r0, r0, #3
	movs r1, #0xed
	lsls r1, r1, #2
	adds r0, r0, r1
	adds r5, r6, r0
	lsls r2, r7, #1
	adds r2, r2, r7
	lsls r0, r2, #2
	ldr r3, _0808290C @ =0x00000848
	adds r0, r0, r3
	adds r3, r6, r0
	lsls r2, r2, #3
	movs r4, #0x86
	lsls r4, r4, #1
	adds r0, r6, r4
	adds r0, r0, r2
	ldr r0, [r0]
	asrs r0, r0, #8
	mov r4, sb
	ldr r1, [r4]
	subs r0, r0, r1
	strh r0, [r5, #0x10]
	movs r1, #0x88
	lsls r1, r1, #1
	adds r0, r6, r1
	adds r0, r0, r2
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r1, [r4, #4]
	subs r0, r0, r1
	strh r0, [r5, #0x12]
	adds r2, r6, r2
	movs r4, #0x90
	lsls r4, r4, #1
	adds r2, r2, r4
	ldr r1, _08082910 @ =0xFFFFFD80
	adds r0, r1, #0
	ldrh r2, [r2]
	adds r0, r0, r2
	ldr r2, _08082914 @ =0x000003FF
	adds r1, r2, #0
	ands r0, r1
	strh r0, [r3]
	ldrh r0, [r5, #0x10]
	strh r0, [r3, #6]
	ldrh r0, [r5, #0x12]
	strh r0, [r3, #8]
	adds r0, r5, #0
	adds r1, r3, #0
	bl TransformSprite
	adds r0, r5, #0
	bl UpdateSpriteAnimation
	adds r0, r5, #0
	bl DisplaySprite
	movs r4, #0
	lsls r0, r7, #4
	adds r3, r7, #1
	mov r8, r3
	subs r1, r0, r7
	lsls r0, r1, #4
	ldr r7, _08082918 @ =0x00000454
	adds r0, r0, r7
	adds r3, r6, r0
	lsls r1, r1, #3
	mov sl, r1
_0808283C:
	lsls r2, r4, #2
	adds r2, r2, r4
	lsls r0, r2, #3
	adds r5, r3, r0
	lsls r2, r2, #2
	add r2, sl
	movs r1, #0xb6
	lsls r1, r1, #1
	adds r0, r6, r1
	adds r0, r0, r2
	ldr r0, [r0]
	asrs r0, r0, #8
	mov r7, sb
	ldr r1, [r7]
	subs r0, r0, r1
	strh r0, [r5, #0x10]
	movs r1, #0xb8
	lsls r1, r1, #1
	adds r0, r6, r1
	adds r0, r0, r2
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r1, [r7, #4]
	subs r0, r0, r1
	strh r0, [r5, #0x12]
	adds r0, r5, #0
	str r3, [sp]
	bl DisplaySprite
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldr r3, [sp]
	cmp r4, #5
	bls _0808283C
	mov r2, r8
	lsls r0, r2, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #3
	bls _080827B0
	ldrb r0, [r6, #0xf]
	cmp r0, #0
	bne _08082894
	b _08082A28
_08082894:
	ldr r3, _0808291C @ =0x00000814
	adds r5, r6, r3
	adds r0, r5, #0
	bl UpdateSpriteAnimation
	movs r4, #0xaa
	lsls r4, r4, #1
	adds r0, r6, r4
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r4, _08082908 @ =gCamera
	ldr r1, [r4]
	subs r0, r0, r1
	subs r0, #0x10
	strh r0, [r5, #0x10]
	movs r7, #0xac
	lsls r7, r7, #1
	adds r0, r6, r7
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r1, [r4, #4]
	subs r0, r0, r1
	adds r0, #4
	strh r0, [r5, #0x12]
	ldr r0, [r5, #8]
	ldr r1, _08082920 @ =0xFFFFF7FF
	ands r0, r1
	str r0, [r5, #8]
	adds r0, r5, #0
	bl DisplaySprite
	movs r1, #0x86
	lsls r1, r1, #1
	adds r0, r6, r1
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r1, [r4]
	subs r0, r0, r1
	subs r0, #0x10
	strh r0, [r5, #0x10]
	movs r2, #0x88
	lsls r2, r2, #1
	adds r0, r6, r2
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r1, [r4, #4]
	subs r0, r0, r1
	subs r0, #4
	strh r0, [r5, #0x12]
	ldr r0, [r5, #8]
	movs r1, #0x80
	lsls r1, r1, #4
	orrs r0, r1
	str r0, [r5, #8]
	adds r0, r5, #0
	bl DisplaySprite
	b _08082A28
	.align 2, 0
_08082908: .4byte gCamera
_0808290C: .4byte 0x00000848
_08082910: .4byte 0xFFFFFD80
_08082914: .4byte 0x000003FF
_08082918: .4byte 0x00000454
_0808291C: .4byte 0x00000814
_08082920: .4byte 0xFFFFF7FF
_08082924:
	movs r7, #0
	ldr r3, _08082A38 @ =gCamera
	mov sl, r3
_0808292A:
	lsls r0, r7, #1
	adds r1, r0, r7
	lsls r2, r1, #3
	adds r4, r6, r2
	movs r3, #0x8e
	lsls r3, r3, #1
	adds r0, r4, r3
	movs r3, #0
	ldrsh r0, [r0, r3]
	cmp r0, #0
	beq _080829B4
	lsls r0, r7, #2
	adds r0, r0, r7
	lsls r0, r0, #3
	movs r3, #0xed
	lsls r3, r3, #2
	adds r0, r0, r3
	adds r5, r6, r0
	lsls r0, r1, #2
	ldr r1, _08082A3C @ =0x00000848
	adds r0, r0, r1
	adds r3, r6, r0
	movs r1, #0x86
	lsls r1, r1, #1
	adds r0, r6, r1
	adds r0, r0, r2
	ldr r0, [r0]
	asrs r0, r0, #8
	mov sb, r0
	mov r0, sl
	ldr r0, [r0]
	mov r1, sb
	subs r1, r1, r0
	strh r1, [r5, #0x10]
	movs r1, #0x88
	lsls r1, r1, #1
	adds r0, r6, r1
	adds r0, r0, r2
	ldr r0, [r0]
	asrs r0, r0, #8
	mov r2, sl
	ldr r1, [r2, #4]
	subs r0, r0, r1
	strh r0, [r5, #0x12]
	movs r0, #0x90
	lsls r0, r0, #1
	adds r1, r4, r0
	ldr r2, _08082A40 @ =0xFFFFFD80
	adds r0, r2, #0
	ldrh r1, [r1]
	adds r0, r0, r1
	ldr r4, _08082A44 @ =0x000003FF
	adds r1, r4, #0
	ands r0, r1
	strh r0, [r3]
	ldrh r0, [r5, #0x10]
	strh r0, [r3, #6]
	ldrh r0, [r5, #0x12]
	strh r0, [r3, #8]
	adds r0, r5, #0
	adds r1, r3, #0
	bl TransformSprite
	adds r0, r5, #0
	bl UpdateSpriteAnimation
	adds r0, r5, #0
	bl DisplaySprite
_080829B4:
	movs r4, #0
	lsls r0, r7, #4
	adds r1, r7, #1
	mov r8, r1
	subs r7, r0, r7
	lsls r0, r7, #4
	ldr r2, _08082A48 @ =0x00000454
	adds r0, r0, r2
	adds r0, r0, r6
	mov sb, r0
_080829C8:
	lsls r0, r4, #2
	adds r2, r0, r4
	lsls r1, r2, #2
	lsls r0, r7, #3
	adds r3, r1, r0
	adds r0, r6, r3
	movs r1, #0xbe
	lsls r1, r1, #1
	adds r0, r0, r1
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _08082A14
	lsls r0, r2, #3
	mov r2, sb
	adds r5, r2, r0
	movs r1, #0xb6
	lsls r1, r1, #1
	adds r0, r6, r1
	adds r0, r0, r3
	ldr r0, [r0]
	asrs r0, r0, #8
	mov r2, sl
	ldr r1, [r2]
	subs r0, r0, r1
	strh r0, [r5, #0x10]
	movs r1, #0xb8
	lsls r1, r1, #1
	adds r0, r6, r1
	adds r0, r0, r3
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	strh r0, [r5, #0x12]
	adds r0, r5, #0
	bl DisplaySprite
_08082A14:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #5
	bls _080829C8
	mov r2, r8
	lsls r0, r2, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #3
	bls _0808292A
_08082A28:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08082A38: .4byte gCamera
_08082A3C: .4byte 0x00000848
_08082A40: .4byte 0xFFFFFD80
_08082A44: .4byte 0x000003FF
_08082A48: .4byte 0x00000454

	thumb_func_start sub_8082A4C
sub_8082A4C: @ 0x08082A4C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	mov sb, r0
	ldr r0, _08082B38 @ =0x06012800
	str r0, [sp, #4]
	movs r0, #1
	bl VramMalloc
	str r0, [sp, #8]
	movs r1, #0
	mov sl, r1
	movs r2, #0x80
	str r2, [sp]
_08082A6E:
	ldr r2, _08082B3C @ =gSineTable
	ldr r3, [sp]
	movs r7, #0x80
	lsls r7, r7, #1
	adds r0, r3, r7
	lsls r0, r0, #1
	adds r0, r0, r2
	movs r3, #0
	ldrsh r1, [r0, r3]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #2
	cmp r0, #0
	bge _08082A8C
	adds r0, #0x3f
_08082A8C:
	asrs r5, r0, #6
	ldr r7, [sp]
	lsls r0, r7, #1
	adds r0, r0, r2
	movs r2, #0
	ldrsh r1, [r0, r2]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #2
	cmp r0, #0
	bge _08082AA4
	adds r0, #0x3f
_08082AA4:
	asrs r4, r0, #6
	mov r3, sl
	lsls r3, r3, #1
	mov r8, r3
	add r3, sl
	lsls r2, r3, #3
	movs r1, #0x86
	lsls r1, r1, #1
	add r1, sb
	adds r1, r1, r2
	mov r6, sb
	adds r6, #0x9c
	ldr r0, [r6]
	adds r0, r0, r5
	str r0, [r1]
	movs r1, #0x88
	lsls r1, r1, #1
	add r1, sb
	adds r1, r1, r2
	mov r5, sb
	adds r5, #0xa0
	ldr r0, [r5]
	adds r0, r0, r4
	str r0, [r1]
	add r2, sb
	movs r7, #0x90
	lsls r7, r7, #1
	adds r2, r2, r7
	movs r4, #0
	mov r0, sp
	ldrh r0, [r0]
	strh r0, [r2]
	mov r1, sl
	lsls r0, r1, #2
	add r0, sl
	lsls r0, r0, #3
	movs r2, #0xed
	lsls r2, r2, #2
	adds r0, r0, r2
	mov r1, sb
	adds r7, r1, r0
	lsls r3, r3, #2
	ldr r2, _08082B40 @ =0x00000848
	adds r3, r3, r2
	add r3, sb
	ldr r0, [sp, #4]
	str r0, [r7]
	movs r0, #0xa0
	lsls r0, r0, #2
	strh r0, [r7, #0x14]
	strh r4, [r7, #0xe]
	strh r4, [r7, #0x16]
	movs r0, #0xff
	strb r0, [r7, #0x1b]
	movs r0, #0x10
	strb r0, [r7, #0x1c]
	strb r4, [r7, #0x1f]
	subs r0, #0x11
	str r0, [r7, #0x20]
	movs r1, #0x80
	lsls r1, r1, #5
	str r1, [r7, #8]
	mov r2, r8
	str r6, [sp, #0x14]
	str r5, [sp, #0x18]
	mov r0, sl
	cmp r0, #1
	beq _08082B5C
	cmp r0, #1
	bgt _08082B44
	cmp r0, #0
	beq _08082B50
	b _08082B88
	.align 2, 0
_08082B38: .4byte 0x06012800
_08082B3C: .4byte gSineTable
_08082B40: .4byte 0x00000848
_08082B44:
	mov r0, sl
	cmp r0, #2
	beq _08082B68
	cmp r0, #3
	beq _08082B80
	b _08082B88
_08082B50:
	ldr r1, _08082B58 @ =0x000004FE
	strh r1, [r7, #0xc]
	movs r0, #4
	b _08082B86
	.align 2, 0
_08082B58: .4byte 0x000004FE
_08082B5C:
	ldr r0, _08082B64 @ =0x000004FE
	strh r0, [r7, #0xc]
	movs r0, #2
	b _08082B86
	.align 2, 0
_08082B64: .4byte 0x000004FE
_08082B68:
	ldr r0, _08082B7C @ =0x000004FE
	strh r0, [r7, #0xc]
	strb r4, [r7, #0x1a]
	movs r0, #0x20
	orrs r0, r1
	movs r1, #0xd
	orrs r0, r1
	str r0, [r7, #8]
	b _08082B88
	.align 2, 0
_08082B7C: .4byte 0x000004FE
_08082B80:
	ldr r1, _08082CEC @ =0x000004FE
	strh r1, [r7, #0xc]
	movs r0, #6
_08082B86:
	strb r0, [r7, #0x1a]
_08082B88:
	add r2, sl
	lsls r2, r2, #3
	movs r0, #0x86
	lsls r0, r0, #1
	add r0, sb
	adds r0, r0, r2
	ldr r1, [r0]
	asrs r1, r1, #8
	ldr r4, _08082CF0 @ =gCamera
	ldr r0, [r4]
	subs r1, r1, r0
	strh r1, [r7, #0x10]
	movs r0, #0x88
	lsls r0, r0, #1
	add r0, sb
	adds r0, r0, r2
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r1, [r4, #4]
	subs r0, r0, r1
	strh r0, [r7, #0x12]
	add r2, sb
	movs r0, #0x90
	lsls r0, r0, #1
	adds r2, r2, r0
	ldr r1, _08082CF4 @ =0xFFFFFD80
	adds r0, r1, #0
	ldrh r2, [r2]
	adds r0, r0, r2
	ldr r2, _08082CF8 @ =0x000003FF
	adds r1, r2, #0
	ands r0, r1
	strh r0, [r3]
	ldrh r0, [r7, #0x10]
	strh r0, [r3, #6]
	ldrh r0, [r7, #0x12]
	strh r0, [r3, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r3, #2]
	strh r0, [r3, #4]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	ldr r3, [sp, #4]
	movs r7, #0x80
	lsls r7, r7, #2
	adds r3, r3, r7
	str r3, [sp, #4]
	movs r5, #0
	mov r1, sl
	lsls r0, r1, #4
	adds r1, #1
	str r1, [sp, #0x10]
	mov r2, sl
	subs r6, r0, r2
	lsls r0, r6, #4
	ldr r3, _08082CFC @ =0x00000454
	adds r0, r0, r3
	add r0, sb
	str r0, [sp, #0xc]
	mov r8, r4
_08082C04:
	lsls r4, r5, #2
	adds r3, r4, r5
	lsls r2, r3, #2
	lsls r0, r6, #3
	adds r2, r2, r0
	movs r0, #0xb6
	lsls r0, r0, #1
	add r0, sb
	adds r0, r0, r2
	ldr r7, [sp, #0x14]
	ldr r1, [r7]
	str r1, [r0]
	movs r0, #0xb8
	lsls r0, r0, #1
	add r0, sb
	adds r0, r0, r2
	ldr r2, [sp, #0x18]
	ldr r1, [r2]
	str r1, [r0]
	lsls r3, r3, #3
	ldr r0, [sp, #0xc]
	adds r7, r0, r3
	ldr r1, [sp, #8]
	str r1, [r7]
	ldr r0, _08082D00 @ =0x000004FF
	strh r0, [r7, #0xc]
	movs r2, #0
	strb r2, [r7, #0x1a]
	subs r0, #0x3f
	strh r0, [r7, #0x14]
	movs r3, #0
	strh r3, [r7, #0xe]
	strh r3, [r7, #0x16]
	movs r0, #0xff
	strb r0, [r7, #0x1b]
	movs r0, #0x10
	strb r0, [r7, #0x1c]
	movs r0, #0
	strb r0, [r7, #0x1f]
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r7, #0x20]
	movs r1, #0x80
	lsls r1, r1, #5
	str r1, [r7, #8]
	mov r2, sl
	cmp r2, #0
	bne _08082C68
	cmp r5, #0
	beq _08082C74
_08082C68:
	movs r0, #0x80
	lsls r0, r0, #0xc
	movs r3, #0x80
	lsls r3, r3, #5
	orrs r0, r3
	str r0, [r7, #8]
_08082C74:
	adds r2, r4, r5
	lsls r2, r2, #2
	lsls r0, r6, #3
	adds r2, r2, r0
	movs r0, #0xb6
	lsls r0, r0, #1
	add r0, sb
	adds r0, r0, r2
	ldr r0, [r0]
	asrs r0, r0, #8
	mov r3, r8
	ldr r1, [r3]
	subs r0, r0, r1
	strh r0, [r7, #0x10]
	movs r0, #0xb8
	lsls r0, r0, #1
	add r0, sb
	adds r0, r0, r2
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r1, [r3, #4]
	subs r0, r0, r1
	strh r0, [r7, #0x12]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #5
	bls _08082C04
	ldr r7, [sp, #0x10]
	lsls r0, r7, #0x18
	lsrs r0, r0, #0x18
	mov sl, r0
	ldr r1, [sp]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r1, r2
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	str r0, [sp]
	mov r3, sl
	cmp r3, #3
	bhi _08082CD0
	b _08082A6E
_08082CD0:
	ldr r7, _08082D04 @ =0x00000814
	add r7, sb
	movs r0, #0
	str r0, [r7]
	mov r7, sb
	strb r0, [r7, #0xf]
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08082CEC: .4byte 0x000004FE
_08082CF0: .4byte gCamera
_08082CF4: .4byte 0xFFFFFD80
_08082CF8: .4byte 0x000003FF
_08082CFC: .4byte 0x00000454
_08082D00: .4byte 0x000004FF
_08082D04: .4byte 0x00000814

	thumb_func_start sub_8082D08
sub_8082D08: @ 0x08082D08
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r6, r0, #0
	movs r5, #0
	ldr r0, _08082DEC @ =gCamera
	mov r8, r0
_08082D1C:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	movs r1, #0xed
	lsls r1, r1, #2
	adds r0, r0, r1
	adds r4, r6, r0
	lsls r2, r5, #1
	adds r2, r2, r5
	lsls r0, r2, #2
	ldr r7, _08082DF0 @ =0x00000848
	adds r0, r0, r7
	adds r3, r6, r0
	lsls r2, r2, #3
	movs r1, #0x86
	lsls r1, r1, #1
	adds r0, r6, r1
	adds r0, r0, r2
	ldr r0, [r0]
	asrs r0, r0, #8
	mov r7, r8
	ldr r1, [r7]
	subs r0, r0, r1
	strh r0, [r4, #0x10]
	movs r1, #0x88
	lsls r1, r1, #1
	adds r0, r6, r1
	adds r0, r0, r2
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r1, [r7, #4]
	subs r0, r0, r1
	strh r0, [r4, #0x12]
	cmp r5, #2
	bne _08082E00
	movs r2, #0xa8
	lsls r2, r2, #1
	adds r1, r6, r2
	ldr r7, _08082DF4 @ =0xFFFFFD80
	adds r0, r7, #0
	ldrh r1, [r1]
	adds r0, r0, r1
	ldr r2, _08082DF8 @ =0x000003FF
	adds r1, r2, #0
	ands r0, r1
	strh r0, [r3]
	ldrh r0, [r4, #0x10]
	strh r0, [r3, #6]
	ldrh r0, [r4, #0x12]
	strh r0, [r3, #8]
	adds r0, r4, #0
	adds r1, r3, #0
	bl TransformSprite
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	movs r5, #0
	movs r7, #3
	mov sb, r7
	ldr r0, _08082DFC @ =0x00000634
	adds r0, r0, r6
	mov sl, r0
	movs r3, #0xf0
_08082DA2:
	lsls r2, r5, #2
	adds r2, r2, r5
	lsls r0, r2, #3
	mov r1, sl
	adds r4, r1, r0
	lsls r2, r2, #2
	adds r2, r2, r3
	movs r7, #0xb6
	lsls r7, r7, #1
	adds r0, r6, r7
	adds r0, r0, r2
	ldr r0, [r0]
	asrs r0, r0, #8
	mov r7, r8
	ldr r1, [r7]
	subs r0, r0, r1
	strh r0, [r4, #0x10]
	movs r1, #0xb8
	lsls r1, r1, #1
	adds r0, r6, r1
	adds r0, r0, r2
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r1, [r7, #4]
	subs r0, r0, r1
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	str r3, [sp]
	bl DisplaySprite
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	ldr r3, [sp]
	cmp r5, #5
	bls _08082DA2
	b _08082E10
	.align 2, 0
_08082DEC: .4byte gCamera
_08082DF0: .4byte 0x00000848
_08082DF4: .4byte 0xFFFFFD80
_08082DF8: .4byte 0x000003FF
_08082DFC: .4byte 0x00000634
_08082E00:
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	adds r5, #1
	mov sb, r5
_08082E10:
	mov r2, sb
	lsls r0, r2, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #3
	bhi _08082E1C
	b _08082D1C
_08082E1C:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8082E2C
sub_8082E2C: @ 0x08082E2C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x98
	mov r8, r0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	str r1, [sp, #0x20]
	mov r1, sp
	ldr r0, _08082E64 @ =gUnknown_080D5E64
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r5, r6}
	stm r1!, {r2, r5, r6}
	ldm r0!, {r3, r4}
	stm r1!, {r3, r4}
	ldr r5, [sp, #0x20]
	cmp r5, #6
	bls _08082E5A
	bl _08083A1C
_08082E5A:
	lsls r0, r5, #2
	ldr r1, _08082E68 @ =_08082E6C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08082E64: .4byte gUnknown_080D5E64
_08082E68: .4byte _08082E6C
_08082E6C: @ jump table
	.4byte _08082E88 @ case 0
	.4byte _08083500 @ case 1
	.4byte _080835FC @ case 2
	.4byte _08082F46 @ case 3
	.4byte _0808325C @ case 4
	.4byte _0808371C @ case 5
	.4byte _080838F0 @ case 6
_08082E88:
	movs r6, #0
	str r6, [sp, #0x24]
	movs r7, #0x80
	mov r0, sp
	adds r0, #4
	str r0, [sp, #0x8c]
	movs r1, #0x86
	lsls r1, r1, #1
	add r1, r8
	str r1, [sp, #0x2c]
	movs r2, #0x9c
	add r2, r8
	mov sb, r2
	movs r3, #0x88
	lsls r3, r3, #1
	add r3, r8
	str r3, [sp, #0x30]
	mov r5, r8
	adds r5, #0xa0
	movs r4, #0xb6
	lsls r4, r4, #1
	add r4, r8
	mov ip, r4
	movs r6, #0xb8
	lsls r6, r6, #1
	add r6, r8
	mov sl, r6
_08082EBE:
	ldr r0, [sp, #0x24]
	lsls r2, r0, #1
	adds r2, r2, r0
	lsls r2, r2, #3
	ldr r1, [sp, #0x2c]
	adds r4, r1, r2
	lsls r3, r0, #3
	mov r6, sp
	adds r0, r6, r3
	ldr r1, [r0]
	lsls r1, r1, #8
	mov r6, sb
	ldr r0, [r6]
	adds r0, r0, r1
	str r0, [r4]
	ldr r0, [sp, #0x30]
	adds r4, r0, r2
	ldr r1, [sp, #0x8c]
	adds r3, r1, r3
	ldr r1, [r3]
	lsls r1, r1, #8
	ldr r0, [r5]
	adds r0, r0, r1
	str r0, [r4]
	add r2, r8
	movs r3, #0x90
	lsls r3, r3, #1
	adds r2, r2, r3
	strh r7, [r2]
	movs r6, #0
	ldr r4, [sp, #0x24]
	lsls r0, r4, #4
	adds r4, #1
	str r4, [sp, #0x90]
	ldr r1, [sp, #0x24]
	subs r0, r0, r1
	lsls r3, r0, #3
_08082F08:
	lsls r0, r6, #2
	adds r0, r0, r6
	lsls r0, r0, #2
	adds r0, r0, r3
	mov r4, ip
	adds r2, r4, r0
	mov r4, sb
	ldr r1, [r4]
	str r1, [r2]
	add r0, sl
	ldr r1, [r5]
	str r1, [r0]
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #5
	bls _08082F08
	ldr r6, [sp, #0x90]
	lsls r0, r6, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #0x24]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r7, r1
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	ldr r2, [sp, #0x24]
	cmp r2, #3
	bls _08082EBE
	bl _08083A1C
_08082F46:
	movs r3, #0
	str r3, [sp, #0x24]
	movs r4, #0xa8
	lsls r4, r4, #1
	add r4, r8
	str r4, [sp, #0x34]
	movs r5, #0x86
	lsls r5, r5, #1
	add r5, r8
	str r5, [sp, #0x38]
	movs r6, #0x9c
	lsls r6, r6, #1
	add r6, r8
	str r6, [sp, #0x48]
_08082F62:
	movs r0, #0
	str r0, [sp, #0x28]
	ldr r1, [sp, #0x24]
	lsls r7, r1, #8
	movs r0, #0x80
	orrs r7, r0
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r7, r2
	lsls r0, r0, #1
	ldr r3, _08082FF0 @ =gSineTable
	adds r0, r0, r3
	movs r4, #0
	ldrsh r1, [r0, r4]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #2
	cmp r0, #0
	bge _08082F8A
	adds r0, #0x3f
_08082F8A:
	asrs r0, r0, #6
	mov sl, r0
	lsls r0, r7, #1
	ldr r5, _08082FF0 @ =gSineTable
	adds r0, r0, r5
	movs r6, #0
	ldrsh r1, [r0, r6]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #2
	cmp r0, #0
	bge _08082FA4
	adds r0, #0x3f
_08082FA4:
	asrs r0, r0, #6
	mov sb, r0
	ldr r0, [sp, #0x24]
	cmp r0, #1
	bne _08082FB0
	b _0808310A
_08082FB0:
	adds r0, #1
	str r0, [sp, #0x90]
	ldr r1, [sp, #0x24]
	cmp r1, #2
	beq _08082FBC
	b _0808324C
_08082FBC:
	mov r0, r8
	adds r0, #0xe2
	ldrb r0, [r0]
	cmp r0, #0
	bne _08083006
	mov r2, r8
	adds r2, #0xbc
	ldrb r1, [r2]
	ldr r3, _08082FF4 @ =gUnknown_080D5D64
	adds r0, r1, r3
	ldrb r5, [r0]
	lsls r0, r5, #8
	rsbs r5, r0, #0
	ldr r4, _08082FF8 @ =gUnknown_080D5DE4
	adds r0, r1, r4
	ldrb r4, [r0]
	lsls r0, r4, #8
	rsbs r4, r0, #0
	str r2, [sp, #0x80]
	cmp r1, #0xc
	bhi _08082FFC
	movs r0, #0xa0
	lsls r0, r0, #2
	ldr r6, [sp, #0x34]
	strh r0, [r6]
	b _0808302E
	.align 2, 0
_08082FF0: .4byte gSineTable
_08082FF4: .4byte gUnknown_080D5D64
_08082FF8: .4byte gUnknown_080D5DE4
_08082FFC:
	movs r0, #0x80
	lsls r0, r0, #2
	ldr r1, [sp, #0x34]
	strh r0, [r1]
	b _0808302E
_08083006:
	mov r0, r8
	adds r0, #0xc6
	ldrb r1, [r0]
	ldr r2, _080830D0 @ =gUnknown_080D5D64
	adds r0, r1, r2
	ldrb r5, [r0]
	lsls r0, r5, #8
	rsbs r5, r0, #0
	ldr r3, _080830D4 @ =gUnknown_080D5DE4
	adds r1, r1, r3
	ldrb r4, [r1]
	lsls r0, r4, #8
	rsbs r4, r0, #0
	movs r0, #0x80
	lsls r0, r0, #1
	ldr r6, [sp, #0x34]
	strh r0, [r6]
	mov r1, r8
	adds r1, #0xbc
	str r1, [sp, #0x80]
_0808302E:
	ldr r2, [sp, #0x24]
	lsls r1, r2, #1
	adds r1, r1, r2
	lsls r1, r1, #3
	ldr r3, [sp, #0x38]
	adds r2, r3, r1
	mov r3, r8
	adds r3, #0x9c
	ldr r0, [r3]
	add r0, sl
	adds r0, r0, r5
	str r0, [r2]
	movs r2, #0x88
	lsls r2, r2, #1
	add r2, r8
	adds r2, r2, r1
	mov r1, r8
	adds r1, #0xa0
	ldr r0, [r1]
	add r0, sb
	adds r0, r0, r4
	str r0, [r2]
	ldr r0, [sp, #0x28]
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #0x28]
	movs r6, #0
	ldr r4, [sp, #0x24]
	lsls r0, r4, #4
	adds r4, #1
	str r4, [sp, #0x90]
	ldr r5, [sp, #0x24]
	subs r0, r0, r5
	lsls r0, r0, #3
	str r0, [sp, #0x3c]
	movs r0, #0xb6
	lsls r0, r0, #1
	add r0, r8
	str r0, [sp, #0x40]
	movs r2, #0xb8
	lsls r2, r2, #1
	add r2, r8
	str r2, [sp, #0x44]
	mov ip, r3
	adds r7, r1, #0
_0808308A:
	ldr r3, [sp, #0x80]
	ldr r4, [sp, #0x28]
	adds r1, r3, r4
	ldrb r0, [r1]
	cmp r0, #0
	beq _080830D8
	adds r1, r0, #0
	ldr r5, _080830D0 @ =gUnknown_080D5D64
	adds r0, r1, r5
	ldrb r5, [r0]
	lsls r3, r5, #8
	ldr r0, _080830D4 @ =gUnknown_080D5DE4
	adds r1, r1, r0
	ldrb r4, [r1]
	lsls r4, r4, #8
	lsls r1, r6, #2
	adds r1, r1, r6
	lsls r1, r1, #2
	ldr r2, [sp, #0x3c]
	adds r1, r1, r2
	ldr r5, [sp, #0x40]
	adds r2, r5, r1
	mov r5, ip
	ldr r0, [r5]
	add r0, sl
	subs r0, r0, r3
	str r0, [r2]
	ldr r0, [sp, #0x44]
	adds r1, r0, r1
	ldr r0, [r7]
	add r0, sb
	subs r0, r0, r4
	str r0, [r1]
	b _080830F4
	.align 2, 0
_080830D0: .4byte gUnknown_080D5D64
_080830D4: .4byte gUnknown_080D5DE4
_080830D8:
	lsls r0, r6, #2
	adds r0, r0, r6
	lsls r0, r0, #2
	ldr r1, [sp, #0x3c]
	adds r0, r0, r1
	ldr r3, [sp, #0x40]
	adds r2, r3, r0
	mov r4, ip
	ldr r1, [r4]
	str r1, [r2]
	ldr r5, [sp, #0x44]
	adds r0, r5, r0
	ldr r1, [r7]
	str r1, [r0]
_080830F4:
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	ldr r0, [sp, #0x28]
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #0x28]
	cmp r6, #5
	bls _0808308A
	b _0808324C
_0808310A:
	mov r0, r8
	adds r0, #0xe2
	ldrb r0, [r0]
	cmp r0, #0
	bne _0808314E
	mov r2, r8
	adds r2, #0xbc
	ldrb r1, [r2]
	ldr r6, _0808313C @ =gUnknown_080D5D64
	adds r0, r1, r6
	ldrb r5, [r0]
	lsls r0, r5, #8
	rsbs r5, r0, #0
	ldr r3, _08083140 @ =gUnknown_080D5DE4
	adds r0, r1, r3
	ldrb r4, [r0]
	lsls r4, r4, #8
	str r2, [sp, #0x80]
	cmp r1, #0xc
	bhi _08083144
	movs r0, #0xc0
	lsls r0, r0, #1
	ldr r6, [sp, #0x48]
	strh r0, [r6]
	b _08083174
	.align 2, 0
_0808313C: .4byte gUnknown_080D5D64
_08083140: .4byte gUnknown_080D5DE4
_08083144:
	movs r0, #0x80
	lsls r0, r0, #2
	ldr r1, [sp, #0x48]
	strh r0, [r1]
	b _08083174
_0808314E:
	mov r0, r8
	adds r0, #0xc5
	ldrb r1, [r0]
	ldr r2, _08083214 @ =gUnknown_080D5D64
	adds r0, r1, r2
	ldrb r5, [r0]
	lsls r0, r5, #8
	rsbs r5, r0, #0
	ldr r3, _08083218 @ =gUnknown_080D5DE4
	adds r1, r1, r3
	ldrb r4, [r1]
	lsls r4, r4, #8
	movs r0, #0xc0
	lsls r0, r0, #2
	ldr r6, [sp, #0x48]
	strh r0, [r6]
	mov r0, r8
	adds r0, #0xbc
	str r0, [sp, #0x80]
_08083174:
	ldr r2, [sp, #0x24]
	lsls r1, r2, #1
	adds r1, r1, r2
	lsls r1, r1, #3
	ldr r3, [sp, #0x38]
	adds r2, r3, r1
	mov r3, r8
	adds r3, #0x9c
	ldr r0, [r3]
	add r0, sl
	adds r0, r0, r5
	str r0, [r2]
	movs r2, #0x88
	lsls r2, r2, #1
	add r2, r8
	adds r2, r2, r1
	mov r1, r8
	adds r1, #0xa0
	ldr r0, [r1]
	add r0, sb
	adds r0, r0, r4
	str r0, [r2]
	ldr r0, [sp, #0x28]
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #0x28]
	movs r6, #0
	ldr r4, [sp, #0x24]
	lsls r0, r4, #4
	adds r4, #1
	str r4, [sp, #0x90]
	ldr r5, [sp, #0x24]
	subs r0, r0, r5
	lsls r0, r0, #3
	str r0, [sp, #0x4c]
	movs r0, #0xb6
	lsls r0, r0, #1
	add r0, r8
	str r0, [sp, #0x50]
	movs r2, #0xb8
	lsls r2, r2, #1
	add r2, r8
	str r2, [sp, #0x54]
	mov ip, r3
	adds r7, r1, #0
_080831D0:
	ldr r3, [sp, #0x80]
	ldr r4, [sp, #0x28]
	adds r1, r3, r4
	ldrb r0, [r1]
	cmp r0, #0
	beq _0808321C
	adds r1, r0, #0
	ldr r5, _08083214 @ =gUnknown_080D5D64
	adds r0, r1, r5
	ldrb r5, [r0]
	lsls r3, r5, #8
	ldr r0, _08083218 @ =gUnknown_080D5DE4
	adds r1, r1, r0
	ldrb r4, [r1]
	lsls r4, r4, #8
	lsls r1, r6, #2
	adds r1, r1, r6
	lsls r1, r1, #2
	ldr r2, [sp, #0x4c]
	adds r1, r1, r2
	ldr r5, [sp, #0x50]
	adds r2, r5, r1
	mov r5, ip
	ldr r0, [r5]
	add r0, sl
	subs r0, r0, r3
	str r0, [r2]
	ldr r0, [sp, #0x54]
	adds r1, r0, r1
	ldr r0, [r7]
	add r0, sb
	adds r0, r0, r4
	str r0, [r1]
	b _08083238
	.align 2, 0
_08083214: .4byte gUnknown_080D5D64
_08083218: .4byte gUnknown_080D5DE4
_0808321C:
	lsls r0, r6, #2
	adds r0, r0, r6
	lsls r0, r0, #2
	ldr r1, [sp, #0x4c]
	adds r0, r0, r1
	ldr r3, [sp, #0x50]
	adds r2, r3, r0
	mov r4, ip
	ldr r1, [r4]
	str r1, [r2]
	ldr r5, [sp, #0x54]
	adds r0, r5, r0
	ldr r1, [r7]
	str r1, [r0]
_08083238:
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	ldr r0, [sp, #0x28]
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #0x28]
	cmp r6, #5
	bls _080831D0
_0808324C:
	ldr r6, [sp, #0x90]
	lsls r0, r6, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #0x24]
	cmp r0, #3
	bhi _0808325A
	b _08082F62
_0808325A:
	b _08083A1C
_0808325C:
	movs r0, #0
	str r0, [sp, #0x24]
_08083260:
	ldr r1, [sp, #0x24]
	lsls r7, r1, #8
	movs r0, #0x80
	orrs r7, r0
	cmp r1, #0
	bne _0808326E
	b _080833A0
_0808326E:
	adds r1, #1
	str r1, [sp, #0x90]
	ldr r2, [sp, #0x24]
	cmp r2, #3
	beq _0808327A
	b _080834EA
_0808327A:
	mov r0, r8
	adds r0, #0xd4
	ldr r3, [r0]
	cmp r3, #0
	bne _08083286
	b _080834EA
_08083286:
	ldr r2, _08083368 @ =gSineTable
	movs r4, #0x80
	lsls r4, r4, #1
	adds r0, r7, r4
	lsls r0, r0, #1
	adds r0, r0, r2
	movs r5, #0
	ldrsh r1, [r0, r5]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #2
	cmp r0, #0
	bge _080832A2
	adds r0, #0x3f
_080832A2:
	asrs r0, r0, #6
	mov sl, r0
	lsls r0, r7, #1
	ldr r6, _08083368 @ =gSineTable
	adds r0, r0, r6
	movs r2, #0
	ldrsh r1, [r0, r2]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #2
	cmp r0, #0
	bge _080832BC
	adds r0, #0x3f
_080832BC:
	asrs r0, r0, #6
	mov sb, r0
	mov r0, r8
	adds r0, #0x9c
	ldr r0, [r0]
	add sl, r0
	mov r0, r8
	adds r0, #0xa0
	ldr r0, [r0]
	add sb, r0
	adds r0, r3, #0
	movs r1, #6
	bl __divsi3
	mov ip, r0
	movs r7, #0xb0
	lsls r7, r7, #2
	mov r0, r8
	adds r0, #0xe4
	ldr r0, [r0]
	asrs r0, r0, #8
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	movs r6, #6
	movs r4, #6
	str r4, [sp, #0x94]
	lsrs r0, r0, #0x12
	str r0, [sp, #0x58]
_080832F4:
	subs r2, r6, #1
	lsls r1, r2, #2
	adds r1, r1, r2
	lsls r1, r1, #2
	movs r5, #0xb4
	lsls r5, r5, #1
	adds r1, r1, r5
	movs r0, #0xb6
	lsls r0, r0, #1
	add r0, r8
	adds r0, r0, r1
	mov r4, sl
	str r4, [r0]
	movs r0, #0xb8
	lsls r0, r0, #1
	add r0, r8
	adds r0, r0, r1
	mov r5, sb
	str r5, [r0]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r7, r1
	lsls r0, r0, #1
	ldr r4, _08083368 @ =gSineTable
	adds r0, r0, r4
	movs r5, #0
	ldrsh r0, [r0, r5]
	mov r1, ip
	muls r1, r0, r1
	adds r0, r1, #0
	cmp r0, #0
	bge _08083338
	ldr r4, _0808336C @ =0x00003FFF
	adds r0, r0, r4
_08083338:
	asrs r5, r0, #0xe
	lsls r0, r7, #1
	ldr r1, _08083368 @ =gSineTable
	adds r0, r0, r1
	movs r4, #0
	ldrsh r0, [r0, r4]
	mov r1, ip
	muls r1, r0, r1
	adds r0, r1, #0
	cmp r0, #0
	bge _08083352
	ldr r4, _0808336C @ =0x00003FFF
	adds r0, r0, r4
_08083352:
	asrs r4, r0, #0xe
	add sl, r5
	add sb, r4
	cmp r6, #1
	bne _08083374
	ldr r5, [sp, #0x58]
	subs r7, r7, r5
	ldr r6, _08083370 @ =0x000003FF
	ands r7, r6
	b _08083392
	.align 2, 0
_08083368: .4byte gSineTable
_0808336C: .4byte 0x00003FFF
_08083370: .4byte 0x000003FF
_08083374:
	cmp r6, #1
	blt _0808338C
	cmp r6, #3
	bgt _0808338C
	ldr r0, [sp, #0x58]
	adds r7, r7, r0
	ldr r1, _08083388 @ =0x000003FF
	ands r7, r1
	b _08083392
	.align 2, 0
_08083388: .4byte 0x000003FF
_0808338C:
	subs r7, r7, r3
	ldr r4, _0808339C @ =0x000003FF
	ands r7, r4
_08083392:
	lsls r0, r2, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #0
	bne _080832F4
	b _080834BE
	.align 2, 0
_0808339C: .4byte 0x000003FF
_080833A0:
	mov r0, r8
	adds r0, #0xd8
	ldr r3, [r0]
	movs r6, #1
	str r6, [sp, #0x90]
	cmp r3, #0
	bne _080833B0
	b _080834EA
_080833B0:
	ldr r2, _0808348C @ =gSineTable
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r7, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	movs r4, #0
	ldrsh r1, [r0, r4]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #2
	cmp r0, #0
	bge _080833CC
	adds r0, #0x3f
_080833CC:
	asrs r0, r0, #6
	mov sl, r0
	lsls r0, r7, #1
	ldr r5, _0808348C @ =gSineTable
	adds r0, r0, r5
	movs r6, #0
	ldrsh r1, [r0, r6]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #2
	cmp r0, #0
	bge _080833E6
	adds r0, #0x3f
_080833E6:
	asrs r0, r0, #6
	mov sb, r0
	mov r0, r8
	adds r0, #0x9c
	ldr r0, [r0]
	add sl, r0
	mov r0, r8
	adds r0, #0xa0
	ldr r0, [r0]
	add sb, r0
	adds r0, r3, #0
	movs r1, #6
	bl __divsi3
	mov ip, r0
	movs r7, #0xa0
	lsls r7, r7, #1
	mov r0, r8
	adds r0, #0xe8
	ldr r0, [r0]
	asrs r0, r0, #8
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	movs r6, #6
	movs r1, #0
	str r1, [sp, #0x94]
	lsrs r0, r0, #0x12
	str r0, [sp, #0x5c]
_0808341E:
	subs r2, r6, #1
	lsls r1, r2, #2
	adds r1, r1, r2
	lsls r1, r1, #2
	adds r1, #0
	movs r0, #0xb6
	lsls r0, r0, #1
	add r0, r8
	adds r0, r0, r1
	mov r4, sl
	str r4, [r0]
	movs r0, #0xb8
	lsls r0, r0, #1
	add r0, r8
	adds r0, r0, r1
	mov r5, sb
	str r5, [r0]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r7, r1
	lsls r0, r0, #1
	ldr r4, _0808348C @ =gSineTable
	adds r0, r0, r4
	movs r5, #0
	ldrsh r0, [r0, r5]
	mov r1, ip
	muls r1, r0, r1
	adds r0, r1, #0
	cmp r0, #0
	bge _0808345E
	ldr r4, _08083490 @ =0x00003FFF
	adds r0, r0, r4
_0808345E:
	asrs r5, r0, #0xe
	lsls r0, r7, #1
	ldr r1, _0808348C @ =gSineTable
	adds r0, r0, r1
	movs r4, #0
	ldrsh r0, [r0, r4]
	mov r1, ip
	muls r1, r0, r1
	adds r0, r1, #0
	cmp r0, #0
	bge _08083478
	ldr r4, _08083490 @ =0x00003FFF
	adds r0, r0, r4
_08083478:
	asrs r4, r0, #0xe
	add sl, r5
	add sb, r4
	cmp r6, #1
	bne _08083498
	ldr r5, [sp, #0x5c]
	adds r7, r7, r5
	ldr r6, _08083494 @ =0x000003FF
	ands r7, r6
	b _080834B6
	.align 2, 0
_0808348C: .4byte gSineTable
_08083490: .4byte 0x00003FFF
_08083494: .4byte 0x000003FF
_08083498:
	cmp r6, #1
	blt _080834B0
	cmp r6, #3
	bgt _080834B0
	ldr r0, [sp, #0x5c]
	subs r7, r7, r0
	ldr r1, _080834AC @ =0x000003FF
	ands r7, r1
	b _080834B6
	.align 2, 0
_080834AC: .4byte 0x000003FF
_080834B0:
	adds r7, r7, r3
	ldr r4, _080834FC @ =0x000003FF
	ands r7, r4
_080834B6:
	lsls r0, r2, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #0
	bne _0808341E
_080834BE:
	ldr r5, [sp, #0x94]
	ldr r6, [sp, #0x24]
	adds r1, r5, r6
	lsls r1, r1, #3
	mov r2, r8
	adds r0, r2, r1
	movs r3, #0x90
	lsls r3, r3, #1
	adds r0, r0, r3
	strh r7, [r0]
	movs r0, #0x86
	lsls r0, r0, #1
	add r0, r8
	adds r0, r0, r1
	mov r4, sl
	str r4, [r0]
	movs r0, #0x88
	lsls r0, r0, #1
	add r0, r8
	adds r0, r0, r1
	mov r5, sb
	str r5, [r0]
_080834EA:
	ldr r6, [sp, #0x90]
	lsls r0, r6, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #0x24]
	cmp r0, #3
	bhi _080834F8
	b _08083260
_080834F8:
	b _08083A1C
	.align 2, 0
_080834FC: .4byte 0x000003FF
_08083500:
	mov r0, r8
	adds r0, #0xe3
	ldrb r0, [r0]
	str r0, [sp, #0x24]
	ldr r4, _080835F4 @ =gSineTable
	lsls r2, r0, #8
	movs r1, #0xc0
	lsls r1, r1, #1
	adds r0, r2, r1
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r3, #0
	ldrsh r1, [r0, r3]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #2
	cmp r0, #0
	bge _08083526
	adds r0, #0x3f
_08083526:
	asrs r0, r0, #6
	mov sl, r0
	adds r0, r2, #0
	adds r0, #0x80
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r5, #0
	ldrsh r1, [r0, r5]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #2
	cmp r0, #0
	bge _08083542
	adds r0, #0x3f
_08083542:
	asrs r0, r0, #6
	mov sb, r0
	mov r0, r8
	adds r0, #0x9c
	ldr r0, [r0]
	add sl, r0
	mov r0, r8
	adds r0, #0xa0
	ldr r0, [r0]
	add sb, r0
	mov r0, r8
	adds r0, #0xd4
	ldr r0, [r0]
	movs r1, #6
	bl __divsi3
	mov ip, r0
	mov r1, r8
	adds r1, #0xcc
	ldrh r2, [r1]
	movs r6, #0x80
	lsls r6, r6, #1
	adds r0, r2, r6
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r3, #0
	ldrsh r0, [r0, r3]
	mov r5, ip
	muls r5, r0, r5
	adds r0, r5, #0
	str r1, [sp, #0x84]
	cmp r0, #0
	bge _08083588
	ldr r6, _080835F8 @ =0x00003FFF
	adds r0, r0, r6
_08083588:
	asrs r5, r0, #0xe
	lsls r0, r2, #1
	adds r0, r0, r4
	movs r1, #0
	ldrsh r0, [r0, r1]
	mov r2, ip
	muls r2, r0, r2
	adds r0, r2, #0
	cmp r0, #0
	bge _080835A0
	ldr r3, _080835F8 @ =0x00003FFF
	adds r0, r0, r3
_080835A0:
	asrs r4, r0, #0xe
	movs r6, #6
	ldr r0, [sp, #0x24]
	lsls r0, r0, #1
	str r0, [sp, #0x94]
	ldr r1, [sp, #0x24]
	lsls r0, r1, #4
	subs r0, r0, r1
	lsls r0, r0, #3
	mov ip, r0
	movs r7, #0xb6
	lsls r7, r7, #1
	add r7, r8
	movs r3, #0xb8
	lsls r3, r3, #1
	add r3, r8
_080835C0:
	subs r0, r6, #1
	lsls r1, r0, #2
	adds r1, r1, r0
	lsls r1, r1, #2
	add r1, ip
	adds r2, r7, r1
	mov r6, sl
	str r6, [r2]
	adds r1, r3, r1
	mov r2, sb
	str r2, [r1]
	add sl, r5
	add sb, r4
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #0
	bne _080835C0
	ldr r3, [sp, #0x94]
	ldr r4, [sp, #0x24]
	adds r1, r3, r4
	lsls r1, r1, #3
	mov r5, r8
	adds r0, r5, r1
	ldr r6, [sp, #0x84]
	b _080836F0
	.align 2, 0
_080835F4: .4byte gSineTable
_080835F8: .4byte 0x00003FFF
_080835FC:
	mov r0, r8
	adds r0, #0xe3
	ldrb r0, [r0]
	str r0, [sp, #0x24]
	ldr r4, _08083714 @ =gSineTable
	lsls r2, r0, #8
	movs r6, #0xc0
	lsls r6, r6, #1
	adds r0, r2, r6
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r3, #0
	ldrsh r1, [r0, r3]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #2
	cmp r0, #0
	bge _08083622
	adds r0, #0x3f
_08083622:
	asrs r0, r0, #6
	mov sl, r0
	adds r0, r2, #0
	adds r0, #0x80
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r5, #0
	ldrsh r1, [r0, r5]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #2
	cmp r0, #0
	bge _0808363E
	adds r0, #0x3f
_0808363E:
	asrs r0, r0, #6
	mov sb, r0
	mov r0, r8
	adds r0, #0x9c
	ldr r0, [r0]
	add sl, r0
	mov r0, r8
	adds r0, #0xa0
	ldr r0, [r0]
	add sb, r0
	mov r0, r8
	adds r0, #0xd4
	ldr r0, [r0]
	movs r1, #6
	bl __divsi3
	mov ip, r0
	mov r0, r8
	adds r0, #0xcc
	ldrh r1, [r0]
	movs r6, #0x80
	lsls r6, r6, #1
	adds r0, r1, r6
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r2, #0
	ldrsh r0, [r0, r2]
	mov r3, ip
	muls r3, r0, r3
	adds r0, r3, #0
	cmp r0, #0
	bge _08083682
	ldr r5, _08083718 @ =0x00003FFF
	adds r0, r0, r5
_08083682:
	asrs r5, r0, #0xe
	lsls r0, r1, #1
	adds r0, r0, r4
	movs r6, #0
	ldrsh r0, [r0, r6]
	mov r1, ip
	muls r1, r0, r1
	adds r0, r1, #0
	cmp r0, #0
	bge _0808369A
	ldr r2, _08083718 @ =0x00003FFF
	adds r0, r0, r2
_0808369A:
	asrs r4, r0, #0xe
	movs r6, #6
	ldr r3, [sp, #0x24]
	lsls r3, r3, #1
	str r3, [sp, #0x94]
	ldr r1, [sp, #0x24]
	lsls r0, r1, #4
	mov r2, r8
	adds r2, #0xce
	str r2, [sp, #0x88]
	subs r0, r0, r1
	lsls r0, r0, #3
	mov ip, r0
	movs r7, #0xb6
	lsls r7, r7, #1
	add r7, r8
	movs r3, #0xb8
	lsls r3, r3, #1
	add r3, r8
_080836C0:
	subs r0, r6, #1
	lsls r1, r0, #2
	adds r1, r1, r0
	lsls r1, r1, #2
	add r1, ip
	adds r2, r7, r1
	mov r6, sl
	str r6, [r2]
	adds r1, r3, r1
	mov r2, sb
	str r2, [r1]
	add sl, r5
	add sb, r4
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #0
	bne _080836C0
	ldr r3, [sp, #0x94]
	ldr r4, [sp, #0x24]
	adds r1, r3, r4
	lsls r1, r1, #3
	mov r5, r8
	adds r0, r5, r1
	ldr r6, [sp, #0x88]
_080836F0:
	ldrh r2, [r6]
	movs r3, #0x90
	lsls r3, r3, #1
	adds r0, r0, r3
	strh r2, [r0]
	movs r0, #0x86
	lsls r0, r0, #1
	add r0, r8
	adds r0, r0, r1
	mov r4, sl
	str r4, [r0]
	movs r0, #0x88
	lsls r0, r0, #1
	add r0, r8
	adds r0, r0, r1
	mov r5, sb
	str r5, [r0]
	b _08083A1C
	.align 2, 0
_08083714: .4byte gSineTable
_08083718: .4byte 0x00003FFF
_0808371C:
	mov r0, r8
	adds r0, #0xb8
	ldrh r7, [r0]
	adds r7, #0x80
	ldr r6, _080837F4 @ =0x000003FF
	adds r0, r6, #0
	ands r7, r0
	movs r0, #0
	str r0, [sp, #0x24]
	mov r1, r8
	adds r1, #0x9c
	str r1, [sp, #0x74]
	mov r2, r8
	adds r2, #0xa0
	str r2, [sp, #0x78]
	mov r3, r8
	adds r3, #0xbb
	str r3, [sp, #0x7c]
	mov r4, r8
	adds r4, #0xbc
	str r4, [sp, #0x60]
_08083746:
	movs r5, #0x80
	lsls r5, r5, #1
	adds r0, r7, r5
	lsls r0, r0, #1
	ldr r6, _080837F8 @ =gSineTable
	adds r0, r0, r6
	movs r2, #0
	ldrsh r1, [r0, r2]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #2
	cmp r0, #0
	bge _08083762
	adds r0, #0x3f
_08083762:
	asrs r0, r0, #6
	mov sl, r0
	lsls r0, r7, #1
	ldr r3, _080837F8 @ =gSineTable
	adds r0, r0, r3
	movs r4, #0
	ldrsh r1, [r0, r4]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #2
	cmp r0, #0
	bge _0808377C
	adds r0, #0x3f
_0808377C:
	asrs r0, r0, #6
	mov sb, r0
	ldr r5, [sp, #0x74]
	ldr r0, [r5]
	add sl, r0
	ldr r6, [sp, #0x78]
	ldr r0, [r6]
	add sb, r0
	movs r6, #6
	adds r3, r7, #0
	ldr r0, [sp, #0x24]
	lsls r0, r0, #1
	str r0, [sp, #0x94]
	ldr r1, [sp, #0x24]
	lsls r0, r1, #4
	adds r1, #1
	str r1, [sp, #0x90]
	ldr r2, [sp, #0x24]
	subs r0, r0, r2
	lsls r0, r0, #3
	str r0, [sp, #0x64]
	movs r4, #0xb6
	lsls r4, r4, #1
	add r4, r8
	str r4, [sp, #0x68]
	movs r5, #0xb8
	lsls r5, r5, #1
	add r5, r8
	mov ip, r5
_080837B6:
	ldr r0, [sp, #0x60]
	adds r1, r0, r6
	ldrb r0, [r1]
	cmp r0, #0
	beq _080837FC
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r3, r2
	lsls r0, r0, #1
	ldr r4, _080837F8 @ =gSineTable
	adds r0, r0, r4
	movs r5, #0
	ldrsh r0, [r0, r5]
	ldrb r1, [r1]
	muls r0, r1, r0
	cmp r0, #0
	bge _080837DA
	adds r0, #0x3f
_080837DA:
	asrs r5, r0, #6
	lsls r0, r3, #1
	ldr r2, _080837F8 @ =gSineTable
	adds r0, r0, r2
	movs r4, #0
	ldrsh r0, [r0, r4]
	muls r0, r1, r0
	cmp r0, #0
	bge _080837EE
	adds r0, #0x3f
_080837EE:
	asrs r4, r0, #6
	b _08083800
	.align 2, 0
_080837F4: .4byte 0x000003FF
_080837F8: .4byte gSineTable
_080837FC:
	movs r5, #0
	movs r4, #0
_08083800:
	add sl, r5
	add sb, r4
	subs r2, r6, #1
	lsls r0, r2, #2
	adds r0, r0, r2
	lsls r0, r0, #2
	ldr r5, [sp, #0x64]
	adds r0, r0, r5
	ldr r6, [sp, #0x68]
	adds r1, r6, r0
	mov r4, sl
	str r4, [r1]
	add r0, ip
	mov r5, sb
	str r5, [r0]
	adds r3, #0x20
	ldr r6, _08083868 @ =0x000003FF
	adds r0, r6, #0
	ands r3, r0
	lsls r2, r2, #0x18
	lsrs r6, r2, #0x18
	cmp r6, #0
	bne _080837B6
	ldr r1, [sp, #0x60]
	ldrb r0, [r1]
	cmp r0, #0
	beq _08083870
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r3, r2
	lsls r0, r0, #1
	ldr r4, _0808386C @ =gSineTable
	adds r0, r0, r4
	movs r5, #0
	ldrsh r0, [r0, r5]
	ldrb r1, [r1]
	muls r0, r1, r0
	cmp r0, #0
	bge _08083850
	adds r0, #0x3f
_08083850:
	asrs r5, r0, #6
	lsls r0, r3, #1
	ldr r6, _0808386C @ =gSineTable
	adds r0, r0, r6
	movs r2, #0
	ldrsh r0, [r0, r2]
	muls r0, r1, r0
	cmp r0, #0
	bge _08083864
	adds r0, #0x3f
_08083864:
	asrs r4, r0, #6
	b _08083874
	.align 2, 0
_08083868: .4byte 0x000003FF
_0808386C: .4byte gSineTable
_08083870:
	movs r5, #0
	movs r4, #0
_08083874:
	ldr r6, [sp, #0x7c]
	ldrb r0, [r6]
	cmp r0, #0
	bne _08083898
	ldr r1, [sp, #0x60]
	ldrb r0, [r1]
	cmp r0, #0
	bne _08083898
	ldr r2, [sp, #0x94]
	ldr r3, [sp, #0x24]
	adds r0, r2, r3
	lsls r0, r0, #3
	add r0, r8
	movs r6, #0x90
	lsls r6, r6, #1
	adds r0, r0, r6
	strh r7, [r0]
	b _080838AA
_08083898:
	ldr r1, [sp, #0x94]
	ldr r2, [sp, #0x24]
	adds r0, r1, r2
	lsls r0, r0, #3
	add r0, r8
	movs r6, #0x90
	lsls r6, r6, #1
	adds r0, r0, r6
	strh r3, [r0]
_080838AA:
	ldr r0, [sp, #0x94]
	ldr r1, [sp, #0x24]
	adds r2, r0, r1
	lsls r2, r2, #3
	movs r0, #0x86
	lsls r0, r0, #1
	add r0, r8
	adds r0, r0, r2
	mov r3, sl
	adds r1, r3, r5
	str r1, [r0]
	movs r0, #0x88
	lsls r0, r0, #1
	add r0, r8
	adds r0, r0, r2
	mov r5, sb
	adds r1, r5, r4
	str r1, [r0]
	movs r6, #0x80
	lsls r6, r6, #1
	adds r7, r7, r6
	ldr r1, _080838EC @ =0x000003FF
	adds r0, r1, #0
	ands r7, r0
	ldr r2, [sp, #0x90]
	lsls r0, r2, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #0x24]
	cmp r0, #3
	bhi _080838E8
	b _08083746
_080838E8:
	b _08083A1C
	.align 2, 0
_080838EC: .4byte 0x000003FF
_080838F0:
	movs r3, #2
	str r3, [sp, #0x24]
	lsls r1, r3, #8
	adds r7, r1, #0
	adds r7, #0x80
	mov r0, r8
	adds r0, #0xd4
	ldr r2, [r0]
	cmp r2, #0
	bne _08083906
	b _08083A1C
_08083906:
	ldr r4, _08083A38 @ =gSineTable
	movs r5, #0xc0
	lsls r5, r5, #1
	adds r0, r1, r5
	lsls r0, r0, #1
	adds r0, r4, r0
	movs r6, #0
	ldrsh r1, [r0, r6]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #2
	cmp r0, #0
	bge _08083922
	adds r0, #0x3f
_08083922:
	asrs r0, r0, #6
	mov sl, r0
	lsls r0, r7, #1
	adds r0, r4, r0
	movs r3, #0
	ldrsh r1, [r0, r3]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #2
	cmp r0, #0
	bge _0808393A
	adds r0, #0x3f
_0808393A:
	asrs r0, r0, #6
	mov sb, r0
	mov r0, r8
	adds r0, #0x9c
	ldr r0, [r0]
	add sl, r0
	mov r0, r8
	adds r0, #0xa0
	ldr r0, [r0]
	add sb, r0
	adds r0, r2, #0
	movs r1, #6
	bl __divsi3
	mov ip, r0
	mov r0, r8
	adds r0, #0xe8
	ldr r0, [r0]
	lsls r0, r0, #8
	lsrs r7, r0, #0x10
	mov r0, r8
	adds r0, #0xe4
	ldr r0, [r0]
	cmp r0, #0
	bge _0808396E
	adds r0, #0xff
_0808396E:
	lsls r0, r0, #8
	lsrs r3, r0, #0x10
	movs r6, #6
	movs r5, #4
	str r5, [sp, #0x94]
	movs r0, #0xb6
	lsls r0, r0, #1
	add r0, r8
	str r0, [sp, #0x6c]
	movs r1, #0xb8
	lsls r1, r1, #1
	add r1, r8
	str r1, [sp, #0x70]
_08083988:
	subs r2, r6, #1
	lsls r0, r2, #2
	adds r0, r0, r2
	lsls r0, r0, #2
	adds r0, #0xf0
	ldr r4, [sp, #0x6c]
	adds r1, r4, r0
	mov r5, sl
	str r5, [r1]
	ldr r6, [sp, #0x70]
	adds r0, r6, r0
	mov r1, sb
	str r1, [r0]
	movs r4, #0x80
	lsls r4, r4, #1
	adds r0, r7, r4
	lsls r0, r0, #1
	ldr r5, _08083A38 @ =gSineTable
	adds r0, r0, r5
	movs r6, #0
	ldrsh r0, [r0, r6]
	mov r1, ip
	muls r1, r0, r1
	adds r0, r1, #0
	cmp r0, #0
	bge _080839C0
	ldr r4, _08083A3C @ =0x00003FFF
	adds r0, r0, r4
_080839C0:
	asrs r5, r0, #0xe
	lsls r0, r7, #1
	ldr r6, _08083A38 @ =gSineTable
	adds r0, r0, r6
	movs r1, #0
	ldrsh r0, [r0, r1]
	mov r4, ip
	muls r4, r0, r4
	adds r0, r4, #0
	cmp r0, #0
	bge _080839DA
	ldr r6, _08083A3C @ =0x00003FFF
	adds r0, r0, r6
_080839DA:
	asrs r4, r0, #0xe
	add sl, r5
	add sb, r4
	adds r7, r7, r3
	ldr r1, _08083A40 @ =0x000003FF
	adds r0, r1, #0
	ands r7, r0
	lsls r0, r2, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #0
	bne _08083988
	ldr r2, [sp, #0x94]
	ldr r3, [sp, #0x24]
	adds r1, r2, r3
	lsls r1, r1, #3
	mov r4, r8
	adds r0, r4, r1
	movs r5, #0x90
	lsls r5, r5, #1
	adds r0, r0, r5
	strh r7, [r0]
	movs r0, #0x86
	lsls r0, r0, #1
	add r0, r8
	adds r0, r0, r1
	mov r6, sl
	str r6, [r0]
	movs r0, #0x88
	lsls r0, r0, #1
	add r0, r8
	adds r0, r0, r1
	mov r1, sb
	str r1, [r0]
_08083A1C:
	add r2, sp, #0x20
	ldrb r3, [r2]
	mov r2, r8
	strb r3, [r2, #0xc]
	movs r0, #0
	add sp, #0x98
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08083A38: .4byte gSineTable
_08083A3C: .4byte 0x00003FFF
_08083A40: .4byte 0x000003FF

	thumb_func_start sub_8083A44
sub_8083A44: @ 0x08083A44
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r7, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	ldr r2, [r7, #0x28]
	cmp r1, #0
	beq _08083A62
	cmp r1, #1
	bne _08083A60
	b _08083B7E
_08083A60:
	b _08083BD0
_08083A62:
	ldr r0, _08083AA4 @ =gCamera
	adds r0, #0x6a
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #8
	ldr r1, [r2, #0x10]
	adds r4, r1, r0
	ldr r5, [r2, #0x14]
	adds r0, r7, #0
	adds r0, #0xa0
	ldr r1, [r0]
	movs r2, #1
	mov sl, r2
	adds r3, r0, #0
	cmp r5, r1
	bgt _08083A86
	movs r6, #2
	mov sl, r6
_08083A86:
	adds r0, r7, #0
	adds r0, #0x9c
	ldr r1, [r0]
	ldr r2, _08083AA8 @ =0xFFFF5800
	adds r0, r1, r2
	cmp r4, r0
	bgt _08083AAC
	asrs r0, r1, #8
	subs r0, #0xa8
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	mov r4, sl
	lsls r2, r4, #1
	b _08083ACA
	.align 2, 0
_08083AA4: .4byte gCamera
_08083AA8: .4byte 0xFFFF5800
_08083AAC:
	mov r6, sl
	lsls r2, r6, #1
	adds r1, r2, r6
	lsls r1, r1, #3
	movs r6, #0x86
	lsls r6, r6, #1
	adds r0, r7, r6
	adds r0, r0, r1
	ldr r0, [r0]
	cmp r4, r0
	blt _08083AC6
	lsls r0, r0, #8
	b _08083AC8
_08083AC6:
	lsls r0, r4, #8
_08083AC8:
	lsrs r1, r0, #0x10
_08083ACA:
	ldr r4, [r3]
	ldr r3, _08083ADC @ =0xFFFFE000
	adds r0, r4, r3
	cmp r5, r0
	bgt _08083AE0
	asrs r0, r4, #8
	subs r0, #0x20
	lsls r0, r0, #0x10
	b _08083AF4
	.align 2, 0
_08083ADC: .4byte 0xFFFFE000
_08083AE0:
	movs r6, #0x80
	lsls r6, r6, #6
	adds r0, r4, r6
	cmp r5, r0
	blt _08083AF2
	asrs r0, r4, #8
	adds r0, #0x20
	lsls r0, r0, #0x10
	b _08083AF4
_08083AF2:
	lsls r0, r5, #8
_08083AF4:
	lsrs r0, r0, #0x10
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	lsls r3, r1, #8
	mov r8, r3
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	lsls r6, r0, #8
	mov r4, sl
	adds r3, r2, r4
	lsls r3, r3, #3
	movs r2, #0x86
	lsls r2, r2, #1
	adds r5, r7, r2
	adds r5, r5, r3
	ldr r2, [r5]
	asrs r2, r2, #8
	subs r1, r1, r2
	movs r2, #0x88
	lsls r2, r2, #1
	adds r4, r7, r2
	adds r4, r4, r3
	ldr r2, [r4]
	asrs r2, r2, #8
	subs r0, r0, r2
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	bl sa2__sub_8004418
	adds r1, r7, #0
	adds r1, #0xcc
	movs r3, #0
	mov sb, r3
	strh r0, [r1]
	ldr r0, [r5]
	mov r1, r8
	subs r1, r1, r0
	mov r8, r1
	ldr r0, [r4]
	subs r6, r6, r0
	mov r0, r8
	muls r0, r1, r0
	adds r1, r6, #0
	muls r1, r6, r1
	adds r0, r0, r1
	bl Sqrt
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	adds r1, r7, #0
	adds r1, #0xd0
	str r0, [r1]
	adds r0, r7, #0
	adds r0, #0xd4
	mov r2, sb
	str r2, [r0]
	movs r3, #0xa2
	lsls r3, r3, #1
	adds r1, r7, r3
	movs r0, #0x80
	lsls r0, r0, #4
	str r0, [r1]
	adds r0, r7, #0
	adds r0, #0xe3
	mov r4, sl
	strb r4, [r0]
	b _08083BD0
_08083B7E:
	adds r0, r7, #0
	adds r0, #0xe3
	ldrb r0, [r0]
	mov sl, r0
	ldr r1, [r2, #0x10]
	ldr r0, _08083BE0 @ =gCamera
	adds r0, #0x6a
	asrs r1, r1, #8
	ldrh r0, [r0]
	adds r1, r1, r0
	mov r6, sl
	lsls r3, r6, #1
	add r3, sl
	lsls r3, r3, #3
	movs r4, #0x86
	lsls r4, r4, #1
	adds r0, r7, r4
	adds r0, r0, r3
	ldr r0, [r0]
	asrs r0, r0, #8
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	subs r1, r1, r0
	ldr r0, [r2, #0x14]
	asrs r0, r0, #8
	movs r6, #0x88
	lsls r6, r6, #1
	adds r2, r7, r6
	adds r2, r2, r3
	ldr r2, [r2]
	asrs r2, r2, #8
	subs r0, r0, r2
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	bl sa2__sub_8004418
	adds r1, r7, #0
	adds r1, #0xce
	strh r0, [r1]
_08083BD0:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08083BE0: .4byte gCamera

	thumb_func_start sub_8083BE4
sub_8083BE4: @ 0x08083BE4
	push {r4, r5, lr}
	adds r4, r0, #0
	ldrh r1, [r4, #8]
	movs r3, #0x9b
	lsls r3, r3, #1
	cmp r1, r3
	bne _08083BF4
	b _08083E46
_08083BF4:
	cmp r1, r3
	bgt _08083C2C
	cmp r1, #0x14
	bne _08083BFE
	b _08083D92
_08083BFE:
	cmp r1, #0x14
	bgt _08083C0E
	cmp r1, #0
	beq _08083C78
	cmp r1, #0xa
	bne _08083C0C
	b _08083D3A
_08083C0C:
	b _08083F86
_08083C0E:
	cmp r1, #0xc8
	bne _08083C14
	b _08083DBC
_08083C14:
	cmp r1, #0xc8
	bgt _08083C20
	cmp r1, #0x64
	bne _08083C1E
	b _08083D6C
_08083C1E:
	b _08083F86
_08083C20:
	movs r0, #0x96
	lsls r0, r0, #1
	cmp r1, r0
	bne _08083C2A
	b _08083E18
_08083C2A:
	b _08083F86
_08083C2C:
	movs r0, #0xfa
	lsls r0, r0, #2
	cmp r1, r0
	beq _08083CC6
	cmp r1, r0
	bgt _08083C4C
	movs r0, #0xa0
	lsls r0, r0, #1
	cmp r1, r0
	bne _08083C42
	b _08083F04
_08083C42:
	adds r0, #0xb4
	cmp r1, r0
	bne _08083C4A
	b _08083F44
_08083C4A:
	b _08083F86
_08083C4C:
	movs r0, #0xfa
	lsls r0, r0, #3
	cmp r1, r0
	bne _08083C56
	b _08083F70
_08083C56:
	cmp r1, r0
	bgt _08083C68
	ldr r0, _08083C64 @ =0x000003F2
	cmp r1, r0
	beq _08083C9A
	b _08083F86
	.align 2, 0
_08083C64: .4byte 0x000003F2
_08083C68:
	ldr r0, _08083C74 @ =0x00001770
	cmp r1, r0
	bne _08083C70
	b _08083F76
_08083C70:
	b _08083F86
	.align 2, 0
_08083C74: .4byte 0x00001770
_08083C78:
	adds r0, r4, #0
	adds r0, #0xe2
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r2, _08083D24 @ =gPseudoRandom
	ldr r1, [r2]
	ldr r0, _08083D28 @ =0x00196225
	muls r0, r1, r0
	ldr r1, _08083D2C @ =0x3C6EF35F
	adds r0, r0, r1
	str r0, [r2]
	adds r2, r4, #0
	adds r2, #0xf2
	movs r1, #0
	strh r0, [r2]
	strb r1, [r4, #2]
_08083C9A:
	movs r0, #0xfa
	lsls r0, r0, #2
	strh r0, [r4, #8]
	movs r0, #0x3c
	strh r0, [r4, #4]
	movs r1, #0
	ldr r3, _08083D30 @ =0x000004FE
	movs r2, #1
_08083CAA:
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	movs r5, #0xed
	lsls r5, r5, #2
	adds r0, r0, r5
	adds r0, r4, r0
	strh r3, [r0, #0xc]
	strb r2, [r0, #0x1a]
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #3
	bls _08083CAA
_08083CC6:
	ldrh r0, [r4, #4]
	subs r0, #1
	strh r0, [r4, #4]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _08083CD4
	b _08083F86
_08083CD4:
	adds r0, r4, #0
	adds r0, #0xf2
	adds r2, r4, #0
	adds r2, #0xe2
	ldrb r1, [r2]
	movs r3, #1
	lsls r3, r1
	ldrh r0, [r0]
	ands r3, r0
	cmp r1, #4
	bhi _08083CEE
	cmp r3, #0
	bne _08083CF2
_08083CEE:
	cmp r1, #0
	bne _08083D34
_08083CF2:
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	movs r0, #0x3c
	strh r0, [r4, #4]
	movs r1, #0
	movs r3, #0
	ldr r2, _08083D30 @ =0x000004FE
_08083D02:
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	movs r5, #0xed
	lsls r5, r5, #2
	adds r0, r0, r5
	adds r0, r4, r0
	strh r2, [r0, #0xc]
	strb r3, [r0, #0x1a]
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #3
	bls _08083D02
	movs r0, #0xa
	b _08083F84
	.align 2, 0
_08083D24: .4byte gPseudoRandom
_08083D28: .4byte 0x00196225
_08083D2C: .4byte 0x3C6EF35F
_08083D30: .4byte 0x000004FE
_08083D34:
	movs r0, #0xfa
	lsls r0, r0, #3
	b _08083F84
_08083D3A:
	ldrh r0, [r4, #4]
	subs r0, #1
	strh r0, [r4, #4]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bne _08083D56
	movs r0, #0x64
	strh r0, [r4, #8]
	movs r0, #0x90
	lsls r0, r0, #2
	bl m4aSongNumStart
	b _08083D62
_08083D56:
	cmp r0, #0xa
	bne _08083D62
	adds r0, r4, #0
	movs r1, #0
	bl sub_8083A44
_08083D62:
	adds r0, r4, #0
	movs r1, #0
	bl sub_8082E2C
	b _08083F86
_08083D6C:
	adds r0, r4, #0
	adds r0, #0xd0
	adds r2, r4, #0
	adds r2, #0xd4
	ldr r0, [r0]
	ldr r1, [r2]
	cmp r0, r1
	ble _08083D8A
	movs r3, #0xa2
	lsls r3, r3, #1
	adds r0, r4, r3
	ldr r0, [r0]
	adds r0, r1, r0
	str r0, [r2]
	b _08083F60
_08083D8A:
	movs r0, #0x3c
	strh r0, [r4, #4]
	movs r0, #0x14
	b _08083F5E
_08083D92:
	adds r0, r4, #0
	movs r1, #1
	bl sub_8082E2C
	ldrh r0, [r4, #4]
	subs r0, #1
	strh r0, [r4, #4]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bne _08083DAC
	movs r0, #0xc8
	b _08083F84
_08083DAC:
	cmp r0, #0xa
	beq _08083DB2
	b _08083F86
_08083DB2:
	adds r0, r4, #0
	movs r1, #1
	bl sub_8083A44
	b _08083F86
_08083DBC:
	movs r0, #0x96
	lsls r0, r0, #1
	strh r0, [r4, #8]
	ldrb r0, [r4]
	cmp r0, #2
	bls _08083DD0
	movs r0, #0x78
	strh r0, [r4, #4]
	movs r0, #0
	b _08083DFA
_08083DD0:
	adds r0, r4, #0
	adds r0, #0xce
	ldrh r1, [r0]
	ldr r0, _08083DE4 @ =0x000001FF
	cmp r1, r0
	bhi _08083DE8
	adds r1, r4, #0
	adds r1, #0xe4
	movs r0, #1
	b _08083DEE
	.align 2, 0
_08083DE4: .4byte 0x000001FF
_08083DE8:
	adds r1, r4, #0
	adds r1, #0xe4
	movs r0, #0
_08083DEE:
	str r0, [r1]
	adds r0, r4, #0
	adds r0, #0xe8
	movs r1, #0
	str r1, [r0]
	movs r0, #1
_08083DFA:
	strb r0, [r4, #2]
	ldr r0, _08083E14 @ =0x00000241
	bl m4aSongNumStart
	movs r0, #0
	bl sub_80870E4
	adds r0, r4, #0
	movs r1, #2
	bl sub_8082E2C
	b _08083F86
	.align 2, 0
_08083E14: .4byte 0x00000241
_08083E18:
	ldr r2, _08083EA4 @ =gDispCnt
	ldrh r0, [r2]
	movs r5, #0x80
	lsls r5, r5, #6
	adds r1, r5, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _08083EA8 @ =gWinRegs
	movs r0, #0xa0
	strh r0, [r1]
	movs r0, #0xf0
	strh r0, [r1, #4]
	movs r0, #0x3f
	strh r0, [r1, #8]
	movs r0, #0x18
	strh r0, [r1, #0xa]
	ldr r1, _08083EAC @ =gBldRegs
	ldr r0, _08083EB0 @ =0x00003FBF
	strh r0, [r1]
	movs r0, #8
	strh r0, [r1, #2]
	strh r0, [r1, #4]
	strh r3, [r4, #8]
_08083E46:
	adds r0, r4, #0
	movs r1, #2
	bl sub_8082E2C
	adds r0, r4, #0
	adds r0, #0xe3
	ldrb r0, [r0]
	lsls r2, r0, #1
	adds r2, r2, r0
	lsls r2, r2, #3
	movs r1, #0x86
	lsls r1, r1, #1
	adds r0, r4, r1
	adds r0, r0, r2
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r3, _08083EB4 @ =gCamera
	ldr r1, [r3]
	subs r0, r0, r1
	movs r5, #0x88
	lsls r5, r5, #1
	adds r1, r4, r5
	adds r1, r1, r2
	ldr r1, [r1]
	asrs r1, r1, #8
	ldr r2, [r3, #4]
	subs r1, r1, r2
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	adds r5, r4, #0
	adds r5, #0xce
	ldrh r2, [r5]
	bl sub_808587C
	ldrb r0, [r4, #2]
	cmp r0, #0
	bne _08083EB8
	ldrh r0, [r4, #4]
	subs r0, #1
	strh r0, [r4, #4]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _08083EF2
	b _08083EEC
	.align 2, 0
_08083EA4: .4byte gDispCnt
_08083EA8: .4byte gWinRegs
_08083EAC: .4byte gBldRegs
_08083EB0: .4byte 0x00003FBF
_08083EB4: .4byte gCamera
_08083EB8:
	adds r0, r4, #0
	adds r0, #0xe4
	ldr r0, [r0]
	cmp r0, #0
	beq _08083ED0
	ldrh r0, [r5]
	adds r0, #8
	ldr r2, _08083ECC @ =0x000003FF
	adds r1, r2, #0
	b _08083ED8
	.align 2, 0
_08083ECC: .4byte 0x000003FF
_08083ED0:
	ldrh r0, [r5]
	subs r0, #8
	ldr r3, _08083EFC @ =0x000003FF
	adds r1, r3, #0
_08083ED8:
	ands r0, r1
	strh r0, [r5]
	adds r0, r4, #0
	adds r0, #0xe8
	ldr r1, [r0]
	adds r1, #8
	str r1, [r0]
	ldr r0, _08083F00 @ =0x000005FF
	cmp r1, r0
	ble _08083EF2
_08083EEC:
	movs r0, #0xa0
	lsls r0, r0, #1
	strh r0, [r4, #8]
_08083EF2:
	adds r0, r4, #0
	bl sub_808717C
	b _08083F86
	.align 2, 0
_08083EFC: .4byte 0x000003FF
_08083F00: .4byte 0x000005FF
_08083F04:
	ldr r2, _08083F30 @ =gDispCnt
	ldrh r1, [r2]
	ldr r0, _08083F34 @ =0x0000DFFF
	ands r0, r1
	strh r0, [r2]
	ldr r0, _08083F38 @ =gWinRegs
	movs r1, #0
	strh r1, [r0, #8]
	strh r1, [r0, #0xa]
	ldr r0, _08083F3C @ =gBldRegs
	strh r1, [r0]
	strh r1, [r0, #2]
	strh r1, [r0, #4]
	ldr r2, _08083F40 @ =gFlags
	ldr r0, [r2]
	subs r1, #5
	ands r0, r1
	str r0, [r2]
	movs r0, #0xfa
	lsls r0, r0, #1
	b _08083F5E
	.align 2, 0
_08083F30: .4byte gDispCnt
_08083F34: .4byte 0x0000DFFF
_08083F38: .4byte gWinRegs
_08083F3C: .4byte gBldRegs
_08083F40: .4byte gFlags
_08083F44:
	adds r2, r4, #0
	adds r2, #0xd4
	ldr r1, [r2]
	cmp r1, #0
	beq _08083F5C
	movs r5, #0xa2
	lsls r5, r5, #1
	adds r0, r4, r5
	ldr r0, [r0]
	subs r0, r1, r0
	str r0, [r2]
	b _08083F60
_08083F5C:
	ldr r0, _08083F6C @ =0x000003F2
_08083F5E:
	strh r0, [r4, #8]
_08083F60:
	adds r0, r4, #0
	movs r1, #1
	bl sub_8082E2C
	b _08083F86
	.align 2, 0
_08083F6C: .4byte 0x000003F2
_08083F70:
	movs r0, #0
	strb r0, [r4, #1]
	b _08083F86
_08083F76:
	ldrh r0, [r4, #4]
	subs r0, #1
	strh r0, [r4, #4]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bne _08083F86
_08083F84:
	strh r0, [r4, #8]
_08083F86:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8083F8C
sub_8083F8C: @ 0x08083F8C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r7, r0, #0
	ldrh r1, [r7, #8]
	cmp r1, #0xc8
	bne _08083FA2
	b _08084164
_08083FA2:
	cmp r1, #0xc8
	bgt _08083FBA
	cmp r1, #0x64
	beq _0808404C
	cmp r1, #0x64
	bgt _08083FB4
	cmp r1, #0
	beq _08083FDC
	b _0808438C
_08083FB4:
	cmp r1, #0x6e
	beq _080840AE
	b _0808438C
_08083FBA:
	movs r0, #0xfa
	lsls r0, r0, #1
	cmp r1, r0
	bne _08083FC4
	b _0808430C
_08083FC4:
	cmp r1, r0
	bgt _08083FD0
	cmp r1, #0xd2
	bne _08083FCE
	b _080842C8
_08083FCE:
	b _0808438C
_08083FD0:
	movs r0, #0xff
	lsls r0, r0, #1
	cmp r1, r0
	bne _08083FDA
	b _08084374
_08083FDA:
	b _0808438C
_08083FDC:
	adds r0, r7, #0
	adds r0, #0xbb
	strb r1, [r0]
	movs r3, #0
	adds r5, r7, #0
	adds r5, #0xe2
	adds r4, r7, #0
	adds r4, #0xbc
	movs r1, #0
	adds r2, r7, #0
	adds r2, #0xc4
_08083FF2:
	adds r0, r4, r3
	strb r1, [r0]
	adds r0, r2, r3
	strb r1, [r0]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #6
	bls _08083FF2
	movs r0, #0
	strb r0, [r5]
	strb r0, [r7, #3]
	strb r0, [r7, #2]
	movs r0, #1
	strh r0, [r7, #4]
	movs r0, #0x64
	strh r0, [r7, #8]
	movs r0, #0x90
	lsls r0, r0, #2
	bl m4aSongNumStart
	movs r1, #0
	movs r3, #0
	ldr r2, _08084048 @ =0x000004FE
_08084022:
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	movs r4, #0xed
	lsls r4, r4, #2
	adds r0, r0, r4
	adds r0, r7, r0
	strh r2, [r0, #0xc]
	strb r3, [r0, #0x1a]
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #3
	bls _08084022
	adds r0, r7, #0
	movs r1, #0
	bl sub_8082E2C
	b _0808438C
	.align 2, 0
_08084048: .4byte 0x000004FE
_0808404C:
	ldrh r0, [r7, #4]
	subs r0, #1
	strh r0, [r7, #4]
	lsls r0, r0, #0x10
	adds r1, r7, #0
	adds r1, #0xbb
	cmp r0, #0
	bne _08084078
	movs r0, #0x14
	strh r0, [r7, #4]
	ldrb r0, [r1]
	cmp r0, #6
	bhi _08084078
	adds r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #6
	bne _08084078
	ldrh r0, [r7, #4]
	subs r0, #4
	strh r0, [r7, #4]
_08084078:
	movs r3, #0
	adds r2, r1, #0
	adds r4, r7, #0
	adds r4, #0xbc
	ldrb r0, [r2]
	cmp r3, r0
	bhs _0808409C
	adds r5, r4, #0
_08084088:
	adds r0, r5, r3
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	ldrb r1, [r2]
	cmp r3, r1
	blo _08084088
_0808409C:
	ldrb r0, [r4]
	cmp r0, #0x77
	bhi _080840A4
	b _08084364
_080840A4:
	movs r0, #0x3c
	strh r0, [r7, #4]
	movs r0, #0x6e
	strh r0, [r7, #8]
	b _08084364
_080840AE:
	ldrh r0, [r7, #4]
	subs r0, #1
	strh r0, [r7, #4]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _080840BC
	b _08084364
_080840BC:
	adds r1, r7, #0
	adds r1, #0xe2
	movs r0, #1
	strb r0, [r1]
	movs r3, #1
	adds r6, r7, #0
	adds r6, #0xc4
	ldr r2, _08084118 @ =gUnknown_080D5D50
	mov sl, r2
	ldr r4, _0808411C @ =gPseudoRandom
	mov r8, r4
	movs r0, #0
	mov sb, r0
_080840D6:
	adds r1, r6, r3
	movs r0, #0x78
	strb r0, [r1]
	lsls r4, r3, #1
	adds r0, r4, r3
	lsls r0, r0, #3
	adds r5, r7, r0
	mov r2, r8
	ldr r1, [r2]
	ldr r0, _08084120 @ =0x00196225
	muls r0, r1, r0
	ldr r1, _08084124 @ =0x3C6EF35F
	adds r0, r0, r1
	str r0, [r2]
	movs r1, #0xa
	str r3, [sp, #4]
	bl __umodsi3
	lsls r0, r0, #1
	add r0, sl
	ldrh r1, [r0]
	movs r2, #0x8e
	lsls r2, r2, #1
	adds r0, r5, r2
	strh r1, [r0]
	ldr r3, [sp, #4]
	cmp r3, #2
	bne _08084128
	movs r0, #0xa8
	lsls r0, r0, #1
	adds r1, r7, r0
	subs r0, #0x50
	b _08084132
	.align 2, 0
_08084118: .4byte gUnknown_080D5D50
_0808411C: .4byte gPseudoRandom
_08084120: .4byte 0x00196225
_08084124: .4byte 0x3C6EF35F
_08084128:
	movs r2, #0x90
	lsls r2, r2, #1
	adds r1, r5, r2
	movs r0, #0xc0
	lsls r0, r0, #2
_08084132:
	strh r0, [r1]
	adds r0, r4, r3
	lsls r0, r0, #3
	adds r2, r7, r0
	movs r4, #0x91
	lsls r4, r4, #1
	adds r1, r2, r4
	movs r0, #1
	strb r0, [r1]
	movs r1, #0x8f
	lsls r1, r1, #1
	adds r0, r2, r1
	mov r2, sb
	strh r2, [r0]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #2
	bls _080840D6
	movs r0, #0x96
	lsls r0, r0, #2
	strh r0, [r7, #4]
	movs r0, #0xc8
	strh r0, [r7, #8]
	b _08084364
_08084164:
	adds r0, r7, #0
	movs r1, #3
	bl sub_8082E2C
	movs r3, #1
	ldr r4, _08084194 @ =gPseudoRandom
	mov sl, r4
_08084172:
	lsls r0, r3, #1
	adds r0, r0, r3
	lsls r0, r0, #3
	adds r0, r0, r7
	mov r8, r0
	movs r0, #0x8f
	lsls r0, r0, #1
	add r0, r8
	mov sb, r0
	ldrh r0, [r0]
	cmp r0, #0xa
	beq _080841FC
	cmp r0, #0xa
	bgt _08084198
	cmp r0, #0
	beq _0808419E
	b _0808428E
	.align 2, 0
_08084194: .4byte gPseudoRandom
_08084198:
	cmp r0, #0x14
	beq _08084232
	b _0808428E
_0808419E:
	movs r1, #0x8e
	lsls r1, r1, #1
	add r1, r8
	ldrh r0, [r1]
	subs r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _080841BC
	movs r0, #0x1e
	strh r0, [r1]
	movs r0, #0xa
	mov r1, sb
	strh r0, [r1]
	b _0808428E
_080841BC:
	movs r2, #0x91
	lsls r2, r2, #1
	add r2, r8
	ldrb r0, [r2]
	cmp r0, #0
	bne _080841DE
	adds r1, r7, #0
	adds r1, #0xc4
	adds r1, r1, r3
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x69
	bls _0808428E
	b _080841F2
_080841DE:
	adds r1, r7, #0
	adds r1, #0xc4
	adds r1, r1, r3
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x14
	bhi _0808428E
_080841F2:
	ldrb r0, [r2]
	movs r1, #1
	eors r0, r1
	strb r0, [r2]
	b _0808428E
_080841FC:
	movs r4, #0x8e
	lsls r4, r4, #1
	add r4, r8
	ldrh r0, [r4]
	subs r0, #1
	strh r0, [r4]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0808428E
	adds r0, r7, r3
	ldrb r0, [r0, #1]
	cmp r0, #0
	beq _0808421C
	movs r0, #1
	strh r0, [r4]
	b _0808428E
_0808421C:
	adds r0, r7, #0
	adds r1, r3, #0
	str r3, [sp, #4]
	bl sub_8086A40
	movs r0, #0x1e
	strh r0, [r4]
	movs r0, #0x14
	mov r2, sb
	strh r0, [r2]
	b _0808428C
_08084232:
	movs r6, #0x8e
	lsls r6, r6, #1
	add r6, r8
	ldrh r0, [r6]
	subs r0, #1
	strh r0, [r6]
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	bne _0808428E
	mov r4, sl
	ldr r0, [r4]
	ldr r1, _080842BC @ =0x00196225
	adds r4, r0, #0
	muls r4, r1, r4
	ldr r5, _080842C0 @ =0x3C6EF35F
	adds r4, r4, r5
	mov r0, sl
	str r4, [r0]
	adds r0, r4, #0
	movs r1, #0xa
	str r2, [sp]
	str r3, [sp, #4]
	bl __umodsi3
	lsls r0, r0, #1
	ldr r1, _080842C4 @ =gUnknown_080D5D50
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r6]
	ldr r0, _080842BC @ =0x00196225
	adds r1, r4, #0
	muls r1, r0, r1
	adds r1, r1, r5
	mov r4, sl
	str r1, [r4]
	movs r0, #1
	ands r1, r0
	movs r0, #0x91
	lsls r0, r0, #1
	add r0, r8
	strb r1, [r0]
	ldr r2, [sp]
	mov r0, sb
	strh r2, [r0]
_0808428C:
	ldr r3, [sp, #4]
_0808428E:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #2
	bhi _0808429A
	b _08084172
_0808429A:
	ldrh r1, [r7, #4]
	movs r2, #4
	ldrsh r0, [r7, r2]
	cmp r0, #0
	beq _080842AE
	subs r0, r1, #1
	strh r0, [r7, #4]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0808438C
_080842AE:
	ldrh r0, [r7, #2]
	cmp r0, #0
	bne _0808438C
	movs r0, #0xd2
	strh r0, [r7, #8]
	b _0808438C
	.align 2, 0
_080842BC: .4byte 0x00196225
_080842C0: .4byte 0x3C6EF35F
_080842C4: .4byte gUnknown_080D5D50
_080842C8:
	movs r3, #1
	adds r6, r7, #0
	adds r6, #0xc4
	adds r2, r6, #0
_080842D0:
	adds r1, r2, r3
	ldrb r0, [r1]
	cmp r0, #0x77
	bhi _080842DC
	adds r0, #1
	strb r0, [r1]
_080842DC:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #2
	bls _080842D0
	ldr r0, [r6]
	ldr r1, _08084304 @ =0x00FFFF00
	ands r0, r1
	ldr r1, _08084308 @ =0x00787800
	cmp r0, r1
	bne _08084364
	adds r1, r7, #0
	adds r1, #0xe2
	movs r0, #0
	strb r0, [r1]
	movs r0, #0xfa
	lsls r0, r0, #1
	strh r0, [r7, #8]
	b _08084364
	.align 2, 0
_08084304: .4byte 0x00FFFF00
_08084308: .4byte 0x00787800
_0808430C:
	movs r3, #0
	adds r0, r7, #0
	adds r0, #0xbb
	adds r1, r0, #0
	adds r4, r7, #0
	adds r4, #0xbc
	ldrb r0, [r1]
	cmp r3, r0
	bhs _0808433A
	adds r5, r4, #0
	adds r2, r1, #0
_08084322:
	adds r1, r5, r3
	ldrb r0, [r1]
	cmp r0, #0
	beq _0808432E
	subs r0, #1
	strb r0, [r1]
_0808432E:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	ldrb r1, [r2]
	cmp r3, r1
	blo _08084322
_0808433A:
	ldrb r0, [r4]
	cmp r0, #0
	bne _08084364
	strb r0, [r7, #1]
	movs r1, #0
	ldr r3, _08084370 @ =0x000004FE
	movs r2, #1
_08084348:
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	movs r4, #0xed
	lsls r4, r4, #2
	adds r0, r0, r4
	adds r0, r7, r0
	strh r3, [r0, #0xc]
	strb r2, [r0, #0x1a]
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #3
	bls _08084348
_08084364:
	adds r0, r7, #0
	movs r1, #3
	bl sub_8082E2C
	b _0808438C
	.align 2, 0
_08084370: .4byte 0x000004FE
_08084374:
	ldrh r0, [r7, #4]
	subs r0, #1
	strh r0, [r7, #4]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bne _08084384
	strh r0, [r7, #8]
_08084384:
	adds r0, r7, #0
	movs r1, #3
	bl sub_8082E2C
_0808438C:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_808439C
sub_808439C: @ 0x0808439C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r7, r0, #0
	ldrh r3, [r7, #8]
	movs r4, #0x96
	lsls r4, r4, #1
	cmp r3, r4
	bne _080843B2
	b _0808457C
_080843B2:
	cmp r3, r4
	bgt _080843D6
	cmp r3, #0x64
	beq _080844B0
	cmp r3, #0x64
	bgt _080843C8
	cmp r3, #0
	beq _0808440A
	cmp r3, #0xa
	beq _08084490
	b _08084908
_080843C8:
	cmp r3, #0x6e
	bne _080843CE
	b _08084504
_080843CE:
	cmp r3, #0xc8
	bne _080843D4
	b _08084550
_080843D4:
	b _08084908
_080843D6:
	movs r0, #0xaf
	lsls r0, r0, #1
	cmp r3, r0
	bne _080843E0
	b _080846F0
_080843E0:
	cmp r3, r0
	bgt _080843F6
	subs r0, #0x14
	cmp r3, r0
	bne _080843EC
	b _080845D4
_080843EC:
	adds r0, #0xa
	cmp r3, r0
	bne _080843F4
	b _080846D8
_080843F4:
	b _08084908
_080843F6:
	movs r0, #0xb4
	lsls r0, r0, #1
	cmp r3, r0
	bne _08084400
	b _08084788
_08084400:
	adds r0, #0x8c
	cmp r3, r0
	bne _08084408
	b _0808489C
_08084408:
	b _08084908
_0808440A:
	ldr r2, _0808447C @ =gPseudoRandom
	ldr r1, [r2]
	ldr r0, _08084480 @ =0x00196225
	muls r0, r1, r0
	ldr r1, _08084484 @ =0x3C6EF35F
	adds r0, r0, r1
	str r0, [r2]
	movs r1, #1
	ands r0, r1
	adds r1, r7, #0
	adds r1, #0xe2
	strb r0, [r1]
	subs r1, #0x12
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r1]
	adds r0, r7, #0
	adds r0, #0xd4
	str r3, [r0]
	adds r0, #4
	str r3, [r0]
	movs r2, #0xa2
	lsls r2, r2, #1
	adds r1, r7, r2
	movs r0, #0x80
	lsls r0, r0, #2
	str r0, [r1]
	adds r0, r7, #0
	adds r0, #0xe4
	str r3, [r0]
	adds r0, #4
	str r3, [r0]
	strh r3, [r7, #4]
	movs r0, #0x64
	strh r0, [r7, #8]
	ldr r0, _08084488 @ =0x00000239
	bl m4aSongNumStart
	movs r1, #0
	movs r3, #0
	ldr r2, _0808448C @ =0x000004FE
_0808445C:
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	movs r4, #0xed
	lsls r4, r4, #2
	adds r0, r0, r4
	adds r0, r7, r0
	strh r2, [r0, #0xc]
	strb r3, [r0, #0x1a]
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #3
	bls _0808445C
	b _08084908
	.align 2, 0
_0808447C: .4byte gPseudoRandom
_08084480: .4byte 0x00196225
_08084484: .4byte 0x3C6EF35F
_08084488: .4byte 0x00000239
_0808448C: .4byte 0x000004FE
_08084490:
	ldrh r0, [r7, #4]
	subs r0, #1
	strh r0, [r7, #4]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0808449E
	b _08084908
_0808449E:
	adds r2, r7, #0
	adds r2, #0xe2
	ldrb r0, [r2]
	movs r1, #1
	eors r0, r1
	strb r0, [r2]
	movs r0, #0x64
	strh r0, [r7, #8]
	b _08084908
_080844B0:
	adds r0, r7, #0
	adds r0, #0xe2
	ldrb r0, [r0]
	movs r1, #1
	cmp r0, #0
	beq _080844BE
	movs r1, #2
_080844BE:
	adds r4, r1, #0
	adds r0, r7, #0
	adds r0, #0xd0
	lsls r1, r4, #2
	adds r2, r0, r1
	ldr r0, [r0]
	ldr r1, [r2]
	cmp r0, r1
	ble _080844DE
	movs r6, #0xa2
	lsls r6, r6, #1
	adds r0, r7, r6
	ldr r0, [r0]
	adds r0, r1, r0
	str r0, [r2]
	b _080844E8
_080844DE:
	ldr r0, _08084500 @ =0x00000239
	bl m4aSongNumStart
	movs r0, #0x6e
	strh r0, [r7, #8]
_080844E8:
	subs r0, r4, #1
	lsls r0, r0, #2
	adds r1, r7, #0
	adds r1, #0xe4
	adds r1, r1, r0
	ldr r0, [r1]
	movs r2, #0xc0
	lsls r2, r2, #1
	adds r0, r0, r2
	str r0, [r1]
	b _0808456C
	.align 2, 0
_08084500: .4byte 0x00000239
_08084504:
	adds r0, r7, #0
	adds r0, #0xe2
	ldrb r0, [r0]
	movs r1, #2
	cmp r0, #0
	beq _08084512
	movs r1, #1
_08084512:
	adds r4, r1, #0
	adds r0, r7, #0
	adds r0, #0xd0
	lsls r1, r4, #2
	adds r2, r0, r1
	ldr r0, [r0]
	ldr r1, [r2]
	cmp r0, r1
	ble _08084532
	movs r3, #0xa2
	lsls r3, r3, #1
	adds r0, r7, r3
	ldr r0, [r0]
	adds r0, r1, r0
	str r0, [r2]
	b _0808453A
_08084532:
	movs r0, #0x3c
	strh r0, [r7, #4]
	movs r0, #0xc8
	strh r0, [r7, #8]
_0808453A:
	subs r0, r4, #1
	lsls r0, r0, #2
	adds r1, r7, #0
	adds r1, #0xe4
	adds r1, r1, r0
	ldr r0, [r1]
	movs r4, #0xc0
	lsls r4, r4, #1
	adds r0, r0, r4
	str r0, [r1]
	b _0808456C
_08084550:
	ldrh r0, [r7, #4]
	subs r0, #1
	strh r0, [r7, #4]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0808456C
	ldr r0, _08084578 @ =0x00000505
	movs r2, #0x87
	lsls r2, r2, #2
	movs r1, #0
	movs r3, #1
	bl sub_8078DB0
	strh r4, [r7, #8]
_0808456C:
	adds r0, r7, #0
	movs r1, #4
	bl sub_8082E2C
	b _08084908
	.align 2, 0
_08084578: .4byte 0x00000505
_0808457C:
	ldr r2, _080845F8 @ =gDispCnt
	ldrh r0, [r2]
	movs r6, #0x84
	lsls r6, r6, #6
	adds r1, r6, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080845FC @ =gWinRegs
	movs r3, #0
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	movs r0, #0x3f
	strh r0, [r1, #8]
	movs r0, #0x18
	strh r0, [r1, #0xa]
	ldr r1, _08084600 @ =gBldRegs
	ldr r0, _08084604 @ =0x00003841
	strh r0, [r1]
	ldr r0, _08084608 @ =0x00000C0C
	strh r0, [r1, #2]
	movs r0, #0xc
	strh r0, [r1, #4]
	movs r0, #1
	strb r0, [r7, #0xf]
	ldr r0, _0808460C @ =0x00000814
	adds r1, r7, r0
	ldr r2, _08084610 @ =gUnknown_080D5D0C
	ldrh r0, [r2]
	strh r0, [r1, #0xc]
	ldrh r0, [r2, #2]
	strb r0, [r1, #0x1a]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	adds r0, r7, #0
	adds r0, #0xcc
	strh r3, [r0]
	ldr r0, _08084614 @ =0x0000023E
	bl m4aSongNumStart
	movs r0, #0xa5
	lsls r0, r0, #1
	strh r0, [r7, #8]
_080845D4:
	adds r1, r7, #0
	adds r1, #0xcc
	ldrh r0, [r1]
	adds r0, #4
	strh r0, [r1]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	adds r3, r1, #0
	cmp r0, #0xff
	bls _0808463A
	adds r0, r7, #0
	adds r0, #0xe2
	ldrb r0, [r0]
	cmp r0, #0
	bne _08084618
	movs r0, #5
	adds r1, #0x21
	b _0808461E
	.align 2, 0
_080845F8: .4byte gDispCnt
_080845FC: .4byte gWinRegs
_08084600: .4byte gBldRegs
_08084604: .4byte 0x00003841
_08084608: .4byte 0x00000C0C
_0808460C: .4byte 0x00000814
_08084610: .4byte gUnknown_080D5D0C
_08084614: .4byte 0x0000023E
_08084618:
	movs r0, #6
	adds r1, r7, #0
	adds r1, #0xed
_0808461E:
	strb r0, [r1]
	movs r0, #0xb4
	strh r0, [r7, #4]
	ldr r2, _080846BC @ =0x00000814
	adds r1, r7, r2
	ldr r2, _080846C0 @ =gUnknown_080D5D0C
	ldrh r0, [r2, #4]
	strh r0, [r1, #0xc]
	ldrh r0, [r2, #6]
	strb r0, [r1, #0x1a]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	adds r0, #0x55
	strh r0, [r7, #8]
_0808463A:
	adds r0, r7, #0
	adds r0, #0x9c
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r2, _080846C4 @ =gCamera
	ldr r1, [r2]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r8, r0
	adds r0, r7, #0
	adds r0, #0xa0
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov sb, r0
	ldr r1, _080846C8 @ =gSineTable
	ldrh r0, [r3]
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r3, #0
	ldrsh r1, [r0, r3]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	cmp r0, #0
	bge _0808467A
	ldr r4, _080846CC @ =0x00003FFF
	adds r0, r0, r4
_0808467A:
	mov r6, r8
	lsls r4, r6, #0x10
	asrs r1, r4, #0x10
	mov r8, r1
	ldr r2, _080846D0 @ =0xFFA80000
	adds r4, r4, r2
	asrs r4, r4, #0x10
	mov r3, sb
	lsls r5, r3, #0x10
	asrs r5, r5, #0x10
	asrs r6, r0, #0xe
	adds r0, r4, #0
	adds r1, r5, #0
	adds r2, r6, #0
	bl sub_8085618
	adds r0, r7, #0
	adds r1, r4, #0
	adds r2, r5, #0
	adds r3, r6, #0
	bl sub_8087188
	adds r0, r7, #0
	movs r1, #4
	bl sub_8082E2C
	ldr r1, _080846D4 @ =gBgScrollRegs
	movs r4, #0xac
	lsls r4, r4, #1
	adds r0, r4, #0
	mov r6, r8
	b _08084766
	.align 2, 0
_080846BC: .4byte 0x00000814
_080846C0: .4byte gUnknown_080D5D0C
_080846C4: .4byte gCamera
_080846C8: .4byte gSineTable
_080846CC: .4byte 0x00003FFF
_080846D0: .4byte 0xFFA80000
_080846D4: .4byte gBgScrollRegs
_080846D8:
	adds r0, r7, #0
	adds r0, #0xee
	ldrb r0, [r0]
	cmp r0, #0
	beq _08084718
	movs r0, #4
	adds r1, r7, #0
	adds r1, #0xed
	strb r0, [r1]
	movs r0, #0xaf
	lsls r0, r0, #1
	b _08084716
_080846F0:
	adds r0, r7, #0
	adds r0, #0xee
	ldrb r0, [r0]
	cmp r0, #0
	beq _08084718
	adds r1, r7, #0
	adds r1, #0xed
	movs r0, #0
	strb r0, [r1]
	ldr r3, _08084774 @ =0x00000814
	adds r1, r7, r3
	ldr r2, _08084778 @ =gUnknown_080D5D0C
	ldrh r0, [r2]
	strh r0, [r1, #0xc]
	ldrh r0, [r2, #2]
	strb r0, [r1, #0x1a]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	adds r0, #0x69
_08084716:
	strh r0, [r7, #8]
_08084718:
	adds r0, r7, #0
	adds r0, #0x9c
	ldr r4, [r0]
	asrs r4, r4, #8
	ldr r1, _0808477C @ =gCamera
	ldr r0, [r1]
	subs r4, r4, r0
	adds r0, r7, #0
	adds r0, #0xa0
	ldr r5, [r0]
	asrs r5, r5, #8
	ldr r0, [r1, #4]
	subs r5, r5, r0
	lsls r4, r4, #0x10
	asrs r6, r4, #0x10
	ldr r0, _08084780 @ =0xFFA80000
	adds r4, r4, r0
	asrs r4, r4, #0x10
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	adds r0, r4, #0
	adds r1, r5, #0
	movs r2, #0x18
	bl sub_8085618
	adds r0, r7, #0
	adds r1, r4, #0
	adds r2, r5, #0
	movs r3, #0x18
	bl sub_8087188
	adds r0, r7, #0
	movs r1, #4
	bl sub_8082E2C
	ldr r1, _08084784 @ =gBgScrollRegs
	movs r2, #0xac
	lsls r2, r2, #1
	adds r0, r2, #0
_08084766:
	subs r0, r0, r6
	strh r0, [r1]
	movs r0, #0x18
	subs r0, r0, r5
	strh r0, [r1, #2]
	b _08084908
	.align 2, 0
_08084774: .4byte 0x00000814
_08084778: .4byte gUnknown_080D5D0C
_0808477C: .4byte gCamera
_08084780: .4byte 0xFFA80000
_08084784: .4byte gBgScrollRegs
_08084788:
	adds r4, r7, #0
	adds r4, #0xcc
	ldrh r0, [r4]
	subs r0, #4
	strh r0, [r4]
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	cmp r3, #0
	bne _080847D4
	ldr r2, _0808486C @ =gDispCnt
	ldrh r1, [r2]
	ldr r0, _08084870 @ =0x0000DEFF
	ands r0, r1
	strh r0, [r2]
	ldr r0, _08084874 @ =gWinRegs
	strh r3, [r0, #8]
	strh r3, [r0, #0xa]
	ldr r0, _08084878 @ =gBldRegs
	strh r3, [r0]
	strh r3, [r0, #2]
	strh r3, [r0, #4]
	ldr r2, _0808487C @ =gFlags
	ldr r0, [r2]
	movs r1, #5
	rsbs r1, r1, #0
	ands r0, r1
	str r0, [r2]
	ldr r3, _08084880 @ =0x00000814
	adds r1, r7, r3
	ldr r2, _08084884 @ =gUnknown_080D5D0C
	ldrh r0, [r2, #8]
	strh r0, [r1, #0xc]
	ldrh r0, [r2, #0xa]
	strb r0, [r1, #0x1a]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	adds r0, #0xf5
	strh r0, [r7, #8]
_080847D4:
	ldrh r0, [r4]
	cmp r0, #0
	beq _08084842
	adds r0, r7, #0
	adds r0, #0x9c
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r2, _08084888 @ =gCamera
	ldr r1, [r2]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r8, r0
	adds r0, r7, #0
	adds r0, #0xa0
	ldr r0, [r0]
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov sb, r0
	ldr r1, _0808488C @ =gSineTable
	ldrh r0, [r4]
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r4, #0
	ldrsh r1, [r0, r4]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	cmp r0, #0
	bge _0808481A
	ldr r6, _08084890 @ =0x00003FFF
	adds r0, r0, r6
_0808481A:
	mov r1, r8
	lsls r4, r1, #0x10
	ldr r2, _08084894 @ =0xFFA80000
	adds r4, r4, r2
	asrs r4, r4, #0x10
	mov r3, sb
	lsls r5, r3, #0x10
	asrs r5, r5, #0x10
	asrs r6, r0, #0xe
	adds r0, r4, #0
	adds r1, r5, #0
	adds r2, r6, #0
	bl sub_8085618
	adds r0, r7, #0
	adds r1, r4, #0
	adds r2, r5, #0
	adds r3, r6, #0
	bl sub_8087188
_08084842:
	adds r0, r7, #0
	movs r1, #4
	bl sub_8082E2C
	ldr r2, _08084898 @ =gBgScrollRegs
	movs r4, #0xac
	lsls r4, r4, #1
	adds r1, r4, #0
	mov r6, r8
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	subs r1, r1, r0
	strh r1, [r2]
	movs r1, #0x18
	mov r3, sb
	lsls r0, r3, #0x10
	asrs r0, r0, #0x10
	subs r1, r1, r0
	strh r1, [r2, #2]
	b _08084908
	.align 2, 0
_0808486C: .4byte gDispCnt
_08084870: .4byte 0x0000DEFF
_08084874: .4byte gWinRegs
_08084878: .4byte gBldRegs
_0808487C: .4byte gFlags
_08084880: .4byte 0x00000814
_08084884: .4byte gUnknown_080D5D0C
_08084888: .4byte gCamera
_0808488C: .4byte gSineTable
_08084890: .4byte 0x00003FFF
_08084894: .4byte 0xFFA80000
_08084898: .4byte gBgScrollRegs
_0808489C:
	adds r3, r7, #0
	adds r3, #0xd4
	ldr r2, [r3]
	cmp r2, #0
	beq _080848C4
	movs r4, #0xa2
	lsls r4, r4, #1
	adds r1, r7, r4
	ldr r0, [r1]
	subs r0, r2, r0
	str r0, [r3]
	adds r2, r7, #0
	adds r2, #0xd8
	ldr r0, [r2]
	ldr r1, [r1]
	subs r0, r0, r1
	str r0, [r2]
	adds r2, #0xc
	adds r3, #0x14
	b _080848F2
_080848C4:
	strb r2, [r7, #0xf]
	strb r2, [r7, #1]
	movs r1, #0
	adds r2, r7, #0
	adds r2, #0xe4
	adds r3, r7, #0
	adds r3, #0xe8
	ldr r5, _08084914 @ =0x000004FE
	movs r4, #1
_080848D6:
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	movs r6, #0xed
	lsls r6, r6, #2
	adds r0, r0, r6
	adds r0, r7, r0
	strh r5, [r0, #0xc]
	strb r4, [r0, #0x1a]
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #3
	bls _080848D6
_080848F2:
	ldr r0, [r2]
	ldr r1, _08084918 @ =0xFFFFFE80
	adds r0, r0, r1
	str r0, [r2]
	ldr r0, [r3]
	adds r0, r0, r1
	str r0, [r3]
	adds r0, r7, #0
	movs r1, #4
	bl sub_8082E2C
_08084908:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08084914: .4byte 0x000004FE
_08084918: .4byte 0xFFFFFE80

	thumb_func_start sub_808491C
sub_808491C: @ 0x0808491C
	push {r4, r5, lr}
	adds r4, r0, #0
	ldrh r2, [r4, #8]
	cmp r2, #0x64
	beq _080849E0
	cmp r2, #0x64
	bgt _08084934
	cmp r2, #0
	beq _0808494E
	cmp r2, #0xa
	beq _08084986
	b _08084B26
_08084934:
	cmp r2, #0xc8
	bne _0808493A
	b _08084B04
_0808493A:
	cmp r2, #0xc8
	bgt _08084946
	cmp r2, #0x6e
	bne _08084944
	b _08084A6C
_08084944:
	b _08084B26
_08084946:
	cmp r2, #0xd2
	bne _0808494C
	b _08084B12
_0808494C:
	b _08084B26
_0808494E:
	adds r0, r4, #0
	adds r0, #0xb8
	movs r1, #0
	strh r2, [r0]
	adds r0, #2
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	movs r1, #0
	adds r5, r4, #0
	adds r5, #0xed
	adds r2, r4, #0
	adds r2, #0xbc
	movs r3, #0
_0808496A:
	adds r0, r2, r1
	strb r3, [r0]
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #6
	bls _0808496A
	movs r0, #1
	strb r0, [r5]
	movs r0, #0
	strh r0, [r4, #4]
	movs r0, #0xa
	strh r0, [r4, #8]
	b _08084B26
_08084986:
	adds r0, r4, #0
	adds r0, #0xee
	ldrb r0, [r0]
	cmp r0, #0
	bne _08084992
	b _08084B26
_08084992:
	adds r1, r4, #0
	adds r1, #0xed
	movs r0, #0
	strb r0, [r1]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r4, r1
	movs r1, #0
	str r1, [r0]
	movs r2, #0x82
	lsls r2, r2, #1
	adds r0, r4, r2
	str r1, [r0]
	movs r0, #0x85
	lsls r0, r0, #2
	bl m4aSongNumStart
	movs r1, #0
	movs r3, #0
	ldr r2, _080849DC @ =0x000004FE
_080849BA:
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	movs r5, #0xed
	lsls r5, r5, #2
	adds r0, r0, r5
	adds r0, r4, r0
	strh r2, [r0, #0xc]
	strb r3, [r0, #0x1a]
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #3
	bls _080849BA
	movs r0, #0x64
	strh r0, [r4, #8]
	b _08084B26
	.align 2, 0
_080849DC: .4byte 0x000004FE
_080849E0:
	adds r2, r4, #0
	adds r2, #0xbb
	ldrb r0, [r2]
	cmp r0, #5
	bhi _08084A06
	adds r1, r4, #0
	adds r1, #0xbc
	ldrb r0, [r2]
	adds r1, r1, r0
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x17
	bls _08084A06
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
_08084A06:
	ldrh r0, [r4, #4]
	adds r0, #1
	strh r0, [r4, #4]
	movs r1, #0x82
	lsls r1, r1, #1
	adds r5, r4, r1
	ldr r0, [r5]
	asrs r0, r0, #8
	cmp r0, #0
	bge _08084A1E
	ldr r2, _08084A58 @ =0x000003FF
	adds r0, r0, r2
_08084A1E:
	asrs r0, r0, #0xa
	lsls r0, r0, #0x18
	movs r1, #0x80
	lsls r1, r1, #1
	adds r2, r4, r1
	ldr r1, _08084A5C @ =gUnknown_080D5D20
	lsrs r0, r0, #0x16
	adds r0, r0, r1
	ldr r1, [r2]
	ldr r3, [r0]
	subs r1, r1, r3
	ldr r0, _08084A60 @ =0x0003FFFF
	ands r1, r0
	str r1, [r2]
	asrs r1, r1, #8
	adds r0, r4, #0
	adds r0, #0xb8
	strh r1, [r0]
	ldr r0, [r5]
	adds r1, r0, r3
	str r1, [r5]
	ldr r0, _08084A64 @ =0x000BFFFF
	cmp r1, r0
	ble _08084AEC
	ldr r2, _08084A68 @ =0xFFF80000
	adds r0, r1, r2
	str r0, [r5]
	movs r0, #0x6e
	b _08084AEA
	.align 2, 0
_08084A58: .4byte 0x000003FF
_08084A5C: .4byte gUnknown_080D5D20
_08084A60: .4byte 0x0003FFFF
_08084A64: .4byte 0x000BFFFF
_08084A68: .4byte 0xFFF80000
_08084A6C:
	adds r2, r4, #0
	adds r2, #0xbb
	ldrb r0, [r2]
	cmp r0, #0
	beq _08084A8E
	adds r1, r0, #0
	adds r1, r4, r1
	adds r1, #0xbb
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08084A8E
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
_08084A8E:
	movs r5, #0x80
	lsls r5, r5, #1
	adds r2, r4, r5
	ldr r1, _08084AF8 @ =gUnknown_080D5D20
	ldr r0, [r2]
	ldr r3, [r1, #8]
	subs r0, r0, r3
	ldr r1, _08084AFC @ =0x0003FFFF
	ands r0, r1
	str r0, [r2]
	asrs r0, r0, #8
	adds r2, r4, #0
	adds r2, #0xb8
	strh r0, [r2]
	movs r0, #0x82
	lsls r0, r0, #1
	adds r1, r4, r0
	ldr r0, [r1]
	subs r0, r0, r3
	str r0, [r1]
	cmp r0, #0
	bgt _08084AEC
	movs r0, #0
	strh r0, [r2]
	movs r0, #0x85
	lsls r0, r0, #2
	bl m4aSongNumStop
	movs r1, #0
	ldr r3, _08084B00 @ =0x000004FE
	movs r2, #1
_08084ACC:
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	movs r5, #0xed
	lsls r5, r5, #2
	adds r0, r0, r5
	adds r0, r4, r0
	strh r3, [r0, #0xc]
	strb r2, [r0, #0x1a]
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #3
	bls _08084ACC
	movs r0, #0xc8
_08084AEA:
	strh r0, [r4, #8]
_08084AEC:
	adds r0, r4, #0
	movs r1, #5
	bl sub_8082E2C
	b _08084B26
	.align 2, 0
_08084AF8: .4byte gUnknown_080D5D20
_08084AFC: .4byte 0x0003FFFF
_08084B00: .4byte 0x000004FE
_08084B04:
	movs r0, #2
	adds r1, r4, #0
	adds r1, #0xed
	strb r0, [r1]
	movs r0, #0xd2
	strh r0, [r4, #8]
	b _08084B26
_08084B12:
	adds r0, r4, #0
	adds r0, #0xee
	ldrb r0, [r0]
	cmp r0, #0
	beq _08084B26
	adds r1, r4, #0
	adds r1, #0xed
	movs r0, #0
	strb r0, [r1]
	strb r0, [r4, #1]
_08084B26:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8084B2C
sub_8084B2C: @ 0x08084B2C
	push {lr}
	adds r3, r0, #0
	ldrh r0, [r3, #8]
	cmp r0, #0x64
	beq _08084B66
	cmp r0, #0x64
	bgt _08084B44
	cmp r0, #0
	beq _08084B4A
	cmp r0, #0xa
	beq _08084B52
	b _08084BDA
_08084B44:
	cmp r0, #0xc8
	beq _08084BB4
	b _08084BDA
_08084B4A:
	movs r0, #0xf0
	strh r0, [r3, #4]
	movs r0, #0xa
	b _08084BD8
_08084B52:
	ldrh r0, [r3, #4]
	subs r0, #1
	strh r0, [r3, #4]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _08084BDA
	movs r0, #0x78
	strh r0, [r3, #4]
	movs r0, #0x64
	b _08084BD8
_08084B66:
	ldrh r1, [r3, #4]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08084B7E
	movs r1, #0x84
	lsls r1, r1, #1
	adds r0, r3, r1
	ldrb r1, [r0]
	movs r2, #1
	eors r1, r2
	strb r1, [r0]
_08084B7E:
	ldrh r0, [r3, #4]
	subs r0, #1
	strh r0, [r3, #4]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _08084BDA
	movs r0, #0xb4
	strh r0, [r3, #4]
	movs r0, #8
	adds r1, r3, #0
	adds r1, #0xed
	strb r0, [r1]
	subs r1, #0x49
	ldr r0, _08084BAC @ =0xFFFFFE00
	str r0, [r1]
	adds r1, #4
	ldr r0, _08084BB0 @ =0xFFFFFF00
	str r0, [r1]
	movs r0, #0x96
	adds r1, #0x47
	strb r0, [r1]
	movs r0, #0xc8
	b _08084BD8
	.align 2, 0
_08084BAC: .4byte 0xFFFFFE00
_08084BB0: .4byte 0xFFFFFF00
_08084BB4:
	ldrh r0, [r3, #4]
	subs r0, #1
	movs r1, #0
	strh r0, [r3, #4]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _08084BDA
	movs r2, #0x84
	lsls r2, r2, #1
	adds r0, r3, r2
	strb r1, [r0]
	adds r0, r3, #0
	adds r0, #0xed
	strb r1, [r0]
	ldr r0, _08084BE8 @ =0x00000BB8
	strh r0, [r3, #0x12]
	movs r0, #0x96
	lsls r0, r0, #1
_08084BD8:
	strh r0, [r3, #8]
_08084BDA:
	ldrb r1, [r3, #0xd]
	adds r0, r3, #0
	bl sub_8082E2C
	pop {r0}
	bx r0
	.align 2, 0
_08084BE8: .4byte 0x00000BB8

	thumb_func_start sub_8084BEC
sub_8084BEC: @ 0x08084BEC
	push {r4, lr}
	adds r3, r0, #0
	ldrh r1, [r3, #8]
	cmp r1, #0
	bne _08084C2E
	movs r0, #1
	strh r0, [r3, #4]
	movs r0, #0xfa
	lsls r0, r0, #2
	strh r0, [r3, #8]
	ldr r4, _08084C3C @ =gDispCnt
	ldrh r2, [r4]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r2
	cmp r0, #0
	beq _08084C2E
	ldr r0, _08084C40 @ =0x0000DEFF
	ands r0, r2
	strh r0, [r4]
	ldr r0, _08084C44 @ =gWinRegs
	strh r1, [r0, #8]
	strh r1, [r0, #0xa]
	ldr r0, _08084C48 @ =gBldRegs
	strh r1, [r0]
	strh r1, [r0, #2]
	strh r1, [r0, #4]
	ldr r2, _08084C4C @ =gFlags
	ldr r0, [r2]
	movs r1, #5
	rsbs r1, r1, #0
	ands r0, r1
	str r0, [r2]
_08084C2E:
	ldrb r1, [r3, #0xd]
	adds r0, r3, #0
	bl sub_8082E2C
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08084C3C: .4byte gDispCnt
_08084C40: .4byte 0x0000DEFF
_08084C44: .4byte gWinRegs
_08084C48: .4byte gBldRegs
_08084C4C: .4byte gFlags

	thumb_func_start sub_8084C50
sub_8084C50: @ 0x08084C50
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x30]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	ldrh r0, [r4, #8]
	cmp r0, #0x82
	beq _08084D58
	cmp r0, #0x82
	bgt _08084C84
	cmp r0, #0x64
	beq _08084CCE
	cmp r0, #0x64
	bgt _08084C7A
	cmp r0, #0
	beq _08084CB4
	cmp r0, #0xa
	beq _08084CBC
	b _08084EA6
_08084C7A:
	cmp r0, #0x6e
	beq _08084D08
	cmp r0, #0x78
	beq _08084D48
	b _08084EA6
_08084C84:
	cmp r0, #0xa0
	bne _08084C8A
	b _08084DE8
_08084C8A:
	cmp r0, #0xa0
	bgt _08084C9A
	cmp r0, #0x8c
	beq _08084D7C
	cmp r0, #0x96
	bne _08084C98
	b _08084DC8
_08084C98:
	b _08084EA6
_08084C9A:
	cmp r0, #0xd2
	bne _08084CA0
	b _08084E7A
_08084CA0:
	cmp r0, #0xd2
	bgt _08084CAC
	cmp r0, #0xc8
	bne _08084CAA
	b _08084E48
_08084CAA:
	b _08084EA6
_08084CAC:
	cmp r0, #0xdc
	bne _08084CB2
	b _08084E98
_08084CB2:
	b _08084EA6
_08084CB4:
	movs r0, #0x78
	strh r0, [r4, #4]
	movs r0, #0xa
	b _08084EA4
_08084CBC:
	ldrh r0, [r4, #4]
	subs r0, #1
	strh r0, [r4, #4]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _08084CCA
	b _08084EA6
_08084CCA:
	movs r0, #0x64
	b _08084EA4
_08084CCE:
	adds r1, r4, #0
	adds r1, #0xd0
	movs r0, #0x8c
	lsls r0, r0, #8
	str r0, [r1]
	adds r0, r4, #0
	adds r0, #0xd4
	movs r2, #0
	str r2, [r0]
	movs r0, #0xa2
	lsls r0, r0, #1
	adds r1, r4, r0
	movs r0, #0x80
	lsls r0, r0, #3
	str r0, [r1]
	adds r0, r4, #0
	adds r0, #0xe4
	str r2, [r0]
	adds r1, r4, #0
	adds r1, #0xe8
	movs r0, #0xd8
	lsls r0, r0, #0xa
	str r0, [r1]
	movs r0, #0x90
	lsls r0, r0, #2
	bl m4aSongNumStart
	movs r0, #0x6e
	b _08084EA4
_08084D08:
	adds r0, r4, #0
	adds r0, #0xd0
	adds r2, r4, #0
	adds r2, #0xd4
	ldr r0, [r0]
	ldr r1, [r2]
	cmp r0, r1
	ble _08084D26
	movs r3, #0xa2
	lsls r3, r3, #1
	adds r0, r4, r3
	ldr r0, [r0]
	adds r0, r1, r0
	str r0, [r2]
	b _08084D32
_08084D26:
	ldr r0, _08084D44 @ =0x0000042E
	strh r0, [r5, #0x2c]
	movs r0, #0x3c
	strh r0, [r4, #4]
	movs r0, #0x78
	strh r0, [r4, #8]
_08084D32:
	adds r1, r4, #0
	adds r1, #0xe4
	ldr r0, [r1]
	movs r2, #0xc0
	lsls r2, r2, #1
	adds r0, r0, r2
	str r0, [r1]
	b _08084E3A
	.align 2, 0
_08084D44: .4byte 0x0000042E
_08084D48:
	ldrh r0, [r4, #4]
	subs r0, #1
	strh r0, [r4, #4]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _08084E3A
	movs r0, #0x82
	b _08084E38
_08084D58:
	adds r0, r4, #0
	adds r0, #0xe8
	ldr r1, [r0]
	ldr r3, _08084D78 @ =0xFFFFFE00
	adds r1, r1, r3
	str r1, [r0]
	asrs r1, r1, #8
	movs r0, #0xb8
	lsls r0, r0, #2
	cmp r1, r0
	bgt _08084D9A
	movs r0, #0x87
	lsls r0, r0, #3
	strh r0, [r5, #0x2c]
	movs r0, #0x8c
	b _08084D98
	.align 2, 0
_08084D78: .4byte 0xFFFFFE00
_08084D7C:
	adds r0, r4, #0
	adds r0, #0xe4
	ldr r1, [r0]
	ldr r3, _08084DBC @ =0xFFFFF800
	adds r1, r1, r3
	str r1, [r0]
	ldr r0, _08084DC0 @ =0xFFFF9600
	cmp r1, r0
	bgt _08084D9A
	ldr r0, _08084DC4 @ =0x0000044C
	strh r0, [r5, #0x2c]
	movs r0, #0x78
	strh r0, [r4, #4]
	movs r0, #0x96
_08084D98:
	strh r0, [r4, #8]
_08084D9A:
	adds r0, r4, #0
	movs r1, #6
	bl sub_8082E2C
	movs r1, #0x9e
	lsls r1, r1, #1
	adds r0, r4, r1
	ldr r1, [r0]
	str r1, [r5, #0x14]
	movs r2, #0xa0
	lsls r2, r2, #1
	adds r0, r4, r2
	ldr r0, [r0]
	str r0, [r5, #0x18]
	str r1, [r5, #0x30]
	str r0, [r5, #0x34]
	b _08084EA6
	.align 2, 0
_08084DBC: .4byte 0xFFFFF800
_08084DC0: .4byte 0xFFFF9600
_08084DC4: .4byte 0x0000044C
_08084DC8:
	ldrh r0, [r4, #4]
	subs r0, #1
	strh r0, [r4, #4]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _08084E3A
	movs r3, #0xa2
	lsls r3, r3, #1
	adds r0, r4, r3
	ldr r1, _08084DE4 @ =0xFFFFFC00
	str r1, [r0]
	movs r0, #0xa0
	b _08084E38
	.align 2, 0
_08084DE4: .4byte 0xFFFFFC00
_08084DE8:
	adds r1, r4, #0
	adds r1, #0xe4
	ldr r0, [r1]
	cmp r0, #0
	beq _08084E02
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r0, r2
	str r0, [r1]
	cmp r0, #0
	blt _08084E02
	movs r0, #0
	str r0, [r1]
_08084E02:
	adds r3, r4, #0
	adds r3, #0xe8
	ldr r2, [r3]
	asrs r1, r2, #8
	movs r0, #0xb0
	lsls r0, r0, #2
	cmp r1, r0
	beq _08084E18
	ldr r1, _08084E44 @ =0xFFFFFF00
	adds r0, r2, r1
	str r0, [r3]
_08084E18:
	adds r2, r4, #0
	adds r2, #0xd4
	movs r3, #0xa2
	lsls r3, r3, #1
	adds r0, r4, r3
	ldr r1, [r2]
	ldr r0, [r0]
	adds r1, r1, r0
	str r1, [r2]
	cmp r1, #0
	bgt _08084E3A
	movs r0, #0
	str r0, [r2]
	movs r0, #0x3c
	strh r0, [r4, #4]
	movs r0, #0xc8
_08084E38:
	strh r0, [r4, #8]
_08084E3A:
	adds r0, r4, #0
	movs r1, #6
	bl sub_8082E2C
	b _08084EA6
	.align 2, 0
_08084E44: .4byte 0xFFFFFF00
_08084E48:
	ldrh r0, [r4, #4]
	subs r0, #1
	strh r0, [r4, #4]
	lsls r0, r0, #0x10
	asrs r5, r0, #0x10
	cmp r5, #0
	bne _08084EA6
	movs r0, #0x50
	rsbs r0, r0, #0
	movs r1, #0x78
	bl sa2__sub_8004418
	adds r1, r4, #0
	adds r1, #0xe0
	strh r0, [r1]
	adds r0, r4, #0
	adds r0, #0xfc
	str r5, [r0]
	subs r0, #0x58
	str r5, [r0]
	movs r0, #3
	adds r1, #0xd
	strb r0, [r1]
	movs r0, #0xd2
	b _08084EA4
_08084E7A:
	adds r0, r4, #0
	adds r0, #0xa4
	ldr r1, [r0]
	adds r1, #0x80
	str r1, [r0]
	adds r2, r4, #0
	adds r2, #0xfc
	asrs r1, r1, #8
	ldr r0, [r2]
	adds r0, r0, r1
	str r0, [r2]
	cmp r0, #0xc7
	ble _08084EA6
	movs r0, #0xdc
	b _08084EA4
_08084E98:
	ldr r0, _08084EAC @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08084EB0 @ =sub_8086FE4
	str r0, [r1, #8]
	movs r0, #0xfa
	lsls r0, r0, #2
_08084EA4:
	strh r0, [r4, #8]
_08084EA6:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08084EAC: .4byte gCurTask
_08084EB0: .4byte sub_8086FE4

	thumb_func_start sub_8084EB4
sub_8084EB4: @ 0x08084EB4
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r5, r0, #0
	ldrh r1, [r5, #0x12]
	ldr r6, _08084EDC @ =0x000003F2
	cmp r1, r6
	bne _08084EC4
	b _08085058
_08084EC4:
	cmp r1, r6
	bgt _08084EF2
	cmp r1, #0x64
	beq _08084F82
	cmp r1, #0x64
	bgt _08084EE0
	cmp r1, #0
	beq _08084F34
	cmp r1, #0xa
	beq _08084F4E
	b _080851EE
	.align 2, 0
_08084EDC: .4byte 0x000003F2
_08084EE0:
	cmp r1, #0x6e
	bne _08084EE6
	b _080851EE
_08084EE6:
	movs r0, #0xfa
	lsls r0, r0, #2
	cmp r1, r0
	bne _08084EF0
	b _08085014
_08084EF0:
	b _080851EE
_08084EF2:
	ldr r0, _08084F14 @ =0x00000BB8
	cmp r1, r0
	bne _08084EFA
	b _08085164
_08084EFA:
	cmp r1, r0
	bgt _08084F18
	movs r0, #0xff
	lsls r0, r0, #2
	cmp r1, r0
	bne _08084F08
	b _0808509E
_08084F08:
	movs r0, #0xfa
	lsls r0, r0, #3
	cmp r1, r0
	bne _08084F12
	b _080850BC
_08084F12:
	b _080851EE
	.align 2, 0
_08084F14: .4byte 0x00000BB8
_08084F18:
	ldr r0, _08084F2C @ =0x00000BC2
	cmp r1, r0
	bne _08084F20
	b _080851B0
_08084F20:
	ldr r0, _08084F30 @ =0x00001388
	cmp r1, r0
	bne _08084F28
	b _080851E6
_08084F28:
	b _080851EE
	.align 2, 0
_08084F2C: .4byte 0x00000BC2
_08084F30: .4byte 0x00001388
_08084F34:
	adds r0, r5, #0
	movs r1, #0
	bl sub_80867FC
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08084F44
	b _080851EE
_08084F44:
	adds r0, r5, #0
	movs r1, #0
	bl sub_80854B8
	b _080851EE
_08084F4E:
	ldrh r0, [r5, #0x10]
	subs r0, #1
	strh r0, [r5, #0x10]
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	beq _08084F76
	adds r0, r5, #0
	movs r1, #1
	bl sub_80867FC
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08084F6C
	b _080851EE
_08084F6C:
	adds r0, r5, #0
	movs r1, #1
	bl sub_80854B8
	b _080851EE
_08084F76:
	movs r0, #0x64
	adds r1, r5, #0
	adds r1, #0xef
	strb r0, [r1]
	strh r2, [r5, #0x12]
	b _080851EE
_08084F82:
	ldrh r0, [r5, #0x14]
	subs r0, #1
	strh r0, [r5, #0x14]
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	beq _08084F92
	b _080851EE
_08084F92:
	ldrb r0, [r5]
	cmp r0, #0
	beq _08084FB0
	ldrh r0, [r5, #0x10]
	subs r0, #0x78
	strh r0, [r5, #0x10]
	lsls r0, r0, #0x10
	cmp r0, #0
	bgt _08084FAA
	strh r1, [r5, #0x10]
	strh r1, [r5, #0x12]
	b _08085002
_08084FAA:
	movs r0, #0xa
	strh r0, [r5, #0x12]
	b _08085002
_08084FB0:
	ldr r1, _08084FC4 @ =gStageData
	ldrb r0, [r1, #3]
	cmp r0, #5
	bne _08084FD0
	ldrb r0, [r1, #6]
	cmp r0, #0
	beq _08084FC8
	movs r0, #0x6e
	b _08084FDE
	.align 2, 0
_08084FC4: .4byte gStageData
_08084FC8:
	movs r0, #1
	movs r1, #0
	bl sub_8027674
_08084FD0:
	adds r0, r5, #0
	bl sub_8085458
	movs r0, #0x78
	strh r0, [r5, #0x10]
	movs r0, #0xfa
	lsls r0, r0, #2
_08084FDE:
	strh r0, [r5, #0x12]
	ldr r0, [r5, #0x28]
	adds r0, #0x48
	movs r1, #1
	strh r1, [r0]
	ldr r0, [r5, #0x2c]
	adds r0, #0x48
	strh r1, [r0]
	ldr r1, [r5, #0x28]
	ldr r0, [r1, #4]
	movs r2, #0x80
	lsls r2, r2, #0x14
	orrs r0, r2
	str r0, [r1, #4]
	ldr r1, [r5, #0x2c]
	ldr r0, [r1, #4]
	orrs r0, r2
	str r0, [r1, #4]
_08085002:
	ldrh r0, [r5, #0x12]
	cmp r0, #0xa
	bne _0808500A
	b _080851EE
_0808500A:
	movs r1, #0x64
	adds r0, r5, #0
	adds r0, #0xef
	strb r1, [r0]
	b _080851EE
_08085014:
	ldrh r0, [r5, #0x10]
	subs r0, #1
	strh r0, [r5, #0x10]
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	cmp r4, #0
	beq _08085024
	b _080851EE
_08085024:
	ldr r0, [r5, #0x1c]
	bl VramFree
	ldr r0, [r5, #0x20]
	bl VramFree
	str r4, [r5, #0x1c]
	str r4, [r5, #0x20]
	movs r0, #0x74
	bl VramMalloc
	str r0, [r5, #0x24]
	adds r0, r5, #0
	movs r1, #1
	bl sub_80851FC
	ldr r0, _08085054 @ =0x00000221
	bl m4aSongNumStart
	movs r0, #0xf
	strh r0, [r5, #0x10]
	strh r6, [r5, #0x12]
	b _080851EE
	.align 2, 0
_08085054: .4byte 0x00000221
_08085058:
	ldrh r0, [r5, #0x10]
	subs r0, #1
	strh r0, [r5, #0x10]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _08085066
	b _080851EE
_08085066:
	ldrb r1, [r5, #0xe]
	adds r1, #0xa
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	adds r0, r5, #0
	bl sub_80851FC
	ldr r0, _08085090 @ =0x00000221
	bl m4aSongNumStart
	ldrb r0, [r5, #0xe]
	adds r0, #1
	strb r0, [r5, #0xe]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #5
	bhi _08085094
	movs r0, #0xf
	strh r0, [r5, #0x10]
	b _080851EE
	.align 2, 0
_08085090: .4byte 0x00000221
_08085094:
	movs r0, #0x78
	strh r0, [r5, #0x10]
	movs r0, #0xff
	lsls r0, r0, #2
	b _080851EC
_0808509E:
	ldrh r0, [r5, #0x10]
	subs r0, #1
	strh r0, [r5, #0x10]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _080850AC
	b _080851EE
_080850AC:
	ldr r0, _080850B8 @ =0x00000221
	bl m4aSongNumStart
	movs r0, #0xfa
	lsls r0, r0, #3
	b _080851EC
	.align 2, 0
_080850B8: .4byte 0x00000221
_080850BC:
	ldr r0, _08085148 @ =gStageData
	ldr r0, [r0, #0x1c]
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _08085132
	ldr r3, _0808514C @ =gPseudoRandom
	ldr r0, [r3]
	ldr r2, _08085150 @ =0x00196225
	muls r0, r2, r0
	ldr r1, _08085154 @ =0x3C6EF35F
	adds r0, r0, r1
	ldr r4, _08085158 @ =0x000003FF
	ands r4, r0
	muls r0, r2, r0
	adds r0, r0, r1
	str r0, [r3]
	movs r1, #0x30
	bl __umodsi3
	ldr r3, _0808515C @ =gSineTable
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r4, r2
	lsls r1, r1, #1
	adds r1, r1, r3
	movs r2, #0
	ldrsh r1, [r1, r2]
	adds r2, r1, #0
	muls r2, r0, r2
	lsrs r2, r2, #6
	lsls r1, r4, #1
	adds r1, r1, r3
	movs r3, #0
	ldrsh r1, [r1, r3]
	adds r3, r1, #0
	muls r3, r0, r3
	lsrs r3, r3, #6
	adds r0, r5, #0
	adds r0, #0x9c
	ldr r0, [r0]
	adds r0, r0, r2
	lsls r0, r0, #8
	asrs r0, r0, #0x10
	adds r1, r5, #0
	adds r1, #0xa0
	ldr r1, [r1]
	adds r1, r1, r3
	lsls r1, r1, #8
	asrs r1, r1, #0x10
	movs r2, #0xc0
	lsls r2, r2, #2
	movs r3, #0x1e
	str r3, [sp]
	ldr r3, [r5, #0x24]
	str r3, [sp, #4]
	adds r3, r4, #0
	bl sub_8086D64
_08085132:
	ldrh r0, [r5, #0x10]
	adds r0, #1
	strh r0, [r5, #0x10]
	movs r1, #0x3f
	ands r0, r1
	cmp r0, #0
	bne _080851EE
	ldr r0, _08085160 @ =0x00000221
	bl m4aSongNumStart
	b _080851EE
	.align 2, 0
_08085148: .4byte gStageData
_0808514C: .4byte gPseudoRandom
_08085150: .4byte 0x00196225
_08085154: .4byte 0x3C6EF35F
_08085158: .4byte 0x000003FF
_0808515C: .4byte gSineTable
_08085160: .4byte 0x00000221
_08085164:
	ldr r1, _0808519C @ =gBldRegs
	movs r2, #0
	ldr r0, _080851A0 @ =0x00003FBF
	strh r0, [r1]
	movs r0, #8
	strh r0, [r1, #2]
	strh r2, [r1, #4]
	strh r0, [r5, #0x10]
	ldr r0, _080851A4 @ =0x00000BC2
	strh r0, [r5, #0x12]
	ldr r1, _080851A8 @ =gPlayers
	ldr r0, [r1, #4]
	movs r2, #0x80
	lsls r2, r2, #0x14
	orrs r0, r2
	str r0, [r1, #4]
	movs r0, #0xaa
	lsls r0, r0, #1
	adds r1, r1, r0
	ldr r0, [r1]
	orrs r0, r2
	str r0, [r1]
	ldr r1, _080851AC @ =gUnknown_03001CF0
	movs r0, #0xa0
	lsls r0, r0, #1
	strh r0, [r1, #6]
	b _080851EE
	.align 2, 0
_0808519C: .4byte gBldRegs
_080851A0: .4byte 0x00003FBF
_080851A4: .4byte 0x00000BC2
_080851A8: .4byte gPlayers
_080851AC: .4byte gUnknown_03001CF0
_080851B0:
	ldrh r0, [r5, #0x10]
	subs r0, #1
	strh r0, [r5, #0x10]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _080851EE
	ldr r1, _080851D8 @ =gBldRegs
	ldrh r0, [r1, #4]
	adds r0, #1
	strh r0, [r1, #4]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x10
	bne _080851E0
	ldr r0, _080851DC @ =0x00001388
	strh r0, [r5, #0x12]
	movs r0, #0x78
	strh r0, [r5, #0x10]
	b _080851EE
	.align 2, 0
_080851D8: .4byte gBldRegs
_080851DC: .4byte 0x00001388
_080851E0:
	movs r0, #8
	strh r0, [r5, #0x10]
	b _080851EE
_080851E6:
	bl sub_805602C
	ldr r0, _080851F8 @ =0x00001392
_080851EC:
	strh r0, [r5, #0x12]
_080851EE:
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080851F8: .4byte 0x00001392

	thumb_func_start sub_80851FC
sub_80851FC: @ 0x080851FC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	adds r6, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	cmp r1, #0
	beq _0808522A
	cmp r1, #1
	beq _0808527E
	movs r0, #0
	mov sb, r0
	movs r2, #0x80
	str r2, [sp, #8]
	subs r1, #0xa
	str r1, [sp, #0x10]
	adds r3, r6, #0
	adds r3, #0x9c
	str r3, [sp, #0x14]
	b _080852D4
_0808522A:
	ldrb r0, [r6, #0xc]
	strb r0, [r6, #0xd]
	strb r1, [r6, #0xe]
	movs r4, #0
	mov sb, r4
	movs r3, #1
	movs r4, #0xbe
	lsls r4, r4, #1
_0808523A:
	mov r5, sb
	lsls r0, r5, #1
	add r0, sb
	lsls r0, r0, #3
	adds r0, r6, r0
	movs r1, #0x8e
	lsls r1, r1, #1
	adds r0, r0, r1
	strh r3, [r0]
	movs r7, #0
	lsls r5, r5, #4
	mov r1, sb
	adds r1, #1
	mov r2, sb
	subs r0, r5, r2
	lsls r2, r0, #3
_0808525A:
	lsls r0, r7, #2
	adds r0, r0, r7
	lsls r0, r0, #2
	adds r0, r0, r2
	adds r0, r6, r0
	adds r0, r0, r4
	strh r3, [r0]
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #5
	bls _0808525A
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	mov sb, r0
	cmp r0, #3
	bls _0808523A
	b _080853C4
_0808527E:
	movs r3, #0
	mov sb, r3
_08085282:
	mov r5, sb
	lsls r4, r5, #1
	add r4, sb
	lsls r4, r4, #3
	movs r1, #0x86
	lsls r1, r1, #1
	adds r0, r6, r1
	adds r0, r0, r4
	ldr r0, [r0]
	lsls r0, r0, #8
	asrs r0, r0, #0x10
	movs r2, #0x88
	lsls r2, r2, #1
	adds r1, r6, r2
	adds r1, r1, r4
	ldr r1, [r1]
	lsls r1, r1, #8
	asrs r1, r1, #0x10
	movs r2, #0x1e
	str r2, [sp]
	ldr r2, [r6, #0x24]
	str r2, [sp, #4]
	movs r2, #0x80
	lsls r2, r2, #2
	movs r3, #0
	bl sub_8086D64
	adds r4, r6, r4
	movs r3, #0x8e
	lsls r3, r3, #1
	adds r4, r4, r3
	movs r0, #0
	strh r0, [r4]
	mov r0, sb
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov sb, r0
	cmp r0, #3
	bls _08085282
	b _080853C4
_080852D4:
	ldr r4, [sp, #0x10]
	lsls r0, r4, #0x18
	lsrs r7, r0, #0x18
	ldr r2, _080853D4 @ =gSineTable
	ldr r5, [sp, #8]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r5, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	movs r3, #0
	ldrsh r1, [r0, r3]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #2
	cmp r0, #0
	bge _080852F8
	adds r0, #0x3f
_080852F8:
	asrs r0, r0, #6
	str r0, [sp, #0xc]
	ldr r4, [sp, #8]
	lsls r0, r4, #1
	adds r0, r0, r2
	movs r5, #0
	ldrsh r1, [r0, r5]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #2
	cmp r0, #0
	bge _08085312
	adds r0, #0x3f
_08085312:
	asrs r0, r0, #6
	mov sl, r0
	lsls r3, r7, #2
	adds r1, r3, r7
	lsls r1, r1, #2
	mov r0, sb
	lsls r2, r0, #4
	subs r0, r2, r0
	lsls r0, r0, #3
	adds r1, r1, r0
	movs r4, #0xb6
	lsls r4, r4, #1
	adds r0, r6, r4
	adds r0, r0, r1
	mov ip, r0
	ldr r4, [r0]
	ldr r5, [sp, #0x14]
	ldr r0, [r5]
	mov r8, r3
	adds r5, r2, #0
	cmp r4, r0
	bne _08085360
	movs r2, #0xb8
	lsls r2, r2, #1
	adds r0, r6, r2
	adds r3, r0, r1
	adds r2, r6, #0
	adds r2, #0xa0
	ldr r1, [r3]
	ldr r0, [r2]
	cmp r1, r0
	bne _08085360
	ldr r1, [sp, #0xc]
	adds r0, r4, r1
	mov r4, ip
	str r0, [r4]
	ldr r0, [r2]
	add r0, sl
	str r0, [r3]
_08085360:
	mov r0, r8
	adds r4, r0, r7
	lsls r4, r4, #2
	mov r1, sb
	subs r0, r5, r1
	lsls r0, r0, #3
	adds r4, r4, r0
	movs r2, #0xb6
	lsls r2, r2, #1
	adds r0, r6, r2
	adds r0, r0, r4
	ldr r0, [r0]
	lsls r0, r0, #8
	asrs r0, r0, #0x10
	movs r3, #0xb8
	lsls r3, r3, #1
	adds r1, r6, r3
	adds r1, r1, r4
	ldr r1, [r1]
	lsls r1, r1, #8
	asrs r1, r1, #0x10
	adds r2, #0x94
	movs r3, #0x1e
	str r3, [sp]
	ldr r3, [r6, #0x24]
	str r3, [sp, #4]
	movs r3, #0
	bl sub_8086D64
	adds r4, r6, r4
	movs r5, #0xbe
	lsls r5, r5, #1
	adds r4, r4, r5
	movs r0, #0
	strh r0, [r4]
	mov r0, sb
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov sb, r0
	ldr r1, [sp, #8]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r1, r2
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	str r0, [sp, #8]
	mov r3, sb
	cmp r3, #3
	bls _080852D4
_080853C4:
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080853D4: .4byte gSineTable

	thumb_func_start sub_80853D8
sub_80853D8: @ 0x080853D8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	ldr r0, [r7, #0x2c]
	mov r8, r0
	movs r0, #0x40
	bl VramMalloc
	str r0, [r7, #0x6c]
	adds r1, r7, #0
	adds r1, #0x72
	movs r6, #0
	movs r5, #0
	movs r0, #0x96
	lsls r0, r0, #1
	strh r0, [r1]
	adds r4, r7, #0
	adds r4, #0x74
	movs r0, #0x10
	bl VramMalloc
	str r0, [r7, #0x74]
	movs r0, #0x9f
	lsls r0, r0, #3
	strh r0, [r4, #0xc]
	strb r6, [r4, #0x1a]
	subs r0, #0xb8
	strh r0, [r4, #0x14]
	strh r5, [r4, #0xe]
	strh r5, [r4, #0x16]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	movs r0, #0x10
	strb r0, [r4, #0x1c]
	strb r6, [r4, #0x1f]
	subs r0, #0x11
	str r0, [r4, #0x20]
	movs r0, #0xa0
	lsls r0, r0, #5
	str r0, [r4, #8]
	mov r1, r8
	ldr r0, [r1, #0x10]
	asrs r0, r0, #8
	ldr r2, _08085454 @ =gCamera
	ldr r1, [r2]
	subs r0, r0, r1
	strh r0, [r4, #0x10]
	mov r1, r8
	ldr r0, [r1, #0x14]
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08085454: .4byte gCamera

	thumb_func_start sub_8085458
sub_8085458: @ 0x08085458
	push {lr}
	movs r2, #0
	movs r1, #5
	strb r1, [r0, #1]
	movs r1, #1
	strh r1, [r0, #4]
	strh r2, [r0, #8]
	ldr r3, _080854A0 @ =gDispCnt
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	cmp r0, #0
	beq _08085494
	ldr r0, _080854A4 @ =0x0000DEFF
	ands r0, r1
	strh r0, [r3]
	ldr r0, _080854A8 @ =gWinRegs
	strh r2, [r0, #8]
	strh r2, [r0, #0xa]
	ldr r0, _080854AC @ =gBldRegs
	strh r2, [r0]
	strh r2, [r0, #2]
	strh r2, [r0, #4]
	ldr r2, _080854B0 @ =gFlags
	ldr r0, [r2]
	movs r1, #5
	rsbs r1, r1, #0
	ands r0, r1
	str r0, [r2]
_08085494:
	ldr r1, _080854B4 @ =gStageData
	movs r0, #6
	strb r0, [r1, #4]
	pop {r0}
	bx r0
	.align 2, 0
_080854A0: .4byte gDispCnt
_080854A4: .4byte 0x0000DEFF
_080854A8: .4byte gWinRegs
_080854AC: .4byte gBldRegs
_080854B0: .4byte gFlags
_080854B4: .4byte gStageData

	thumb_func_start sub_80854B8
sub_80854B8: @ 0x080854B8
	push {r4, lr}
	adds r4, r0, #0
	lsls r1, r1, #0x18
	cmp r1, #0
	bne _080854FE
	adds r0, #0x5a
	ldrh r0, [r0]
	strh r0, [r4, #0x10]
	movs r0, #0x32
	adds r1, r4, #0
	adds r1, #0xef
	strb r0, [r1]
	movs r0, #0xa
	strh r0, [r4, #0x12]
	movs r0, #0x91
	lsls r0, r0, #2
	bl m4aSongNumStart
	ldr r1, _080854F0 @ =gStageData
	ldrb r0, [r1, #3]
	cmp r0, #5
	bne _08085580
	ldrb r0, [r1, #6]
	cmp r0, #0
	bne _080854F4
	movs r0, #5
	b _080854F6
	.align 2, 0
_080854F0: .4byte gStageData
_080854F4:
	movs r0, #6
_080854F6:
	movs r1, #0
	bl sub_8027674
	b _08085580
_080854FE:
	movs r0, #0x78
	strh r0, [r4, #0x14]
	ldr r0, _08085548 @ =0x00000502
	movs r1, #0
	movs r2, #0x78
	movs r3, #0
	bl sub_8078DB0
	movs r0, #0x64
	strh r0, [r4, #0x12]
	movs r0, #0xeb
	bl m4aSongNumStart
	ldrb r0, [r4]
	cmp r0, #0
	beq _08085528
	subs r0, #1
	strb r0, [r4]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08085530
_08085528:
	adds r0, r4, #0
	movs r1, #0
	bl sub_80851FC
_08085530:
	ldr r0, _0808554C @ =gStageData
	ldrb r0, [r0, #1]
	cmp r0, #0
	bne _08085550
	ldrb r0, [r4]
	cmp r0, #6
	bne _0808555C
	movs r0, #0x39
	bl sub_80299D4
	b _0808555C
	.align 2, 0
_08085548: .4byte 0x00000502
_0808554C: .4byte gStageData
_08085550:
	ldrb r0, [r4]
	cmp r0, #5
	bne _0808555C
	movs r0, #0x39
	bl sub_80299D4
_0808555C:
	ldr r1, _08085574 @ =gStageData
	ldrb r0, [r1, #3]
	cmp r0, #5
	bne _08085580
	ldrb r0, [r1, #6]
	cmp r0, #0
	bne _08085578
	ldrb r1, [r4]
	movs r0, #3
	bl sub_8027674
	b _08085580
	.align 2, 0
_08085574: .4byte gStageData
_08085578:
	ldrb r1, [r4]
	movs r0, #4
	bl sub_8027674
_08085580:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08085588
sub_08085588: @ 0x08085588
	push {r4, lr}
	ldr r1, _080855B8 @ =gStageData
	adds r1, #0x88
	ldr r1, [r1]
	ldrh r2, [r1, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r4, r2, r1
	ldrb r2, [r0, #2]
	movs r1, #0x7f
	ands r1, r2
	ldrb r2, [r0, #3]
	ldrb r0, [r0, #4]
	lsls r0, r0, #8
	orrs r2, r0
	subs r0, r1, #1
	cmp r0, #5
	bhi _08085610
	lsls r0, r0, #2
	ldr r1, _080855BC @ =_080855C0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080855B8: .4byte gStageData
_080855BC: .4byte _080855C0
_080855C0: @ jump table
	.4byte _080855D8 @ case 0
	.4byte _08085610 @ case 1
	.4byte _080855EE @ case 2
	.4byte _080855EE @ case 3
	.4byte _08085602 @ case 4
	.4byte _08085602 @ case 5
_080855D8:
	movs r0, #0
	strb r0, [r4]
	adds r0, r4, #0
	bl sub_8085458
	movs r0, #0x78
	strh r0, [r4, #0x10]
	movs r0, #0xfa
	lsls r0, r0, #2
	strh r0, [r4, #0x12]
	b _08085610
_080855EE:
	ldrb r1, [r4]
	lsls r0, r2, #0x18
	lsrs r0, r0, #0x18
	cmp r1, r0
	beq _08085610
	adds r0, r4, #0
	movs r1, #1
	bl sub_80854B8
	b _08085610
_08085602:
	ldrh r0, [r4, #0x12]
	cmp r0, #0
	bne _08085610
	adds r0, r4, #0
	movs r1, #0
	bl sub_80854B8
_08085610:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8085618
sub_8085618: @ 0x08085618
	push {r4, r5, r6, lr}
	sub sp, #8
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	lsls r1, r1, #0x10
	lsrs r3, r1, #0x10
	lsls r2, r2, #0x10
	lsrs r4, r2, #0x10
	movs r1, #0
	ldr r0, _08085648 @ =gBgOffsetsHBlank
	ldr r0, [r0]
	ldr r2, _0808564C @ =gUnknown_03002E70
	cmp r0, r2
	bne _08085658
	add r0, sp, #4
	strh r1, [r0]
	ldr r0, _08085650 @ =0x040000D4
	add r1, sp, #4
	str r1, [r0]
	str r2, [r0, #4]
	ldr r1, _08085654 @ =0x81000140
	str r1, [r0, #8]
	ldr r0, [r0, #8]
	b _0808566E
	.align 2, 0
_08085648: .4byte gBgOffsetsHBlank
_0808564C: .4byte gUnknown_03002E70
_08085650: .4byte 0x040000D4
_08085654: .4byte 0x81000140
_08085658:
	add r0, sp, #4
	strh r1, [r0]
	ldr r1, _080856B0 @ =0x040000D4
	str r0, [r1]
	movs r6, #0xa0
	lsls r6, r6, #2
	adds r0, r2, r6
	str r0, [r1, #4]
	ldr r0, _080856B4 @ =0x81000140
	str r0, [r1, #8]
	ldr r0, [r1, #8]
_0808566E:
	cmp r4, #0
	bne _08085674
	movs r4, #1
_08085674:
	lsls r0, r3, #0x10
	asrs r3, r0, #0x10
	lsls r0, r4, #0x10
	asrs r1, r0, #0x10
	subs r0, r3, r1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r0, #0
	bge _08085688
	movs r2, #0
_08085688:
	adds r0, r3, r1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xa0
	ble _08085696
	movs r1, #0xa0
_08085696:
	lsls r0, r2, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x9f
	bgt _080856A4
	lsls r0, r1, #0x10
	cmp r0, #0
	bgt _080856BC
_080856A4:
	ldr r0, _080856B8 @ =gFlags
	ldr r1, [r0]
	movs r2, #4
	orrs r1, r2
	str r1, [r0]
	b _080856D2
	.align 2, 0
_080856B0: .4byte 0x040000D4
_080856B4: .4byte 0x81000140
_080856B8: .4byte gFlags
_080856BC:
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	lsls r3, r5, #0x18
	lsrs r3, r3, #0x18
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl sa2__sub_8007A08
_080856D2:
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80856DC
sub_80856DC: @ 0x080856DC
	push {r4, r5, r6, lr}
	sub sp, #0xc
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	lsls r1, r1, #0x10
	lsrs r5, r1, #0x10
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r1, #0
	ldr r0, _0808570C @ =gBgOffsetsHBlank
	ldr r0, [r0]
	ldr r4, _08085710 @ =gUnknown_03002E70
	cmp r0, r4
	bne _0808571C
	add r0, sp, #8
	strh r1, [r0]
	ldr r0, _08085714 @ =0x040000D4
	add r1, sp, #8
	str r1, [r0]
	str r4, [r0, #4]
	ldr r1, _08085718 @ =0x81000140
	str r1, [r0, #8]
	ldr r0, [r0, #8]
	b _08085732
	.align 2, 0
_0808570C: .4byte gBgOffsetsHBlank
_08085710: .4byte gUnknown_03002E70
_08085714: .4byte 0x040000D4
_08085718: .4byte 0x81000140
_0808571C:
	add r0, sp, #8
	strh r1, [r0]
	ldr r1, _0808577C @ =0x040000D4
	str r0, [r1]
	movs r6, #0xa0
	lsls r6, r6, #2
	adds r0, r4, r6
	str r0, [r1, #4]
	ldr r0, _08085780 @ =0x81000140
	str r0, [r1, #8]
	ldr r0, [r1, #8]
_08085732:
	cmp r2, #0
	bne _08085738
	movs r2, #1
_08085738:
	lsls r0, r5, #0x10
	asrs r4, r0, #0x10
	lsls r5, r2, #0x10
	asrs r2, r5, #0x10
	subs r0, r4, r2
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	cmp r0, #0
	bge _0808574C
	movs r1, #0
_0808574C:
	adds r0, r4, r2
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xa0
	ble _0808575A
	movs r2, #0xa0
_0808575A:
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	lsls r3, r3, #0x10
	asrs r3, r3, #0x10
	str r4, [sp]
	lsrs r0, r5, #0x10
	str r0, [sp, #4]
	movs r0, #0
	bl sa2__sub_80075D0
	add sp, #0xc
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808577C: .4byte 0x040000D4
_08085780: .4byte 0x81000140

	thumb_func_start sub_8085784
sub_8085784: @ 0x08085784
	push {r4, lr}
	sub sp, #8
	movs r1, #0
	ldr r0, _080857A8 @ =gBgOffsetsHBlank
	ldr r0, [r0]
	ldr r2, _080857AC @ =gUnknown_03002E70
	cmp r0, r2
	bne _080857B8
	add r0, sp, #4
	strh r1, [r0]
	ldr r0, _080857B0 @ =0x040000D4
	add r1, sp, #4
	str r1, [r0]
	str r2, [r0, #4]
	ldr r1, _080857B4 @ =0x81000140
	str r1, [r0, #8]
	ldr r0, [r0, #8]
	b _080857CE
	.align 2, 0
_080857A8: .4byte gBgOffsetsHBlank
_080857AC: .4byte gUnknown_03002E70
_080857B0: .4byte 0x040000D4
_080857B4: .4byte 0x81000140
_080857B8:
	add r0, sp, #4
	strh r1, [r0]
	ldr r1, _08085830 @ =0x040000D4
	str r0, [r1]
	movs r3, #0xa0
	lsls r3, r3, #2
	adds r0, r2, r3
	str r0, [r1, #4]
	ldr r0, _08085834 @ =0x81000140
	str r0, [r1, #8]
	ldr r0, [r1, #8]
_080857CE:
	movs r0, #0xa0
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0x42
	bl sa2__unused_sub_8005FB4
	movs r2, #0xf0
	lsls r2, r2, #2
	ldr r1, _08085838 @ =gSineTable
	movs r3, #0x80
	lsls r3, r3, #1
	adds r0, r2, r3
	lsls r0, r0, #1
	adds r0, r1, r0
	movs r4, #0
	ldrsh r0, [r0, r4]
	lsls r0, r2, #1
	adds r0, r1, r0
	movs r2, #0
	ldrsh r0, [r0, r2]
	movs r2, #0xe0
	lsls r2, r2, #1
	adds r0, r3, r2
	lsls r0, r0, #1
	adds r0, r1, r0
	movs r3, #0
	ldrsh r0, [r0, r3]
	lsls r0, r2, #1
	adds r0, r1, r0
	movs r4, #0
	ldrsh r0, [r0, r4]
	movs r1, #0
	ldr r0, _0808583C @ =gBgOffsetsHBlank
	ldr r0, [r0]
	ldr r2, _08085840 @ =gUnknown_03002E70
	cmp r0, r2
	bne _08085844
	add r0, sp, #4
	strh r1, [r0]
	ldr r0, _08085830 @ =0x040000D4
	add r1, sp, #4
	str r1, [r0]
	str r2, [r0, #4]
	ldr r1, _08085834 @ =0x81000140
	str r1, [r0, #8]
	ldr r0, [r0, #8]
	b _0808585A
	.align 2, 0
_08085830: .4byte 0x040000D4
_08085834: .4byte 0x81000140
_08085838: .4byte gSineTable
_0808583C: .4byte gBgOffsetsHBlank
_08085840: .4byte gUnknown_03002E70
_08085844:
	add r0, sp, #4
	strh r1, [r0]
	ldr r1, _08085874 @ =0x040000D4
	str r0, [r1]
	movs r3, #0xa0
	lsls r3, r3, #2
	adds r0, r2, r3
	str r0, [r1, #4]
	ldr r0, _08085878 @ =0x81000140
	str r0, [r1, #8]
	ldr r0, [r1, #8]
_0808585A:
	movs r0, #6
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0xe
	bl sa2__unused_sub_8005FB4
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08085874: .4byte 0x040000D4
_08085878: .4byte 0x81000140

	thumb_func_start sub_808587C
sub_808587C: @ 0x0808587C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	lsls r1, r1, #0x10
	lsrs r7, r1, #0x10
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	mov r8, r2
	movs r4, #0
	ldr r0, _080858B8 @ =gBgOffsetsHBlank
	ldr r1, [r0]
	ldr r2, _080858BC @ =gUnknown_03002E70
	mov sb, r0
	cmp r1, r2
	bne _080858C8
	add r1, sp, #8
	strh r4, [r1]
	ldr r0, _080858C0 @ =0x040000D4
	str r1, [r0]
	str r2, [r0, #4]
	ldr r1, _080858C4 @ =0x81000140
	str r1, [r0, #8]
	ldr r0, [r0, #8]
	b _080858DE
	.align 2, 0
_080858B8: .4byte gBgOffsetsHBlank
_080858BC: .4byte gUnknown_03002E70
_080858C0: .4byte 0x040000D4
_080858C4: .4byte 0x81000140
_080858C8:
	add r0, sp, #8
	strh r4, [r0]
	ldr r1, _08085948 @ =0x040000D4
	str r0, [r1]
	movs r4, #0xa0
	lsls r4, r4, #2
	adds r0, r2, r4
	str r0, [r1, #4]
	ldr r0, _0808594C @ =0x81000140
	str r0, [r1, #8]
	ldr r0, [r1, #8]
_080858DE:
	ldr r2, _08085950 @ =gFlags
	ldr r0, [r2]
	movs r1, #4
	orrs r0, r1
	str r0, [r2]
	lsls r0, r6, #0x10
	lsrs r1, r0, #0x10
	adds r4, r0, #0
	cmp r1, #0xef
	bls _080858F6
	bl _080862C4
_080858F6:
	lsls r0, r7, #0x10
	asrs r1, r0, #0x10
	adds r5, r0, #0
	cmp r1, #0x9f
	ble _08085904
	bl _080862C4
_08085904:
	cmp r1, #0
	bge _0808590C
	bl _080862C4
_0808590C:
	mov r1, r8
	lsrs r0, r1, #5
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	ldr r0, _08085954 @ =gUnknown_080D5D30
	adds r0, r2, r0
	ldrb r0, [r0]
	adds r2, r0, #0
	movs r0, #3
	ands r0, r2
	cmp r0, #0
	beq _08085934
	ldr r1, _08085958 @ =gUnknown_03003F30
	movs r0, #2
	strb r0, [r1]
	mov r0, sb
	ldr r3, [r0]
	ldr r1, _0808595C @ =gUnknown_03003C5C
	ldr r0, _08085960 @ =0x04000040
	str r0, [r1]
_08085934:
	cmp r2, #0xf
	bls _0808593C
	bl _080862C4
_0808593C:
	lsls r0, r2, #2
	ldr r1, _08085964 @ =_08085968
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08085948: .4byte 0x040000D4
_0808594C: .4byte 0x81000140
_08085950: .4byte gFlags
_08085954: .4byte gUnknown_080D5D30
_08085958: .4byte gUnknown_03003F30
_0808595C: .4byte gUnknown_03003C5C
_08085960: .4byte 0x04000040
_08085964: .4byte _08085968
_08085968: @ jump table
	.4byte _080859A8 @ case 0
	.4byte _080859E4 @ case 1
	.4byte _08085AAC @ case 2
	.4byte _08085B28 @ case 3
	.4byte _08085BE8 @ case 4
	.4byte _08085C10 @ case 5
	.4byte _08085CE0 @ case 6
	.4byte _08085D58 @ case 7
	.4byte _08085E2A @ case 8
	.4byte _08085E64 @ case 9
	.4byte _08085F36 @ case 10
	.4byte _08085FBC @ case 11
	.4byte _0808608C @ case 12
	.4byte _080860AC @ case 13
	.4byte _08086174 @ case 14
	.4byte _080861F4 @ case 15
_080859A8:
	asrs r1, r5, #0x10
	ldr r2, _080859E0 @ =0xFFF80000
	adds r0, r5, r2
	lsrs r2, r0, #0x10
	cmp r0, #0
	bge _080859B6
	movs r2, #0
_080859B6:
	adds r0, r1, #0
	adds r0, #8
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xa0
	ble _080859C6
	movs r4, #0xa0
_080859C6:
	lsls r1, r6, #0x18
	lsrs r1, r1, #0x18
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	lsls r0, r4, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp]
	movs r0, #0
	movs r3, #0xf0
	bl sa2__sub_8007A08
	bl _080862C4
	.align 2, 0
_080859E0: .4byte 0xFFF80000
_080859E4:
	movs r1, #0xc0
	lsls r1, r1, #0xa
	adds r0, r4, r1
	lsrs r0, r0, #0x10
	mov ip, r0
	ldr r2, _08085A34 @ =0xFFF90000
	adds r0, r5, r2
	lsls r0, r0, #8
	lsrs r6, r0, #0x18
	ldr r0, _08085A38 @ =gUnknown_03003F30
	ldrb r0, [r0]
	muls r0, r6, r0
	adds r3, r3, r0
	add r2, sp, #4
	adds r1, r2, #0
	movs r0, #0
	strb r0, [r1, #1]
	strb r0, [r2]
	movs r7, #0
	movs r4, #0
	mov r8, r4
	cmp r6, #0x9f
	bls _08085A16
	bl _080862C4
_08085A16:
	adds r4, r1, #0
	movs r5, #0xf0
	ldr r0, _08085A3C @ =gUnknown_080D5E84
	mov sl, r0
	mov r1, ip
	lsls r0, r1, #0x10
	asrs r1, r0, #0x10
	movs r2, #1
	mov sb, r2
_08085A28:
	ldrb r0, [r4]
	cmp r0, #0
	beq _08085A40
	strb r5, [r3]
	b _08085A5C
	.align 2, 0
_08085A34: .4byte 0xFFF90000
_08085A38: .4byte gUnknown_03003F30
_08085A3C: .4byte gUnknown_080D5E84
_08085A40:
	adds r0, r7, #0
	adds r0, #0xe
	lsls r0, r0, #1
	add r0, sl
	ldrh r0, [r0]
	adds r0, r1, r0
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xef
	ble _08085A5A
	mov r0, sb
	strb r0, [r4]
_08085A5A:
	strb r2, [r3]
_08085A5C:
	adds r3, #1
	ldrb r0, [r4, #1]
	cmp r0, #0
	beq _08085A68
	strb r5, [r3]
	b _08085A88
_08085A68:
	lsls r0, r7, #1
	add r0, sl
	ldrh r0, [r0]
	adds r0, r1, r0
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xef
	ble _08085A84
	strb r5, [r3]
	adds r3, #1
	mov r2, sb
	strb r2, [r4, #1]
	b _08085A8A
_08085A84:
	add r2, r8
	strb r2, [r3]
_08085A88:
	adds r3, #1
_08085A8A:
	cmp r7, #0xd
	bne _08085A92
	ldr r0, _08085AA8 @ =0x0000FFFA
	mov r8, r0
_08085A92:
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r6, #0x9f
	bls _08085A28
	bl _080862C4
	.align 2, 0
_08085AA8: .4byte 0x0000FFFA
_08085AAC:
	movs r2, #0xc0
	lsls r2, r2, #0xb
	adds r1, r4, r2
	ldr r4, _08085B00 @ =0xFFFA0000
	adds r0, r5, r4
	lsls r0, r0, #8
	lsrs r6, r0, #0x18
	ldr r0, _08085B04 @ =gUnknown_03003F30
	ldrb r0, [r0]
	muls r0, r6, r0
	adds r3, r3, r0
	lsls r1, r1, #8
	lsrs r4, r1, #0x18
	adds r5, r4, #0
	add r2, sp, #4
	adds r1, r2, #0
	movs r0, #0
	strb r0, [r1, #1]
	strb r0, [r2]
	movs r7, #0
	cmp r6, #0x9f
	bls _08085ADC
	bl _080862C4
_08085ADC:
	strb r5, [r3]
	adds r3, #1
	strb r4, [r3]
	adds r3, #1
	cmp r5, #0xef
	bhi _08085AEE
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_08085AEE:
	ldrb r0, [r1]
	cmp r0, #0
	beq _08085B08
	cmp r4, #0xef
	bhi _08085B1C
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	b _08085B1C
	.align 2, 0
_08085B00: .4byte 0xFFFA0000
_08085B04: .4byte gUnknown_03003F30
_08085B08:
	subs r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #0xa
	bls _08085B1C
	movs r0, #1
	strb r0, [r1]
_08085B1C:
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #0x9f
	bls _08085ADC
	b _080862C4
_08085B28:
	movs r1, #0xe0
	lsls r1, r1, #0xb
	adds r0, r4, r1
	lsrs r0, r0, #0x10
	mov ip, r0
	ldr r2, _08085B74 @ =0xFFFD0000
	adds r0, r5, r2
	lsls r0, r0, #8
	lsrs r6, r0, #0x18
	ldr r0, _08085B78 @ =gUnknown_03003F30
	ldrb r0, [r0]
	muls r0, r6, r0
	adds r3, r3, r0
	add r2, sp, #4
	adds r1, r2, #0
	movs r0, #0
	strb r0, [r1, #1]
	strb r0, [r2]
	movs r7, #0
	movs r4, #0
	mov r8, r4
	cmp r6, #0x9f
	bls _08085B58
	b _080862C4
_08085B58:
	adds r4, r1, #0
	movs r5, #0xf0
	ldr r0, _08085B7C @ =gUnknown_080D5FC4
	mov sl, r0
	mov r1, ip
	lsls r0, r1, #0x10
	asrs r1, r0, #0x10
	movs r2, #1
	mov sb, r2
_08085B6A:
	ldrb r0, [r4]
	cmp r0, #0
	beq _08085B80
	strb r5, [r3]
	b _08085B9A
	.align 2, 0
_08085B74: .4byte 0xFFFD0000
_08085B78: .4byte gUnknown_03003F30
_08085B7C: .4byte gUnknown_080D5FC4
_08085B80:
	adds r0, r7, #7
	lsls r0, r0, #1
	add r0, sl
	ldrh r0, [r0]
	adds r0, r1, r0
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xef
	ble _08085B98
	mov r0, sb
	strb r0, [r4]
_08085B98:
	strb r2, [r3]
_08085B9A:
	adds r3, #1
	ldrb r0, [r4, #1]
	cmp r0, #0
	beq _08085BA6
	strb r5, [r3]
	b _08085BC6
_08085BA6:
	lsls r0, r7, #1
	add r0, sl
	ldrh r0, [r0]
	adds r0, r1, r0
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xef
	ble _08085BC2
	strb r5, [r3]
	adds r3, #1
	mov r2, sb
	strb r2, [r4, #1]
	b _08085BC8
_08085BC2:
	add r2, r8
	strb r2, [r3]
_08085BC6:
	adds r3, #1
_08085BC8:
	cmp r7, #6
	bne _08085BD0
	ldr r0, _08085BE4 @ =0x0000FFF2
	mov r8, r0
_08085BD0:
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r6, #0x9f
	bls _08085B6A
	b _080862C4
	.align 2, 0
_08085BE4: .4byte 0x0000FFF2
_08085BE8:
	adds r2, r7, #0
	cmp r5, #0
	bge _08085BF0
	movs r2, #0
_08085BF0:
	adds r1, r6, #0
	subs r1, #8
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	adds r3, r6, #0
	adds r3, #8
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	movs r0, #0xa0
	str r0, [sp]
	movs r0, #0
	bl sa2__sub_8007A08
	b _080862C4
_08085C10:
	ldr r1, _08085C60 @ =0xFFF90000
	adds r0, r4, r1
	lsrs r0, r0, #0x10
	mov ip, r0
	ldr r2, _08085C64 @ =0xFFFD0000
	adds r0, r5, r2
	lsls r0, r0, #8
	lsrs r6, r0, #0x18
	ldr r0, _08085C68 @ =gUnknown_03003F30
	ldrb r0, [r0]
	muls r0, r6, r0
	adds r3, r3, r0
	add r2, sp, #4
	adds r1, r2, #0
	movs r0, #0
	strb r0, [r1, #1]
	strb r0, [r2]
	movs r7, #0
	movs r4, #0
	mov r8, r4
	cmp r6, #0x9f
	bls _08085C3E
	b _080862C4
_08085C3E:
	adds r5, r1, #0
	ldr r0, _08085C6C @ =gUnknown_080D5FC4
	mov sl, r0
	mov r1, ip
	lsls r0, r1, #0x10
	asrs r0, r0, #0x10
	mov ip, r0
	movs r2, #1
	mov sb, r2
_08085C50:
	ldrb r0, [r5, #1]
	adds r4, r0, #0
	cmp r4, #0
	beq _08085C70
	movs r4, #0
	strb r4, [r3]
	b _08085C96
	.align 2, 0
_08085C60: .4byte 0xFFF90000
_08085C64: .4byte 0xFFFD0000
_08085C68: .4byte gUnknown_03003F30
_08085C6C: .4byte gUnknown_080D5FC4
_08085C70:
	lsls r0, r7, #1
	add r0, sl
	ldrh r1, [r0]
	mov r0, ip
	subs r1, r0, r1
	mov r2, r8
	lsls r0, r2, #0x10
	asrs r0, r0, #0x10
	adds r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r0, #0
	bge _08085C94
	strb r4, [r3]
	adds r3, #1
	mov r4, sb
	strb r4, [r5, #1]
	b _08085C98
_08085C94:
	strb r2, [r3]
_08085C96:
	adds r3, #1
_08085C98:
	ldrb r1, [r5]
	cmp r1, #0
	beq _08085CA4
	movs r0, #0
	strb r0, [r3]
	b _08085CC4
_08085CA4:
	adds r0, r7, #7
	lsls r0, r0, #1
	add r0, sl
	ldrh r0, [r0]
	mov r2, ip
	subs r0, r2, r0
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r0, #0
	bge _08085CC2
	strb r1, [r3]
	adds r3, #1
	mov r4, sb
	strb r4, [r5]
	b _08085CC6
_08085CC2:
	strb r2, [r3]
_08085CC4:
	adds r3, #1
_08085CC6:
	cmp r7, #6
	bne _08085CCE
	movs r0, #0xe
	mov r8, r0
_08085CCE:
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r6, #0x9f
	bls _08085C50
	b _080862C4
_08085CE0:
	ldr r2, _08085D30 @ =0xFFFA0000
	adds r1, r4, r2
	adds r0, r5, r2
	lsls r0, r0, #8
	lsrs r6, r0, #0x18
	ldr r0, _08085D34 @ =gUnknown_03003F30
	ldrb r0, [r0]
	muls r0, r6, r0
	adds r3, r3, r0
	lsls r1, r1, #8
	lsrs r4, r1, #0x18
	adds r5, r4, #0
	add r2, sp, #4
	adds r1, r2, #0
	movs r0, #0
	strb r0, [r1, #1]
	strb r0, [r2]
	movs r7, #0
	cmp r6, #0x9f
	bls _08085D0A
	b _080862C4
_08085D0A:
	strb r5, [r3]
	adds r3, #1
	strb r4, [r3]
	adds r3, #1
	cmp r4, #0
	beq _08085D1C
	subs r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
_08085D1C:
	ldrb r0, [r1, #1]
	cmp r0, #0
	beq _08085D38
	cmp r5, #0
	beq _08085D4C
	subs r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	b _08085D4C
	.align 2, 0
_08085D30: .4byte 0xFFFA0000
_08085D34: .4byte gUnknown_03003F30
_08085D38:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #0xa
	bls _08085D4C
	movs r0, #1
	strb r0, [r1, #1]
_08085D4C:
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #0x9f
	bls _08085D0A
	b _080862C4
_08085D58:
	ldr r1, _08085DA8 @ =0xFFFD0000
	adds r0, r4, r1
	lsrs r0, r0, #0x10
	mov ip, r0
	ldr r2, _08085DAC @ =0xFFF90000
	adds r0, r5, r2
	lsls r0, r0, #8
	lsrs r6, r0, #0x18
	ldr r0, _08085DB0 @ =gUnknown_03003F30
	ldrb r0, [r0]
	muls r0, r6, r0
	adds r3, r3, r0
	add r2, sp, #4
	adds r1, r2, #0
	movs r0, #0
	strb r0, [r1, #1]
	strb r0, [r2]
	movs r7, #0
	movs r4, #0
	mov r8, r4
	cmp r6, #0x9f
	bls _08085D86
	b _080862C4
_08085D86:
	adds r5, r1, #0
	ldr r0, _08085DB4 @ =gUnknown_080D5E84
	mov sl, r0
	mov r1, ip
	lsls r0, r1, #0x10
	asrs r0, r0, #0x10
	mov ip, r0
	movs r2, #1
	mov sb, r2
_08085D98:
	ldrb r0, [r5, #1]
	adds r4, r0, #0
	cmp r4, #0
	beq _08085DB8
	movs r4, #0
	strb r4, [r3]
	b _08085DDE
	.align 2, 0
_08085DA8: .4byte 0xFFFD0000
_08085DAC: .4byte 0xFFF90000
_08085DB0: .4byte gUnknown_03003F30
_08085DB4: .4byte gUnknown_080D5E84
_08085DB8:
	lsls r0, r7, #1
	add r0, sl
	ldrh r1, [r0]
	mov r0, ip
	subs r1, r0, r1
	mov r2, r8
	lsls r0, r2, #0x10
	asrs r0, r0, #0x10
	adds r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r0, #0
	bge _08085DDC
	strb r4, [r3]
	adds r3, #1
	mov r4, sb
	strb r4, [r5, #1]
	b _08085DE0
_08085DDC:
	strb r2, [r3]
_08085DDE:
	adds r3, #1
_08085DE0:
	ldrb r1, [r5]
	cmp r1, #0
	beq _08085DEC
	movs r0, #0
	strb r0, [r3]
	b _08085E0E
_08085DEC:
	adds r0, r7, #0
	adds r0, #0xe
	lsls r0, r0, #1
	add r0, sl
	ldrh r0, [r0]
	mov r2, ip
	subs r0, r2, r0
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r0, #0
	bge _08085E0C
	strb r1, [r3]
	adds r3, #1
	mov r4, sb
	strb r4, [r5]
	b _08085E10
_08085E0C:
	strb r2, [r3]
_08085E0E:
	adds r3, #1
_08085E10:
	cmp r7, #0xd
	bne _08085E18
	movs r0, #6
	mov r8, r0
_08085E18:
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r6, #0x9f
	bls _08085D98
	b _080862C4
_08085E2A:
	asrs r1, r5, #0x10
	ldr r2, _08085E60 @ =0xFFF80000
	adds r0, r5, r2
	lsrs r2, r0, #0x10
	cmp r0, #0
	bge _08085E38
	movs r2, #0
_08085E38:
	adds r0, r1, #0
	adds r0, #8
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xa0
	ble _08085E48
	movs r4, #0xa0
_08085E48:
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	lsls r3, r6, #0x18
	lsrs r3, r3, #0x18
	lsls r0, r4, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl sa2__sub_8007A08
	b _080862C4
	.align 2, 0
_08085E60: .4byte 0xFFF80000
_08085E64:
	ldr r1, _08085EB8 @ =0xFFFD0000
	adds r0, r4, r1
	lsrs r0, r0, #0x10
	mov ip, r0
	movs r2, #0xe0
	lsls r2, r2, #0xb
	adds r0, r5, r2
	lsls r0, r0, #8
	lsrs r6, r0, #0x18
	ldr r0, _08085EBC @ =gUnknown_03003F30
	ldrb r0, [r0]
	muls r0, r6, r0
	adds r3, r3, r0
	mov r4, ip
	strb r4, [r3, #1]
	add r2, sp, #4
	adds r1, r2, #0
	movs r0, #0
	strb r0, [r1, #1]
	strb r0, [r2]
	movs r7, #0
	mov r8, r0
	cmp r6, #0
	bne _08085E96
	b _080862C0
_08085E96:
	adds r5, r1, #0
	ldr r1, _08085EC0 @ =gUnknown_080D5E84
	mov sl, r1
	mov r2, ip
	lsls r0, r2, #0x10
	asrs r0, r0, #0x10
	mov ip, r0
	movs r4, #1
	mov sb, r4
_08085EA8:
	ldrb r0, [r5, #1]
	adds r4, r0, #0
	cmp r4, #0
	beq _08085EC4
	movs r0, #0
	strb r0, [r3]
	b _08085EEA
	.align 2, 0
_08085EB8: .4byte 0xFFFD0000
_08085EBC: .4byte gUnknown_03003F30
_08085EC0: .4byte gUnknown_080D5E84
_08085EC4:
	lsls r0, r7, #1
	add r0, sl
	ldrh r1, [r0]
	mov r2, ip
	subs r1, r2, r1
	mov r2, r8
	lsls r0, r2, #0x10
	asrs r0, r0, #0x10
	adds r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r0, #0
	bge _08085EE8
	strb r4, [r3]
	subs r3, #1
	mov r4, sb
	strb r4, [r5, #1]
	b _08085EEC
_08085EE8:
	strb r2, [r3]
_08085EEA:
	subs r3, #1
_08085EEC:
	ldrb r1, [r5]
	cmp r1, #0
	beq _08085EF8
	movs r0, #0
	strb r0, [r3]
	b _08085F1A
_08085EF8:
	adds r0, r7, #0
	adds r0, #0xe
	lsls r0, r0, #1
	add r0, sl
	ldrh r0, [r0]
	mov r2, ip
	subs r0, r2, r0
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r0, #0
	bge _08085F18
	strb r1, [r3]
	subs r3, #1
	mov r4, sb
	strb r4, [r5]
	b _08085F1C
_08085F18:
	strb r2, [r3]
_08085F1A:
	subs r3, #1
_08085F1C:
	cmp r7, #0xd
	bne _08085F24
	movs r0, #6
	mov r8, r0
_08085F24:
	subs r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r6, #0
	bne _08085EA8
	b _080862C0
_08085F36:
	ldr r1, _08085F94 @ =0xFFFA0000
	adds r0, r4, r1
	lsrs r0, r0, #0x10
	mov ip, r0
	movs r2, #0xc0
	lsls r2, r2, #0xb
	adds r0, r5, r2
	lsls r0, r0, #8
	lsrs r6, r0, #0x18
	ldr r0, _08085F98 @ =gUnknown_03003F30
	ldrb r0, [r0]
	muls r0, r6, r0
	adds r3, r3, r0
	mov r4, ip
	strb r4, [r3, #1]
	mov r1, ip
	lsls r0, r1, #0x18
	lsrs r4, r0, #0x18
	adds r5, r4, #0
	add r2, sp, #4
	adds r1, r2, #0
	movs r0, #0
	strb r0, [r1, #1]
	strb r0, [r2]
	movs r7, #0
	cmp r6, #0
	bne _08085F6E
	b _080862C0
_08085F6E:
	strb r5, [r3]
	subs r3, #1
	strb r4, [r3]
	subs r3, #1
	cmp r4, #0
	beq _08085F80
	subs r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
_08085F80:
	ldrb r0, [r1, #1]
	cmp r0, #0
	beq _08085F9C
	cmp r5, #0
	beq _08085FB0
	subs r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	b _08085FB0
	.align 2, 0
_08085F94: .4byte 0xFFFA0000
_08085F98: .4byte gUnknown_03003F30
_08085F9C:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #0xa
	bls _08085FB0
	movs r0, #1
	strb r0, [r1, #1]
_08085FB0:
	subs r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #0
	bne _08085F6E
	b _080862C0
_08085FBC:
	ldr r2, _08086010 @ =0xFFF90000
	adds r0, r4, r2
	lsrs r0, r0, #0x10
	mov ip, r0
	movs r4, #0xc0
	lsls r4, r4, #0xa
	adds r0, r5, r4
	lsls r0, r0, #8
	lsrs r6, r0, #0x18
	ldr r0, _08086014 @ =gUnknown_03003F30
	ldrb r0, [r0]
	muls r0, r6, r0
	adds r3, r3, r0
	mov r0, ip
	strb r0, [r3, #1]
	add r2, sp, #4
	adds r1, r2, #0
	movs r0, #0
	strb r0, [r1, #1]
	strb r0, [r2]
	movs r7, #0
	movs r1, #0
	mov r8, r1
	cmp r6, #0
	bne _08085FF0
	b _080862C0
_08085FF0:
	adds r5, r2, #0
	ldr r2, _08086018 @ =gUnknown_080D5FC4
	mov sl, r2
	mov r4, ip
	lsls r0, r4, #0x10
	asrs r0, r0, #0x10
	mov ip, r0
	movs r0, #1
	mov sb, r0
_08086002:
	ldrb r0, [r5, #1]
	adds r4, r0, #0
	cmp r4, #0
	beq _0808601C
	movs r1, #0
	strb r1, [r3]
	b _08086042
	.align 2, 0
_08086010: .4byte 0xFFF90000
_08086014: .4byte gUnknown_03003F30
_08086018: .4byte gUnknown_080D5FC4
_0808601C:
	lsls r0, r7, #1
	add r0, sl
	ldrh r1, [r0]
	mov r2, ip
	subs r1, r2, r1
	mov r2, r8
	lsls r0, r2, #0x10
	asrs r0, r0, #0x10
	adds r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r0, #0
	bge _08086040
	strb r4, [r3]
	subs r3, #1
	mov r4, sb
	strb r4, [r5, #1]
	b _08086044
_08086040:
	strb r2, [r3]
_08086042:
	subs r3, #1
_08086044:
	ldrb r1, [r5]
	cmp r1, #0
	beq _08086050
	movs r0, #0
	strb r0, [r3]
	b _08086070
_08086050:
	adds r0, r7, #7
	lsls r0, r0, #1
	add r0, sl
	ldrh r0, [r0]
	mov r2, ip
	subs r0, r2, r0
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r0, #0
	bge _0808606E
	strb r1, [r3]
	subs r3, #1
	mov r4, sb
	strb r4, [r5]
	b _08086072
_0808606E:
	strb r2, [r3]
_08086070:
	subs r3, #1
_08086072:
	cmp r7, #6
	bne _0808607A
	movs r0, #0xe
	mov r8, r0
_0808607A:
	subs r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r6, #0
	bne _08086002
	b _080862C0
_0808608C:
	adds r1, r6, #0
	subs r1, #8
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	adds r3, r6, #0
	adds r3, #8
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	lsls r0, r7, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp]
	movs r0, #0
	movs r2, #0
	bl sa2__sub_8007A08
	b _080862C4
_080860AC:
	movs r1, #0xe0
	lsls r1, r1, #0xb
	adds r0, r4, r1
	lsrs r0, r0, #0x10
	mov ip, r0
	movs r2, #0xc0
	lsls r2, r2, #0xa
	adds r0, r5, r2
	lsls r0, r0, #8
	lsrs r6, r0, #0x18
	ldr r0, _08086100 @ =gUnknown_03003F30
	ldrb r0, [r0]
	muls r0, r6, r0
	adds r3, r3, r0
	mov r4, ip
	strb r4, [r3, #1]
	add r2, sp, #4
	adds r1, r2, #0
	movs r0, #0
	strb r0, [r1, #1]
	strb r0, [r2]
	movs r7, #0
	mov r8, r0
	cmp r6, #0
	bne _080860E0
	b _080862C0
_080860E0:
	adds r4, r1, #0
	movs r1, #0xf0
	mov sb, r1
	ldr r2, _08086104 @ =gUnknown_080D5FC4
	mov sl, r2
	mov r1, ip
	lsls r0, r1, #0x10
	asrs r5, r0, #0x10
	movs r2, #1
	mov ip, r2
_080860F4:
	ldrb r0, [r4]
	cmp r0, #0
	beq _08086108
	mov r0, sb
	strb r0, [r3]
	b _08086122
	.align 2, 0
_08086100: .4byte gUnknown_03003F30
_08086104: .4byte gUnknown_080D5FC4
_08086108:
	adds r0, r7, #7
	lsls r0, r0, #1
	add r0, sl
	ldrh r0, [r0]
	adds r0, r5, r0
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xef
	ble _08086120
	mov r1, ip
	strb r1, [r4]
_08086120:
	strb r2, [r3]
_08086122:
	subs r3, #1
	ldrb r0, [r4, #1]
	cmp r0, #0
	bne _08086150
	lsls r0, r7, #1
	add r0, sl
	ldrh r1, [r0]
	adds r1, r5, r1
	mov r2, r8
	lsls r0, r2, #0x10
	asrs r0, r0, #0x10
	adds r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xef
	ble _08086152
	mov r0, sb
	strb r0, [r3]
	subs r3, #1
	mov r1, ip
	strb r1, [r4, #1]
	b _08086156
_08086150:
	mov r2, sb
_08086152:
	strb r2, [r3]
	subs r3, #1
_08086156:
	cmp r7, #6
	bne _0808615E
	ldr r2, _08086170 @ =0x0000FFF2
	mov r8, r2
_0808615E:
	subs r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r6, #0
	bne _080860F4
	b _080862C0
	.align 2, 0
_08086170: .4byte 0x0000FFF2
_08086174:
	movs r1, #0xc0
	lsls r1, r1, #0xb
	adds r0, r4, r1
	lsrs r0, r0, #0x10
	mov ip, r0
	adds r0, r5, r1
	lsls r0, r0, #8
	lsrs r6, r0, #0x18
	ldr r0, _080861D0 @ =gUnknown_03003F30
	ldrb r0, [r0]
	muls r0, r6, r0
	adds r3, r3, r0
	mov r2, ip
	strb r2, [r3, #1]
	mov r4, ip
	lsls r0, r4, #0x18
	lsrs r4, r0, #0x18
	adds r5, r4, #0
	add r2, sp, #4
	adds r1, r2, #0
	movs r0, #0
	strb r0, [r1, #1]
	strb r0, [r2]
	movs r7, #0
	cmp r6, #0
	bne _080861AA
	b _080862C0
_080861AA:
	strb r5, [r3]
	subs r3, #1
	strb r4, [r3]
	subs r3, #1
	cmp r5, #0xef
	bhi _080861BC
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_080861BC:
	ldrb r0, [r1]
	cmp r0, #0
	beq _080861D4
	cmp r4, #0xef
	bhi _080861E8
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	b _080861E8
	.align 2, 0
_080861D0: .4byte gUnknown_03003F30
_080861D4:
	subs r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #0xa
	bls _080861E8
	movs r0, #1
	strb r0, [r1]
_080861E8:
	subs r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #0
	bne _080861AA
	b _080862C0
_080861F4:
	movs r1, #0xc0
	lsls r1, r1, #0xa
	adds r0, r4, r1
	lsrs r0, r0, #0x10
	mov ip, r0
	movs r2, #0xe0
	lsls r2, r2, #0xb
	adds r0, r5, r2
	lsls r0, r0, #8
	lsrs r6, r0, #0x18
	ldr r0, _08086244 @ =gUnknown_03003F30
	ldrb r0, [r0]
	muls r0, r6, r0
	adds r3, r3, r0
	mov r4, ip
	strb r4, [r3, #1]
	add r2, sp, #4
	adds r1, r2, #0
	movs r0, #0
	strb r0, [r1, #1]
	strb r0, [r2]
	movs r7, #0
	mov r8, r0
	cmp r6, #0
	beq _080862C0
	adds r4, r1, #0
	movs r1, #0xf0
	mov sb, r1
	mov r2, ip
	lsls r0, r2, #0x10
	asrs r5, r0, #0x10
	movs r0, #1
	mov sl, r0
_08086236:
	ldrb r0, [r4]
	cmp r0, #0
	beq _08086248
	mov r1, sb
	strb r1, [r3]
	b _08086266
	.align 2, 0
_08086244: .4byte gUnknown_03003F30
_08086248:
	adds r0, r7, #0
	adds r0, #0xe
	lsls r0, r0, #1
	ldr r2, _08086274 @ =gUnknown_080D5E84
	adds r0, r0, r2
	ldrh r0, [r0]
	adds r0, r5, r0
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xef
	ble _08086264
	mov r0, sl
	strb r0, [r4]
_08086264:
	strb r2, [r3]
_08086266:
	subs r3, #1
	ldrb r0, [r4, #1]
	cmp r0, #0
	beq _08086278
	mov r1, sb
	strb r1, [r3]
	b _080862A6
	.align 2, 0
_08086274: .4byte gUnknown_080D5E84
_08086278:
	lsls r0, r7, #1
	ldr r2, _080862A0 @ =gUnknown_080D5E84
	adds r0, r0, r2
	ldrh r1, [r0]
	adds r1, r5, r1
	mov r2, r8
	lsls r0, r2, #0x10
	asrs r0, r0, #0x10
	adds r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xef
	ble _080862A4
	mov r0, sb
	strb r0, [r3]
	subs r3, #1
	mov r1, sl
	strb r1, [r4, #1]
	b _080862A8
	.align 2, 0
_080862A0: .4byte gUnknown_080D5E84
_080862A4:
	strb r2, [r3]
_080862A6:
	subs r3, #1
_080862A8:
	cmp r7, #0xd
	bne _080862B0
	ldr r2, _080862D4 @ =0x0000FFFA
	mov r8, r2
_080862B0:
	subs r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r6, #0
	bne _08086236
_080862C0:
	movs r0, #0
	strb r0, [r3, #1]
_080862C4:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080862D4: .4byte 0x0000FFFA

	thumb_func_start sub_80862D8
sub_80862D8: @ 0x080862D8
	push {r4, r5, lr}
	adds r5, r0, #0
	ldrb r0, [r5]
	cmp r0, #0
	bne _080862E4
	b _080863F0
_080862E4:
	ldr r1, [r5, #0x28]
	ldr r0, [r1, #4]
	movs r2, #0x80
	lsls r2, r2, #1
	ands r0, r2
	cmp r0, #0
	bne _080863F0
	ldr r0, [r5, #0x2c]
	ldr r0, [r0, #4]
	ands r0, r2
	cmp r0, #0
	bne _080863F0
	adds r4, r1, #0
	movs r1, #0xa6
	lsls r1, r1, #1
	adds r0, r4, r1
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	bne _08086354
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_80863FC
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	bne _0808634E
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_80865B0
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	bne _0808634E
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_80871CC
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	bne _0808634E
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_8086774
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	beq _08086354
_0808634E:
	adds r0, r4, #0
	bl sub_801038C
_08086354:
	ldr r4, [r5, #0x2c]
	adds r0, r5, #0
	adds r0, #0x70
	ldrb r0, [r0]
	cmp r0, #0
	beq _08086392
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_80865B0
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0808638A
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_80871CC
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0808638A
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_8086774
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080863F0
_0808638A:
	adds r0, r4, #0
	bl sub_8010C58
	b _080863F0
_08086392:
	ldr r0, _080863F8 @ =gStageData
	ldrb r0, [r0, #3]
	cmp r0, #5
	bne _080863F0
	movs r1, #0xa6
	lsls r1, r1, #1
	adds r0, r4, r1
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	bne _080863F0
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_80863FC
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	bne _080863EA
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_80865B0
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	bne _080863EA
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_80871CC
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	bne _080863EA
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_8086774
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	beq _080863F0
_080863EA:
	adds r0, r4, #0
	bl sub_801038C
_080863F0:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080863F8: .4byte gStageData

	thumb_func_start sub_80863FC
sub_80863FC: @ 0x080863FC
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	mov r8, r0
	adds r3, r1, #0
	movs r0, #0
	mov sb, r0
	adds r0, r3, #0
	adds r0, #0xe0
	ldr r6, [r0]
	movs r1, #0xc
	adds r1, r1, r6
	mov ip, r1
	ldr r0, [r3, #4]
	movs r1, #0x80
	lsls r1, r1, #1
	ands r0, r1
	cmp r0, #0
	bne _08086430
	mov r4, ip
	ldr r1, [r4, #0x20]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _08086434
_08086430:
	movs r0, #0
	b _0808659E
_08086434:
	mov r0, r8
	ldr r1, [r0, #0x34]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080864EC
	ldr r5, [r3, #0x10]
	ldr r0, _080864D8 @ =gCamera
	adds r0, #0x6a
	asrs r5, r5, #8
	ldrh r0, [r0]
	adds r5, r5, r0
	mov r0, r8
	adds r0, #0xe3
	ldrb r0, [r0]
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #3
	movs r0, #0x86
	lsls r0, r0, #1
	add r0, r8
	adds r0, r0, r1
	ldr r0, [r0]
	asrs r0, r0, #8
	subs r0, #4
	subs r5, r5, r0
	ldr r4, [r3, #0x14]
	asrs r4, r4, #8
	movs r0, #0x88
	lsls r0, r0, #1
	add r0, r8
	adds r0, r0, r1
	ldr r0, [r0]
	asrs r0, r0, #8
	subs r4, r4, r0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	adds r0, r4, #0
	adds r1, r5, #0
	bl sa2__sub_8004418
	adds r6, r0, #0
	lsls r6, r6, #0x10
	lsrs r6, r6, #0x10
	ldr r1, _080864DC @ =gUnknown_080D5D30
	mov r0, r8
	adds r0, #0xce
	ldrh r0, [r0]
	lsrs r0, r0, #5
	adds r0, r0, r1
	ldrb r0, [r0]
	mov r8, r0
	mov r1, r8
	lsls r1, r1, #6
	mov r8, r1
	adds r1, r5, #0
	muls r1, r5, r1
	adds r0, r4, #0
	muls r0, r4, r0
	adds r1, r1, r0
	adds r0, r1, #0
	bl Sqrt
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	movs r1, #0xc
	bl __divsi3
	adds r1, r0, #0
	movs r0, #0x20
	subs r1, r0, r1
	mov r3, r8
	lsls r6, r6, #0x10
	asrs r0, r6, #0x10
	subs r2, r3, r0
	cmp r2, #0
	blt _080864E0
	cmp r2, r1
	ble _080864E6
	b _0808659C
	.align 2, 0
_080864D8: .4byte gCamera
_080864DC: .4byte gUnknown_080D5D30
_080864E0:
	subs r0, r0, r3
	cmp r0, r1
	bgt _0808659C
_080864E6:
	movs r4, #2
	mov sb, r4
	b _0808659C
_080864EC:
	movs r0, #2
	ands r1, r0
	cmp r1, #0
	beq _0808659C
	ldr r2, [r3, #0x10]
	asrs r2, r2, #8
	ldr r1, _080865AC @ =gCamera
	adds r0, r1, #0
	adds r0, #0x6a
	movs r4, #0
	ldrsh r0, [r0, r4]
	adds r2, r2, r0
	ldr r0, [r1]
	subs r2, r2, r0
	ldr r0, [r3, #0x14]
	asrs r0, r0, #8
	ldr r1, [r1, #4]
	subs r7, r0, r1
	mov r0, r8
	adds r0, #0x3c
	movs r4, #0
	ldrsb r4, [r0, r4]
	mov r1, r8
	ldr r0, [r1, #0x48]
	adds r3, r0, r4
	adds r0, r6, #0
	adds r0, #0x30
	movs r5, #0
	ldrsb r5, [r0, r5]
	adds r1, r2, r5
	cmp r3, r1
	bgt _08086542
	mov r0, r8
	adds r0, #0x3e
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r0, r4
	adds r0, r3, r0
	cmp r0, r1
	bge _08086554
	cmp r3, r1
	blt _0808659C
_08086542:
	adds r0, r6, #0
	adds r0, #0x32
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r0, r5
	adds r0, r1, r0
	cmp r0, r3
	blt _0808659C
_08086554:
	mov r0, r8
	adds r0, #0x3d
	movs r3, #0
	ldrsb r3, [r0, r3]
	mov r4, r8
	ldr r0, [r4, #0x4c]
	adds r2, r0, r3
	mov r0, ip
	adds r0, #0x25
	movs r4, #0
	ldrsb r4, [r0, r4]
	adds r1, r7, r4
	cmp r2, r1
	bgt _08086586
	mov r0, r8
	adds r0, #0x3f
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r0, r3
	adds r0, r2, r0
	cmp r0, r1
	bge _08086598
	cmp r2, r1
	blt _0808659C
_08086586:
	mov r0, ip
	adds r0, #0x27
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r0, r4
	adds r0, r1, r0
	cmp r0, r2
	blt _0808659C
_08086598:
	movs r0, #1
	mov sb, r0
_0808659C:
	mov r0, sb
_0808659E:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080865AC: .4byte gCamera

	thumb_func_start sub_80865B0
sub_80865B0: @ 0x080865B0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r3, r0, #0
	adds r6, r1, #0
	movs r0, #0
	mov sb, r0
	movs r1, #0xe3
	lsls r1, r1, #2
	adds r1, r1, r3
	mov r8, r1
	adds r0, r6, #0
	adds r0, #0xe0
	ldr r0, [r0]
	mov ip, r0
	mov r7, ip
	adds r7, #0xc
	ldr r0, [r6, #4]
	movs r1, #0x80
	lsls r1, r1, #1
	ands r0, r1
	cmp r0, #0
	bne _080865EE
	mov r2, r8
	ldr r0, [r2, #0x20]
	movs r2, #1
	rsbs r2, r2, #0
	cmp r0, r2
	bne _080865F2
_080865EE:
	movs r0, #0
	b _0808675C
_080865F2:
	ldr r1, [r7, #0x20]
	cmp r1, r2
	beq _080866A4
	adds r0, r3, #0
	adds r0, #0x9c
	ldr r0, [r0]
	asrs r0, r0, #8
	movs r4, #0xec
	lsls r4, r4, #2
	adds r1, r3, r4
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	mov sl, r1
	adds r2, r0, r1
	ldr r1, [r6, #0x10]
	asrs r1, r1, #8
	ldr r0, _0808669C @ =gCamera
	adds r0, #0x6a
	movs r5, #0
	ldrsh r0, [r0, r5]
	adds r1, r1, r0
	mov r0, ip
	adds r0, #0x30
	movs r4, #0
	ldrsb r4, [r0, r4]
	adds r1, r1, r4
	cmp r2, r1
	bgt _08086646
	ldr r5, _080866A0 @ =0x000003B2
	adds r0, r3, r5
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	mov r5, sl
	subs r0, r0, r5
	adds r0, r2, r0
	cmp r0, r1
	bge _0808665A
	cmp r2, r1
	bge _08086646
	b _0808675A
_08086646:
	mov r0, ip
	adds r0, #0x32
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r0, r4
	adds r0, r1, r0
	cmp r0, r2
	bge _0808665A
	b _0808675A
_0808665A:
	adds r0, r3, #0
	adds r0, #0xa0
	ldr r0, [r0]
	asrs r0, r0, #8
	mov r2, r8
	adds r2, #0x25
	movs r4, #0
	ldrsb r4, [r2, r4]
	adds r3, r0, r4
	ldr r0, [r6, #0x14]
	asrs r0, r0, #8
	adds r2, r7, #0
	adds r2, #0x25
	ldrb r2, [r2]
	lsls r2, r2, #0x18
	asrs r2, r2, #0x18
	adds r1, r0, r2
	cmp r3, r1
	bgt _08086696
	mov r0, r8
	adds r0, #0x27
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r0, r4
	adds r0, r3, r0
	cmp r0, r1
	bge _08086756
	cmp r3, r1
	blt _0808675A
_08086696:
	adds r0, r7, #0
	adds r0, #0x27
	b _08086748
	.align 2, 0
_0808669C: .4byte gCamera
_080866A0: .4byte 0x000003B2
_080866A4:
	ldr r0, [r7, #0x28]
	cmp r0, r1
	beq _0808675A
	adds r0, r3, #0
	adds r0, #0x9c
	ldr r0, [r0]
	asrs r0, r0, #8
	movs r2, #0xec
	lsls r2, r2, #2
	adds r1, r3, r2
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	mov sl, r1
	adds r2, r0, r1
	ldr r1, [r6, #0x10]
	asrs r1, r1, #8
	ldr r0, _0808676C @ =gCamera
	adds r0, #0x6a
	movs r4, #0
	ldrsh r0, [r0, r4]
	adds r1, r1, r0
	mov r0, ip
	adds r0, #0x38
	movs r4, #0
	ldrsb r4, [r0, r4]
	adds r1, r1, r4
	cmp r2, r1
	bgt _080866F6
	ldr r5, _08086770 @ =0x000003B2
	adds r0, r3, r5
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	mov r5, sl
	subs r0, r0, r5
	adds r0, r2, r0
	cmp r0, r1
	bge _08086708
	cmp r2, r1
	blt _0808675A
_080866F6:
	mov r0, ip
	adds r0, #0x3a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r0, r4
	adds r0, r1, r0
	cmp r0, r2
	blt _0808675A
_08086708:
	adds r0, r3, #0
	adds r0, #0xa0
	ldr r0, [r0]
	asrs r0, r0, #8
	mov r2, r8
	adds r2, #0x25
	movs r4, #0
	ldrsb r4, [r2, r4]
	adds r3, r0, r4
	ldr r0, [r6, #0x14]
	asrs r0, r0, #8
	adds r2, r7, #0
	adds r2, #0x2d
	ldrb r2, [r2]
	lsls r2, r2, #0x18
	asrs r2, r2, #0x18
	adds r1, r0, r2
	cmp r3, r1
	bgt _08086744
	mov r0, r8
	adds r0, #0x27
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r0, r4
	adds r0, r3, r0
	cmp r0, r1
	bge _08086756
	cmp r3, r1
	blt _0808675A
_08086744:
	adds r0, r7, #0
	adds r0, #0x2f
_08086748:
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r0, r2
	adds r0, r1, r0
	cmp r0, r3
	blt _0808675A
_08086756:
	movs r0, #1
	mov sb, r0
_0808675A:
	mov r0, sb
_0808675C:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0808676C: .4byte gCamera
_08086770: .4byte 0x000003B2

	thumb_func_start sub_8086774
sub_8086774: @ 0x08086774
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r6, r0, #0
	mov sb, r1
	movs r0, #0
	mov r8, r0
	movs r5, #0
_08086788:
	movs r4, #0
_0808678A:
	lsls r2, r5, #4
	subs r2, r2, r5
	lsls r0, r2, #4
	ldr r1, _080867F8 @ =0x00000454
	adds r0, r0, r1
	adds r0, r6, r0
	lsls r3, r4, #2
	adds r3, r3, r4
	lsls r1, r3, #3
	adds r0, r0, r1
	lsls r3, r3, #2
	lsls r2, r2, #3
	adds r3, r3, r2
	movs r2, #0xb6
	lsls r2, r2, #1
	adds r1, r6, r2
	adds r1, r1, r3
	ldr r1, [r1]
	asrs r1, r1, #8
	movs r7, #0xb8
	lsls r7, r7, #1
	adds r2, r6, r7
	adds r2, r2, r3
	ldr r2, [r2]
	asrs r2, r2, #8
	mov r3, sb
	str r3, [sp]
	movs r3, #0
	bl sub_8010184
	cmp r0, #1
	bne _080867D2
	movs r7, #1
	mov r8, r7
	movs r5, #4
	movs r4, #6
_080867D2:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #5
	bls _0808678A
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #3
	bls _08086788
	mov r0, r8
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080867F8: .4byte 0x00000454

	thumb_func_start sub_80867FC
sub_80867FC: @ 0x080867FC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	mov ip, r0
	lsls r1, r1, #0x18
	lsrs r6, r1, #0x18
	movs r0, #0
	str r0, [sp]
	mov r1, ip
	ldr r1, [r1, #0x28]
	str r1, [sp, #4]
	mov r2, ip
	ldr r2, [r2, #0x2c]
	mov sl, r2
	ldr r0, _080868A4 @ =0xFFFFFF00
	ands r0, r5
	movs r1, #0xf8
	orrs r0, r1
	ldr r1, _080868A8 @ =0xFFFF00FF
	ands r1, r0
	movs r0, #0xf8
	lsls r0, r0, #8
	orrs r1, r0
	ldr r0, _080868AC @ =0xFF00FFFF
	ands r0, r1
	movs r1, #0x80
	lsls r1, r1, #0xc
	orrs r0, r1
	ldr r3, _080868B0 @ =0x00FFFFFF
	mov r8, r3
	mov r7, r8
	ands r7, r0
	movs r0, #0x80
	lsls r0, r0, #0x14
	adds r1, r7, #0
	orrs r1, r0
	mov r8, r1
	mov r5, r8
	mov r0, ip
	adds r0, #0xb8
	movs r2, #0x80
	lsls r2, r2, #2
	adds r1, r2, #0
	ldrh r0, [r0]
	adds r1, r1, r0
	ldr r3, _080868B4 @ =0x000003FF
	adds r0, r3, #0
	ands r1, r0
	ldr r3, _080868B8 @ =gSineTable
	movs r7, #0x80
	lsls r7, r7, #1
	adds r0, r1, r7
	lsls r0, r0, #1
	adds r0, r0, r3
	movs r2, #0
	ldrsh r0, [r0, r2]
	lsrs r2, r0, #0x1f
	adds r0, r0, r2
	asrs r2, r0, #1
	lsls r1, r1, #1
	adds r1, r1, r3
	movs r3, #0
	ldrsh r0, [r1, r3]
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	mov sb, r0
	mov r0, ip
	adds r0, #0x9c
	ldr r0, [r0]
	adds r2, r2, r0
	mov r0, ip
	adds r0, #0xa0
	ldr r0, [r0]
	add sb, r0
	cmp r6, #0
	beq _080868BC
	cmp r6, #1
	beq _08086978
	b _08086A2A
	.align 2, 0
_080868A4: .4byte 0xFFFFFF00
_080868A8: .4byte 0xFFFF00FF
_080868AC: .4byte 0xFF00FFFF
_080868B0: .4byte 0x00FFFFFF
_080868B4: .4byte 0x000003FF
_080868B8: .4byte gSineTable
_080868BC:
	mov r0, ip
	adds r0, #0x70
	ldrb r0, [r0]
	cmp r0, #0
	bne _080868C8
	b _08086A2A
_080868C8:
	mov r0, sl
	adds r0, #0xe0
	ldr r3, [r0]
	movs r6, #0xc
	adds r6, r6, r3
	mov ip, r6
	asrs r1, r2, #8
	lsls r0, r5, #0x18
	asrs r0, r0, #0x18
	str r0, [sp, #8]
	adds r2, r1, r0
	mov r7, sl
	ldr r1, [r7, #0x10]
	asrs r1, r1, #8
	ldr r0, _08086974 @ =gCamera
	adds r0, #0x6a
	movs r6, #0
	ldrsh r0, [r0, r6]
	adds r1, r1, r0
	adds r0, r3, #0
	adds r0, #0x38
	movs r6, #0
	ldrsb r6, [r0, r6]
	adds r1, r1, r6
	cmp r2, r1
	bgt _08086916
	mov r7, r8
	lsls r0, r7, #8
	asrs r0, r0, #0x18
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldr r7, [sp, #8]
	subs r0, r0, r7
	adds r0, r2, r0
	cmp r0, r1
	bge _0808692A
	cmp r2, r1
	bge _08086916
	b _08086A2A
_08086916:
	adds r0, r3, #0
	adds r0, #0x3a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r0, r6
	adds r0, r1, r0
	cmp r0, r2
	bge _0808692A
	b _08086A2A
_0808692A:
	mov r1, sb
	asrs r0, r1, #8
	adds r4, r5, #0
	lsls r1, r4, #0x10
	asrs r1, r1, #0x18
	adds r3, r0, r1
	mov r2, sl
	ldr r0, [r2, #0x14]
	asrs r0, r0, #8
	mov r2, ip
	adds r2, #0x2d
	movs r5, #0
	ldrsb r5, [r2, r5]
	adds r2, r0, r5
	cmp r3, r2
	bgt _08086958
	asrs r0, r4, #0x18
	subs r0, r0, r1
	adds r0, r3, r0
	cmp r0, r2
	bge _0808696A
	cmp r3, r2
	blt _08086A2A
_08086958:
	mov r0, ip
	adds r0, #0x2f
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r0, r5
	adds r0, r2, r0
	cmp r0, r3
	blt _08086A2A
_0808696A:
	mov r0, sl
	bl sub_8010C58
	b _08086A26
	.align 2, 0
_08086974: .4byte gCamera
_08086978:
	ldr r0, [sp, #4]
	adds r0, #0xe0
	ldr r3, [r0]
	movs r6, #0xc
	adds r6, r6, r3
	mov ip, r6
	ldr r1, [r6, #0x28]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	beq _08086A2A
	asrs r1, r2, #8
	lsls r0, r5, #0x18
	asrs r0, r0, #0x18
	mov sl, r0
	adds r2, r1, r0
	ldr r7, [sp, #4]
	ldr r1, [r7, #0x10]
	asrs r1, r1, #8
	ldr r0, _08086A3C @ =gCamera
	adds r0, #0x6a
	movs r6, #0
	ldrsh r0, [r0, r6]
	adds r1, r1, r0
	adds r0, r3, #0
	adds r0, #0x38
	movs r6, #0
	ldrsb r6, [r0, r6]
	adds r1, r1, r6
	cmp r2, r1
	bgt _080869CE
	mov r7, r8
	lsls r0, r7, #8
	asrs r0, r0, #0x18
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	mov r7, sl
	subs r0, r0, r7
	adds r0, r2, r0
	cmp r0, r1
	bge _080869E0
	cmp r2, r1
	blt _08086A2A
_080869CE:
	adds r0, r3, #0
	adds r0, #0x3a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r0, r6
	adds r0, r1, r0
	cmp r0, r2
	blt _08086A2A
_080869E0:
	mov r1, sb
	asrs r0, r1, #8
	adds r4, r5, #0
	lsls r1, r4, #0x10
	asrs r1, r1, #0x18
	adds r3, r0, r1
	ldr r2, [sp, #4]
	ldr r0, [r2, #0x14]
	asrs r0, r0, #8
	mov r2, ip
	adds r2, #0x2d
	movs r5, #0
	ldrsb r5, [r2, r5]
	adds r2, r0, r5
	cmp r3, r2
	bgt _08086A0E
	asrs r0, r4, #0x18
	subs r0, r0, r1
	adds r0, r3, r0
	cmp r0, r2
	bge _08086A20
	cmp r3, r2
	blt _08086A2A
_08086A0E:
	mov r0, ip
	adds r0, #0x2f
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r0, r5
	adds r0, r2, r0
	cmp r0, r3
	blt _08086A2A
_08086A20:
	ldr r0, [sp, #4]
	bl sub_8010C88
_08086A26:
	movs r3, #1
	str r3, [sp]
_08086A2A:
	ldr r0, [sp]
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08086A3C: .4byte gCamera

	thumb_func_start sub_8086A40
sub_8086A40: @ 0x08086A40
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r7, r0, #0
	lsls r1, r1, #0x18
	lsrs r4, r1, #0x18
	movs r1, #4
	ldrsh r0, [r7, r1]
	cmp r0, #0
	bne _08086A58
	b _08086B84
_08086A58:
	ldr r0, _08086A94 @ =sub_8086B94
	movs r2, #0x84
	lsls r2, r2, #6
	ldr r1, _08086A98 @ =sub_80870AC
	str r1, [sp]
	movs r1, #0x50
	movs r3, #0
	bl TaskCreate
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r1, r0
	str r7, [r6, #0x4c]
	strb r4, [r6, #0x16]
	ldr r2, _08086A9C @ =gPseudoRandom
	ldr r1, [r2]
	ldr r0, _08086AA0 @ =0x00196225
	muls r0, r1, r0
	ldr r1, _08086AA4 @ =0x3C6EF35F
	adds r0, r0, r1
	str r0, [r2]
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _08086AA8
	movs r0, #0x80
	lsls r0, r0, #2
	b _08086AAC
	.align 2, 0
_08086A94: .4byte sub_8086B94
_08086A98: .4byte sub_80870AC
_08086A9C: .4byte gPseudoRandom
_08086AA0: .4byte 0x00196225
_08086AA4: .4byte 0x3C6EF35F
_08086AA8:
	movs r0, #0x80
	lsls r0, r0, #1
_08086AAC:
	str r0, [r6, #0xc]
	ldrb r0, [r6, #0x16]
	cmp r0, #2
	bne _08086AC8
	movs r2, #0x94
	lsls r2, r2, #1
	adds r0, r7, r2
	ldr r0, [r0]
	str r0, [r6, #8]
	movs r0, #0
	strh r0, [r6, #0x14]
	movs r0, #1
	strb r0, [r7, #3]
	b _08086AE0
_08086AC8:
	ldr r0, [r6, #0xc]
	rsbs r0, r0, #0
	str r0, [r6, #0xc]
	movs r1, #0xa0
	lsls r1, r1, #1
	adds r0, r7, r1
	ldr r0, [r0]
	str r0, [r6, #8]
	movs r0, #0
	strh r0, [r6, #0x14]
	movs r0, #1
	strb r0, [r7, #2]
_08086AE0:
	lsls r1, r4, #1
	adds r1, r1, r4
	lsls r1, r1, #3
	movs r2, #0x86
	lsls r2, r2, #1
	adds r0, r7, r2
	adds r0, r0, r1
	ldr r0, [r0]
	str r0, [r6]
	adds r2, #4
	adds r0, r7, r2
	adds r0, r0, r1
	ldr r0, [r0]
	str r0, [r6, #4]
	movs r0, #0
	mov r8, r0
	movs r4, #0
	movs r0, #1
	strh r0, [r6, #0x10]
	strh r4, [r6, #0x12]
	movs r0, #0x96
	lsls r0, r0, #2
	bl m4aSongNumStart
	adds r3, r6, #0
	adds r3, #0x18
	adds r5, r6, #0
	adds r5, #0x40
	movs r0, #0xa0
	lsls r0, r0, #3
	strh r0, [r3, #0xc]
	mov r1, r8
	strb r1, [r3, #0x1a]
	movs r0, #0xb0
	lsls r0, r0, #2
	strh r0, [r3, #0x14]
	strh r4, [r3, #0xe]
	strh r4, [r3, #0x16]
	movs r0, #0xff
	strb r0, [r3, #0x1b]
	movs r0, #0x10
	strb r0, [r3, #0x1c]
	strb r1, [r3, #0x1f]
	subs r0, #0x11
	str r0, [r3, #0x20]
	movs r0, #0x80
	lsls r0, r0, #5
	str r0, [r3, #8]
	ldrb r0, [r6, #0x16]
	cmp r0, #2
	bne _08086B56
	ldr r0, [r7, #0x1c]
	str r0, [r6, #0x18]
	ldr r0, [r3, #8]
	movs r1, #0x80
	lsls r1, r1, #4
	orrs r0, r1
	str r0, [r3, #8]
	b _08086B5A
_08086B56:
	ldr r0, [r7, #0x20]
	str r0, [r6, #0x18]
_08086B5A:
	ldr r0, [r6]
	asrs r0, r0, #8
	ldr r2, _08086B90 @ =gCamera
	ldr r1, [r2]
	subs r0, r0, r1
	strh r0, [r3, #0x10]
	ldr r0, [r6, #4]
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	strh r0, [r3, #0x12]
	ldrh r0, [r6, #0x14]
	strh r0, [r5]
	ldrh r0, [r3, #0x10]
	strh r0, [r5, #6]
	ldrh r0, [r3, #0x12]
	strh r0, [r5, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r5, #2]
	strh r0, [r5, #4]
_08086B84:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08086B90: .4byte gCamera

	thumb_func_start sub_8086B94
sub_8086B94: @ 0x08086B94
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	ldr r0, _08086BDC @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r7, [r4, #0x4c]
	adds r0, #0x18
	adds r6, r1, r0
	ldr r2, _08086BE0 @ =0x03000040
	adds r2, r2, r1
	mov r8, r2
	movs r0, #0
	mov sb, r0
	ldrb r0, [r7]
	cmp r0, #0
	bne _08086BCA
	ldrh r0, [r4, #0x12]
	cmp r0, #0
	bne _08086BCA
	movs r0, #0x64
	strh r0, [r4, #0x12]
_08086BCA:
	ldrh r0, [r4, #0x12]
	cmp r0, #0x64
	beq _08086C0C
	cmp r0, #0x64
	bgt _08086BE4
	cmp r0, #0
	beq _08086BEA
	b _08086C38
	.align 2, 0
_08086BDC: .4byte gCurTask
_08086BE0: .4byte 0x03000040
_08086BE4:
	cmp r0, #0x6e
	beq _08086C28
	b _08086C38
_08086BEA:
	ldr r0, [r4, #4]
	ldr r1, [r4, #0xc]
	adds r1, r0, r1
	str r1, [r4, #4]
	ldrb r0, [r4, #0x16]
	cmp r0, #2
	bne _08086C00
	ldr r0, [r4, #8]
	cmp r1, r0
	blt _08086C38
	b _08086C06
_08086C00:
	ldr r0, [r4, #8]
	cmp r1, r0
	bgt _08086C38
_08086C06:
	movs r0, #0x64
	strh r0, [r4, #0x12]
	b _08086C38
_08086C0C:
	movs r1, #0
	ldr r0, _08086C24 @ =0x00000501
	strh r0, [r6, #0xc]
	strb r1, [r6, #0x1a]
	movs r0, #0x90
	bl m4aSongNumStart
	movs r0, #0x15
	strh r0, [r4, #0x10]
	movs r0, #0x6e
	strh r0, [r4, #0x12]
	b _08086C38
	.align 2, 0
_08086C24: .4byte 0x00000501
_08086C28:
	ldrh r0, [r4, #0x10]
	subs r0, #1
	strh r0, [r4, #0x10]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _08086C38
	movs r1, #1
	mov sb, r1
_08086C38:
	ldr r0, _08086C7C @ =gCamera
	adds r0, #0x6a
	movs r2, #0
	ldrsh r1, [r0, r2]
	lsls r1, r1, #8
	ldr r0, [r4]
	adds r0, r0, r1
	movs r1, #0x80
	lsls r1, r1, #3
	adds r2, r0, r1
	str r2, [r4]
	ldr r5, [r7, #0x28]
	ldr r0, [r5, #4]
	movs r1, #0x80
	lsls r1, r1, #1
	ands r0, r1
	cmp r0, #0
	bne _08086CA6
	asrs r1, r2, #8
	ldr r2, [r4, #4]
	asrs r2, r2, #8
	str r5, [sp]
	adds r0, r6, #0
	movs r3, #0
	bl sub_8010184
	cmp r0, #0
	beq _08086C80
	adds r0, r5, #0
	movs r1, #1
	bl sub_801038C
	b _08086CA6
	.align 2, 0
_08086C7C: .4byte gCamera
_08086C80:
	ldr r1, [r4]
	asrs r1, r1, #8
	ldr r2, [r4, #4]
	asrs r2, r2, #8
	str r5, [sp]
	adds r0, r6, #0
	movs r3, #0
	bl sub_8010288
	cmp r0, #0
	beq _08086CA6
	ldrh r0, [r4, #0x12]
	cmp r0, #0
	bne _08086CA0
	movs r0, #0x64
	strh r0, [r4, #0x12]
_08086CA0:
	adds r0, r5, #0
	bl sub_8010C88
_08086CA6:
	ldr r5, [r7, #0x2c]
	ldr r0, _08086CF0 @ =gStageData
	ldrb r0, [r0, #3]
	cmp r0, #5
	bne _08086CFC
	ldr r0, [r5, #4]
	movs r1, #0x80
	lsls r1, r1, #1
	ands r0, r1
	cmp r0, #0
	bne _08086CFC
	ldr r1, [r4]
	asrs r1, r1, #8
	ldr r2, [r4, #4]
	asrs r2, r2, #8
	str r5, [sp]
	adds r0, r6, #0
	movs r3, #0
	bl sub_8010184
	cmp r0, #0
	beq _08086CFC
	adds r0, r7, #0
	adds r0, #0x70
	ldrb r0, [r0]
	cmp r0, #0
	beq _08086CF4
	ldrh r0, [r4, #0x12]
	cmp r0, #0
	bne _08086CE6
	movs r0, #0x64
	strh r0, [r4, #0x12]
_08086CE6:
	adds r0, r5, #0
	bl sub_8010C58
	b _08086CFC
	.align 2, 0
_08086CF0: .4byte gStageData
_08086CF4:
	adds r0, r5, #0
	movs r1, #1
	bl sub_801038C
_08086CFC:
	mov r2, sb
	cmp r2, #0
	beq _08086D20
	ldrb r0, [r4, #0x16]
	cmp r0, #2
	bne _08086D0E
	movs r0, #0
	strb r0, [r7, #3]
	b _08086D12
_08086D0E:
	movs r0, #0
	strb r0, [r7, #2]
_08086D12:
	ldr r0, _08086D1C @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
	b _08086D50
	.align 2, 0
_08086D1C: .4byte gCurTask
_08086D20:
	ldr r0, [r4]
	asrs r0, r0, #8
	ldr r2, _08086D60 @ =gCamera
	ldr r1, [r2]
	subs r0, r0, r1
	strh r0, [r6, #0x10]
	ldr r0, [r4, #4]
	asrs r0, r0, #8
	ldr r1, [r2, #4]
	subs r0, r0, r1
	strh r0, [r6, #0x12]
	ldrh r0, [r4, #0x14]
	mov r1, r8
	strh r0, [r1]
	ldrh r0, [r6, #0x10]
	strh r0, [r1, #6]
	ldrh r0, [r6, #0x12]
	strh r0, [r1, #8]
	adds r0, r6, #0
	bl UpdateSpriteAnimation
	adds r0, r6, #0
	bl DisplaySprite
_08086D50:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08086D60: .4byte gCamera

	thumb_func_start sub_8086D64
sub_8086D64: @ 0x08086D64
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r6, r0, #0
	mov r8, r1
	adds r4, r2, #0
	mov sb, r3
	ldr r5, [sp, #0x24]
	lsls r6, r6, #0x10
	lsrs r6, r6, #0x10
	mov r0, r8
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r8, r0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	mov r7, sb
	lsls r7, r7, #0x10
	adds r0, r7, #0
	lsrs r0, r0, #0x10
	mov sb, r0
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	ldr r0, _08086E40 @ =sub_8086E58
	movs r2, #0x84
	lsls r2, r2, #6
	ldr r1, _08086E44 @ =sub_8087234
	str r1, [sp]
	movs r1, #0x38
	movs r3, #0
	bl TaskCreate
	ldrh r2, [r0, #6]
	movs r3, #0xc0
	lsls r3, r3, #0x12
	adds r3, r2, r3
	ldr r7, _08086E48 @ =0x03000010
	adds r2, r2, r7
	movs r0, #0
	mov sl, r0
	strb r5, [r3, #0xe]
	movs r5, #0
	mov ip, r5
	mov r7, sl
	strh r7, [r3, #0xc]
	ldr r5, _08086E4C @ =gSineTable
	ldr r1, _08086E50 @ =0x000003FF
	mov r0, sb
	ands r1, r0
	movs r7, #0x80
	lsls r7, r7, #1
	adds r0, r1, r7
	lsls r0, r0, #1
	adds r0, r0, r5
	movs r7, #0
	ldrsh r0, [r0, r7]
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	muls r0, r4, r0
	asrs r0, r0, #0xe
	strh r0, [r3, #8]
	lsls r1, r1, #1
	adds r1, r1, r5
	movs r5, #0
	ldrsh r0, [r1, r5]
	muls r0, r4, r0
	asrs r0, r0, #0xe
	strh r0, [r3, #0xa]
	ldr r7, [sp, #0x28]
	str r7, [r2]
	ldr r0, _08086E54 @ =0x000004F9
	strh r0, [r2, #0xc]
	mov r0, ip
	strb r0, [r2, #0x1a]
	movs r0, #0x80
	lsls r0, r0, #2
	strh r0, [r2, #0x14]
	mov r5, sl
	strh r5, [r2, #0xe]
	strh r5, [r2, #0x16]
	movs r0, #0xff
	strb r0, [r2, #0x1b]
	movs r0, #0x10
	strb r0, [r2, #0x1c]
	mov r7, ip
	strb r7, [r2, #0x1f]
	subs r0, #0x11
	str r0, [r2, #0x20]
	movs r0, #0x80
	lsls r0, r0, #5
	str r0, [r2, #8]
	lsls r6, r6, #0x10
	asrs r6, r6, #8
	str r6, [r3]
	mov r0, r8
	lsls r0, r0, #0x10
	asrs r0, r0, #8
	str r0, [r3, #4]
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08086E40: .4byte sub_8086E58
_08086E44: .4byte sub_8087234
_08086E48: .4byte 0x03000010
_08086E4C: .4byte gSineTable
_08086E50: .4byte 0x000003FF
_08086E54: .4byte 0x000004F9

	thumb_func_start sub_8086E58
sub_8086E58: @ 0x08086E58
	push {r4, r5, lr}
	ldr r2, _08086E80 @ =gCurTask
	ldr r0, [r2]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, #0x10
	adds r5, r1, r0
	ldrb r0, [r4, #0xe]
	subs r0, #1
	strb r0, [r4, #0xe]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08086E84
	ldr r0, [r2]
	bl TaskDestroy
	b _08086ECC
	.align 2, 0
_08086E80: .4byte gCurTask
_08086E84:
	ldr r3, _08086ED4 @ =gCamera
	adds r0, r3, #0
	adds r0, #0x6a
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #8
	ldr r1, [r4]
	adds r1, r1, r0
	movs r2, #8
	ldrsh r0, [r4, r2]
	adds r1, r1, r0
	str r1, [r4]
	ldrh r0, [r4, #0xc]
	ldrh r2, [r4, #0xa]
	adds r0, r0, r2
	strh r0, [r4, #0xa]
	movs r0, #0xa
	ldrsh r2, [r4, r0]
	ldr r0, [r4, #4]
	adds r0, r0, r2
	str r0, [r4, #4]
	asrs r1, r1, #8
	ldr r0, [r3]
	subs r1, r1, r0
	strh r1, [r5, #0x10]
	ldr r0, [r4, #4]
	asrs r0, r0, #8
	ldr r1, [r3, #4]
	subs r0, r0, r1
	strh r0, [r5, #0x12]
	adds r0, r5, #0
	bl UpdateSpriteAnimation
	adds r0, r5, #0
	bl DisplaySprite
_08086ECC:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08086ED4: .4byte gCamera

	thumb_func_start sub_8086ED8
sub_8086ED8: @ 0x08086ED8
	push {r4, lr}
	ldrh r4, [r0, #6]
	ldr r1, _08086F00 @ =0x0300038C
	adds r0, r4, r1
	ldr r0, [r0]
	cmp r0, #0
	beq _08086EEA
	bl VramFree
_08086EEA:
	ldr r1, _08086F04 @ =0x03000454
	adds r0, r4, r1
	ldr r0, [r0]
	cmp r0, #0
	beq _08086EF8
	bl VramFree
_08086EF8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08086F00: .4byte 0x0300038C
_08086F04: .4byte 0x03000454

	thumb_func_start sub_8086F08
sub_8086F08: @ 0x08086F08
	push {r4, r5, lr}
	ldr r5, _08086F3C @ =gCurTask
	ldr r0, [r5]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	ldr r0, _08086F40 @ =0x0000023F
	bl m4aSongNumStart
	adds r0, r4, #0
	bl sub_808211C
	adds r0, r4, #0
	bl sub_8082388
	adds r0, r4, #0
	bl sub_8082794
	ldr r1, [r5]
	ldr r0, _08086F44 @ =sub_8086F48
	str r0, [r1, #8]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08086F3C: .4byte gCurTask
_08086F40: .4byte 0x0000023F
_08086F44: .4byte sub_8086F48

	thumb_func_start sub_8086F48
sub_8086F48: @ 0x08086F48
	push {r4, lr}
	ldr r0, _08086F9C @ =gCurTask
	ldr r0, [r0]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	adds r0, r4, #0
	bl sub_8087174
	adds r0, r4, #0
	bl sub_808211C
	ldr r1, _08086FA0 @ =gUnknown_08E2ED50
	ldrb r0, [r4, #1]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r4, #0
	bl _call_via_r1
	adds r0, r4, #0
	bl sub_80862D8
	adds r0, r4, #0
	bl sub_8084EB4
	adds r0, r4, #0
	bl sub_8082428
	adds r0, r4, #0
	bl sub_8082388
	adds r0, r4, #0
	bl sub_8082794
	adds r0, r4, #0
	bl sub_8081EFC
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08086F9C: .4byte gCurTask
_08086FA0: .4byte gUnknown_08E2ED50

	thumb_func_start sub_8086FA4
sub_8086FA4: @ 0x08086FA4
	push {r4, lr}
	ldr r0, _08086FDC @ =gCurTask
	ldr r0, [r0]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	adds r0, r4, #0
	bl sub_808211C
	ldr r1, _08086FE0 @ =gUnknown_08E2ED50
	ldrb r0, [r4, #1]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r4, #0
	bl _call_via_r1
	adds r0, r4, #0
	bl sub_8082388
	adds r0, r4, #0
	bl sub_8082D08
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08086FDC: .4byte gCurTask
_08086FE0: .4byte gUnknown_08E2ED50

	thumb_func_start sub_8086FE4
sub_8086FE4: @ 0x08086FE4
	push {lr}
	ldr r0, _08086FF4 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
	pop {r0}
	bx r0
	.align 2, 0
_08086FF4: .4byte gCurTask

	thumb_func_start sub_8086FF8
sub_8086FF8: @ 0x08086FF8
	push {lr}
	adds r2, r0, #0
	adds r0, #0xed
	strb r1, [r0]
	ldrb r0, [r0]
	cmp r0, #7
	beq _0808700C
	cmp r0, #8
	beq _0808701C
	b _0808702A
_0808700C:
	adds r1, r2, #0
	adds r1, #0xb0
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r1]
	adds r1, #4
	movs r0, #0
	b _08087028
_0808701C:
	adds r1, r2, #0
	adds r1, #0xa4
	ldr r0, _08087030 @ =0xFFFFFE00
	str r0, [r1]
	adds r1, #4
	ldr r0, _08087034 @ =0xFFFFFF00
_08087028:
	str r0, [r1]
_0808702A:
	pop {r0}
	bx r0
	.align 2, 0
_08087030: .4byte 0xFFFFFE00
_08087034: .4byte 0xFFFFFF00

	thumb_func_start sub_8087038
sub_8087038: @ 0x08087038
	adds r0, #0xef
	strb r1, [r0]
	bx lr
	.align 2, 0

	thumb_func_start sub_8087040
sub_8087040: @ 0x08087040
	bx lr
	.align 2, 0

	thumb_func_start sub_8087044
sub_8087044: @ 0x08087044
	lsls r1, r1, #0x18
	ldr r2, _08087064 @ =0x00000814
	adds r0, r0, r2
	ldr r3, _08087068 @ =gUnknown_080D5D0C
	lsrs r1, r1, #0x16
	adds r2, r1, r3
	ldrh r2, [r2]
	strh r2, [r0, #0xc]
	adds r3, #2
	adds r1, r1, r3
	ldrh r1, [r1]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	bx lr
	.align 2, 0
_08087064: .4byte 0x00000814
_08087068: .4byte gUnknown_080D5D0C

	thumb_func_start sub_808706C
sub_808706C: @ 0x0808706C
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r2, #0
	movs r7, #0xed
	lsls r7, r7, #2
	movs r6, #0
	ldr r3, _08087094 @ =0x000004FE
	movs r5, #1
_08087080:
	lsls r0, r2, #2
	adds r0, r0, r2
	lsls r0, r0, #3
	adds r0, r0, r7
	adds r0, r4, r0
	cmp r1, #0
	bne _08087098
	strh r3, [r0, #0xc]
	strb r5, [r0, #0x1a]
	b _0808709C
	.align 2, 0
_08087094: .4byte 0x000004FE
_08087098:
	strh r3, [r0, #0xc]
	strb r6, [r0, #0x1a]
_0808709C:
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #3
	bls _08087080
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80870AC
sub_80870AC: @ 0x080870AC
	bx lr
	.align 2, 0

	thumb_func_start sub_80870B0
sub_80870B0: @ 0x080870B0
	push {lr}
	adds r2, r0, #0
	ldr r1, _080870DC @ =gUnknown_080D5D18
	ldrb r0, [r2, #0xa]
	adds r0, r0, r1
	ldrb r0, [r0]
	movs r1, #0
	strb r0, [r2, #1]
	ldrb r0, [r2, #0xa]
	adds r0, #1
	strb r0, [r2, #0xa]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #4
	bls _080870D0
	strb r1, [r2, #0xa]
_080870D0:
	movs r0, #1
	strh r0, [r2, #4]
	strh r1, [r2, #8]
	pop {r0}
	bx r0
	.align 2, 0
_080870DC: .4byte gUnknown_080D5D18
_080870E0:
	.byte 0x00, 0x20, 0x70, 0x47

	thumb_func_start sub_80870E4
sub_80870E4: @ 0x080870E4
	push {lr}
	sub sp, #4
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	ldr r0, _0808710C @ =gBgOffsetsHBlank
	ldr r0, [r0]
	ldr r2, _08087110 @ =gUnknown_03002E70
	cmp r0, r2
	bne _0808711C
	mov r0, sp
	strh r1, [r0]
	ldr r0, _08087114 @ =0x040000D4
	mov r1, sp
	str r1, [r0]
	str r2, [r0, #4]
	ldr r1, _08087118 @ =0x81000140
	str r1, [r0, #8]
	ldr r0, [r0, #8]
	b _08087132
	.align 2, 0
_0808710C: .4byte gBgOffsetsHBlank
_08087110: .4byte gUnknown_03002E70
_08087114: .4byte 0x040000D4
_08087118: .4byte 0x81000140
_0808711C:
	mov r0, sp
	strh r1, [r0]
	ldr r1, _08087138 @ =0x040000D4
	str r0, [r1]
	movs r3, #0xa0
	lsls r3, r3, #2
	adds r0, r2, r3
	str r0, [r1, #4]
	ldr r0, _0808713C @ =0x81000140
	str r0, [r1, #8]
	ldr r0, [r1, #8]
_08087132:
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_08087138: .4byte 0x040000D4
_0808713C: .4byte 0x81000140

	thumb_func_start sub_8087140
sub_8087140: @ 0x08087140
	push {r4, lr}
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	ldr r0, _08087170 @ =gBgOffsetsHBlank
	ldr r3, [r0]
	lsls r0, r1, #1
	adds r3, r3, r0
	cmp r1, r2
	bhs _08087168
_0808715A:
	strh r4, [r3]
	adds r3, #2
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, r2
	blo _0808715A
_08087168:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08087170: .4byte gBgOffsetsHBlank

	thumb_func_start sub_8087174
sub_8087174: @ 0x08087174
	movs r1, #0
	str r1, [r0, #0x34]
	bx lr
	.align 2, 0

	thumb_func_start sub_808717C
sub_808717C: @ 0x0808717C
	ldr r1, [r0, #0x34]
	movs r2, #1
	orrs r1, r2
	str r1, [r0, #0x34]
	bx lr
	.align 2, 0

	thumb_func_start sub_8087188
sub_8087188: @ 0x08087188
	push {r4, lr}
	mov ip, r0
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	ldr r0, [r0, #0x34]
	movs r4, #2
	orrs r0, r4
	mov r4, ip
	str r0, [r4, #0x34]
	lsls r1, r1, #0x10
	asrs r4, r1, #0x10
	lsrs r1, r1, #0x1f
	adds r4, r4, r1
	asrs r4, r4, #1
	mov r0, ip
	str r4, [r0, #0x48]
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	str r2, [r0, #0x4c]
	rsbs r1, r4, #0
	adds r0, #0x3c
	strb r1, [r0]
	rsbs r0, r3, #0
	mov r1, ip
	adds r1, #0x3d
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x3e
	strb r4, [r0]
	adds r0, #1
	strb r3, [r0]
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_80871CC
sub_80871CC: @ 0x080871CC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r5, r0, #0
	mov r8, r1
	movs r6, #0
	movs r4, #0
_080871DC:
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #3
	movs r1, #0xed
	lsls r1, r1, #2
	adds r0, r0, r1
	adds r0, r5, r0
	lsls r3, r4, #1
	adds r3, r3, r4
	lsls r3, r3, #3
	movs r2, #0x86
	lsls r2, r2, #1
	adds r1, r5, r2
	adds r1, r1, r3
	ldr r1, [r1]
	asrs r1, r1, #8
	movs r7, #0x88
	lsls r7, r7, #1
	adds r2, r5, r7
	adds r2, r2, r3
	ldr r2, [r2]
	asrs r2, r2, #8
	mov r3, r8
	str r3, [sp]
	movs r3, #0
	bl sub_8010184
	cmp r0, #1
	bne _0808721A
	movs r6, #1
	b _08087224
_0808721A:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #3
	bls _080871DC
_08087224:
	adds r0, r6, #0
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8087234
sub_8087234: @ 0x08087234
	bx lr
	.align 2, 0

	thumb_func_start sub_8087238
sub_8087238: @ 0x08087238
	bx lr
	.align 2, 0

	thumb_func_start sub_808723C
sub_808723C: @ 0x0808723C
	push {r4, r5, r6, lr}
	mov r6, sb
	mov r5, r8
	push {r5, r6}
	sub sp, #8
	adds r5, r0, #0
	adds r6, r1, #0
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	lsls r6, r6, #0x18
	lsrs r6, r6, #0x18
	ldr r0, _0808731C @ =gDispCnt
	mov sb, r0
	ldr r1, _08087320 @ =0x00001741
	adds r0, r1, #0
	mov r2, sb
	strh r0, [r2]
	ldr r0, _08087324 @ =sub_8089F54
	movs r1, #0xfc
	lsls r1, r1, #2
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r3, _08087328 @ =sub_808A1AC
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	ldr r2, _0808732C @ =gPseudoRandom
	ldr r1, _08087330 @ =gUnknown_03003574
	ldr r1, [r1]
	str r1, [r2]
	movs r4, #0
	movs r1, #0
	mov r8, r1
	strh r5, [r0, #0x10]
	strb r6, [r0, #1]
	bl sub_808738C
	mov r2, r8
	str r2, [sp, #4]
	ldr r5, _08087334 @ =0x040000D4
	add r0, sp, #4
	str r0, [r5]
	ldr r0, _08087338 @ =gBgCntRegs
	ldrh r1, [r0, #4]
	movs r0, #0xc
	ands r0, r1
	lsls r0, r0, #0xc
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r0, r0, r1
	str r0, [r5, #4]
	ldr r0, _0808733C @ =0x85000010
	str r0, [r5, #8]
	ldr r0, [r5, #8]
	ldr r3, _08087340 @ =gUnknown_03006230
	strb r4, [r3, #2]
	ldr r0, _08087344 @ =gUnknown_03003590
	strb r4, [r0, #8]
	strb r4, [r0, #9]
	movs r1, #0xff
	strb r1, [r0, #0xa]
	movs r2, #0x40
	strb r2, [r0, #0xb]
	strb r4, [r3, #1]
	strb r4, [r0, #4]
	strb r4, [r0, #5]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #6]
	strb r2, [r0, #7]
	strb r4, [r3]
	strb r4, [r0]
	strb r4, [r0, #1]
	strb r1, [r0, #2]
	strb r2, [r0, #3]
	mov r1, sb
	ldrh r0, [r1]
	movs r2, #0x80
	lsls r2, r2, #6
	adds r1, r2, #0
	orrs r0, r1
	mov r1, sb
	strh r0, [r1]
	ldr r1, _08087348 @ =gWinRegs
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	ldr r1, _0808734C @ =gBldRegs
	ldr r0, _08087350 @ =0x00003FFF
	strh r0, [r1]
	movs r0, #0x10
	strh r0, [r1, #4]
	ldr r2, _08087354 @ =gFlags
	ldr r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #0xa
	ands r0, r1
	cmp r0, #0
	beq _0808735C
	ldr r0, _08087358 @ =gUnknown_080D66D8
	movs r1, #0
	movs r2, #0x40
	bl sub_80C4564
	b _08087370
	.align 2, 0
_0808731C: .4byte gDispCnt
_08087320: .4byte 0x00001741
_08087324: .4byte sub_8089F54
_08087328: .4byte sub_808A1AC
_0808732C: .4byte gPseudoRandom
_08087330: .4byte gUnknown_03003574
_08087334: .4byte 0x040000D4
_08087338: .4byte gBgCntRegs
_0808733C: .4byte 0x85000010
_08087340: .4byte gUnknown_03006230
_08087344: .4byte gUnknown_03003590
_08087348: .4byte gWinRegs
_0808734C: .4byte gBldRegs
_08087350: .4byte 0x00003FFF
_08087354: .4byte gFlags
_08087358: .4byte gUnknown_080D66D8
_0808735C:
	ldr r0, _08087380 @ =gUnknown_080D66D8
	str r0, [r5]
	ldr r0, _08087384 @ =gObjPalette
	str r0, [r5, #4]
	ldr r0, _08087388 @ =0x80000040
	str r0, [r5, #8]
	ldr r0, [r5, #8]
	movs r0, #2
	orrs r1, r0
	str r1, [r2]
_08087370:
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08087380: .4byte gUnknown_080D66D8
_08087384: .4byte gObjPalette
_08087388: .4byte 0x80000040

	thumb_func_start sub_808738C
sub_808738C: @ 0x0808738C
	push {r4, r5, r6, r7, lr}
	mov ip, r0
	movs r1, #0
	ldr r6, _080873C0 @ =gSaveGame
	mov r2, ip
	adds r2, #7
	movs r3, #0xc
_0808739A:
	adds r0, r2, r1
	strb r3, [r0]
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #3
	bls _0808739A
	mov r1, ip
	ldrb r0, [r1, #1]
	cmp r0, #0
	beq _080873B8
	cmp r0, #4
	beq _080873B8
	cmp r0, #5
	bne _080873C4
_080873B8:
	mov r1, ip
	adds r1, #0x6e
	movs r0, #0
	b _080873CA
	.align 2, 0
_080873C0: .4byte gSaveGame
_080873C4:
	mov r1, ip
	adds r1, #0x6e
	movs r0, #1
_080873CA:
	strh r0, [r1]
	mov r0, ip
	adds r0, #0x70
	movs r4, #0
	movs r5, #0
	strh r5, [r0]
	mov r7, ip
	strb r4, [r7, #0xc]
	strb r4, [r7, #0xd]
	ldr r0, _08087484 @ =0x0000FF10
	strh r0, [r7, #0x12]
	movs r0, #2
	strb r0, [r7, #0xb]
	mov r0, ip
	adds r0, #0x6c
	strh r5, [r0]
	strb r4, [r7, #4]
	strb r4, [r7, #2]
	strb r4, [r7, #5]
	movs r2, #1
	strb r2, [r7, #0xe]
	adds r0, #6
	strh r5, [r0]
	mov r1, ip
	adds r1, #0x74
	movs r0, #0x80
	lsls r0, r0, #3
	strh r0, [r1]
	strb r2, [r7, #0xf]
	movs r0, #0x96
	lsls r0, r0, #9
	str r0, [r7, #0x18]
	movs r2, #0x80
	lsls r2, r2, #6
	str r2, [r7, #0x1c]
	movs r0, #0xae
	lsls r0, r0, #9
	str r0, [r7, #0x20]
	adds r0, r2, r2
	str r0, [r7, #0x24]
	movs r3, #0xc6
	lsls r3, r3, #9
	str r3, [r7, #0x28]
	adds r0, r0, r2
	str r0, [r7, #0x2c]
	movs r1, #0xde
	lsls r1, r1, #9
	str r1, [r7, #0x30]
	adds r0, r0, r2
	str r0, [r7, #0x34]
	ldr r1, _08087488 @ =0xFFFFD800
	str r1, [r7, #0x58]
	movs r0, #0xac
	lsls r0, r0, #7
	str r0, [r7, #0x5c]
	str r1, [r7, #0x60]
	str r0, [r7, #0x64]
	str r3, [r7, #0x38]
	movs r0, #0xd0
	lsls r0, r0, #5
	adds r0, r2, r0
	str r0, [r7, #0x3c]
	str r3, [r7, #0x40]
	movs r1, #0x8c
	lsls r1, r1, #7
	adds r0, r2, r1
	str r0, [r7, #0x44]
	movs r0, #0xf0
	lsls r0, r0, #6
	str r0, [r7, #0x48]
	str r2, [r7, #0x4c]
	strb r4, [r7, #6]
	str r5, [r7, #0x50]
	str r5, [r7, #0x54]
	mov r0, ip
	adds r0, #0x68
	movs r1, #0x80
	lsls r1, r1, #1
	strh r1, [r0]
	adds r0, #2
	strh r1, [r0]
	ldr r7, _0808748C @ =0x00000366
	adds r0, r6, r7
	ldrb r0, [r0]
	mov r1, ip
	strb r0, [r1]
	ldr r0, _08087490 @ =0x0000FFFF
	strh r0, [r1, #0x14]
	ldr r0, _08087494 @ =0x06010000
	str r0, [r1, #0x78]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08087484: .4byte 0x0000FF10
_08087488: .4byte 0xFFFFD800
_0808748C: .4byte 0x00000366
_08087490: .4byte 0x0000FFFF
_08087494: .4byte 0x06010000

	thumb_func_start sub_8087498
sub_8087498: @ 0x08087498
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r7, r0, #0
	movs r1, #0xb5
	lsls r1, r1, #2
	adds r0, r7, r1
	ldr r1, [r7, #0x78]
	str r1, [r0]
	ldr r5, _08087588 @ =gUnknown_080D66B4
	ldr r2, [r5, #4]
	lsls r2, r2, #5
	ldr r1, [r7, #0x78]
	adds r1, r1, r2
	str r1, [r7, #0x78]
	ldrh r1, [r5]
	movs r2, #0
	mov r8, r2
	movs r4, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r5, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x58]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x5c]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r1, #0xa0
	lsls r1, r1, #1
	mov sb, r1
	mov r2, sb
	strh r2, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	movs r6, #0x10
	strb r6, [r0, #0x1c]
	mov r1, r8
	strb r1, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	movs r2, #0xbf
	lsls r2, r2, #2
	adds r0, r7, r2
	ldr r1, [r7, #0x78]
	str r1, [r0]
	ldr r2, [r5, #0xc]
	lsls r2, r2, #5
	ldr r1, [r7, #0x78]
	adds r1, r1, r2
	str r1, [r7, #0x78]
	ldrh r1, [r5, #8]
	strh r1, [r0, #0xc]
	ldrb r1, [r5, #0xa]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x60]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x64]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	mov r1, sb
	strh r1, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	strb r6, [r0, #0x1c]
	mov r2, r8
	strb r2, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	movs r1, #0xab
	lsls r1, r1, #2
	adds r0, r7, r1
	ldr r1, [r7, #0x78]
	str r1, [r0]
	ldr r3, _0808758C @ =gUnknown_080D6694
	ldr r2, [r3, #4]
	lsls r2, r2, #5
	ldr r1, [r7, #0x78]
	adds r1, r1, r2
	str r1, [r7, #0x78]
	ldrh r1, [r3]
	strh r1, [r0, #0xc]
	ldrb r1, [r3, #2]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x58]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x5c]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r1, #0x80
	lsls r1, r1, #1
	strh r1, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	strb r6, [r0, #0x1c]
	mov r2, r8
	strb r2, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08087588: .4byte gUnknown_080D66B4
_0808758C: .4byte gUnknown_080D6694

	thumb_func_start sub_8087590
sub_8087590: @ 0x08087590
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	movs r5, #0
	ldr r7, _080877E0 @ =gUnknown_080D6114
	movs r0, #0
	mov r8, r0
	movs r6, #0
_080875A2:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	adds r0, #0x7c
	adds r1, r4, r0
	ldr r0, [r4, #0x78]
	str r0, [r1]
	ldr r0, [r4, #0x78]
	movs r2, #0x80
	lsls r2, r2, #4
	adds r0, r0, r2
	str r0, [r4, #0x78]
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r7
	ldrh r0, [r0]
	strh r0, [r1, #0xc]
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r7
	ldrb r0, [r0, #2]
	strb r0, [r1, #0x1a]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	ldr r0, [r4, #0x18]
	asrs r0, r0, #8
	strh r0, [r1, #0x10]
	ldr r0, [r4, #0x1c]
	asrs r0, r0, #8
	strh r0, [r1, #0x12]
	strh r6, [r1, #0x14]
	strh r6, [r1, #0xe]
	strh r6, [r1, #0x16]
	movs r0, #0x10
	strb r0, [r1, #0x1c]
	mov r0, r8
	strb r0, [r1, #0x1f]
	movs r0, #0x20
	str r0, [r1, #8]
	adds r0, r1, #0
	bl UpdateSpriteAnimation
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #1
	bls _080875A2
	movs r5, #0
	ldr r7, _080877E4 @ =gUnknown_080D6174
	movs r1, #0
	mov r8, r1
	movs r6, #0
_08087612:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	adds r0, #0xcc
	adds r1, r4, r0
	ldr r0, [r4, #0x78]
	str r0, [r1]
	ldr r0, [r4, #0x78]
	movs r2, #0x80
	lsls r2, r2, #4
	adds r0, r0, r2
	str r0, [r4, #0x78]
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r7
	ldrh r0, [r0]
	strh r0, [r1, #0xc]
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r7
	ldrb r0, [r0, #2]
	strb r0, [r1, #0x1a]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	ldr r0, [r4, #0x20]
	asrs r0, r0, #8
	strh r0, [r1, #0x10]
	ldr r0, [r4, #0x24]
	asrs r0, r0, #8
	strh r0, [r1, #0x12]
	movs r0, #0x40
	strh r0, [r1, #0x14]
	strh r6, [r1, #0xe]
	strh r6, [r1, #0x16]
	movs r0, #0x10
	strb r0, [r1, #0x1c]
	mov r0, r8
	strb r0, [r1, #0x1f]
	str r6, [r1, #8]
	adds r0, r1, #0
	bl UpdateSpriteAnimation
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #1
	bls _08087612
	movs r5, #0
	ldr r7, _080877E8 @ =gUnknown_080D61D4
	movs r1, #0
	mov r8, r1
	movs r6, #0
_08087682:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	movs r2, #0x8e
	lsls r2, r2, #1
	adds r0, r0, r2
	adds r1, r4, r0
	ldr r0, [r4, #0x78]
	str r0, [r1]
	ldr r0, [r4, #0x78]
	movs r2, #0x80
	lsls r2, r2, #4
	adds r0, r0, r2
	str r0, [r4, #0x78]
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r7
	ldrh r0, [r0]
	strh r0, [r1, #0xc]
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r7
	ldrb r0, [r0, #2]
	strb r0, [r1, #0x1a]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	ldr r0, [r4, #0x28]
	asrs r0, r0, #8
	strh r0, [r1, #0x10]
	ldr r0, [r4, #0x2c]
	asrs r0, r0, #8
	strh r0, [r1, #0x12]
	movs r0, #0x80
	strh r0, [r1, #0x14]
	strh r6, [r1, #0xe]
	strh r6, [r1, #0x16]
	movs r0, #0x10
	strb r0, [r1, #0x1c]
	mov r0, r8
	strb r0, [r1, #0x1f]
	str r6, [r1, #8]
	adds r0, r1, #0
	bl UpdateSpriteAnimation
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #1
	bls _08087682
	movs r5, #0
	ldr r7, _080877EC @ =gUnknown_080D6234
	movs r1, #0
	mov r8, r1
	movs r6, #0
_080876F6:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	movs r2, #0xb6
	lsls r2, r2, #1
	adds r0, r0, r2
	adds r1, r4, r0
	ldr r0, [r4, #0x78]
	str r0, [r1]
	ldr r0, [r4, #0x78]
	movs r2, #0x80
	lsls r2, r2, #4
	adds r0, r0, r2
	str r0, [r4, #0x78]
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r7
	ldrh r0, [r0]
	strh r0, [r1, #0xc]
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r7
	ldrb r0, [r0, #2]
	strb r0, [r1, #0x1a]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	ldr r0, [r4, #0x30]
	asrs r0, r0, #8
	strh r0, [r1, #0x10]
	ldr r0, [r4, #0x34]
	asrs r0, r0, #8
	strh r0, [r1, #0x12]
	movs r0, #0xc0
	strh r0, [r1, #0x14]
	strh r6, [r1, #0xe]
	strh r6, [r1, #0x16]
	movs r0, #0x10
	strb r0, [r1, #0x1c]
	mov r0, r8
	strb r0, [r1, #0x1f]
	str r6, [r1, #8]
	adds r0, r1, #0
	bl UpdateSpriteAnimation
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #1
	bls _080876F6
	movs r5, #0
	ldr r7, _080877F0 @ =gUnknown_080D6354
	movs r1, #0
	mov r8, r1
	movs r6, #0
_0808776A:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	movs r2, #0x97
	lsls r2, r2, #2
	adds r0, r0, r2
	adds r1, r4, r0
	ldr r0, [r4, #0x78]
	str r0, [r1]
	ldr r0, [r4, #0x78]
	movs r2, #0x80
	lsls r2, r2, #4
	adds r0, r0, r2
	str r0, [r4, #0x78]
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r7
	ldrh r0, [r0]
	strh r0, [r1, #0xc]
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r7
	ldrb r0, [r0, #2]
	strb r0, [r1, #0x1a]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	ldr r0, [r4, #0x48]
	asrs r0, r0, #8
	strh r0, [r1, #0x10]
	ldr r0, [r4, #0x4c]
	asrs r0, r0, #8
	strh r0, [r1, #0x12]
	movs r0, #0xc0
	strh r0, [r1, #0x14]
	strh r6, [r1, #0xe]
	strh r6, [r1, #0x16]
	movs r0, #0x10
	strb r0, [r1, #0x1c]
	mov r0, r8
	strb r0, [r1, #0x1f]
	str r6, [r1, #8]
	adds r0, r1, #0
	bl UpdateSpriteAnimation
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #1
	bls _0808776A
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080877E0: .4byte gUnknown_080D6114
_080877E4: .4byte gUnknown_080D6174
_080877E8: .4byte gUnknown_080D61D4
_080877EC: .4byte gUnknown_080D6234
_080877F0: .4byte gUnknown_080D6354

	thumb_func_start sub_80877F4
sub_80877F4: @ 0x080877F4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r4, r0, #0
	movs r5, #0
	ldr r7, _08087824 @ =gUnknown_080D63B4
	movs r0, #0
	mov r8, r0
	movs r6, #0
_08087808:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	adds r0, #0x7c
	adds r1, r4, r0
	ldr r0, [r4, #0x78]
	str r0, [r1]
	cmp r5, #0
	bne _08087828
	ldr r0, [r4, #0x78]
	movs r2, #0x80
	lsls r2, r2, #4
	adds r0, r0, r2
	b _08087830
	.align 2, 0
_08087824: .4byte gUnknown_080D63B4
_08087828:
	ldr r0, [r4, #0x78]
	movs r3, #0x80
	lsls r3, r3, #4
	adds r0, r0, r3
_08087830:
	str r0, [r4, #0x78]
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r7
	ldrh r0, [r0]
	strh r0, [r1, #0xc]
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r7
	ldrb r0, [r0, #2]
	strb r0, [r1, #0x1a]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	ldr r0, [r4, #0x18]
	asrs r0, r0, #8
	strh r0, [r1, #0x10]
	ldr r0, [r4, #0x1c]
	asrs r0, r0, #8
	strh r0, [r1, #0x12]
	strh r6, [r1, #0x14]
	strh r6, [r1, #0xe]
	strh r6, [r1, #0x16]
	movs r0, #0x10
	strb r0, [r1, #0x1c]
	mov r0, r8
	strb r0, [r1, #0x1f]
	movs r0, #0x20
	str r0, [r1, #8]
	adds r0, r1, #0
	bl UpdateSpriteAnimation
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #1
	bls _08087808
	movs r5, #0
	ldr r7, _080878A8 @ =gUnknown_080D6414
	movs r1, #0
	mov r8, r1
	movs r6, #0
_0808788A:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	adds r0, #0xcc
	adds r1, r4, r0
	ldr r0, [r4, #0x78]
	str r0, [r1]
	cmp r5, #0
	bne _080878AC
	ldr r0, [r4, #0x78]
	movs r2, #0x80
	lsls r2, r2, #4
	adds r0, r0, r2
	b _080878B4
	.align 2, 0
_080878A8: .4byte gUnknown_080D6414
_080878AC:
	ldr r0, [r4, #0x78]
	movs r3, #0x80
	lsls r3, r3, #4
	adds r0, r0, r3
_080878B4:
	str r0, [r4, #0x78]
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r7
	ldrh r0, [r0]
	strh r0, [r1, #0xc]
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r7
	ldrb r0, [r0, #2]
	strb r0, [r1, #0x1a]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	ldr r0, [r4, #0x20]
	asrs r0, r0, #8
	strh r0, [r1, #0x10]
	ldr r0, [r4, #0x24]
	asrs r0, r0, #8
	strh r0, [r1, #0x12]
	movs r0, #0x40
	strh r0, [r1, #0x14]
	strh r6, [r1, #0xe]
	strh r6, [r1, #0x16]
	movs r0, #0x10
	strb r0, [r1, #0x1c]
	mov r0, r8
	strb r0, [r1, #0x1f]
	str r6, [r1, #8]
	adds r0, r1, #0
	bl UpdateSpriteAnimation
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #1
	bls _0808788A
	movs r5, #0
	ldr r2, _0808794C @ =gUnknown_080D6474
	ldr r7, _08087950 @ =gUnknown_080D64D4
	movs r1, #0
	mov r8, r1
	movs r6, #0
_08087910:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	movs r3, #0x8e
	lsls r3, r3, #1
	adds r0, r0, r3
	adds r1, r4, r0
	ldr r0, [r4, #0x78]
	str r0, [r1]
	ldrb r0, [r4, #1]
	cmp r0, #2
	bne _08087954
	ldr r0, [r4, #0x78]
	movs r3, #0x80
	lsls r3, r3, #4
	adds r0, r0, r3
	str r0, [r4, #0x78]
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r1, #0xc]
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r2
	b _0808797A
	.align 2, 0
_0808794C: .4byte gUnknown_080D6474
_08087950: .4byte gUnknown_080D64D4
_08087954:
	cmp r0, #3
	bne _0808797E
	ldr r0, [r4, #0x78]
	movs r3, #0x80
	lsls r3, r3, #4
	adds r0, r0, r3
	str r0, [r4, #0x78]
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r7
	ldrh r0, [r0]
	strh r0, [r1, #0xc]
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r7
_0808797A:
	ldrb r0, [r0, #2]
	strb r0, [r1, #0x1a]
_0808797E:
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	ldr r0, [r4, #0x28]
	asrs r0, r0, #8
	strh r0, [r1, #0x10]
	ldr r0, [r4, #0x2c]
	asrs r0, r0, #8
	strh r0, [r1, #0x12]
	movs r0, #0x80
	strh r0, [r1, #0x14]
	strh r6, [r1, #0xe]
	strh r6, [r1, #0x16]
	movs r0, #0x10
	strb r0, [r1, #0x1c]
	mov r0, r8
	strb r0, [r1, #0x1f]
	str r6, [r1, #8]
	adds r0, r1, #0
	str r2, [sp]
	bl UpdateSpriteAnimation
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	ldr r2, [sp]
	cmp r5, #1
	bls _08087910
	movs r5, #0
	ldr r7, _080879E0 @ =gUnknown_080D6534
	movs r1, #0
	mov r8, r1
	movs r6, #0
_080879BE:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	movs r2, #0xb6
	lsls r2, r2, #1
	adds r0, r0, r2
	adds r1, r4, r0
	ldr r0, [r4, #0x78]
	str r0, [r1]
	cmp r5, #0
	bne _080879E4
	ldr r0, [r4, #0x78]
	movs r3, #0x80
	lsls r3, r3, #4
	adds r0, r0, r3
	b _080879EC
	.align 2, 0
_080879E0: .4byte gUnknown_080D6534
_080879E4:
	ldr r0, [r4, #0x78]
	movs r2, #0x80
	lsls r2, r2, #4
	adds r0, r0, r2
_080879EC:
	str r0, [r4, #0x78]
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r7
	ldrh r0, [r0]
	strh r0, [r1, #0xc]
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r7
	ldrb r0, [r0, #2]
	strb r0, [r1, #0x1a]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	ldr r0, [r4, #0x30]
	asrs r0, r0, #8
	strh r0, [r1, #0x10]
	ldr r0, [r4, #0x34]
	asrs r0, r0, #8
	strh r0, [r1, #0x12]
	movs r0, #0xc0
	strh r0, [r1, #0x14]
	strh r6, [r1, #0xe]
	strh r6, [r1, #0x16]
	movs r0, #0x10
	strb r0, [r1, #0x1c]
	mov r3, r8
	strb r3, [r1, #0x1f]
	str r6, [r1, #8]
	adds r0, r1, #0
	bl UpdateSpriteAnimation
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #1
	bls _080879BE
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8087A48
sub_8087A48: @ 0x08087A48
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	ldr r6, _08087B08 @ =gBgCntRegs
	movs r0, #0
	mov r8, r0
	movs r4, #0
	ldr r0, _08087B0C @ =0x00004E07
	strh r0, [r6]
	ldr r5, _08087B10 @ =gBgScrollRegs
	strh r4, [r5]
	strh r4, [r5, #2]
	movs r1, #0xcc
	lsls r1, r1, #2
	adds r0, r7, r1
	ldr r1, _08087B14 @ =0x06004000
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _08087B18 @ =0x06007000
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	ldr r1, _08087B1C @ =0x00000157
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	movs r1, #0x40
	strh r1, [r0, #0x26]
	movs r1, #0x14
	strh r1, [r0, #0x28]
	ldr r2, _08087B20 @ =0x0000035A
	adds r1, r7, r2
	mov r3, r8
	strb r3, [r1]
	strh r4, [r0, #0x2e]
	bl DrawBackground
	ldr r0, _08087B24 @ =0x00000601
	strh r0, [r6, #2]
	strh r4, [r5, #4]
	strh r4, [r5, #6]
	movs r1, #0xec
	lsls r1, r1, #2
	adds r0, r7, r1
	movs r1, #0xc0
	lsls r1, r1, #0x13
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _08087B28 @ =0x06003000
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	movs r1, #0xac
	lsls r1, r1, #1
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	movs r1, #0x20
	strh r1, [r0, #0x26]
	strh r1, [r0, #0x28]
	ldr r2, _08087B2C @ =0x000003DA
	adds r1, r7, r2
	mov r3, r8
	strb r3, [r1]
	movs r1, #1
	strh r1, [r0, #0x2e]
	bl DrawBackground
	ldr r0, _08087B30 @ =0x0000188A
	strh r0, [r6, #4]
	strh r4, [r5, #8]
	strh r4, [r5, #0xa]
	movs r0, #0xdc
	lsls r0, r0, #2
	adds r2, r7, r0
	ldr r0, _08087B34 @ =0x06008000
	str r0, [r2, #4]
	strh r4, [r2, #0xa]
	ldr r0, _08087B38 @ =0x0600C000
	str r0, [r2, #0xc]
	strh r4, [r2, #0x18]
	strh r4, [r2, #0x1a]
	ldrb r0, [r7, #1]
	subs r0, #2
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _08087B40
	ldr r0, _08087B3C @ =gUnknown_080D66C4
	ldrh r0, [r0, #4]
	b _08087B4C
	.align 2, 0
_08087B08: .4byte gBgCntRegs
_08087B0C: .4byte 0x00004E07
_08087B10: .4byte gBgScrollRegs
_08087B14: .4byte 0x06004000
_08087B18: .4byte 0x06007000
_08087B1C: .4byte 0x00000157
_08087B20: .4byte 0x0000035A
_08087B24: .4byte 0x00000601
_08087B28: .4byte 0x06003000
_08087B2C: .4byte 0x000003DA
_08087B30: .4byte 0x0000188A
_08087B34: .4byte 0x06008000
_08087B38: .4byte 0x0600C000
_08087B3C: .4byte gUnknown_080D66C4
_08087B40:
	ldr r0, _08087B7C @ =gUnknown_080D66C4
	movs r3, #0x10
	ldrsh r1, [r7, r3]
	lsls r1, r1, #1
	adds r1, r1, r0
	ldrh r0, [r1]
_08087B4C:
	strh r0, [r2, #0x1c]
	movs r1, #0
	movs r0, #0
	strh r0, [r2, #0x1e]
	strh r0, [r2, #0x20]
	strh r0, [r2, #0x22]
	strh r0, [r2, #0x24]
	movs r0, #0x10
	strh r0, [r2, #0x26]
	strh r0, [r2, #0x28]
	adds r0, r2, #0
	adds r0, #0x2a
	strb r1, [r0]
	movs r0, #6
	strh r0, [r2, #0x2e]
	adds r0, r2, #0
	bl DrawBackground
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08087B7C: .4byte gUnknown_080D66C4

	thumb_func_start sub_8087B80
sub_8087B80: @ 0x08087B80
	push {r4, r5, r6, r7, lr}
	ldr r7, _08087C44 @ =gCurTask
	ldr r0, [r7]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	adds r0, #0x6e
	adds r6, r5, r0
	ldrh r0, [r6]
	cmp r0, #0
	beq _08087BD8
	ldr r2, _08087C48 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _08087C4C @ =gWinRegs
	movs r3, #0
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	ldrh r2, [r1, #8]
	movs r0, #0x3f
	orrs r0, r2
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	orrs r0, r2
	strh r0, [r1, #0xa]
	ldr r1, _08087C50 @ =gBldRegs
	ldr r0, _08087C54 @ =0x00003FFF
	strh r0, [r1]
	movs r0, #0x10
	strh r0, [r1, #4]
	ldr r0, _08087C58 @ =0x03000070
	adds r1, r5, r0
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r1]
	strh r3, [r6]
_08087BD8:
	adds r0, r4, #0
	bl sub_8089028
	adds r0, r4, #0
	bl sub_8089150
	adds r0, r4, #0
	bl sub_80891E4
	adds r0, r4, #0
	bl sub_8088FD4
	adds r0, r4, #0
	bl sub_8089EF8
	adds r0, r4, #0
	bl sub_8089398
	adds r0, r4, #0
	bl sub_80894BC
	adds r0, r4, #0
	bl sub_8089308
	adds r0, r4, #0
	bl sub_8089428
	adds r0, r4, #0
	bl sub_8089F08
	adds r0, r4, #0
	bl sub_8089F40
	adds r0, r4, #0
	bl sub_8089704
	adds r0, r4, #0
	bl sub_808927C
	ldr r2, _08087C50 @ =gBldRegs
	ldrh r0, [r2, #4]
	cmp r0, #0
	beq _08087C60
	ldr r1, _08087C58 @ =0x03000070
	adds r0, r5, r1
	ldrh r1, [r0]
	lsrs r1, r1, #8
	strh r1, [r2, #4]
	ldr r2, _08087C5C @ =0xFFFFFF00
	adds r1, r2, #0
	ldrh r3, [r0]
	adds r1, r1, r3
	strh r1, [r0]
	b _08087C68
	.align 2, 0
_08087C44: .4byte gCurTask
_08087C48: .4byte gDispCnt
_08087C4C: .4byte gWinRegs
_08087C50: .4byte gBldRegs
_08087C54: .4byte 0x00003FFF
_08087C58: .4byte 0x03000070
_08087C5C: .4byte 0xFFFFFF00
_08087C60:
	strh r0, [r2, #4]
	ldr r1, [r7]
	ldr r0, _08087C70 @ =sub_8089FCC
	str r0, [r1, #8]
_08087C68:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08087C70: .4byte sub_8089FCC

	thumb_func_start sub_8087C74
sub_8087C74: @ 0x08087C74
	push {r4, r5, r6, r7, lr}
	ldr r7, _08087D24 @ =gCurTask
	ldr r0, [r7]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	adds r0, #0x6e
	adds r6, r5, r0
	ldrh r0, [r6]
	cmp r0, #0
	beq _08087CC4
	ldr r2, _08087D28 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _08087D2C @ =gWinRegs
	movs r3, #0
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	ldrh r2, [r1, #8]
	movs r0, #0x3f
	orrs r0, r2
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	orrs r0, r2
	strh r0, [r1, #0xa]
	ldr r1, _08087D30 @ =gBldRegs
	ldr r0, _08087D34 @ =0x00003FFF
	strh r0, [r1]
	ldr r1, _08087D38 @ =0x03000070
	adds r0, r5, r1
	strh r3, [r0]
	strh r3, [r6]
_08087CC4:
	movs r2, #0x10
	ldrsh r0, [r4, r2]
	cmp r0, #4
	bne _08087CD2
	adds r0, r4, #0
	bl sub_8089028
_08087CD2:
	adds r0, r4, #0
	bl sub_80890F8
	adds r0, r4, #0
	bl sub_8089150
	adds r0, r4, #0
	bl sub_80891E4
	adds r0, r4, #0
	bl sub_8088FD4
	adds r0, r4, #0
	bl sub_8089EF8
	adds r0, r4, #0
	bl sub_8089F08
	adds r0, r4, #0
	bl sub_8089F40
	adds r0, r4, #0
	bl sub_8089704
	ldr r2, _08087D30 @ =gBldRegs
	ldrh r0, [r2, #4]
	cmp r0, #0xf
	bhi _08087D3C
	ldr r3, _08087D38 @ =0x03000070
	adds r0, r5, r3
	ldrh r1, [r0]
	lsrs r1, r1, #8
	strh r1, [r2, #4]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r2, #0
	ldrh r3, [r0]
	adds r1, r1, r3
	strh r1, [r0]
	b _08087D4A
	.align 2, 0
_08087D24: .4byte gCurTask
_08087D28: .4byte gDispCnt
_08087D2C: .4byte gWinRegs
_08087D30: .4byte gBldRegs
_08087D34: .4byte 0x00003FFF
_08087D38: .4byte 0x03000070
_08087D3C:
	movs r0, #0x10
	strh r0, [r2, #4]
	movs r0, #0xb
	strb r0, [r4, #0xd]
	ldr r1, [r7]
	ldr r0, _08087D50 @ =sub_8087D54
	str r0, [r1, #8]
_08087D4A:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08087D50: .4byte sub_8087D54

	thumb_func_start sub_8087D54
sub_8087D54: @ 0x08087D54
	push {r4, r5, lr}
	ldr r0, _08087D78 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	movs r1, #0x10
	ldrsh r0, [r4, r1]
	cmp r0, #0xb
	bls _08087D6C
	b _08087EFE
_08087D6C:
	lsls r0, r0, #2
	ldr r1, _08087D7C @ =_08087D80
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08087D78: .4byte gCurTask
_08087D7C: .4byte _08087D80
_08087D80: @ jump table
	.4byte _08087DB0 @ case 0
	.4byte _08087DD8 @ case 1
	.4byte _08087E24 @ case 2
	.4byte _08087E70 @ case 3
	.4byte _08087E78 @ case 4
	.4byte _08087EFE @ case 5
	.4byte _08087EFE @ case 6
	.4byte _08087EFE @ case 7
	.4byte _08087EFE @ case 8
	.4byte _08087EFE @ case 9
	.4byte _08087E80 @ case 10
	.4byte _08087EF8 @ case 11
_08087DB0:
	ldrb r1, [r4, #0xc]
	cmp r1, #0
	bne _08087DC4
	ldr r0, _08087DC0 @ =gStageData
	strb r1, [r0, #3]
	strb r1, [r0, #6]
	b _08087E5C
	.align 2, 0
_08087DC0: .4byte gStageData
_08087DC4:
	ldr r1, _08087DD4 @ =gStageData
	movs r0, #5
	strb r0, [r1, #3]
	movs r0, #0
	bl sub_80A1A4C
	b _08087EFE
	.align 2, 0
_08087DD4: .4byte gStageData
_08087DD8:
	ldrb r0, [r4, #0xc]
	cmp r0, #0
	bne _08087E0C
	ldr r0, _08087DF0 @ =gSaveGame
	ldrh r1, [r0, #4]
	ldr r0, _08087DF4 @ =0x0000FFFF
	cmp r1, r0
	bne _08087DF8
	movs r0, #2
	bl sub_8091D14
	b _08087EFE
	.align 2, 0
_08087DF0: .4byte gSaveGame
_08087DF4: .4byte 0x0000FFFF
_08087DF8:
	ldr r1, _08087E08 @ =gStageData
	movs r0, #6
	strb r0, [r1, #3]
	movs r0, #0
	bl sub_808D0F0
	b _08087EFE
	.align 2, 0
_08087E08: .4byte gStageData
_08087E0C:
	ldr r1, _08087E20 @ =gStageData
	movs r0, #7
	strb r0, [r1, #3]
	bl sub_80003B8
	movs r0, #0
	bl sub_8000340
	b _08087EFE
	.align 2, 0
_08087E20: .4byte gStageData
_08087E24:
	ldrb r1, [r4, #0xc]
	cmp r1, #0
	bne _08087E34
	ldr r2, _08087E30 @ =gStageData
	movs r0, #3
	b _08087E3A
	.align 2, 0
_08087E30: .4byte gStageData
_08087E34:
	ldr r2, _08087E64 @ =gStageData
	movs r1, #0
	movs r0, #4
_08087E3A:
	strb r0, [r2, #3]
	strb r1, [r2, #6]
	ldr r1, _08087E68 @ =gSaveGame
	movs r3, #0xd7
	lsls r3, r3, #2
	adds r0, r1, r3
	ldrh r0, [r0]
	strh r0, [r2, #0x14]
	ldr r5, _08087E6C @ =0x0000035E
	adds r0, r1, r5
	ldrh r0, [r0]
	strh r0, [r2, #0x16]
	movs r0, #0xd8
	lsls r0, r0, #2
	adds r1, r1, r0
	ldrh r0, [r1]
	strh r0, [r2, #0x18]
_08087E5C:
	movs r0, #0
	bl sub_8097C54
	b _08087EFE
	.align 2, 0
_08087E64: .4byte gStageData
_08087E68: .4byte gSaveGame
_08087E6C: .4byte 0x0000035E
_08087E70:
	movs r0, #0
	bl LaunchOptionsMenu
	b _08087EFE
_08087E78:
	movs r0, #1
	bl sub_808A25C
	b _08087EFE
_08087E80:
	ldr r1, _08087ED4 @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _08087ED8 @ =gBackgroundsCopyQueueCursor
	ldr r0, _08087EDC @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _08087EE0 @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _08087EE4 @ =gVramGraphicsCopyCursor
	ldr r0, _08087EE8 @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r2, _08087EEC @ =gStageData
	ldr r1, _08087EF0 @ =gSaveGame
	movs r3, #0xd7
	lsls r3, r3, #2
	adds r0, r1, r3
	ldrh r0, [r0]
	movs r3, #0
	strh r0, [r2, #0x14]
	ldr r5, _08087EF4 @ =0x0000035E
	adds r0, r1, r5
	ldrh r0, [r0]
	strh r0, [r2, #0x16]
	movs r0, #0xd8
	lsls r0, r0, #2
	adds r1, r1, r0
	ldrh r0, [r1]
	strh r0, [r2, #0x18]
	strb r3, [r2, #3]
	movs r0, #1
	strb r0, [r2, #0xd]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl sub_80B1AF4
	b _08087EFE
	.align 2, 0
_08087ED4: .4byte 0x0000FFFF
_08087ED8: .4byte gBackgroundsCopyQueueCursor
_08087EDC: .4byte gBackgroundsCopyQueueIndex
_08087EE0: .4byte gUnknown_03006840
_08087EE4: .4byte gVramGraphicsCopyCursor
_08087EE8: .4byte gVramGraphicsCopyQueueIndex
_08087EEC: .4byte gStageData
_08087EF0: .4byte gSaveGame
_08087EF4: .4byte 0x0000035E
_08087EF8:
	movs r0, #3
	bl sub_80AB120
_08087EFE:
	movs r1, #0x10
	ldrsh r0, [r4, r1]
	cmp r0, #0xa
	beq _08087F0E
	ldr r0, _08087F14 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
_08087F0E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08087F14: .4byte gCurTask

	thumb_func_start sub_8087F18
sub_8087F18: @ 0x08087F18
	push {r4, r5, r6, lr}
	ldr r0, _08087FC0 @ =gCurTask
	ldr r0, [r0]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	adds r0, #0x6e
	adds r6, r5, r0
	ldrh r0, [r6]
	cmp r0, #0
	beq _08087F68
	ldr r2, _08087FC4 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _08087FC8 @ =gWinRegs
	movs r3, #0
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	ldrh r2, [r1, #8]
	movs r0, #0x3f
	orrs r0, r2
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	orrs r0, r2
	strh r0, [r1, #0xa]
	ldr r1, _08087FCC @ =gBldRegs
	ldr r0, _08087FD0 @ =0x00003FFF
	strh r0, [r1]
	ldr r1, _08087FD4 @ =0x03000070
	adds r0, r5, r1
	strh r3, [r0]
	strh r3, [r6]
_08087F68:
	adds r0, r4, #0
	bl sub_8089028
	adds r0, r4, #0
	bl sub_80890F8
	adds r0, r4, #0
	bl sub_8089150
	adds r0, r4, #0
	bl sub_80891E4
	adds r0, r4, #0
	bl sub_8088FD4
	adds r0, r4, #0
	bl sub_8089EF8
	adds r0, r4, #0
	bl sub_8089F08
	adds r0, r4, #0
	bl sub_8089F40
	adds r0, r4, #0
	bl sub_8089704
	ldr r2, _08087FCC @ =gBldRegs
	ldrh r0, [r2, #4]
	cmp r0, #0xf
	bhi _08087FD8
	ldr r3, _08087FD4 @ =0x03000070
	adds r0, r5, r3
	ldrh r1, [r0]
	lsrs r1, r1, #8
	strh r1, [r2, #4]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r2, #0
	ldrh r3, [r0]
	adds r1, r1, r3
	strh r1, [r0]
	b _0808807E
	.align 2, 0
_08087FC0: .4byte gCurTask
_08087FC4: .4byte gDispCnt
_08087FC8: .4byte gWinRegs
_08087FCC: .4byte gBldRegs
_08087FD0: .4byte 0x00003FFF
_08087FD4: .4byte 0x03000070
_08087FD8:
	movs r0, #0x10
	strh r0, [r2, #4]
	movs r1, #0x10
	ldrsh r0, [r4, r1]
	cmp r0, #4
	bhi _08088076
	lsls r0, r0, #2
	ldr r1, _08087FF0 @ =_08087FF4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08087FF0: .4byte _08087FF4
_08087FF4: @ jump table
	.4byte _08088008 @ case 0
	.4byte _0808802C @ case 1
	.4byte _08088040 @ case 2
	.4byte _08088068 @ case 3
	.4byte _08088070 @ case 4
_08088008:
	bl sub_80003B8
	ldr r4, _08088028 @ =gStageData
	ldrb r1, [r4, #9]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	ldrb r2, [r4, #0xa]
	adds r0, r0, r2
	movs r1, #0
	bl sub_8002210
	movs r0, #0
	strb r0, [r4, #1]
	b _0808807E
	.align 2, 0
_08088028: .4byte gStageData
_0808802C:
	ldr r1, _0808803C @ =gStageData
	movs r0, #0
	strb r0, [r1, #6]
	movs r0, #3
	bl sub_8097C54
	b _08088076
	.align 2, 0
_0808803C: .4byte gStageData
_08088040:
	ldr r0, _08088054 @ =gStageData
	ldrb r0, [r0, #3]
	cmp r0, #3
	bne _08088058
	bl sub_80003B8
	movs r0, #3
	bl sub_80961E4
	b _08088076
	.align 2, 0
_08088054: .4byte gStageData
_08088058:
	cmp r0, #4
	bne _08088068
	bl sub_80003B8
	movs r0, #4
	bl sub_80961E4
	b _08088076
_08088068:
	movs r0, #1
	bl sub_808A25C
	b _08088076
_08088070:
	movs r0, #1
	bl sub_808A25C
_08088076:
	ldr r0, _08088084 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
_0808807E:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08088084: .4byte gCurTask

	thumb_func_start sub_8088088
sub_8088088: @ 0x08088088
	push {r4, r5, r6, lr}
	ldr r6, _08088104 @ =gCurTask
	ldr r0, [r6]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	adds r0, r4, #0
	bl sub_8089028
	adds r0, r4, #0
	bl sub_80890F8
	adds r0, r4, #0
	bl sub_8088FD4
	adds r0, r4, #0
	bl sub_8089EF8
	adds r0, r4, #0
	bl sub_8089150
	adds r0, r4, #0
	bl sub_80891E4
	adds r0, r4, #0
	bl sub_8089398
	adds r0, r4, #0
	bl sub_80894BC
	adds r0, r4, #0
	bl sub_8089308
	adds r0, r4, #0
	bl sub_8089428
	adds r0, r4, #0
	bl sub_8089F40
	adds r0, r4, #0
	bl sub_8089F08
	adds r0, r4, #0
	bl sub_8089704
	adds r0, r4, #0
	bl sub_8089DF4
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #4
	bne _08088192
	ldrb r0, [r4, #1]
	subs r0, #2
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _0808810C
	ldr r1, [r6]
	ldr r0, _08088108 @ =sub_8087F18
	b _08088190
	.align 2, 0
_08088104: .4byte gCurTask
_08088108: .4byte sub_8087F18
_0808810C:
	movs r1, #0x10
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bne _08088134
	strb r0, [r4, #4]
	ldr r2, _0808812C @ =0x03000068
	adds r0, r5, r2
	movs r1, #0x80
	lsls r1, r1, #1
	strh r1, [r0]
	adds r2, #2
	adds r0, r5, r2
	strh r1, [r0]
	ldr r1, [r6]
	ldr r0, _08088130 @ =sub_8088E74
	b _08088190
	.align 2, 0
_0808812C: .4byte 0x03000068
_08088130: .4byte sub_8088E74
_08088134:
	cmp r0, #1
	bne _08088160
	movs r0, #0
	strb r0, [r4, #4]
	ldr r1, _08088154 @ =0x03000068
	adds r0, r5, r1
	movs r1, #0x80
	lsls r1, r1, #1
	strh r1, [r0]
	ldr r2, _08088158 @ =0x0300006A
	adds r0, r5, r2
	strh r1, [r0]
	ldr r1, [r6]
	ldr r0, _0808815C @ =sub_80897BC
	b _08088190
	.align 2, 0
_08088154: .4byte 0x03000068
_08088158: .4byte 0x0300006A
_0808815C: .4byte sub_80897BC
_08088160:
	cmp r0, #2
	bne _0808818C
	movs r0, #0
	strb r0, [r4, #4]
	ldr r1, _08088180 @ =0x03000068
	adds r0, r5, r1
	movs r1, #0x80
	lsls r1, r1, #1
	strh r1, [r0]
	ldr r2, _08088184 @ =0x0300006A
	adds r0, r5, r2
	strh r1, [r0]
	ldr r1, [r6]
	ldr r0, _08088188 @ =sub_8089970
	b _08088190
	.align 2, 0
_08088180: .4byte 0x03000068
_08088184: .4byte 0x0300006A
_08088188: .4byte sub_8089970
_0808818C:
	ldr r1, [r6]
	ldr r0, _08088198 @ =sub_8087C74
_08088190:
	str r0, [r1, #8]
_08088192:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08088198: .4byte sub_8087C74

	thumb_func_start sub_808819C
sub_808819C: @ 0x0808819C
	push {r4, r5, r6, lr}
	ldr r6, _08088250 @ =gCurTask
	ldr r0, [r6]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	adds r0, r4, #0
	bl sub_8088FD4
	adds r0, r4, #0
	bl sub_8089EF8
	adds r0, r4, #0
	bl sub_8089150
	adds r0, r4, #0
	bl sub_80891E4
	adds r0, r4, #0
	bl sub_8089398
	adds r0, r4, #0
	bl sub_80894BC
	adds r0, r4, #0
	bl sub_8089308
	adds r0, r4, #0
	bl sub_8089428
	adds r0, r4, #0
	bl sub_8089F40
	adds r0, r4, #0
	bl sub_8089F08
	adds r0, r4, #0
	bl sub_8089704
	movs r1, #0x14
	ldrsh r0, [r4, r1]
	cmp r0, #4
	beq _0808826C
	ldr r0, _08088254 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0808826C
	ldr r0, _08088258 @ =gSaveGame
	adds r0, #0x33
	ldrb r1, [r0]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq _0808826C
	movs r2, #0x10
	ldrsh r0, [r4, r2]
	cmp r0, #3
	bne _0808826C
	ldr r3, _0808825C @ =0x03000178
	adds r2, r5, r3
	ldr r1, _08088260 @ =gUnknown_080D6234
	ldrb r0, [r4]
	lsls r0, r0, #4
	adds r1, r0, r1
	ldrh r0, [r2]
	ldrh r2, [r1]
	cmp r0, r2
	bne _0808826C
	adds r3, #0xe
	adds r0, r5, r3
	ldrb r0, [r0]
	ldrb r1, [r1, #2]
	cmp r0, r1
	bne _0808826C
	movs r0, #0x6c
	bl m4aSongNumStart
	movs r0, #0xb
	strh r0, [r4, #0x10]
	ldr r0, _08088264 @ =0x0300006E
	adds r1, r5, r0
	movs r0, #1
	strh r0, [r1]
	ldr r1, [r6]
	ldr r0, _08088268 @ =sub_8087C74
	str r0, [r1, #8]
	b _08088438
	.align 2, 0
_08088250: .4byte gCurTask
_08088254: .4byte gPressedKeys
_08088258: .4byte gSaveGame
_0808825C: .4byte 0x03000178
_08088260: .4byte gUnknown_080D6234
_08088264: .4byte 0x0300006E
_08088268: .4byte sub_8087C74
_0808826C:
	ldrb r0, [r4, #1]
	subs r0, #2
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bls _08088344
	adds r0, r4, #0
	bl sub_808927C
	adds r5, r0, #0
	cmp r5, #1
	bne _08088306
	adds r0, r4, #0
	bl sub_8089670
	movs r2, #0x14
	ldrsh r1, [r4, r2]
	cmp r1, #0xa
	bne _080882A6
	movs r0, #0
	strb r0, [r4, #4]
	adds r0, r4, #0
	adds r0, #0x68
	strh r5, [r0]
	strh r1, [r4, #0x10]
	ldrh r0, [r4, #0x14]
	adds r0, #1
	strh r0, [r4, #0x14]
	b _08088306
_080882A6:
	ldr r0, _08088340 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _080882D6
	movs r3, #0x10
	ldrsh r0, [r4, r3]
	cmp r0, #0
	bne _080882D6
	movs r0, #0x6c
	bl m4aSongNumStart
	movs r1, #0
	movs r0, #0xa
	strh r0, [r4, #0x10]
	strb r1, [r4, #4]
	adds r0, r4, #0
	adds r0, #0x68
	movs r1, #0x80
	lsls r1, r1, #1
	strh r1, [r0]
	adds r0, #2
	strh r1, [r0]
_080882D6:
	ldr r0, _08088340 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _08088306
	movs r1, #0x10
	ldrsh r0, [r4, r1]
	cmp r0, #0xa
	bne _08088306
	movs r0, #0x6c
	bl m4aSongNumStart
	movs r1, #0
	movs r0, #0
	strh r0, [r4, #0x10]
	strb r1, [r4, #4]
	adds r0, r4, #0
	adds r0, #0x68
	movs r1, #0x80
	lsls r1, r1, #1
	strh r1, [r0]
	adds r0, #2
	strh r1, [r0]
_08088306:
	ldrb r0, [r4, #1]
	subs r0, #2
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bls _08088344
	ldr r0, _08088340 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08088344
	movs r0, #0x6b
	bl m4aSongNumStart
	movs r0, #0
	strh r0, [r4, #0x12]
	adds r1, r4, #0
	adds r1, #0x6e
	movs r0, #1
	strh r0, [r1]
	movs r0, #4
	strh r0, [r4, #0x10]
	movs r0, #3
	strb r0, [r4, #6]
	movs r0, #2
	strb r0, [r4, #0xb]
	b _0808835E
	.align 2, 0
_08088340: .4byte gPressedKeys
_08088344:
	ldr r0, _08088368 @ =gPressedKeys
	ldrh r1, [r0]
	movs r5, #1
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq _08088374
	movs r0, #0x6a
	bl m4aSongNumStart
	adds r0, r4, #0
	adds r0, #0x6e
	strh r5, [r0]
_0808835E:
	ldr r0, _0808836C @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08088370 @ =sub_8088088
	str r0, [r1, #8]
	b _08088438
	.align 2, 0
_08088368: .4byte gPressedKeys
_0808836C: .4byte gCurTask
_08088370: .4byte sub_8088088
_08088374:
	movs r2, #0x10
	ldrsh r0, [r4, r2]
	cmp r0, #9
	bgt _08088418
	ldr r5, _080883AC @ =gRepeatedKeys
	ldrh r1, [r5]
	movs r0, #0xc0
	ands r0, r1
	cmp r0, #0
	beq _08088418
	movs r0, #0x6c
	bl m4aSongNumStart
	ldrh r1, [r5]
	movs r0, #0x40
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0
	beq _080883B4
	ldrh r1, [r4, #0x10]
	movs r3, #0x10
	ldrsh r0, [r4, r3]
	cmp r0, #0
	bgt _080883B0
	movs r0, #3
	b _080883CC
	.align 2, 0
_080883AC: .4byte gRepeatedKeys
_080883B0:
	subs r0, r1, #1
	b _080883CC
_080883B4:
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _080883CE
	ldrh r1, [r4, #0x10]
	movs r3, #0x10
	ldrsh r0, [r4, r3]
	cmp r0, #2
	ble _080883CA
	strh r2, [r4, #0x10]
	b _080883CE
_080883CA:
	adds r0, r1, #1
_080883CC:
	strh r0, [r4, #0x10]
_080883CE:
	adds r0, r4, #0
	adds r0, #0x68
	movs r2, #0
	movs r1, #0x80
	lsls r1, r1, #1
	strh r1, [r0]
	adds r0, #2
	strh r1, [r0]
	ldr r3, _0808842C @ =0x00000326
	adds r0, r4, r3
	strh r1, [r0]
	adds r3, #2
	adds r0, r4, r3
	strh r1, [r0]
	strb r2, [r4, #2]
	movs r0, #0x40
	strb r0, [r4, #4]
	ldrb r0, [r4, #1]
	subs r0, #2
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bls _08088418
	movs r1, #0xdc
	lsls r1, r1, #2
	adds r0, r4, r1
	ldr r2, _08088430 @ =gUnknown_080D66C4
	movs r3, #0x10
	ldrsh r1, [r4, r3]
	lsls r1, r1, #1
	adds r1, r1, r2
	ldrh r1, [r1]
	strh r1, [r0, #0x1c]
	movs r1, #6
	strh r1, [r0, #0x2e]
	bl DrawBackground
_08088418:
	adds r0, r4, #0
	bl sub_80890F8
	ldrh r1, [r4, #0x10]
	movs r2, #0x10
	ldrsh r0, [r4, r2]
	cmp r0, #9
	bgt _08088434
	strb r1, [r4, #0xb]
	b _08088438
	.align 2, 0
_0808842C: .4byte 0x00000326
_08088430: .4byte gUnknown_080D66C4
_08088434:
	movs r0, #0
	strb r0, [r4, #0xb]
_08088438:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8088440
sub_8088440: @ 0x08088440
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	ldr r0, _080885B4 @ =gCurTask
	ldr r0, [r0]
	ldrh r2, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r2, r0
	movs r5, #0
	ldr r6, [r4, #0x7c]
	movs r0, #0xaa
	lsls r0, r0, #8
	str r0, [r4, #0x38]
	str r0, [r4, #0x40]
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [r4, #0x58]
	movs r1, #1
	strb r1, [r4, #6]
	ldr r0, _080885B8 @ =0x03000074
	adds r2, r2, r0
	movs r0, #0xc0
	lsls r0, r0, #1
	strh r0, [r2]
	strb r1, [r4, #3]
	ldrh r0, [r4, #0x10]
	strb r0, [r4, #0xc]
	strh r1, [r4, #0x10]
	strb r0, [r4, #0xd]
	movs r0, #0xc8
	lsls r0, r0, #7
	str r0, [r4, #0x3c]
	movs r0, #0x82
	lsls r0, r0, #8
	str r0, [r4, #0x44]
	ldr r2, _080885BC @ =gUnknown_080D6594
	movs r1, #0
	mov r8, r1
	movs r7, #0
_08088494:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	movs r1, #0xde
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r1, r4, r0
	str r6, [r1]
	movs r0, #0x80
	lsls r0, r0, #4
	adds r6, r6, r0
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r1, #0xc]
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrb r0, [r0, #2]
	strb r0, [r1, #0x1a]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	ldr r0, [r4, #0x38]
	asrs r0, r0, #8
	strh r0, [r1, #0x10]
	ldr r0, [r4, #0x3c]
	asrs r0, r0, #8
	strh r0, [r1, #0x12]
	movs r0, #0xc0
	strh r0, [r1, #0x14]
	strh r7, [r1, #0xe]
	strh r7, [r1, #0x16]
	movs r0, #0x10
	strb r0, [r1, #0x1c]
	mov r0, r8
	strb r0, [r1, #0x1f]
	str r7, [r1, #8]
	adds r0, r1, #0
	str r2, [sp, #4]
	bl UpdateSpriteAnimation
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	ldr r2, [sp, #4]
	cmp r5, #1
	bls _08088494
	movs r5, #0
	movs r1, #0xd
	adds r1, r1, r4
	mov r8, r1
	ldr r2, _080885C0 @ =gUnknown_080D65F4
	movs r0, #0
	mov sb, r0
	movs r7, #0
_0808850C:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	movs r1, #0x83
	lsls r1, r1, #2
	adds r0, r0, r1
	adds r1, r4, r0
	str r6, [r1]
	movs r0, #0x80
	lsls r0, r0, #4
	adds r6, r6, r0
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r1, #0xc]
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrb r0, [r0, #2]
	strb r0, [r1, #0x1a]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	ldr r0, [r4, #0x40]
	asrs r0, r0, #8
	strh r0, [r1, #0x10]
	ldr r0, [r4, #0x44]
	asrs r0, r0, #8
	strh r0, [r1, #0x12]
	movs r0, #0xc0
	strh r0, [r1, #0x14]
	strh r7, [r1, #0xe]
	strh r7, [r1, #0x16]
	movs r0, #0x10
	strb r0, [r1, #0x1c]
	mov r0, sb
	strb r0, [r1, #0x1f]
	str r7, [r1, #8]
	adds r0, r1, #0
	str r2, [sp, #4]
	bl UpdateSpriteAnimation
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	ldr r2, [sp, #4]
	cmp r5, #1
	bls _0808850C
	movs r0, #0x26
	str r0, [sp]
	movs r0, #0
	mov r1, r8
	adds r2, r6, #0
	movs r3, #0x64
	bl sub_808A1B0
	movs r0, #2
	strb r0, [r4, #0xb]
	movs r1, #0xdc
	lsls r1, r1, #2
	adds r0, r4, r1
	ldr r1, _080885C4 @ =gUnknown_080D66C4
	ldrh r1, [r1, #2]
	strh r1, [r0, #0x1c]
	movs r1, #6
	strh r1, [r0, #0x2e]
	bl DrawBackground
	ldr r0, _080885B4 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080885C8 @ =sub_80888E8
	str r0, [r1, #8]
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080885B4: .4byte gCurTask
_080885B8: .4byte 0x03000074
_080885BC: .4byte gUnknown_080D6594
_080885C0: .4byte gUnknown_080D65F4
_080885C4: .4byte gUnknown_080D66C4
_080885C8: .4byte sub_80888E8

	thumb_func_start sub_80885CC
sub_80885CC: @ 0x080885CC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	ldr r0, _08088650 @ =gCurTask
	ldr r0, [r0]
	ldrh r2, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r2, r0
	movs r6, #0
	ldrb r1, [r4]
	rsbs r0, r1, #0
	orrs r0, r1
	lsrs r0, r0, #0x1f
	mov r8, r0
	ldr r5, [r4, #0x7c]
	movs r0, #0xaa
	lsls r0, r0, #8
	str r0, [r4, #0x38]
	str r0, [r4, #0x40]
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [r4, #0x58]
	movs r1, #1
	strb r1, [r4, #6]
	ldr r0, _08088654 @ =0x03000074
	adds r2, r2, r0
	movs r0, #0xc0
	lsls r0, r0, #1
	strh r0, [r2]
	strb r1, [r4, #3]
	ldrh r0, [r4, #0x10]
	strb r0, [r4, #0xc]
	movs r0, #2
	strh r0, [r4, #0x10]
	movs r0, #0xc8
	lsls r0, r0, #7
	str r0, [r4, #0x3c]
	movs r0, #0x82
	lsls r0, r0, #8
	str r0, [r4, #0x44]
	ldr r1, _08088658 @ =gUnknown_080D6654
	mov sl, r1
	movs r0, #0
	mov sb, r0
	movs r7, #0
	mov r1, r8
	lsls r1, r1, #1
	str r1, [sp, #4]
_08088634:
	lsls r0, r6, #2
	adds r0, r0, r6
	lsls r0, r0, #3
	movs r1, #0xde
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r2, r4, r0
	str r5, [r2]
	cmp r6, #0
	bne _0808865C
	movs r0, #0x80
	lsls r0, r0, #4
	adds r5, r5, r0
	b _08088662
	.align 2, 0
_08088650: .4byte gCurTask
_08088654: .4byte 0x03000074
_08088658: .4byte gUnknown_080D6654
_0808865C:
	movs r1, #0x80
	lsls r1, r1, #4
	adds r5, r5, r1
_08088662:
	mov r1, r8
	lsls r0, r1, #1
	adds r0, r6, r0
	lsls r0, r0, #3
	add r0, sl
	ldrh r1, [r0]
	strh r1, [r2, #0xc]
	ldrb r0, [r0, #2]
	strb r0, [r2, #0x1a]
	movs r0, #0xff
	strb r0, [r2, #0x1b]
	ldr r0, [r4, #0x38]
	asrs r0, r0, #8
	strh r0, [r2, #0x10]
	ldr r0, [r4, #0x3c]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	movs r0, #0xc0
	strh r0, [r2, #0x14]
	strh r7, [r2, #0xe]
	strh r7, [r2, #0x16]
	movs r0, #0x10
	strb r0, [r2, #0x1c]
	mov r0, sb
	strb r0, [r2, #0x1f]
	str r7, [r2, #8]
	adds r0, r2, #0
	bl UpdateSpriteAnimation
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #1
	bls _08088634
	movs r6, #0
	movs r1, #0xd
	adds r1, r1, r4
	mov r8, r1
	ldr r0, _080886D4 @ =gUnknown_080D6674
	mov sl, r0
	movs r1, #0
	mov sb, r1
	movs r7, #0
_080886B8:
	lsls r0, r6, #2
	adds r0, r0, r6
	lsls r0, r0, #3
	movs r1, #0x83
	lsls r1, r1, #2
	adds r0, r0, r1
	adds r2, r4, r0
	str r5, [r2]
	cmp r6, #0
	bne _080886D8
	movs r0, #0x80
	lsls r0, r0, #4
	adds r5, r5, r0
	b _080886DE
	.align 2, 0
_080886D4: .4byte gUnknown_080D6674
_080886D8:
	movs r1, #0x80
	lsls r1, r1, #4
	adds r5, r5, r1
_080886DE:
	ldr r1, [sp, #4]
	adds r0, r6, r1
	lsls r0, r0, #3
	add r0, sl
	ldrh r1, [r0]
	strh r1, [r2, #0xc]
	ldrb r0, [r0, #2]
	strb r0, [r2, #0x1a]
	movs r0, #0xff
	strb r0, [r2, #0x1b]
	ldr r0, [r4, #0x40]
	asrs r0, r0, #8
	strh r0, [r2, #0x10]
	ldr r0, [r4, #0x44]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	movs r0, #0xc0
	strh r0, [r2, #0x14]
	strh r7, [r2, #0xe]
	strh r7, [r2, #0x16]
	movs r0, #0x10
	strb r0, [r2, #0x1c]
	mov r0, sb
	strb r0, [r2, #0x1f]
	str r7, [r2, #8]
	adds r0, r2, #0
	bl UpdateSpriteAnimation
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #1
	bls _080886B8
	movs r0, #0
	strb r0, [r4, #0xd]
	movs r0, #0x22
	str r0, [sp]
	movs r0, #1
	mov r1, r8
	adds r2, r5, #0
	movs r3, #0x58
	bl sub_808A1B0
	movs r0, #2
	strb r0, [r4, #0xb]
	movs r1, #0xdc
	lsls r1, r1, #2
	adds r0, r4, r1
	ldr r1, _08088764 @ =gUnknown_080D66C4
	ldrh r1, [r1, #4]
	strh r1, [r0, #0x1c]
	movs r1, #6
	strh r1, [r0, #0x2e]
	bl DrawBackground
	ldr r0, _08088768 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808876C @ =sub_80888E8
	str r0, [r1, #8]
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08088764: .4byte gUnknown_080D66C4
_08088768: .4byte gCurTask
_0808876C: .4byte sub_80888E8

	thumb_func_start sub_8088770
sub_8088770: @ 0x08088770
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	ldr r0, _080888D0 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	movs r5, #0
	ldr r6, [r4, #0x7c]
	movs r0, #0xaa
	lsls r0, r0, #8
	str r0, [r4, #0x38]
	str r0, [r4, #0x40]
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [r4, #0x58]
	movs r2, #1
	strb r2, [r4, #6]
	ldr r0, _080888D4 @ =0x03000074
	adds r1, r1, r0
	movs r0, #0xc0
	lsls r0, r0, #1
	strh r0, [r1]
	strb r2, [r4, #3]
	ldrh r0, [r4, #0x10]
	strb r0, [r4, #0xc]
	adds r0, #1
	strb r0, [r4, #0xb]
	strh r5, [r4, #0x10]
	ldr r0, [r4, #0x1c]
	movs r1, #0xd0
	lsls r1, r1, #5
	adds r0, r0, r1
	str r0, [r4, #0x3c]
	ldr r0, [r4, #0x2c]
	movs r1, #0xc0
	lsls r1, r1, #3
	adds r0, r0, r1
	str r0, [r4, #0x44]
	ldr r2, _080888D8 @ =gUnknown_080D6294
	movs r0, #0
	mov r8, r0
	movs r7, #0
_080887CC:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	movs r1, #0xde
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r1, r4, r0
	str r6, [r1]
	movs r0, #0x80
	lsls r0, r0, #4
	adds r6, r6, r0
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r1, #0xc]
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrb r0, [r0, #2]
	strb r0, [r1, #0x1a]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	ldr r0, [r4, #0x38]
	asrs r0, r0, #8
	strh r0, [r1, #0x10]
	ldr r0, [r4, #0x3c]
	asrs r0, r0, #8
	strh r0, [r1, #0x12]
	movs r0, #0xc0
	strh r0, [r1, #0x14]
	strh r7, [r1, #0xe]
	strh r7, [r1, #0x16]
	movs r0, #0x10
	strb r0, [r1, #0x1c]
	mov r0, r8
	strb r0, [r1, #0x1f]
	str r7, [r1, #8]
	adds r0, r1, #0
	str r2, [sp]
	bl UpdateSpriteAnimation
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	ldr r2, [sp]
	cmp r5, #1
	bls _080887CC
	movs r5, #0
	ldr r2, _080888DC @ =gUnknown_080D62F4
	movs r1, #0
	mov r8, r1
	movs r7, #0
_0808883E:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	movs r1, #0x83
	lsls r1, r1, #2
	adds r0, r0, r1
	adds r1, r4, r0
	str r6, [r1]
	movs r0, #0x80
	lsls r0, r0, #4
	adds r6, r6, r0
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r1, #0xc]
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrb r0, [r0, #2]
	strb r0, [r1, #0x1a]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	ldr r0, [r4, #0x40]
	asrs r0, r0, #8
	strh r0, [r1, #0x10]
	ldr r0, [r4, #0x44]
	asrs r0, r0, #8
	strh r0, [r1, #0x12]
	movs r0, #0xc0
	strh r0, [r1, #0x14]
	strh r7, [r1, #0xe]
	strh r7, [r1, #0x16]
	movs r0, #0x10
	strb r0, [r1, #0x1c]
	mov r0, r8
	strb r0, [r1, #0x1f]
	str r7, [r1, #8]
	adds r0, r1, #0
	str r2, [sp]
	bl UpdateSpriteAnimation
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	ldr r2, [sp]
	cmp r5, #1
	bls _0808883E
	movs r1, #0xdc
	lsls r1, r1, #2
	adds r0, r4, r1
	ldr r1, _080888E0 @ =gUnknown_080D66C4
	ldrh r1, [r1]
	strh r1, [r0, #0x1c]
	movs r1, #6
	strh r1, [r0, #0x2e]
	bl DrawBackground
	ldr r0, _080888D0 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080888E4 @ =sub_80888E8
	str r0, [r1, #8]
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080888D0: .4byte gCurTask
_080888D4: .4byte 0x03000074
_080888D8: .4byte gUnknown_080D6294
_080888DC: .4byte gUnknown_080D62F4
_080888E0: .4byte gUnknown_080D66C4
_080888E4: .4byte sub_80888E8

	thumb_func_start sub_80888E8
sub_80888E8: @ 0x080888E8
	push {r4, r5, r6, r7, lr}
	ldr r7, _0808899C @ =gCurTask
	ldr r0, [r7]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	adds r0, #0x6e
	adds r6, r5, r0
	ldrh r0, [r6]
	cmp r0, #0
	beq _08088940
	ldr r2, _080889A0 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080889A4 @ =gWinRegs
	movs r3, #0
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	ldrh r2, [r1, #8]
	movs r0, #0x3f
	orrs r0, r2
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	orrs r0, r2
	strh r0, [r1, #0xa]
	ldr r1, _080889A8 @ =gBldRegs
	ldr r0, _080889AC @ =0x00003FFF
	strh r0, [r1]
	movs r0, #0x10
	strh r0, [r1, #4]
	ldr r0, _080889B0 @ =0x03000070
	adds r1, r5, r0
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r1]
	strh r3, [r6]
_08088940:
	adds r0, r4, #0
	bl sub_8089150
	adds r0, r4, #0
	bl sub_80891E4
	adds r0, r4, #0
	bl sub_80890F8
	adds r0, r4, #0
	bl sub_8088FD4
	adds r0, r4, #0
	bl sub_8089EF8
	adds r0, r4, #0
	bl sub_80895E0
	adds r0, r4, #0
	bl sub_8089550
	adds r0, r4, #0
	bl sub_8089F08
	adds r0, r4, #0
	bl sub_8089F40
	adds r0, r4, #0
	bl sub_8089704
	ldr r2, _080889A8 @ =gBldRegs
	ldrh r0, [r2, #4]
	cmp r0, #0
	beq _080889B8
	ldr r1, _080889B0 @ =0x03000070
	adds r0, r5, r1
	ldrh r1, [r0]
	lsrs r1, r1, #8
	strh r1, [r2, #4]
	ldr r2, _080889B4 @ =0xFFFFFF00
	adds r1, r2, #0
	ldrh r3, [r0]
	adds r1, r1, r3
	strh r1, [r0]
	b _080889C0
	.align 2, 0
_0808899C: .4byte gCurTask
_080889A0: .4byte gDispCnt
_080889A4: .4byte gWinRegs
_080889A8: .4byte gBldRegs
_080889AC: .4byte 0x00003FFF
_080889B0: .4byte 0x03000070
_080889B4: .4byte 0xFFFFFF00
_080889B8:
	strh r0, [r2, #4]
	ldr r1, [r7]
	ldr r0, _080889C8 @ =sub_80889CC
	str r0, [r1, #8]
_080889C0:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080889C8: .4byte sub_80889CC

	thumb_func_start sub_80889CC
sub_80889CC: @ 0x080889CC
	push {r4, r5, r6, r7, lr}
	ldr r7, _08088A44 @ =gCurTask
	ldr r0, [r7]
	ldrh r6, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r6, r0
	adds r0, r4, #0
	bl sub_8088FD4
	adds r0, r4, #0
	bl sub_8089EF8
	adds r0, r4, #0
	bl sub_8089150
	adds r0, r4, #0
	bl sub_80891E4
	adds r0, r4, #0
	bl sub_80895E0
	adds r0, r4, #0
	bl sub_8089550
	adds r0, r4, #0
	bl sub_8089F40
	adds r0, r4, #0
	bl sub_8089F08
	adds r0, r4, #0
	bl sub_8089704
	ldr r0, _08088A48 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #2
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq _08088A54
	movs r0, #0x6b
	bl m4aSongNumStart
	movs r2, #0
	movs r0, #0
	strh r0, [r4, #0x12]
	ldr r0, _08088A4C @ =0x0300006E
	adds r1, r6, r0
	movs r0, #1
	strh r0, [r1]
	movs r0, #2
	strb r0, [r4, #6]
	strb r2, [r4, #0xc]
	movs r0, #0xb
	strb r0, [r4, #0xd]
	ldr r1, [r7]
	ldr r0, _08088A50 @ =sub_8088B48
	b _08088B36
	.align 2, 0
_08088A44: .4byte gCurTask
_08088A48: .4byte gPressedKeys
_08088A4C: .4byte 0x0300006E
_08088A50: .4byte sub_8088B48
_08088A54:
	ldr r0, _08088A70 @ =gRepeatedKeys
	ldrh r1, [r0]
	movs r0, #0xc0
	ands r0, r1
	cmp r0, #0
	beq _08088AD0
	movs r0, #0x6c
	bl m4aSongNumStart
	ldrb r0, [r4, #0xc]
	cmp r0, #1
	bne _08088A74
	strb r5, [r4, #0xc]
	b _08088A78
	.align 2, 0
_08088A70: .4byte gRepeatedKeys
_08088A74:
	movs r0, #1
	strb r0, [r4, #0xc]
_08088A78:
	movs r3, #0x10
	ldrsh r1, [r4, r3]
	cmp r1, #0
	bne _08088A88
	ldrb r0, [r4, #0xc]
	adds r0, #1
	strb r0, [r4, #0xb]
	b _08088AAE
_08088A88:
	cmp r1, #1
	bne _08088A96
	ldrb r1, [r4, #0xc]
	adds r0, r1, #2
	strb r0, [r4, #0xb]
	strb r1, [r4, #0xd]
	b _08088AAE
_08088A96:
	cmp r1, #2
	bne _08088AAE
	ldrb r2, [r4, #0xc]
	adds r0, r2, #2
	strb r0, [r4, #0xb]
	ldr r0, _08088B08 @ =gSaveGame
	adds r0, #0x33
	ldrb r0, [r0]
	ands r1, r0
	cmp r1, #0
	bne _08088AAE
	strb r2, [r4, #0xd]
_08088AAE:
	adds r0, r4, #0
	adds r0, #0x68
	movs r2, #0
	movs r1, #0x80
	lsls r1, r1, #1
	strh r1, [r0]
	adds r0, #2
	strh r1, [r0]
	ldr r3, _08088B0C @ =0x00000326
	adds r0, r4, r3
	strh r1, [r0]
	adds r3, #2
	adds r0, r4, r3
	strh r1, [r0]
	strb r2, [r4, #2]
	movs r0, #0x40
	strb r0, [r4, #4]
_08088AD0:
	adds r0, r4, #0
	bl sub_80890F8
	ldr r0, _08088B10 @ =gPressedKeys
	ldrh r1, [r0]
	movs r5, #1
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq _08088B38
	movs r0, #0x10
	ldrsh r1, [r4, r0]
	cmp r1, #2
	bne _08088B24
	ldr r0, _08088B08 @ =gSaveGame
	adds r0, #0x33
	ldrb r0, [r0]
	ands r1, r0
	cmp r1, #0
	bne _08088B14
	ldrb r0, [r4, #0xc]
	cmp r0, #1
	bne _08088B14
	movs r0, #0x69
	bl m4aSongNumStart
	b _08088B38
	.align 2, 0
_08088B08: .4byte gSaveGame
_08088B0C: .4byte 0x00000326
_08088B10: .4byte gPressedKeys
_08088B14:
	movs r0, #0x6a
	bl m4aSongNumStart
	adds r1, r4, #0
	adds r1, #0x6e
	movs r0, #1
	strh r0, [r1]
	b _08088B30
_08088B24:
	movs r0, #0x6a
	bl m4aSongNumStart
	adds r0, r4, #0
	adds r0, #0x6e
	strh r5, [r0]
_08088B30:
	ldr r0, _08088B40 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08088B44 @ =sub_808A144
_08088B36:
	str r0, [r1, #8]
_08088B38:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08088B40: .4byte gCurTask
_08088B44: .4byte sub_808A144

	thumb_func_start sub_8088B48
sub_8088B48: @ 0x08088B48
	push {r4, r5, r6, lr}
	ldr r6, _08088BC0 @ =gCurTask
	ldr r0, [r6]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	adds r0, r4, #0
	bl sub_80890F8
	adds r0, r4, #0
	bl sub_8088FD4
	adds r0, r4, #0
	bl sub_8089EF8
	adds r0, r4, #0
	bl sub_8089150
	adds r0, r4, #0
	bl sub_80891E4
	adds r0, r4, #0
	bl sub_80895E0
	adds r0, r4, #0
	bl sub_8089550
	adds r0, r4, #0
	bl sub_8089F40
	adds r0, r4, #0
	bl sub_8089F08
	adds r0, r4, #0
	bl sub_8089704
	adds r0, r4, #0
	bl sub_8089EA0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #2
	bne _08088BBA
	movs r0, #0
	strb r0, [r4, #4]
	ldr r1, _08088BC4 @ =0x03000068
	adds r0, r5, r1
	movs r1, #0x80
	lsls r1, r1, #1
	strh r1, [r0]
	ldr r2, _08088BC8 @ =0x0300006A
	adds r0, r5, r2
	strh r1, [r0]
	ldr r1, [r6]
	ldr r0, _08088BCC @ =sub_8088BD0
	str r0, [r1, #8]
_08088BBA:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08088BC0: .4byte gCurTask
_08088BC4: .4byte 0x03000068
_08088BC8: .4byte 0x0300006A
_08088BCC: .4byte sub_8088BD0

	thumb_func_start sub_8088BD0
sub_8088BD0: @ 0x08088BD0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	ldr r0, _08088E58 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	movs r5, #0
	adds r0, r4, #0
	bl sub_8088FD4
	adds r0, r4, #0
	bl sub_8089EF8
	adds r0, r4, #0
	bl sub_8089150
	adds r0, r4, #0
	bl sub_80891E4
	adds r0, r4, #0
	bl sub_8089F40
	adds r0, r4, #0
	bl sub_8089F08
	adds r0, r4, #0
	bl sub_8089704
	ldr r6, [r4, #0x7c]
	ldr r2, _08088E5C @ =gUnknown_080D6114
	movs r0, #0
	mov r8, r0
	movs r7, #0
_08088C1A:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	adds r0, #0x7c
	adds r1, r4, r0
	str r6, [r1]
	movs r0, #0x80
	lsls r0, r0, #4
	adds r6, r6, r0
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r1, #0xc]
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrb r0, [r0, #2]
	strb r0, [r1, #0x1a]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	ldr r0, [r4, #0x18]
	asrs r0, r0, #8
	strh r0, [r1, #0x10]
	ldr r0, [r4, #0x1c]
	asrs r0, r0, #8
	strh r0, [r1, #0x12]
	strh r7, [r1, #0x14]
	strh r7, [r1, #0xe]
	strh r7, [r1, #0x16]
	movs r0, #0x10
	strb r0, [r1, #0x1c]
	mov r0, r8
	strb r0, [r1, #0x1f]
	movs r0, #0x20
	str r0, [r1, #8]
	adds r0, r1, #0
	str r2, [sp]
	bl UpdateSpriteAnimation
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	ldr r2, [sp]
	cmp r5, #1
	bls _08088C1A
	movs r5, #0
	ldr r2, _08088E60 @ =gUnknown_080D6174
	movs r1, #0
	mov r8, r1
	movs r7, #0
_08088C88:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	adds r0, #0xcc
	adds r1, r4, r0
	str r6, [r1]
	movs r0, #0x80
	lsls r0, r0, #4
	adds r6, r6, r0
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r1, #0xc]
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrb r0, [r0, #2]
	strb r0, [r1, #0x1a]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	ldr r0, [r4, #0x20]
	asrs r0, r0, #8
	strh r0, [r1, #0x10]
	ldr r0, [r4, #0x24]
	asrs r0, r0, #8
	strh r0, [r1, #0x12]
	movs r0, #0x40
	strh r0, [r1, #0x14]
	strh r7, [r1, #0xe]
	strh r7, [r1, #0x16]
	movs r0, #0x10
	strb r0, [r1, #0x1c]
	mov r0, r8
	strb r0, [r1, #0x1f]
	str r7, [r1, #8]
	adds r0, r1, #0
	str r2, [sp]
	bl UpdateSpriteAnimation
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	ldr r2, [sp]
	cmp r5, #1
	bls _08088C88
	movs r5, #0
	ldr r2, _08088E64 @ =gUnknown_080D61D4
	movs r1, #0
	mov r8, r1
	movs r7, #0
_08088CF6:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	movs r1, #0x8e
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r1, r4, r0
	str r6, [r1]
	movs r0, #0x80
	lsls r0, r0, #4
	adds r6, r6, r0
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r1, #0xc]
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrb r0, [r0, #2]
	strb r0, [r1, #0x1a]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	ldr r0, [r4, #0x28]
	asrs r0, r0, #8
	strh r0, [r1, #0x10]
	ldr r0, [r4, #0x2c]
	asrs r0, r0, #8
	strh r0, [r1, #0x12]
	movs r0, #0x80
	strh r0, [r1, #0x14]
	strh r7, [r1, #0xe]
	strh r7, [r1, #0x16]
	movs r0, #0x10
	strb r0, [r1, #0x1c]
	mov r0, r8
	strb r0, [r1, #0x1f]
	str r7, [r1, #8]
	adds r0, r1, #0
	str r2, [sp]
	bl UpdateSpriteAnimation
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	ldr r2, [sp]
	cmp r5, #1
	bls _08088CF6
	movs r5, #0
	ldr r2, _08088E68 @ =gUnknown_080D6234
	movs r1, #0
	mov r8, r1
	movs r7, #0
_08088D68:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	movs r1, #0xb6
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r1, r4, r0
	str r6, [r1]
	movs r0, #0x80
	lsls r0, r0, #4
	adds r6, r6, r0
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r1, #0xc]
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrb r0, [r0, #2]
	strb r0, [r1, #0x1a]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	ldr r0, [r4, #0x30]
	asrs r0, r0, #8
	strh r0, [r1, #0x10]
	ldr r0, [r4, #0x34]
	asrs r0, r0, #8
	strh r0, [r1, #0x12]
	movs r0, #0xc0
	strh r0, [r1, #0x14]
	strh r7, [r1, #0xe]
	strh r7, [r1, #0x16]
	movs r0, #0x10
	strb r0, [r1, #0x1c]
	mov r0, r8
	strb r0, [r1, #0x1f]
	str r7, [r1, #8]
	adds r0, r1, #0
	str r2, [sp]
	bl UpdateSpriteAnimation
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	ldr r2, [sp]
	cmp r5, #1
	bls _08088D68
	movs r5, #0
	ldr r2, _08088E6C @ =gUnknown_080D6354
	movs r1, #0
	mov r8, r1
	movs r7, #0
_08088DDA:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	movs r1, #0x97
	lsls r1, r1, #2
	adds r0, r0, r1
	adds r1, r4, r0
	str r6, [r1]
	movs r0, #0x80
	lsls r0, r0, #4
	adds r6, r6, r0
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r1, #0xc]
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrb r0, [r0, #2]
	strb r0, [r1, #0x1a]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	ldr r0, [r4, #0x48]
	asrs r0, r0, #8
	strh r0, [r1, #0x10]
	ldr r0, [r4, #0x4c]
	asrs r0, r0, #8
	strh r0, [r1, #0x12]
	movs r0, #0xc0
	strh r0, [r1, #0x14]
	strh r7, [r1, #0xe]
	strh r7, [r1, #0x16]
	movs r0, #0x10
	strb r0, [r1, #0x1c]
	mov r0, r8
	strb r0, [r1, #0x1f]
	str r7, [r1, #8]
	adds r0, r1, #0
	str r2, [sp]
	bl UpdateSpriteAnimation
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	ldr r2, [sp]
	cmp r5, #1
	bls _08088DDA
	ldr r0, _08088E58 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08088E70 @ =sub_808A060
	str r0, [r1, #8]
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08088E58: .4byte gCurTask
_08088E5C: .4byte gUnknown_080D6114
_08088E60: .4byte gUnknown_080D6174
_08088E64: .4byte gUnknown_080D61D4
_08088E68: .4byte gUnknown_080D6234
_08088E6C: .4byte gUnknown_080D6354
_08088E70: .4byte sub_808A060

	thumb_func_start sub_8088E74
sub_8088E74: @ 0x08088E74
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	ldr r0, _08088FC4 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	movs r6, #0
	ldr r0, [r4, #0x1c]
	movs r1, #0xd0
	lsls r1, r1, #5
	adds r0, r0, r1
	str r0, [r4, #0x3c]
	ldr r0, [r4, #0x2c]
	movs r1, #0xc0
	lsls r1, r1, #3
	adds r0, r0, r1
	str r0, [r4, #0x44]
	adds r0, r4, #0
	bl sub_8088FD4
	adds r0, r4, #0
	bl sub_8089EF8
	adds r0, r4, #0
	bl sub_8089150
	adds r0, r4, #0
	bl sub_80891E4
	adds r0, r4, #0
	bl sub_8089F40
	adds r0, r4, #0
	bl sub_8089F08
	adds r0, r4, #0
	bl sub_8089704
	ldr r5, [r4, #0x7c]
	ldr r2, _08088FC8 @ =gUnknown_080D6294
	movs r0, #0
	mov r8, r0
	movs r7, #0
_08088ED2:
	lsls r0, r6, #2
	adds r0, r0, r6
	lsls r0, r0, #3
	movs r1, #0xde
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r1, r4, r0
	str r5, [r1]
	movs r0, #0x80
	lsls r0, r0, #4
	adds r5, r5, r0
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r6, r0
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r1, #0xc]
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r6, r0
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrb r0, [r0, #2]
	strb r0, [r1, #0x1a]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	ldr r0, [r4, #0x38]
	asrs r0, r0, #8
	strh r0, [r1, #0x10]
	ldr r0, [r4, #0x3c]
	asrs r0, r0, #8
	strh r0, [r1, #0x12]
	movs r0, #0xc0
	strh r0, [r1, #0x14]
	strh r7, [r1, #0xe]
	strh r7, [r1, #0x16]
	movs r0, #0x10
	strb r0, [r1, #0x1c]
	mov r0, r8
	strb r0, [r1, #0x1f]
	str r7, [r1, #8]
	adds r0, r1, #0
	str r2, [sp]
	bl UpdateSpriteAnimation
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	ldr r2, [sp]
	cmp r6, #1
	bls _08088ED2
	movs r6, #0
	ldr r2, _08088FCC @ =gUnknown_080D62F4
	movs r1, #0
	mov r8, r1
	movs r7, #0
_08088F44:
	lsls r0, r6, #2
	adds r0, r0, r6
	lsls r0, r0, #3
	movs r1, #0x83
	lsls r1, r1, #2
	adds r0, r0, r1
	adds r1, r4, r0
	str r5, [r1]
	movs r0, #0x80
	lsls r0, r0, #4
	adds r5, r5, r0
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r6, r0
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r1, #0xc]
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r6, r0
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrb r0, [r0, #2]
	strb r0, [r1, #0x1a]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	ldr r0, [r4, #0x40]
	asrs r0, r0, #8
	strh r0, [r1, #0x10]
	ldr r0, [r4, #0x44]
	asrs r0, r0, #8
	strh r0, [r1, #0x12]
	movs r0, #0xc0
	strh r0, [r1, #0x14]
	strh r7, [r1, #0xe]
	strh r7, [r1, #0x16]
	movs r0, #0x10
	strb r0, [r1, #0x1c]
	mov r0, r8
	strb r0, [r1, #0x1f]
	str r7, [r1, #8]
	adds r0, r1, #0
	str r2, [sp]
	bl UpdateSpriteAnimation
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	ldr r2, [sp]
	cmp r6, #1
	bls _08088F44
	movs r0, #1
	strb r0, [r4, #0xb]
	ldr r0, _08088FC4 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08088FD0 @ =sub_808A0D8
	str r0, [r1, #8]
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08088FC4: .4byte gCurTask
_08088FC8: .4byte gUnknown_080D6294
_08088FCC: .4byte gUnknown_080D62F4
_08088FD0: .4byte sub_808A0D8

	thumb_func_start sub_8088FD4
sub_8088FD4: @ 0x08088FD4
	push {lr}
	adds r3, r0, #0
	ldrb r0, [r3, #3]
	cmp r0, #0
	bne _08088FEC
	adds r1, r3, #0
	adds r1, #0x72
	ldr r2, _08088FE8 @ =0xFFFFFC00
	b _08088FF2
	.align 2, 0
_08088FE8: .4byte 0xFFFFFC00
_08088FEC:
	adds r1, r3, #0
	adds r1, #0x72
	ldr r2, _0808901C @ =0xFFFFFF00
_08088FF2:
	adds r0, r2, #0
	ldrh r2, [r1]
	adds r0, r0, r2
	strh r0, [r1]
	adds r1, r3, #0
	adds r1, #0x74
	ldrh r0, [r1]
	movs r2, #0xc0
	lsls r2, r2, #1
	cmp r0, r2
	bls _08089020
	subs r0, #0x20
	strh r0, [r1]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, r2
	bhi _08089022
	movs r0, #1
	strb r0, [r3, #3]
	b _08089022
	.align 2, 0
_0808901C: .4byte 0xFFFFFF00
_08089020:
	strh r2, [r1]
_08089022:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8089028
sub_8089028: @ 0x08089028
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	movs r0, #0xa
	mov ip, r0
	movs r3, #0
	movs r5, #0
	ldr r2, _08089068 @ =gFlags
	ldr r0, [r2]
	movs r1, #4
	orrs r0, r1
	str r0, [r2]
	ldr r1, _0808906C @ =gUnknown_03003C5C
	ldr r0, _08089070 @ =0x04000010
	str r0, [r1]
	ldr r1, _08089074 @ =gUnknown_03003F30
	movs r0, #2
	strb r0, [r1]
	ldr r0, _08089078 @ =gBgOffsetsHBlank
	ldr r1, [r0]
	ldrh r2, [r4, #0x12]
	ldrb r0, [r4, #6]
	cmp r0, #2
	bhi _080890A8
	movs r7, #1
	rsbs r6, r2, #0
_0808905A:
	adds r0, r5, #0
	ands r0, r7
	cmp r0, #0
	beq _0808907C
	strh r6, [r1]
	b _0808907E
	.align 2, 0
_08089068: .4byte gFlags
_0808906C: .4byte gUnknown_03003C5C
_08089070: .4byte 0x04000010
_08089074: .4byte gUnknown_03003F30
_08089078: .4byte gBgOffsetsHBlank
_0808907C:
	strh r2, [r1]
_0808907E:
	adds r1, #2
	movs r0, #7
	ands r0, r3
	cmp r0, #7
	bne _0808908E
	adds r0, r5, #1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
_0808908E:
	adds r0, r3, #1
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	cmp r3, #0x9f
	bls _0808905A
	ldrh r1, [r4, #0x12]
	movs r2, #0x12
	ldrsh r0, [r4, r2]
	cmp r0, #0
	bge _080890E0
	mov r2, ip
	adds r0, r1, r2
	b _080890EC
_080890A8:
	movs r7, #1
	rsbs r6, r2, #0
_080890AC:
	adds r0, r5, #0
	ands r0, r7
	cmp r0, #0
	beq _080890B8
	strh r6, [r1]
	b _080890BA
_080890B8:
	strh r2, [r1]
_080890BA:
	adds r1, #2
	movs r0, #7
	ands r0, r3
	cmp r0, #7
	bne _080890CA
	adds r0, r5, #1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
_080890CA:
	adds r0, r3, #1
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	cmp r3, #0x9f
	bls _080890AC
	ldrh r2, [r4, #0x12]
	movs r0, #0x12
	ldrsh r1, [r4, r0]
	ldr r0, _080890E4 @ =0xFFFFFEFC
	cmp r1, r0
	bgt _080890E8
_080890E0:
	movs r0, #1
	b _080890F0
	.align 2, 0
_080890E4: .4byte 0xFFFFFEFC
_080890E8:
	mov r1, ip
	subs r0, r2, r1
_080890EC:
	strh r0, [r4, #0x12]
	movs r0, #0
_080890F0:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80890F8
sub_80890F8: @ 0x080890F8
	push {r4, lr}
	adds r2, r0, #0
	ldrb r0, [r2, #4]
	adds r0, #2
	strb r0, [r2, #4]
	ldr r4, _0808914C @ =gSineTable
	ldrb r0, [r2, #4]
	lsls r0, r0, #3
	adds r0, r0, r4
	ldrh r0, [r0]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x16
	asrs r1, r0, #1
	adds r0, r0, r1
	adds r3, r2, #0
	adds r3, #0x68
	strh r0, [r3]
	cmp r0, #0
	beq _08089122
	cmp r0, #0xff
	bne _0808913A
_08089122:
	ldrb r0, [r2, #4]
	adds r0, #3
	movs r1, #0xff
	ands r0, r1
	lsls r0, r0, #3
	adds r0, r0, r4
	ldrh r0, [r0]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x16
	asrs r1, r0, #1
	adds r0, r0, r1
	strh r0, [r3]
_0808913A:
	adds r1, r2, #0
	adds r1, #0x6a
	movs r0, #0xc0
	lsls r0, r0, #1
	strh r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808914C: .4byte gSineTable

	thumb_func_start sub_8089150
sub_8089150: @ 0x08089150
	push {lr}
	adds r2, r0, #0
	ldrb r0, [r2, #5]
	adds r0, #3
	strb r0, [r2, #5]
	ldr r1, [r2, #0x58]
	movs r0, #0xa0
	lsls r0, r0, #7
	cmp r1, r0
	bgt _08089180
	ldrb r0, [r2, #6]
	cmp r0, #0
	bne _08089180
	movs r0, #0x80
	lsls r0, r0, #3
	adds r1, r1, r0
	str r1, [r2, #0x58]
	ldr r0, _0808917C @ =0x00004FFF
	cmp r1, r0
	ble _080891BA
	b _0808919E
	.align 2, 0
_0808917C: .4byte 0x00004FFF
_08089180:
	ldr r0, _080891A4 @ =0x00004FFF
	ldr r1, [r2, #0x58]
	ldrb r3, [r2, #6]
	cmp r1, r0
	ble _080891AC
	cmp r3, #1
	bne _080891AC
	ldr r3, _080891A8 @ =0xFFFFFD00
	adds r0, r1, r3
	str r0, [r2, #0x58]
	movs r1, #0xa0
	lsls r1, r1, #7
	cmp r0, r1
	bgt _080891BA
	str r1, [r2, #0x58]
_0808919E:
	movs r0, #2
	strb r0, [r2, #6]
	b _080891BA
	.align 2, 0
_080891A4: .4byte 0x00004FFF
_080891A8: .4byte 0xFFFFFD00
_080891AC:
	lsls r0, r3, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #3
	bne _080891BA
	ldr r3, _080891DC @ =0xFFFFFC00
	adds r0, r1, r3
	str r0, [r2, #0x58]
_080891BA:
	ldr r0, _080891E0 @ =gSineTable
	ldrb r1, [r2, #5]
	lsls r1, r1, #3
	movs r3, #0x80
	lsls r3, r3, #2
	adds r1, r1, r3
	adds r1, r1, r0
	ldrh r0, [r1]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x16
	lsls r0, r0, #2
	movs r1, #0xac
	lsls r1, r1, #7
	adds r0, r0, r1
	str r0, [r2, #0x5c]
	pop {r0}
	bx r0
	.align 2, 0
_080891DC: .4byte 0xFFFFFC00
_080891E0: .4byte gSineTable

	thumb_func_start sub_80891E4
sub_80891E4: @ 0x080891E4
	push {r4, lr}
	adds r3, r0, #0
	ldrb r0, [r3, #5]
	adds r0, #3
	strb r0, [r3, #5]
	ldrb r0, [r3, #6]
	cmp r0, #0
	bne _0808920C
	ldr r0, [r3, #0x58]
	ldr r1, _08089204 @ =0xFFFFFD00
	adds r0, r0, r1
	str r0, [r3, #0x60]
	ldr r0, [r3, #0x5c]
	ldr r2, _08089208 @ =0xFFFFCA00
	adds r0, r0, r2
	b _08089254
	.align 2, 0
_08089204: .4byte 0xFFFFFD00
_08089208: .4byte 0xFFFFCA00
_0808920C:
	cmp r0, #1
	beq _08089244
	cmp r0, #2
	bne _08089240
	ldr r2, _0808923C @ =gUnknown_080D6770
	ldrb r0, [r3, #0xb]
	lsls r0, r0, #2
	adds r0, r0, r2
	movs r4, #0
	ldrsh r1, [r0, r4]
	lsls r1, r1, #8
	ldr r0, [r3, #0x58]
	subs r0, r0, r1
	str r0, [r3, #0x60]
	ldrb r0, [r3, #0xb]
	lsls r0, r0, #2
	adds r2, #2
	adds r0, r0, r2
	movs r2, #0
	ldrsh r1, [r0, r2]
	lsls r1, r1, #8
	ldr r0, [r3, #0x5c]
	b _08089252
	.align 2, 0
_0808923C: .4byte gUnknown_080D6770
_08089240:
	cmp r0, #3
	bne _08089256
_08089244:
	ldr r0, [r3, #0x58]
	movs r4, #0xc0
	lsls r4, r4, #2
	adds r0, r0, r4
	str r0, [r3, #0x60]
	ldr r0, [r3, #0x5c]
	ldr r1, _08089274 @ =0xFFFFCA00
_08089252:
	adds r0, r0, r1
_08089254:
	str r0, [r3, #0x64]
_08089256:
	ldr r1, _08089278 @ =gSineTable
	ldrb r0, [r3, #5]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x16
	lsls r0, r0, #1
	ldr r1, [r3, #0x64]
	adds r1, r1, r0
	str r1, [r3, #0x64]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08089274: .4byte 0xFFFFCA00
_08089278: .4byte gSineTable

	thumb_func_start sub_808927C
sub_808927C: @ 0x0808927C
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, _080892C8 @ =gSaveGame
	adds r0, #0x32
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #0x7f
	bne _080892FC
	ldrh r5, [r4, #0x14]
	movs r1, #0x14
	ldrsh r0, [r4, r1]
	cmp r0, #9
	bgt _080892C2
	ldr r6, _080892CC @ =gPressedKeys
	ldr r2, _080892D0 @ =gUnknown_080D66CC
	adds r0, #1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r3, [r6]
	ldrh r1, [r0]
	ands r1, r3
	cmp r1, #0
	beq _080892D4
	adds r0, r5, #1
	strh r0, [r4, #0x14]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #5
	bne _080892FC
	movs r0, #0x6c
	bl m4aSongNumStart
	movs r0, #0xa
	strh r0, [r4, #0x14]
_080892C2:
	movs r0, #1
	b _080892FE
	.align 2, 0
_080892C8: .4byte gSaveGame
_080892CC: .4byte gPressedKeys
_080892D0: .4byte gUnknown_080D66CC
_080892D4:
	ldrh r2, [r2]
	adds r0, r2, #0
	ands r0, r3
	cmp r0, #0
	beq _080892E2
	strh r1, [r4, #0x14]
	b _080892FC
_080892E2:
	lsls r0, r3, #0x10
	cmp r0, #0
	beq _080892F0
	ldr r1, _08089304 @ =0x0000FFFF
	adds r0, r1, #0
	orrs r0, r5
	strh r0, [r4, #0x14]
_080892F0:
	ldrh r0, [r6]
	ands r2, r0
	cmp r2, #0
	beq _080892FC
	movs r0, #1
	strh r0, [r4, #0x14]
_080892FC:
	movs r0, #0
_080892FE:
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_08089304: .4byte 0x0000FFFF

	thumb_func_start sub_8089308
sub_8089308: @ 0x08089308
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	movs r0, #0xc9
	lsls r0, r0, #2
	adds r6, r5, r0
	movs r7, #0
_08089314:
	lsls r0, r7, #2
	adds r0, r0, r7
	lsls r0, r0, #3
	adds r0, #0x7c
	adds r4, r5, r0
	movs r1, #0x10
	ldrsh r0, [r5, r1]
	cmp r0, #0
	bne _0808933A
	adds r0, r5, #0
	adds r0, #0x68
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bgt _08089336
	movs r0, #3
	b _0808933C
_08089336:
	movs r0, #1
	b _0808933C
_0808933A:
	movs r0, #0
_0808933C:
	strb r0, [r4, #0x1f]
	ldr r0, [r5, #0x18]
	asrs r0, r0, #8
	movs r2, #0
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x1c]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	movs r1, #0x10
	ldrsh r0, [r5, r1]
	cmp r0, #0
	bne _08089380
	ldr r0, [r4, #8]
	movs r1, #0x61
	orrs r0, r1
	str r0, [r4, #8]
	strh r2, [r6]
	adds r0, r5, #0
	adds r0, #0x68
	ldrh r0, [r0]
	strh r0, [r6, #2]
	adds r0, r5, #0
	adds r0, #0x6a
	ldrh r0, [r0]
	strh r0, [r6, #4]
	ldrh r0, [r4, #0x10]
	strh r0, [r6, #6]
	ldrh r0, [r4, #0x12]
	strh r0, [r6, #8]
	adds r0, r4, #0
	adds r1, r6, #0
	bl TransformSprite
	b _08089382
_08089380:
	str r2, [r4, #8]
_08089382:
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #1
	bls _08089314
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8089398
sub_8089398: @ 0x08089398
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	movs r0, #0xc9
	lsls r0, r0, #2
	adds r6, r5, r0
	movs r7, #0
_080893A4:
	lsls r0, r7, #2
	adds r0, r0, r7
	lsls r0, r0, #3
	adds r0, #0xcc
	adds r4, r5, r0
	movs r2, #0x10
	ldrsh r1, [r5, r2]
	cmp r1, #1
	bne _080893CA
	adds r0, r5, #0
	adds r0, #0x68
	movs r2, #0
	ldrsh r0, [r0, r2]
	cmp r0, #0
	bgt _080893C6
	movs r0, #3
	b _080893CC
_080893C6:
	strb r1, [r4, #0x1f]
	b _080893CE
_080893CA:
	movs r0, #0
_080893CC:
	strb r0, [r4, #0x1f]
_080893CE:
	ldr r0, [r5, #0x20]
	asrs r0, r0, #8
	movs r2, #0
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x24]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	movs r1, #0x10
	ldrsh r0, [r5, r1]
	cmp r0, #1
	bne _08089410
	ldr r0, [r4, #8]
	movs r1, #0x61
	orrs r0, r1
	str r0, [r4, #8]
	strh r2, [r6]
	adds r0, r5, #0
	adds r0, #0x68
	ldrh r0, [r0]
	strh r0, [r6, #2]
	adds r0, r5, #0
	adds r0, #0x6a
	ldrh r0, [r0]
	strh r0, [r6, #4]
	ldrh r0, [r4, #0x10]
	strh r0, [r6, #6]
	ldrh r0, [r4, #0x12]
	strh r0, [r6, #8]
	adds r0, r4, #0
	adds r1, r6, #0
	bl TransformSprite
	b _08089412
_08089410:
	str r2, [r4, #8]
_08089412:
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #1
	bls _080893A4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8089428
sub_8089428: @ 0x08089428
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	movs r0, #0xc9
	lsls r0, r0, #2
	adds r6, r5, r0
	movs r7, #0
_08089434:
	lsls r0, r7, #2
	adds r0, r0, r7
	lsls r0, r0, #3
	movs r1, #0x8e
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r4, r5, r0
	movs r1, #0x10
	ldrsh r0, [r5, r1]
	cmp r0, #2
	bne _0808945E
	adds r0, r5, #0
	adds r0, #0x68
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bgt _0808945A
	movs r0, #3
	b _08089460
_0808945A:
	movs r0, #1
	b _08089460
_0808945E:
	movs r0, #0
_08089460:
	strb r0, [r4, #0x1f]
	ldr r0, [r5, #0x28]
	asrs r0, r0, #8
	movs r2, #0
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x2c]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	movs r1, #0x10
	ldrsh r0, [r5, r1]
	cmp r0, #2
	bne _080894A4
	ldr r0, [r4, #8]
	movs r1, #0x61
	orrs r0, r1
	str r0, [r4, #8]
	strh r2, [r6]
	adds r0, r5, #0
	adds r0, #0x68
	ldrh r0, [r0]
	strh r0, [r6, #2]
	adds r0, r5, #0
	adds r0, #0x6a
	ldrh r0, [r0]
	strh r0, [r6, #4]
	ldrh r0, [r4, #0x10]
	strh r0, [r6, #6]
	ldrh r0, [r4, #0x12]
	strh r0, [r6, #8]
	adds r0, r4, #0
	adds r1, r6, #0
	bl TransformSprite
	b _080894A6
_080894A4:
	str r2, [r4, #8]
_080894A6:
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #1
	bls _08089434
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80894BC
sub_80894BC: @ 0x080894BC
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	movs r0, #0xc9
	lsls r0, r0, #2
	adds r6, r5, r0
	movs r7, #0
_080894C8:
	lsls r0, r7, #2
	adds r0, r0, r7
	lsls r0, r0, #3
	movs r1, #0xb6
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r4, r5, r0
	movs r2, #0x10
	ldrsh r1, [r5, r2]
	cmp r1, #3
	bne _080894F2
	adds r0, r5, #0
	adds r0, #0x68
	movs r2, #0
	ldrsh r0, [r0, r2]
	cmp r0, #0
	bgt _080894EE
	strb r1, [r4, #0x1f]
	b _080894F6
_080894EE:
	movs r0, #1
	b _080894F4
_080894F2:
	movs r0, #0
_080894F4:
	strb r0, [r4, #0x1f]
_080894F6:
	ldr r0, [r5, #0x30]
	asrs r0, r0, #8
	movs r2, #0
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x34]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	movs r1, #0x10
	ldrsh r0, [r5, r1]
	cmp r0, #3
	bne _08089538
	ldr r0, [r4, #8]
	movs r1, #0x61
	orrs r0, r1
	str r0, [r4, #8]
	strh r2, [r6]
	adds r0, r5, #0
	adds r0, #0x68
	ldrh r0, [r0]
	strh r0, [r6, #2]
	adds r0, r5, #0
	adds r0, #0x6a
	ldrh r0, [r0]
	strh r0, [r6, #4]
	ldrh r0, [r4, #0x10]
	strh r0, [r6, #6]
	ldrh r0, [r4, #0x12]
	strh r0, [r6, #8]
	adds r0, r4, #0
	adds r1, r6, #0
	bl TransformSprite
	b _0808953A
_08089538:
	str r2, [r4, #8]
_0808953A:
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #1
	bls _080894C8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8089550
sub_8089550: @ 0x08089550
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	movs r0, #0xc9
	lsls r0, r0, #2
	adds r6, r5, r0
	movs r7, #0
_0808955C:
	lsls r0, r7, #2
	adds r0, r0, r7
	lsls r0, r0, #3
	movs r1, #0xde
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r4, r5, r0
	ldrb r0, [r5, #0xc]
	cmp r0, #0
	bne _08089584
	adds r0, r5, #0
	adds r0, #0x68
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bgt _08089580
	movs r0, #3
	b _08089586
_08089580:
	movs r0, #1
	b _08089586
_08089584:
	movs r0, #0
_08089586:
	strb r0, [r4, #0x1f]
	ldr r0, [r5, #0x38]
	asrs r0, r0, #8
	movs r2, #0
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x3c]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	ldrb r0, [r5, #0xc]
	cmp r0, #0
	bne _080895C8
	ldr r0, [r4, #8]
	movs r1, #0x61
	orrs r0, r1
	str r0, [r4, #8]
	strh r2, [r6]
	adds r0, r5, #0
	adds r0, #0x68
	ldrh r0, [r0]
	strh r0, [r6, #2]
	adds r0, r5, #0
	adds r0, #0x6a
	ldrh r0, [r0]
	strh r0, [r6, #4]
	ldrh r0, [r4, #0x10]
	strh r0, [r6, #6]
	ldrh r0, [r4, #0x12]
	strh r0, [r6, #8]
	adds r0, r4, #0
	adds r1, r6, #0
	bl TransformSprite
	b _080895CA
_080895C8:
	str r2, [r4, #8]
_080895CA:
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #1
	bls _0808955C
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80895E0
sub_80895E0: @ 0x080895E0
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	movs r0, #0xc9
	lsls r0, r0, #2
	adds r6, r5, r0
	movs r7, #0
_080895EC:
	lsls r0, r7, #2
	adds r0, r0, r7
	lsls r0, r0, #3
	movs r1, #0x83
	lsls r1, r1, #2
	adds r0, r0, r1
	adds r4, r5, r0
	ldrb r1, [r5, #0xc]
	cmp r1, #1
	bne _08089614
	adds r0, r5, #0
	adds r0, #0x68
	movs r2, #0
	ldrsh r0, [r0, r2]
	cmp r0, #0
	bgt _08089610
	movs r0, #3
	b _08089616
_08089610:
	strb r1, [r4, #0x1f]
	b _08089618
_08089614:
	movs r0, #0
_08089616:
	strb r0, [r4, #0x1f]
_08089618:
	ldr r0, [r5, #0x40]
	asrs r0, r0, #8
	movs r2, #0
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x44]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	ldrb r0, [r5, #0xc]
	cmp r0, #1
	bne _08089658
	ldr r0, [r4, #8]
	movs r1, #0x61
	orrs r0, r1
	str r0, [r4, #8]
	strh r2, [r6]
	adds r0, r5, #0
	adds r0, #0x68
	ldrh r0, [r0]
	strh r0, [r6, #2]
	adds r0, r5, #0
	adds r0, #0x6a
	ldrh r0, [r0]
	strh r0, [r6, #4]
	ldrh r0, [r4, #0x10]
	strh r0, [r6, #6]
	ldrh r0, [r4, #0x12]
	strh r0, [r6, #8]
	adds r0, r4, #0
	adds r1, r6, #0
	bl TransformSprite
	b _0808965A
_08089658:
	str r2, [r4, #8]
_0808965A:
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #1
	bls _080895EC
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8089670
sub_8089670: @ 0x08089670
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	movs r0, #0xc9
	lsls r0, r0, #2
	adds r6, r5, r0
	movs r7, #0
_0808967C:
	lsls r0, r7, #2
	adds r0, r0, r7
	lsls r0, r0, #3
	movs r1, #0x97
	lsls r1, r1, #2
	adds r0, r0, r1
	adds r4, r5, r0
	movs r1, #0x10
	ldrsh r0, [r5, r1]
	cmp r0, #9
	ble _080896A6
	adds r0, r5, #0
	adds r0, #0x68
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bgt _080896A2
	movs r0, #3
	b _080896A8
_080896A2:
	movs r0, #1
	b _080896A8
_080896A6:
	movs r0, #0
_080896A8:
	strb r0, [r4, #0x1f]
	ldr r0, [r5, #0x48]
	asrs r0, r0, #8
	movs r2, #0
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x4c]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	movs r1, #0x10
	ldrsh r0, [r5, r1]
	cmp r0, #9
	ble _080896EC
	ldr r0, [r4, #8]
	movs r1, #0x61
	orrs r0, r1
	str r0, [r4, #8]
	strh r2, [r6]
	adds r0, r5, #0
	adds r0, #0x68
	ldrh r0, [r0]
	strh r0, [r6, #2]
	adds r0, r5, #0
	adds r0, #0x6a
	ldrh r0, [r0]
	strh r0, [r6, #4]
	ldrh r0, [r4, #0x10]
	strh r0, [r6, #6]
	ldrh r0, [r4, #0x12]
	strh r0, [r6, #8]
	adds r0, r4, #0
	adds r1, r6, #0
	bl TransformSprite
	b _080896EE
_080896EC:
	str r2, [r4, #8]
_080896EE:
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #1
	bls _0808967C
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8089704
sub_8089704: @ 0x08089704
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r0, #0xb5
	lsls r0, r0, #2
	adds r4, r5, r0
	ldr r0, [r5, #0x58]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x5c]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	ldrb r0, [r5, #6]
	cmp r0, #1
	beq _08089724
	cmp r0, #3
	bne _0808972E
_08089724:
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	b _08089734
_0808972E:
	ldr r0, [r4, #8]
	ldr r1, _08089794 @ =0xFFFFFBFF
	ands r0, r1
_08089734:
	str r0, [r4, #8]
	adds r0, r4, #0
	bl DisplaySprite
	movs r0, #0xbf
	lsls r0, r0, #2
	adds r4, r5, r0
	ldr r0, [r5, #0x60]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x64]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl DisplaySprite
	movs r0, #0xab
	lsls r0, r0, #2
	adds r4, r5, r0
	ldr r1, _08089798 @ =gUnknown_080D6694
	ldrb r0, [r5, #0xb]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r4, #0xc]
	ldrb r0, [r5, #0xb]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrb r0, [r0, #2]
	strb r0, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	ldr r0, [r5, #0x58]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x5c]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	ldrb r0, [r5, #6]
	cmp r0, #1
	beq _0808978A
	cmp r0, #3
	bne _0808979C
_0808978A:
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	b _080897A2
	.align 2, 0
_08089794: .4byte 0xFFFFFBFF
_08089798: .4byte gUnknown_080D6694
_0808979C:
	ldr r0, [r4, #8]
	ldr r1, _080897B8 @ =0xFFFFFBFF
	ands r0, r1
_080897A2:
	str r0, [r4, #8]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080897B8: .4byte 0xFFFFFBFF

	thumb_func_start sub_80897BC
sub_80897BC: @ 0x080897BC
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0x14
	ldr r0, _08089954 @ =gCurTask
	ldr r0, [r0]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r4, r0
	movs r6, #0
	movs r7, #0
	movs r0, #0xc8
	lsls r0, r0, #7
	str r0, [r5, #0x3c]
	movs r0, #0x82
	lsls r0, r0, #8
	str r0, [r5, #0x44]
	strb r7, [r5, #0xd]
	adds r0, r5, #0
	bl sub_8088FD4
	str r7, [r5, #0x50]
	ldr r0, [r5, #0x54]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r0, r1
	str r0, [r5, #0x54]
	adds r0, r5, #0
	bl sub_8089150
	adds r0, r5, #0
	bl sub_80891E4
	ldr r1, _08089958 @ =gBgScrollRegs
	ldr r0, [r5, #0x50]
	asrs r0, r0, #8
	strh r0, [r1, #4]
	ldr r0, [r5, #0x54]
	asrs r0, r0, #8
	strh r0, [r1, #6]
	ldr r1, _0808995C @ =0x03000072
	adds r0, r4, r1
	ldrh r0, [r0]
	lsrs r0, r0, #6
	adds r1, #2
	adds r4, r4, r1
	movs r1, #0
	ldrsh r2, [r4, r1]
	movs r1, #0x40
	str r1, [sp]
	movs r1, #0x48
	str r1, [sp, #4]
	movs r1, #0x50
	str r1, [sp, #8]
	ldr r1, _08089960 @ =gBgAffineRegs
	str r1, [sp, #0xc]
	adds r1, r2, #0
	movs r3, #0x40
	bl sa2__sub_8003EE4
	adds r0, r5, #0
	bl sub_8089704
	ldr r7, [r5, #0x7c]
	ldr r2, _08089964 @ =gUnknown_080D6594
	movs r0, #0
	mov r8, r0
	movs r4, #0
_08089848:
	lsls r0, r6, #2
	adds r0, r0, r6
	lsls r0, r0, #3
	movs r1, #0xde
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r1, r5, r0
	str r7, [r1]
	movs r0, #0x80
	lsls r0, r0, #4
	adds r7, r7, r0
	ldrb r0, [r5]
	lsls r0, r0, #1
	adds r0, r6, r0
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r1, #0xc]
	ldrb r0, [r5]
	lsls r0, r0, #1
	adds r0, r6, r0
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrb r0, [r0, #2]
	strb r0, [r1, #0x1a]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	ldr r0, [r5, #0x38]
	asrs r0, r0, #8
	strh r0, [r1, #0x10]
	ldr r0, [r5, #0x3c]
	asrs r0, r0, #8
	strh r0, [r1, #0x12]
	movs r0, #0xc0
	strh r0, [r1, #0x14]
	strh r4, [r1, #0xe]
	strh r4, [r1, #0x16]
	movs r0, #0x10
	strb r0, [r1, #0x1c]
	mov r0, r8
	strb r0, [r1, #0x1f]
	str r4, [r1, #8]
	adds r0, r1, #0
	str r2, [sp, #0x10]
	bl UpdateSpriteAnimation
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	ldr r2, [sp, #0x10]
	cmp r6, #1
	bls _08089848
	movs r6, #0
	movs r1, #0xd
	adds r1, r1, r5
	mov r8, r1
	ldr r2, _08089968 @ =gUnknown_080D65F4
	movs r0, #0
	mov sb, r0
	movs r4, #0
_080898C0:
	lsls r0, r6, #2
	adds r0, r0, r6
	lsls r0, r0, #3
	movs r1, #0x83
	lsls r1, r1, #2
	adds r0, r0, r1
	adds r1, r5, r0
	str r7, [r1]
	movs r0, #0x80
	lsls r0, r0, #4
	adds r7, r7, r0
	ldrb r0, [r5]
	lsls r0, r0, #1
	adds r0, r6, r0
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r1, #0xc]
	ldrb r0, [r5]
	lsls r0, r0, #1
	adds r0, r6, r0
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrb r0, [r0, #2]
	strb r0, [r1, #0x1a]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	ldr r0, [r5, #0x40]
	asrs r0, r0, #8
	strh r0, [r1, #0x10]
	ldr r0, [r5, #0x44]
	asrs r0, r0, #8
	strh r0, [r1, #0x12]
	movs r0, #0xc0
	strh r0, [r1, #0x14]
	strh r4, [r1, #0xe]
	strh r4, [r1, #0x16]
	movs r0, #0x10
	strb r0, [r1, #0x1c]
	mov r0, sb
	strb r0, [r1, #0x1f]
	str r4, [r1, #8]
	adds r0, r1, #0
	str r2, [sp, #0x10]
	bl UpdateSpriteAnimation
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	ldr r2, [sp, #0x10]
	cmp r6, #1
	bls _080898C0
	movs r0, #0x26
	str r0, [sp]
	movs r0, #0
	mov r1, r8
	adds r2, r7, #0
	movs r3, #0x64
	bl sub_808A1B0
	movs r0, #2
	strb r0, [r5, #0xb]
	ldr r0, _08089954 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808996C @ =sub_808A0D8
	str r0, [r1, #8]
	add sp, #0x14
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08089954: .4byte gCurTask
_08089958: .4byte gBgScrollRegs
_0808995C: .4byte 0x03000072
_08089960: .4byte gBgAffineRegs
_08089964: .4byte gUnknown_080D6594
_08089968: .4byte gUnknown_080D65F4
_0808996C: .4byte sub_808A0D8

	thumb_func_start sub_8089970
sub_8089970: @ 0x08089970
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	ldr r0, _08089A28 @ =gCurTask
	ldr r0, [r0]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r4, r0
	movs r7, #0
	movs r6, #0
	movs r0, #0xc8
	lsls r0, r0, #7
	str r0, [r5, #0x3c]
	movs r0, #0x82
	lsls r0, r0, #8
	str r0, [r5, #0x44]
	strb r6, [r5, #0xd]
	adds r0, r5, #0
	bl sub_8088FD4
	str r6, [r5, #0x50]
	ldr r0, [r5, #0x54]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r0, r1
	str r0, [r5, #0x54]
	adds r0, r5, #0
	bl sub_8089150
	adds r0, r5, #0
	bl sub_80891E4
	ldr r1, _08089A2C @ =gBgScrollRegs
	ldr r0, [r5, #0x50]
	asrs r0, r0, #8
	strh r0, [r1, #4]
	ldr r0, [r5, #0x54]
	asrs r0, r0, #8
	strh r0, [r1, #6]
	ldr r1, _08089A30 @ =0x03000072
	adds r0, r4, r1
	ldrh r0, [r0]
	lsrs r0, r0, #6
	adds r1, #2
	adds r4, r4, r1
	movs r1, #0
	ldrsh r2, [r4, r1]
	movs r1, #0x40
	str r1, [sp]
	movs r1, #0x48
	str r1, [sp, #4]
	movs r1, #0x50
	str r1, [sp, #8]
	ldr r1, _08089A34 @ =gBgAffineRegs
	str r1, [sp, #0xc]
	adds r1, r2, #0
	movs r3, #0x40
	bl sa2__sub_8003EE4
	adds r0, r5, #0
	bl sub_8089704
	ldr r6, [r5, #0x7c]
	ldrb r1, [r5]
	rsbs r0, r1, #0
	orrs r0, r1
	lsrs r4, r0, #0x1f
	ldr r0, _08089A38 @ =gUnknown_080D6654
	mov sb, r0
	movs r1, #0
	mov r8, r1
	movs r3, #0
	lsls r0, r4, #1
	str r0, [sp, #0x10]
_08089A0C:
	lsls r0, r7, #2
	adds r0, r0, r7
	lsls r0, r0, #3
	movs r1, #0xde
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r2, r5, r0
	str r6, [r2]
	cmp r7, #0
	bne _08089A3C
	movs r0, #0x80
	lsls r0, r0, #2
	adds r6, r6, r0
	b _08089A42
	.align 2, 0
_08089A28: .4byte gCurTask
_08089A2C: .4byte gBgScrollRegs
_08089A30: .4byte 0x03000072
_08089A34: .4byte gBgAffineRegs
_08089A38: .4byte gUnknown_080D6654
_08089A3C:
	movs r1, #0x80
	lsls r1, r1, #2
	adds r6, r6, r1
_08089A42:
	lsls r0, r4, #1
	adds r0, r7, r0
	lsls r0, r0, #3
	add r0, sb
	ldrh r1, [r0]
	strh r1, [r2, #0xc]
	ldrb r0, [r0, #2]
	strb r0, [r2, #0x1a]
	movs r0, #0xff
	strb r0, [r2, #0x1b]
	ldr r0, [r5, #0x38]
	asrs r0, r0, #8
	strh r0, [r2, #0x10]
	ldr r0, [r5, #0x3c]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	movs r0, #0xc0
	strh r0, [r2, #0x14]
	strh r3, [r2, #0xe]
	strh r3, [r2, #0x16]
	movs r0, #0x10
	strb r0, [r2, #0x1c]
	mov r0, r8
	strb r0, [r2, #0x1f]
	str r3, [r2, #8]
	adds r0, r2, #0
	str r3, [sp, #0x14]
	bl UpdateSpriteAnimation
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	ldr r3, [sp, #0x14]
	cmp r7, #1
	bls _08089A0C
	movs r7, #0
	movs r1, #0xd
	adds r1, r1, r5
	mov r8, r1
	ldr r0, _08089AB8 @ =gUnknown_080D6674
	mov sl, r0
	movs r1, #0
	mov sb, r1
	movs r4, #0
_08089A9A:
	lsls r0, r7, #2
	adds r0, r0, r7
	lsls r0, r0, #3
	movs r1, #0x83
	lsls r1, r1, #2
	adds r0, r0, r1
	adds r2, r5, r0
	str r6, [r2]
	cmp r7, #0
	bne _08089ABC
	movs r0, #0x80
	lsls r0, r0, #2
	adds r6, r6, r0
	b _08089AC2
	.align 2, 0
_08089AB8: .4byte gUnknown_080D6674
_08089ABC:
	movs r1, #0x80
	lsls r1, r1, #2
	adds r6, r6, r1
_08089AC2:
	ldr r1, [sp, #0x10]
	adds r0, r7, r1
	lsls r0, r0, #3
	add r0, sl
	ldrh r1, [r0]
	strh r1, [r2, #0xc]
	ldrb r0, [r0, #2]
	strb r0, [r2, #0x1a]
	movs r0, #0xff
	strb r0, [r2, #0x1b]
	ldr r0, [r5, #0x40]
	asrs r0, r0, #8
	strh r0, [r2, #0x10]
	ldr r0, [r5, #0x44]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	movs r0, #0xc0
	strh r0, [r2, #0x14]
	strh r4, [r2, #0xe]
	strh r4, [r2, #0x16]
	movs r0, #0x10
	strb r0, [r2, #0x1c]
	mov r0, sb
	strb r0, [r2, #0x1f]
	str r4, [r2, #8]
	adds r0, r2, #0
	bl UpdateSpriteAnimation
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #1
	bls _08089A9A
	movs r0, #0x22
	str r0, [sp]
	movs r0, #1
	mov r1, r8
	adds r2, r6, #0
	movs r3, #0x58
	bl sub_808A1B0
	movs r0, #2
	strb r0, [r5, #0xb]
	ldr r0, _08089B30 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08089B34 @ =sub_808A0D8
	str r0, [r1, #8]
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08089B30: .4byte gCurTask
_08089B34: .4byte sub_808A0D8

	thumb_func_start sub_8089B38
sub_8089B38: @ 0x08089B38
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r7, r0, #0
	adds r6, r1, #0
	movs r1, #0
	adds r2, r7, #0
	adds r2, #0x1c
	str r6, [r7, #0x1c]
	ldrb r0, [r7, #8]
	cmp r0, #0
	beq _08089B58
	cmp r0, #1
	bne _08089B58
	movs r1, #1
_08089B58:
	ldr r5, _08089BEC @ =gUnknown_080D6780
	lsls r1, r1, #3
	adds r0, r5, #4
	adds r0, r1, r0
	ldr r0, [r0]
	lsls r0, r0, #5
	adds r6, r6, r0
	adds r1, r1, r5
	ldrh r0, [r1]
	movs r3, #0
	mov r8, r3
	movs r4, #0
	strh r0, [r2, #0xc]
	ldrb r0, [r1, #2]
	strb r0, [r2, #0x1a]
	movs r0, #0xff
	strb r0, [r2, #0x1b]
	ldr r0, [r7, #0xc]
	asrs r0, r0, #8
	strh r0, [r2, #0x10]
	ldr r0, [r7, #0x10]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	movs r0, #0x40
	strh r0, [r2, #0x14]
	strh r4, [r2, #0xe]
	strh r4, [r2, #0x16]
	movs r0, #0x10
	mov sb, r0
	mov r1, sb
	strb r1, [r2, #0x1c]
	mov r3, r8
	strb r3, [r2, #0x1f]
	str r4, [r2, #8]
	adds r0, r2, #0
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	adds r0, #0x6c
	str r6, [r7, #0x6c]
	ldr r1, [r5, #0x14]
	lsls r1, r1, #5
	adds r6, r6, r1
	ldrh r1, [r5, #0x10]
	strh r1, [r0, #0xc]
	ldrb r1, [r5, #0x12]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x14]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x18]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	mov r1, sb
	strb r1, [r0, #0x1c]
	mov r3, r8
	strb r3, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	adds r3, r7, #0
	adds r3, #0x44
	str r6, [r7, #0x44]
	ldrb r0, [r7, #8]
	cmp r0, #0
	bne _08089BF4
	ldr r1, _08089BF0 @ =gUnknown_080D67F8
	b _08089BFA
	.align 2, 0
_08089BEC: .4byte gUnknown_080D6780
_08089BF0: .4byte gUnknown_080D67F8
_08089BF4:
	cmp r0, #1
	bne _08089C0E
	ldr r1, _08089C44 @ =gUnknown_080D6798
_08089BFA:
	ldrb r0, [r7]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r3, #0xc]
	ldrb r0, [r7]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrb r0, [r0, #2]
	strb r0, [r3, #0x1a]
_08089C0E:
	movs r0, #0xff
	strb r0, [r3, #0x1b]
	ldr r0, [r7, #0xc]
	asrs r0, r0, #8
	movs r2, #0
	movs r1, #0
	strh r0, [r3, #0x10]
	ldr r0, [r7, #0x10]
	asrs r0, r0, #8
	strh r0, [r3, #0x12]
	movs r0, #0x40
	strh r0, [r3, #0x14]
	strh r1, [r3, #0xe]
	strh r1, [r3, #0x16]
	movs r0, #0x10
	strb r0, [r3, #0x1c]
	strb r2, [r3, #0x1f]
	str r1, [r3, #8]
	adds r0, r3, #0
	bl UpdateSpriteAnimation
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08089C44: .4byte gUnknown_080D6798

	thumb_func_start sub_8089C48
sub_8089C48: @ 0x08089C48
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	movs r6, #0
	movs r7, #0
	adds r4, r5, #0
	adds r4, #0x1c
_08089C54:
	ldrb r0, [r5, #8]
	cmp r0, #0
	bne _08089C5E
	movs r7, #0
	b _08089C64
_08089C5E:
	cmp r0, #1
	bne _08089C64
	movs r7, #1
_08089C64:
	ldr r0, _08089C94 @ =gUnknown_080D6780
	lsls r1, r7, #3
	adds r1, r1, r0
	ldrh r0, [r1]
	strh r0, [r4, #0xc]
	ldrb r0, [r1, #2]
	strb r0, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	ldr r0, [r5, #0xc]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x10]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	cmp r6, #0
	bne _08089CA0
	ldr r0, [r4, #8]
	ldr r1, _08089C98 @ =0xFFFFFBFF
	ands r0, r1
	ldr r1, _08089C9C @ =0xFFFFF7FF
	ands r0, r1
	b _08089CDA
	.align 2, 0
_08089C94: .4byte gUnknown_080D6780
_08089C98: .4byte 0xFFFFFBFF
_08089C9C: .4byte 0xFFFFF7FF
_08089CA0:
	cmp r6, #1
	bne _08089CB8
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	ldr r1, _08089CB4 @ =0xFFFFF7FF
	ands r0, r1
	b _08089CDA
	.align 2, 0
_08089CB4: .4byte 0xFFFFF7FF
_08089CB8:
	cmp r6, #2
	bne _08089CC8
	ldr r0, [r4, #8]
	ldr r1, _08089CC4 @ =0xFFFFFBFF
	ands r0, r1
	b _08089CD4
	.align 2, 0
_08089CC4: .4byte 0xFFFFFBFF
_08089CC8:
	cmp r6, #3
	bne _08089CDC
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
_08089CD4:
	movs r1, #0x80
	lsls r1, r1, #4
	orrs r0, r1
_08089CDA:
	str r0, [r4, #8]
_08089CDC:
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #3
	bls _08089C54
	adds r4, r5, #0
	adds r4, #0x6c
	ldrb r0, [r5, #8]
	cmp r0, #0
	bne _08089D0C
	ldr r0, [r5, #0xc]
	asrs r0, r0, #8
	subs r0, #0x41
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x10]
	asrs r0, r0, #8
	adds r0, #0xc
	b _08089D1E
_08089D0C:
	cmp r0, #1
	bne _08089D20
	ldr r0, [r5, #0xc]
	asrs r0, r0, #8
	subs r0, #0x2d
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x10]
	asrs r0, r0, #8
	adds r0, #8
_08089D1E:
	strh r0, [r4, #0x12]
_08089D20:
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	adds r4, r5, #0
	adds r4, #0x44
	ldrb r0, [r5, #8]
	cmp r0, #0
	bne _08089D50
	ldr r0, [r5, #4]
	ldrb r0, [r0]
	cmp r0, #0
	bne _08089D48
	ldr r1, _08089D44 @ =gUnknown_080D67F8
	b _08089D66
	.align 2, 0
_08089D44: .4byte gUnknown_080D67F8
_08089D48:
	ldr r1, _08089D4C @ =gUnknown_080D6828
	b _08089D66
	.align 2, 0
_08089D4C: .4byte gUnknown_080D6828
_08089D50:
	cmp r0, #1
	bne _08089D7A
	ldr r0, [r5, #4]
	ldrb r0, [r0]
	cmp r0, #0
	bne _08089D64
	ldr r1, _08089D60 @ =gUnknown_080D6798
	b _08089D66
	.align 2, 0
_08089D60: .4byte gUnknown_080D6798
_08089D64:
	ldr r1, _08089D9C @ =gUnknown_080D67C8
_08089D66:
	ldrb r0, [r5]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r4, #0xc]
	ldrb r0, [r5]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrb r0, [r0, #2]
	strb r0, [r4, #0x1a]
_08089D7A:
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	ldr r0, [r5, #0xc]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x10]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08089D9C: .4byte gUnknown_080D67C8

	thumb_func_start sub_8089DA0
sub_8089DA0: @ 0x08089DA0
	push {r4, r5, r6, lr}
	sub sp, #0x10
	adds r1, r0, #0
	movs r5, #0
	adds r0, #0x18
	str r0, [sp]
	adds r0, #8
	str r0, [sp, #4]
	adds r0, #8
	str r0, [sp, #8]
	adds r0, #8
	str r0, [sp, #0xc]
	movs r3, #0
	movs r4, #0xaa
	lsls r4, r4, #8
	adds r6, r1, #7
_08089DC0:
	lsls r0, r3, #2
	add r0, sp
	ldr r1, [r0]
	ldr r2, [r1]
	cmp r2, r4
	bgt _08089DD6
	str r4, [r1]
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	b _08089DE0
_08089DD6:
	adds r0, r6, r3
	ldrb r0, [r0]
	lsls r0, r0, #8
	subs r0, r2, r0
	str r0, [r1]
_08089DE0:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #3
	bls _08089DC0
	adds r0, r5, #0
	add sp, #0x10
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_8089DF4
sub_8089DF4: @ 0x08089DF4
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	adds r1, r0, #0
	movs r4, #0
	adds r0, #0x18
	str r0, [sp]
	adds r0, #8
	str r0, [sp, #4]
	adds r0, #8
	str r0, [sp, #8]
	adds r0, #8
	str r0, [sp, #0xc]
	movs r3, #0
	ldr r7, _08089E2C @ =0x00012BFF
	movs r6, #0x96
	lsls r6, r6, #9
	adds r5, r1, #7
_08089E16:
	lsls r0, r3, #2
	add r0, sp
	ldr r1, [r0]
	ldr r2, [r1]
	cmp r2, r7
	ble _08089E30
	str r6, [r1]
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	b _08089E3A
	.align 2, 0
_08089E2C: .4byte 0x00012BFF
_08089E30:
	adds r0, r5, r3
	ldrb r0, [r0]
	lsls r0, r0, #9
	adds r0, r2, r0
	str r0, [r1]
_08089E3A:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #3
	bls _08089E16
	adds r0, r4, #0
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8089E50
sub_8089E50: @ 0x08089E50
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	movs r5, #0
	adds r1, r0, #0
	adds r1, #0x38
	str r1, [sp]
	adds r1, #8
	str r1, [sp, #4]
	movs r3, #0
	mov r7, sp
	movs r4, #0xaa
	lsls r4, r4, #8
	adds r6, r0, #7
_08089E6A:
	lsls r0, r3, #2
	adds r0, r0, r7
	ldr r1, [r0]
	ldr r2, [r1]
	cmp r2, r4
	bgt _08089E80
	str r4, [r1]
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	b _08089E8A
_08089E80:
	adds r0, r6, r3
	ldrb r0, [r0]
	lsls r0, r0, #8
	subs r0, r2, r0
	str r0, [r1]
_08089E8A:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #1
	bls _08089E6A
	adds r0, r5, #0
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8089EA0
sub_8089EA0: @ 0x08089EA0
	push {r4, r5, r6, lr}
	sub sp, #8
	mov ip, r0
	movs r4, #0
	adds r0, #0x38
	str r0, [sp]
	adds r0, #8
	str r0, [sp, #4]
	movs r3, #0
	mov r5, sp
	ldr r6, _08089ED0 @ =0x00012BFF
_08089EB6:
	lsls r0, r3, #2
	adds r0, r0, r5
	ldr r1, [r0]
	ldr r2, [r1]
	cmp r2, r6
	ble _08089ED4
	movs r0, #0x96
	lsls r0, r0, #9
	str r0, [r1]
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	b _08089EE2
	.align 2, 0
_08089ED0: .4byte 0x00012BFF
_08089ED4:
	mov r0, ip
	adds r0, #7
	adds r0, r0, r3
	ldrb r0, [r0]
	lsls r0, r0, #9
	adds r0, r2, r0
	str r0, [r1]
_08089EE2:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #1
	bls _08089EB6
	adds r0, r4, #0
	add sp, #8
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8089EF8
sub_8089EF8: @ 0x08089EF8
	movs r1, #0
	str r1, [r0, #0x50]
	ldr r1, [r0, #0x54]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r1, r2
	str r1, [r0, #0x54]
	bx lr

	thumb_func_start sub_8089F08
sub_8089F08: @ 0x08089F08
	push {lr}
	sub sp, #0x10
	adds r1, r0, #0
	adds r1, #0x72
	ldrh r1, [r1]
	lsrs r1, r1, #6
	adds r0, #0x74
	movs r3, #0
	ldrsh r2, [r0, r3]
	movs r0, #0x40
	str r0, [sp]
	movs r0, #0x48
	str r0, [sp, #4]
	movs r0, #0x50
	str r0, [sp, #8]
	ldr r0, _08089F3C @ =gBgAffineRegs
	str r0, [sp, #0xc]
	adds r0, r1, #0
	adds r1, r2, #0
	movs r3, #0x40
	bl sa2__sub_8003EE4
	add sp, #0x10
	pop {r0}
	bx r0
	.align 2, 0
_08089F3C: .4byte gBgAffineRegs

	thumb_func_start sub_8089F40
sub_8089F40: @ 0x08089F40
	ldr r2, _08089F50 @ =gBgScrollRegs
	ldr r1, [r0, #0x50]
	asrs r1, r1, #8
	strh r1, [r2, #4]
	ldr r0, [r0, #0x54]
	asrs r0, r0, #8
	strh r0, [r2, #6]
	bx lr
	.align 2, 0
_08089F50: .4byte gBgScrollRegs

	thumb_func_start sub_8089F54
sub_8089F54: @ 0x08089F54
	push {r4, lr}
	ldr r0, _08089F7C @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_8087A48
	ldrb r0, [r4, #1]
	subs r0, #2
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _08089F80
	adds r0, r4, #0
	bl sub_80877F4
	b _08089F86
	.align 2, 0
_08089F7C: .4byte gCurTask
_08089F80:
	adds r0, r4, #0
	bl sub_8087590
_08089F86:
	adds r0, r4, #0
	bl sub_8087498
	ldrb r0, [r4, #1]
	subs r0, #2
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _08089FA4
	bl m4aMPlayAllStop
	movs r0, #0x48
	bl m4aSongNumStart
	b _08089FAE
_08089FA4:
	bl m4aMPlayAllStop
	movs r0, #2
	bl m4aSongNumStart
_08089FAE:
	ldr r0, _08089FC4 @ =gCurTask
	ldr r2, [r0]
	ldr r1, _08089FC8 @ =gUnknown_080D6758
	ldrb r0, [r4, #1]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	str r0, [r2, #8]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08089FC4: .4byte gCurTask
_08089FC8: .4byte gUnknown_080D6758

	thumb_func_start sub_8089FCC
sub_8089FCC: @ 0x08089FCC
	push {r4, r5, lr}
	ldr r5, _0808A058 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_8089028
	adds r0, r4, #0
	bl sub_80890F8
	adds r0, r4, #0
	bl sub_8088FD4
	adds r0, r4, #0
	bl sub_8089EF8
	adds r0, r4, #0
	bl sub_8089150
	adds r0, r4, #0
	bl sub_80891E4
	adds r0, r4, #0
	bl sub_8089398
	adds r0, r4, #0
	bl sub_80894BC
	adds r0, r4, #0
	bl sub_8089308
	adds r0, r4, #0
	bl sub_8089428
	adds r0, r4, #0
	bl sub_8089F40
	adds r0, r4, #0
	bl sub_8089F08
	adds r0, r4, #0
	bl sub_8089704
	adds r0, r4, #0
	bl sub_808927C
	adds r0, r4, #0
	bl sub_8089DA0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #4
	bne _0808A052
	adds r0, r4, #0
	bl sub_8089028
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808A052
	movs r0, #1
	strb r0, [r4, #2]
	ldr r1, [r5]
	ldr r0, _0808A05C @ =sub_808819C
	str r0, [r1, #8]
_0808A052:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808A058: .4byte gCurTask
_0808A05C: .4byte sub_808819C

	thumb_func_start sub_808A060
sub_808A060: @ 0x0808A060
	push {r4, r5, lr}
	ldr r5, _0808A0D0 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_80890F8
	adds r0, r4, #0
	bl sub_8088FD4
	adds r0, r4, #0
	bl sub_8089EF8
	adds r0, r4, #0
	bl sub_8089398
	adds r0, r4, #0
	bl sub_80894BC
	adds r0, r4, #0
	bl sub_8089308
	adds r0, r4, #0
	bl sub_8089428
	adds r0, r4, #0
	bl sub_8089F40
	adds r0, r4, #0
	bl sub_8089F08
	adds r0, r4, #0
	bl sub_8089704
	adds r0, r4, #0
	bl sub_808927C
	adds r0, r4, #0
	bl sub_8089DA0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #4
	bne _0808A0C8
	movs r0, #1
	strb r0, [r4, #2]
	ldr r1, [r5]
	ldr r0, _0808A0D4 @ =sub_808819C
	str r0, [r1, #8]
_0808A0C8:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808A0D0: .4byte gCurTask
_0808A0D4: .4byte sub_808819C

	thumb_func_start sub_808A0D8
sub_808A0D8: @ 0x0808A0D8
	push {r4, r5, lr}
	ldr r5, _0808A13C @ =gCurTask
	ldr r0, [r5]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	adds r0, r4, #0
	bl sub_80890F8
	adds r0, r4, #0
	bl sub_8088FD4
	adds r0, r4, #0
	bl sub_8089EF8
	adds r0, r4, #0
	bl sub_8089150
	adds r0, r4, #0
	bl sub_80891E4
	adds r0, r4, #0
	bl sub_80895E0
	adds r0, r4, #0
	bl sub_8089550
	adds r0, r4, #0
	bl sub_8089F40
	adds r0, r4, #0
	bl sub_8089F08
	adds r0, r4, #0
	bl sub_8089704
	adds r0, r4, #0
	bl sub_8089E50
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #2
	bne _0808A136
	ldr r1, [r5]
	ldr r0, _0808A140 @ =sub_80889CC
	str r0, [r1, #8]
_0808A136:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808A13C: .4byte gCurTask
_0808A140: .4byte sub_80889CC

	thumb_func_start sub_808A144
sub_808A144: @ 0x0808A144
	push {r4, r5, lr}
	ldr r5, _0808A1A4 @ =gCurTask
	ldr r0, [r5]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	adds r0, r4, #0
	bl sub_8088FD4
	adds r0, r4, #0
	bl sub_8089EF8
	adds r0, r4, #0
	bl sub_8089150
	adds r0, r4, #0
	bl sub_80891E4
	adds r0, r4, #0
	bl sub_80895E0
	adds r0, r4, #0
	bl sub_8089550
	adds r0, r4, #0
	bl sub_8089F40
	adds r0, r4, #0
	bl sub_8089F08
	adds r0, r4, #0
	bl sub_8089704
	adds r0, r4, #0
	bl sub_8089EA0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #2
	bne _0808A19C
	ldr r1, [r5]
	ldr r0, _0808A1A8 @ =sub_8087C74
	str r0, [r1, #8]
_0808A19C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808A1A4: .4byte gCurTask
_0808A1A8: .4byte sub_8087C74

	thumb_func_start sub_808A1AC
sub_808A1AC: @ 0x0808A1AC
	bx lr
	.align 2, 0

	thumb_func_start sub_808A1B0
sub_808A1B0: @ 0x0808A1B0
	push {r4, r5, r6, lr}
	mov r6, sb
	mov r5, r8
	push {r5, r6}
	sub sp, #4
	adds r6, r0, #0
	mov r8, r1
	mov sb, r2
	adds r4, r3, #0
	ldr r5, [sp, #0x1c]
	lsls r6, r6, #0x18
	lsrs r6, r6, #0x18
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	ldr r0, _0808A21C @ =sub_808A22C
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r1, _0808A220 @ =sub_808A1AC
	str r1, [sp]
	movs r1, #0x94
	movs r3, #0
	bl TaskCreate
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	ldr r1, _0808A224 @ =gSaveGame
	ldr r2, _0808A228 @ =0x00000366
	adds r1, r1, r2
	ldrb r1, [r1]
	movs r2, #0
	strb r1, [r0]
	mov r1, r8
	str r1, [r0, #4]
	strb r6, [r0, #8]
	lsls r4, r4, #8
	str r4, [r0, #0xc]
	lsls r5, r5, #8
	str r5, [r0, #0x10]
	str r2, [r0, #0x14]
	str r2, [r0, #0x18]
	mov r1, sb
	bl sub_8089B38
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808A21C: .4byte sub_808A22C
_0808A220: .4byte sub_808A1AC
_0808A224: .4byte gSaveGame
_0808A228: .4byte 0x00000366

	thumb_func_start sub_808A22C
sub_808A22C: @ 0x0808A22C
	push {r4, r5, lr}
	ldr r5, _0808A254 @ =gCurTask
	ldr r0, [r5]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	adds r0, r4, #0
	bl sub_8089C48
	ldr r0, [r4, #4]
	ldrb r0, [r0]
	cmp r0, #0xb
	bne _0808A24E
	ldr r0, [r5]
	bl TaskDestroy
_0808A24E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808A254: .4byte gCurTask
_0808A258:
	.byte 0x70, 0x47, 0x00, 0x00

	thumb_func_start sub_808A25C
sub_808A25C: @ 0x0808A25C
	push {r4, r5, lr}
	sub sp, #8
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldr r1, _0808A288 @ =gDispCnt
	ldr r2, _0808A28C @ =0x00001041
	adds r0, r2, #0
	strh r0, [r1]
	cmp r4, #2
	bne _0808A298
	ldr r0, _0808A290 @ =sub_808A65C
	movs r1, #0xb2
	lsls r1, r1, #1
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r3, _0808A294 @ =sub_808AF0C
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	b _0808A2AC
	.align 2, 0
_0808A288: .4byte gDispCnt
_0808A28C: .4byte 0x00001041
_0808A290: .4byte sub_808A65C
_0808A294: .4byte sub_808AF0C
_0808A298:
	ldr r0, _0808A304 @ =sub_808AA34
	movs r1, #0xb2
	lsls r1, r1, #1
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r3, _0808A308 @ =sub_808AF0C
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
_0808A2AC:
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r5, r0, r1
	ldr r3, _0808A30C @ =0x03000160
	adds r0, r0, r3
	movs r1, #0
	strb r1, [r0]
	movs r2, #0
	movs r0, #0x1e
	strh r0, [r5, #0x1e]
	movs r0, #0xb4
	strh r0, [r5, #4]
	strh r1, [r5, #6]
	strh r4, [r5, #0xc]
	ldr r0, _0808A310 @ =gSaveGame
	ldr r3, _0808A314 @ =0x00000366
	adds r0, r0, r3
	ldrb r0, [r0]
	strb r0, [r5]
	strh r1, [r5, #8]
	strh r1, [r5, #0xa]
	strb r2, [r5, #2]
	movs r0, #0xf0
	lsls r0, r0, #7
	strh r0, [r5, #0x12]
	movs r0, #0xc8
	lsls r0, r0, #7
	strh r0, [r5, #0x14]
	movs r0, #0xf0
	lsls r0, r0, #8
	strh r0, [r5, #0x16]
	movs r0, #0xe0
	lsls r0, r0, #3
	strh r0, [r5, #0x18]
	strh r1, [r5, #0x1a]
	movs r0, #0x82
	lsls r0, r0, #8
	strh r0, [r5, #0x1c]
	cmp r4, #2
	bne _0808A318
	movs r0, #0x40
	b _0808A31C
	.align 2, 0
_0808A304: .4byte sub_808AA34
_0808A308: .4byte sub_808AF0C
_0808A30C: .4byte 0x03000160
_0808A310: .4byte gSaveGame
_0808A314: .4byte 0x00000366
_0808A318:
	movs r0, #0x80
	lsls r0, r0, #1
_0808A31C:
	strh r0, [r5, #0xe]
	ldrh r0, [r5, #0xc]
	cmp r0, #0
	beq _0808A328
	cmp r0, #2
	bne _0808A33C
_0808A328:
	ldr r1, _0808A334 @ =gBldRegs
	ldr r0, _0808A338 @ =0x00003FBF
	strh r0, [r1]
	adds r2, r1, #0
	b _0808A346
	.align 2, 0
_0808A334: .4byte gBldRegs
_0808A338: .4byte 0x00003FBF
_0808A33C:
	ldr r2, _0808A3B8 @ =gBldRegs
	cmp r0, #1
	bne _0808A346
	ldr r0, _0808A3BC @ =0x00003FFF
	strh r0, [r2]
_0808A346:
	movs r3, #0
	movs r1, #0
	movs r0, #0xf
	strh r0, [r2, #4]
	ldr r0, _0808A3C0 @ =0x06010000
	str r0, [r5, #0x20]
	str r1, [r5, #0x24]
	str r1, [sp, #4]
	ldr r2, _0808A3C4 @ =0x040000D4
	add r0, sp, #4
	str r0, [r2]
	ldr r0, _0808A3C8 @ =gBgCntRegs
	ldrh r1, [r0, #4]
	movs r0, #0xc
	ands r0, r1
	lsls r0, r0, #0xc
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r0, r0, r1
	str r0, [r2, #4]
	ldr r0, _0808A3CC @ =0x85000010
	str r0, [r2, #8]
	ldr r0, [r2, #8]
	ldr r4, _0808A3D0 @ =gUnknown_03006230
	strb r3, [r4, #2]
	ldr r0, _0808A3D4 @ =gUnknown_03003590
	strb r3, [r0, #8]
	strb r3, [r0, #9]
	movs r1, #0xff
	strb r1, [r0, #0xa]
	movs r2, #0x20
	strb r2, [r0, #0xb]
	strb r3, [r4, #1]
	strb r3, [r0, #4]
	strb r3, [r0, #5]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #6]
	strb r2, [r0, #7]
	strb r3, [r4]
	strb r3, [r0]
	strb r3, [r0, #1]
	strb r1, [r0, #2]
	strb r2, [r0, #3]
	adds r0, r5, #0
	bl sub_808A4EC
	adds r0, r5, #0
	bl sub_808A3D8
	movs r0, #1
	bl m4aSongNumStart
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808A3B8: .4byte gBldRegs
_0808A3BC: .4byte 0x00003FFF
_0808A3C0: .4byte 0x06010000
_0808A3C4: .4byte 0x040000D4
_0808A3C8: .4byte gBgCntRegs
_0808A3CC: .4byte 0x85000010
_0808A3D0: .4byte gUnknown_03006230
_0808A3D4: .4byte gUnknown_03003590

	thumb_func_start sub_808A3D8
sub_808A3D8: @ 0x0808A3D8
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r7, r0, #0
	adds r0, #0x28
	ldr r3, [r7, #0x20]
	str r3, [r7, #0x28]
	ldr r4, _0808A4E0 @ =gUnknown_080D6898
	ldrb r1, [r7]
	lsls r1, r1, #3
	adds r2, r4, #4
	adds r1, r1, r2
	ldr r1, [r1]
	lsls r1, r1, #5
	adds r3, r3, r1
	str r3, [r7, #0x20]
	ldrb r1, [r7]
	lsls r1, r1, #3
	adds r1, r1, r4
	ldrh r1, [r1]
	movs r2, #0
	mov sb, r2
	movs r5, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r7]
	lsls r1, r1, #3
	adds r1, r1, r4
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldrh r1, [r7, #0x12]
	lsrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldrh r1, [r7, #0x14]
	lsrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r5, [r0, #0x14]
	strh r5, [r0, #0xe]
	strh r5, [r0, #0x16]
	movs r3, #0x10
	mov r8, r3
	mov r1, r8
	strb r1, [r0, #0x1c]
	mov r2, sb
	strb r2, [r0, #0x1f]
	movs r6, #0x80
	lsls r6, r6, #5
	str r6, [r0, #8]
	movs r4, #1
	rsbs r4, r4, #0
	str r4, [r0, #0x20]
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	adds r0, #0x78
	ldr r2, [r7, #0x20]
	str r2, [r7, #0x78]
	ldr r3, _0808A4E4 @ =gUnknown_080D68C8
	ldr r1, [r3, #4]
	lsls r1, r1, #5
	adds r2, r2, r1
	str r2, [r7, #0x20]
	ldrh r1, [r3]
	strh r1, [r0, #0xc]
	ldrb r1, [r3, #2]
	strb r1, [r0, #0x1a]
	adds r1, r4, #0
	strb r1, [r0, #0x1b]
	ldrh r1, [r7, #0x1a]
	lsrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldrh r1, [r7, #0x1c]
	lsrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r5, [r0, #0x14]
	strh r5, [r0, #0xe]
	strh r5, [r0, #0x16]
	mov r3, r8
	strb r3, [r0, #0x1c]
	mov r1, sb
	strb r1, [r0, #0x1f]
	str r6, [r0, #8]
	str r4, [r0, #0x20]
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	adds r0, #0x50
	ldrb r1, [r7]
	rsbs r2, r1, #0
	orrs r2, r1
	lsrs r2, r2, #0x1f
	ldr r1, [r7, #0x20]
	str r1, [r7, #0x50]
	movs r3, #0xe0
	lsls r3, r3, #1
	adds r1, r1, r3
	str r1, [r7, #0x20]
	ldr r1, _0808A4E8 @ =gUnknown_080D6858
	lsls r2, r2, #5
	adds r2, r2, r1
	ldrh r1, [r2]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	adds r1, r4, #0
	strb r1, [r0, #0x1b]
	ldrh r1, [r7, #0x16]
	lsrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldrh r1, [r7, #0x18]
	lsrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r5, [r0, #0x14]
	strh r5, [r0, #0xe]
	strh r5, [r0, #0x16]
	mov r1, r8
	strb r1, [r0, #0x1c]
	mov r2, sb
	strb r2, [r0, #0x1f]
	str r6, [r0, #8]
	str r4, [r0, #0x20]
	bl UpdateSpriteAnimation
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808A4E0: .4byte gUnknown_080D6898
_0808A4E4: .4byte gUnknown_080D68C8
_0808A4E8: .4byte gUnknown_080D6858

	thumb_func_start sub_808A4EC
sub_808A4EC: @ 0x0808A4EC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r7, r0, #0
	ldrb r0, [r7]
	rsbs r6, r0, #0
	orrs r6, r0
	lsrs r6, r6, #0x1f
	ldr r0, _0808A628 @ =gDispCnt
	mov sb, r0
	ldrh r0, [r0]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r2, #0
	orrs r0, r1
	mov r1, sb
	strh r0, [r1]
	movs r4, #0
	ldr r0, _0808A62C @ =0x00001783
	ldr r2, _0808A630 @ =gBgCntRegs
	strh r0, [r2]
	ldr r0, _0808A634 @ =gBgScrollRegs
	mov r8, r0
	strh r4, [r0]
	strh r4, [r0, #2]
	adds r0, r7, #0
	adds r0, #0xa0
	movs r1, #0xc0
	lsls r1, r1, #0x13
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _0808A638 @ =0x0600B800
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	movs r1, #0x92
	lsls r1, r1, #1
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	movs r1, #0x1e
	strh r1, [r0, #0x26]
	movs r1, #0x14
	strh r1, [r0, #0x28]
	adds r1, r7, #0
	adds r1, #0xca
	movs r2, #0
	strb r2, [r1]
	movs r1, #4
	strh r1, [r0, #0x2e]
	bl DrawBackground
	mov r1, sb
	ldrh r0, [r1]
	movs r2, #0x80
	lsls r2, r2, #2
	adds r1, r2, #0
	orrs r0, r1
	mov r1, sb
	strh r0, [r1]
	ldr r0, _0808A63C @ =0x00001F8A
	ldr r2, _0808A630 @ =gBgCntRegs
	strh r0, [r2, #2]
	ldr r0, _0808A640 @ =0x0000FFEC
	mov r1, r8
	strh r0, [r1, #4]
	adds r0, #0xc
	strh r0, [r1, #6]
	adds r0, r7, #0
	adds r0, #0xe0
	ldr r1, _0808A644 @ =0x06008000
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _0808A648 @ =0x0600F800
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	ldr r2, _0808A64C @ =gUnknown_080D68D0
	mov sl, r2
	lsls r5, r6, #2
	lsls r6, r6, #3
	add r6, sl
	ldrh r1, [r6]
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	movs r1, #0x19
	strh r1, [r0, #0x26]
	movs r6, #0xa
	strh r6, [r0, #0x28]
	movs r2, #0x85
	lsls r2, r2, #1
	adds r1, r7, r2
	movs r2, #0
	strb r2, [r1]
	movs r1, #5
	strh r1, [r0, #0x2e]
	bl DrawBackground
	mov r1, sb
	ldrh r0, [r1]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	orrs r0, r1
	mov r1, sb
	strh r0, [r1]
	ldr r0, _0808A650 @ =0x00005D8D
	ldr r2, _0808A630 @ =gBgCntRegs
	strh r0, [r2, #4]
	mov r0, r8
	strh r4, [r0, #8]
	strh r4, [r0, #0xa]
	movs r1, #0x90
	lsls r1, r1, #1
	adds r0, r7, r1
	ldr r1, _0808A654 @ =0x0600C000
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _0808A658 @ =0x0600E800
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	adds r5, #1
	lsls r5, r5, #1
	add r5, sl
	ldrh r1, [r5]
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	movs r1, #8
	strh r1, [r0, #0x26]
	strh r6, [r0, #0x28]
	movs r2, #0xa5
	lsls r2, r2, #1
	adds r1, r7, r2
	movs r2, #0
	strb r2, [r1]
	movs r1, #6
	strh r1, [r0, #0x2e]
	bl DrawBackground
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808A628: .4byte gDispCnt
_0808A62C: .4byte 0x00001783
_0808A630: .4byte gBgCntRegs
_0808A634: .4byte gBgScrollRegs
_0808A638: .4byte 0x0600B800
_0808A63C: .4byte 0x00001F8A
_0808A640: .4byte 0x0000FFEC
_0808A644: .4byte 0x06008000
_0808A648: .4byte 0x0600F800
_0808A64C: .4byte gUnknown_080D68D0
_0808A650: .4byte 0x00005D8D
_0808A654: .4byte 0x0600C000
_0808A658: .4byte 0x0600E800

	thumb_func_start sub_808A65C
sub_808A65C: @ 0x0808A65C
	push {r4, lr}
	ldr r0, _0808A69C @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r2, _0808A6A0 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _0808A6A4 @ =gWinRegs
	movs r3, #0
	movs r2, #0
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	movs r0, #0x22
	strh r0, [r1, #8]
	strh r2, [r1, #0xa]
	ldrh r0, [r4, #0xc]
	cmp r0, #0
	beq _0808A696
	cmp r0, #2
	bne _0808A6B0
_0808A696:
	ldr r1, _0808A6A8 @ =gBldRegs
	ldr r0, _0808A6AC @ =0x00003FBF
	b _0808A6B8
	.align 2, 0
_0808A69C: .4byte gCurTask
_0808A6A0: .4byte gDispCnt
_0808A6A4: .4byte gWinRegs
_0808A6A8: .4byte gBldRegs
_0808A6AC: .4byte 0x00003FBF
_0808A6B0:
	cmp r0, #1
	bne _0808A6CE
	ldr r1, _0808A708 @ =gBldRegs
	ldr r0, _0808A70C @ =0x00003FFF
_0808A6B8:
	strh r0, [r1]
	movs r0, #0x10
	strh r0, [r1, #4]
	movs r0, #3
	strh r0, [r4, #0xc]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r4, #0xa]
	movs r0, #0x80
	lsls r0, r0, #0xb
	str r0, [r4, #0x24]
_0808A6CE:
	adds r0, r4, #0
	bl sub_808AEDC
	ldr r3, _0808A708 @ =gBldRegs
	ldrh r2, [r3, #4]
	cmp r2, #0
	beq _0808A71C
	ldrh r0, [r4, #0xa]
	lsrs r0, r0, #8
	strh r0, [r3, #4]
	ldrh r0, [r4, #0xa]
	ldrh r1, [r4, #0xe]
	subs r0, r0, r1
	strh r0, [r4, #0xa]
	ldr r0, _0808A710 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _0808A74E
	movs r0, #0
	strh r0, [r3, #4]
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r4, #0xe]
	ldr r0, _0808A714 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808A718 @ =sub_808AA34
	b _0808A74C
	.align 2, 0
_0808A708: .4byte gBldRegs
_0808A70C: .4byte 0x00003FFF
_0808A710: .4byte gPressedKeys
_0808A714: .4byte gCurTask
_0808A718: .4byte sub_808AA34
_0808A71C:
	strh r2, [r3, #4]
	ldrh r0, [r4, #0xe]
	cmp r0, #0xff
	bls _0808A734
	ldr r0, _0808A72C @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808A730 @ =sub_808ABD0
	b _0808A74C
	.align 2, 0
_0808A72C: .4byte gCurTask
_0808A730: .4byte sub_808ABD0
_0808A734:
	ldr r1, _0808A754 @ =gWinRegs
	movs r0, #0x26
	strh r0, [r1, #8]
	ldr r0, _0808A758 @ =0x00002244
	strh r0, [r3]
	strh r2, [r4, #0x10]
	ldr r0, _0808A75C @ =gUnknown_080D68E0
	ldrh r0, [r0]
	strh r0, [r3, #2]
	ldr r0, _0808A760 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808A764 @ =sub_808A854
_0808A74C:
	str r0, [r1, #8]
_0808A74E:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808A754: .4byte gWinRegs
_0808A758: .4byte 0x00002244
_0808A75C: .4byte gUnknown_080D68E0
_0808A760: .4byte gCurTask
_0808A764: .4byte sub_808A854

	thumb_func_start sub_808A768
sub_808A768: @ 0x0808A768
	push {r4, r5, r6, lr}
	ldr r6, _0808A7D0 @ =gCurTask
	ldr r0, [r6]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r5, _0808A7D4 @ =gBldRegs
	movs r1, #0
	ldr r0, _0808A7D8 @ =0x00003FFF
	strh r0, [r5]
	ldrh r0, [r4, #0xc]
	cmp r0, #0
	bne _0808A78C
	strh r1, [r5, #4]
	movs r0, #2
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xa]
_0808A78C:
	movs r2, #0x1e
	ldrsh r0, [r4, r2]
	cmp r0, #7
	ble _0808A796
	strh r1, [r4, #0x1e]
_0808A796:
	movs r1, #0x1e
	ldrsh r0, [r4, r1]
	cmp r0, #1
	ble _0808A7A4
	adds r0, r4, #0
	bl sub_808AEA4
_0808A7A4:
	adds r0, r4, #0
	bl sub_808AEC0
	ldrh r0, [r4, #8]
	subs r0, #1
	strh r0, [r4, #8]
	ldrh r0, [r4, #0x1e]
	adds r0, #1
	strh r0, [r4, #0x1e]
	ldrh r0, [r5, #4]
	cmp r0, #0xe
	bhi _0808A7DC
	ldrh r0, [r4, #0xa]
	lsrs r0, r0, #8
	strh r0, [r5, #4]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r2, #0
	ldrh r1, [r4, #0xa]
	adds r0, r0, r1
	strh r0, [r4, #0xa]
	b _0808A7EA
	.align 2, 0
_0808A7D0: .4byte gCurTask
_0808A7D4: .4byte gBldRegs
_0808A7D8: .4byte 0x00003FFF
_0808A7DC:
	movs r0, #0
	movs r1, #1
	bl LaunchChaoMenu
	ldr r0, [r6]
	bl TaskDestroy
_0808A7EA:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_808A7F0
sub_808A7F0: @ 0x0808A7F0
	push {r4, lr}
	ldr r0, _0808A830 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_808AEC0
	ldrh r0, [r4, #0xc]
	cmp r0, #0
	bne _0808A822
	ldr r1, _0808A834 @ =gBldRegs
	ldrh r0, [r1, #4]
	cmp r0, #0
	beq _0808A822
	ldrh r0, [r4, #0xa]
	lsrs r0, r0, #8
	strh r0, [r1, #4]
	ldr r1, _0808A838 @ =0xFFFFFF00
	adds r0, r1, #0
	ldrh r1, [r4, #0xa]
	adds r0, r0, r1
	strh r0, [r4, #0xa]
_0808A822:
	ldrh r0, [r4, #8]
	cmp r0, #0
	beq _0808A83C
	subs r0, #1
	strh r0, [r4, #8]
	b _0808A844
	.align 2, 0
_0808A830: .4byte gCurTask
_0808A834: .4byte gBldRegs
_0808A838: .4byte 0xFFFFFF00
_0808A83C:
	ldr r0, _0808A84C @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808A850 @ =sub_808ABD0
	str r0, [r1, #8]
_0808A844:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808A84C: .4byte gCurTask
_0808A850: .4byte sub_808ABD0

	thumb_func_start sub_808A854
sub_808A854: @ 0x0808A854
	push {r4, r5, lr}
	ldr r0, _0808A8CC @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	movs r5, #0
	ldr r0, [r4, #0x24]
	ldr r1, _0808A8D0 @ =0xFFFFE000
	adds r0, r0, r1
	str r0, [r4, #0x24]
	ldr r1, _0808A8D4 @ =0x0000FFFF
	cmp r0, r1
	bgt _0808A87A
	movs r0, #0x80
	lsls r0, r0, #9
	str r0, [r4, #0x24]
	movs r5, #1
_0808A87A:
	ldrh r1, [r4, #0x10]
	lsrs r0, r1, #8
	cmp r0, #0xf
	bhi _0808A892
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r1, r2
	strh r0, [r4, #0x10]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x18
	cmp r0, #0x10
	bls _0808A89E
_0808A892:
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r4, #0x10]
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_0808A89E:
	ldr r2, _0808A8D8 @ =gBldRegs
	ldr r1, _0808A8DC @ =gUnknown_080D68E0
	ldrh r0, [r4, #0x10]
	lsrs r0, r0, #8
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2, #2]
	adds r0, r4, #0
	bl sub_808AEDC
	cmp r5, #1
	bls _0808A8C4
	movs r0, #0
	strb r0, [r4, #1]
	ldr r0, _0808A8CC @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808A8E0 @ =sub_808A8E4
	str r0, [r1, #8]
_0808A8C4:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808A8CC: .4byte gCurTask
_0808A8D0: .4byte 0xFFFFE000
_0808A8D4: .4byte 0x0000FFFF
_0808A8D8: .4byte gBldRegs
_0808A8DC: .4byte gUnknown_080D68E0
_0808A8E0: .4byte sub_808A8E4

	thumb_func_start sub_808A8E4
sub_808A8E4: @ 0x0808A8E4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x10
	ldr r0, _0808A9B0 @ =gCurTask
	mov r8, r0
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	ldr r2, _0808A9B4 @ =gBgScrollRegs
	ldr r4, _0808A9B8 @ =gUnknown_080D694C
	ldrb r0, [r5, #1]
	adds r0, r0, r4
	movs r1, #0
	ldrsb r1, [r0, r1]
	movs r3, #0x14
	rsbs r3, r3, #0
	adds r0, r3, #0
	subs r0, r0, r1
	movs r6, #0
	strh r0, [r2, #4]
	ldr r3, _0808A9BC @ =gUnknown_080D6956
	ldrb r0, [r5, #1]
	adds r0, r0, r3
	movs r1, #0
	ldrsb r1, [r0, r1]
	movs r7, #8
	rsbs r7, r7, #0
	adds r0, r7, #0
	subs r0, r0, r1
	strh r0, [r2, #6]
	ldr r2, [r5, #0x24]
	lsls r2, r2, #8
	asrs r2, r2, #0x10
	movs r0, #0x28
	str r0, [sp]
	ldrb r0, [r5, #1]
	adds r0, r0, r4
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r0, #0xb4
	str r0, [sp, #4]
	ldrb r0, [r5, #1]
	adds r0, r0, r3
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r0, #0x30
	str r0, [sp, #8]
	ldr r0, _0808A9C0 @ =gBgAffineRegs
	str r0, [sp, #0xc]
	movs r0, #0
	adds r1, r2, #0
	movs r3, #0x20
	bl sa2__sub_8003EE4
	ldrb r0, [r5, #1]
	adds r0, #1
	strb r0, [r5, #1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #9
	bls _0808A9A4
	ldr r2, _0808A9C4 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r2, _0808A9C8 @ =gWinRegs
	movs r0, #0xf0
	strh r0, [r2]
	movs r0, #0xa0
	strh r0, [r2, #4]
	ldrh r0, [r2, #8]
	movs r1, #0x26
	orrs r0, r1
	strh r0, [r2, #8]
	ldr r1, _0808A9CC @ =gBldRegs
	ldr r0, _0808A9D0 @ =0x00003FBF
	strh r0, [r1]
	strh r6, [r1, #4]
	movs r0, #3
	strh r0, [r5, #0xc]
	strh r6, [r5, #0xa]
	movs r0, #0x80
	lsls r0, r0, #2
	strh r0, [r5, #0xe]
	mov r7, r8
	ldr r1, [r7]
	ldr r0, _0808A9D4 @ =sub_808A9D8
	str r0, [r1, #8]
_0808A9A4:
	add sp, #0x10
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808A9B0: .4byte gCurTask
_0808A9B4: .4byte gBgScrollRegs
_0808A9B8: .4byte gUnknown_080D694C
_0808A9BC: .4byte gUnknown_080D6956
_0808A9C0: .4byte gBgAffineRegs
_0808A9C4: .4byte gDispCnt
_0808A9C8: .4byte gWinRegs
_0808A9CC: .4byte gBldRegs
_0808A9D0: .4byte 0x00003FBF
_0808A9D4: .4byte sub_808A9D8

	thumb_func_start sub_808A9D8
sub_808A9D8: @ 0x0808A9D8
	push {r4, r5, lr}
	ldr r5, _0808AA04 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_808AEDC
	ldr r1, _0808AA08 @ =gBldRegs
	ldrh r0, [r1, #4]
	cmp r0, #0xe
	bhi _0808AA0C
	ldrh r0, [r4, #0xa]
	lsrs r0, r0, #8
	strh r0, [r1, #4]
	ldrh r0, [r4, #0xe]
	ldrh r1, [r4, #0xa]
	adds r0, r0, r1
	strh r0, [r4, #0xa]
	b _0808AA26
	.align 2, 0
_0808AA04: .4byte gCurTask
_0808AA08: .4byte gBldRegs
_0808AA0C:
	movs r0, #0xf
	strh r0, [r1, #4]
	movs r0, #0xf0
	lsls r0, r0, #4
	strh r0, [r4, #0xa]
	ldr r2, _0808AA2C @ =gWinRegs
	ldrh r1, [r2, #8]
	movs r0, #0x33
	orrs r0, r1
	strh r0, [r2, #8]
	ldr r1, [r5]
	ldr r0, _0808AA30 @ =sub_808AA34
	str r0, [r1, #8]
_0808AA26:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808AA2C: .4byte gWinRegs
_0808AA30: .4byte sub_808AA34

	thumb_func_start sub_808AA34
sub_808AA34: @ 0x0808AA34
	push {r4, r5, r6, lr}
	mov r6, sb
	mov r5, r8
	push {r5, r6}
	ldr r0, _0808AB04 @ =gCurTask
	mov sb, r0
	ldr r0, [r0]
	ldrh r4, [r0, #6]
	movs r6, #0xc0
	lsls r6, r6, #0x12
	adds r6, r4, r6
	ldrb r0, [r6]
	rsbs r2, r0, #0
	orrs r2, r0
	lsrs r2, r2, #0x1f
	ldr r5, _0808AB08 @ =gDispCnt
	ldrh r1, [r5]
	ldr r0, _0808AB0C @ =0x0000FBFF
	ands r0, r1
	movs r3, #0x80
	lsls r3, r3, #2
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r5]
	ldr r1, _0808AB10 @ =gBgCntRegs
	movs r0, #0
	mov r8, r0
	movs r3, #0
	ldr r0, _0808AB14 @ =0x00001F8A
	strh r0, [r1, #2]
	ldr r1, _0808AB18 @ =gBgScrollRegs
	ldr r0, _0808AB1C @ =0x0000FFEC
	strh r0, [r1, #4]
	adds r0, #0xc
	strh r0, [r1, #6]
	ldr r1, _0808AB20 @ =0x030000E0
	adds r0, r4, r1
	ldr r1, _0808AB24 @ =0x06008000
	str r1, [r0, #4]
	strh r3, [r0, #0xa]
	ldr r1, _0808AB28 @ =0x0600F800
	str r1, [r0, #0xc]
	strh r3, [r0, #0x18]
	strh r3, [r0, #0x1a]
	ldr r1, _0808AB2C @ =gUnknown_080D68D0
	lsls r2, r2, #2
	adds r2, #2
	lsls r2, r2, #1
	adds r2, r2, r1
	ldrh r1, [r2]
	strh r1, [r0, #0x1c]
	strh r3, [r0, #0x1e]
	strh r3, [r0, #0x20]
	strh r3, [r0, #0x22]
	strh r3, [r0, #0x24]
	movs r1, #0x19
	strh r1, [r0, #0x26]
	movs r1, #0xa
	strh r1, [r0, #0x28]
	ldr r2, _0808AB30 @ =0x0300010A
	adds r4, r4, r2
	mov r3, r8
	strb r3, [r4]
	movs r1, #5
	strh r1, [r0, #0x2e]
	bl DrawBackground
	ldrh r0, [r5]
	movs r2, #0x80
	lsls r2, r2, #6
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r5]
	ldr r2, _0808AB34 @ =gWinRegs
	movs r0, #0xf0
	strh r0, [r2]
	movs r0, #0xa0
	strh r0, [r2, #4]
	ldrh r0, [r2, #8]
	movs r1, #0x26
	orrs r0, r1
	strh r0, [r2, #8]
	ldr r1, _0808AB38 @ =gBldRegs
	ldr r0, _0808AB3C @ =0x00003FBF
	strh r0, [r1]
	movs r0, #0xf
	strh r0, [r1, #4]
	movs r0, #0xf0
	lsls r0, r0, #4
	strh r0, [r6, #0xa]
	ldrh r0, [r2, #8]
	movs r1, #0x33
	orrs r0, r1
	strh r0, [r2, #8]
	mov r3, sb
	ldr r1, [r3]
	ldr r0, _0808AB40 @ =sub_808AB44
	str r0, [r1, #8]
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808AB04: .4byte gCurTask
_0808AB08: .4byte gDispCnt
_0808AB0C: .4byte 0x0000FBFF
_0808AB10: .4byte gBgCntRegs
_0808AB14: .4byte 0x00001F8A
_0808AB18: .4byte gBgScrollRegs
_0808AB1C: .4byte 0x0000FFEC
_0808AB20: .4byte 0x030000E0
_0808AB24: .4byte 0x06008000
_0808AB28: .4byte 0x0600F800
_0808AB2C: .4byte gUnknown_080D68D0
_0808AB30: .4byte 0x0300010A
_0808AB34: .4byte gWinRegs
_0808AB38: .4byte gBldRegs
_0808AB3C: .4byte 0x00003FBF
_0808AB40: .4byte sub_808AB44

	thumb_func_start sub_808AB44
sub_808AB44: @ 0x0808AB44
	push {r4, r5, lr}
	ldr r5, _0808AB80 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldrh r0, [r4, #0xe]
	cmp r0, #0xff
	bls _0808AB5E
	adds r0, r4, #0
	bl sub_808AEC0
_0808AB5E:
	ldr r2, _0808AB84 @ =gBldRegs
	ldrh r1, [r2, #4]
	cmp r1, #0
	bne _0808AB8C
	strh r1, [r2, #4]
	movs r0, #0x3c
	strh r0, [r4, #8]
	strh r1, [r4, #0xc]
	ldr r1, [r5]
	ldr r0, _0808AB88 @ =sub_808A7F0
	str r0, [r1, #8]
	movs r0, #0xfa
	lsls r0, r0, #1
	bl m4aSongNumStart
	b _0808ABC0
	.align 2, 0
_0808AB80: .4byte gCurTask
_0808AB84: .4byte gBldRegs
_0808AB88: .4byte sub_808A7F0
_0808AB8C:
	ldrh r0, [r4, #0xa]
	lsrs r0, r0, #8
	movs r3, #0
	strh r0, [r2, #4]
	ldrh r0, [r4, #0xa]
	ldrh r1, [r4, #0xe]
	subs r0, r0, r1
	strh r0, [r4, #0xa]
	lsls r0, r0, #0x10
	movs r1, #0xf0
	lsls r1, r1, #0x14
	cmp r0, r1
	bls _0808ABA8
	strh r3, [r4, #0xa]
_0808ABA8:
	ldr r0, _0808ABC8 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _0808ABC0
	movs r0, #0x3c
	strh r0, [r4, #8]
	strh r3, [r4, #0xc]
	ldr r1, [r5]
	ldr r0, _0808ABCC @ =sub_808A7F0
	str r0, [r1, #8]
_0808ABC0:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808ABC8: .4byte gPressedKeys
_0808ABCC: .4byte sub_808A7F0

	thumb_func_start sub_808ABD0
sub_808ABD0: @ 0x0808ABD0
	push {r4, r5, lr}
	ldr r5, _0808AC2C @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_808AEC0
	movs r1, #0x1e
	ldrsh r0, [r4, r1]
	cmp r0, #0x5a
	ble _0808ABF0
	movs r0, #0
	strh r0, [r4, #0x1e]
_0808ABF0:
	movs r1, #0x1e
	ldrsh r0, [r4, r1]
	cmp r0, #0x1d
	ble _0808ABFE
	adds r0, r4, #0
	bl sub_808AEA4
_0808ABFE:
	adds r0, r4, #0
	bl sub_808AEC0
	ldr r0, _0808AC30 @ =gPressedKeys
	ldrh r2, [r0]
	movs r0, #8
	ands r0, r2
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	cmp r3, #0
	beq _0808AC38
	movs r0, #0x6a
	bl m4aSongNumStart
	movs r0, #0x19
	strh r0, [r4, #6]
	movs r0, #2
	strh r0, [r4, #0x1e]
	ldr r1, [r5]
	ldr r0, _0808AC34 @ =sub_808AE4C
	str r0, [r1, #8]
	b _0808ACB2
	.align 2, 0
_0808AC2C: .4byte gCurTask
_0808AC30: .4byte gPressedKeys
_0808AC34: .4byte sub_808AE4C
_0808AC38:
	ldrh r1, [r4, #6]
	ldr r0, _0808AC48 @ =0x00000257
	cmp r1, r0
	bls _0808AC4C
	bl LaunchDemoPlay
	b _0808ACB2
	.align 2, 0
_0808AC48: .4byte 0x00000257
_0808AC4C:
	cmp r1, #0x3c
	bls _0808AC94
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r2
	cmp r0, #0
	beq _0808AC94
	ldrh r0, [r4, #4]
	cmp r0, #0xb3
	bhi _0808AC72
	ldr r1, _0808ACB8 @ =gStageData
	ldrb r0, [r1, #8]
	adds r0, #1
	strb r0, [r1, #8]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #2
	bls _0808AC72
	strb r3, [r1, #8]
_0808AC72:
	movs r0, #0
	strh r0, [r4, #4]
	strh r0, [r4, #6]
	adds r0, r4, #0
	bl sub_808AD14
	ldr r0, _0808ACBC @ =gMPlayTable
	ldr r0, [r0]
	bl MPlayStop
	movs r0, #0xfa
	lsls r0, r0, #1
	bl m4aSongNumStop
	movs r0, #0x6a
	bl m4aSongNumStart
_0808AC94:
	ldrh r0, [r4, #4]
	cmp r0, #0xb3
	bhi _0808ACA6
	adds r0, r4, #0
	bl sub_808ACC0
	ldrh r0, [r4, #4]
	adds r0, #1
	strh r0, [r4, #4]
_0808ACA6:
	ldrh r0, [r4, #6]
	adds r0, #1
	strh r0, [r4, #6]
	ldrh r0, [r4, #0x1e]
	adds r0, #1
	strh r0, [r4, #0x1e]
_0808ACB2:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808ACB8: .4byte gStageData
_0808ACBC: .4byte gMPlayTable

	thumb_func_start sub_808ACC0
sub_808ACC0: @ 0x0808ACC0
	push {r4, r5, lr}
	ldrb r1, [r0]
	rsbs r2, r1, #0
	orrs r2, r1
	lsrs r2, r2, #0x1f
	adds r4, r0, #0
	adds r4, #0x50
	ldr r5, _0808AD0C @ =gUnknown_080D6858
	ldr r3, _0808AD10 @ =gStageData
	ldrb r1, [r3, #8]
	lsls r2, r2, #2
	adds r1, r1, r2
	lsls r1, r1, #3
	adds r1, r1, r5
	ldrh r1, [r1]
	strh r1, [r4, #0xc]
	ldrb r1, [r3, #8]
	adds r1, r1, r2
	lsls r1, r1, #3
	adds r1, r1, r5
	ldrb r1, [r1, #2]
	strb r1, [r4, #0x1a]
	ldrh r1, [r0, #0x16]
	lsrs r1, r1, #8
	strh r1, [r4, #0x10]
	ldrh r0, [r0, #0x18]
	lsrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808AD0C: .4byte gUnknown_080D6858
_0808AD10: .4byte gStageData

	thumb_func_start sub_808AD14
sub_808AD14: @ 0x0808AD14
	push {r4, r5, r6, lr}
	sub sp, #0x14
	adds r6, r0, #0
	mov r4, sp
	ldr r2, _0808ADDC @ =gUnknown_080D6902
	ldr r3, _0808ADE0 @ =gStageData
	ldrb r1, [r3, #8]
	lsls r0, r1, #1
	adds r0, r0, r1
	adds r0, r0, r2
	ldrb r0, [r0]
	strb r0, [r4]
	ldrb r1, [r3, #8]
	lsls r0, r1, #1
	adds r0, r0, r1
	adds r1, r2, #1
	adds r0, r0, r1
	ldrb r0, [r0]
	strb r0, [r4, #1]
	ldrb r1, [r3, #8]
	lsls r0, r1, #1
	adds r0, r0, r1
	adds r2, #2
	adds r0, r0, r2
	ldrb r0, [r0]
	strb r0, [r4, #2]
	add r5, sp, #4
	ldr r2, _0808ADE4 @ =gUnknown_080D690E
	ldrb r1, [r3, #8]
	lsls r0, r1, #1
	adds r0, r0, r1
	adds r0, r0, r2
	ldrb r0, [r0]
	strb r0, [r5]
	ldrb r1, [r3, #8]
	lsls r0, r1, #1
	adds r0, r0, r1
	adds r1, r2, #1
	adds r0, r0, r1
	ldrb r0, [r0]
	strb r0, [r5, #1]
	ldrb r1, [r3, #8]
	lsls r0, r1, #1
	adds r0, r0, r1
	adds r2, #2
	adds r0, r0, r2
	ldrb r0, [r0]
	strb r0, [r5, #2]
	add r4, sp, #8
	ldr r2, _0808ADE8 @ =gUnknown_080D691C
	ldrb r1, [r3, #8]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r2
	ldr r0, [r0]
	str r0, [sp, #8]
	ldrb r1, [r3, #8]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r1, r2, #4
	adds r0, r0, r1
	ldr r0, [r0]
	str r0, [r4, #4]
	ldrb r1, [r3, #8]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r2, #8
	adds r0, r0, r2
	ldr r0, [r0]
	str r0, [r4, #8]
	bl sub_80C4B48
	mov r0, sp
	bl sub_80C47C0
	adds r0, r5, #0
	bl sub_80C470C
	adds r0, r4, #0
	bl sub_80C492C
	adds r6, #0xa0
	movs r0, #0xc
	strh r0, [r6, #0x2e]
	adds r0, r6, #0
	bl DrawBackground
	ldr r2, _0808ADEC @ =gFlags
	ldr r0, [r2]
	movs r1, #0xc0
	lsls r1, r1, #0xa
	orrs r0, r1
	str r0, [r2]
	add sp, #0x14
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808ADDC: .4byte gUnknown_080D6902
_0808ADE0: .4byte gStageData
_0808ADE4: .4byte gUnknown_080D690E
_0808ADE8: .4byte gUnknown_080D691C
_0808ADEC: .4byte gFlags

	thumb_func_start sub_808ADF0
sub_808ADF0: @ 0x0808ADF0
	push {lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	bne _0808AE04
	ldr r0, _0808AE00 @ =sub_808AE28
	b _0808AE0A
	.align 2, 0
_0808AE00: .4byte sub_808AE28
_0808AE04:
	cmp r0, #2
	bne _0808AE18
	ldr r0, _0808AE14 @ =sub_808AE40
_0808AE0A:
	movs r1, #0
	bl sub_8001D58
	b _0808AE20
	.align 2, 0
_0808AE14: .4byte sub_808AE40
_0808AE18:
	ldr r0, _0808AE24 @ =sub_808AE34
	movs r1, #0
	bl sub_8001D58
_0808AE20:
	pop {r0}
	bx r0
	.align 2, 0
_0808AE24: .4byte sub_808AE34

	thumb_func_start sub_808AE28
sub_808AE28: @ 0x0808AE28
	push {lr}
	movs r0, #0
	bl sub_808A25C
	pop {r0}
	bx r0

	thumb_func_start sub_808AE34
sub_808AE34: @ 0x0808AE34
	push {lr}
	movs r0, #1
	bl sub_808A25C
	pop {r0}
	bx r0

	thumb_func_start sub_808AE40
sub_808AE40: @ 0x0808AE40
	push {lr}
	movs r0, #2
	bl sub_808A25C
	pop {r0}
	bx r0

	thumb_func_start sub_808AE4C
sub_808AE4C: @ 0x0808AE4C
	push {r4, r5, lr}
	ldr r5, _0808AE9C @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_808AEC0
	movs r1, #0x1e
	ldrsh r0, [r4, r1]
	cmp r0, #7
	ble _0808AE6C
	movs r0, #0
	strh r0, [r4, #0x1e]
_0808AE6C:
	movs r1, #0x1e
	ldrsh r0, [r4, r1]
	cmp r0, #1
	ble _0808AE7A
	adds r0, r4, #0
	bl sub_808AEA4
_0808AE7A:
	ldrh r1, [r4, #6]
	subs r1, #1
	strh r1, [r4, #6]
	ldrh r0, [r4, #0x1e]
	adds r0, #1
	strh r0, [r4, #0x1e]
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	cmp r1, #0
	bne _0808AE96
	strh r1, [r4, #0xc]
	ldr r1, [r5]
	ldr r0, _0808AEA0 @ =sub_808A768
	str r0, [r1, #8]
_0808AE96:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808AE9C: .4byte gCurTask
_0808AEA0: .4byte sub_808A768

	thumb_func_start sub_808AEA4
sub_808AEA4: @ 0x0808AEA4
	push {lr}
	adds r2, r0, #0
	adds r2, #0x28
	ldrh r1, [r0, #0x12]
	lsrs r1, r1, #8
	strh r1, [r2, #0x10]
	ldrh r0, [r0, #0x14]
	lsrs r0, r0, #8
	strh r0, [r2, #0x12]
	adds r0, r2, #0
	bl DisplaySprite
	pop {r0}
	bx r0

	thumb_func_start sub_808AEC0
sub_808AEC0: @ 0x0808AEC0
	push {lr}
	adds r2, r0, #0
	adds r2, #0x78
	ldrh r1, [r0, #0x1a]
	lsrs r1, r1, #8
	strh r1, [r2, #0x10]
	ldrh r0, [r0, #0x1c]
	lsrs r0, r0, #8
	strh r0, [r2, #0x12]
	adds r0, r2, #0
	bl DisplaySprite
	pop {r0}
	bx r0

	thumb_func_start sub_808AEDC
sub_808AEDC: @ 0x0808AEDC
	push {lr}
	sub sp, #0x10
	ldr r2, [r0, #0x24]
	lsls r2, r2, #8
	asrs r2, r2, #0x10
	movs r0, #0x28
	str r0, [sp]
	movs r0, #0xb4
	str r0, [sp, #4]
	movs r0, #0x30
	str r0, [sp, #8]
	ldr r0, _0808AF08 @ =gBgAffineRegs
	str r0, [sp, #0xc]
	movs r0, #0
	adds r1, r2, #0
	movs r3, #0x20
	bl sa2__sub_8003EE4
	add sp, #0x10
	pop {r0}
	bx r0
	.align 2, 0
_0808AF08: .4byte gBgAffineRegs

	thumb_func_start sub_808AF0C
sub_808AF0C: @ 0x0808AF0C
	push {lr}
	ldr r0, _0808AF24 @ =gStageData
	ldrb r0, [r0, #8]
	cmp r0, #0
	beq _0808AF2C
	ldr r0, _0808AF28 @ =gFlags
	ldr r1, [r0]
	movs r2, #0xc0
	lsls r2, r2, #0xa
	orrs r1, r2
	b _0808AF34
	.align 2, 0
_0808AF24: .4byte gStageData
_0808AF28: .4byte gFlags
_0808AF2C:
	ldr r0, _0808AF3C @ =gFlags
	ldr r1, [r0]
	ldr r2, _0808AF40 @ =0xFFFCFFFF
	ands r1, r2
_0808AF34:
	str r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_0808AF3C: .4byte gFlags
_0808AF40: .4byte 0xFFFCFFFF

	thumb_func_start sub_808AF44
sub_808AF44: @ 0x0808AF44
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r4, r0, #0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	ldr r1, _0808AF80 @ =gDispCnt
	ldr r2, _0808AF84 @ =0x00001341
	adds r0, r2, #0
	strh r0, [r1]
	ldr r0, _0808AF88 @ =sub_808B5B8
	ldr r1, _0808AF8C @ =0x00000464
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r3, _0808AF90 @ =sub_808D000
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	strb r4, [r5, #1]
	cmp r4, #0
	bne _0808AF94
	adds r0, r5, #0
	bl sub_808B1B0
	b _0808AF9A
	.align 2, 0
_0808AF80: .4byte gDispCnt
_0808AF84: .4byte 0x00001341
_0808AF88: .4byte sub_808B5B8
_0808AF8C: .4byte 0x00000464
_0808AF90: .4byte sub_808D000
_0808AF94:
	adds r0, r5, #0
	bl sub_808B0A4
_0808AF9A:
	ldr r1, _0808B040 @ =gSaveGame
	ldr r6, _0808B044 @ =0x00000366
	adds r4, r1, r6
	ldrb r0, [r4]
	movs r3, #0
	strb r0, [r5]
	strb r3, [r5, #5]
	strb r3, [r5, #4]
	movs r2, #0
	strh r3, [r5, #0x10]
	strb r2, [r5, #6]
	strb r2, [r5, #3]
	movs r0, #1
	str r0, [r5, #0x2c]
	subs r6, #2
	adds r0, r1, r6
	ldrb r0, [r0]
	str r0, [r5, #0x18]
	ldr r0, _0808B048 @ =0x00000365
	adds r1, r1, r0
	ldrb r0, [r1]
	str r0, [r5, #0x1c]
	ldrb r0, [r4]
	str r0, [r5, #0x20]
	adds r1, r5, #0
	adds r1, #0xa8
	ldr r0, _0808B04C @ =0x06010000
	str r0, [r1]
	str r3, [sp, #4]
	ldr r6, _0808B050 @ =0x040000D4
	add r0, sp, #4
	str r0, [r6]
	ldr r0, _0808B054 @ =gBgCntRegs
	ldrh r1, [r0, #4]
	movs r0, #0xc
	ands r0, r1
	lsls r0, r0, #0xc
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r0, r0, r1
	str r0, [r6, #4]
	ldr r0, _0808B058 @ =0x85000010
	str r0, [r6, #8]
	ldr r0, [r6, #8]
	ldr r4, _0808B05C @ =gUnknown_03006230
	strb r2, [r4]
	ldr r0, _0808B060 @ =gUnknown_03003590
	strb r2, [r0]
	strb r2, [r0, #1]
	movs r1, #0xff
	strb r1, [r0, #2]
	movs r3, #0x40
	strb r3, [r0, #3]
	strb r2, [r4, #1]
	strb r2, [r0, #4]
	strb r2, [r0, #5]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #6]
	strb r3, [r0, #7]
	strb r2, [r4, #2]
	strb r2, [r0, #8]
	strb r2, [r0, #9]
	strb r1, [r0, #0xa]
	strb r3, [r0, #0xb]
	adds r0, r5, #0
	bl sub_808B4EC
	ldr r2, _0808B064 @ =gFlags
	ldr r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #0xa
	ands r0, r1
	cmp r0, #0
	beq _0808B06C
	ldr r0, _0808B068 @ =gUnknown_080D6C1C
	movs r2, #0x80
	lsls r2, r2, #1
	movs r1, #0
	bl sub_80C4564
	b _0808B080
	.align 2, 0
_0808B040: .4byte gSaveGame
_0808B044: .4byte 0x00000366
_0808B048: .4byte 0x00000365
_0808B04C: .4byte 0x06010000
_0808B050: .4byte 0x040000D4
_0808B054: .4byte gBgCntRegs
_0808B058: .4byte 0x85000010
_0808B05C: .4byte gUnknown_03006230
_0808B060: .4byte gUnknown_03003590
_0808B064: .4byte gFlags
_0808B068: .4byte gUnknown_080D6C1C
_0808B06C:
	ldr r0, _0808B094 @ =gUnknown_080D6C1C
	str r0, [r6]
	ldr r0, _0808B098 @ =gObjPalette
	str r0, [r6, #4]
	ldr r0, _0808B09C @ =0x80000100
	str r0, [r6, #8]
	ldr r0, [r6, #8]
	movs r0, #2
	orrs r1, r0
	str r1, [r2]
_0808B080:
	movs r0, #6
	bl m4aSongNumStart
	ldr r1, _0808B0A0 @ =gStageData
	movs r0, #0
	strb r0, [r1, #6]
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808B094: .4byte gUnknown_080D6C1C
_0808B098: .4byte gObjPalette
_0808B09C: .4byte 0x80000100
_0808B0A0: .4byte gStageData

	thumb_func_start sub_808B0A4
sub_808B0A4: @ 0x0808B0A4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r3, r0, #0
	movs r0, #0
	strh r0, [r3, #8]
	strh r0, [r3, #0x10]
	strh r0, [r3, #0xe]
	movs r1, #2
	movs r0, #2
	strh r0, [r3, #0xc]
	ldrb r0, [r3, #1]
	subs r0, #8
	strh r0, [r3, #0xa]
	strb r1, [r3, #2]
	movs r2, #0
	adds r1, r3, #0
	adds r1, #0x14
	movs r5, #0
	adds r4, r1, #0
_0808B0D2:
	lsls r0, r2, #2
	adds r0, r1, r0
	str r5, [r0]
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #6
	bls _0808B0D2
	movs r1, #8
	ldrsh r0, [r3, r1]
	lsls r0, r0, #2
	adds r0, r4, r0
	movs r2, #0xa
	ldrsh r1, [r3, r2]
	str r1, [r0]
	movs r2, #0
	movs r7, #0x78
	adds r7, r7, r3
	mov ip, r7
	movs r0, #0x7c
	adds r0, r0, r3
	mov r8, r0
	movs r1, #0x90
	adds r1, r1, r3
	mov sb, r1
	movs r7, #0x94
	adds r7, r7, r3
	mov sl, r7
	adds r0, r3, #0
	adds r0, #0xa0
	str r0, [sp]
	adds r1, r3, #0
	adds r1, #0xa4
	str r1, [sp, #4]
	adds r5, r3, #0
	adds r5, #0x38
	movs r6, #0xac
	lsls r6, r6, #6
	adds r4, r3, #0
	adds r4, #0x3c
_0808B122:
	cmp r2, #0
	bne _0808B130
	ldr r7, _0808B12C @ =0xFFFF4C00
	str r7, [r3, #0x38]
	b _0808B136
	.align 2, 0
_0808B12C: .4byte 0xFFFF4C00
_0808B130:
	lsls r0, r2, #3
	adds r0, r5, r0
	str r6, [r0]
_0808B136:
	lsls r0, r2, #3
	adds r0, r4, r0
	lsls r1, r2, #0xc
	movs r7, #0xe8
	lsls r7, r7, #5
	adds r1, r1, r7
	str r1, [r0]
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #7
	bls _0808B122
	movs r0, #0
	strh r0, [r3, #0x12]
	movs r2, #0
	mov r5, ip
	movs r7, #0xa5
	lsls r7, r7, #8
	mov r4, r8
	movs r6, #0xe8
	lsls r6, r6, #5
_0808B160:
	lsls r1, r2, #3
	adds r0, r5, r1
	str r7, [r0]
	adds r1, r4, r1
	str r6, [r1]
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #2
	bls _0808B160
	ldr r0, [r3, #0x38]
	movs r1, #0xd6
	lsls r1, r1, #7
	adds r0, r0, r1
	mov r2, sb
	str r0, [r2]
	movs r0, #0xe8
	lsls r0, r0, #5
	mov r7, sl
	str r0, [r7]
	movs r1, #0
	ldr r0, [sp]
	str r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #5
	ldr r2, [sp, #4]
	str r0, [r2]
	str r1, [r3, #0x30]
	movs r0, #0xa0
	lsls r0, r0, #4
	str r0, [r3, #0x34]
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808B1B0
sub_808B1B0: @ 0x0808B1B0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r3, r0, #0
	movs r1, #0
	movs r0, #0
	strh r0, [r3, #8]
	strh r0, [r3, #0x10]
	strh r0, [r3, #0xe]
	strh r0, [r3, #0xc]
	strh r0, [r3, #0xa]
	strb r1, [r3, #2]
	movs r2, #0
	adds r1, r3, #0
	adds r1, #0x14
	movs r4, #0
_0808B1D6:
	lsls r0, r2, #2
	adds r0, r1, r0
	str r4, [r0]
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #6
	bls _0808B1D6
	movs r2, #0
	movs r0, #0x78
	adds r0, r0, r3
	mov ip, r0
	movs r1, #0x7c
	adds r1, r1, r3
	mov r8, r1
	movs r0, #0x90
	adds r0, r0, r3
	mov sb, r0
	movs r1, #0x94
	adds r1, r1, r3
	mov sl, r1
	adds r0, r3, #0
	adds r0, #0xa0
	str r0, [sp]
	adds r1, r3, #0
	adds r1, #0xa4
	str r1, [sp, #4]
	adds r5, r3, #0
	adds r5, #0x38
	movs r7, #0xac
	lsls r7, r7, #8
	adds r4, r3, #0
	adds r4, #0x3c
	movs r6, #0xe8
	lsls r6, r6, #5
_0808B21C:
	lsls r1, r2, #3
	adds r0, r5, r1
	str r7, [r0]
	adds r1, r4, r1
	str r6, [r1]
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #7
	bls _0808B21C
	movs r0, #0
	strh r0, [r3, #0x12]
	movs r2, #0
	mov r5, ip
	movs r7, #0xa5
	lsls r7, r7, #8
	mov r4, r8
	movs r6, #0xe8
	lsls r6, r6, #5
_0808B242:
	lsls r1, r2, #3
	adds r0, r5, r1
	str r7, [r0]
	adds r1, r4, r1
	str r6, [r1]
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #2
	bls _0808B242
	movs r0, #0xa5
	lsls r0, r0, #8
	mov r1, sb
	str r0, [r1]
	movs r0, #0xe8
	lsls r0, r0, #5
	mov r1, sl
	str r0, [r1]
	ldr r0, _0808B290 @ =0xFFFF8800
	ldr r1, [sp]
	str r0, [r1]
	movs r0, #0x80
	lsls r0, r0, #5
	ldr r1, [sp, #4]
	str r0, [r1]
	movs r0, #0xdf
	lsls r0, r0, #8
	str r0, [r3, #0x30]
	movs r0, #0xa0
	lsls r0, r0, #4
	str r0, [r3, #0x34]
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808B290: .4byte 0xFFFF8800

	thumb_func_start sub_808B294
sub_808B294: @ 0x0808B294
	push {r4, r5, r6, r7, lr}
	ldr r7, _0808B350 @ =gCurTask
	ldr r0, [r7]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldrh r0, [r4, #0x10]
	ldr r6, _0808B354 @ =gBldRegs
	cmp r0, #0
	bne _0808B2E0
	ldr r2, _0808B358 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _0808B35C @ =gWinRegs
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	ldrh r2, [r1, #8]
	movs r0, #0x3f
	orrs r0, r2
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	orrs r0, r2
	strh r0, [r1, #0xa]
	movs r0, #0x10
	strh r0, [r6, #4]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r4, #0xe]
	movs r0, #1
	strh r0, [r4, #0x10]
_0808B2E0:
	adds r5, r6, #0
	ldr r0, _0808B360 @ =0x00003EFF
	strh r0, [r5]
	adds r0, r4, #0
	bl sub_808BEEC
	ldrb r0, [r4, #1]
	cmp r0, #0
	bne _0808B2F8
	adds r0, r4, #0
	bl sub_808C008
_0808B2F8:
	adds r0, r4, #0
	bl sub_808CED0
	adds r0, r4, #0
	bl sub_808CB74
	adds r0, r4, #0
	bl sub_808CF4C
	adds r0, r4, #0
	bl sub_808CC48
	adds r0, r4, #0
	bl sub_808CF00
	adds r0, r4, #0
	bl sub_808CCA0
	adds r0, r4, #0
	bl sub_808CD14
	adds r0, r4, #0
	bl sub_808CD88
	ldr r0, [r4, #0x30]
	asrs r0, r0, #8
	cmp r0, #0x59
	ble _0808B336
	ldr r1, _0808B364 @ =gBgScrollRegs
	rsbs r0, r0, #0
	strh r0, [r1, #4]
_0808B336:
	ldrh r0, [r5, #4]
	cmp r0, #0
	beq _0808B36C
	ldrh r0, [r4, #0xe]
	lsrs r0, r0, #8
	strh r0, [r5, #4]
	ldr r1, _0808B368 @ =0xFFFFFF00
	adds r0, r1, #0
	ldrh r3, [r4, #0xe]
	adds r0, r0, r3
	strh r0, [r4, #0xe]
	b _0808B38E
	.align 2, 0
_0808B350: .4byte gCurTask
_0808B354: .4byte gBldRegs
_0808B358: .4byte gDispCnt
_0808B35C: .4byte gWinRegs
_0808B360: .4byte 0x00003EFF
_0808B364: .4byte gBgScrollRegs
_0808B368: .4byte 0xFFFFFF00
_0808B36C:
	strh r0, [r6, #4]
	ldr r0, _0808B380 @ =0x00003FFF
	strh r0, [r6]
	ldrb r0, [r4, #1]
	cmp r0, #0
	bne _0808B388
	ldr r1, [r7]
	ldr r0, _0808B384 @ =sub_808BAA8
	b _0808B38C
	.align 2, 0
_0808B380: .4byte 0x00003FFF
_0808B384: .4byte sub_808BAA8
_0808B388:
	ldr r1, [r7]
	ldr r0, _0808B394 @ =sub_808BCD8
_0808B38C:
	str r0, [r1, #8]
_0808B38E:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808B394: .4byte sub_808BCD8

	thumb_func_start sub_808B398
sub_808B398: @ 0x0808B398
	push {r4, r5, r6, lr}
	ldr r5, _0808B438 @ =gCurTask
	ldr r0, [r5]
	ldrh r6, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r6, r0
	ldrh r0, [r4, #0x10]
	cmp r0, #0
	beq _0808B3E0
	ldr r2, _0808B43C @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _0808B440 @ =gWinRegs
	movs r3, #0
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	ldrh r2, [r1, #8]
	movs r0, #0x3f
	orrs r0, r2
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	orrs r0, r2
	strh r0, [r1, #0xa]
	ldr r1, _0808B444 @ =gBldRegs
	ldr r0, _0808B448 @ =0x00003EFF
	strh r0, [r1]
	strh r3, [r4, #0xe]
	strh r3, [r4, #0x10]
_0808B3E0:
	ldrb r0, [r4, #3]
	cmp r0, #0
	bne _0808B3EC
	adds r0, r4, #0
	bl sub_808C08C
_0808B3EC:
	adds r0, r4, #0
	bl sub_808CED0
	adds r0, r4, #0
	bl sub_808CB74
	adds r0, r4, #0
	bl sub_808CF4C
	adds r0, r4, #0
	bl sub_808CC48
	adds r0, r4, #0
	bl sub_808CF00
	adds r0, r4, #0
	bl sub_808CCA0
	adds r0, r4, #0
	bl sub_808CD14
	adds r0, r4, #0
	bl sub_808CD88
	ldr r1, _0808B444 @ =gBldRegs
	ldrh r0, [r1, #4]
	cmp r0, #0xf
	bhi _0808B44C
	ldrh r0, [r4, #0xe]
	lsrs r0, r0, #8
	strh r0, [r1, #4]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r1, #0
	ldrh r2, [r4, #0xe]
	adds r0, r0, r2
	strh r0, [r4, #0xe]
	b _0808B4CC
	.align 2, 0
_0808B438: .4byte gCurTask
_0808B43C: .4byte gDispCnt
_0808B440: .4byte gWinRegs
_0808B444: .4byte gBldRegs
_0808B448: .4byte 0x00003EFF
_0808B44C:
	movs r0, #0x10
	strh r0, [r1, #4]
	ldr r0, _0808B478 @ =0x00003FFF
	strh r0, [r1]
	ldrb r0, [r4, #3]
	cmp r0, #0
	beq _0808B4A2
	movs r3, #8
	ldrsh r1, [r4, r3]
	lsls r1, r1, #2
	ldr r2, _0808B47C @ =0x03000014
	adds r0, r6, r2
	adds r0, r0, r1
	ldr r0, [r0]
	cmp r0, #1
	beq _0808B48E
	cmp r0, #1
	bgt _0808B480
	cmp r0, #0
	beq _0808B486
	b _0808B4CC
	.align 2, 0
_0808B478: .4byte 0x00003FFF
_0808B47C: .4byte 0x03000014
_0808B480:
	cmp r0, #2
	beq _0808B496
	b _0808B4CC
_0808B486:
	movs r0, #1
	bl sub_8091D14
	b _0808B49A
_0808B48E:
	movs r0, #0
	bl sub_80961E4
	b _0808B49A
_0808B496:
	bl sub_8096850
_0808B49A:
	ldr r0, [r5]
	bl TaskDestroy
	b _0808B4CC
_0808B4A2:
	bl sub_8001E58
	ldr r1, _0808B4D4 @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _0808B4D8 @ =gBackgroundsCopyQueueCursor
	ldr r0, _0808B4DC @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _0808B4E0 @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _0808B4E4 @ =gVramGraphicsCopyCursor
	ldr r0, _0808B4E8 @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	movs r0, #3
	movs r1, #1
	bl LaunchChaoMenu
_0808B4CC:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808B4D4: .4byte 0x0000FFFF
_0808B4D8: .4byte gBackgroundsCopyQueueCursor
_0808B4DC: .4byte gBackgroundsCopyQueueIndex
_0808B4E0: .4byte gUnknown_03006840
_0808B4E4: .4byte gVramGraphicsCopyCursor
_0808B4E8: .4byte gVramGraphicsCopyQueueIndex

	thumb_func_start sub_808B4EC
sub_808B4EC: @ 0x0808B4EC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	ldr r6, _0808B598 @ =gBgCntRegs
	movs r0, #0
	mov r8, r0
	movs r4, #0
	ldr r0, _0808B59C @ =0x00000603
	strh r0, [r6]
	ldr r5, _0808B5A0 @ =gBgScrollRegs
	strh r4, [r5]
	strh r4, [r5, #2]
	movs r1, #0x96
	lsls r1, r1, #1
	adds r0, r7, r1
	movs r1, #0xc0
	lsls r1, r1, #0x13
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _0808B5A4 @ =0x06003000
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	ldr r1, _0808B5A8 @ =0x0000015D
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	movs r1, #0x20
	strh r1, [r0, #0x26]
	strh r1, [r0, #0x28]
	movs r2, #0xab
	lsls r2, r2, #1
	adds r1, r7, r2
	mov r2, r8
	strb r2, [r1]
	strh r4, [r0, #0x2e]
	bl DrawBackground
	ldr r0, _0808B5AC @ =0x00005E06
	strh r0, [r6, #2]
	ldr r0, [r7, #0x30]
	asrs r0, r0, #8
	rsbs r0, r0, #0
	strh r0, [r5, #4]
	ldr r0, [r7, #0x34]
	asrs r0, r0, #8
	rsbs r0, r0, #0
	strh r0, [r5, #6]
	adds r0, r7, #0
	adds r0, #0xec
	ldr r1, _0808B5B0 @ =0x06004000
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _0808B5B4 @ =0x0600F000
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	movs r1, #0xaf
	lsls r1, r1, #1
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	movs r1, #0x1e
	strh r1, [r0, #0x26]
	movs r1, #0x14
	strh r1, [r0, #0x28]
	movs r2, #0x8b
	lsls r2, r2, #1
	adds r1, r7, r2
	mov r2, r8
	strb r2, [r1]
	movs r1, #1
	strh r1, [r0, #0x2e]
	bl DrawBackground
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808B598: .4byte gBgCntRegs
_0808B59C: .4byte 0x00000603
_0808B5A0: .4byte gBgScrollRegs
_0808B5A4: .4byte 0x06003000
_0808B5A8: .4byte 0x0000015D
_0808B5AC: .4byte 0x00005E06
_0808B5B0: .4byte 0x06004000
_0808B5B4: .4byte 0x0600F000

	thumb_func_start sub_808B5B8
sub_808B5B8: @ 0x0808B5B8
	push {r4, r5, r6, lr}
	sub sp, #0x10
	ldr r6, _0808B638 @ =gCurTask
	ldr r0, [r6]
	ldrh r4, [r0, #6]
	ldr r1, _0808B63C @ =0x030000AC
	adds r0, r4, r1
	ldr r3, _0808B640 @ =gBgCntRegs
	movs r5, #0
	movs r2, #0
	ldr r1, _0808B644 @ =0x00001C8D
	strh r1, [r3, #4]
	ldr r1, _0808B648 @ =0x0600C000
	str r1, [r0, #4]
	strh r2, [r0, #0xa]
	ldr r1, _0808B64C @ =0x0600E000
	str r1, [r0, #0xc]
	strh r2, [r0, #0x18]
	strh r2, [r0, #0x1a]
	movs r1, #0xb3
	lsls r1, r1, #1
	strh r1, [r0, #0x1c]
	strh r2, [r0, #0x1e]
	strh r2, [r0, #0x20]
	strh r2, [r0, #0x22]
	strh r2, [r0, #0x24]
	movs r1, #0x10
	strh r1, [r0, #0x26]
	strh r1, [r0, #0x28]
	ldr r1, _0808B650 @ =0x030000D6
	adds r4, r4, r1
	strb r5, [r4]
	movs r1, #6
	strh r1, [r0, #0x2e]
	bl DrawBackground
	movs r2, #0x80
	lsls r2, r2, #1
	movs r0, #0x40
	str r0, [sp]
	ldr r0, _0808B654 @ =0x00002150
	str r0, [sp, #4]
	ldr r0, _0808B658 @ =gBgScrollRegs
	ldrh r0, [r0, #6]
	rsbs r0, r0, #0
	adds r0, #0x5c
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp, #8]
	ldr r0, _0808B65C @ =gBgAffineRegs
	str r0, [sp, #0xc]
	movs r0, #0
	adds r1, r2, #0
	movs r3, #0x40
	bl sa2__sub_8003EE4
	ldr r1, [r6]
	ldr r0, _0808B660 @ =sub_808B9B4
	str r0, [r1, #8]
	add sp, #0x10
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808B638: .4byte gCurTask
_0808B63C: .4byte 0x030000AC
_0808B640: .4byte gBgCntRegs
_0808B644: .4byte 0x00001C8D
_0808B648: .4byte 0x0600C000
_0808B64C: .4byte 0x0600E000
_0808B650: .4byte 0x030000D6
_0808B654: .4byte 0x00002150
_0808B658: .4byte gBgScrollRegs
_0808B65C: .4byte gBgAffineRegs
_0808B660: .4byte sub_808B9B4

	thumb_func_start sub_808B664
sub_808B664: @ 0x0808B664
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x30
	adds r4, r0, #0
	lsls r1, r1, #0x18
	lsrs r7, r1, #0x18
	ldr r2, _0808B69C @ =gSaveGame
	ldr r0, _0808B6A0 @ =0x00000366
	adds r2, r2, r0
	ldrb r0, [r2]
	strb r0, [r4]
	movs r1, #8
	ldrsh r0, [r4, r1]
	lsls r0, r0, #2
	adds r1, r4, #0
	adds r1, #0x14
	adds r1, r1, r0
	ldrb r0, [r2]
	str r0, [r1]
	cmp r7, #0
	beq _0808B6A4
	movs r2, #0xb6
	lsls r2, r2, #1
	adds r0, r4, r2
	b _0808B6A8
	.align 2, 0
_0808B69C: .4byte gSaveGame
_0808B6A0: .4byte 0x00000366
_0808B6A4:
	adds r0, r4, #0
	adds r0, #0xa8
_0808B6A8:
	ldr r0, [r0]
	str r0, [sp, #0x2c]
	movs r5, #0
	adds r3, r4, #0
	adds r3, #0x38
	str r3, [sp, #0x20]
	adds r6, r4, #0
	adds r6, #0x3c
	str r6, [sp, #0x24]
	adds r0, r4, #0
	adds r0, #0xa0
	str r0, [sp, #0x18]
	adds r1, r4, #0
	adds r1, #0xa4
	str r1, [sp, #0x1c]
	adds r2, r4, #0
	adds r2, #0x90
	str r2, [sp, #0x10]
	adds r3, #0x5c
	str r3, [sp, #0x14]
	adds r6, #0x44
	str r6, [sp]
	subs r0, #0x1c
	str r0, [sp, #4]
	subs r1, #0x1c
	str r1, [sp, #8]
	subs r2, #4
	str r2, [sp, #0xc]
	ldr r3, _0808B72C @ =gUnknown_080D6960
_0808B6E2:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	movs r6, #0xb6
	lsls r6, r6, #1
	adds r0, r0, r6
	adds r2, r4, r0
	ldr r0, [sp, #0x2c]
	str r0, [r2]
	ldrb r1, [r4]
	lsls r1, r1, #3
	adds r1, r5, r1
	lsls r1, r1, #3
	adds r0, r3, #4
	adds r0, r1, r0
	ldr r0, [r0]
	lsls r0, r0, #5
	ldr r6, [sp, #0x2c]
	adds r6, r6, r0
	str r6, [sp, #0x2c]
	adds r1, r1, r3
	ldrh r0, [r1]
	strh r0, [r2, #0xc]
	ldrb r0, [r4]
	lsls r0, r0, #3
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r3
	ldrb r0, [r0, #2]
	strb r0, [r2, #0x1a]
	movs r0, #0xff
	strb r0, [r2, #0x1b]
	cmp r5, #0
	bne _0808B730
	adds r0, #1
	b _0808B734
	.align 2, 0
_0808B72C: .4byte gUnknown_080D6960
_0808B730:
	movs r0, #0xc0
	lsls r0, r0, #1
_0808B734:
	strh r0, [r2, #0x14]
	movs r0, #0
	strh r0, [r2, #0xe]
	strh r0, [r2, #0x16]
	movs r0, #0x10
	mov sb, r0
	mov r1, sb
	strb r1, [r2, #0x1c]
	movs r6, #0
	strb r6, [r2, #0x1f]
	ldr r0, _0808B99C @ =0x00043080
	mov sl, r0
	str r0, [r2, #8]
	movs r1, #1
	rsbs r1, r1, #0
	mov r8, r1
	str r1, [r2, #0x20]
	lsls r1, r5, #3
	ldr r6, [sp, #0x20]
	adds r6, r6, r1
	ldr r0, [r6]
	mov ip, r0
	mov r6, ip
	asrs r6, r6, #8
	strh r6, [r2, #0x10]
	ldr r0, [sp, #0x24]
	adds r1, r0, r1
	ldr r0, [r1]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	adds r0, r2, #0
	str r3, [sp, #0x28]
	bl UpdateSpriteAnimation
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	ldr r3, [sp, #0x28]
	cmp r5, #7
	bls _0808B6E2
	cmp r7, #0
	bne _0808B796
	adds r1, r4, #0
	adds r1, #0xa8
	ldr r0, [r1]
	movs r2, #0xc8
	lsls r2, r2, #6
	adds r0, r0, r2
	str r0, [r1]
_0808B796:
	movs r3, #0xd3
	lsls r3, r3, #2
	adds r2, r4, r3
	cmp r7, #0
	bne _0808B7CE
	adds r1, r4, #0
	adds r1, #0xa8
	ldr r0, [r1]
	str r0, [r2]
	ldr r0, [r1]
	movs r6, #0xe0
	lsls r6, r6, #2
	adds r0, r0, r6
	str r0, [r1]
	movs r1, #0
	movs r0, #0xa0
	lsls r0, r0, #1
	strh r0, [r2, #0x14]
	strh r7, [r2, #0xe]
	strh r7, [r2, #0x16]
	mov r0, sb
	strb r0, [r2, #0x1c]
	strb r1, [r2, #0x1f]
	movs r0, #0x86
	lsls r0, r0, #0xb
	str r0, [r2, #8]
	mov r1, r8
	str r1, [r2, #0x20]
_0808B7CE:
	ldr r1, _0808B9A0 @ =gUnknown_080D6BD8
	ldrb r0, [r4]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	movs r6, #0
	strh r0, [r2, #0xc]
	ldrb r0, [r4]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrb r0, [r0, #2]
	strb r0, [r2, #0x1a]
	movs r3, #1
	rsbs r3, r3, #0
	adds r5, r3, #0
	movs r0, #0xff
	strb r0, [r2, #0x1b]
	ldr r1, [sp, #0x18]
	ldr r0, [r1]
	asrs r0, r0, #8
	strh r0, [r2, #0x10]
	ldr r3, [sp, #0x1c]
	ldr r0, [r3]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	adds r0, r2, #0
	bl UpdateSpriteAnimation
	movs r0, #0xab
	lsls r0, r0, #2
	adds r3, r4, r0
	cmp r7, #0
	bne _0808B83A
	adds r2, r4, #0
	adds r2, #0xa8
	ldr r0, [r2]
	str r0, [r3]
	ldr r0, _0808B9A4 @ =gUnknown_080D6AE0
	ldr r1, [r0, #4]
	lsls r1, r1, #5
	ldr r0, [r2]
	adds r0, r0, r1
	str r0, [r2]
	movs r0, #0xc0
	strh r0, [r3, #0x14]
	strh r7, [r3, #0xe]
	strh r7, [r3, #0x16]
	mov r1, sb
	strb r1, [r3, #0x1c]
	strb r6, [r3, #0x1f]
	mov r2, sl
	str r2, [r3, #8]
	mov r0, r8
	str r0, [r3, #0x20]
_0808B83A:
	ldr r1, _0808B9A4 @ =gUnknown_080D6AE0
	ldrh r0, [r1]
	strh r0, [r3, #0xc]
	ldrb r0, [r1, #2]
	strb r0, [r3, #0x1a]
	ldrb r0, [r3, #0x1b]
	orrs r0, r5
	strb r0, [r3, #0x1b]
	ldr r1, [sp, #0x10]
	ldr r0, [r1]
	asrs r0, r0, #8
	strh r0, [r3, #0x10]
	ldr r2, [sp, #0x14]
	ldr r0, [r2]
	asrs r0, r0, #8
	strh r0, [r3, #0x12]
	adds r0, r3, #0
	bl UpdateSpriteAnimation
	movs r3, #0xb5
	lsls r3, r3, #2
	adds r2, r4, r3
	cmp r7, #0
	bne _0808B892
	adds r1, r4, #0
	adds r1, #0xa8
	ldr r0, [r1]
	str r0, [r2]
	ldr r0, [r1]
	subs r3, #0xd4
	adds r0, r0, r3
	str r0, [r1]
	movs r0, #0xa0
	lsls r0, r0, #1
	strh r0, [r2, #0x14]
	strh r7, [r2, #0xe]
	strh r7, [r2, #0x16]
	mov r0, sb
	strb r0, [r2, #0x1c]
	strb r6, [r2, #0x1f]
	mov r1, sl
	str r1, [r2, #8]
	mov r3, r8
	str r3, [r2, #0x20]
_0808B892:
	ldr r1, _0808B9A8 @ =gUnknown_080D6AE8
	ldrb r0, [r4]
	lsls r0, r0, #4
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2, #0xc]
	ldrb r0, [r4]
	lsls r0, r0, #4
	adds r0, r0, r1
	ldrb r0, [r0, #2]
	strb r0, [r2, #0x1a]
	ldrb r0, [r2, #0x1b]
	orrs r0, r5
	strb r0, [r2, #0x1b]
	ldr r0, [r4, #0x78]
	asrs r0, r0, #8
	strh r0, [r2, #0x10]
	ldr r0, [r4, #0x7c]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	adds r0, r2, #0
	bl UpdateSpriteAnimation
	movs r0, #0xbf
	lsls r0, r0, #2
	adds r2, r4, r0
	cmp r7, #0
	bne _0808B8F4
	adds r1, r4, #0
	adds r1, #0xa8
	ldr r0, [r1]
	str r0, [r2]
	ldr r0, [r1]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r0, r0, r3
	str r0, [r1]
	movs r0, #0xa0
	lsls r0, r0, #1
	strh r0, [r2, #0x14]
	strh r7, [r2, #0xe]
	strh r7, [r2, #0x16]
	mov r0, sb
	strb r0, [r2, #0x1c]
	strb r6, [r2, #0x1f]
	mov r1, sl
	str r1, [r2, #8]
	mov r3, r8
	str r3, [r2, #0x20]
_0808B8F4:
	ldr r1, _0808B9AC @ =gUnknown_080D6B48
	ldrb r0, [r4]
	lsls r0, r0, #4
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2, #0xc]
	ldrb r0, [r4]
	lsls r0, r0, #4
	adds r0, r0, r1
	ldrb r0, [r0, #2]
	strb r0, [r2, #0x1a]
	ldrb r0, [r2, #0x1b]
	orrs r0, r5
	strb r0, [r2, #0x1b]
	ldr r1, [sp]
	ldr r0, [r1]
	asrs r0, r0, #8
	strh r0, [r2, #0x10]
	ldr r3, [sp, #4]
	ldr r0, [r3]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	adds r0, r2, #0
	bl UpdateSpriteAnimation
	movs r0, #0xc9
	lsls r0, r0, #2
	adds r3, r4, r0
	cmp r7, #0
	bne _0808B95A
	adds r1, r4, #0
	adds r1, #0xa8
	ldr r0, [r1]
	str r0, [r3]
	ldr r0, [r1]
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r0, r2
	str r0, [r1]
	movs r0, #0xa0
	lsls r0, r0, #1
	strh r0, [r3, #0x14]
	strh r7, [r3, #0xe]
	strh r7, [r3, #0x16]
	mov r0, sb
	strb r0, [r3, #0x1c]
	strb r6, [r3, #0x1f]
	mov r1, sl
	str r1, [r3, #8]
	mov r2, r8
	str r2, [r3, #0x20]
_0808B95A:
	ldr r1, _0808B9B0 @ =gUnknown_080D6BA8
	ldrb r0, [r4]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r3, #0xc]
	ldrb r0, [r4]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrb r0, [r0, #2]
	strb r0, [r3, #0x1a]
	ldrb r0, [r3, #0x1b]
	orrs r0, r5
	strb r0, [r3, #0x1b]
	ldr r6, [sp, #8]
	ldr r0, [r6]
	asrs r0, r0, #8
	strh r0, [r3, #0x10]
	ldr r1, [sp, #0xc]
	ldr r0, [r1]
	asrs r0, r0, #8
	strh r0, [r3, #0x12]
	adds r0, r3, #0
	bl UpdateSpriteAnimation
	add sp, #0x30
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808B99C: .4byte 0x00043080
_0808B9A0: .4byte gUnknown_080D6BD8
_0808B9A4: .4byte gUnknown_080D6AE0
_0808B9A8: .4byte gUnknown_080D6AE8
_0808B9AC: .4byte gUnknown_080D6B48
_0808B9B0: .4byte gUnknown_080D6BA8

	thumb_func_start sub_808B9B4
sub_808B9B4: @ 0x0808B9B4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r0, _0808BA08 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	movs r5, #0
	adds r0, #0xa8
	adds r6, r1, r0
	ldr r7, _0808BA0C @ =gUnknown_080D7458
	ldr r1, _0808BA10 @ =gUnknown_03000534
	mov r8, r1
_0808B9D2:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	movs r1, #0xdd
	lsls r1, r1, #2
	adds r0, r0, r1
	adds r2, r4, r0
	ldr r0, [r6]
	str r0, [r2]
	ldr r1, [r7, #4]
	lsls r1, r1, #5
	ldr r0, [r6]
	adds r0, r0, r1
	str r0, [r6]
	lsls r0, r5, #1
	add r0, r8
	ldrh r1, [r0]
	adds r3, r1, #0
	ldr r0, _0808BA14 @ =0x0000FFFF
	cmp r3, r0
	beq _0808BA2A
	cmp r3, #0xff
	bls _0808BA1C
	strb r1, [r2, #0x1a]
	ldr r0, _0808BA18 @ =gUnknown_080D7460
	ldrh r0, [r0]
	b _0808BA20
	.align 2, 0
_0808BA08: .4byte gCurTask
_0808BA0C: .4byte gUnknown_080D7458
_0808BA10: .4byte gUnknown_03000534
_0808BA14: .4byte 0x0000FFFF
_0808BA18: .4byte gUnknown_080D7460
_0808BA1C:
	strb r1, [r2, #0x1a]
	ldrh r0, [r7]
_0808BA20:
	strh r0, [r2, #0xc]
	ldrb r0, [r4, #4]
	adds r0, #1
	strb r0, [r4, #4]
	b _0808BA32
_0808BA2A:
	ldrh r0, [r7]
	movs r1, #0
	strh r0, [r2, #0xc]
	strb r1, [r2, #0x1a]
_0808BA32:
	movs r0, #0xff
	strb r0, [r2, #0x1b]
	adds r0, r4, #0
	adds r0, #0x88
	ldr r0, [r0]
	asrs r0, r0, #8
	movs r1, #0
	strh r0, [r2, #0x10]
	adds r0, r4, #0
	adds r0, #0x8c
	ldr r0, [r0]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	movs r0, #0x80
	strh r0, [r2, #0x14]
	strh r1, [r2, #0xe]
	strh r1, [r2, #0x16]
	movs r0, #0x10
	strb r0, [r2, #0x1c]
	movs r0, #9
	strb r0, [r2, #0x1f]
	ldr r0, _0808BA9C @ =0x00043080
	str r0, [r2, #8]
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r2, #0x20]
	adds r0, r2, #0
	bl UpdateSpriteAnimation
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #5
	bls _0808B9D2
	adds r0, r4, #0
	movs r1, #0
	bl sub_808B664
	ldrb r0, [r4, #1]
	cmp r0, #0
	beq _0808BA8A
	adds r0, r4, #0
	bl Options_LoadSelectedMenu
_0808BA8A:
	ldr r0, _0808BAA0 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808BAA4 @ =sub_808B294
	str r0, [r1, #8]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808BA9C: .4byte 0x00043080
_0808BAA0: .4byte gCurTask
_0808BAA4: .4byte sub_808B294

	thumb_func_start sub_808BAA8
sub_808BAA8: @ 0x0808BAA8
	push {r4, r5, lr}
	ldr r5, _0808BB10 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_808BEEC
	adds r0, r4, #0
	bl sub_808CED0
	adds r0, r4, #0
	bl sub_808CB74
	adds r0, r4, #0
	bl sub_808CF4C
	adds r0, r4, #0
	bl sub_808CC48
	adds r0, r4, #0
	bl sub_808CF00
	adds r0, r4, #0
	bl sub_808CCA0
	adds r0, r4, #0
	bl sub_808CD14
	adds r0, r4, #0
	bl sub_808CD88
	adds r0, r4, #0
	bl sub_808C008
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #8
	bne _0808BB1C
	movs r2, #1
	strh r2, [r4, #0xc]
	ldr r1, _0808BB14 @ =gBldRegs
	movs r0, #0xfd
	lsls r0, r0, #6
	strh r0, [r1]
	strh r2, [r1, #2]
	ldr r1, [r5]
	ldr r0, _0808BB18 @ =sub_808BD90
	str r0, [r1, #8]
	b _0808BB2A
	.align 2, 0
_0808BB10: .4byte gCurTask
_0808BB14: .4byte gBldRegs
_0808BB18: .4byte sub_808BD90
_0808BB1C:
	ldr r0, [r4, #0x30]
	asrs r0, r0, #8
	cmp r0, #0x59
	ble _0808BB2A
	ldr r1, _0808BB30 @ =gBgScrollRegs
	rsbs r0, r0, #0
	strh r0, [r1, #4]
_0808BB2A:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808BB30: .4byte gBgScrollRegs

	thumb_func_start sub_808BB34
sub_808BB34: @ 0x0808BB34
	push {r4, r5, r6, lr}
	ldr r6, _0808BB98 @ =gCurTask
	ldr r0, [r6]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r5, _0808BB9C @ =gBldRegs
	movs r0, #0xf
	strh r0, [r5, #2]
	adds r0, r4, #0
	bl sub_808CED0
	adds r0, r4, #0
	bl sub_808CB74
	adds r0, r4, #0
	bl sub_808CF4C
	adds r0, r4, #0
	bl sub_808CC48
	adds r0, r4, #0
	bl sub_808CCA0
	adds r0, r4, #0
	bl sub_808CD14
	adds r0, r4, #0
	bl sub_808CD88
	adds r0, r4, #0
	bl sub_808C08C
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #3
	bls _0808BBA4
	movs r1, #1
	strh r1, [r4, #0xc]
	movs r0, #0xfd
	lsls r0, r0, #6
	strh r0, [r5]
	strh r1, [r5, #2]
	movs r0, #0
	strb r0, [r4, #3]
	ldr r1, [r6]
	ldr r0, _0808BBA0 @ =sub_808B398
	str r0, [r1, #8]
	b _0808BBB2
	.align 2, 0
_0808BB98: .4byte gCurTask
_0808BB9C: .4byte gBldRegs
_0808BBA0: .4byte sub_808B398
_0808BBA4:
	ldr r0, [r4, #0x30]
	asrs r0, r0, #8
	cmp r0, #0x6e
	ble _0808BBB2
	ldr r1, _0808BBB8 @ =gBgScrollRegs
	rsbs r0, r0, #0
	strh r0, [r1, #4]
_0808BBB2:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808BBB8: .4byte gBgScrollRegs

	thumb_func_start sub_808BBBC
sub_808BBBC: @ 0x0808BBBC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r7, _0808BC88 @ =gCurTask
	ldr r0, [r7]
	ldrh r6, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r6, r0
	adds r0, r4, #0
	bl sub_808BEEC
	adds r0, r4, #0
	bl sub_808CED0
	adds r0, r4, #0
	bl sub_808CB74
	adds r0, r4, #0
	bl sub_808CF4C
	ldr r5, _0808BC8C @ =gBgScrollRegs
	movs r0, #4
	ldrsh r1, [r5, r0]
	movs r0, #0x28
	rsbs r0, r0, #0
	cmp r1, r0
	bgt _0808BC0C
	adds r0, r4, #0
	bl sub_808CC48
	adds r0, r4, #0
	bl sub_808CCA0
	adds r0, r4, #0
	bl sub_808CD14
	adds r0, r4, #0
	bl sub_808CD88
_0808BC0C:
	adds r0, r4, #0
	bl sub_808C1BC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808BCC4
	movs r1, #0
	mov r8, r1
	movs r5, #0
	strh r5, [r4, #0xc]
	movs r2, #8
	ldrsh r0, [r4, r2]
	cmp r0, #5
	bne _0808BC70
	ldr r1, _0808BC90 @ =0x030000EC
	adds r0, r6, r1
	ldr r3, _0808BC94 @ =gDispCnt
	ldrh r2, [r3]
	ldr r1, _0808BC98 @ =0x0000FBFF
	ands r1, r2
	strh r1, [r3]
	ldr r2, _0808BC9C @ =gBgCntRegs
	ldr r1, _0808BCA0 @ =0x00005E06
	strh r1, [r2, #2]
	ldr r1, _0808BCA4 @ =0x06004000
	str r1, [r0, #4]
	strh r5, [r0, #0xa]
	ldr r1, _0808BCA8 @ =0x0600F000
	str r1, [r0, #0xc]
	strh r5, [r0, #0x18]
	strh r5, [r0, #0x1a]
	movs r1, #0xaf
	lsls r1, r1, #1
	strh r1, [r0, #0x1c]
	strh r5, [r0, #0x1e]
	strh r5, [r0, #0x20]
	strh r5, [r0, #0x22]
	strh r5, [r0, #0x24]
	movs r1, #0x1e
	strh r1, [r0, #0x26]
	movs r1, #0x14
	strh r1, [r0, #0x28]
	ldr r2, _0808BCAC @ =0x03000116
	adds r1, r6, r2
	mov r2, r8
	strb r2, [r1]
	movs r1, #1
	strh r1, [r0, #0x2e]
	bl DrawBackground
_0808BC70:
	movs r1, #8
	ldrsh r0, [r4, r1]
	cmp r0, #6
	bne _0808BCB8
	ldrb r0, [r4, #3]
	cmp r0, #0
	beq _0808BCB4
	ldr r1, [r7]
	ldr r0, _0808BCB0 @ =sub_808CA9C
	str r0, [r1, #8]
	b _0808BCCC
	.align 2, 0
_0808BC88: .4byte gCurTask
_0808BC8C: .4byte gBgScrollRegs
_0808BC90: .4byte 0x030000EC
_0808BC94: .4byte gDispCnt
_0808BC98: .4byte 0x0000FBFF
_0808BC9C: .4byte gBgCntRegs
_0808BCA0: .4byte 0x00005E06
_0808BCA4: .4byte 0x06004000
_0808BCA8: .4byte 0x0600F000
_0808BCAC: .4byte 0x03000116
_0808BCB0: .4byte sub_808CA9C
_0808BCB4:
	mov r2, r8
	strb r2, [r4, #3]
_0808BCB8:
	ldr r1, [r7]
	ldr r0, _0808BCC0 @ =sub_808BD90
	str r0, [r1, #8]
	b _0808BCCC
	.align 2, 0
_0808BCC0: .4byte sub_808BD90
_0808BCC4:
	ldr r0, [r4, #0x30]
	asrs r0, r0, #8
	rsbs r0, r0, #0
	strh r0, [r5, #4]
_0808BCCC:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808BCD8
sub_808BCD8: @ 0x0808BCD8
	push {r4, r5, lr}
	ldr r0, _0808BD48 @ =gCurTask
	ldr r0, [r0]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	adds r0, r4, #0
	bl sub_808BEEC
	adds r0, r4, #0
	bl sub_808CED0
	adds r0, r4, #0
	bl sub_808CB74
	adds r0, r4, #0
	bl sub_808CF4C
	adds r0, r4, #0
	bl sub_808CC48
	adds r0, r4, #0
	bl sub_808CCA0
	adds r0, r4, #0
	bl sub_808CD14
	adds r0, r4, #0
	bl sub_808CD88
	adds r0, r4, #0
	bl sub_808BFA0
	cmp r0, #1
	bne _0808BD28
	ldr r0, _0808BD4C @ =0x030000A0
	adds r1, r5, r0
	movs r0, #0
	str r0, [r1]
_0808BD28:
	ldrb r0, [r4, #6]
	cmp r0, #0
	bne _0808BD54
	ldr r0, _0808BD50 @ =gBgScrollRegs
	movs r2, #4
	ldrsh r1, [r0, r2]
	movs r0, #0xc8
	rsbs r0, r0, #0
	cmp r1, r0
	bgt _0808BD54
	movs r0, #1
	str r0, [r4, #0x2c]
	adds r0, r4, #0
	bl Options_LoadSelectedMenu
	b _0808BD82
	.align 2, 0
_0808BD48: .4byte gCurTask
_0808BD4C: .4byte 0x030000A0
_0808BD50: .4byte gBgScrollRegs
_0808BD54:
	ldr r1, _0808BD88 @ =gUnknown_080D6E38
	movs r2, #8
	ldrsh r0, [r4, r2]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r4, #0
	bl _call_via_r1
	cmp r0, #1
	beq _0808BD82
	movs r1, #8
	ldrsh r0, [r4, r1]
	cmp r0, #6
	bgt _0808BD78
	adds r0, r4, #0
	bl sub_808C250
_0808BD78:
	ldr r1, _0808BD8C @ =gBgScrollRegs
	ldr r0, [r4, #0x30]
	asrs r0, r0, #8
	rsbs r0, r0, #0
	strh r0, [r1, #4]
_0808BD82:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808BD88: .4byte gUnknown_080D6E38
_0808BD8C: .4byte gBgScrollRegs

	thumb_func_start sub_808BD90
sub_808BD90: @ 0x0808BD90
	push {r4, r5, r6, r7, lr}
	ldr r6, _0808BE14 @ =gCurTask
	ldr r0, [r6]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	adds r0, r4, #0
	bl sub_808BEEC
	adds r0, r4, #0
	bl sub_808C2E4
	adds r0, r4, #0
	bl sub_808CED0
	adds r0, r4, #0
	bl sub_808CB74
	adds r0, r4, #0
	bl sub_808CF4C
	adds r0, r4, #0
	bl sub_808CC48
	adds r0, r4, #0
	bl sub_808CF00
	adds r0, r4, #0
	bl sub_808CCA0
	adds r0, r4, #0
	bl sub_808CD14
	adds r0, r4, #0
	bl sub_808CD88
	adds r0, r4, #0
	bl sub_808BFA0
	cmp r0, #1
	bne _0808BDEC
	ldr r0, _0808BE18 @ =0x030000A0
	adds r1, r5, r0
	movs r0, #0
	str r0, [r1]
_0808BDEC:
	ldr r0, _0808BE1C @ =gPressedKeys
	ldrh r1, [r0]
	movs r7, #1
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _0808BE24
	movs r0, #0x6a
	bl m4aSongNumStart
	movs r0, #0
	strh r0, [r4, #0xc]
	movs r1, #8
	ldrsh r0, [r4, r1]
	cmp r0, #7
	beq _0808BE32
	ldr r1, [r6]
	ldr r0, _0808BE20 @ =sub_808BCD8
	str r0, [r1, #8]
	b _0808BEDE
	.align 2, 0
_0808BE14: .4byte gCurTask
_0808BE18: .4byte 0x030000A0
_0808BE1C: .4byte gPressedKeys
_0808BE20: .4byte sub_808BCD8
_0808BE24:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0808BE44
	movs r0, #0x6b
	bl m4aSongNumStart
_0808BE32:
	adds r0, r4, #0
	bl sub_808CFC4
	ldr r1, [r6]
	ldr r0, _0808BE40 @ =sub_808BB34
	str r0, [r1, #8]
	b _0808BEDE
	.align 2, 0
_0808BE40: .4byte sub_808BB34
_0808BE44:
	ldr r5, _0808BE74 @ =gRepeatedKeys
	ldrh r1, [r5]
	movs r0, #0xc0
	ands r0, r1
	cmp r0, #0
	beq _0808BED4
	movs r0, #0x6c
	bl m4aSongNumStart
	ldrh r1, [r5]
	movs r0, #0x40
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0
	beq _0808BE9C
	ldrh r2, [r4, #8]
	movs r3, #8
	ldrsh r0, [r4, r3]
	cmp r0, #0
	bne _0808BE78
	movs r0, #7
	b _0808BECE
	.align 2, 0
_0808BE74: .4byte gRepeatedKeys
_0808BE78:
	subs r0, r2, #1
	strh r0, [r4, #8]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #5
	bne _0808BED0
	ldr r0, _0808BE98 @ =gSaveGame
	adds r0, #0x33
	ldrb r1, [r0]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	bne _0808BED0
	subs r0, r2, #2
	b _0808BECE
	.align 2, 0
_0808BE98: .4byte gSaveGame
_0808BE9C:
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _0808BED0
	ldrh r1, [r4, #8]
	movs r3, #8
	ldrsh r0, [r4, r3]
	cmp r0, #7
	bne _0808BEB2
	strh r2, [r4, #8]
	b _0808BED0
_0808BEB2:
	adds r2, r1, #1
	strh r2, [r4, #8]
	lsls r0, r2, #0x10
	asrs r0, r0, #0x10
	cmp r0, #5
	bne _0808BED0
	ldr r0, _0808BEE4 @ =gSaveGame
	adds r0, #0x33
	ldrb r1, [r0]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	bne _0808BED0
	adds r0, r2, #1
_0808BECE:
	strh r0, [r4, #8]
_0808BED0:
	movs r0, #0
	strh r0, [r4, #0xc]
_0808BED4:
	ldr r1, _0808BEE8 @ =gBgScrollRegs
	ldr r0, [r4, #0x30]
	asrs r0, r0, #8
	rsbs r0, r0, #0
	strh r0, [r1, #4]
_0808BEDE:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808BEE4: .4byte gSaveGame
_0808BEE8: .4byte gBgScrollRegs

	thumb_func_start sub_808BEEC
sub_808BEEC: @ 0x0808BEEC
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	mov ip, r0
	movs r5, #0
	ldrb r3, [r0, #8]
	ldr r2, _0808BF6C @ =gFlags
	ldr r0, [r2]
	movs r1, #4
	orrs r0, r1
	str r0, [r2]
	ldr r1, _0808BF70 @ =gUnknown_03003C5C
	ldr r0, _0808BF74 @ =0x04000052
	str r0, [r1]
	ldr r1, _0808BF78 @ =gUnknown_03003F30
	movs r0, #2
	strb r0, [r1]
	ldr r0, _0808BF7C @ =gBgOffsetsHBlank
	ldr r2, [r0]
	mov r0, ip
	strh r5, [r0, #0x12]
	movs r4, #0
	ldr r1, _0808BF80 @ =gUnknown_080D6E54
	mov r8, r1
	lsls r3, r3, #4
	mov sb, r3
_0808BF22:
	lsls r0, r5, #3
	mov r1, ip
	adds r1, #0x3c
	adds r1, r1, r0
	ldr r0, [r1]
	asrs r0, r0, #8
	cmp r4, r0
	blt _0808BF84
	adds r0, #0x10
	cmp r4, r0
	bge _0808BF84
	movs r1, #0
	adds r5, #1
	ldr r6, _0808BF80 @ =gUnknown_080D6E54
	mov r3, sb
_0808BF40:
	mov r7, ip
	ldrh r0, [r7, #0x12]
	lsls r0, r0, #1
	adds r0, r0, r3
	adds r0, r0, r6
	ldrh r0, [r0]
	strh r0, [r2]
	adds r2, #2
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r1, #0xf
	bls _0808BF40
	ldrh r0, [r7, #0x12]
	adds r0, #1
	strh r0, [r7, #0x12]
	lsls r0, r5, #0x18
	lsrs r5, r0, #0x18
	b _0808BF8A
	.align 2, 0
_0808BF6C: .4byte gFlags
_0808BF70: .4byte gUnknown_03003C5C
_0808BF74: .4byte 0x04000052
_0808BF78: .4byte gUnknown_03003F30
_0808BF7C: .4byte gBgOffsetsHBlank
_0808BF80: .4byte gUnknown_080D6E54
_0808BF84:
	mov r0, r8
	strh r0, [r2]
	adds r2, #2
_0808BF8A:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #0x9f
	bls _0808BF22
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_808BFA0
sub_808BFA0: @ 0x0808BFA0
	push {r4, lr}
	adds r3, r0, #0
	ldrb r4, [r3, #2]
	adds r2, r3, #0
	adds r2, #0xa0
	ldr r1, _0808BFDC @ =gUnknown_080D6ED4
	lsls r0, r4, #2
	adds r0, r0, r1
	ldr r1, [r2]
	ldr r0, [r0]
	adds r1, r1, r0
	str r1, [r2]
	cmp r4, #0
	bne _0808BFC2
	ldr r0, _0808BFE0 @ =0x000009FF
	cmp r1, r0
	bgt _0808BFD2
_0808BFC2:
	cmp r4, #1
	bne _0808BFE8
	adds r0, r3, #0
	adds r0, #0xa0
	ldr r1, [r0]
	ldr r0, _0808BFE4 @ =0xFFFFF600
	cmp r1, r0
	bgt _0808BFE8
_0808BFD2:
	ldrb r0, [r3, #2]
	adds r0, #1
	strb r0, [r3, #2]
	b _0808BFFE
	.align 2, 0
_0808BFDC: .4byte gUnknown_080D6ED4
_0808BFE0: .4byte 0x000009FF
_0808BFE4: .4byte 0xFFFFF600
_0808BFE8:
	cmp r4, #2
	bne _0808BFFE
	adds r2, r3, #0
	adds r2, #0xa0
	ldr r0, [r2]
	cmp r0, #0
	ble _0808BFFE
	movs r0, #0
	str r0, [r2]
	movs r0, #1
	b _0808C000
_0808BFFE:
	movs r0, #0
_0808C000:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_808C008
sub_808C008: @ 0x0808C008
	push {r4, r5, r6, r7, lr}
	mov ip, r0
	movs r6, #0
	movs r5, #0
_0808C010:
	mov r1, ip
	movs r2, #8
	ldrsh r0, [r1, r2]
	movs r2, #0x2b
	cmp r5, r0
	bne _0808C01E
	movs r2, #0x21
_0808C01E:
	lsls r4, r5, #3
	mov r0, ip
	adds r0, #0x38
	adds r1, r0, r4
	lsls r2, r2, #8
	ldr r3, [r1]
	adds r7, r0, #0
	cmp r3, r2
	bls _0808C03C
	ldr r2, _0808C038 @ =0xFFFFF800
	adds r0, r3, r2
	str r0, [r1]
	b _0808C064
	.align 2, 0
_0808C038: .4byte 0xFFFFF800
_0808C03C:
	str r2, [r1]
	mov r0, ip
	adds r0, #0x3c
	adds r2, r0, r4
	lsls r0, r5, #0xc
	movs r3, #0xe8
	lsls r3, r3, #5
	adds r0, r0, r3
	ldr r1, [r2]
	cmp r1, r0
	bge _0808C05C
	movs r3, #0x80
	lsls r3, r3, #4
	adds r0, r1, r3
	str r0, [r2]
	b _0808C064
_0808C05C:
	str r0, [r2]
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
_0808C064:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #7
	bls _0808C010
	mov r1, ip
	movs r2, #8
	ldrsh r0, [r1, r2]
	lsls r0, r0, #3
	adds r0, r7, r0
	ldr r0, [r0]
	movs r3, #0xb4
	lsls r3, r3, #8
	adds r0, r0, r3
	str r0, [r1, #0x30]
	adds r0, r6, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_808C08C
sub_808C08C: @ 0x0808C08C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov ip, r0
	movs r0, #0
	mov sb, r0
	mov r1, ip
	ldrh r2, [r1, #8]
	movs r3, #8
	ldrsh r0, [r1, r3]
	cmp r0, #5
	ble _0808C0C4
	ldr r0, _0808C0C0 @ =gSaveGame
	adds r0, #0x33
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _0808C0C4
	subs r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	b _0808C0CA
	.align 2, 0
_0808C0C0: .4byte gSaveGame
_0808C0C4:
	mov r4, ip
	ldrb r4, [r4, #8]
	mov r8, r4
_0808C0CA:
	movs r5, #0
	mov r0, r8
	lsls r0, r0, #3
	mov sl, r0
	mov r6, ip
	adds r6, #0x3c
	adds r4, r6, r0
_0808C0D8:
	lsls r0, r5, #3
	adds r3, r6, r0
	ldr r1, [r3]
	ldr r2, [r4]
	adds r7, r0, #0
	cmp r1, r2
	bgt _0808C112
	cmp r1, r2
	beq _0808C0FA
	mov r2, r8
	subs r0, r2, r5
	lsls r0, r0, #9
	adds r0, r1, r0
	str r0, [r3]
	ldr r1, [r4]
	cmp r0, r1
	blt _0808C136
_0808C0FA:
	ldr r1, [r4]
	str r1, [r3]
	mov r0, sb
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov sb, r0
	ldr r0, [r4]
	cmp r1, r0
	blt _0808C136
	cmp r1, r0
	beq _0808C126
_0808C112:
	adds r2, r6, r7
	mov r3, r8
	subs r0, r5, r3
	lsls r0, r0, #9
	ldr r1, [r2]
	subs r1, r1, r0
	str r1, [r2]
	ldr r0, [r4]
	cmp r1, r0
	bgt _0808C136
_0808C126:
	adds r1, r6, r7
	ldr r0, [r4]
	str r0, [r1]
	mov r0, sb
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov sb, r0
_0808C136:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #7
	bls _0808C0D8
	mov r4, sb
	cmp r4, #0x10
	bne _0808C178
	mov r3, ip
	adds r3, #0x38
	mov r0, sl
	adds r1, r3, r0
	ldr r2, [r1]
	ldr r0, _0808C1B0 @ =0x0000B3FF
	cmp r2, r0
	bgt _0808C162
	movs r4, #0x80
	lsls r4, r4, #5
	adds r0, r2, r4
	str r0, [r1]
	movs r0, #0xf
	mov sb, r0
_0808C162:
	movs r5, #0
	adds r2, r1, #0
_0808C166:
	lsls r0, r5, #3
	adds r0, r3, r0
	ldr r1, [r2]
	str r1, [r0]
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #7
	bls _0808C166
_0808C178:
	mov r2, ip
	ldr r1, [r2, #0x30]
	ldr r0, _0808C1B4 @ =0x0000DEFF
	cmp r1, r0
	bgt _0808C192
	mov r0, ip
	adds r0, #0x38
	add r0, sl
	ldr r0, [r0]
	movs r3, #0xb4
	lsls r3, r3, #8
	adds r0, r0, r3
	str r0, [r2, #0x30]
_0808C192:
	mov r4, ip
	ldr r0, [r4, #0x30]
	asrs r0, r0, #8
	rsbs r0, r0, #0
	ldr r1, _0808C1B8 @ =gBgScrollRegs
	strh r0, [r1, #4]
	mov r2, sb
	lsrs r0, r2, #1
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0808C1B0: .4byte 0x0000B3FF
_0808C1B4: .4byte 0x0000DEFF
_0808C1B8: .4byte gBgScrollRegs

	thumb_func_start sub_808C1BC
sub_808C1BC: @ 0x0808C1BC
	push {r4, r5, r6, lr}
	adds r3, r0, #0
	movs r6, #0
	ldrh r0, [r3, #0xc]
	cmp r0, #0
	bne _0808C1FC
	movs r1, #8
	ldrsh r0, [r3, r1]
	lsls r0, r0, #3
	adds r1, r3, #0
	adds r1, #0x38
	adds r4, r1, r0
	ldr r2, [r4]
	ldr r0, _0808C1E4 @ =0x000025FF
	adds r5, r1, #0
	cmp r2, r0
	bgt _0808C1E8
	movs r1, #0xa0
	lsls r1, r1, #5
	b _0808C1F2
	.align 2, 0
_0808C1E4: .4byte 0x000025FF
_0808C1E8:
	ldr r0, _0808C1F8 @ =0x00002EFF
	cmp r2, r0
	bgt _0808C1FC
	movs r1, #0x80
	lsls r1, r1, #4
_0808C1F2:
	adds r0, r2, r1
	str r0, [r4]
	b _0808C234
	.align 2, 0
_0808C1F8: .4byte 0x00002EFF
_0808C1FC:
	movs r2, #8
	ldrsh r0, [r3, r2]
	lsls r0, r0, #3
	adds r1, r3, #0
	adds r1, #0x38
	adds r2, r1, r0
	ldr r0, [r2]
	movs r4, #0xac
	lsls r4, r4, #6
	adds r5, r1, #0
	cmp r0, r4
	ble _0808C230
	movs r0, #1
	strh r0, [r3, #0xc]
	movs r0, #8
	ldrsh r1, [r3, r0]
	lsls r1, r1, #3
	adds r1, r5, r1
	ldr r0, [r1]
	ldr r2, _0808C22C @ =0xFFFFF800
	adds r0, r0, r2
	str r0, [r1]
	b _0808C234
	.align 2, 0
_0808C22C: .4byte 0xFFFFF800
_0808C230:
	movs r6, #1
	str r4, [r2]
_0808C234:
	movs r1, #8
	ldrsh r0, [r3, r1]
	lsls r0, r0, #3
	adds r0, r5, r0
	ldr r0, [r0]
	movs r2, #0xb4
	lsls r2, r2, #8
	adds r0, r0, r2
	str r0, [r3, #0x30]
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_808C250
sub_808C250: @ 0x0808C250
	push {r4, lr}
	mov ip, r0
	ldrh r0, [r0, #0xc]
	cmp r0, #0
	bne _0808C27C
	mov r1, ip
	movs r2, #8
	ldrsh r0, [r1, r2]
	lsls r0, r0, #3
	adds r1, #0x38
	adds r3, r1, r0
	ldr r2, [r3]
	ldr r0, _0808C274 @ =0xFFFF4600
	adds r4, r1, #0
	cmp r2, r0
	ble _0808C27C
	ldr r1, _0808C278 @ =0xFFFFEC00
	b _0808C2BE
	.align 2, 0
_0808C274: .4byte 0xFFFF4600
_0808C278: .4byte 0xFFFFEC00
_0808C27C:
	mov r2, ip
	movs r1, #8
	ldrsh r0, [r2, r1]
	lsls r0, r0, #3
	mov r1, ip
	adds r1, #0x38
	adds r3, r1, r0
	ldr r2, [r3]
	ldr r0, _0808C2B4 @ =0xFFFF4F00
	adds r4, r1, #0
	cmp r2, r0
	bgt _0808C2BC
	ldr r0, _0808C2B8 @ =0xFFFF4C00
	cmp r2, r0
	bge _0808C2C0
	movs r0, #1
	mov r2, ip
	strh r0, [r2, #0xc]
	movs r0, #8
	ldrsh r1, [r2, r0]
	lsls r1, r1, #3
	adds r1, r4, r1
	ldr r0, [r1]
	movs r2, #0xc0
	lsls r2, r2, #3
	adds r0, r0, r2
	str r0, [r1]
	b _0808C2C2
	.align 2, 0
_0808C2B4: .4byte 0xFFFF4F00
_0808C2B8: .4byte 0xFFFF4C00
_0808C2BC:
	ldr r1, _0808C2E0 @ =0xFFFFFF00
_0808C2BE:
	adds r0, r2, r1
_0808C2C0:
	str r0, [r3]
_0808C2C2:
	mov r1, ip
	movs r2, #8
	ldrsh r0, [r1, r2]
	lsls r0, r0, #3
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #0xb4
	lsls r1, r1, #8
	adds r0, r0, r1
	mov r2, ip
	str r0, [r2, #0x30]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808C2E0: .4byte 0xFFFFFF00

	thumb_func_start sub_808C2E4
sub_808C2E4: @ 0x0808C2E4
	push {r4, r5, r6, r7, lr}
	adds r3, r0, #0
	ldrh r0, [r3, #0xc]
	cmp r0, #0
	bne _0808C310
	movs r1, #8
	ldrsh r0, [r3, r1]
	lsls r0, r0, #3
	adds r1, r3, #0
	adds r1, #0x38
	adds r4, r1, r0
	ldr r2, [r4]
	movs r0, #0xe0
	lsls r0, r0, #5
	adds r5, r1, #0
	cmp r2, r0
	ble _0808C310
	ldr r1, _0808C30C @ =0xFFFFFD00
	adds r0, r2, r1
	b _0808C348
	.align 2, 0
_0808C30C: .4byte 0xFFFFFD00
_0808C310:
	movs r2, #8
	ldrsh r0, [r3, r2]
	lsls r0, r0, #3
	adds r1, r3, #0
	adds r1, #0x38
	adds r4, r1, r0
	ldr r2, [r4]
	ldr r0, _0808C340 @ =0x000020FF
	adds r5, r1, #0
	cmp r2, r0
	bgt _0808C344
	movs r0, #1
	strh r0, [r3, #0xc]
	movs r0, #8
	ldrsh r1, [r3, r0]
	lsls r1, r1, #3
	adds r1, r5, r1
	ldr r0, [r1]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r0, r2
	str r0, [r1]
	b _0808C34A
	.align 2, 0
_0808C340: .4byte 0x000020FF
_0808C344:
	movs r0, #0x84
	lsls r0, r0, #6
_0808C348:
	str r0, [r4]
_0808C34A:
	movs r2, #0
	adds r4, r5, #0
	ldr r7, _0808C38C @ =0x00002AFF
	movs r6, #0x80
	lsls r6, r6, #2
_0808C354:
	movs r1, #8
	ldrsh r0, [r3, r1]
	cmp r2, r0
	beq _0808C36A
	lsls r0, r2, #3
	adds r1, r4, r0
	ldr r0, [r1]
	cmp r0, r7
	bgt _0808C36A
	adds r0, r0, r6
	str r0, [r1]
_0808C36A:
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #7
	bls _0808C354
	movs r2, #8
	ldrsh r0, [r3, r2]
	lsls r0, r0, #3
	adds r0, r5, r0
	ldr r0, [r0]
	movs r1, #0xb4
	lsls r1, r1, #8
	adds r0, r0, r1
	str r0, [r3, #0x30]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808C38C: .4byte 0x00002AFF

	thumb_func_start sub_808C390
sub_808C390: @ 0x0808C390
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldrb r0, [r4, #6]
	cmp r0, #0
	bne _0808C3A0
	strh r0, [r4, #8]
	strh r0, [r4, #0xc]
	b _0808C400
_0808C3A0:
	ldr r0, _0808C3E8 @ =gBgScrollRegs
	movs r1, #4
	ldrsh r5, [r0, r1]
	adds r2, r0, #0
	cmp r5, #0
	bne _0808C414
	ldr r0, _0808C3EC @ =gPressedKeys
	ldrh r1, [r0]
	movs r6, #1
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _0808C414
	movs r0, #0x6a
	bl m4aSongNumStart
	movs r1, #8
	ldrsh r0, [r4, r1]
	lsls r0, r0, #2
	adds r1, r4, #0
	adds r1, #0x14
	adds r1, r1, r0
	ldr r0, [r1]
	cmp r0, #2
	bgt _0808C3FC
	movs r0, #1
	strb r0, [r4, #3]
	ldr r1, _0808C3F0 @ =gBldRegs
	movs r0, #0xfd
	lsls r0, r0, #6
	strh r0, [r1]
	strh r6, [r1, #2]
	ldr r0, _0808C3F4 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808C3F8 @ =sub_808B398
	b _0808C406
	.align 2, 0
_0808C3E8: .4byte gBgScrollRegs
_0808C3EC: .4byte gPressedKeys
_0808C3F0: .4byte gBldRegs
_0808C3F4: .4byte gCurTask
_0808C3F8: .4byte sub_808B398
_0808C3FC:
	strh r5, [r4, #8]
	strh r5, [r4, #0xc]
_0808C400:
	ldr r0, _0808C40C @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808C410 @ =sub_808BBBC
_0808C406:
	str r0, [r1, #8]
	movs r0, #1
	b _0808C41E
	.align 2, 0
_0808C40C: .4byte gCurTask
_0808C410: .4byte sub_808BBBC
_0808C414:
	ldr r0, [r4, #0x30]
	asrs r0, r0, #8
	rsbs r0, r0, #0
	strh r0, [r2, #4]
	movs r0, #0
_0808C41E:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_808C424
sub_808C424: @ 0x0808C424
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, _0808C454 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0808C458
	movs r0, #0x6b
	bl m4aSongNumStart
	movs r1, #8
	ldrsh r0, [r4, r1]
	lsls r0, r0, #2
	adds r1, r4, #0
	adds r1, #0x14
	adds r1, r1, r0
	movs r2, #0xa
	ldrsh r0, [r4, r2]
	str r0, [r1]
	movs r0, #0
	strh r0, [r4, #0xc]
	b _0808C474
	.align 2, 0
_0808C454: .4byte gPressedKeys
_0808C458:
	ldr r0, _0808C480 @ =gBgScrollRegs
	movs r2, #4
	ldrsh r5, [r0, r2]
	adds r6, r0, #0
	cmp r5, #0
	bne _0808C504
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0808C48C
	movs r0, #0x6a
	bl m4aSongNumStart
	strh r5, [r4, #0xc]
_0808C474:
	ldr r0, _0808C484 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808C488 @ =sub_808BBBC
	str r0, [r1, #8]
	movs r0, #1
	b _0808C50E
	.align 2, 0
_0808C480: .4byte gBgScrollRegs
_0808C484: .4byte gCurTask
_0808C488: .4byte sub_808BBBC
_0808C48C:
	ldr r5, _0808C4C8 @ =gRepeatedKeys
	ldrh r1, [r5]
	movs r0, #0x30
	ands r0, r1
	cmp r0, #0
	beq _0808C504
	movs r0, #0x6c
	bl m4aSongNumStart
	ldrh r1, [r5]
	movs r0, #0x10
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	cmp r3, #0
	beq _0808C4D4
	movs r0, #8
	ldrsh r3, [r4, r0]
	lsls r1, r3, #2
	adds r0, r4, #0
	adds r0, #0x14
	adds r2, r0, r1
	ldr r0, [r2]
	cmp r0, #0
	bne _0808C4D0
	ldr r0, _0808C4CC @ =gUnknown_080D6C08
	lsls r1, r3, #1
	adds r1, r1, r0
	ldrh r0, [r1]
	b _0808C502
	.align 2, 0
_0808C4C8: .4byte gRepeatedKeys
_0808C4CC: .4byte gUnknown_080D6C08
_0808C4D0:
	subs r0, #1
	b _0808C502
_0808C4D4:
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0808C504
	movs r2, #8
	ldrsh r1, [r4, r2]
	lsls r2, r1, #2
	adds r0, r4, #0
	adds r0, #0x14
	adds r2, r0, r2
	ldr r0, _0808C4FC @ =gUnknown_080D6C08
	lsls r1, r1, #1
	adds r1, r1, r0
	ldr r0, [r2]
	ldrh r1, [r1]
	cmp r0, r1
	bne _0808C500
	str r3, [r2]
	b _0808C504
	.align 2, 0
_0808C4FC: .4byte gUnknown_080D6C08
_0808C500:
	adds r0, #1
_0808C502:
	str r0, [r2]
_0808C504:
	ldr r0, [r4, #0x30]
	asrs r0, r0, #8
	rsbs r0, r0, #0
	strh r0, [r6, #4]
	movs r0, #0
_0808C50E:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_808C514
sub_808C514: @ 0x0808C514
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _0808C578 @ =gBgScrollRegs
	movs r1, #4
	ldrsh r5, [r0, r1]
	adds r3, r0, #0
	ldr r2, _0808C57C @ =gPressedKeys
	cmp r5, #0
	bne _0808C588
	ldrb r0, [r4, #6]
	cmp r0, #0
	beq _0808C588
	ldrh r1, [r2]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0808C588
	movs r0, #0x6a
	bl m4aSongNumStart
	strh r5, [r4, #0xc]
	ldr r0, _0808C580 @ =gSaveGame
	ldr r2, _0808C584 @ =0x00000366
	adds r5, r0, r2
	ldrb r1, [r5]
	movs r2, #8
	ldrsh r0, [r4, r2]
	lsls r0, r0, #2
	adds r3, r4, #0
	adds r3, #0x14
	adds r0, r3, r0
	ldr r2, [r0]
	cmp r1, r2
	beq _0808C570
	strb r2, [r5]
	movs r1, #8
	ldrsh r0, [r4, r1]
	lsls r0, r0, #2
	adds r0, r3, r0
	ldr r0, [r0]
	strh r0, [r4, #0xa]
	strb r2, [r4]
	adds r0, r4, #0
	movs r1, #1
	bl sub_808B664
_0808C570:
	movs r0, #0
	strb r0, [r4, #6]
	b _0808C5BA
	.align 2, 0
_0808C578: .4byte gBgScrollRegs
_0808C57C: .4byte gPressedKeys
_0808C580: .4byte gSaveGame
_0808C584: .4byte 0x00000366
_0808C588:
	ldrh r1, [r2]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	bne _0808C59E
	ldr r0, [r4, #0x30]
	asrs r0, r0, #8
	rsbs r0, r0, #0
	strh r0, [r3, #4]
	movs r0, #0
	b _0808C5C4
_0808C59E:
	movs r0, #0x6b
	bl m4aSongNumStart
	movs r2, #8
	ldrsh r0, [r4, r2]
	lsls r0, r0, #2
	adds r1, r4, #0
	adds r1, #0x14
	adds r1, r1, r0
	movs r2, #0xa
	ldrsh r0, [r4, r2]
	str r0, [r1]
	movs r0, #0
	strh r0, [r4, #0xc]
_0808C5BA:
	ldr r0, _0808C5CC @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808C5D0 @ =sub_808BBBC
	str r0, [r1, #8]
	movs r0, #1
_0808C5C4:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_0808C5CC: .4byte gCurTask
_0808C5D0: .4byte sub_808BBBC

	thumb_func_start sub_808C5D4
sub_808C5D4: @ 0x0808C5D4
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, _0808C610 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0808C620
	movs r0, #0x6b
	bl m4aSongNumStart
	ldrb r2, [r4, #3]
	cmp r2, #0
	bne _0808C61C
	movs r1, #8
	ldrsh r0, [r4, r1]
	lsls r0, r0, #2
	adds r1, r4, #0
	adds r1, #0x14
	adds r1, r1, r0
	movs r3, #0xa
	ldrsh r0, [r4, r3]
	str r0, [r1]
	strh r2, [r4, #0xc]
	ldr r0, _0808C614 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808C618 @ =sub_808BBBC
	str r0, [r1, #8]
	movs r0, #1
	b _0808C6F4
	.align 2, 0
_0808C610: .4byte gPressedKeys
_0808C614: .4byte gCurTask
_0808C618: .4byte sub_808BBBC
_0808C61C:
	movs r0, #0
	strb r0, [r4, #3]
_0808C620:
	ldr r6, _0808C684 @ =gBgScrollRegs
	movs r0, #4
	ldrsh r5, [r6, r0]
	cmp r5, #0
	bne _0808C6E8
	ldr r0, _0808C688 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0808C63E
	movs r0, #0x6a
	bl m4aSongNumStart
	strb r5, [r4, #3]
_0808C63E:
	movs r1, #4
	ldrsh r0, [r6, r1]
	cmp r0, #0
	bne _0808C6E8
	ldr r5, _0808C68C @ =gRepeatedKeys
	ldrh r1, [r5]
	movs r0, #0xc0
	ands r0, r1
	cmp r0, #0
	beq _0808C6C8
	movs r0, #0x6c
	bl m4aSongNumStart
	ldrh r1, [r5]
	movs r0, #0x40
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	cmp r3, #0
	beq _0808C698
	movs r0, #8
	ldrsh r3, [r4, r0]
	lsls r1, r3, #2
	adds r0, r4, #0
	adds r0, #0x14
	adds r2, r0, r1
	ldr r0, [r2]
	cmp r0, #0
	bne _0808C694
	ldr r0, _0808C690 @ =gUnknown_080D6C08
	lsls r1, r3, #1
	adds r1, r1, r0
	ldrh r0, [r1]
	b _0808C6C6
	.align 2, 0
_0808C684: .4byte gBgScrollRegs
_0808C688: .4byte gPressedKeys
_0808C68C: .4byte gRepeatedKeys
_0808C690: .4byte gUnknown_080D6C08
_0808C694:
	subs r0, #1
	b _0808C6C6
_0808C698:
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _0808C6C8
	movs r0, #8
	ldrsh r1, [r4, r0]
	lsls r2, r1, #2
	adds r0, r4, #0
	adds r0, #0x14
	adds r2, r0, r2
	ldr r0, _0808C6C0 @ =gUnknown_080D6C08
	lsls r1, r1, #1
	adds r1, r1, r0
	ldr r0, [r2]
	ldrh r1, [r1]
	cmp r0, r1
	bne _0808C6C4
	str r3, [r2]
	b _0808C6C8
	.align 2, 0
_0808C6C0: .4byte gUnknown_080D6C08
_0808C6C4:
	adds r0, #1
_0808C6C6:
	str r0, [r2]
_0808C6C8:
	ldr r0, _0808C6FC @ =gBgScrollRegs
	movs r1, #4
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _0808C6E8
	ldr r0, _0808C700 @ =gRepeatedKeys
	ldrh r1, [r0]
	movs r0, #0x30
	ands r0, r1
	cmp r0, #0
	beq _0808C6E8
	movs r0, #0x6c
	bl m4aSongNumStart
	movs r0, #1
	strb r0, [r4, #3]
_0808C6E8:
	ldr r1, _0808C6FC @ =gBgScrollRegs
	ldr r0, [r4, #0x30]
	asrs r0, r0, #8
	rsbs r0, r0, #0
	strh r0, [r1, #4]
	movs r0, #0
_0808C6F4:
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_0808C6FC: .4byte gBgScrollRegs
_0808C700: .4byte gRepeatedKeys

	thumb_func_start sub_808C704
sub_808C704: @ 0x0808C704
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _0808C73C @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0808C748
	movs r0, #0x6b
	bl m4aSongNumStart
	movs r2, #0
	strb r2, [r4, #3]
	movs r1, #8
	ldrsh r0, [r4, r1]
	lsls r0, r0, #2
	adds r1, r4, #0
	adds r1, #0x14
	adds r1, r1, r0
	movs r3, #0xa
	ldrsh r0, [r4, r3]
	str r0, [r1]
	strh r2, [r4, #0xc]
	ldr r0, _0808C740 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808C744 @ =sub_808BBBC
	b _0808C7CA
	.align 2, 0
_0808C73C: .4byte gPressedKeys
_0808C740: .4byte gCurTask
_0808C744: .4byte sub_808BBBC
_0808C748:
	ldr r0, _0808C78C @ =gBgScrollRegs
	movs r2, #4
	ldrsh r5, [r0, r2]
	cmp r5, #0
	bne _0808C7AA
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0808C7AA
	movs r0, #0x6a
	bl m4aSongNumStart
	movs r3, #8
	ldrsh r0, [r4, r3]
	lsls r0, r0, #2
	adds r1, r4, #0
	adds r1, #0x14
	adds r0, r1, r0
	ldr r0, [r0]
	cmp r0, #0
	beq _0808C798
	strb r5, [r4, #3]
	movs r2, #8
	ldrsh r0, [r4, r2]
	lsls r0, r0, #2
	adds r0, r1, r0
	movs r3, #0xa
	ldrsh r1, [r4, r3]
	str r1, [r0]
	strh r5, [r4, #0xc]
	ldr r0, _0808C790 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808C794 @ =sub_808BBBC
	b _0808C7CA
	.align 2, 0
_0808C78C: .4byte gBgScrollRegs
_0808C790: .4byte gCurTask
_0808C794: .4byte sub_808BBBC
_0808C798:
	ldrb r0, [r4, #3]
	adds r0, #1
	strb r0, [r4, #3]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #2
	bne _0808C7AA
	movs r0, #1
	strb r0, [r4, #5]
_0808C7AA:
	ldrb r0, [r4, #5]
	cmp r0, #0
	bne _0808C7C4
	ldr r1, _0808C7C0 @ =gBgScrollRegs
	ldr r0, [r4, #0x30]
	asrs r0, r0, #8
	rsbs r0, r0, #0
	strh r0, [r1, #4]
	movs r0, #0
	b _0808C7CE
	.align 2, 0
_0808C7C0: .4byte gBgScrollRegs
_0808C7C4:
	ldr r0, _0808C7D4 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808C7D8 @ =sub_808C9B0
_0808C7CA:
	str r0, [r1, #8]
	movs r0, #1
_0808C7CE:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_0808C7D4: .4byte gCurTask
_0808C7D8: .4byte sub_808C9B0

	thumb_func_start Options_LoadSelectedMenu
Options_LoadSelectedMenu: @ 0x0808C7DC
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldrb r4, [r5, #6]
	cmp r4, #0
	bne _0808C8D6
	movs r0, #8
	ldrsh r6, [r5, r0]
	cmp r6, #6
	bgt _0808C8A4
	strb r4, [r5, #3]
	adds r0, r6, #0
	lsls r0, r0, #2
	adds r7, r5, #0
	adds r7, #0x14
	adds r0, r7, r0
	ldr r0, [r0]
	strh r0, [r5, #0xa]
	cmp r6, #5
	bne _0808C84E
	adds r0, r5, #0
	adds r0, #0xec
	ldr r3, _0808C888 @ =gDispCnt
	ldrh r1, [r3]
	movs r2, #0x80
	lsls r2, r2, #3
	mov ip, r2
	mov r2, ip
	orrs r1, r2
	strh r1, [r3]
	ldr r2, _0808C88C @ =gBgCntRegs
	ldr r1, _0808C890 @ =0x00005E86
	strh r1, [r2, #2]
	ldr r1, _0808C894 @ =0x06004000
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _0808C898 @ =0x0600F000
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	ldr r1, _0808C89C @ =0x00000165
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	movs r1, #0x1e
	strh r1, [r0, #0x26]
	movs r1, #0x14
	strh r1, [r0, #0x28]
	movs r1, #0x8b
	lsls r1, r1, #1
	adds r2, r5, r1
	movs r1, #0
	strb r1, [r2]
	strh r6, [r0, #0x2e]
	bl DrawBackground
_0808C84E:
	movs r2, #8
	ldrsh r1, [r5, r2]
	cmp r1, #0
	bne _0808C85E
	adds r0, r1, #0
	lsls r0, r0, #2
	adds r0, r7, r0
	str r1, [r0]
_0808C85E:
	ldr r4, _0808C8A0 @ =sOptionsSlideInits
	movs r0, #8
	ldrsh r2, [r5, r0]
	lsls r2, r2, #2
	adds r4, r2, r4
	adds r0, r7, r2
	movs r1, #0
	ldrsh r0, [r0, r1]
	adds r1, r5, #0
	adds r1, #0xa8
	ldr r1, [r1]
	adds r2, #0x14
	adds r2, r5, r2
	adds r3, r5, #6
	ldr r4, [r4]
	bl _call_via_r4
	movs r0, #1
	strb r0, [r5, #6]
	b _0808C8D6
	.align 2, 0
_0808C888: .4byte gDispCnt
_0808C88C: .4byte gBgCntRegs
_0808C890: .4byte 0x00005E86
_0808C894: .4byte 0x06004000
_0808C898: .4byte 0x0600F000
_0808C89C: .4byte 0x00000165
_0808C8A0: .4byte sOptionsSlideInits
_0808C8A4:
	movs r4, #0
_0808C8A6:
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #3
	movs r2, #0xb6
	lsls r2, r2, #1
	adds r0, r0, r2
	adds r1, r5, r0
	movs r2, #8
	ldrsh r0, [r5, r2]
	cmp r4, r0
	bne _0808C8C0
	movs r0, #0
	b _0808C8C4
_0808C8C0:
	movs r0, #0x80
	lsls r0, r0, #1
_0808C8C4:
	strh r0, [r1, #0x14]
	adds r0, r1, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #7
	bls _0808C8A6
_0808C8D6:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_808C8DC
sub_808C8DC: @ 0x0808C8DC
	push {r4, r5, r6, lr}
	ldr r6, _0808C97C @ =gCurTask
	ldr r0, [r6]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldrh r0, [r4, #0x10]
	ldr r5, _0808C980 @ =gBldRegs
	cmp r0, #0
	bne _0808C928
	ldr r2, _0808C984 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _0808C988 @ =gWinRegs
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	ldrh r2, [r1, #8]
	movs r0, #0x3f
	orrs r0, r2
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	orrs r0, r2
	strh r0, [r1, #0xa]
	movs r0, #0x10
	strh r0, [r5, #4]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r4, #0xe]
	movs r0, #1
	strh r0, [r4, #0x10]
_0808C928:
	ldr r0, _0808C98C @ =0x00003EFF
	strh r0, [r5]
	adds r0, r4, #0
	bl sub_808BEEC
	adds r0, r4, #0
	bl sub_808CED0
	adds r0, r4, #0
	bl sub_808CB74
	adds r0, r4, #0
	bl sub_808CF4C
	adds r0, r4, #0
	bl sub_808CC48
	adds r0, r4, #0
	bl sub_808CF00
	adds r0, r4, #0
	bl sub_808CCA0
	adds r0, r4, #0
	bl sub_808CD14
	adds r0, r4, #0
	bl sub_808CD88
	ldrh r0, [r5, #4]
	cmp r0, #0
	beq _0808C994
	ldrh r0, [r4, #0xe]
	lsrs r0, r0, #8
	strh r0, [r5, #4]
	ldr r1, _0808C990 @ =0xFFFFFF00
	adds r0, r1, #0
	ldrh r3, [r4, #0xe]
	adds r0, r0, r3
	strh r0, [r4, #0xe]
	b _0808C9A0
	.align 2, 0
_0808C97C: .4byte gCurTask
_0808C980: .4byte gBldRegs
_0808C984: .4byte gDispCnt
_0808C988: .4byte gWinRegs
_0808C98C: .4byte 0x00003EFF
_0808C990: .4byte 0xFFFFFF00
_0808C994:
	strh r0, [r5, #4]
	ldr r0, _0808C9A8 @ =0x00003FFF
	strh r0, [r5]
	ldr r1, [r6]
	ldr r0, _0808C9AC @ =sub_808BD90
	str r0, [r1, #8]
_0808C9A0:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808C9A8: .4byte 0x00003FFF
_0808C9AC: .4byte sub_808BD90

	thumb_func_start sub_808C9B0
sub_808C9B0: @ 0x0808C9B0
	push {r4, r5, r6, r7, lr}
	ldr r7, _0808CA44 @ =gCurTask
	ldr r0, [r7]
	ldrh r6, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r6, r0
	ldrh r0, [r5, #0x10]
	cmp r0, #0
	beq _0808C9F8
	ldr r2, _0808CA48 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _0808CA4C @ =gWinRegs
	movs r3, #0
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	ldrh r2, [r1, #8]
	movs r0, #0x3f
	orrs r0, r2
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	orrs r0, r2
	strh r0, [r1, #0xa]
	ldr r1, _0808CA50 @ =gBldRegs
	ldr r0, _0808CA54 @ =0x00003EFF
	strh r0, [r1]
	strh r3, [r5, #0xe]
	strh r3, [r5, #0x10]
_0808C9F8:
	adds r0, r5, #0
	bl sub_808CED0
	adds r0, r5, #0
	bl sub_808CB74
	adds r0, r5, #0
	bl sub_808CF4C
	adds r0, r5, #0
	bl sub_808CC48
	adds r0, r5, #0
	bl sub_808CF00
	adds r0, r5, #0
	bl sub_808CCA0
	adds r0, r5, #0
	bl sub_808CD14
	adds r0, r5, #0
	bl sub_808CD88
	ldr r2, _0808CA50 @ =gBldRegs
	ldrh r0, [r2, #4]
	cmp r0, #0xf
	bhi _0808CA58
	ldrh r0, [r5, #0xe]
	lsrs r0, r0, #8
	strh r0, [r2, #4]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r1, #0
	ldrh r2, [r5, #0xe]
	adds r0, r0, r2
	strh r0, [r5, #0xe]
	b _0808CA88
	.align 2, 0
_0808CA44: .4byte gCurTask
_0808CA48: .4byte gDispCnt
_0808CA4C: .4byte gWinRegs
_0808CA50: .4byte gBldRegs
_0808CA54: .4byte 0x00003EFF
_0808CA58:
	movs r1, #0
	movs r4, #0
	movs r0, #0x10
	strh r0, [r2, #4]
	strb r1, [r5, #4]
	ldr r0, _0808CA90 @ =gSaveGame
	ldr r0, [r0]
	bl sub_8001DDC
	bl sub_8001E0C
	movs r3, #8
	ldrsh r0, [r5, r3]
	lsls r0, r0, #2
	ldr r2, _0808CA94 @ =0x03000014
	adds r1, r6, r2
	adds r1, r1, r0
	movs r3, #0xa
	ldrsh r0, [r5, r3]
	str r0, [r1]
	strh r4, [r5, #0xc]
	ldr r1, [r7]
	ldr r0, _0808CA98 @ =sub_808BBBC
	str r0, [r1, #8]
_0808CA88:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808CA90: .4byte gSaveGame
_0808CA94: .4byte 0x03000014
_0808CA98: .4byte sub_808BBBC

	thumb_func_start sub_808CA9C
sub_808CA9C: @ 0x0808CA9C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r0, _0808CAE0 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	movs r4, #0
	ldr r0, _0808CAE4 @ =gUnknown_03000534
	mov r8, r0
	ldr r7, _0808CAE8 @ =0x0000FFFF
	ldr r6, _0808CAEC @ =gUnknown_080D7458
_0808CAB8:
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #3
	movs r1, #0xdd
	lsls r1, r1, #2
	adds r0, r0, r1
	adds r2, r5, r0
	lsls r0, r4, #1
	add r0, r8
	ldrh r0, [r0]
	adds r1, r0, #0
	cmp r1, r7
	beq _0808CB02
	cmp r1, #0xff
	bls _0808CAF4
	adds r0, #1
	strb r0, [r2, #0x1a]
	ldr r0, _0808CAF0 @ =gUnknown_080D7460
	ldrh r0, [r0]
	b _0808CAF8
	.align 2, 0
_0808CAE0: .4byte gCurTask
_0808CAE4: .4byte gUnknown_03000534
_0808CAE8: .4byte 0x0000FFFF
_0808CAEC: .4byte gUnknown_080D7458
_0808CAF0: .4byte gUnknown_080D7460
_0808CAF4:
	strb r0, [r2, #0x1a]
	ldrh r0, [r6]
_0808CAF8:
	strh r0, [r2, #0xc]
	ldrb r0, [r5, #4]
	adds r0, #1
	strb r0, [r5, #4]
	b _0808CB0A
_0808CB02:
	ldrh r0, [r6]
	movs r1, #0
	strh r0, [r2, #0xc]
	strb r1, [r2, #0x1a]
_0808CB0A:
	adds r0, r2, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #5
	bls _0808CAB8
	movs r4, #0
	strb r4, [r5, #5]
	strb r4, [r5, #3]
	movs r2, #1
	str r2, [r5, #0x2c]
	ldr r1, _0808CB64 @ =gSaveGame
	movs r3, #0xd9
	lsls r3, r3, #2
	adds r0, r1, r3
	ldrb r0, [r0]
	str r0, [r5, #0x18]
	adds r3, #1
	adds r0, r1, r3
	ldrb r0, [r0]
	str r0, [r5, #0x1c]
	ldr r0, _0808CB68 @ =0x00000366
	adds r1, r1, r0
	ldrb r0, [r1]
	str r0, [r5, #0x20]
	strh r2, [r5, #0xa]
	bl sub_8001E58
	movs r0, #0
	bl sub_808AF44
	ldr r0, _0808CB6C @ =gWinRegs
	strh r4, [r0, #8]
	ldr r0, _0808CB70 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808CB64: .4byte gSaveGame
_0808CB68: .4byte 0x00000366
_0808CB6C: .4byte gWinRegs
_0808CB70: .4byte gCurTask

	thumb_func_start sub_808CB74
sub_808CB74: @ 0x0808CB74
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r6, r0, #0
	movs r5, #0
	ldr r0, _0808CBEC @ =gUnknown_03000563
	mov sb, r0
	movs r7, #1
	ldr r1, _0808CBF0 @ =gUnknown_080D6960
	mov r8, r1
_0808CB8A:
	cmp r5, #5
	bne _0808CB9A
	mov r2, sb
	ldrb r1, [r2]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _0808CC30
_0808CB9A:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	movs r1, #0xb6
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r4, r6, r0
	ldrb r0, [r6]
	lsls r0, r0, #3
	adds r0, r5, r0
	lsls r0, r0, #3
	add r0, r8
	ldrh r0, [r0]
	strh r0, [r4, #0xc]
	ldrb r0, [r6]
	lsls r0, r0, #3
	adds r0, r5, r0
	lsls r0, r0, #3
	add r0, r8
	ldrb r0, [r0, #2]
	strb r0, [r4, #0x1a]
	lsls r1, r5, #3
	adds r0, r6, #0
	adds r0, #0x38
	adds r0, r0, r1
	ldr r0, [r0]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	cmp r5, #5
	bls _0808CBF4
	mov r2, sb
	ldrb r1, [r2]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	bne _0808CBF4
	subs r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	b _0808CBF6
	.align 2, 0
_0808CBEC: .4byte gUnknown_03000563
_0808CBF0: .4byte gUnknown_080D6960
_0808CBF4:
	adds r0, r5, #0
_0808CBF6:
	lsls r1, r0, #3
	adds r0, r6, #0
	adds r0, #0x3c
	adds r0, r0, r1
	ldr r0, [r0]
	asrs r0, r0, #8
	movs r1, #0
	strh r0, [r4, #0x12]
	movs r2, #8
	ldrsh r0, [r6, r2]
	cmp r5, r0
	beq _0808CC18
	strb r7, [r4, #0x1f]
	ldr r0, [r4, #8]
	movs r1, #0x80
	orrs r0, r1
	b _0808CC22
_0808CC18:
	strb r1, [r4, #0x1f]
	ldr r0, [r4, #8]
	movs r1, #0x81
	rsbs r1, r1, #0
	ands r0, r1
_0808CC22:
	str r0, [r4, #8]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
_0808CC30:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #7
	bls _0808CB8A
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808CC48
sub_808CC48: @ 0x0808CC48
	push {lr}
	movs r1, #0xab
	lsls r1, r1, #2
	adds r3, r0, r1
	ldr r2, _0808CC84 @ =gUnknown_080D6AE0
	ldrh r1, [r2]
	strh r1, [r3, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r3, #0x1a]
	ldr r1, [r0, #0x38]
	movs r2, #0xd6
	lsls r2, r2, #7
	adds r1, r1, r2
	asrs r1, r1, #8
	strh r1, [r3, #0x10]
	ldr r1, [r0, #0x3c]
	asrs r1, r1, #8
	strh r1, [r3, #0x12]
	movs r1, #8
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _0808CC88
	movs r0, #0
	strb r0, [r3, #0x1f]
	ldr r0, [r3, #8]
	movs r1, #0x81
	rsbs r1, r1, #0
	ands r0, r1
	b _0808CC92
	.align 2, 0
_0808CC84: .4byte gUnknown_080D6AE0
_0808CC88:
	movs r0, #4
	strb r0, [r3, #0x1f]
	ldr r0, [r3, #8]
	movs r1, #0x80
	orrs r0, r1
_0808CC92:
	str r0, [r3, #8]
	adds r0, r3, #0
	bl DisplaySprite
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808CCA0
sub_808CCA0: @ 0x0808CCA0
	push {r4, lr}
	ldrb r2, [r0, #0x18]
	movs r1, #0xb5
	lsls r1, r1, #2
	adds r4, r0, r1
	ldr r3, _0808CCF0 @ =gUnknown_080D6AE8
	ldrb r1, [r0]
	lsls r1, r1, #1
	adds r1, r2, r1
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrh r1, [r1]
	strh r1, [r4, #0xc]
	ldrb r1, [r0]
	lsls r1, r1, #1
	adds r2, r2, r1
	lsls r2, r2, #3
	adds r2, r2, r3
	ldrb r1, [r2, #2]
	strb r1, [r4, #0x1a]
	ldr r1, [r0, #0x40]
	movs r2, #0xe6
	lsls r2, r2, #7
	adds r1, r1, r2
	asrs r1, r1, #8
	strh r1, [r4, #0x10]
	ldr r1, [r0, #0x44]
	asrs r1, r1, #8
	strh r1, [r4, #0x12]
	movs r1, #8
	ldrsh r0, [r0, r1]
	cmp r0, #1
	bne _0808CCF4
	movs r0, #0
	strb r0, [r4, #0x1f]
	ldr r0, [r4, #8]
	movs r1, #0x81
	rsbs r1, r1, #0
	ands r0, r1
	b _0808CCFE
	.align 2, 0
_0808CCF0: .4byte gUnknown_080D6AE8
_0808CCF4:
	movs r0, #4
	strb r0, [r4, #0x1f]
	ldr r0, [r4, #8]
	movs r1, #0x80
	orrs r0, r1
_0808CCFE:
	str r0, [r4, #8]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808CD14
sub_808CD14: @ 0x0808CD14
	push {r4, lr}
	ldrb r2, [r0, #0x1c]
	movs r1, #0xbf
	lsls r1, r1, #2
	adds r4, r0, r1
	ldr r3, _0808CD64 @ =gUnknown_080D6B48
	ldrb r1, [r0]
	lsls r1, r1, #1
	adds r1, r2, r1
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrh r1, [r1]
	strh r1, [r4, #0xc]
	ldrb r1, [r0]
	lsls r1, r1, #1
	adds r2, r2, r1
	lsls r2, r2, #3
	adds r2, r2, r3
	ldrb r1, [r2, #2]
	strb r1, [r4, #0x1a]
	ldr r1, [r0, #0x48]
	movs r2, #0xe6
	lsls r2, r2, #7
	adds r1, r1, r2
	asrs r1, r1, #8
	strh r1, [r4, #0x10]
	ldr r1, [r0, #0x4c]
	asrs r1, r1, #8
	strh r1, [r4, #0x12]
	movs r1, #8
	ldrsh r0, [r0, r1]
	cmp r0, #2
	bne _0808CD68
	movs r0, #0
	strb r0, [r4, #0x1f]
	ldr r0, [r4, #8]
	movs r1, #0x81
	rsbs r1, r1, #0
	ands r0, r1
	b _0808CD72
	.align 2, 0
_0808CD64: .4byte gUnknown_080D6B48
_0808CD68:
	movs r0, #4
	strb r0, [r4, #0x1f]
	ldr r0, [r4, #8]
	movs r1, #0x80
	orrs r0, r1
_0808CD72:
	str r0, [r4, #8]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808CD88
sub_808CD88: @ 0x0808CD88
	push {r4, lr}
	movs r1, #0xc9
	lsls r1, r1, #2
	adds r4, r0, r1
	ldr r2, _0808CDD0 @ =gUnknown_080D6BA8
	ldrb r1, [r0]
	lsls r1, r1, #3
	adds r1, r1, r2
	ldrh r1, [r1]
	strh r1, [r4, #0xc]
	ldrb r1, [r0]
	lsls r1, r1, #3
	adds r1, r1, r2
	ldrb r1, [r1, #2]
	strb r1, [r4, #0x1a]
	ldr r1, [r0, #0x50]
	movs r2, #0xe6
	lsls r2, r2, #7
	adds r1, r1, r2
	asrs r1, r1, #8
	strh r1, [r4, #0x10]
	ldr r1, [r0, #0x54]
	asrs r1, r1, #8
	strh r1, [r4, #0x12]
	movs r1, #8
	ldrsh r0, [r0, r1]
	cmp r0, #3
	bne _0808CDD4
	movs r0, #0
	strb r0, [r4, #0x1f]
	ldr r0, [r4, #8]
	movs r1, #0x81
	rsbs r1, r1, #0
	ands r0, r1
	b _0808CDDE
	.align 2, 0
_0808CDD0: .4byte gUnknown_080D6BA8
_0808CDD4:
	movs r0, #4
	strb r0, [r4, #0x1f]
	ldr r0, [r4, #8]
	movs r1, #0x80
	orrs r0, r1
_0808CDDE:
	str r0, [r4, #8]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808CDF4
sub_808CDF4: @ 0x0808CDF4
	push {lr}
	movs r0, #0
	bl sub_808AF44
	pop {r0}
	bx r0

	thumb_func_start sub_808CE00
sub_808CE00: @ 0x0808CE00
	push {r4, r5, lr}
	ldr r0, _0808CE78 @ =gCurTask
	ldr r0, [r0]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	adds r0, r4, #0
	bl sub_808BEEC
	adds r0, r4, #0
	bl sub_808C250
	adds r0, r4, #0
	bl sub_808CED0
	adds r0, r4, #0
	bl sub_808CB74
	adds r0, r4, #0
	bl sub_808CF4C
	adds r0, r4, #0
	bl sub_808CC48
	adds r0, r4, #0
	bl sub_808CCA0
	adds r0, r4, #0
	bl sub_808CD14
	adds r0, r4, #0
	bl sub_808CD88
	adds r0, r4, #0
	bl sub_808BFA0
	cmp r0, #1
	bne _0808CE56
	ldr r0, _0808CE7C @ =0x030000A0
	adds r1, r5, r0
	movs r0, #0
	str r0, [r1]
_0808CE56:
	ldr r1, _0808CE80 @ =gUnknown_080D6E38
	movs r2, #8
	ldrsh r0, [r4, r2]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r4, #0
	bl _call_via_r1
	ldr r1, _0808CE84 @ =gBgScrollRegs
	ldr r0, [r4, #0x30]
	asrs r0, r0, #8
	rsbs r0, r0, #0
	strh r0, [r1, #4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808CE78: .4byte gCurTask
_0808CE7C: .4byte 0x030000A0
_0808CE80: .4byte gUnknown_080D6E38
_0808CE84: .4byte gBgScrollRegs

	thumb_func_start sub_808CE88
sub_808CE88: @ 0x0808CE88
	push {lr}
	adds r2, r0, #0
	movs r1, #8
	ldrsh r0, [r2, r1]
	lsls r0, r0, #2
	adds r1, r2, #0
	adds r1, #0x14
	adds r1, r1, r0
	ldr r0, [r1]
	cmp r0, #0x7b
	beq _0808CEB0
	ldr r1, _0808CEAC @ =gBgScrollRegs
	ldr r0, [r2, #0x30]
	asrs r0, r0, #8
	rsbs r0, r0, #0
	strh r0, [r1, #4]
	movs r0, #0
	b _0808CEC4
	.align 2, 0
_0808CEAC: .4byte gBgScrollRegs
_0808CEB0:
	movs r3, #0xa
	ldrsh r0, [r2, r3]
	str r0, [r1]
	movs r0, #0
	strh r0, [r2, #0xc]
	ldr r0, _0808CEC8 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808CECC @ =sub_808BBBC
	str r0, [r1, #8]
	movs r0, #1
_0808CEC4:
	pop {r1}
	bx r1
	.align 2, 0
_0808CEC8: .4byte gCurTask
_0808CECC: .4byte sub_808BBBC

	thumb_func_start sub_808CED0
sub_808CED0: @ 0x0808CED0
	adds r2, r0, #0
	adds r2, #0x98
	ldr r1, [r2]
	movs r3, #0xc0
	lsls r3, r3, #1
	adds r1, r1, r3
	str r1, [r2]
	adds r0, #0x9c
	ldr r1, [r0]
	ldr r3, _0808CEF8 @ =0xFFFFFE80
	adds r1, r1, r3
	str r1, [r0]
	ldr r3, _0808CEFC @ =gBgScrollRegs
	ldr r0, [r2]
	asrs r0, r0, #8
	strh r0, [r3]
	asrs r1, r1, #8
	strh r1, [r3, #2]
	bx lr
	.align 2, 0
_0808CEF8: .4byte 0xFFFFFE80
_0808CEFC: .4byte gBgScrollRegs

	thumb_func_start sub_808CF00
sub_808CF00: @ 0x0808CF00
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #0
	b _0808CF3E
_0808CF08:
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #3
	movs r1, #0xdd
	lsls r1, r1, #2
	adds r0, r0, r1
	adds r0, r5, r0
	ldr r1, [r5, #0x38]
	movs r2, #0xd6
	lsls r2, r2, #7
	adds r1, r1, r2
	asrs r1, r1, #8
	lsls r2, r4, #3
	adds r1, r1, r2
	lsls r2, r4, #1
	adds r1, r1, r2
	adds r1, #0xa
	strh r1, [r0, #0x10]
	ldr r1, [r5, #0x3c]
	asrs r1, r1, #8
	adds r1, #8
	strh r1, [r0, #0x12]
	bl DisplaySprite
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
_0808CF3E:
	ldrb r0, [r5, #4]
	cmp r4, r0
	blo _0808CF08
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808CF4C
sub_808CF4C: @ 0x0808CF4C
	push {lr}
	adds r2, r0, #0
	movs r1, #0xd3
	lsls r1, r1, #2
	adds r0, r2, r1
	adds r1, r2, #0
	adds r1, #0xa0
	ldr r1, [r1]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	adds r1, r2, #0
	adds r1, #0xa4
	ldr r1, [r1]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	bl DisplaySprite
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808CF74
sub_808CF74: @ 0x0808CF74
	push {r4, r5, lr}
	ldr r5, _0808CFC0 @ =gCurTask
	ldr r0, [r5]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	adds r0, r4, #0
	bl sub_808CED0
	adds r0, r4, #0
	bl sub_808CB74
	adds r0, r4, #0
	bl sub_808CF4C
	adds r0, r4, #0
	bl sub_808CC48
	adds r0, r4, #0
	bl sub_808CF00
	adds r0, r4, #0
	bl sub_808CCA0
	adds r0, r4, #0
	bl sub_808CD14
	adds r0, r4, #0
	bl sub_808CD88
	ldr r0, [r5]
	bl TaskDestroy
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808CFC0: .4byte gCurTask

	thumb_func_start sub_808CFC4
sub_808CFC4: @ 0x0808CFC4
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #0
_0808CFCA:
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #3
	movs r1, #0xb6
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r1, r5, r0
	movs r2, #8
	ldrsh r0, [r5, r2]
	cmp r4, r0
	bne _0808CFE4
	movs r0, #0
	b _0808CFE8
_0808CFE4:
	movs r0, #0x80
	lsls r0, r0, #1
_0808CFE8:
	strh r0, [r1, #0x14]
	adds r0, r1, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #7
	bls _0808CFCA
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_808D000
sub_808D000: @ 0x0808D000
	ldr r1, _0808D008 @ =gWinRegs
	movs r0, #0
	strh r0, [r1, #8]
	bx lr
	.align 2, 0
_0808D008: .4byte gWinRegs

	thumb_func_start sub_808D00C
sub_808D00C: @ 0x0808D00C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r0, _0808D054 @ =gCurTask
	mov r8, r0
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	ldr r2, _0808D058 @ =gUnknown_03000FC0
	adds r4, r1, r2
	ldr r0, _0808D05C @ =gPressedKeys
	ldrh r1, [r0]
	movs r6, #9
	ands r6, r1
	cmp r6, #0
	beq _0808D060
	movs r1, #0
	strh r1, [r4]
	movs r0, #1
	strh r0, [r4, #2]
	strh r1, [r4, #4]
	movs r0, #0x80
	lsls r0, r0, #2
	strh r0, [r4, #6]
	movs r0, #0xff
	strh r0, [r4, #8]
	strh r1, [r4, #0xa]
	adds r0, r4, #0
	bl ScreenFadeUpdateValues
	mov r3, r8
	ldr r1, [r3]
	b _0808D090
	.align 2, 0
_0808D054: .4byte gCurTask
_0808D058: .4byte gUnknown_03000FC0
_0808D05C: .4byte gPressedKeys
_0808D060:
	movs r7, #2
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _0808D09C
	movs r0, #0x6b
	bl m4aSongNumStart
	strh r7, [r5, #0x10]
	strh r6, [r4]
	movs r0, #1
	strh r0, [r4, #2]
	strh r6, [r4, #4]
	movs r0, #0x80
	lsls r0, r0, #2
	strh r0, [r4, #6]
	movs r0, #0xff
	strh r0, [r4, #8]
	strh r6, [r4, #0xa]
	adds r0, r4, #0
	bl ScreenFadeUpdateValues
	mov r0, r8
	ldr r1, [r0]
_0808D090:
	ldr r0, _0808D098 @ =sub_808ECF4
	str r0, [r1, #8]
	b _0808D0E6
	.align 2, 0
_0808D098: .4byte sub_808ECF4
_0808D09C:
	ldr r0, _0808D0C4 @ =gRepeatedKeys
	ldrh r1, [r0]
	movs r0, #0xc0
	ands r0, r1
	cmp r0, #0
	beq _0808D0E6
	movs r0, #0x40
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0
	beq _0808D0CC
	ldrh r1, [r5, #0x10]
	movs r2, #0x10
	ldrsh r0, [r5, r2]
	cmp r0, #0
	bne _0808D0C8
	strh r7, [r5, #0x10]
	b _0808D0E6
	.align 2, 0
_0808D0C4: .4byte gRepeatedKeys
_0808D0C8:
	subs r0, r1, #1
	b _0808D0E4
_0808D0CC:
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _0808D0E6
	ldrh r1, [r5, #0x10]
	movs r3, #0x10
	ldrsh r0, [r5, r3]
	cmp r0, #2
	bne _0808D0E2
	strh r2, [r5, #0x10]
	b _0808D0E6
_0808D0E2:
	adds r0, r1, #1
_0808D0E4:
	strh r0, [r5, #0x10]
_0808D0E6:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_808D0F0
sub_808D0F0: @ 0x0808D0F0
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	ldr r1, _0808D180 @ =gDispCnt
	movs r2, #0x9a
	lsls r2, r2, #5
	adds r0, r2, #0
	strh r0, [r1]
	ldr r0, _0808D184 @ =sub_808D214
	movs r2, #0x80
	lsls r2, r2, #5
	movs r4, #0
	str r4, [sp]
	movs r1, #0xec
	movs r3, #0
	bl TaskCreate
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r5, r0
	strh r4, [r6]
	movs r0, #2
	strh r0, [r6, #2]
	strh r4, [r6, #4]
	movs r0, #0x80
	lsls r0, r0, #2
	strh r0, [r6, #6]
	movs r0, #0xff
	strh r0, [r6, #8]
	strh r4, [r6, #0xa]
	adds r0, r6, #0
	bl ScreenFadeUpdateValues
	movs r1, #0
	ldr r0, _0808D188 @ =0x0300000E
	adds r5, r5, r0
	movs r3, #0xff
_0808D13E:
	lsls r0, r1, #0x10
	asrs r0, r0, #0x10
	adds r2, r5, r0
	ldrb r1, [r2]
	orrs r1, r3
	strb r1, [r2]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #3
	ble _0808D13E
	movs r1, #0
	strb r1, [r6, #0x13]
	strb r1, [r6, #0x14]
	strb r1, [r6, #0x17]
	strb r1, [r6, #0x12]
	movs r0, #1
	strb r0, [r6, #0x16]
	strh r1, [r6, #0xc]
	ldr r0, _0808D18C @ =gSaveGame
	ldr r1, _0808D190 @ =0x00000366
	adds r0, r0, r1
	ldrb r0, [r0]
	strb r0, [r6, #0x18]
	strb r7, [r6, #0x19]
	cmp r7, #0xff
	beq _0808D194
	bl sub_80C6168
	bl sub_80258D4
	b _0808D198
	.align 2, 0
_0808D180: .4byte gDispCnt
_0808D184: .4byte sub_808D214
_0808D188: .4byte 0x0300000E
_0808D18C: .4byte gSaveGame
_0808D190: .4byte 0x00000366
_0808D194:
	bl sub_80256E0
_0808D198:
	movs r2, #0
	str r2, [sp, #4]
	ldr r3, _0808D200 @ =0x040000D4
	add r0, sp, #4
	str r0, [r3]
	ldr r0, _0808D204 @ =gBgCntRegs
	ldrh r1, [r0, #4]
	movs r0, #0xc
	ands r0, r1
	lsls r0, r0, #0xc
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r0, r0, r1
	str r0, [r3, #4]
	ldr r0, _0808D208 @ =0x85000010
	str r0, [r3, #8]
	ldr r0, [r3, #8]
	ldr r4, _0808D20C @ =gUnknown_03006230
	strb r2, [r4, #2]
	ldr r0, _0808D210 @ =gUnknown_03003590
	strb r2, [r0, #8]
	strb r2, [r0, #9]
	movs r1, #0xff
	strb r1, [r0, #0xa]
	movs r3, #0x40
	strb r3, [r0, #0xb]
	strb r2, [r4, #1]
	strb r2, [r0, #4]
	strb r2, [r0, #5]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #6]
	strb r3, [r0, #7]
	strb r2, [r4]
	strb r2, [r0]
	strb r2, [r0, #1]
	strb r1, [r0, #2]
	strb r3, [r0, #3]
	adds r0, r6, #0
	movs r1, #3
	bl sub_808D548
	bl m4aMPlayAllStop
	movs r0, #0x44
	bl m4aSongNumStart
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808D200: .4byte 0x040000D4
_0808D204: .4byte gBgCntRegs
_0808D208: .4byte 0x85000010
_0808D20C: .4byte gUnknown_03006230
_0808D210: .4byte gUnknown_03003590

	thumb_func_start sub_808D214
sub_808D214: @ 0x0808D214
	push {r4, r5, r6, lr}
	ldr r6, _0808D268 @ =gCurTask
	ldr r0, [r6]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r5, r4, #0
	adds r0, r4, #0
	movs r1, #0
	bl sub_808D5CC
	movs r0, #0xc
	ldrsh r1, [r4, r0]
	cmp r1, #0
	bne _0808D24C
	strh r1, [r4]
	movs r0, #2
	strh r0, [r4, #2]
	strh r1, [r4, #4]
	movs r0, #0x80
	lsls r0, r0, #2
	strh r0, [r4, #6]
	movs r0, #0xff
	strh r0, [r4, #8]
	strh r1, [r4, #0xa]
	movs r0, #1
	strh r0, [r4, #0xc]
_0808D24C:
	adds r0, r5, #0
	bl UpdateScreenFade
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bne _0808D260
	ldr r1, [r6]
	ldr r0, _0808D26C @ =sub_808D270
	str r0, [r1, #8]
_0808D260:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808D268: .4byte gCurTask
_0808D26C: .4byte sub_808D270

	thumb_func_start sub_808D270
sub_808D270: @ 0x0808D270
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r0, _0808D298 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r1, r0
	adds r5, r6, #0
	ldr r0, _0808D29C @ =gStageData
	ldrb r0, [r0, #6]
	mov r8, r0
	movs r4, #0
	cmp r0, #0
	bne _0808D2A0
	bl sub_802440C
	b _0808D2A4
	.align 2, 0
_0808D298: .4byte gCurTask
_0808D29C: .4byte gStageData
_0808D2A0:
	bl sub_8024584
_0808D2A4:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	adds r7, r0, #0
	cmp r2, #0
	bge _0808D2B8
	bl sub_802613C
	b _0808D444
_0808D2B8:
	movs r1, #0
	movs r3, #1
_0808D2BC:
	lsls r0, r1, #0x10
	asrs r1, r0, #0x10
	adds r0, r2, #0
	asrs r0, r1
	ands r0, r3
	cmp r0, #0
	beq _0808D2D0
	adds r0, r4, #1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
_0808D2D0:
	adds r0, r1, #1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #3
	ble _0808D2BC
	subs r1, r4, #1
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r6, #0
	bl sub_808D648
	adds r0, r5, #0
	bl UpdateScreenFade
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0808D2F6
	b _0808D444
_0808D2F6:
	mov r0, r8
	cmp r0, #0
	bne _0808D3AC
	asrs r0, r7, #0x10
	cmp r0, #3
	bne _0808D306
	cmp r4, #2
	beq _0808D316
_0808D306:
	cmp r0, #7
	bne _0808D30E
	cmp r4, #3
	beq _0808D316
_0808D30E:
	cmp r0, #0xf
	bne _0808D400
	cmp r4, #4
	bne _0808D400
_0808D316:
	movs r4, #0
	movs r1, #0
	asrs r3, r7, #0x10
	movs r7, #1
_0808D31E:
	lsls r1, r1, #0x10
	asrs r2, r1, #0x10
	adds r0, r3, #0
	asrs r0, r2
	ands r0, r7
	cmp r0, #0
	bne _0808D33A
	lsls r0, r2, #1
	ldr r2, _0808D39C @ =0x04000120
	adds r0, r0, r2
	ldrh r0, [r0]
	cmp r0, #0
	bne _0808D33A
	movs r4, #1
_0808D33A:
	movs r2, #0x80
	lsls r2, r2, #9
	adds r0, r1, r2
	lsrs r1, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #3
	ble _0808D31E
	cmp r4, #0
	bne _0808D400
	adds r0, r6, #0
	bl sub_808D6BC
	ldr r0, _0808D3A0 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _0808D400
	bl sub_80244E4
	movs r0, #0x63
	bl m4aSongNumStart
	strh r4, [r5]
	movs r0, #1
	strh r0, [r5, #2]
	strh r4, [r5, #4]
	movs r0, #0x80
	lsls r0, r0, #2
	strh r0, [r5, #6]
	movs r0, #0xff
	strh r0, [r5, #8]
	strh r4, [r5, #0xa]
	adds r0, r5, #0
	bl ScreenFadeUpdateValues
	adds r0, r6, #0
	movs r1, #4
	bl sub_808D548
	adds r0, r6, #0
	movs r1, #2
	bl sub_808D5CC
	strh r4, [r6, #0xc]
	ldr r0, _0808D3A4 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808D3A8 @ =sub_808D45C
	b _0808D442
	.align 2, 0
_0808D39C: .4byte 0x04000120
_0808D3A0: .4byte gPressedKeys
_0808D3A4: .4byte gCurTask
_0808D3A8: .4byte sub_808D45C
_0808D3AC:
	asrs r0, r7, #0x10
	movs r1, #0x10
	ands r0, r1
	cmp r0, #0
	beq _0808D400
	bl sub_80246B4
	movs r4, #0
	strh r4, [r5]
	movs r0, #1
	strh r0, [r5, #2]
	strh r4, [r5, #4]
	movs r0, #0x80
	lsls r0, r0, #2
	strh r0, [r5, #6]
	movs r0, #0xff
	strh r0, [r5, #8]
	strh r4, [r5, #0xa]
	adds r0, r5, #0
	bl ScreenFadeUpdateValues
	movs r0, #0x63
	bl m4aSongNumStart
	adds r0, r6, #0
	movs r1, #4
	bl sub_808D548
	adds r0, r6, #0
	movs r1, #2
	bl sub_808D5CC
	strh r4, [r6, #0xc]
	ldr r0, _0808D3F8 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808D3FC @ =sub_808D45C
	b _0808D442
	.align 2, 0
_0808D3F8: .4byte gCurTask
_0808D3FC: .4byte sub_808D45C
_0808D400:
	ldr r0, _0808D450 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0808D444
	ldrb r0, [r6, #0x19]
	cmp r0, #0xff
	beq _0808D444
	movs r0, #0x6b
	bl m4aSongNumStart
	bl sub_80260F0
	movs r1, #0
	strh r1, [r5]
	movs r0, #1
	strh r0, [r5, #2]
	strh r1, [r5, #4]
	movs r0, #0x80
	lsls r0, r0, #2
	strh r0, [r5, #6]
	movs r0, #0xff
	strh r0, [r5, #8]
	strh r1, [r5, #0xa]
	adds r0, r5, #0
	bl ScreenFadeUpdateValues
	movs r0, #0x26
	strb r0, [r6, #0x17]
	ldr r0, _0808D454 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808D458 @ =sub_808ED60
_0808D442:
	str r0, [r1, #8]
_0808D444:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808D450: .4byte gPressedKeys
_0808D454: .4byte gCurTask
_0808D458: .4byte sub_808ED60

	thumb_func_start sub_808D45C
sub_808D45C: @ 0x0808D45C
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	ldr r0, _0808D47C @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r1, r0
	adds r4, r6, #0
	ldr r0, _0808D480 @ =gStageData
	ldrb r7, [r0, #6]
	cmp r7, #0
	bne _0808D484
	bl sub_80244E4
	b _0808D488
	.align 2, 0
_0808D47C: .4byte gCurTask
_0808D480: .4byte gStageData
_0808D484:
	bl sub_80246B4
_0808D488:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r0, r0, #0x10
	asrs r5, r0, #0x10
	cmp r5, #0
	bge _0808D49A
	bl sub_802613C
	b _0808D524
_0808D49A:
	ldrh r1, [r4, #0xc]
	movs r2, #0xc
	ldrsh r0, [r4, r2]
	cmp r0, #0x77
	bgt _0808D4AA
	adds r0, r1, #1
	strh r0, [r4, #0xc]
	b _0808D524
_0808D4AA:
	adds r0, r6, #0
	bl UpdateScreenFade
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808D524
	movs r0, #0x10
	ands r0, r5
	cmp r0, #0
	beq _0808D524
	cmp r7, #0
	bne _0808D4C8
	bl sub_80258FC
	b _0808D4CC
_0808D4C8:
	bl sub_80259EC
_0808D4CC:
	movs r5, #0
	movs r4, #0
	strh r4, [r6]
	movs r0, #2
	strh r0, [r6, #2]
	strh r4, [r6, #4]
	movs r0, #0x80
	lsls r0, r0, #2
	strh r0, [r6, #6]
	movs r0, #0xff
	strh r0, [r6, #8]
	strh r4, [r6, #0xa]
	adds r0, r6, #0
	bl ScreenFadeUpdateValues
	str r4, [sp]
	ldr r2, _0808D52C @ =0x040000D4
	mov r0, sp
	str r0, [r2]
	ldr r0, _0808D530 @ =gBgCntRegs
	ldrh r1, [r0, #4]
	movs r0, #0xc
	ands r0, r1
	lsls r0, r0, #0xc
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r0, r0, r1
	str r0, [r2, #4]
	ldr r0, _0808D534 @ =0x85000010
	str r0, [r2, #8]
	ldr r0, [r2, #8]
	ldr r0, _0808D538 @ =gUnknown_03006230
	strb r5, [r0, #2]
	ldr r1, _0808D53C @ =gUnknown_03003590
	strb r5, [r1, #8]
	strb r5, [r1, #9]
	movs r0, #0xff
	strb r0, [r1, #0xa]
	movs r0, #0x40
	strb r0, [r1, #0xb]
	ldr r0, _0808D540 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808D544 @ =sub_808D718
	str r0, [r1, #8]
_0808D524:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808D52C: .4byte 0x040000D4
_0808D530: .4byte gBgCntRegs
_0808D534: .4byte 0x85000010
_0808D538: .4byte gUnknown_03006230
_0808D53C: .4byte gUnknown_03003590
_0808D540: .4byte gCurTask
_0808D544: .4byte sub_808D718

	thumb_func_start sub_808D548
sub_808D548: @ 0x0808D548
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	ldr r2, _0808D5B4 @ =gBgCntRegs
	movs r6, #0
	movs r3, #0
	ldr r0, _0808D5B8 @ =0x00000602
	strh r0, [r2, #2]
	ldr r4, _0808D5BC @ =gDispCnt
	ldrh r0, [r4]
	movs r7, #0x80
	lsls r7, r7, #2
	adds r2, r7, #0
	orrs r0, r2
	strh r0, [r4]
	ldr r0, _0808D5C0 @ =gBgScrollRegs
	strh r3, [r0, #4]
	strh r3, [r0, #6]
	adds r0, r5, #0
	adds r0, #0x5c
	movs r2, #0xc0
	lsls r2, r2, #0x13
	str r2, [r0, #4]
	strh r3, [r0, #0xa]
	ldr r2, _0808D5C4 @ =0x06003000
	str r2, [r0, #0xc]
	strh r3, [r0, #0x18]
	strh r3, [r0, #0x1a]
	ldr r4, _0808D5C8 @ =gUnknown_080D9908
	ldrb r2, [r5, #0x18]
	lsls r2, r2, #2
	adds r1, r1, r2
	lsls r1, r1, #1
	adds r1, r1, r4
	ldrh r1, [r1]
	strh r1, [r0, #0x1c]
	strh r3, [r0, #0x1e]
	strh r3, [r0, #0x20]
	strh r3, [r0, #0x22]
	strh r3, [r0, #0x24]
	movs r1, #0x20
	strh r1, [r0, #0x26]
	strh r1, [r0, #0x28]
	adds r5, #0x86
	strb r6, [r5]
	movs r1, #1
	strh r1, [r0, #0x2e]
	bl DrawBackground
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808D5B4: .4byte gBgCntRegs
_0808D5B8: .4byte 0x00000602
_0808D5BC: .4byte gDispCnt
_0808D5C0: .4byte gBgScrollRegs
_0808D5C4: .4byte 0x06003000
_0808D5C8: .4byte gUnknown_080D9908

	thumb_func_start sub_808D5CC
sub_808D5CC: @ 0x0808D5CC
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	lsls r1, r1, #0x18
	ldr r2, _0808D62C @ =gBgCntRegs
	movs r6, #0
	movs r3, #0
	ldr r0, _0808D630 @ =0x00000E07
	strh r0, [r2]
	ldr r4, _0808D634 @ =gDispCnt
	ldrh r0, [r4]
	movs r7, #0x80
	lsls r7, r7, #1
	adds r2, r7, #0
	orrs r0, r2
	strh r0, [r4]
	ldr r0, _0808D638 @ =gBgScrollRegs
	strh r3, [r0]
	strh r3, [r0, #2]
	adds r0, r5, #0
	adds r0, #0x1c
	ldr r2, _0808D63C @ =0x06004000
	str r2, [r0, #4]
	strh r3, [r0, #0xa]
	ldr r2, _0808D640 @ =0x06007000
	str r2, [r0, #0xc]
	strh r3, [r0, #0x18]
	strh r3, [r0, #0x1a]
	ldr r2, _0808D644 @ =gUnknown_080D9908
	lsrs r1, r1, #0x17
	adds r1, r1, r2
	ldrh r1, [r1]
	strh r1, [r0, #0x1c]
	strh r3, [r0, #0x1e]
	strh r3, [r0, #0x20]
	strh r3, [r0, #0x22]
	strh r3, [r0, #0x24]
	movs r1, #0x20
	strh r1, [r0, #0x26]
	strh r1, [r0, #0x28]
	adds r5, #0x46
	strb r6, [r5]
	strh r3, [r0, #0x2e]
	bl DrawBackground
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808D62C: .4byte gBgCntRegs
_0808D630: .4byte 0x00000E07
_0808D634: .4byte gDispCnt
_0808D638: .4byte gBgScrollRegs
_0808D63C: .4byte 0x06004000
_0808D640: .4byte 0x06007000
_0808D644: .4byte gUnknown_080D9908

	thumb_func_start sub_808D648
sub_808D648: @ 0x0808D648
	push {r4, lr}
	lsls r1, r1, #0x18
	asrs r2, r1, #0x18
	cmp r2, #0
	ble _0808D6A8
	adds r4, r0, #0
	adds r4, #0xc4
	ldr r1, _0808D6B0 @ =gUnknown_080D6898
	ldrb r0, [r0, #0x18]
	lsls r0, r0, #3
	adds r1, #4
	adds r0, r0, r1
	ldr r0, [r0]
	lsls r0, r0, #5
	ldr r1, _0808D6B4 @ =0x06010000
	adds r0, r0, r1
	str r0, [r4]
	ldr r1, _0808D6B8 @ =gUnknown_080D6EE8
	subs r0, r2, #1
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r1, [r0]
	movs r3, #0
	movs r2, #0
	strh r1, [r4, #0xc]
	ldrb r0, [r0, #2]
	strb r0, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	movs r0, #0x71
	strh r0, [r4, #0x10]
	movs r0, #0x67
	strh r0, [r4, #0x12]
	strh r2, [r4, #0x14]
	strh r2, [r4, #0xe]
	strh r2, [r4, #0x16]
	movs r0, #0x10
	strb r0, [r4, #0x1c]
	strb r3, [r4, #0x1f]
	str r2, [r4, #8]
	subs r0, #0x11
	str r0, [r4, #0x20]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
_0808D6A8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808D6B0: .4byte gUnknown_080D6898
_0808D6B4: .4byte 0x06010000
_0808D6B8: .4byte gUnknown_080D6EE8

	thumb_func_start sub_808D6BC
sub_808D6BC: @ 0x0808D6BC
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r4, #0x9c
	ldr r1, _0808D710 @ =0x06010000
	str r1, [r4]
	ldr r3, _0808D714 @ =gUnknown_080D6898
	ldrb r1, [r0, #0x18]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrh r1, [r1]
	movs r5, #0
	movs r2, #0
	strh r1, [r4, #0xc]
	ldrb r0, [r0, #0x18]
	lsls r0, r0, #3
	adds r0, r0, r3
	ldrb r0, [r0, #2]
	strb r0, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	movs r0, #0x78
	strh r0, [r4, #0x10]
	movs r0, #0x8c
	strh r0, [r4, #0x12]
	strh r2, [r4, #0x14]
	strh r2, [r4, #0xe]
	strh r2, [r4, #0x16]
	movs r0, #0x10
	strb r0, [r4, #0x1c]
	strb r5, [r4, #0x1f]
	str r2, [r4, #8]
	subs r0, #0x11
	str r0, [r4, #0x20]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808D710: .4byte 0x06010000
_0808D714: .4byte gUnknown_080D6898

	thumb_func_start sub_808D718
sub_808D718: @ 0x0808D718
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	ldr r0, _0808D7C4 @ =gCurTask
	ldr r0, [r0]
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	ldr r4, _0808D7C8 @ =gMultiSioSend
	ldr r1, _0808D7CC @ =gStageData
	ldrb r5, [r1, #6]
	bl sub_809F850
	movs r1, #0
	movs r0, #0
	strh r0, [r4]
	strb r1, [r4, #2]
	strb r1, [r4, #3]
	strb r1, [r4, #4]
	strb r1, [r4, #5]
	strh r0, [r4, #6]
	str r0, [r4, #8]
	strh r0, [r4, #0xc]
	strb r1, [r4, #0xe]
	movs r2, #0
	adds r4, #0xf
	movs r3, #0xff
_0808D752:
	adds r0, r4, r2
	ldrb r1, [r0]
	orrs r1, r3
	strb r1, [r0]
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #3
	bls _0808D752
	movs r1, #0
	ldr r0, _0808D7C4 @ =gCurTask
	mov sb, r0
	ldr r0, _0808D7D0 @ =gMultiSioRecv
	mov r8, r0
	lsls r5, r5, #0x10
	mov ip, r5
	movs r5, #0
	movs r6, #0
	movs r7, #0xff
_0808D778:
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	add r0, r8
	strh r6, [r0]
	strb r5, [r0, #2]
	strb r5, [r0, #3]
	strb r5, [r0, #4]
	strb r5, [r0, #5]
	strh r6, [r0, #6]
	str r6, [r0, #8]
	strh r6, [r0, #0xc]
	strb r5, [r0, #0xe]
	movs r2, #0
	adds r4, r1, #1
	adds r3, r0, #0
	adds r3, #0xf
_0808D79A:
	adds r0, r3, r2
	ldrb r1, [r0]
	orrs r1, r7
	strb r1, [r0]
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #3
	bls _0808D79A
	lsls r0, r4, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #3
	bls _0808D778
	mov r1, ip
	asrs r0, r1, #0x10
	cmp r0, #1
	bgt _0808D7D8
	mov r0, sb
	ldr r1, [r0]
	ldr r0, _0808D7D4 @ =sub_808D7F0
	b _0808D7DE
	.align 2, 0
_0808D7C4: .4byte gCurTask
_0808D7C8: .4byte gMultiSioSend
_0808D7CC: .4byte gStageData
_0808D7D0: .4byte gMultiSioRecv
_0808D7D4: .4byte sub_808D7F0
_0808D7D8:
	mov r0, sb
	ldr r1, [r0]
	ldr r0, _0808D7EC @ =sub_808DA44
_0808D7DE:
	str r0, [r1, #8]
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808D7EC: .4byte sub_808DA44

	thumb_func_start sub_808D7F0
sub_808D7F0: @ 0x0808D7F0
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	ldr r0, _0808D820 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	mov r8, r4
	ldr r0, _0808D824 @ =gStageData
	ldrb r0, [r0, #6]
	mov sb, r0
	cmp r0, #0
	bne _0808D82C
	ldr r1, _0808D828 @ =gUnknown_080D8F18
	movs r0, #0x13
	ldrsb r0, [r4, r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl sub_8025908
	b _0808D83A
	.align 2, 0
_0808D820: .4byte gCurTask
_0808D824: .4byte gStageData
_0808D828: .4byte gUnknown_080D8F18
_0808D82C:
	ldr r1, _0808D84C @ =gUnknown_080D8F18
	movs r0, #0x13
	ldrsb r0, [r4, r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl sub_8024A4C
_0808D83A:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0808D850
	bl sub_802613C
	b _0808D97C
	.align 2, 0
_0808D84C: .4byte gUnknown_080D8F18
_0808D850:
	movs r2, #0
	ldr r7, _0808D8F4 @ =gUnknown_03001060
	ldr r0, _0808D8F8 @ =gMultiSioRecv
	mov ip, r0
	adds r6, r7, #0
	adds r6, #0x4c
	adds r5, r4, #0
	adds r5, #0xe
_0808D860:
	lsls r1, r2, #0x10
	asrs r1, r1, #0x10
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	add r0, ip
	adds r3, r5, r1
	ldrb r2, [r0, #4]
	strb r2, [r3]
	adds r2, r1, r6
	adds r0, #0xf
	adds r0, r0, r1
	ldrb r0, [r0]
	strb r0, [r2]
	adds r1, #1
	lsls r1, r1, #0x10
	lsrs r2, r1, #0x10
	asrs r1, r1, #0x10
	cmp r1, #3
	ble _0808D860
	mov r0, r8
	bl UpdateScreenFade
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808D97C
	ldrb r0, [r4, #0x16]
	cmp r0, #0
	beq _0808D97C
	ldr r0, _0808D8FC @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0808D930
	movs r2, #0
	ldr r6, _0808D900 @ =gUnknown_080D8F18
	movs r3, #0x13
	ldrsb r3, [r4, r3]
	ldr r7, _0808D8F4 @ =gUnknown_03001060
	movs r0, #0x4c
	adds r0, r0, r7
	mov ip, r0
	adds r0, r3, r6
	ldrb r5, [r0]
_0808D8BA:
	lsls r0, r2, #0x10
	asrs r1, r0, #0x10
	mov r2, ip
	adds r0, r1, r2
	ldrb r0, [r0]
	cmp r0, r5
	beq _0808D97C
	adds r0, r1, #1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #3
	ble _0808D8BA
	mov r2, sb
	cmp r2, #0
	bne _0808D90C
	adds r1, r7, #0
	adds r1, #0x4c
	adds r0, r3, r6
	ldrb r0, [r0]
	strb r0, [r1]
	movs r0, #0xc
	strb r0, [r4, #0x17]
	ldr r0, _0808D904 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808D908 @ =sub_808DA44
	str r0, [r1, #8]
	b _0808D97C
	.align 2, 0
_0808D8F4: .4byte gUnknown_03001060
_0808D8F8: .4byte gMultiSioRecv
_0808D8FC: .4byte gPressedKeys
_0808D900: .4byte gUnknown_080D8F18
_0808D904: .4byte gCurTask
_0808D908: .4byte sub_808DA44
_0808D90C:
	adds r0, r7, #0
	adds r0, #0x4c
	adds r0, r2, r0
	adds r1, r3, r6
	ldrb r1, [r1]
	strb r1, [r0]
	movs r0, #0xc
	strb r0, [r4, #0x17]
	ldr r0, _0808D928 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808D92C @ =sub_808D988
	str r0, [r1, #8]
	b _0808D97C
	.align 2, 0
_0808D928: .4byte gCurTask
_0808D92C: .4byte sub_808D988
_0808D930:
	movs r0, #0x20
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq _0808D958
	movs r0, #0x67
	bl m4aSongNumStart
	ldrb r1, [r4, #0x13]
	movs r0, #0x13
	ldrsb r0, [r4, r0]
	cmp r0, #0
	ble _0808D952
	subs r0, r1, #1
	strb r0, [r4, #0x13]
	b _0808D978
_0808D952:
	movs r0, #4
	strb r0, [r4, #0x13]
	b _0808D978
_0808D958:
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _0808D978
	movs r0, #0x67
	bl m4aSongNumStart
	ldrb r1, [r4, #0x13]
	movs r0, #0x13
	ldrsb r0, [r4, r0]
	cmp r0, #3
	bgt _0808D976
	adds r0, r1, #1
	strb r0, [r4, #0x13]
	b _0808D978
_0808D976:
	strb r5, [r4, #0x13]
_0808D978:
	ldrb r0, [r4, #0x13]
	strb r0, [r4, #0x12]
_0808D97C:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_808D988
sub_808D988: @ 0x0808D988
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r7, _0808D9C0 @ =gCurTask
	ldr r0, [r7]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, _0808D9C4 @ =gStageData
	ldrb r5, [r0, #6]
	adds r6, r5, #0
	ldr r0, _0808D9C8 @ =gUnknown_080D8F18
	mov r8, r0
	movs r0, #0x13
	ldrsb r0, [r4, r0]
	add r0, r8
	ldrb r0, [r0]
	bl sub_8024AC0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bge _0808D9CC
	bl sub_802613C
	b _0808DA2C
	.align 2, 0
_0808D9C0: .4byte gCurTask
_0808D9C4: .4byte gStageData
_0808D9C8: .4byte gUnknown_080D8F18
_0808D9CC:
	cmp r0, #1
	bne _0808D9F0
	ldr r1, _0808D9E8 @ =gUnknown_03001060
	adds r1, #0x4c
	adds r1, r5, r1
	movs r0, #0x13
	ldrsb r0, [r4, r0]
	add r0, r8
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, [r7]
	ldr r0, _0808D9EC @ =sub_808DA44
	b _0808DA04
	.align 2, 0
_0808D9E8: .4byte gUnknown_03001060
_0808D9EC: .4byte sub_808DA44
_0808D9F0:
	cmp r0, #2
	bne _0808DA06
	strb r0, [r4, #0x17]
	ldr r0, _0808DA38 @ =gUnknown_03001060
	adds r0, #0x4c
	adds r0, r6, r0
	movs r1, #0xff
	strb r1, [r0]
	ldr r1, [r7]
	ldr r0, _0808DA3C @ =sub_808D7F0
_0808DA04:
	str r0, [r1, #8]
_0808DA06:
	movs r0, #0
	ldr r5, _0808DA40 @ =gMultiSioRecv
	adds r3, r4, #0
	adds r3, #0xe
_0808DA0E:
	lsls r1, r0, #0x10
	asrs r1, r1, #0x10
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r5
	adds r2, r3, r1
	ldrb r0, [r0, #4]
	strb r0, [r2]
	adds r1, #1
	lsls r1, r1, #0x10
	lsrs r0, r1, #0x10
	asrs r1, r1, #0x10
	cmp r1, #3
	ble _0808DA0E
_0808DA2C:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808DA38: .4byte gUnknown_03001060
_0808DA3C: .4byte sub_808D7F0
_0808DA40: .4byte gMultiSioRecv

	thumb_func_start sub_808DA44
sub_808DA44: @ 0x0808DA44
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	ldr r0, _0808DA74 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r7, r1, r0
	adds r4, r7, #0
	ldr r0, _0808DA78 @ =gStageData
	ldrb r6, [r0, #6]
	cmp r6, #0
	bne _0808DA80
	ldr r1, _0808DA7C @ =gUnknown_080D8F18
	movs r0, #0x13
	ldrsb r0, [r7, r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl sub_8024984
	b _0808DA8E
	.align 2, 0
_0808DA74: .4byte gCurTask
_0808DA78: .4byte gStageData
_0808DA7C: .4byte gUnknown_080D8F18
_0808DA80:
	ldr r1, _0808DAD4 @ =gUnknown_080D8F18
	movs r0, #0x13
	ldrsb r0, [r7, r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl sub_8024C68
_0808DA8E:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	movs r2, #0
	ldr r1, _0808DAD8 @ =gMultiSioRecv
	mov r8, r1
	movs r1, #0xe
	adds r1, r1, r4
	mov sl, r1
	lsls r0, r0, #0x10
	mov ip, r0
	mov sb, r8
	mov r5, sl
_0808DAA6:
	lsls r1, r2, #0x10
	asrs r1, r1, #0x10
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	mov r2, sb
	adds r3, r0, r2
	adds r2, r5, r1
	ldrb r0, [r3, #4]
	strb r0, [r2]
	adds r1, #1
	lsls r1, r1, #0x10
	lsrs r2, r1, #0x10
	asrs r1, r1, #0x10
	cmp r1, #3
	ble _0808DAA6
	mov r0, ip
	asrs r2, r0, #0x10
	cmp r2, #0
	bge _0808DADC
	bl sub_802613C
	b _0808DC20
	.align 2, 0
_0808DAD4: .4byte gUnknown_080D8F18
_0808DAD8: .4byte gMultiSioRecv
_0808DADC:
	cmp r2, #2
	beq _0808DAE2
	b _0808DBEC
_0808DAE2:
	movs r0, #0x3c
	strh r0, [r4, #0xc]
	lsls r0, r6, #0x10
	asrs r1, r0, #0x10
	adds r5, r0, #0
	cmp r1, #0
	bne _0808DB28
	ldr r0, _0808DB14 @ =gUnknown_03001060
	adds r0, #0x4c
	ldrb r0, [r0]
	ldr r2, _0808DB18 @ =gUnknown_080D9022
	ldr r1, _0808DB1C @ =gUnknown_080D6EE0
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	bl m4aSongNumStart
	ldr r0, _0808DB20 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808DB24 @ =sub_808DCFC
	str r0, [r1, #8]
	b _0808DC20
	.align 2, 0
_0808DB14: .4byte gUnknown_03001060
_0808DB18: .4byte gUnknown_080D9022
_0808DB1C: .4byte gUnknown_080D6EE0
_0808DB20: .4byte gCurTask
_0808DB24: .4byte sub_808DCFC
_0808DB28:
	cmp r1, #1
	bne _0808DB88
	ldr r0, _0808DB50 @ =gUnknown_03001060
	adds r5, r0, #0
	adds r5, #0x4c
	adds r3, r0, #0
	adds r3, #0x4d
	ldrb r0, [r3]
	mov r1, r8
	ldrb r1, [r1, #4]
	cmp r0, r1
	bne _0808DB5C
	strb r2, [r4, #0x17]
	movs r0, #0xff
	strb r0, [r3]
	ldr r0, _0808DB54 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808DB58 @ =sub_808D7F0
	str r0, [r1, #8]
	b _0808DC20
	.align 2, 0
_0808DB50: .4byte gUnknown_03001060
_0808DB54: .4byte gCurTask
_0808DB58: .4byte sub_808D7F0
_0808DB5C:
	ldr r1, _0808DB7C @ =gUnknown_080D8F18
	movs r0, #0x13
	ldrsb r0, [r4, r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	strb r0, [r3]
	ldrb r0, [r4, #0xe]
	strb r0, [r5]
	ldrb r0, [r3]
	ldr r2, _0808DB80 @ =gUnknown_080D9022
	ldr r1, _0808DB84 @ =gUnknown_080D6EE0
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #1
	adds r0, r0, r2
	b _0808DBC2
	.align 2, 0
_0808DB7C: .4byte gUnknown_080D8F18
_0808DB80: .4byte gUnknown_080D9022
_0808DB84: .4byte gUnknown_080D6EE0
_0808DB88:
	movs r2, #0
	ldr r7, _0808DBD8 @ =gUnknown_03001060
	ldr r6, _0808DBDC @ =gUnknown_080D9022
	mov sb, r6
	ldr r0, _0808DBE0 @ =gUnknown_080D6EE0
	mov r8, r0
	adds r6, r7, #0
	adds r6, #0x4c
	mov r3, sl
_0808DB9A:
	lsls r0, r2, #0x10
	asrs r0, r0, #0x10
	adds r2, r0, r6
	adds r1, r3, r0
	ldrb r1, [r1]
	strb r1, [r2]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #3
	ble _0808DB9A
	asrs r0, r5, #0x10
	adds r0, r7, r0
	adds r0, #0x4a
	ldrb r0, [r0]
	add r0, r8
	ldrb r0, [r0]
	lsls r0, r0, #1
	add r0, sb
_0808DBC2:
	ldrh r0, [r0]
	bl m4aSongNumStart
	movs r0, #0xc
	strb r0, [r4, #0x17]
	ldr r0, _0808DBE4 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808DBE8 @ =sub_808DD6C
	str r0, [r1, #8]
	b _0808DC20
	.align 2, 0
_0808DBD8: .4byte gUnknown_03001060
_0808DBDC: .4byte gUnknown_080D9022
_0808DBE0: .4byte gUnknown_080D6EE0
_0808DBE4: .4byte gCurTask
_0808DBE8: .4byte sub_808DD6C
_0808DBEC:
	lsls r0, r6, #0x10
	asrs r1, r0, #0x10
	adds r5, r0, #0
	cmp r1, #2
	bne _0808DC04
	ldr r0, _0808DC00 @ =gUnknown_080D6EE0
	mov r2, r8
	ldrb r1, [r2, #4]
	b _0808DC0E
	.align 2, 0
_0808DC00: .4byte gUnknown_080D6EE0
_0808DC04:
	cmp r1, #3
	bne _0808DC14
	ldr r3, _0808DC30 @ =gUnknown_03002BA8
	ldr r0, _0808DC34 @ =gUnknown_080D6EE0
	ldrb r1, [r3, #4]
_0808DC0E:
	adds r1, r1, r0
	ldrb r0, [r1]
	strb r0, [r4, #0x12]
_0808DC14:
	asrs r0, r5, #0x10
	cmp r0, #1
	ble _0808DC20
	adds r0, r7, #0
	bl UpdateScreenFade
_0808DC20:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808DC30: .4byte gUnknown_03002BA8
_0808DC34: .4byte gUnknown_080D6EE0

	thumb_func_start sub_808DC38
sub_808DC38: @ 0x0808DC38
	push {r4, r5, lr}
	ldr r0, _0808DC60 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, _0808DC64 @ =gStageData
	ldrb r5, [r0, #6]
	cmp r5, #0
	bne _0808DC6C
	ldr r1, _0808DC68 @ =gUnknown_080D8F18
	movs r0, #0x13
	ldrsb r0, [r4, r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl sub_8025948
	b _0808DC7A
	.align 2, 0
_0808DC60: .4byte gCurTask
_0808DC64: .4byte gStageData
_0808DC68: .4byte gUnknown_080D8F18
_0808DC6C:
	ldr r1, _0808DC8C @ =gUnknown_080D8F18
	movs r0, #0x13
	ldrsb r0, [r4, r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl sub_8024B84
_0808DC7A:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bge _0808DC90
	bl sub_802613C
	b _0808DCEA
	.align 2, 0
_0808DC8C: .4byte gUnknown_080D8F18
_0808DC90:
	cmp r0, #1
	bne _0808DCB8
	movs r0, #2
	strb r0, [r4, #0x17]
	ldr r0, _0808DCAC @ =gUnknown_03001060
	adds r0, #0x4c
	adds r0, r5, r0
	movs r1, #0xff
	strb r1, [r0]
	ldr r0, _0808DCB0 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808DCB4 @ =sub_808D7F0
	b _0808DCC2
	.align 2, 0
_0808DCAC: .4byte gUnknown_03001060
_0808DCB0: .4byte gCurTask
_0808DCB4: .4byte sub_808D7F0
_0808DCB8:
	cmp r0, #2
	bne _0808DCC4
	ldr r0, _0808DCF0 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808DCF4 @ =sub_808DA44
_0808DCC2:
	str r0, [r1, #8]
_0808DCC4:
	movs r0, #0
	ldr r5, _0808DCF8 @ =gMultiSioRecv
	adds r3, r4, #0
	adds r3, #0xe
_0808DCCC:
	lsls r1, r0, #0x10
	asrs r1, r1, #0x10
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r5
	adds r2, r3, r1
	ldrb r0, [r0, #4]
	strb r0, [r2]
	adds r1, #1
	lsls r1, r1, #0x10
	lsrs r0, r1, #0x10
	asrs r1, r1, #0x10
	cmp r1, #3
	ble _0808DCCC
_0808DCEA:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808DCF0: .4byte gCurTask
_0808DCF4: .4byte sub_808DA44
_0808DCF8: .4byte gMultiSioRecv

	thumb_func_start sub_808DCFC
sub_808DCFC: @ 0x0808DCFC
	push {r4, r5, r6, lr}
	ldr r0, _0808DD40 @ =gCurTask
	ldr r0, [r0]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r4, r0
	bl sub_8025998
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	movs r1, #0
	ldr r0, _0808DD44 @ =0x0300000E
	adds r4, r4, r0
	ldr r5, _0808DD48 @ =gUnknown_030010AC
_0808DD1A:
	lsls r0, r1, #0x10
	asrs r0, r0, #0x10
	adds r2, r4, r0
	adds r1, r0, r5
	ldrb r1, [r1]
	strb r1, [r2]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #3
	ble _0808DD1A
	lsls r0, r3, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bge _0808DD4C
	bl sub_802613C
	b _0808DD5C
	.align 2, 0
_0808DD40: .4byte gCurTask
_0808DD44: .4byte 0x0300000E
_0808DD48: .4byte gUnknown_030010AC
_0808DD4C:
	cmp r0, #1
	bne _0808DD5C
	movs r0, #0
	strh r0, [r6, #0xc]
	ldr r0, _0808DD64 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808DD68 @ =sub_808DD6C
	str r0, [r1, #8]
_0808DD5C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808DD64: .4byte gCurTask
_0808DD68: .4byte sub_808DD6C

	thumb_func_start sub_808DD6C
sub_808DD6C: @ 0x0808DD6C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	ldr r0, _0808DD9C @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r1, r0
	ldr r0, _0808DDA0 @ =gStageData
	ldrb r4, [r0, #6]
	cmp r4, #0
	bne _0808DDA8
	ldr r1, _0808DDA4 @ =gUnknown_080D8F18
	movs r0, #0x13
	ldrsb r0, [r6, r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl sub_80259F8
	b _0808DDB6
	.align 2, 0
_0808DD9C: .4byte gCurTask
_0808DDA0: .4byte gStageData
_0808DDA4: .4byte gUnknown_080D8F18
_0808DDA8:
	ldr r1, _0808DDC8 @ =gUnknown_080D8F18
	movs r0, #0x13
	ldrsb r0, [r6, r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl sub_8024F84
_0808DDB6:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0808DDCC
	bl sub_802613C
	b _0808DE90
	.align 2, 0
_0808DDC8: .4byte gUnknown_080D8F18
_0808DDCC:
	ldrh r0, [r6, #0xc]
	adds r0, #1
	strh r0, [r6, #0xc]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x3b
	ble _0808DE90
	adds r3, r4, #0
	cmp r3, #1
	bgt _0808DDF8
	ldr r0, _0808DDF0 @ =gPlayers
	lsls r1, r3, #2
	adds r1, r1, r3
	lsls r1, r1, #2
	adds r1, r1, r3
	lsls r1, r1, #4
	adds r1, r1, r0
	b _0808DE0A
	.align 2, 0
_0808DDF0: .4byte gPlayers
_0808DDF4:
	strb r7, [r6, #0x13]
	b _0808DE7C
_0808DDF8:
	ldr r2, _0808DEA0 @ =gPlayers
	movs r0, #1
	ands r0, r3
	lsls r1, r0, #2
	adds r1, r1, r0
	lsls r1, r1, #2
	adds r1, r1, r0
	lsls r1, r1, #4
	adds r1, r1, r2
_0808DE0A:
	ldr r2, _0808DEA4 @ =gUnknown_080D8F18
	movs r0, #0x13
	ldrsb r0, [r6, r0]
	adds r0, r0, r2
	ldrb r0, [r0]
	adds r1, #0x2a
	movs r2, #0xf
	ands r2, r0
	ldrb r3, [r1]
	movs r0, #0x10
	rsbs r0, r0, #0
	ands r0, r3
	orrs r0, r2
	strb r0, [r1]
	movs r7, #0
	ldr r0, _0808DEA8 @ =gUnknown_03001060
	mov sl, r0
	adds r0, #0x4c
	ldr r1, _0808DEA4 @ =gUnknown_080D8F18
	mov ip, r1
	ldrb r0, [r0]
	mov r8, r0
	mov sb, ip
_0808DE38:
	movs r3, #0
	lsls r0, r7, #0x10
	asrs r2, r0, #0x10
	mov r4, ip
	adds r1, r2, r4
	adds r4, r0, #0
	ldrb r1, [r1]
	cmp r8, r1
	beq _0808DE6A
	ldr r5, _0808DEAC @ =gUnknown_030010AC
	mov r0, sb
	adds r1, r2, r0
_0808DE50:
	lsls r0, r3, #0x10
	movs r2, #0x80
	lsls r2, r2, #9
	adds r0, r0, r2
	lsrs r3, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bgt _0808DE6A
	adds r0, r0, r5
	ldrb r0, [r0]
	ldrb r2, [r1]
	cmp r0, r2
	bne _0808DE50
_0808DE6A:
	cmp r3, #2
	beq _0808DDF4
	movs r1, #0x80
	lsls r1, r1, #9
	adds r0, r4, r1
	lsrs r7, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #4
	ble _0808DE38
_0808DE7C:
	ldrb r1, [r6, #0x13]
	mov r0, sl
	adds r0, #0x4e
	strb r1, [r0]
	ldrb r0, [r6, #0x13]
	strb r0, [r6, #0x12]
	ldr r2, _0808DEB0 @ =gCurTask
	ldr r0, [r2]
	ldr r4, _0808DEB4 @ =sub_808DEB8
	str r4, [r0, #8]
_0808DE90:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808DEA0: .4byte gPlayers
_0808DEA4: .4byte gUnknown_080D8F18
_0808DEA8: .4byte gUnknown_03001060
_0808DEAC: .4byte gUnknown_030010AC
_0808DEB0: .4byte gCurTask
_0808DEB4: .4byte sub_808DEB8

	thumb_func_start sub_808DEB8
sub_808DEB8: @ 0x0808DEB8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	ldr r0, _0808DEEC @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, _0808DEF0 @ =gStageData
	ldrb r6, [r0, #6]
	movs r5, #0
	cmp r6, #0
	bne _0808DEF8
	ldr r1, _0808DEF4 @ =gUnknown_080D8F18
	movs r0, #0x13
	ldrsb r0, [r4, r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl sub_80259F8
	b _0808DF06
	.align 2, 0
_0808DEEC: .4byte gCurTask
_0808DEF0: .4byte gStageData
_0808DEF4: .4byte gUnknown_080D8F18
_0808DEF8:
	ldr r1, _0808DF18 @ =gUnknown_080D8F18
	movs r0, #0x13
	ldrsb r0, [r4, r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl sub_8024F84
_0808DF06:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0808DF1C
_0808DF10:
	bl sub_802613C
	b _0808E050
	.align 2, 0
_0808DF18: .4byte gUnknown_080D8F18
_0808DF1C:
	lsls r0, r6, #0x10
	adds r7, r0, #0
	cmp r7, #0
	bne _0808DF34
	ldr r1, _0808DF30 @ =gUnknown_080D8F18
	movs r0, #0x13
	ldrsb r0, [r4, r0]
	adds r0, r0, r1
	ldrb r6, [r0]
	b _0808DF38
	.align 2, 0
_0808DF30: .4byte gUnknown_080D8F18
_0808DF34:
	ldr r0, _0808DF4C @ =gMultiSioRecv
	ldrb r6, [r0, #4]
_0808DF38:
	ldr r2, _0808DF50 @ =gUnknown_03001060
	ldrb r1, [r2, #7]
	adds r3, r2, #0
	cmp r1, #7
	beq _0808DF5E
	cmp r1, #7
	bgt _0808DF54
	cmp r1, #3
	beq _0808DF5A
	b _0808DF10
	.align 2, 0
_0808DF4C: .4byte gMultiSioRecv
_0808DF50: .4byte gUnknown_03001060
_0808DF54:
	cmp r1, #0xf
	beq _0808DF62
	b _0808DF10
_0808DF5A:
	movs r2, #0
	b _0808DF64
_0808DF5E:
	movs r2, #1
	b _0808DF64
_0808DF62:
	movs r2, #2
_0808DF64:
	movs r1, #0
	ldr r0, _0808DFF4 @ =gUnknown_080D6F00
	mov sl, r0
	lsls r2, r2, #2
	mov r8, r2
	asrs r2, r7, #0x10
	mov ip, r2
	lsls r0, r6, #0x18
	asrs r0, r0, #0x18
	str r0, [sp]
	ldr r6, _0808DFF8 @ =gUnknown_030010AC
	mov sb, r6
_0808DF7C:
	lsls r1, r1, #0x10
	asrs r0, r1, #0x10
	add r0, r8
	add r0, sl
	ldrb r2, [r0]
	cmp r2, ip
	beq _0808DFAE
	lsls r0, r2, #1
	adds r0, r0, r2
	lsls r0, r0, #3
	ldr r2, _0808DFFC @ =gMultiSioRecv
	adds r0, r0, r2
	ldrb r0, [r0, #4]
	ldr r6, [sp]
	cmp r0, r6
	bne _0808DFB4
	mov r2, sb
	ldrb r2, [r2]
	cmp r0, r2
	beq _0808DFB4
	adds r2, r3, #0
	adds r2, #0x4d
	ldrb r2, [r2]
	cmp r0, r2
	beq _0808DFB4
_0808DFAE:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_0808DFB4:
	movs r6, #0x80
	lsls r6, r6, #9
	adds r0, r1, r6
	lsrs r1, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #3
	ble _0808DF7C
	cmp r5, #4
	bne _0808E050
	ldrb r0, [r4, #0x17]
	cmp r0, #0xc
	bhi _0808DFD0
	movs r0, #0xd
	strb r0, [r4, #0x17]
_0808DFD0:
	ldrb r0, [r4, #0x17]
	cmp r0, #0xd
	bls _0808E050
	asrs r2, r7, #0x10
	cmp r2, #0
	beq _0808DFE0
	cmp r2, #2
	bne _0808E006
_0808DFE0:
	ldrb r0, [r3, #7]
	ands r5, r0
	cmp r5, #0
	beq _0808E000
	cmp r2, #0
	bne _0808E000
	movs r2, #0
	movs r0, #0xff
	b _0808E01E
	.align 2, 0
_0808DFF4: .4byte gUnknown_080D6F00
_0808DFF8: .4byte gUnknown_030010AC
_0808DFFC: .4byte gMultiSioRecv
_0808E000:
	movs r2, #1
	movs r0, #2
	b _0808E01E
_0808E006:
	ldrb r1, [r3, #7]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _0808E01A
	cmp r2, #1
	bne _0808E01A
	movs r2, #0
	movs r0, #0xff
	b _0808E01E
_0808E01A:
	movs r2, #1
	movs r0, #3
_0808E01E:
	strb r0, [r4, #0x14]
	ldrb r0, [r4, #0x10]
	adds r1, r3, #0
	adds r1, #0x4e
	strb r0, [r1]
	ldrb r1, [r4, #0x11]
	adds r0, r3, #0
	adds r0, #0x4f
	strb r1, [r0]
	cmp r2, #0
	beq _0808E048
	movs r0, #0xff
	strb r0, [r4, #0x12]
	ldr r0, _0808E040 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808E044 @ =sub_808E068
	b _0808E04E
	.align 2, 0
_0808E040: .4byte gCurTask
_0808E044: .4byte sub_808E068
_0808E048:
	ldr r0, _0808E060 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808E064 @ =sub_808E430
_0808E04E:
	str r0, [r1, #8]
_0808E050:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808E060: .4byte gCurTask
_0808E064: .4byte sub_808E430

	thumb_func_start sub_808E068
sub_808E068: @ 0x0808E068
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r0, _0808E098 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	ldr r0, _0808E09C @ =gStageData
	ldrb r6, [r0, #6]
	ldr r0, _0808E0A0 @ =gUnknown_03001060
	ldrb r7, [r0, #7]
	cmp r6, #0
	bne _0808E0A8
	ldr r1, _0808E0A4 @ =gUnknown_080D8F18
	movs r0, #0x13
	ldrsb r0, [r5, r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl sub_80259F8
	b _0808E0B6
	.align 2, 0
_0808E098: .4byte gCurTask
_0808E09C: .4byte gStageData
_0808E0A0: .4byte gUnknown_03001060
_0808E0A4: .4byte gUnknown_080D8F18
_0808E0A8:
	ldr r1, _0808E0C8 @ =gUnknown_080D8F18
	movs r0, #0x13
	ldrsb r0, [r5, r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl sub_8024F84
_0808E0B6:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0808E0CC
	bl sub_802613C
	b _0808E2DC
	.align 2, 0
_0808E0C8: .4byte gUnknown_080D8F18
_0808E0CC:
	movs r4, #0
	movs r0, #0xe
	adds r0, r0, r5
	mov ip, r0
_0808E0D4:
	lsls r1, r4, #0x10
	asrs r2, r1, #0x10
	movs r0, #4
	lsls r0, r2
	ands r0, r7
	adds r3, r1, #0
	cmp r0, #0
	beq _0808E0F4
	lsls r0, r2, #1
	adds r0, r0, r2
	lsls r0, r0, #3
	ldr r1, _0808E0F0 @ =gUnknown_03002BC0
	b _0808E0FC
	.align 2, 0
_0808E0F0: .4byte gUnknown_03002BC0
_0808E0F4:
	lsls r0, r2, #1
	adds r0, r0, r2
	lsls r0, r0, #3
	ldr r1, _0808E1A0 @ =gMultiSioRecv
_0808E0FC:
	adds r2, r0, r1
	asrs r0, r3, #0x10
	adds r1, r0, #2
	add r1, ip
	ldrb r2, [r2, #4]
	strb r2, [r1]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	ble _0808E0D4
	movs r1, #0x14
	ldrsb r1, [r5, r1]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _0808E122
	b _0808E2DC
_0808E122:
	ldrb r0, [r5, #0x16]
	cmp r0, #0
	bne _0808E12A
	b _0808E2DC
_0808E12A:
	ldr r0, _0808E1A4 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0808E200
	movs r4, #0
	ldr r1, _0808E1A8 @ =gUnknown_03001060
	mov ip, r1
	ldr r2, _0808E1AC @ =gUnknown_080D8F18
	mov r8, r2
	movs r3, #0x13
	ldrsb r3, [r5, r3]
	mov r7, ip
	adds r7, #0x4c
	adds r0, r3, r2
	ldrb r2, [r0]
_0808E14C:
	lsls r0, r4, #0x10
	asrs r1, r0, #0x10
	adds r0, r1, r7
	ldrb r0, [r0]
	cmp r0, r2
	bne _0808E15A
	b _0808E2DC
_0808E15A:
	adds r0, r1, #1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #3
	ble _0808E14C
	lsls r1, r6, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #1
	bhi _0808E176
	movs r3, #0x80
	lsls r3, r3, #0xa
	adds r0, r1, r3
	lsrs r6, r0, #0x10
_0808E176:
	lsls r2, r6, #0x10
	asrs r2, r2, #0x10
	mov r1, ip
	adds r1, #0x4c
	adds r1, r2, r1
	movs r0, #0x13
	ldrsb r0, [r5, r0]
	add r0, r8
	ldrb r0, [r0]
	strb r0, [r1]
	movs r0, #1
	ands r0, r2
	cmp r0, #0
	bne _0808E1B8
	movs r0, #0x15
	strb r0, [r5, #0x17]
	ldr r0, _0808E1B0 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808E1B4 @ =sub_808E430
	b _0808E1C2
	.align 2, 0
_0808E1A0: .4byte gMultiSioRecv
_0808E1A4: .4byte gPressedKeys
_0808E1A8: .4byte gUnknown_03001060
_0808E1AC: .4byte gUnknown_080D8F18
_0808E1B0: .4byte gCurTask
_0808E1B4: .4byte sub_808E430
_0808E1B8:
	movs r0, #0x15
	strb r0, [r5, #0x17]
	ldr r0, _0808E1F8 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808E1FC @ =sub_808E2E8
_0808E1C2:
	str r0, [r1, #8]
	lsls r0, r6, #0x10
	asrs r2, r0, #0x10
	cmp r2, #1
	bgt _0808E1E0
	mov r0, ip
	ldrb r1, [r0, #7]
	movs r0, #4
	lsls r0, r2
	ands r1, r0
	cmp r1, #0
	bne _0808E1E0
	adds r0, r2, #2
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
_0808E1E0:
	lsls r1, r6, #0x10
	asrs r1, r1, #0x10
	mov r0, ip
	adds r0, #0x4c
	adds r1, r1, r0
	movs r0, #0x13
	ldrsb r0, [r5, r0]
	add r0, r8
	ldrb r0, [r0]
	strb r0, [r1]
	b _0808E2DC
	.align 2, 0
_0808E1F8: .4byte gCurTask
_0808E1FC: .4byte sub_808E2E8
_0808E200:
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0808E26C
	movs r0, #0x67
	bl m4aSongNumStart
	ldr r1, _0808E224 @ =gUnknown_030010AC
	mov ip, r1
	ldr r7, _0808E228 @ =gUnknown_080D8F18
_0808E214:
	movs r6, #0
	ldrb r1, [r5, #0x13]
	movs r0, #0x13
	ldrsb r0, [r5, r0]
	cmp r0, #0
	ble _0808E22C
	subs r0, r1, #1
	b _0808E22E
	.align 2, 0
_0808E224: .4byte gUnknown_030010AC
_0808E228: .4byte gUnknown_080D8F18
_0808E22C:
	movs r0, #4
_0808E22E:
	strb r0, [r5, #0x13]
	movs r4, #0
	movs r0, #0x13
	ldrsb r0, [r5, r0]
	adds r2, r0, r7
	mov r3, ip
	ldrb r1, [r3]
	adds r3, r0, #0
	ldrb r2, [r2]
	cmp r1, r2
	bne _0808E248
	movs r6, #1
	b _0808E214
_0808E248:
	lsls r0, r4, #0x10
	movs r1, #0x80
	lsls r1, r1, #9
	adds r0, r0, r1
	lsrs r4, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bgt _0808E266
	add r0, ip
	adds r1, r3, r7
	ldrb r0, [r0]
	ldrb r1, [r1]
	cmp r0, r1
	bne _0808E248
	movs r6, #1
_0808E266:
	cmp r6, #0
	bne _0808E214
	b _0808E2D8
_0808E26C:
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _0808E2D8
	movs r0, #0x67
	bl m4aSongNumStart
	ldr r2, _0808E294 @ =gUnknown_030010AC
	mov ip, r2
	ldr r7, _0808E298 @ =gUnknown_080D8F18
_0808E280:
	movs r6, #0
	ldrb r1, [r5, #0x13]
	movs r0, #0x13
	ldrsb r0, [r5, r0]
	cmp r0, #3
	bgt _0808E29C
	adds r0, r1, #1
	strb r0, [r5, #0x13]
	b _0808E29E
	.align 2, 0
_0808E294: .4byte gUnknown_030010AC
_0808E298: .4byte gUnknown_080D8F18
_0808E29C:
	strb r6, [r5, #0x13]
_0808E29E:
	movs r4, #0
	movs r0, #0x13
	ldrsb r0, [r5, r0]
	adds r2, r0, r7
	mov r3, ip
	ldrb r1, [r3]
	adds r3, r0, #0
	ldrb r2, [r2]
	cmp r1, r2
	bne _0808E2B6
	movs r6, #1
	b _0808E280
_0808E2B6:
	lsls r0, r4, #0x10
	movs r1, #0x80
	lsls r1, r1, #9
	adds r0, r0, r1
	lsrs r4, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bgt _0808E2D4
	add r0, ip
	adds r1, r3, r7
	ldrb r0, [r0]
	ldrb r1, [r1]
	cmp r0, r1
	bne _0808E2B6
	movs r6, #1
_0808E2D4:
	cmp r6, #0
	bne _0808E280
_0808E2D8:
	ldrb r0, [r5, #0x13]
	strb r0, [r5, #0x12]
_0808E2DC:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808E2E8
sub_808E2E8: @ 0x0808E2E8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	ldr r0, _0808E340 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r7, r1, r0
	ldr r4, _0808E344 @ =gUnknown_03001060
	ldrb r5, [r4, #7]
	ldr r0, _0808E348 @ =gStageData
	ldrb r6, [r0, #6]
	ldr r1, _0808E34C @ =gUnknown_080D8F18
	movs r0, #0x13
	ldrsb r0, [r7, r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl sub_8025024
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov sb, r0
	movs r1, #0
	mov r8, r5
	adds r4, #0x4c
	mov sl, r4
_0808E322:
	lsls r1, r1, #0x10
	asrs r2, r1, #0x10
	movs r0, #4
	lsls r0, r2
	mov r3, r8
	ands r0, r3
	adds r5, r1, #0
	cmp r0, #0
	beq _0808E354
	lsls r0, r2, #1
	adds r0, r0, r2
	lsls r0, r0, #3
	ldr r1, _0808E350 @ =gUnknown_03002BC0
	b _0808E35C
	.align 2, 0
_0808E340: .4byte gCurTask
_0808E344: .4byte gUnknown_03001060
_0808E348: .4byte gStageData
_0808E34C: .4byte gUnknown_080D8F18
_0808E350: .4byte gUnknown_03002BC0
_0808E354:
	lsls r0, r2, #1
	adds r0, r0, r2
	lsls r0, r0, #3
	ldr r1, _0808E38C @ =gMultiSioRecv
_0808E35C:
	adds r3, r0, r1
	asrs r0, r5, #0x10
	adds r2, r0, #2
	adds r0, r7, #0
	adds r0, #0xe
	adds r0, r0, r2
	ldrb r1, [r3, #4]
	strb r1, [r0]
	mov r0, sl
	adds r4, r2, r0
	ldrb r0, [r4]
	ldr r1, _0808E390 @ =gUnknown_03001060
	mov ip, r1
	cmp r0, #0xff
	bne _0808E396
	adds r0, r3, #0
	adds r0, #0xf
	adds r0, r0, r2
	ldrb r1, [r3, #4]
	ldrb r0, [r0]
	cmp r1, r0
	bne _0808E394
	strb r1, [r4]
	b _0808E396
	.align 2, 0
_0808E38C: .4byte gMultiSioRecv
_0808E390: .4byte gUnknown_03001060
_0808E394:
	strb r0, [r4]
_0808E396:
	movs r2, #0x80
	lsls r2, r2, #9
	adds r0, r5, r2
	lsrs r1, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	ble _0808E322
	mov r3, sb
	lsls r0, r3, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bge _0808E3B4
	bl sub_802613C
	b _0808E418
_0808E3B4:
	cmp r0, #1
	bne _0808E40C
	lsls r1, r6, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #1
	bhi _0808E3C8
	movs r2, #0x80
	lsls r2, r2, #0xa
	adds r0, r1, r2
	lsrs r6, r0, #0x10
_0808E3C8:
	cmp r6, #3
	bne _0808E3FC
	mov r0, ip
	adds r0, #0x4e
	ldrb r0, [r0]
	cmp r0, #0xff
	beq _0808E3EA
	mov r1, ip
	adds r1, #0x4f
	ldrb r3, [r1]
	cmp r0, r3
	bne _0808E3EA
	movs r0, #0x13
	strb r0, [r7, #0x17]
	movs r0, #0xff
	strb r0, [r1]
	b _0808E410
_0808E3EA:
	ldr r0, _0808E3F4 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808E3F8 @ =sub_808E430
	b _0808E416
	.align 2, 0
_0808E3F4: .4byte gCurTask
_0808E3F8: .4byte sub_808E430
_0808E3FC:
	ldr r0, _0808E404 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808E408 @ =sub_808E430
	b _0808E416
	.align 2, 0
_0808E404: .4byte gCurTask
_0808E408: .4byte sub_808E430
_0808E40C:
	cmp r0, #2
	bne _0808E418
_0808E410:
	ldr r0, _0808E428 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808E42C @ =sub_808E068
_0808E416:
	str r0, [r1, #8]
_0808E418:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808E428: .4byte gCurTask
_0808E42C: .4byte sub_808E068

	thumb_func_start sub_808E430
sub_808E430: @ 0x0808E430
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r0, _0808E460 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	ldr r0, _0808E464 @ =gStageData
	ldrb r4, [r0, #6]
	ldr r0, _0808E468 @ =gUnknown_03001060
	ldrb r6, [r0, #7]
	cmp r4, #0
	bne _0808E470
	ldr r1, _0808E46C @ =gUnknown_080D8F18
	movs r0, #0x13
	ldrsb r0, [r5, r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl sub_8024E1C
	b _0808E47E
	.align 2, 0
_0808E460: .4byte gCurTask
_0808E464: .4byte gStageData
_0808E468: .4byte gUnknown_03001060
_0808E46C: .4byte gUnknown_080D8F18
_0808E470:
	ldr r1, _0808E490 @ =gUnknown_080D8F18
	movs r0, #0x13
	ldrsb r0, [r5, r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl sub_80250EC
_0808E47E:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bge _0808E494
	bl sub_802613C
	b _0808E6A4
	.align 2, 0
_0808E490: .4byte gUnknown_080D8F18
_0808E494:
	cmp r0, #1
	beq _0808E49A
	b _0808E634
_0808E49A:
	movs r1, #0
	ldr r0, _0808E4DC @ =gUnknown_03001060
	mov ip, r0
	lsls r4, r4, #0x10
	adds r7, r5, #0
	adds r7, #0xe
	movs r0, #0x4c
	add r0, ip
	mov r8, r0
	adds r3, r7, #0
_0808E4AE:
	lsls r0, r1, #0x10
	asrs r0, r0, #0x10
	mov r1, r8
	adds r2, r0, r1
	adds r1, r3, r0
	ldrb r1, [r1]
	strb r1, [r2]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #3
	ble _0808E4AE
	asrs r1, r4, #0x10
	cmp r1, #1
	bgt _0808E4E0
	movs r0, #4
	lsls r0, r1
	ands r6, r0
	cmp r6, #0
	bne _0808E4E0
	adds r0, r1, #2
	b _0808E4E2
	.align 2, 0
_0808E4DC: .4byte gUnknown_03001060
_0808E4E0:
	lsrs r0, r4, #0x10
_0808E4E2:
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	adds r6, r0, #0
	cmp r1, #2
	beq _0808E4F2
	asrs r0, r4, #0x10
	cmp r0, #2
	bne _0808E5D4
_0808E4F2:
	mov r0, ip
	adds r0, #0x4f
	ldrb r1, [r0]
	cmp r1, #0xff
	beq _0808E520
	mov r2, ip
	adds r2, #0x4e
	ldrb r0, [r2]
	cmp r0, r1
	bne _0808E520
	movs r0, #0x13
	strb r0, [r5, #0x17]
	movs r0, #0xff
	strb r0, [r2]
	ldr r0, _0808E518 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808E51C @ =sub_808E068
	str r0, [r1, #8]
	b _0808E6A4
	.align 2, 0
_0808E518: .4byte gCurTask
_0808E51C: .4byte sub_808E068
_0808E520:
	movs r1, #0
	ldr r2, _0808E590 @ =gUnknown_030010AC
_0808E524:
	lsls r0, r1, #0x10
	asrs r1, r0, #0x10
	adds r0, r1, r2
	ldrb r0, [r0]
	cmp r0, #4
	bls _0808E532
	b _0808E6A4
_0808E532:
	adds r0, r1, #1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #3
	ble _0808E524
	movs r1, #0x14
	ldrsb r1, [r5, r1]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _0808E59C
	lsrs r0, r4, #0x10
	cmp r0, #1
	bhi _0808E59C
	movs r1, #0
	ldr r5, _0808E590 @ =gUnknown_030010AC
	adds r3, r7, #0
_0808E556:
	lsls r0, r1, #0x10
	asrs r0, r0, #0x10
	adds r2, r0, r5
	adds r1, r3, r0
	ldrb r1, [r1]
	strb r1, [r2]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #3
	ble _0808E556
	asrs r0, r4, #0x10
	add r0, ip
	adds r0, #0x4e
	ldrb r2, [r0]
	asrs r0, r6, #0x10
	cmp r0, #2
	beq _0808E5B8
	ldr r1, _0808E594 @ =gUnknown_080D9022
	ldr r0, _0808E598 @ =gUnknown_080D6EE0
	adds r0, r2, r0
	ldrb r0, [r0]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	bl m4aSongNumStart
	b _0808E5B8
	.align 2, 0
_0808E590: .4byte gUnknown_030010AC
_0808E594: .4byte gUnknown_080D9022
_0808E598: .4byte gUnknown_080D6EE0
_0808E59C:
	asrs r0, r6, #0x10
	mov r1, ip
	adds r1, #0x4c
	adds r0, r0, r1
	ldrb r0, [r0]
	ldr r2, _0808E5C4 @ =gUnknown_080D9022
	ldr r1, _0808E5C8 @ =gUnknown_080D6EE0
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	bl m4aSongNumStart
_0808E5B8:
	ldr r0, _0808E5CC @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808E5D0 @ =sub_808EDA8
	str r0, [r1, #8]
	b _0808E6A4
	.align 2, 0
_0808E5C4: .4byte gUnknown_080D9022
_0808E5C8: .4byte gUnknown_080D6EE0
_0808E5CC: .4byte gCurTask
_0808E5D0: .4byte sub_808EDA8
_0808E5D4:
	movs r1, #0
	ldr r2, _0808E620 @ =gUnknown_030010AC
_0808E5D8:
	lsls r0, r1, #0x10
	asrs r1, r0, #0x10
	adds r0, r1, r2
	ldrb r0, [r0]
	cmp r0, #4
	bhi _0808E6A4
	adds r0, r1, #1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #3
	ble _0808E5D8
	asrs r0, r4, #0x10
	cmp r0, #3
	bne _0808E612
	asrs r0, r6, #0x10
	mov r1, ip
	adds r1, #0x4c
	adds r0, r0, r1
	ldrb r0, [r0]
	ldr r2, _0808E624 @ =gUnknown_080D9022
	ldr r1, _0808E628 @ =gUnknown_080D6EE0
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	bl m4aSongNumStart
_0808E612:
	movs r0, #0
	strh r0, [r5, #0xc]
	ldr r0, _0808E62C @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808E630 @ =sub_808E7B0
	str r0, [r1, #8]
	b _0808E6A4
	.align 2, 0
_0808E620: .4byte gUnknown_030010AC
_0808E624: .4byte gUnknown_080D9022
_0808E628: .4byte gUnknown_080D6EE0
_0808E62C: .4byte gCurTask
_0808E630: .4byte sub_808E7B0
_0808E634:
	movs r1, #0
	lsls r4, r4, #0x10
	adds r7, r5, #0
	adds r7, #0xe
_0808E63C:
	lsls r1, r1, #0x10
	asrs r2, r1, #0x10
	movs r0, #4
	lsls r0, r2
	ands r0, r6
	adds r3, r1, #0
	cmp r0, #0
	beq _0808E65C
	lsls r0, r2, #1
	adds r0, r0, r2
	lsls r0, r0, #3
	ldr r1, _0808E658 @ =gUnknown_03002BC0
	b _0808E664
	.align 2, 0
_0808E658: .4byte gUnknown_03002BC0
_0808E65C:
	lsls r0, r2, #1
	adds r0, r0, r2
	lsls r0, r0, #3
	ldr r1, _0808E68C @ =gMultiSioRecv
_0808E664:
	adds r2, r0, r1
	asrs r0, r3, #0x10
	adds r1, r0, #2
	adds r1, r7, r1
	ldrb r2, [r2, #4]
	strb r2, [r1]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	ble _0808E63C
	asrs r0, r4, #0x10
	cmp r0, #0
	bne _0808E694
	ldr r0, _0808E690 @ =gUnknown_080D6EE0
	movs r1, #0x10
	ldrsb r1, [r5, r1]
	b _0808E69E
	.align 2, 0
_0808E68C: .4byte gMultiSioRecv
_0808E690: .4byte gUnknown_080D6EE0
_0808E694:
	cmp r0, #1
	bne _0808E6A4
	ldr r0, _0808E6B0 @ =gUnknown_080D6EE0
	movs r1, #0x11
	ldrsb r1, [r5, r1]
_0808E69E:
	adds r1, r1, r0
	ldrb r0, [r1]
	strb r0, [r5, #0x12]
_0808E6A4:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808E6B0: .4byte gUnknown_080D6EE0

	thumb_func_start sub_808E6B4
sub_808E6B4: @ 0x0808E6B4
	push {r4, r5, r6, lr}
	ldr r0, _0808E6E0 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	ldr r0, _0808E6E4 @ =gStageData
	ldrb r4, [r0, #6]
	ldr r0, _0808E6E8 @ =gUnknown_03001060
	ldrb r6, [r0, #7]
	cmp r4, #0
	bne _0808E6F0
	ldr r1, _0808E6EC @ =gUnknown_080D8F18
	movs r0, #0x13
	ldrsb r0, [r5, r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl sub_8024F1C
	b _0808E6FE
	.align 2, 0
_0808E6E0: .4byte gCurTask
_0808E6E4: .4byte gStageData
_0808E6E8: .4byte gUnknown_03001060
_0808E6EC: .4byte gUnknown_080D8F18
_0808E6F0:
	ldr r1, _0808E710 @ =gUnknown_080D8F18
	movs r0, #0x13
	ldrsb r0, [r5, r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl sub_80251F8
_0808E6FE:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bge _0808E714
	bl sub_802613C
	b _0808E7AA
	.align 2, 0
_0808E710: .4byte gUnknown_080D8F18
_0808E714:
	cmp r0, #1
	bne _0808E750
	movs r0, #0x13
	strb r0, [r5, #0x17]
	lsls r1, r4, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #1
	bhi _0808E72C
	movs r2, #0x80
	lsls r2, r2, #0xa
	adds r0, r1, r2
	lsrs r4, r0, #0x10
_0808E72C:
	ldr r1, _0808E744 @ =gUnknown_03001060
	lsls r0, r4, #0x10
	asrs r0, r0, #0x10
	adds r1, #0x4c
	adds r0, r0, r1
	movs r1, #0xff
	strb r1, [r0]
	ldr r0, _0808E748 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808E74C @ =sub_808E068
	b _0808E75A
	.align 2, 0
_0808E744: .4byte gUnknown_03001060
_0808E748: .4byte gCurTask
_0808E74C: .4byte sub_808E068
_0808E750:
	cmp r0, #2
	bne _0808E75C
	ldr r0, _0808E780 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808E784 @ =sub_808E430
_0808E75A:
	str r0, [r1, #8]
_0808E75C:
	movs r1, #0
	adds r5, #0xe
	adds r4, r6, #0
	ldr r3, _0808E788 @ =gUnknown_03002BC0
	adds r6, r3, #0
	subs r6, #0x30
_0808E768:
	lsls r1, r1, #0x10
	asrs r2, r1, #0x10
	movs r0, #4
	lsls r0, r2
	ands r0, r4
	cmp r0, #0
	beq _0808E78C
	lsls r0, r2, #1
	adds r0, r0, r2
	lsls r0, r0, #3
	adds r2, r0, r3
	b _0808E794
	.align 2, 0
_0808E780: .4byte gCurTask
_0808E784: .4byte sub_808E430
_0808E788: .4byte gUnknown_03002BC0
_0808E78C:
	lsls r0, r2, #1
	adds r0, r0, r2
	lsls r0, r0, #3
	adds r2, r0, r6
_0808E794:
	asrs r0, r1, #0x10
	adds r1, r0, #2
	adds r1, r5, r1
	ldrb r2, [r2, #4]
	strb r2, [r1]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	ble _0808E768
_0808E7AA:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_808E7B0
sub_808E7B0: @ 0x0808E7B0
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	ldr r0, _0808E814 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r1, r1, r0
	mov sb, r1
	ldr r0, _0808E818 @ =gStageData
	ldrb r5, [r0, #6]
	movs r4, #0
	ldr r0, _0808E81C @ =gPlayers
	mov r8, r0
	ldr r7, _0808E820 @ =gUnknown_030010AC
	movs r1, #0x10
	rsbs r1, r1, #0
	mov ip, r1
	movs r6, #0xf
_0808E7DA:
	lsls r1, r4, #2
	adds r1, r1, r4
	lsls r1, r1, #2
	adds r1, r1, r4
	lsls r1, r1, #4
	add r1, r8
	adds r0, r4, r7
	ldrb r0, [r0]
	adds r1, #0x2a
	adds r2, r6, #0
	ands r2, r0
	ldrb r3, [r1]
	mov r0, ip
	ands r0, r3
	orrs r0, r2
	strb r0, [r1]
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #3
	bls _0808E7DA
	lsls r0, r5, #0x10
	adds r4, r0, #0
	cmp r4, #0
	bne _0808E824
	bl sub_8025A90
	b _0808E828
	.align 2, 0
_0808E814: .4byte gCurTask
_0808E818: .4byte gStageData
_0808E81C: .4byte gPlayers
_0808E820: .4byte gUnknown_030010AC
_0808E824:
	bl sub_80253CC
_0808E828:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bge _0808E83A
	bl sub_802613C
	b _0808E850
_0808E83A:
	cmp r0, #1
	beq _0808E842
	cmp r4, #0
	bne _0808E850
_0808E842:
	movs r0, #0x14
	mov r1, sb
	strb r0, [r1, #0x17]
	ldr r0, _0808E85C @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808E860 @ =sub_808EDE4
	str r0, [r1, #8]
_0808E850:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808E85C: .4byte gCurTask
_0808E860: .4byte sub_808EDE4

	thumb_func_start sub_808E864
sub_808E864: @ 0x0808E864
	push {r4, r5, r6, r7, lr}
	ldr r0, _0808E884 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r6, r4, #0
	ldr r0, _0808E888 @ =gStageData
	ldrb r7, [r0, #6]
	cmp r7, #0
	bne _0808E88C
	bl sub_8025A90
	b _0808E890
	.align 2, 0
_0808E884: .4byte gCurTask
_0808E888: .4byte gStageData
_0808E88C:
	bl sub_80253CC
_0808E890:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r0, r0, #0x10
	asrs r5, r0, #0x10
	cmp r5, #0
	bge _0808E8A2
	bl sub_802613C
	b _0808E8EE
_0808E8A2:
	bl sub_808EF98
	adds r0, r6, #0
	bl UpdateScreenFade
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808E8EE
	ldrh r0, [r4, #0xc]
	subs r0, #1
	movs r2, #0
	strh r0, [r4, #0xc]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x3c
	bgt _0808E8EE
	cmp r7, #0
	bne _0808E8D8
	ldr r0, _0808E8D4 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0808E8DE
	b _0808E8DC
	.align 2, 0
_0808E8D4: .4byte gPressedKeys
_0808E8D8:
	cmp r5, #1
	bne _0808E8DE
_0808E8DC:
	strh r2, [r4, #0xc]
_0808E8DE:
	movs r1, #0xc
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bgt _0808E8EE
	ldr r0, _0808E8F4 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808E8F8 @ =sub_808E8FC
	str r0, [r1, #8]
_0808E8EE:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808E8F4: .4byte gCurTask
_0808E8F8: .4byte sub_808E8FC

	thumb_func_start sub_808E8FC
sub_808E8FC: @ 0x0808E8FC
	push {r4, r5, lr}
	sub sp, #4
	ldr r0, _0808E91C @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	ldr r0, _0808E920 @ =gStageData
	ldrb r0, [r0, #6]
	cmp r0, #0
	bne _0808E924
	bl sub_8025360
	b _0808E928
	.align 2, 0
_0808E91C: .4byte gCurTask
_0808E920: .4byte gStageData
_0808E924:
	bl sub_8025AA8
_0808E928:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	cmp r4, #0
	bge _0808E93A
	bl sub_802613C
	b _0808E986
_0808E93A:
	adds r0, r5, #0
	bl UpdateScreenFade
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808E986
	cmp r4, #1
	bne _0808E986
	movs r3, #0
	str r3, [sp]
	ldr r2, _0808E990 @ =0x040000D4
	mov r0, sp
	str r0, [r2]
	ldr r0, _0808E994 @ =gBgCntRegs
	ldrh r1, [r0, #4]
	movs r0, #0xc
	ands r0, r1
	lsls r0, r0, #0xc
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r0, r0, r1
	str r0, [r2, #4]
	ldr r0, _0808E998 @ =0x85000010
	str r0, [r2, #8]
	ldr r0, [r2, #8]
	ldr r0, _0808E99C @ =gUnknown_03006230
	strb r3, [r0, #2]
	ldr r1, _0808E9A0 @ =gUnknown_03003590
	strb r3, [r1, #8]
	strb r3, [r1, #9]
	movs r0, #0xff
	strb r0, [r1, #0xa]
	movs r0, #0x40
	strb r0, [r1, #0xb]
	ldr r0, _0808E9A4 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808E9A8 @ =sub_808E9AC
	str r0, [r1, #8]
_0808E986:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808E990: .4byte 0x040000D4
_0808E994: .4byte gBgCntRegs
_0808E998: .4byte 0x85000010
_0808E99C: .4byte gUnknown_03006230
_0808E9A0: .4byte gUnknown_03003590
_0808E9A4: .4byte gCurTask
_0808E9A8: .4byte sub_808E9AC

	thumb_func_start sub_808E9AC
sub_808E9AC: @ 0x0808E9AC
	push {r4, r5, r6, lr}
	ldr r0, _0808EA10 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r1, r0
	ldr r0, _0808EA14 @ =gStageData
	ldrb r5, [r0, #6]
	movs r2, #0
	strb r2, [r6, #0x13]
	strb r2, [r6, #0x15]
	ldr r1, _0808EA18 @ =gDispCnt
	movs r3, #0xb2
	lsls r3, r3, #5
	adds r0, r3, #0
	strh r0, [r1]
	ldr r4, _0808EA1C @ =gUnknown_03006230
	strb r2, [r4]
	ldr r0, _0808EA20 @ =gUnknown_03003590
	strb r2, [r0]
	strb r2, [r0, #1]
	movs r1, #0xff
	strb r1, [r0, #2]
	movs r3, #0x20
	strb r3, [r0, #3]
	strb r2, [r4, #1]
	strb r2, [r0, #4]
	strb r2, [r0, #5]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #6]
	strb r3, [r0, #7]
	strb r2, [r4, #2]
	strb r2, [r0, #8]
	strb r2, [r0, #9]
	strb r1, [r0, #0xa]
	strb r3, [r0, #0xb]
	strb r2, [r4, #3]
	strb r2, [r0, #0xc]
	strb r2, [r0, #0xd]
	strb r1, [r0, #0xe]
	strb r3, [r0, #0xf]
	cmp r5, #0
	bne _0808EA24
	ldrb r0, [r6, #0x15]
	bl sub_8025460
	b _0808EA28
	.align 2, 0
_0808EA10: .4byte gCurTask
_0808EA14: .4byte gStageData
_0808EA18: .4byte gDispCnt
_0808EA1C: .4byte gUnknown_03006230
_0808EA20: .4byte gUnknown_03003590
_0808EA24:
	bl sub_8025AA8
_0808EA28:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0808EA38
	bl sub_802613C
	b _0808EA5C
_0808EA38:
	movs r1, #0
	strh r1, [r6]
	movs r0, #2
	strh r0, [r6, #2]
	strh r1, [r6, #4]
	movs r0, #0x80
	lsls r0, r0, #2
	strh r0, [r6, #6]
	movs r0, #0xff
	strh r0, [r6, #8]
	strh r1, [r6, #0xa]
	adds r0, r6, #0
	bl ScreenFadeUpdateValues
	ldr r0, _0808EA64 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808EA68 @ =sub_808EA6C
	str r0, [r1, #8]
_0808EA5C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808EA64: .4byte gCurTask
_0808EA68: .4byte sub_808EA6C

	thumb_func_start sub_808EA6C
sub_808EA6C: @ 0x0808EA6C
	push {r4, r5, r6, r7, lr}
	sub sp, #0x18
	ldr r0, _0808EAA4 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r7, r4, #0
	ldr r0, _0808EAA8 @ =gStageData
	ldrb r6, [r0, #6]
	ldr r1, _0808EAAC @ =gUnknown_080D6F0C
	mov r0, sp
	movs r2, #0x15
	bl memcpy
	movs r0, #0x13
	ldrsb r0, [r4, r0]
	add r0, sp
	ldrb r0, [r0]
	strb r0, [r4, #0x15]
	cmp r6, #0
	bne _0808EAB0
	ldrb r0, [r4, #0x15]
	bl sub_8025460
	b _0808EAB4
	.align 2, 0
_0808EAA4: .4byte gCurTask
_0808EAA8: .4byte gStageData
_0808EAAC: .4byte gUnknown_080D6F0C
_0808EAB0:
	bl sub_80255B0
_0808EAB4:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r0, r0, #0x10
	asrs r5, r0, #0x10
	cmp r5, #0
	bge _0808EAC6
	bl sub_802613C
	b _0808EB48
_0808EAC6:
	bl sub_808EBBC
	adds r0, r7, #0
	bl UpdateScreenFade
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808EB48
	cmp r5, #1
	bne _0808EAEC
	ldr r0, _0808EAE4 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808EAE8 @ =sub_808EB50
	str r0, [r1, #8]
	b _0808EB48
	.align 2, 0
_0808EAE4: .4byte gCurTask
_0808EAE8: .4byte sub_808EB50
_0808EAEC:
	cmp r6, #0
	bne _0808EB48
	ldr r0, _0808EB08 @ =gPressedKeys
	ldrh r1, [r0]
	movs r2, #1
	ands r2, r1
	cmp r2, #0
	beq _0808EB14
	ldr r0, _0808EB0C @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808EB10 @ =sub_808EE8C
	str r0, [r1, #8]
	b _0808EB48
	.align 2, 0
_0808EB08: .4byte gPressedKeys
_0808EB0C: .4byte gCurTask
_0808EB10: .4byte sub_808EE8C
_0808EB14:
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _0808EB2E
	ldrb r1, [r4, #0x13]
	movs r0, #0x13
	ldrsb r0, [r4, r0]
	cmp r0, #0x13
	ble _0808EB2A
	strb r2, [r4, #0x13]
	b _0808EB48
_0808EB2A:
	adds r0, r1, #1
	b _0808EB46
_0808EB2E:
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0808EB48
	ldrb r1, [r4, #0x13]
	movs r0, #0x13
	ldrsb r0, [r4, r0]
	cmp r0, #0
	bgt _0808EB44
	movs r0, #0x14
	b _0808EB46
_0808EB44:
	subs r0, r1, #1
_0808EB46:
	strb r0, [r4, #0x13]
_0808EB48:
	add sp, #0x18
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_808EB50
sub_808EB50: @ 0x0808EB50
	push {r4, lr}
	ldr r0, _0808EB6C @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, _0808EB70 @ =gStageData
	ldrb r0, [r0, #6]
	cmp r0, #0
	bne _0808EB74
	bl sub_8025534
	b _0808EB78
	.align 2, 0
_0808EB6C: .4byte gCurTask
_0808EB70: .4byte gStageData
_0808EB74:
	bl sub_8025614
_0808EB78:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0808EB88
	bl sub_802613C
	b _0808EBAC
_0808EB88:
	movs r1, #0
	strh r1, [r4]
	movs r0, #1
	strh r0, [r4, #2]
	strh r1, [r4, #4]
	movs r0, #0x80
	lsls r0, r0, #2
	strh r0, [r4, #6]
	movs r0, #0xff
	strh r0, [r4, #8]
	strh r1, [r4, #0xa]
	adds r0, r4, #0
	bl ScreenFadeUpdateValues
	ldr r0, _0808EBB4 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808EBB8 @ =sub_808EEB8
	str r0, [r1, #8]
_0808EBAC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808EBB4: .4byte gCurTask
_0808EBB8: .4byte sub_808EEB8

	thumb_func_start sub_808EBBC
sub_808EBBC: @ 0x0808EBBC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x2c
	ldr r0, _0808EC64 @ =gStageData
	ldrb r0, [r0, #6]
	mov sl, r0
	ldr r7, _0808EC68 @ =0x06000040
	ldr r0, _0808EC6C @ =gUnknown_03001060
	adds r0, #0x50
	movs r1, #0
	ldrsh r4, [r0, r1]
	adds r0, r4, #0
	movs r1, #0xa
	bl Div
	adds r5, r0, #0
	adds r5, #1
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	adds r0, r4, #0
	movs r1, #0xa
	bl Mod
	adds r4, r0, #0
	subs r4, #1
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	ldr r1, _0808EC70 @ =gStringSelectStage
	add r0, sp, #0xc
	bl sprintf
	ldr r0, _0808EC74 @ =gUnknown_082B5344
	mov sb, r0
	movs r1, #2
	mov r8, r1
	str r1, [sp]
	add r0, sp, #0xc
	str r0, [sp, #4]
	movs r6, #0
	str r6, [sp, #8]
	adds r0, r7, #0
	mov r1, sb
	movs r2, #0xa
	movs r3, #6
	bl RenderText
	movs r0, #0xc0
	lsls r0, r0, #1
	adds r7, r7, r0
	ldr r1, _0808EC78 @ =gStringZoneNActN
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	add r0, sp, #0xc
	adds r2, r5, #0
	adds r3, r4, #0
	bl sprintf
	mov r1, r8
	str r1, [sp]
	add r0, sp, #0xc
	str r0, [sp, #4]
	str r6, [sp, #8]
	adds r0, r7, #0
	mov r1, sb
	movs r2, #0xa
	movs r3, #8
	bl RenderText
	movs r1, #0xd0
	lsls r1, r1, #1
	adds r7, r7, r1
	mov r0, sl
	cmp r0, #0
	bne _0808EC80
	ldr r1, _0808EC7C @ =gStringPressABtn
	add r0, sp, #0xc
	bl sprintf
	b _0808EC88
	.align 2, 0
_0808EC64: .4byte gStageData
_0808EC68: .4byte 0x06000040
_0808EC6C: .4byte gUnknown_03001060
_0808EC70: .4byte gStringSelectStage
_0808EC74: .4byte gUnknown_082B5344
_0808EC78: .4byte gStringZoneNActN
_0808EC7C: .4byte gStringPressABtn
_0808EC80:
	ldr r1, _0808ECB0 @ =gStringPleaseWait
	add r0, sp, #0xc
	bl sprintf
_0808EC88:
	ldr r1, _0808ECB4 @ =gUnknown_082B5344
	movs r0, #2
	str r0, [sp]
	add r0, sp, #0xc
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	adds r0, r7, #0
	movs r2, #0xa
	movs r3, #0x10
	bl RenderText
	add sp, #0x2c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808ECB0: .4byte gStringPleaseWait
_0808ECB4: .4byte gUnknown_082B5344

	thumb_func_start sub_808ECB8
sub_808ECB8: @ 0x0808ECB8
	push {lr}
	bl sub_8027960
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808ECC4
sub_808ECC4: @ 0x0808ECC4
	push {r4, lr}
	ldr r4, _0808ECE8 @ =gCurTask
	ldr r0, [r4]
	ldrh r0, [r0, #6]
	ldr r1, _0808ECEC @ =gUnknown_03000FC0
	adds r0, r0, r1
	bl UpdateScreenFade
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808ECE0
	ldr r1, [r4]
	ldr r0, _0808ECF0 @ =sub_808D00C
	str r0, [r1, #8]
_0808ECE0:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808ECE8: .4byte gCurTask
_0808ECEC: .4byte gUnknown_03000FC0
_0808ECF0: .4byte sub_808D00C

	thumb_func_start sub_808ECF4
sub_808ECF4: @ 0x0808ECF4
	push {r4, lr}
	ldr r0, _0808ED24 @ =gCurTask
	ldr r0, [r0]
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r4, r0, r1
	ldr r1, _0808ED28 @ =gUnknown_03000FC0
	adds r0, r0, r1
	bl UpdateScreenFade
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808ED50
	movs r1, #0x10
	ldrsh r0, [r4, r1]
	cmp r0, #1
	beq _0808ED3A
	cmp r0, #1
	bgt _0808ED2C
	cmp r0, #0
	beq _0808ED32
	b _0808ED48
	.align 2, 0
_0808ED24: .4byte gCurTask
_0808ED28: .4byte gUnknown_03000FC0
_0808ED2C:
	cmp r0, #2
	beq _0808ED40
	b _0808ED48
_0808ED32:
	movs r0, #0
	bl sub_808D0F0
	b _0808ED48
_0808ED3A:
	bl sub_8027960
	b _0808ED48
_0808ED40:
	movs r0, #0
	movs r1, #0
	bl LaunchChaoMenu
_0808ED48:
	ldr r0, _0808ED58 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
_0808ED50:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808ED58: .4byte gCurTask

	thumb_func_start sub_808ED5C
sub_808ED5C: @ 0x0808ED5C
	bx lr
	.align 2, 0

	thumb_func_start sub_808ED60
sub_808ED60: @ 0x0808ED60
	push {r4, r5, lr}
	ldr r5, _0808EDA4 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl UpdateScreenFade
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808ED9C
	ldrb r0, [r4, #0x17]
	cmp r0, #0x22
	bhi _0808ED84
	movs r0, #0x23
	strb r0, [r4, #0x17]
_0808ED84:
	ldrb r0, [r4, #0x17]
	cmp r0, #0x26
	bne _0808ED9C
	bl sub_80260F0
	movs r0, #0
	movs r1, #4
	bl LaunchChaoMenu
	ldr r0, [r5]
	bl TaskDestroy
_0808ED9C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808EDA4: .4byte gCurTask

	thumb_func_start sub_808EDA8
sub_808EDA8: @ 0x0808EDA8
	push {r4, r5, lr}
	ldr r5, _0808EDC8 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	bl sub_8025A38
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bge _0808EDCC
	bl sub_802613C
	b _0808EDDA
	.align 2, 0
_0808EDC8: .4byte gCurTask
_0808EDCC:
	cmp r0, #1
	bne _0808EDDA
	movs r0, #0
	strh r0, [r4, #0xc]
	ldr r1, [r5]
	ldr r0, _0808EDE0 @ =sub_808E7B0
	str r0, [r1, #8]
_0808EDDA:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808EDE0: .4byte sub_808E7B0

	thumb_func_start sub_808EDE4
sub_808EDE4: @ 0x0808EDE4
	push {r4, lr}
	ldr r0, _0808EE00 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, _0808EE04 @ =gStageData
	ldrb r0, [r0, #6]
	cmp r0, #0
	bne _0808EE08
	bl sub_8025A90
	b _0808EE0C
	.align 2, 0
_0808EE00: .4byte gCurTask
_0808EE04: .4byte gStageData
_0808EE08:
	bl sub_80253CC
_0808EE0C:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0808EE1C
	bl sub_802613C
	b _0808EE2A
_0808EE1C:
	ldrb r0, [r4, #0x17]
	cmp r0, #0x26
	bne _0808EE2A
	ldr r0, _0808EE30 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
_0808EE2A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808EE30: .4byte gCurTask

	thumb_func_start sub_808EE34
sub_808EE34: @ 0x0808EE34
	push {r4, lr}
	ldr r0, _0808EE50 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, _0808EE54 @ =gStageData
	ldrb r0, [r0, #6]
	cmp r0, #0
	bne _0808EE58
	bl sub_8025A90
	b _0808EE5C
	.align 2, 0
_0808EE50: .4byte gCurTask
_0808EE54: .4byte gStageData
_0808EE58:
	bl sub_80253CC
_0808EE5C:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0808EE6C
	bl sub_802613C
	b _0808EE7C
_0808EE6C:
	bl sub_808EF98
	movs r0, #0x78
	strh r0, [r4, #0xc]
	ldr r0, _0808EE84 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808EE88 @ =sub_808E864
	str r0, [r1, #8]
_0808EE7C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808EE84: .4byte gCurTask
_0808EE88: .4byte sub_808E864

	thumb_func_start sub_808EE8C
sub_808EE8C: @ 0x0808EE8C
	push {lr}
	bl sub_8025534
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bge _0808EEA0
	bl sub_802613C
	b _0808EEAC
_0808EEA0:
	cmp r0, #1
	bne _0808EEAC
	ldr r0, _0808EEB0 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808EEB4 @ =sub_808EB50
	str r0, [r1, #8]
_0808EEAC:
	pop {r0}
	bx r0
	.align 2, 0
_0808EEB0: .4byte gCurTask
_0808EEB4: .4byte sub_808EB50

	thumb_func_start sub_808EEB8
sub_808EEB8: @ 0x0808EEB8
	push {r4, lr}
	ldr r0, _0808EED4 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, _0808EED8 @ =gStageData
	ldrb r0, [r0, #6]
	cmp r0, #0
	bne _0808EEDC
	bl sub_8025534
	b _0808EEE0
	.align 2, 0
_0808EED4: .4byte gCurTask
_0808EED8: .4byte gStageData
_0808EEDC:
	bl sub_8025614
_0808EEE0:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0808EEF0
	bl sub_802613C
	b _0808EF04
_0808EEF0:
	adds r0, r4, #0
	bl UpdateScreenFade
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808EF04
	ldr r0, _0808EF0C @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808EF10 @ =sub_808EF14
	str r0, [r1, #8]
_0808EF04:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808EF0C: .4byte gCurTask
_0808EF10: .4byte sub_808EF14

	thumb_func_start sub_808EF14
sub_808EF14: @ 0x0808EF14
	push {r4, lr}
	ldr r0, _0808EF30 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, _0808EF34 @ =gStageData
	ldrb r0, [r0, #6]
	cmp r0, #0
	bne _0808EF38
	bl sub_8025674
	b _0808EF3C
	.align 2, 0
_0808EF30: .4byte gCurTask
_0808EF34: .4byte gStageData
_0808EF38:
	bl sub_8025B48
_0808EF3C:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bge _0808EF4E
	bl sub_802613C
	b _0808EF76
_0808EF4E:
	cmp r0, #1
	bne _0808EF76
	ldr r1, _0808EF7C @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _0808EF80 @ =gBackgroundsCopyQueueCursor
	ldr r0, _0808EF84 @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _0808EF88 @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _0808EF8C @ =gVramGraphicsCopyCursor
	ldr r0, _0808EF90 @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldrb r0, [r4, #0x15]
	bl sub_80022E8
_0808EF76:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808EF7C: .4byte 0x0000FFFF
_0808EF80: .4byte gBackgroundsCopyQueueCursor
_0808EF84: .4byte gBackgroundsCopyQueueIndex
_0808EF88: .4byte gUnknown_03006840
_0808EF8C: .4byte gVramGraphicsCopyCursor
_0808EF90: .4byte gVramGraphicsCopyQueueIndex
_0808EF94:
	.byte 0x70, 0x47, 0x00, 0x00

	thumb_func_start sub_808EF98
sub_808EF98: @ 0x0808EF98
	bx lr
	.align 2, 0

	thumb_func_start OptionsSlideInit_PlayerData
OptionsSlideInit_PlayerData: @ 0x0808EF9C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	mov r8, r1
	adds r4, r2, #0
	adds r5, r3, #0
	ldr r0, _0808F058 @ =sub_808F268
	movs r1, #0xb2
	lsls r1, r1, #1
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r3, _0808F05C @ =sub_808F5DC
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r1, r0
	str r4, [r6, #8]
	str r5, [r6, #4]
	movs r3, #0
	adds r0, #0x14
	adds r0, r0, r1
	mov ip, r0
	ldr r4, _0808F060 @ =gBgScrollRegs
	ldr r2, _0808F064 @ =0x03000018
	adds r2, r2, r1
	mov sb, r2
	adds r5, r4, #0
_0808EFDE:
	lsls r1, r3, #3
	mov r7, ip
	adds r2, r7, r1
	movs r7, #4
	ldrsh r0, [r4, r7]
	rsbs r0, r0, #0
	str r0, [r2]
	add r1, sb
	movs r2, #4
	ldrsh r0, [r4, r2]
	rsbs r0, r0, #0
	adds r0, #0xa
	str r0, [r1]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #3
	bls _0808EFDE
	movs r7, #4
	ldrsh r0, [r5, r7]
	rsbs r0, r0, #0
	str r0, [r6, #0x34]
	movs r1, #6
	ldrsh r0, [r5, r1]
	rsbs r0, r0, #0
	str r0, [r6, #0x38]
	ldrh r0, [r5, #4]
	rsbs r0, r0, #0
	adds r0, #0x64
	adds r1, r6, #0
	adds r1, #0x44
	strh r0, [r1]
	ldrh r0, [r5, #6]
	rsbs r0, r0, #0
	adds r1, #2
	strh r0, [r1]
	movs r2, #4
	ldrsh r0, [r5, r2]
	rsbs r0, r0, #0
	str r0, [r6, #0x3c]
	movs r7, #6
	ldrsh r0, [r5, r7]
	rsbs r0, r0, #0
	str r0, [r6, #0x40]
	mov r0, r8
	str r0, [r6, #0x48]
	ldr r0, _0808F068 @ =gSaveGame
	ldr r1, _0808F06C @ =0x00000366
	adds r0, r0, r1
	ldrb r0, [r0]
	strb r0, [r6]
	adds r0, r6, #0
	bl sub_808F070
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808F058: .4byte sub_808F268
_0808F05C: .4byte sub_808F5DC
_0808F060: .4byte gBgScrollRegs
_0808F064: .4byte 0x03000018
_0808F068: .4byte gSaveGame
_0808F06C: .4byte 0x00000366

	thumb_func_start sub_808F070
sub_808F070: @ 0x0808F070
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r6, r0, #0
	movs r1, #0x8a
	lsls r1, r1, #1
	adds r0, r6, r1
	ldr r1, [r6, #0x48]
	str r1, [r0]
	ldr r3, _0808F258 @ =gUnknown_080D7054
	ldrb r1, [r6]
	lsls r1, r1, #3
	adds r2, r3, #4
	adds r1, r1, r2
	ldr r2, [r1]
	lsls r2, r2, #5
	ldr r1, [r6, #0x48]
	adds r1, r1, r2
	str r1, [r6, #0x48]
	ldrb r1, [r6]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrh r1, [r1]
	movs r4, #0
	movs r2, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r6]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	adds r1, r6, #0
	adds r1, #0x44
	ldrh r1, [r1]
	lsrs r1, r1, #8
	strh r1, [r0, #0x10]
	adds r1, r6, #0
	adds r1, #0x46
	ldrh r1, [r1]
	lsrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r2, [r0, #0x14]
	strh r2, [r0, #0xe]
	strh r2, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	strb r4, [r0, #0x1f]
	str r2, [r0, #8]
	subs r1, #0x11
	str r1, [r0, #0x20]
	bl UpdateSpriteAnimation
	movs r4, #0
	ldr r7, _0808F25C @ =gUnknown_080D6F5C
	movs r5, #0
	adds r2, r6, #0
	adds r2, #0x14
	str r2, [sp]
	adds r0, r6, #0
	adds r0, #0x18
	str r0, [sp, #4]
_0808F0F4:
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #3
	adds r0, #0x4c
	adds r0, r6, r0
	ldr r1, [r6, #0x48]
	str r1, [r0]
	ldrb r1, [r6]
	lsls r1, r1, #2
	adds r1, r4, r1
	lsls r1, r1, #3
	adds r2, r7, #4
	adds r1, r1, r2
	ldr r2, [r1]
	lsls r2, r2, #5
	ldr r1, [r6, #0x48]
	adds r1, r1, r2
	str r1, [r6, #0x48]
	ldrb r1, [r6]
	lsls r1, r1, #2
	adds r1, r4, r1
	lsls r1, r1, #3
	adds r1, r1, r7
	ldrh r1, [r1]
	strh r1, [r0, #0xc]
	ldrb r1, [r6]
	lsls r1, r1, #2
	adds r1, r4, r1
	lsls r1, r1, #3
	adds r1, r1, r7
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	mov r8, r1
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	lsls r2, r4, #3
	adds r1, r6, #0
	adds r1, #0x14
	adds r1, r1, r2
	ldr r1, [r1]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	adds r1, r6, #0
	adds r1, #0x18
	adds r1, r1, r2
	ldr r1, [r1]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r1, #0x40
	strh r1, [r0, #0x14]
	strh r5, [r0, #0xe]
	strh r5, [r0, #0x16]
	movs r2, #0x10
	mov sl, r2
	mov r1, sl
	strb r1, [r0, #0x1c]
	movs r2, #0
	strb r2, [r0, #0x1f]
	str r5, [r0, #8]
	movs r1, #1
	rsbs r1, r1, #0
	mov sb, r1
	str r1, [r0, #0x20]
	bl UpdateSpriteAnimation
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #3
	bls _0808F0F4
	adds r0, r6, #0
	adds r0, #0xec
	ldr r1, [r6, #0x48]
	str r1, [r0]
	ldr r3, _0808F260 @ =gUnknown_080D7024
	ldrb r1, [r6]
	lsls r1, r1, #3
	adds r2, r3, #4
	adds r1, r1, r2
	ldr r2, [r1]
	lsls r2, r2, #5
	ldr r1, [r6, #0x48]
	adds r1, r1, r2
	str r1, [r6, #0x48]
	ldrb r1, [r6]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrh r1, [r1]
	movs r5, #0
	movs r4, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r6]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	ldrb r1, [r0, #0x1b]
	mov r2, r8
	orrs r1, r2
	strb r1, [r0, #0x1b]
	ldr r1, [r6, #0x34]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r6, #0x38]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	mov r1, sl
	strb r1, [r0, #0x1c]
	strb r5, [r0, #0x1f]
	str r4, [r0, #8]
	mov r2, sb
	str r2, [r0, #0x20]
	bl UpdateSpriteAnimation
	movs r1, #0x9e
	lsls r1, r1, #1
	adds r0, r6, r1
	ldr r1, [r6, #0x48]
	str r1, [r0]
	ldr r3, _0808F264 @ =gUnknown_080D701C
	ldr r2, [r3, #4]
	lsls r2, r2, #5
	ldr r1, [r6, #0x48]
	adds r1, r1, r2
	str r1, [r6, #0x48]
	ldrh r1, [r3]
	strh r1, [r0, #0xc]
	ldrb r1, [r3, #2]
	strb r1, [r0, #0x1a]
	ldrb r1, [r0, #0x1b]
	mov r2, r8
	orrs r1, r2
	strb r1, [r0, #0x1b]
	ldr r1, [r6, #8]
	movs r2, #0
	ldrsh r1, [r1, r2]
	lsls r1, r1, #3
	ldr r2, [sp]
	adds r1, r2, r1
	ldr r1, [r1]
	subs r1, #1
	strh r1, [r0, #0x10]
	ldr r3, [r6, #8]
	movs r2, #0
	ldrsh r1, [r3, r2]
	lsls r1, r1, #3
	ldr r2, [sp, #4]
	adds r1, r2, r1
	ldr r2, [r1]
	ldrh r1, [r3]
	lsls r1, r1, #4
	adds r2, r2, r1
	adds r2, #1
	strh r2, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	mov r1, sl
	strb r1, [r0, #0x1c]
	strb r5, [r0, #0x1f]
	str r4, [r0, #8]
	mov r2, sb
	str r2, [r0, #0x20]
	bl UpdateSpriteAnimation
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808F258: .4byte gUnknown_080D7054
_0808F25C: .4byte gUnknown_080D6F5C
_0808F260: .4byte gUnknown_080D7024
_0808F264: .4byte gUnknown_080D701C

	thumb_func_start sub_808F268
sub_808F268: @ 0x0808F268
	push {r4, r5, lr}
	ldr r5, _0808F2A0 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_808F4AC
	ldr r2, _0808F2A4 @ =gBgScrollRegs
	movs r0, #4
	ldrsh r1, [r2, r0]
	movs r0, #0xc8
	rsbs r0, r0, #0
	cmp r1, r0
	bgt _0808F2A8
	ldr r0, [r4, #0x3c]
	cmn r0, r1
	bgt _0808F2A8
	ldr r0, [r4, #4]
	movs r1, #0
	strb r1, [r0]
	ldr r0, [r5]
	bl TaskDestroy
	b _0808F3A4
	.align 2, 0
_0808F2A0: .4byte gCurTask
_0808F2A4: .4byte gBgScrollRegs
_0808F2A8:
	ldr r5, _0808F310 @ =gBgScrollRegs
	movs r1, #4
	ldrsh r0, [r5, r1]
	rsbs r0, r0, #0
	str r0, [r4, #0x3c]
	movs r3, #4
	ldrsh r1, [r5, r3]
	movs r0, #0x64
	rsbs r0, r0, #0
	cmp r1, r0
	blt _0808F2D6
	adds r0, r4, #0
	bl sub_808F3AC
	adds r0, r4, #0
	bl sub_808F564
	adds r0, r4, #0
	bl sub_808F598
	adds r0, r4, #0
	bl sub_808F528
_0808F2D6:
	ldr r0, _0808F314 @ =gBldRegs
	ldrh r0, [r0, #4]
	cmp r0, #0
	bne _0808F3A4
	movs r1, #4
	ldrsh r0, [r5, r1]
	cmp r0, #0
	bne _0808F3A4
	ldr r0, _0808F318 @ =gPressedKeys
	ldrh r1, [r0]
	movs r5, #1
	ands r5, r1
	cmp r5, #0
	bne _0808F324
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0808F340
	movs r0, #0x6b
	bl m4aSongNumStart
	ldr r0, [r4, #4]
	strb r5, [r0]
	ldr r0, _0808F31C @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808F320 @ =sub_808F434
	str r0, [r1, #8]
	b _0808F3A4
	.align 2, 0
_0808F310: .4byte gBgScrollRegs
_0808F314: .4byte gBldRegs
_0808F318: .4byte gPressedKeys
_0808F31C: .4byte gCurTask
_0808F320: .4byte sub_808F434
_0808F324:
	ldr r0, [r4, #8]
	movs r3, #0
	ldrsh r0, [r0, r3]
	cmp r0, #2
	bgt _0808F340
	ldr r0, _0808F338 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0808F33C @ =sub_808F5E0
	str r0, [r1, #8]
	b _0808F3A4
	.align 2, 0
_0808F338: .4byte gCurTask
_0808F33C: .4byte sub_808F5E0
_0808F340:
	ldr r0, _0808F37C @ =gBgScrollRegs
	movs r1, #4
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _0808F3A4
	ldr r5, _0808F380 @ =gRepeatedKeys
	ldrh r1, [r5]
	movs r0, #0xc0
	ands r0, r1
	cmp r0, #0
	beq _0808F3A4
	movs r0, #0x6c
	bl m4aSongNumStart
	ldrh r1, [r5]
	movs r0, #0x40
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	cmp r3, #0
	beq _0808F388
	ldr r1, [r4, #8]
	ldrh r2, [r1]
	movs r3, #0
	ldrsh r0, [r1, r3]
	cmp r0, #0
	bne _0808F384
	movs r0, #3
	b _0808F3A2
	.align 2, 0
_0808F37C: .4byte gBgScrollRegs
_0808F380: .4byte gRepeatedKeys
_0808F384:
	subs r0, r2, #1
	b _0808F3A2
_0808F388:
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _0808F3A4
	ldr r1, [r4, #8]
	ldrh r2, [r1]
	movs r4, #0
	ldrsh r0, [r1, r4]
	cmp r0, #3
	bne _0808F3A0
	strh r3, [r1]
	b _0808F3A4
_0808F3A0:
	adds r0, r2, #1
_0808F3A2:
	strh r0, [r1]
_0808F3A4:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808F3AC
sub_808F3AC: @ 0x0808F3AC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	movs r5, #0
	ldr r7, _0808F40C @ =gUnknown_080D6F5C
	movs r0, #0
	mov r8, r0
_0808F3BC:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	adds r0, #0x4c
	adds r4, r6, r0
	ldrb r0, [r6]
	lsls r0, r0, #2
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r7
	ldrh r0, [r0]
	strh r0, [r4, #0xc]
	ldrb r0, [r6]
	lsls r0, r0, #2
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r7
	ldrb r0, [r0, #2]
	strb r0, [r4, #0x1a]
	lsls r1, r5, #3
	adds r0, r6, #0
	adds r0, #0x14
	adds r0, r0, r1
	ldr r0, [r0]
	strh r0, [r4, #0x10]
	adds r0, r6, #0
	adds r0, #0x18
	adds r0, r0, r1
	ldr r0, [r0]
	lsls r1, r5, #4
	adds r0, r0, r1
	strh r0, [r4, #0x12]
	ldr r0, [r6, #8]
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r5, r0
	beq _0808F410
	movs r0, #1
	b _0808F412
	.align 2, 0
_0808F40C: .4byte gUnknown_080D6F5C
_0808F410:
	mov r0, r8
_0808F412:
	strb r0, [r4, #0x1f]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #3
	bls _0808F3BC
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_808F434
sub_808F434: @ 0x0808F434
	push {r4, r5, lr}
	ldr r5, _0808F46C @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_808F4AC
	ldr r2, _0808F470 @ =gBgScrollRegs
	movs r0, #4
	ldrsh r1, [r2, r0]
	movs r0, #0xc8
	rsbs r0, r0, #0
	cmp r1, r0
	bgt _0808F474
	ldr r0, [r4, #0x3c]
	cmn r0, r1
	bgt _0808F474
	ldr r0, [r4, #4]
	movs r1, #0
	strb r1, [r0]
	ldr r0, [r5]
	bl TaskDestroy
	b _0808F4A2
	.align 2, 0
_0808F46C: .4byte gCurTask
_0808F470: .4byte gBgScrollRegs
_0808F474:
	ldr r1, _0808F4A8 @ =gBgScrollRegs
	movs r2, #4
	ldrsh r0, [r1, r2]
	rsbs r0, r0, #0
	str r0, [r4, #0x3c]
	movs r0, #4
	ldrsh r1, [r1, r0]
	movs r0, #0x64
	rsbs r0, r0, #0
	cmp r1, r0
	blt _0808F4A2
	adds r0, r4, #0
	bl sub_808F3AC
	adds r0, r4, #0
	bl sub_808F564
	adds r0, r4, #0
	bl sub_808F598
	adds r0, r4, #0
	bl sub_808F528
_0808F4A2:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808F4A8: .4byte gBgScrollRegs

	thumb_func_start sub_808F4AC
sub_808F4AC: @ 0x0808F4AC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r3, r0, #0
	movs r2, #0
	ldr r6, _0808F524 @ =gBgScrollRegs
	movs r0, #0x14
	adds r0, r0, r3
	mov ip, r0
	movs r7, #4
	ldrsh r1, [r6, r7]
	movs r0, #0x28
	subs r0, r0, r1
	mov r8, r0
	movs r0, #6
	ldrsh r1, [r6, r0]
	movs r0, #0x32
	subs r5, r0, r1
	adds r4, r3, #0
	adds r4, #0x18
_0808F4D4:
	lsls r1, r2, #3
	mov r7, ip
	adds r0, r7, r1
	mov r7, r8
	str r7, [r0]
	adds r1, r4, r1
	str r5, [r1]
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #3
	bls _0808F4D4
	movs r0, #4
	ldrsh r1, [r6, r0]
	movs r0, #0x78
	subs r0, r0, r1
	str r0, [r3, #0x34]
	movs r7, #6
	ldrsh r1, [r6, r7]
	movs r0, #0x87
	subs r0, r0, r1
	str r0, [r3, #0x38]
	ldrh r1, [r6, #4]
	movs r0, #0x78
	subs r0, r0, r1
	adds r1, r3, #0
	adds r1, #0x44
	strh r0, [r1]
	ldrh r1, [r6, #6]
	movs r0, #0x1e
	subs r0, r0, r1
	adds r1, r3, #0
	adds r1, #0x46
	strh r0, [r1]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808F524: .4byte gBgScrollRegs

	thumb_func_start sub_808F528
sub_808F528: @ 0x0808F528
	push {lr}
	adds r3, r0, #0
	movs r1, #0x8a
	lsls r1, r1, #1
	adds r0, r3, r1
	ldr r2, _0808F560 @ =gUnknown_080D7054
	ldrb r1, [r3]
	lsls r1, r1, #3
	adds r1, r1, r2
	ldrh r1, [r1]
	strh r1, [r0, #0xc]
	ldrb r1, [r3]
	lsls r1, r1, #3
	adds r1, r1, r2
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	adds r1, r3, #0
	adds r1, #0x44
	ldrh r1, [r1]
	strh r1, [r0, #0x10]
	adds r1, r3, #0
	adds r1, #0x46
	ldrh r1, [r1]
	strh r1, [r0, #0x12]
	bl DisplaySprite
	pop {r0}
	bx r0
	.align 2, 0
_0808F560: .4byte gUnknown_080D7054

	thumb_func_start sub_808F564
sub_808F564: @ 0x0808F564
	push {lr}
	adds r2, r0, #0
	adds r2, #0xec
	ldr r3, _0808F594 @ =gUnknown_080D7024
	ldrb r1, [r0]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrh r1, [r1]
	strh r1, [r2, #0xc]
	ldrb r1, [r0]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrb r1, [r1, #2]
	strb r1, [r2, #0x1a]
	ldr r1, [r0, #0x34]
	strh r1, [r2, #0x10]
	ldr r0, [r0, #0x38]
	strh r0, [r2, #0x12]
	adds r0, r2, #0
	bl DisplaySprite
	pop {r0}
	bx r0
	.align 2, 0
_0808F594: .4byte gUnknown_080D7024

	thumb_func_start sub_808F598
sub_808F598: @ 0x0808F598
	push {lr}
	mov ip, r0
	movs r0, #0x9e
	lsls r0, r0, #1
	add r0, ip
	mov r2, ip
	ldr r1, [r2, #8]
	movs r3, #0
	ldrsh r2, [r1, r3]
	lsls r2, r2, #3
	mov r1, ip
	adds r1, #0x14
	adds r1, r1, r2
	ldr r1, [r1]
	subs r1, #1
	strh r1, [r0, #0x10]
	mov r1, ip
	ldr r3, [r1, #8]
	movs r1, #0
	ldrsh r2, [r3, r1]
	lsls r2, r2, #3
	mov r1, ip
	adds r1, #0x18
	adds r1, r1, r2
	ldr r2, [r1]
	ldrh r1, [r3]
	lsls r1, r1, #4
	adds r2, r2, r1
	adds r2, #1
	strh r2, [r0, #0x12]
	bl DisplaySprite
	pop {r0}
	bx r0

	thumb_func_start sub_808F5DC
sub_808F5DC: @ 0x0808F5DC
	bx lr
	.align 2, 0

	thumb_func_start sub_808F5E0
sub_808F5E0: @ 0x0808F5E0
	push {r4, r5, lr}
	ldr r5, _0808F630 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_808F4AC
	adds r0, r4, #0
	bl sub_808F3AC
	adds r0, r4, #0
	bl sub_808F528
	adds r0, r4, #0
	bl sub_808F564
	adds r0, r4, #0
	bl sub_808F598
	ldr r2, _0808F634 @ =gBgScrollRegs
	movs r0, #4
	ldrsh r1, [r2, r0]
	movs r0, #0xc8
	rsbs r0, r0, #0
	cmp r1, r0
	bgt _0808F638
	ldr r0, [r4, #0x3c]
	cmn r0, r1
	bgt _0808F638
	ldr r0, [r4, #4]
	movs r1, #0
	strb r1, [r0]
	ldr r0, [r5]
	bl TaskDestroy
	b _0808F652
	.align 2, 0
_0808F630: .4byte gCurTask
_0808F634: .4byte gBgScrollRegs
_0808F638:
	ldr r0, _0808F658 @ =gBgScrollRegs
	movs r1, #4
	ldrsh r0, [r0, r1]
	rsbs r0, r0, #0
	str r0, [r4, #0x3c]
	ldr r0, _0808F65C @ =gBldRegs
	ldrh r0, [r0, #4]
	cmp r0, #0xe
	bls _0808F652
	ldr r0, _0808F660 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
_0808F652:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808F658: .4byte gBgScrollRegs
_0808F65C: .4byte gBldRegs
_0808F660: .4byte gCurTask

	thumb_func_start OptionsSlideInit_Difficulty
OptionsSlideInit_Difficulty: @ 0x0808F664
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r4, r0, #0
	mov sl, r1
	adds r5, r3, #0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	ldr r0, _0808F730 @ =sub_808F904
	movs r1, #0x82
	lsls r1, r1, #1
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r3, _0808F734 @ =sub_808FBB0
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r3, r1, r0
	strh r4, [r3, #8]
	str r5, [r3, #4]
	movs r4, #0
	adds r0, #0xc
	adds r0, r0, r1
	mov ip, r0
	ldr r5, _0808F738 @ =gBgScrollRegs
	movs r2, #0x37
	mov sb, r2
	adds r6, r5, #0
	ldr r7, _0808F73C @ =0x03000010
	adds r7, r1, r7
	str r7, [sp, #4]
	movs r0, #0x46
	mov r8, r0
_0808F6B4:
	lsls r1, r4, #3
	mov r7, ip
	adds r2, r7, r1
	movs r7, #4
	ldrsh r0, [r5, r7]
	mov r7, sb
	subs r0, r7, r0
	str r0, [r2]
	ldr r0, [sp, #4]
	adds r1, r0, r1
	movs r2, #6
	ldrsh r0, [r5, r2]
	mov r7, r8
	subs r0, r7, r0
	str r0, [r1]
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #1
	bls _0808F6B4
	movs r1, #4
	ldrsh r0, [r6, r1]
	rsbs r0, r0, #0
	str r0, [r3, #0x1c]
	movs r2, #6
	ldrsh r0, [r6, r2]
	rsbs r0, r0, #0
	str r0, [r3, #0x20]
	ldrh r0, [r6, #4]
	rsbs r0, r0, #0
	adds r0, #0x64
	strh r0, [r3, #0x34]
	ldrh r0, [r6, #6]
	rsbs r0, r0, #0
	strh r0, [r3, #0x36]
	movs r7, #4
	ldrsh r0, [r6, r7]
	rsbs r0, r0, #0
	str r0, [r3, #0x24]
	movs r1, #6
	ldrsh r0, [r6, r1]
	rsbs r0, r0, #0
	str r0, [r3, #0x28]
	mov r2, sl
	str r2, [r3, #0x38]
	ldr r0, _0808F740 @ =gSaveGame
	ldr r7, _0808F744 @ =0x00000366
	adds r0, r0, r7
	ldrb r0, [r0]
	strb r0, [r3]
	adds r0, r3, #0
	bl sub_808F748
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808F730: .4byte sub_808F904
_0808F734: .4byte sub_808FBB0
_0808F738: .4byte gBgScrollRegs
_0808F73C: .4byte 0x03000010
_0808F740: .4byte gSaveGame
_0808F744: .4byte 0x00000366

	thumb_func_start sub_808F748
sub_808F748: @ 0x0808F748
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r6, r0, #0
	adds r0, #0xdc
	ldr r1, [r6, #0x38]
	str r1, [r0]
	ldr r3, _0808F8F4 @ =gUnknown_080D7084
	ldrb r1, [r6]
	lsls r1, r1, #3
	adds r2, r3, #4
	adds r1, r1, r2
	ldr r2, [r1]
	lsls r2, r2, #5
	ldr r1, [r6, #0x38]
	adds r1, r1, r2
	str r1, [r6, #0x38]
	ldrb r1, [r6]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrh r1, [r1]
	movs r4, #0
	movs r2, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r6]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldrh r1, [r6, #0x34]
	lsrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldrh r1, [r6, #0x36]
	lsrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r2, [r0, #0x14]
	strh r2, [r0, #0xe]
	strh r2, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	strb r4, [r0, #0x1f]
	str r2, [r0, #8]
	subs r1, #0x11
	str r1, [r0, #0x20]
	bl UpdateSpriteAnimation
	movs r4, #0
	ldr r7, _0808F8F8 @ =gUnknown_080D6AE8
	movs r5, #0
_0808F7B2:
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #3
	adds r0, #0x3c
	adds r0, r6, r0
	ldr r1, [r6, #0x38]
	str r1, [r0]
	ldrb r1, [r6]
	lsls r1, r1, #1
	adds r1, r4, r1
	lsls r1, r1, #3
	adds r2, r7, #4
	adds r1, r1, r2
	ldr r2, [r1]
	lsls r2, r2, #5
	ldr r1, [r6, #0x38]
	adds r1, r1, r2
	str r1, [r6, #0x38]
	ldrb r1, [r6]
	lsls r1, r1, #1
	adds r1, r4, r1
	lsls r1, r1, #3
	adds r1, r1, r7
	ldrh r1, [r1]
	strh r1, [r0, #0xc]
	ldrb r1, [r6]
	lsls r1, r1, #1
	adds r1, r4, r1
	lsls r1, r1, #3
	adds r1, r1, r7
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	mov r8, r1
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	lsls r2, r4, #3
	adds r1, r6, #0
	adds r1, #0xc
	adds r1, r1, r2
	ldr r1, [r1]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	adds r1, r6, #0
	adds r1, #0x10
	adds r1, r1, r2
	ldr r1, [r1]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r1, #0x40
	strh r1, [r0, #0x14]
	strh r5, [r0, #0xe]
	strh r5, [r0, #0x16]
	movs r2, #0x10
	mov sl, r2
	mov r1, sl
	strb r1, [r0, #0x1c]
	movs r2, #0
	strb r2, [r0, #0x1f]
	str r5, [r0, #8]
	movs r1, #1
	rsbs r1, r1, #0
	mov sb, r1
	str r1, [r0, #0x20]
	bl UpdateSpriteAnimation
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #1
	bls _0808F7B2
	adds r0, r6, #0
	adds r0, #0x8c
	ldr r1, [r6, #0x38]
	str r1, [r0]
	ldr r3, _0808F8FC @ =gUnknown_080D7024
	ldrb r1, [r6]
	lsls r1, r1, #3
	adds r2, r3, #4
	adds r1, r1, r2
	ldr r2, [r1]
	lsls r2, r2, #5
	ldr r1, [r6, #0x38]
	adds r1, r1, r2
	str r1, [r6, #0x38]
	ldrb r1, [r6]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrh r1, [r1]
	movs r5, #0
	movs r4, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r6]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	ldrb r1, [r0, #0x1b]
	mov r2, r8
	orrs r1, r2
	strb r1, [r0, #0x1b]
	ldr r1, [r6, #0x1c]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r6, #0x20]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	mov r1, sl
	strb r1, [r0, #0x1c]
	strb r5, [r0, #0x1f]
	str r4, [r0, #8]
	mov r2, sb
	str r2, [r0, #0x20]
	bl UpdateSpriteAnimation
	adds r0, r6, #0
	adds r0, #0xb4
	ldr r1, [r6, #0x38]
	str r1, [r0]
	ldr r3, _0808F900 @ =gUnknown_080D70B4
	ldr r2, [r3, #4]
	lsls r2, r2, #5
	ldr r1, [r6, #0x38]
	adds r1, r1, r2
	str r1, [r6, #0x38]
	ldrh r1, [r3]
	strh r1, [r0, #0xc]
	ldrb r1, [r3, #2]
	strb r1, [r0, #0x1a]
	ldrb r1, [r0, #0x1b]
	mov r2, r8
	orrs r1, r2
	strb r1, [r0, #0x1b]
	ldr r1, [r6, #0x2c]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r6, #0x30]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	mov r1, sl
	strb r1, [r0, #0x1c]
	strb r5, [r0, #0x1f]
	str r4, [r0, #8]
	mov r2, sb
	str r2, [r0, #0x20]
	bl UpdateSpriteAnimation
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808F8F4: .4byte gUnknown_080D7084
_0808F8F8: .4byte gUnknown_080D6AE8
_0808F8FC: .4byte gUnknown_080D7024
_0808F900: .4byte gUnknown_080D70B4

	thumb_func_start sub_808F904
sub_808F904: @ 0x0808F904
	push {r4, lr}
	ldr r0, _0808F954 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_808FA9C
	adds r0, r4, #0
	bl sub_808FA18
	adds r0, r4, #0
	bl sub_808FB10
	adds r0, r4, #0
	bl sub_808FB44
	adds r0, r4, #0
	bl sub_808FB78
	ldr r0, _0808F958 @ =gBgScrollRegs
	movs r1, #4
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _0808F984
	ldr r0, _0808F95C @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0808F984
	movs r2, #8
	ldrsh r1, [r4, r2]
	cmp r1, #0
	beq _0808F960
	cmp r1, #1
	beq _0808F970
	b _0808FA12
	.align 2, 0
_0808F954: .4byte gCurTask
_0808F958: .4byte gBgScrollRegs
_0808F95C: .4byte gPressedKeys
_0808F960:
	ldr r0, _0808F96C @ =gSaveGame
	movs r3, #0xd9
	lsls r3, r3, #2
	adds r0, r0, r3
	strb r1, [r0]
	b _0808FA12
	.align 2, 0
_0808F96C: .4byte gSaveGame
_0808F970:
	ldr r0, _0808F980 @ =gSaveGame
	movs r1, #0xd9
	lsls r1, r1, #2
	adds r0, r0, r1
	movs r1, #1
	strb r1, [r0]
	b _0808FA12
	.align 2, 0
_0808F980: .4byte gSaveGame
_0808F984:
	ldr r0, _0808F9B0 @ =gBgScrollRegs
	movs r3, #4
	ldrsh r2, [r0, r3]
	movs r1, #0xc8
	rsbs r1, r1, #0
	adds r3, r0, #0
	cmp r2, r1
	bgt _0808F9B8
	movs r0, #4
	ldrsh r1, [r3, r0]
	ldr r0, [r4, #0x24]
	cmn r0, r1
	bgt _0808F9B8
	ldr r1, [r4, #4]
	movs r0, #0
	strb r0, [r1]
	ldr r0, _0808F9B4 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
	b _0808FA12
	.align 2, 0
_0808F9B0: .4byte gBgScrollRegs
_0808F9B4: .4byte gCurTask
_0808F9B8:
	movs r1, #4
	ldrsh r0, [r3, r1]
	rsbs r0, r0, #0
	str r0, [r4, #0x24]
	movs r2, #4
	ldrsh r0, [r3, r2]
	cmp r0, #0
	bne _0808FA12
	ldr r0, _0808F9F0 @ =gRepeatedKeys
	ldrh r1, [r0]
	movs r0, #0x30
	ands r0, r1
	cmp r0, #0
	beq _0808FA12
	movs r0, #0x10
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0
	beq _0808F9F8
	ldrh r1, [r4, #8]
	movs r3, #8
	ldrsh r0, [r4, r3]
	cmp r0, #0
	bne _0808F9F4
	movs r0, #1
	b _0808FA10
	.align 2, 0
_0808F9F0: .4byte gRepeatedKeys
_0808F9F4:
	subs r0, r1, #1
	b _0808FA10
_0808F9F8:
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0808FA12
	ldrh r1, [r4, #8]
	movs r3, #8
	ldrsh r0, [r4, r3]
	cmp r0, #1
	bne _0808FA0E
	strh r2, [r4, #8]
	b _0808FA12
_0808FA0E:
	adds r0, r1, #1
_0808FA10:
	strh r0, [r4, #8]
_0808FA12:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_808FA18
sub_808FA18: @ 0x0808FA18
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	movs r5, #0
	ldr r7, _0808FA74 @ =gUnknown_080D6AE8
	movs r0, #0
	mov r8, r0
_0808FA28:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	adds r0, #0x3c
	adds r4, r6, r0
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r7
	ldrh r0, [r0]
	strh r0, [r4, #0xc]
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r7
	ldrb r0, [r0, #2]
	strb r0, [r4, #0x1a]
	lsls r2, r5, #3
	adds r0, r6, #0
	adds r0, #0xc
	adds r0, r0, r2
	ldr r0, [r0]
	lsls r1, r5, #6
	adds r0, r0, r1
	strh r0, [r4, #0x10]
	adds r0, r6, #0
	adds r0, #0x10
	adds r0, r0, r2
	ldr r0, [r0]
	strh r0, [r4, #0x12]
	movs r1, #8
	ldrsh r0, [r6, r1]
	cmp r5, r0
	beq _0808FA78
	movs r0, #1
	b _0808FA7A
	.align 2, 0
_0808FA74: .4byte gUnknown_080D6AE8
_0808FA78:
	mov r0, r8
_0808FA7A:
	strb r0, [r4, #0x1f]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #1
	bls _0808FA28
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_808FA9C
sub_808FA9C: @ 0x0808FA9C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r3, r0, #0
	movs r2, #0
	ldr r6, _0808FB0C @ =gBgScrollRegs
	movs r0, #0xc
	adds r0, r0, r3
	mov ip, r0
	movs r7, #4
	ldrsh r1, [r6, r7]
	movs r0, #0x37
	subs r0, r0, r1
	mov r8, r0
	movs r0, #6
	ldrsh r1, [r6, r0]
	movs r0, #0x46
	subs r5, r0, r1
	adds r4, r3, #0
	adds r4, #0x10
_0808FAC4:
	lsls r1, r2, #3
	mov r7, ip
	adds r0, r7, r1
	mov r7, r8
	str r7, [r0]
	adds r1, r4, r1
	str r5, [r1]
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #1
	bls _0808FAC4
	movs r0, #4
	ldrsh r1, [r6, r0]
	movs r0, #0x78
	subs r0, r0, r1
	str r0, [r3, #0x1c]
	movs r7, #6
	ldrsh r1, [r6, r7]
	movs r0, #0x87
	subs r0, r0, r1
	str r0, [r3, #0x20]
	ldrh r1, [r6, #4]
	movs r0, #0x78
	subs r0, r0, r1
	strh r0, [r3, #0x34]
	ldrh r1, [r6, #6]
	movs r0, #0x1e
	subs r0, r0, r1
	strh r0, [r3, #0x36]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808FB0C: .4byte gBgScrollRegs

	thumb_func_start sub_808FB10
sub_808FB10: @ 0x0808FB10
	push {lr}
	adds r2, r0, #0
	adds r2, #0xdc
	ldr r3, _0808FB40 @ =gUnknown_080D7084
	ldrb r1, [r0]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrh r1, [r1]
	strh r1, [r2, #0xc]
	ldrb r1, [r0]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrb r1, [r1, #2]
	strb r1, [r2, #0x1a]
	ldrh r1, [r0, #0x34]
	strh r1, [r2, #0x10]
	ldrh r0, [r0, #0x36]
	strh r0, [r2, #0x12]
	adds r0, r2, #0
	bl DisplaySprite
	pop {r0}
	bx r0
	.align 2, 0
_0808FB40: .4byte gUnknown_080D7084

	thumb_func_start sub_808FB44
sub_808FB44: @ 0x0808FB44
	push {lr}
	adds r2, r0, #0
	adds r2, #0x8c
	ldr r3, _0808FB74 @ =gUnknown_080D7024
	ldrb r1, [r0]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrh r1, [r1]
	strh r1, [r2, #0xc]
	ldrb r1, [r0]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrb r1, [r1, #2]
	strb r1, [r2, #0x1a]
	ldr r1, [r0, #0x1c]
	strh r1, [r2, #0x10]
	ldr r0, [r0, #0x20]
	strh r0, [r2, #0x12]
	adds r0, r2, #0
	bl DisplaySprite
	pop {r0}
	bx r0
	.align 2, 0
_0808FB74: .4byte gUnknown_080D7024

	thumb_func_start sub_808FB78
sub_808FB78: @ 0x0808FB78
	push {lr}
	adds r3, r0, #0
	adds r0, #0xb4
	movs r1, #8
	ldrsh r2, [r3, r1]
	lsls r2, r2, #3
	adds r1, r3, #0
	adds r1, #0xc
	adds r1, r1, r2
	ldr r2, [r1]
	ldrh r1, [r3, #8]
	lsls r1, r1, #6
	adds r2, r2, r1
	subs r2, #3
	strh r2, [r0, #0x10]
	movs r1, #8
	ldrsh r2, [r3, r1]
	lsls r2, r2, #3
	adds r1, r3, #0
	adds r1, #0x10
	adds r1, r1, r2
	ldr r1, [r1]
	strh r1, [r0, #0x12]
	bl DisplaySprite
	pop {r0}
	bx r0
	.align 2, 0
    
	thumb_func_start sub_808FBB0
sub_808FBB0: @ 0x0808FBB0
	bx lr
	.align 2, 0

	thumb_func_start OptionsSlideInit_Language
OptionsSlideInit_Language: @ 0x0808FBB4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	str r1, [sp, #4]
	mov r8, r2
	adds r6, r3, #0
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	ldr r0, _0808FCC8 @ =sub_808FFEC
	movs r1, #0x93
	lsls r1, r1, #2
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r3, _0808FCCC @ =sub_8090310
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	adds r2, r0, #0
	mov r0, r8
	cmp r0, #0
	bne _0808FBEE
	ldr r1, _0808FCD0 @ =gBgScrollRegs
	strh r0, [r1, #4]
	ldr r0, _0808FCD4 @ =0x0000FFF6
	strh r0, [r1, #6]
_0808FBEE:
	ldrh r0, [r2, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r4, r0, r1
	str r6, [r4, #4]
	movs r1, #0
	strh r5, [r4, #0xa]
	mov r2, r8
	str r2, [r4, #0xc]
	strb r1, [r4, #8]
	movs r3, #0
	ldr r5, _0808FCD0 @ =gBgScrollRegs
	ldr r7, _0808FCD8 @ =0x03000014
	adds r7, r7, r0
	mov ip, r7
	adds r6, r5, #0
	movs r1, #0x28
	mov sl, r1
	ldr r2, _0808FCDC @ =0x03000018
	adds r2, r0, r2
	str r2, [sp, #8]
	movs r7, #0x26
	mov sb, r7
_0808FC1C:
	lsls r1, r3, #3
	mov r0, ip
	adds r2, r0, r1
	movs r7, #4
	ldrsh r0, [r6, r7]
	mov r7, sl
	subs r0, r7, r0
	str r0, [r2]
	ldr r0, [sp, #8]
	adds r1, r0, r1
	movs r2, #6
	ldrsh r0, [r6, r2]
	mov r7, sb
	subs r0, r7, r0
	str r0, [r1]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #5
	bls _0808FC1C
	movs r1, #4
	ldrsh r0, [r5, r1]
	rsbs r0, r0, #0
	str r0, [r4, #0x44]
	movs r2, #6
	ldrsh r0, [r5, r2]
	rsbs r0, r0, #0
	str r0, [r4, #0x48]
	ldrh r0, [r5, #4]
	rsbs r0, r0, #0
	adds r0, #0x64
	adds r1, r4, #0
	adds r1, #0x54
	strh r0, [r1]
	ldrh r0, [r5, #6]
	rsbs r0, r0, #0
	adds r1, #2
	strh r0, [r1]
	movs r7, #4
	ldrsh r0, [r5, r7]
	rsbs r0, r0, #0
	str r0, [r4, #0x4c]
	movs r1, #6
	ldrsh r0, [r5, r1]
	rsbs r0, r0, #0
	str r0, [r4, #0x50]
	ldr r2, [sp, #4]
	str r2, [r4, #0x60]
	ldr r7, _0808FCE0 @ =gSaveGame
	ldr r0, _0808FCE4 @ =0x00000366
	adds r1, r7, r0
	ldrb r0, [r1]
	strb r0, [r4]
	ldr r2, [r4, #0xc]
	ldrb r0, [r1]
	strh r0, [r2]
	ldrb r0, [r1]
	strh r0, [r4, #0xa]
	adds r0, r4, #0
	bl sub_808FDCC
	mov r1, r8
	cmp r1, #0
	bne _0808FCB6
	adds r0, r4, #0
	bl sub_808FCF4
	ldr r0, _0808FCE8 @ =gUnknown_080D6C1C
	ldr r1, _0808FCEC @ =gObjPalette
	movs r2, #0x80
	bl CpuFastSet
	ldr r2, _0808FCF0 @ =gFlags
	ldr r0, [r2]
	movs r1, #2
	orrs r0, r1
	str r0, [r2]
_0808FCB6:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808FCC8: .4byte sub_808FFEC
_0808FCCC: .4byte sub_8090310
_0808FCD0: .4byte gBgScrollRegs
_0808FCD4: .4byte 0x0000FFF6
_0808FCD8: .4byte 0x03000014
_0808FCDC: .4byte 0x03000018
_0808FCE0: .4byte gSaveGame
_0808FCE4: .4byte 0x00000366
_0808FCE8: .4byte gUnknown_080D6C1C
_0808FCEC: .4byte gObjPalette
_0808FCF0: .4byte gFlags

	thumb_func_start sub_808FCF4
sub_808FCF4: @ 0x0808FCF4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	ldr r1, _0808FD9C @ =gDispCnt
	ldr r2, _0808FDA0 @ =0x00001341
	adds r0, r2, #0
	strh r0, [r1]
	ldr r6, _0808FDA4 @ =gBgCntRegs
	movs r0, #0
	mov r8, r0
	movs r4, #0
	ldr r0, _0808FDA8 @ =0x00000603
	strh r0, [r6]
	ldr r5, _0808FDAC @ =gBgScrollRegs
	strh r4, [r5]
	strh r4, [r5, #2]
	movs r1, #0x83
	lsls r1, r1, #2
	adds r0, r7, r1
	movs r1, #0xc0
	lsls r1, r1, #0x13
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _0808FDB0 @ =0x06003000
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	ldr r1, _0808FDB4 @ =0x0000015D
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	movs r1, #0x20
	strh r1, [r0, #0x26]
	strh r1, [r0, #0x28]
	ldr r2, _0808FDB8 @ =0x00000236
	adds r1, r7, r2
	mov r2, r8
	strb r2, [r1]
	strh r4, [r0, #0x2e]
	bl DrawBackground
	ldr r0, _0808FDBC @ =0x00005E06
	strh r0, [r6, #2]
	strh r4, [r5, #4]
	ldr r0, _0808FDC0 @ =0x0000FFF6
	strh r0, [r5, #6]
	movs r1, #0xe6
	lsls r1, r1, #1
	adds r0, r7, r1
	ldr r1, _0808FDC4 @ =0x06004000
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _0808FDC8 @ =0x0600F000
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	movs r1, #0xaf
	lsls r1, r1, #1
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	movs r1, #0x1e
	strh r1, [r0, #0x26]
	movs r1, #0x14
	strh r1, [r0, #0x28]
	movs r2, #0xfb
	lsls r2, r2, #1
	adds r1, r7, r2
	mov r2, r8
	strb r2, [r1]
	movs r1, #1
	strh r1, [r0, #0x2e]
	bl DrawBackground
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808FD9C: .4byte gDispCnt
_0808FDA0: .4byte 0x00001341
_0808FDA4: .4byte gBgCntRegs
_0808FDA8: .4byte 0x00000603
_0808FDAC: .4byte gBgScrollRegs
_0808FDB0: .4byte 0x06003000
_0808FDB4: .4byte 0x0000015D
_0808FDB8: .4byte 0x00000236
_0808FDBC: .4byte 0x00005E06
_0808FDC0: .4byte 0x0000FFF6
_0808FDC4: .4byte 0x06004000
_0808FDC8: .4byte 0x0600F000

	thumb_func_start sub_808FDCC
sub_808FDCC: @ 0x0808FDCC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r7, r0, #0
	movs r1, #0xd2
	lsls r1, r1, #1
	adds r0, r7, r1
	ldr r1, [r7, #0x60]
	str r1, [r0]
	ldr r1, [r7, #0x60]
	movs r2, #0xc8
	lsls r2, r2, #3
	adds r1, r1, r2
	str r1, [r7, #0x60]
	ldr r3, _0808FEE0 @ =gUnknown_080D70FC
	ldrb r1, [r7]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrh r1, [r1]
	movs r4, #0
	movs r2, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r7]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	adds r1, r7, #0
	adds r1, #0x54
	ldrh r1, [r1]
	lsrs r1, r1, #8
	strh r1, [r0, #0x10]
	adds r1, r7, #0
	adds r1, #0x56
	ldrh r1, [r1]
	lsrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r2, [r0, #0x14]
	strh r2, [r0, #0xe]
	strh r2, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	strb r4, [r0, #0x1f]
	str r2, [r0, #8]
	subs r1, #0x11
	str r1, [r0, #0x20]
	bl UpdateSpriteAnimation
	movs r4, #0
	ldr r6, _0808FEE4 @ =gUnknown_080D70CC
	movs r3, #0
	mov r8, r3
	movs r5, #0
	movs r0, #0x14
	adds r0, r0, r7
	mov sb, r0
	movs r1, #0x18
	adds r1, r1, r7
	mov sl, r1
_0808FE4A:
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #3
	adds r0, #0x64
	adds r0, r7, r0
	ldr r1, [r7, #0x60]
	str r1, [r0]
	lsls r3, r4, #3
	adds r1, r6, #4
	adds r1, r3, r1
	ldr r2, [r1]
	lsls r2, r2, #5
	ldr r1, [r7, #0x60]
	adds r1, r1, r2
	str r1, [r7, #0x60]
	adds r2, r3, r6
	ldrh r1, [r2]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	adds r1, r7, #0
	adds r1, #0x14
	adds r1, r1, r3
	ldr r1, [r1]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	adds r1, r7, #0
	adds r1, #0x18
	adds r1, r1, r3
	ldr r1, [r1]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r1, #0x40
	strh r1, [r0, #0x14]
	strh r5, [r0, #0xe]
	strh r5, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	mov r2, r8
	strb r2, [r0, #0x1f]
	str r5, [r0, #8]
	subs r1, #0x11
	str r1, [r0, #0x20]
	bl UpdateSpriteAnimation
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #5
	bls _0808FE4A
	movs r3, #0xaa
	lsls r3, r3, #1
	adds r2, r7, r3
	ldrb r1, [r7]
	rsbs r0, r1, #0
	orrs r0, r1
	lsrs r3, r0, #0x1f
	ldr r0, [r7, #0x60]
	str r0, [r2]
	ldr r0, [r7, #0xc]
	cmp r0, #0
	bne _0808FEEC
	ldr r0, [r7, #0x60]
	movs r1, #0xa8
	lsls r1, r1, #3
	adds r0, r0, r1
	str r0, [r7, #0x60]
	ldr r1, _0808FEE8 @ =gUnknown_080D70BC
	lsls r0, r3, #3
	adds r0, r0, r1
	ldrh r1, [r0]
	strh r1, [r2, #0xc]
	b _0808FF08
	.align 2, 0
_0808FEE0: .4byte gUnknown_080D70FC
_0808FEE4: .4byte gUnknown_080D70CC
_0808FEE8: .4byte gUnknown_080D70BC
_0808FEEC:
	ldr r0, [r7, #0x60]
	movs r3, #0xb4
	lsls r3, r3, #3
	adds r0, r0, r3
	str r0, [r7, #0x60]
	ldr r1, _0808FFD4 @ =gUnknown_080D7024
	ldrb r0, [r7]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2, #0xc]
	ldrb r0, [r7]
	lsls r0, r0, #3
	adds r0, r0, r1
_0808FF08:
	ldrb r0, [r0, #2]
	strb r0, [r2, #0x1a]
	movs r0, #0xff
	strb r0, [r2, #0x1b]
	ldr r0, [r7, #0x44]
	asrs r0, r0, #8
	movs r1, #0
	mov r8, r1
	movs r4, #0
	strh r0, [r2, #0x10]
	ldr r0, [r7, #0x48]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	strh r4, [r2, #0x14]
	strh r4, [r2, #0xe]
	strh r4, [r2, #0x16]
	movs r6, #0x10
	strb r6, [r2, #0x1c]
	mov r3, r8
	strb r3, [r2, #0x1f]
	str r4, [r2, #8]
	movs r5, #1
	rsbs r5, r5, #0
	str r5, [r2, #0x20]
	adds r0, r2, #0
	bl UpdateSpriteAnimation
	movs r1, #0xbe
	lsls r1, r1, #1
	adds r0, r7, r1
	ldr r1, [r7, #0x60]
	str r1, [r0]
	ldr r3, _0808FFD8 @ =gUnknown_080D701C
	ldr r2, [r3, #4]
	lsls r2, r2, #5
	ldr r1, [r7, #0x60]
	adds r1, r1, r2
	str r1, [r7, #0x60]
	ldrh r1, [r3]
	strh r1, [r0, #0xc]
	ldrb r1, [r3, #2]
	strb r1, [r0, #0x1a]
	adds r1, r5, #0
	strb r1, [r0, #0x1b]
	movs r2, #0xa
	ldrsh r1, [r7, r2]
	lsls r1, r1, #3
	add r1, sb
	ldr r1, [r1]
	subs r1, #1
	strh r1, [r0, #0x10]
	movs r3, #0xa
	ldrsh r1, [r7, r3]
	lsls r1, r1, #3
	add r1, sl
	ldr r2, [r1]
	ldrh r1, [r7, #0xa]
	lsls r1, r1, #4
	adds r2, r2, r1
	adds r2, #1
	strh r2, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	strb r6, [r0, #0x1c]
	mov r1, r8
	strb r1, [r0, #0x1f]
	str r4, [r0, #8]
	str r5, [r0, #0x20]
	bl UpdateSpriteAnimation
	ldr r2, _0808FFDC @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r2, _0808FFE0 @ =gWinRegs
	movs r0, #0xf0
	strh r0, [r2]
	movs r0, #0xa0
	strh r0, [r2, #4]
	ldrh r0, [r2, #8]
	movs r1, #0x3f
	orrs r0, r1
	strh r0, [r2, #8]
	ldrh r0, [r2, #0xa]
	movs r1, #0x1f
	orrs r0, r1
	strh r0, [r2, #0xa]
	ldr r1, _0808FFE4 @ =gBldRegs
	ldr r0, _0808FFE8 @ =0x00003FFF
	strh r0, [r1]
	strh r4, [r1, #4]
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808FFD4: .4byte gUnknown_080D7024
_0808FFD8: .4byte gUnknown_080D701C
_0808FFDC: .4byte gDispCnt
_0808FFE0: .4byte gWinRegs
_0808FFE4: .4byte gBldRegs
_0808FFE8: .4byte 0x00003FFF

	thumb_func_start sub_808FFEC
sub_808FFEC: @ 0x0808FFEC
	push {r4, r5, r6, lr}
	ldr r6, _08090044 @ =gCurTask
	ldr r0, [r6]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_8090314
	ldr r0, _08090048 @ =gBgScrollRegs
	movs r1, #4
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _08090058
	ldr r0, _0809004C @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #9
	ands r0, r1
	cmp r0, #0
	beq _08090058
	movs r0, #0x6a
	bl m4aSongNumStart
	ldr r5, [r4, #0xc]
	cmp r5, #0
	bne _08090058
	ldr r0, _08090050 @ =gSaveGame
	ldrh r1, [r4, #0xa]
	ldr r2, _08090054 @ =0x00000366
	adds r0, r0, r2
	strb r1, [r0]
	movs r0, #0
	bl sub_8091D14
	ldr r0, [r6]
	bl TaskDestroy
	movs r0, #1
	strb r0, [r4, #8]
	ldr r0, [r4, #4]
	strb r5, [r0]
	b _0809013C
	.align 2, 0
_08090044: .4byte gCurTask
_08090048: .4byte gBgScrollRegs
_0809004C: .4byte gPressedKeys
_08090050: .4byte gSaveGame
_08090054: .4byte 0x00000366
_08090058:
	ldr r0, _08090084 @ =gBgScrollRegs
	movs r3, #4
	ldrsh r2, [r0, r3]
	movs r1, #0xc8
	rsbs r1, r1, #0
	adds r3, r0, #0
	cmp r2, r1
	bgt _0809008C
	movs r0, #4
	ldrsh r1, [r3, r0]
	ldr r0, [r4, #0x4c]
	cmn r0, r1
	bgt _0809008C
	ldr r1, [r4, #4]
	movs r0, #0
	strb r0, [r1]
	ldr r0, _08090088 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
	b _0809013C
	.align 2, 0
_08090084: .4byte gBgScrollRegs
_08090088: .4byte gCurTask
_0809008C:
	movs r1, #4
	ldrsh r0, [r3, r1]
	rsbs r0, r0, #0
	str r0, [r4, #0x4c]
	movs r2, #4
	ldrsh r0, [r3, r2]
	cmp r0, #0
	bne _08090100
	ldr r0, [r4, #4]
	ldrb r0, [r0]
	cmp r0, #0
	beq _08090100
	ldr r5, _080900D4 @ =gRepeatedKeys
	ldrh r1, [r5]
	movs r0, #0xc0
	ands r0, r1
	cmp r0, #0
	beq _08090100
	movs r0, #0x6c
	bl m4aSongNumStart
	ldrh r1, [r5]
	movs r0, #0x40
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0
	beq _080900DC
	ldrh r1, [r4, #0xa]
	movs r3, #0xa
	ldrsh r0, [r4, r3]
	cmp r0, #0
	bne _080900D8
	movs r0, #5
	b _080900F4
	.align 2, 0
_080900D4: .4byte gRepeatedKeys
_080900D8:
	subs r0, r1, #1
	b _080900F4
_080900DC:
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _080900F6
	ldrh r1, [r4, #0xa]
	movs r3, #0xa
	ldrsh r0, [r4, r3]
	cmp r0, #5
	bne _080900F2
	strh r2, [r4, #0xa]
	b _080900F6
_080900F2:
	adds r0, r1, #1
_080900F4:
	strh r0, [r4, #0xa]
_080900F6:
	ldr r1, [r4, #0xc]
	cmp r1, #0
	beq _08090106
	ldrh r0, [r4, #0xa]
	strh r0, [r1]
_08090100:
	ldr r0, [r4, #0xc]
	cmp r0, #0
	bne _08090124
_08090106:
	ldr r1, [r4, #0x58]
	movs r0, #0xc0
	lsls r0, r0, #1
	adds r1, r1, r0
	str r1, [r4, #0x58]
	ldr r0, [r4, #0x5c]
	ldr r2, _08090144 @ =0xFFFFFE80
	adds r0, r0, r2
	str r0, [r4, #0x5c]
	ldr r2, _08090148 @ =gBgScrollRegs
	asrs r1, r1, #8
	strh r1, [r2]
	ldr r0, [r4, #0x5c]
	asrs r0, r0, #8
	strh r0, [r2, #2]
_08090124:
	adds r0, r4, #0
	bl sub_809014C
	adds r0, r4, #0
	bl sub_8090244
	adds r0, r4, #0
	bl sub_80901D4
	adds r0, r4, #0
	bl sub_8090290
_0809013C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08090144: .4byte 0xFFFFFE80
_08090148: .4byte gBgScrollRegs

	thumb_func_start sub_809014C
sub_809014C: @ 0x0809014C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r6, r0, #0
	ldr r0, [r6, #0xc]
	cmp r0, #0
	bne _08090162
	ldrb r7, [r6, #0xa]
	b _08090164
_08090162:
	ldrb r7, [r0]
_08090164:
	movs r5, #0
	movs r0, #0x14
	adds r0, r0, r6
	mov sb, r0
	movs r1, #0x18
	adds r1, r1, r6
	mov r8, r1
	movs r0, #0
	mov sl, r0
_08090176:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	adds r0, #0x64
	adds r4, r6, r0
	ldr r1, _080901A8 @ =gUnknown_080D70CC
	lsls r2, r5, #3
	adds r1, r2, r1
	ldrh r0, [r1]
	strh r0, [r4, #0xc]
	ldrb r0, [r1, #2]
	strb r0, [r4, #0x1a]
	mov r1, sb
	adds r0, r1, r2
	ldr r0, [r0]
	strh r0, [r4, #0x10]
	add r2, r8
	ldr r0, [r2]
	lsls r1, r5, #4
	adds r0, r0, r1
	strh r0, [r4, #0x12]
	cmp r5, r7
	beq _080901AC
	movs r0, #1
	b _080901AE
	.align 2, 0
_080901A8: .4byte gUnknown_080D70CC
_080901AC:
	mov r0, sl
_080901AE:
	strb r0, [r4, #0x1f]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #5
	bls _08090176
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80901D4
sub_80901D4: @ 0x080901D4
	push {r4, r5, lr}
	adds r3, r0, #0
	ldr r0, [r3, #0xc]
	cmp r0, #0
	bne _080901E2
	ldrb r1, [r3, #0xa]
	b _080901E4
_080901E2:
	ldrb r1, [r0]
_080901E4:
	rsbs r0, r1, #0
	orrs r0, r1
	lsrs r0, r0, #0x1f
	movs r1, #0xaa
	lsls r1, r1, #1
	adds r4, r3, r1
	ldr r2, [r3, #0xc]
	cmp r2, #0
	bne _08090208
	ldr r1, _08090204 @ =gUnknown_080D70BC
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r1, [r0]
	strh r1, [r4, #0xc]
	b _08090220
	.align 2, 0
_08090204: .4byte gUnknown_080D70BC
_08090208:
	ldr r1, _08090240 @ =gUnknown_080D7024
	movs r5, #0
	ldrsh r0, [r2, r5]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r4, #0xc]
	ldr r0, [r3, #0xc]
	movs r2, #0
	ldrsh r0, [r0, r2]
	lsls r0, r0, #3
	adds r0, r0, r1
_08090220:
	ldrb r0, [r0, #2]
	strb r0, [r4, #0x1a]
	ldr r0, [r3, #0x44]
	strh r0, [r4, #0x10]
	ldr r0, [r3, #0x48]
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08090240: .4byte gUnknown_080D7024

	thumb_func_start sub_8090244
sub_8090244: @ 0x08090244
	push {r4, lr}
	adds r2, r0, #0
	ldr r0, [r2, #0xc]
	cmp r0, #0
	bne _08090252
	ldrb r0, [r2, #0xa]
	b _08090254
_08090252:
	ldrb r0, [r0]
_08090254:
	movs r1, #0xd2
	lsls r1, r1, #1
	adds r4, r2, r1
	ldr r1, _0809028C @ =gUnknown_080D70FC
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r1, [r0]
	strh r1, [r4, #0xc]
	ldrb r0, [r0, #2]
	strb r0, [r4, #0x1a]
	adds r0, r2, #0
	adds r0, #0x54
	ldrh r0, [r0]
	strh r0, [r4, #0x10]
	adds r0, r2, #0
	adds r0, #0x56
	ldrh r0, [r0]
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809028C: .4byte gUnknown_080D70FC

	thumb_func_start sub_8090290
sub_8090290: @ 0x08090290
	push {r4, lr}
	adds r3, r0, #0
	ldr r0, [r3, #0xc]
	cmp r0, #0
	beq _080902D4
	movs r1, #0xbe
	lsls r1, r1, #1
	adds r4, r3, r1
	movs r2, #0
	ldrsh r1, [r0, r2]
	lsls r1, r1, #3
	adds r0, r3, #0
	adds r0, #0x14
	adds r0, r0, r1
	ldr r0, [r0]
	subs r0, #1
	strh r0, [r4, #0x10]
	ldr r2, [r3, #0xc]
	movs r0, #0
	ldrsh r1, [r2, r0]
	lsls r1, r1, #3
	adds r0, r3, #0
	adds r0, #0x18
	adds r0, r0, r1
	ldr r1, [r0]
	ldrh r0, [r2]
	lsls r0, r0, #4
	adds r1, r1, r0
	adds r1, #1
	strh r1, [r4, #0x12]
	adds r0, r4, #0
	bl DisplaySprite
	b _0809030A
_080902D4:
	movs r1, #0xbe
	lsls r1, r1, #1
	adds r4, r3, r1
	movs r2, #0xa
	ldrsh r1, [r3, r2]
	lsls r1, r1, #3
	adds r0, r3, #0
	adds r0, #0x14
	adds r0, r0, r1
	ldr r0, [r0]
	subs r0, #1
	strh r0, [r4, #0x10]
	movs r0, #0xa
	ldrsh r1, [r3, r0]
	lsls r1, r1, #3
	adds r0, r3, #0
	adds r0, #0x18
	adds r0, r0, r1
	ldr r1, [r0]
	ldrh r0, [r3, #0xa]
	lsls r0, r0, #4
	adds r1, r1, r0
	adds r1, #1
	strh r1, [r4, #0x12]
	adds r0, r4, #0
	bl DisplaySprite
_0809030A:
	pop {r4}
	pop {r0}
	bx r0
    
	thumb_func_start sub_8090310
sub_8090310: @ 0x08090310
	bx lr
	.align 2, 0

	thumb_func_start sub_8090314
sub_8090314: @ 0x08090314
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r3, r0, #0
	movs r2, #0
	ldr r6, _0809038C @ =gBgScrollRegs
	movs r0, #0x14
	adds r0, r0, r3
	mov ip, r0
	movs r7, #4
	ldrsh r1, [r6, r7]
	movs r0, #0x28
	subs r0, r0, r1
	mov r8, r0
	movs r0, #6
	ldrsh r1, [r6, r0]
	movs r0, #0x26
	subs r5, r0, r1
	adds r4, r3, #0
	adds r4, #0x18
_0809033C:
	lsls r1, r2, #3
	mov r7, ip
	adds r0, r7, r1
	mov r7, r8
	str r7, [r0]
	adds r1, r4, r1
	str r5, [r1]
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #5
	bls _0809033C
	movs r0, #4
	ldrsh r1, [r6, r0]
	movs r0, #0x78
	subs r0, r0, r1
	str r0, [r3, #0x44]
	movs r7, #6
	ldrsh r1, [r6, r7]
	movs r0, #0x8c
	subs r0, r0, r1
	str r0, [r3, #0x48]
	ldrh r1, [r6, #4]
	movs r0, #0x78
	subs r0, r0, r1
	adds r1, r3, #0
	adds r1, #0x54
	strh r0, [r1]
	ldrh r1, [r6, #6]
	movs r0, #0x1a
	subs r0, r0, r1
	adds r1, r3, #0
	adds r1, #0x56
	strh r0, [r1]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809038C: .4byte gBgScrollRegs

	thumb_func_start OptionsSlideInit_DeleteSaveData
OptionsSlideInit_DeleteSaveData: @ 0x08090390
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r4, r0, #0
	mov sl, r1
	adds r6, r2, #0
	adds r5, r3, #0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	ldr r0, _08090480 @ =sub_80906C8
	movs r1, #0x9e
	lsls r1, r1, #1
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r3, _08090484 @ =sub_8090A18
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r3, r1, r0
	str r5, [r3, #4]
	movs r2, #0
	movs r0, #0
	strh r4, [r3, #8]
	str r6, [r3, #0xc]
	strb r2, [r3, #1]
	strh r0, [r3, #0x14]
	strh r0, [r3, #0x12]
	movs r4, #0
	ldr r0, _08090488 @ =0x03000018
	adds r0, r0, r1
	mov ip, r0
	ldr r5, _0809048C @ =gBgScrollRegs
	movs r2, #0x37
	mov sb, r2
	adds r6, r5, #0
	ldr r7, _08090490 @ =0x0300001C
	adds r7, r1, r7
	str r7, [sp, #4]
	movs r0, #0x46
	mov r8, r0
_080903EE:
	lsls r1, r4, #3
	mov r7, ip
	adds r2, r7, r1
	movs r7, #4
	ldrsh r0, [r5, r7]
	mov r7, sb
	subs r0, r7, r0
	str r0, [r2]
	ldr r0, [sp, #4]
	adds r1, r0, r1
	movs r2, #6
	ldrsh r0, [r5, r2]
	mov r7, r8
	subs r0, r7, r0
	str r0, [r1]
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #1
	bls _080903EE
	movs r1, #4
	ldrsh r0, [r6, r1]
	rsbs r0, r0, #0
	str r0, [r3, #0x28]
	movs r2, #6
	ldrsh r0, [r6, r2]
	rsbs r0, r0, #0
	str r0, [r3, #0x2c]
	ldrh r0, [r6, #4]
	rsbs r0, r0, #0
	adds r0, #0x64
	adds r1, r3, #0
	adds r1, #0x40
	strh r0, [r1]
	ldrh r0, [r6, #6]
	rsbs r0, r0, #0
	adds r1, #2
	strh r0, [r1]
	ldrh r0, [r6, #4]
	rsbs r0, r0, #0
	adds r0, #0x64
	adds r1, #2
	strh r0, [r1]
	ldrh r0, [r6, #6]
	rsbs r0, r0, #0
	adds r1, #2
	strh r0, [r1]
	movs r7, #4
	ldrsh r0, [r6, r7]
	rsbs r0, r0, #0
	str r0, [r3, #0x30]
	movs r1, #6
	ldrsh r0, [r6, r1]
	rsbs r0, r0, #0
	str r0, [r3, #0x34]
	mov r2, sl
	str r2, [r3, #0x48]
	ldr r0, _08090494 @ =gSaveGame
	ldr r7, _08090498 @ =0x00000366
	adds r0, r0, r7
	ldrb r0, [r0]
	strb r0, [r3]
	adds r0, r3, #0
	bl sub_809049C
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08090480: .4byte sub_80906C8
_08090484: .4byte sub_8090A18
_08090488: .4byte 0x03000018
_0809048C: .4byte gBgScrollRegs
_08090490: .4byte 0x0300001C
_08090494: .4byte gSaveGame
_08090498: .4byte 0x00000366

	thumb_func_start sub_809049C
sub_809049C: @ 0x0809049C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r7, r0, #0
	adds r0, #0xec
	ldr r1, [r7, #0x48]
	str r1, [r0]
	ldr r3, _080906B4 @ =gUnknown_080D7194
	ldrb r1, [r7]
	lsls r1, r1, #3
	adds r2, r3, #4
	adds r1, r1, r2
	ldr r2, [r1]
	lsls r2, r2, #5
	ldr r1, [r7, #0x48]
	adds r1, r1, r2
	str r1, [r7, #0x48]
	ldrb r1, [r7]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrh r1, [r1]
	movs r2, #0
	mov r8, r2
	movs r4, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r7]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	adds r1, r7, #0
	adds r1, #0x40
	ldrh r1, [r1]
	lsrs r1, r1, #8
	strh r1, [r0, #0x10]
	adds r1, r7, #0
	adds r1, #0x42
	ldrh r1, [r1]
	lsrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	movs r6, #0x10
	strb r6, [r0, #0x1c]
	mov r1, r8
	strb r1, [r0, #0x1f]
	str r4, [r0, #8]
	movs r5, #1
	rsbs r5, r5, #0
	str r5, [r0, #0x20]
	bl UpdateSpriteAnimation
	movs r2, #0x8a
	lsls r2, r2, #1
	adds r0, r7, r2
	ldr r1, [r7, #0x48]
	str r1, [r0]
	ldr r3, _080906B8 @ =gUnknown_080D71C4
	ldrb r1, [r7]
	lsls r1, r1, #3
	adds r2, r3, #4
	adds r1, r1, r2
	ldr r2, [r1]
	lsls r2, r2, #5
	ldr r1, [r7, #0x48]
	adds r1, r1, r2
	str r1, [r7, #0x48]
	ldrb r1, [r7]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrh r1, [r1]
	strh r1, [r0, #0xc]
	ldrb r1, [r7]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	adds r1, r5, #0
	strb r1, [r0, #0x1b]
	adds r1, r7, #0
	adds r1, #0x44
	ldrh r1, [r1]
	lsrs r1, r1, #8
	strh r1, [r0, #0x10]
	adds r1, r7, #0
	adds r1, #0x46
	ldrh r1, [r1]
	lsrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	strb r6, [r0, #0x1c]
	mov r1, r8
	strb r1, [r0, #0x1f]
	str r4, [r0, #8]
	str r5, [r0, #0x20]
	bl UpdateSpriteAnimation
	ldr r6, _080906BC @ =gUnknown_080D7134
	movs r5, #0
_08090570:
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #3
	adds r0, #0x4c
	adds r0, r7, r0
	ldr r1, [r7, #0x48]
	str r1, [r0]
	ldrb r1, [r7]
	lsls r1, r1, #1
	adds r1, r4, r1
	lsls r1, r1, #3
	adds r2, r6, #4
	adds r1, r1, r2
	ldr r2, [r1]
	lsls r2, r2, #5
	ldr r1, [r7, #0x48]
	adds r1, r1, r2
	str r1, [r7, #0x48]
	ldrb r1, [r7]
	lsls r1, r1, #1
	adds r1, r4, r1
	lsls r1, r1, #3
	adds r1, r1, r6
	ldrh r1, [r1]
	strh r1, [r0, #0xc]
	ldrb r1, [r7]
	lsls r1, r1, #1
	adds r1, r4, r1
	lsls r1, r1, #3
	adds r1, r1, r6
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	movs r2, #1
	rsbs r2, r2, #0
	mov r8, r2
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	lsls r2, r4, #3
	adds r1, r7, #0
	adds r1, #0x18
	adds r1, r1, r2
	ldr r1, [r1]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	adds r1, r7, #0
	adds r1, #0x1c
	adds r1, r1, r2
	ldr r1, [r1]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r1, #0x40
	strh r1, [r0, #0x14]
	strh r5, [r0, #0xe]
	strh r5, [r0, #0x16]
	movs r1, #0x10
	mov sl, r1
	mov r2, sl
	strb r2, [r0, #0x1c]
	movs r1, #0
	strb r1, [r0, #0x1f]
	str r5, [r0, #8]
	movs r2, #1
	rsbs r2, r2, #0
	mov sb, r2
	str r2, [r0, #0x20]
	bl UpdateSpriteAnimation
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #1
	bls _08090570
	adds r0, r7, #0
	adds r0, #0x9c
	ldr r1, [r7, #0x48]
	str r1, [r0]
	ldr r3, _080906C0 @ =gUnknown_080D7024
	ldrb r1, [r7]
	lsls r1, r1, #3
	adds r2, r3, #4
	adds r1, r1, r2
	ldr r2, [r1]
	lsls r2, r2, #5
	ldr r1, [r7, #0x48]
	adds r1, r1, r2
	str r1, [r7, #0x48]
	ldrb r1, [r7]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrh r1, [r1]
	movs r5, #0
	movs r4, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r7]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	ldrb r1, [r0, #0x1b]
	mov r2, r8
	orrs r1, r2
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x28]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x2c]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	mov r1, sl
	strb r1, [r0, #0x1c]
	strb r5, [r0, #0x1f]
	str r4, [r0, #8]
	mov r2, sb
	str r2, [r0, #0x20]
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	adds r0, #0xc4
	ldr r1, [r7, #0x48]
	str r1, [r0]
	ldr r3, _080906C4 @ =gUnknown_080D71F4
	ldr r2, [r3, #4]
	lsls r2, r2, #5
	ldr r1, [r7, #0x48]
	adds r1, r1, r2
	str r1, [r7, #0x48]
	ldrh r1, [r3]
	strh r1, [r0, #0xc]
	ldrb r1, [r3, #2]
	strb r1, [r0, #0x1a]
	ldrb r1, [r0, #0x1b]
	mov r2, r8
	orrs r1, r2
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x38]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x3c]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	mov r1, sl
	strb r1, [r0, #0x1c]
	strb r5, [r0, #0x1f]
	str r4, [r0, #8]
	mov r2, sb
	str r2, [r0, #0x20]
	bl UpdateSpriteAnimation
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080906B4: .4byte gUnknown_080D7194
_080906B8: .4byte gUnknown_080D71C4
_080906BC: .4byte gUnknown_080D7134
_080906C0: .4byte gUnknown_080D7024
_080906C4: .4byte gUnknown_080D71F4

	thumb_func_start sub_80906C8
sub_80906C8: @ 0x080906C8
	push {r4, r5, r6, lr}
	ldr r0, _08090730 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_8090828
	adds r0, r4, #0
	bl sub_80908A8
	adds r0, r4, #0
	bl sub_8090968
	adds r0, r4, #0
	bl sub_809099C
	ldrb r0, [r4, #1]
	cmp r0, #0
	bne _08090700
	adds r0, r4, #0
	bl sub_8090930
	ldrb r0, [r4, #1]
	cmp r0, #0
	beq _08090706
_08090700:
	adds r0, r4, #0
	bl sub_80909DC
_08090706:
	ldr r0, _08090734 @ =gBgScrollRegs
	movs r1, #4
	ldrsh r2, [r0, r1]
	movs r1, #0xc8
	rsbs r1, r1, #0
	adds r6, r0, #0
	cmp r2, r1
	bgt _08090738
	movs r2, #4
	ldrsh r1, [r6, r2]
	ldr r0, [r4, #0x30]
	cmn r0, r1
	bgt _08090738
	ldr r1, [r4, #4]
	movs r0, #0
	strb r0, [r1]
	ldr r0, _08090730 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
	b _08090820
	.align 2, 0
_08090730: .4byte gCurTask
_08090734: .4byte gBgScrollRegs
_08090738:
	movs r3, #4
	ldrsh r0, [r6, r3]
	rsbs r0, r0, #0
	str r0, [r4, #0x30]
	ldr r0, _08090754 @ =gBldRegs
	ldrh r0, [r0, #4]
	cmp r0, #0x10
	bne _08090758
	ldrb r0, [r4, #1]
	cmp r0, #2
	bne _08090820
	movs r0, #0
	strb r0, [r4, #1]
	b _08090820
	.align 2, 0
_08090754: .4byte gBldRegs
_08090758:
	cmp r0, #0
	bne _08090820
	movs r0, #4
	ldrsh r5, [r6, r0]
	cmp r5, #0
	bne _08090820
	ldr r0, _08090790 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080907C4
	movs r0, #0x6a
	bl m4aSongNumStart
	ldrb r0, [r4, #1]
	cmp r0, #0
	bne _080907A8
	ldr r0, [r4, #0xc]
	movs r2, #0
	ldrsh r1, [r0, r2]
	adds r2, r0, #0
	cmp r1, #0
	beq _08090794
	cmp r1, #1
	beq _0809079A
	b _0809079C
	.align 2, 0
_08090790: .4byte gPressedKeys
_08090794:
	movs r0, #1
	strb r0, [r4, #1]
	b _0809079C
_0809079A:
	strb r5, [r4, #1]
_0809079C:
	movs r0, #1
	strh r0, [r2]
	ldr r6, _080907A4 @ =gBgScrollRegs
	b _080907C4
	.align 2, 0
_080907A4: .4byte gBgScrollRegs
_080907A8:
	cmp r0, #1
	bne _080907C4
	ldr r0, [r4, #0xc]
	movs r3, #0
	ldrsh r0, [r0, r3]
	cmp r0, #0
	beq _080907BC
	cmp r0, #1
	beq _080907C2
	b _080907C4
_080907BC:
	movs r0, #2
	strb r0, [r4, #1]
	b _080907C4
_080907C2:
	strb r5, [r4, #1]
_080907C4:
	movs r1, #4
	ldrsh r0, [r6, r1]
	cmp r0, #0
	bne _08090820
	ldr r5, _080907FC @ =gRepeatedKeys
	ldrh r1, [r5]
	movs r0, #0x30
	ands r0, r1
	cmp r0, #0
	beq _08090820
	movs r0, #0x6c
	bl m4aSongNumStart
	ldrh r1, [r5]
	movs r0, #0x10
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	cmp r3, #0
	beq _08090804
	ldr r1, [r4, #0xc]
	ldrh r2, [r1]
	movs r3, #0
	ldrsh r0, [r1, r3]
	cmp r0, #0
	bne _08090800
	movs r0, #1
	b _0809081E
	.align 2, 0
_080907FC: .4byte gRepeatedKeys
_08090800:
	subs r0, r2, #1
	b _0809081E
_08090804:
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _08090820
	ldr r1, [r4, #0xc]
	ldrh r2, [r1]
	movs r4, #0
	ldrsh r0, [r1, r4]
	cmp r0, #1
	bne _0809081C
	strh r3, [r1]
	b _08090820
_0809081C:
	adds r0, r2, #1
_0809081E:
	strh r0, [r1]
_08090820:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8090828
sub_8090828: @ 0x08090828
	push {r4, r5, r6, r7, lr}
	mov ip, r0
	movs r2, #0
	ldr r5, _080908A4 @ =gBgScrollRegs
	mov r7, ip
	adds r7, #0x18
	movs r0, #4
	ldrsh r1, [r5, r0]
	movs r0, #0x37
	subs r6, r0, r1
	movs r0, #6
	ldrsh r1, [r5, r0]
	movs r0, #0x46
	subs r4, r0, r1
	mov r3, ip
	adds r3, #0x1c
_08090848:
	lsls r1, r2, #3
	adds r0, r7, r1
	str r6, [r0]
	adds r1, r3, r1
	str r4, [r1]
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #1
	bls _08090848
	movs r0, #4
	ldrsh r1, [r5, r0]
	movs r0, #0x78
	subs r0, r0, r1
	mov r1, ip
	str r0, [r1, #0x28]
	movs r0, #6
	ldrsh r1, [r5, r0]
	movs r0, #0x87
	subs r0, r0, r1
	mov r1, ip
	str r0, [r1, #0x2c]
	ldrh r0, [r5, #4]
	movs r1, #0x78
	subs r1, r1, r0
	mov r0, ip
	adds r0, #0x40
	strh r1, [r0]
	ldrh r2, [r5, #6]
	movs r0, #0x1e
	subs r0, r0, r2
	mov r3, ip
	adds r3, #0x42
	strh r0, [r3]
	mov r0, ip
	adds r0, #0x44
	strh r1, [r0]
	movs r0, #0x32
	subs r0, r0, r2
	mov r1, ip
	adds r1, #0x46
	strh r0, [r1]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080908A4: .4byte gBgScrollRegs

	thumb_func_start sub_80908A8
sub_80908A8: @ 0x080908A8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	movs r5, #0
	ldr r7, _08090908 @ =gUnknown_080D7134
	movs r0, #0
	mov r8, r0
_080908B8:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	adds r0, #0x4c
	adds r4, r6, r0
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r7
	ldrh r0, [r0]
	strh r0, [r4, #0xc]
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r7
	ldrb r0, [r0, #2]
	strb r0, [r4, #0x1a]
	lsls r2, r5, #3
	adds r0, r6, #0
	adds r0, #0x18
	adds r0, r0, r2
	ldr r0, [r0]
	lsls r1, r5, #6
	adds r0, r0, r1
	strh r0, [r4, #0x10]
	adds r0, r6, #0
	adds r0, #0x1c
	adds r0, r0, r2
	ldr r0, [r0]
	strh r0, [r4, #0x12]
	ldr r0, [r6, #0xc]
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r5, r0
	beq _0809090C
	movs r0, #1
	b _0809090E
	.align 2, 0
_08090908: .4byte gUnknown_080D7134
_0809090C:
	mov r0, r8
_0809090E:
	strb r0, [r4, #0x1f]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #1
	bls _080908B8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8090930
sub_8090930: @ 0x08090930
	push {lr}
	adds r3, r0, #0
	adds r0, #0xec
	ldr r2, _08090964 @ =gUnknown_080D7194
	ldrb r1, [r3]
	lsls r1, r1, #3
	adds r1, r1, r2
	ldrh r1, [r1]
	strh r1, [r0, #0xc]
	ldrb r1, [r3]
	lsls r1, r1, #3
	adds r1, r1, r2
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	adds r1, r3, #0
	adds r1, #0x40
	ldrh r1, [r1]
	strh r1, [r0, #0x10]
	adds r1, r3, #0
	adds r1, #0x42
	ldrh r1, [r1]
	strh r1, [r0, #0x12]
	bl DisplaySprite
	pop {r0}
	bx r0
	.align 2, 0
_08090964: .4byte gUnknown_080D7194

	thumb_func_start sub_8090968
sub_8090968: @ 0x08090968
	push {lr}
	adds r2, r0, #0
	adds r2, #0x9c
	ldr r3, _08090998 @ =gUnknown_080D7024
	ldrb r1, [r0]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrh r1, [r1]
	strh r1, [r2, #0xc]
	ldrb r1, [r0]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrb r1, [r1, #2]
	strb r1, [r2, #0x1a]
	ldr r1, [r0, #0x28]
	strh r1, [r2, #0x10]
	ldr r0, [r0, #0x2c]
	strh r0, [r2, #0x12]
	adds r0, r2, #0
	bl DisplaySprite
	pop {r0}
	bx r0
	.align 2, 0
_08090998: .4byte gUnknown_080D7024

	thumb_func_start sub_809099C
sub_809099C: @ 0x0809099C
	push {lr}
	mov ip, r0
	adds r0, #0xc4
	mov r1, ip
	ldr r3, [r1, #0xc]
	movs r1, #0
	ldrsh r2, [r3, r1]
	lsls r2, r2, #3
	mov r1, ip
	adds r1, #0x18
	adds r1, r1, r2
	ldr r2, [r1]
	ldrh r1, [r3]
	lsls r1, r1, #6
	adds r2, r2, r1
	subs r2, #3
	strh r2, [r0, #0x10]
	mov r2, ip
	ldr r1, [r2, #0xc]
	movs r3, #0
	ldrsh r2, [r1, r3]
	lsls r2, r2, #3
	mov r1, ip
	adds r1, #0x1c
	adds r1, r1, r2
	ldr r1, [r1]
	strh r1, [r0, #0x12]
	bl DisplaySprite
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80909DC
sub_80909DC: @ 0x080909DC
	push {lr}
	adds r3, r0, #0
	movs r1, #0x8a
	lsls r1, r1, #1
	adds r0, r3, r1
	ldr r2, _08090A14 @ =gUnknown_080D71C4
	ldrb r1, [r3]
	lsls r1, r1, #3
	adds r1, r1, r2
	ldrh r1, [r1]
	strh r1, [r0, #0xc]
	ldrb r1, [r3]
	lsls r1, r1, #3
	adds r1, r1, r2
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	adds r1, r3, #0
	adds r1, #0x40
	ldrh r1, [r1]
	strh r1, [r0, #0x10]
	adds r1, r3, #0
	adds r1, #0x42
	ldrh r1, [r1]
	strh r1, [r0, #0x12]
	bl DisplaySprite
	pop {r0}
	bx r0
	.align 2, 0
_08090A14: .4byte gUnknown_080D71C4

	thumb_func_start sub_8090A18
sub_8090A18: @ 0x08090A18
	bx lr
	.align 2, 0

	thumb_func_start OptionsSlideInit_TimeUp
OptionsSlideInit_TimeUp: @ 0x08090A1C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r4, r0, #0
	mov sl, r1
	adds r5, r3, #0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	ldr r0, _08090AE8 @ =sub_8090CBC
	movs r1, #0x82
	lsls r1, r1, #1
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r3, _08090AEC @ =sub_8090F6C
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r3, r1, r0
	strh r4, [r3, #8]
	str r5, [r3, #4]
	movs r4, #0
	adds r0, #0xc
	adds r0, r0, r1
	mov ip, r0
	ldr r5, _08090AF0 @ =gBgScrollRegs
	movs r2, #0x37
	mov sb, r2
	adds r6, r5, #0
	ldr r7, _08090AF4 @ =0x03000010
	adds r7, r1, r7
	str r7, [sp, #4]
	movs r0, #0x46
	mov r8, r0
_08090A6C:
	lsls r1, r4, #3
	mov r7, ip
	adds r2, r7, r1
	movs r7, #4
	ldrsh r0, [r5, r7]
	mov r7, sb
	subs r0, r7, r0
	str r0, [r2]
	ldr r0, [sp, #4]
	adds r1, r0, r1
	movs r2, #6
	ldrsh r0, [r5, r2]
	mov r7, r8
	subs r0, r7, r0
	str r0, [r1]
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #1
	bls _08090A6C
	movs r1, #4
	ldrsh r0, [r6, r1]
	rsbs r0, r0, #0
	str r0, [r3, #0x1c]
	movs r2, #6
	ldrsh r0, [r6, r2]
	rsbs r0, r0, #0
	str r0, [r3, #0x20]
	ldrh r0, [r6, #4]
	rsbs r0, r0, #0
	adds r0, #0x64
	strh r0, [r3, #0x34]
	ldrh r0, [r6, #6]
	rsbs r0, r0, #0
	strh r0, [r3, #0x36]
	movs r7, #4
	ldrsh r0, [r6, r7]
	rsbs r0, r0, #0
	str r0, [r3, #0x24]
	movs r1, #6
	ldrsh r0, [r6, r1]
	rsbs r0, r0, #0
	str r0, [r3, #0x28]
	mov r2, sl
	str r2, [r3, #0x38]
	ldr r0, _08090AF8 @ =gSaveGame
	ldr r7, _08090AFC @ =0x00000366
	adds r0, r0, r7
	ldrb r0, [r0]
	strb r0, [r3]
	adds r0, r3, #0
	bl sub_8090B00
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08090AE8: .4byte sub_8090CBC
_08090AEC: .4byte sub_8090F6C
_08090AF0: .4byte gBgScrollRegs
_08090AF4: .4byte 0x03000010
_08090AF8: .4byte gSaveGame
_08090AFC: .4byte 0x00000366

	thumb_func_start sub_8090B00
sub_8090B00: @ 0x08090B00
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r6, r0, #0
	adds r0, #0xdc
	ldr r1, [r6, #0x38]
	str r1, [r0]
	ldr r3, _08090CAC @ =gUnknown_080D71FC
	ldrb r1, [r6]
	lsls r1, r1, #3
	adds r2, r3, #4
	adds r1, r1, r2
	ldr r2, [r1]
	lsls r2, r2, #5
	ldr r1, [r6, #0x38]
	adds r1, r1, r2
	str r1, [r6, #0x38]
	ldrb r1, [r6]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrh r1, [r1]
	movs r4, #0
	movs r2, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r6]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldrh r1, [r6, #0x34]
	lsrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldrh r1, [r6, #0x36]
	lsrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r2, [r0, #0x14]
	strh r2, [r0, #0xe]
	strh r2, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	strb r4, [r0, #0x1f]
	str r2, [r0, #8]
	subs r1, #0x11
	str r1, [r0, #0x20]
	bl UpdateSpriteAnimation
	movs r4, #0
	ldr r7, _08090CB0 @ =gUnknown_080D6B48
	movs r5, #0
_08090B6A:
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #3
	adds r0, #0x3c
	adds r0, r6, r0
	ldr r1, [r6, #0x38]
	str r1, [r0]
	ldrb r1, [r6]
	lsls r1, r1, #1
	adds r1, r4, r1
	lsls r1, r1, #3
	adds r2, r7, #4
	adds r1, r1, r2
	ldr r2, [r1]
	lsls r2, r2, #5
	ldr r1, [r6, #0x38]
	adds r1, r1, r2
	str r1, [r6, #0x38]
	ldrb r1, [r6]
	lsls r1, r1, #1
	adds r1, r4, r1
	lsls r1, r1, #3
	adds r1, r1, r7
	ldrh r1, [r1]
	strh r1, [r0, #0xc]
	ldrb r1, [r6]
	lsls r1, r1, #1
	adds r1, r4, r1
	lsls r1, r1, #3
	adds r1, r1, r7
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	mov r8, r1
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	lsls r2, r4, #3
	adds r1, r6, #0
	adds r1, #0xc
	adds r1, r1, r2
	ldr r1, [r1]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	adds r1, r6, #0
	adds r1, #0x10
	adds r1, r1, r2
	ldr r1, [r1]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r1, #0x40
	strh r1, [r0, #0x14]
	strh r5, [r0, #0xe]
	strh r5, [r0, #0x16]
	movs r2, #0x10
	mov sl, r2
	mov r1, sl
	strb r1, [r0, #0x1c]
	movs r2, #0
	strb r2, [r0, #0x1f]
	str r5, [r0, #8]
	movs r1, #1
	rsbs r1, r1, #0
	mov sb, r1
	str r1, [r0, #0x20]
	bl UpdateSpriteAnimation
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #1
	bls _08090B6A
	adds r0, r6, #0
	adds r0, #0x8c
	ldr r1, [r6, #0x38]
	str r1, [r0]
	ldr r3, _08090CB4 @ =gUnknown_080D7024
	ldrb r1, [r6]
	lsls r1, r1, #3
	adds r2, r3, #4
	adds r1, r1, r2
	ldr r2, [r1]
	lsls r2, r2, #5
	ldr r1, [r6, #0x38]
	adds r1, r1, r2
	str r1, [r6, #0x38]
	ldrb r1, [r6]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrh r1, [r1]
	movs r5, #0
	movs r4, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r6]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	ldrb r1, [r0, #0x1b]
	mov r2, r8
	orrs r1, r2
	strb r1, [r0, #0x1b]
	ldr r1, [r6, #0x1c]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r6, #0x20]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	mov r1, sl
	strb r1, [r0, #0x1c]
	strb r5, [r0, #0x1f]
	str r4, [r0, #8]
	mov r2, sb
	str r2, [r0, #0x20]
	bl UpdateSpriteAnimation
	adds r0, r6, #0
	adds r0, #0xb4
	ldr r1, [r6, #0x38]
	str r1, [r0]
	ldr r3, _08090CB8 @ =gUnknown_080D722C
	ldr r2, [r3, #4]
	lsls r2, r2, #5
	ldr r1, [r6, #0x38]
	adds r1, r1, r2
	str r1, [r6, #0x38]
	ldrh r1, [r3]
	strh r1, [r0, #0xc]
	ldrb r1, [r3, #2]
	strb r1, [r0, #0x1a]
	ldrb r1, [r0, #0x1b]
	mov r2, r8
	orrs r1, r2
	strb r1, [r0, #0x1b]
	ldr r1, [r6, #0x2c]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r6, #0x30]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	mov r1, sl
	strb r1, [r0, #0x1c]
	strb r5, [r0, #0x1f]
	str r4, [r0, #8]
	mov r2, sb
	str r2, [r0, #0x20]
	bl UpdateSpriteAnimation
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08090CAC: .4byte gUnknown_080D71FC
_08090CB0: .4byte gUnknown_080D6B48
_08090CB4: .4byte gUnknown_080D7024
_08090CB8: .4byte gUnknown_080D722C

	thumb_func_start sub_8090CBC
sub_8090CBC: @ 0x08090CBC
	push {r4, lr}
	ldr r0, _08090D0C @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_8090E58
	adds r0, r4, #0
	bl sub_8090DD4
	adds r0, r4, #0
	bl sub_8090ECC
	adds r0, r4, #0
	bl sub_8090F00
	adds r0, r4, #0
	bl sub_8090F34
	ldr r0, _08090D10 @ =gBgScrollRegs
	movs r1, #4
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _08090D40
	ldr r0, _08090D14 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08090D40
	movs r2, #8
	ldrsh r1, [r4, r2]
	cmp r1, #0
	beq _08090D18
	cmp r1, #1
	beq _08090D2C
	b _08090DCE
	.align 2, 0
_08090D0C: .4byte gCurTask
_08090D10: .4byte gBgScrollRegs
_08090D14: .4byte gPressedKeys
_08090D18:
	ldr r0, _08090D24 @ =gSaveGame
	ldr r3, _08090D28 @ =0x00000365
	adds r0, r0, r3
	strb r1, [r0]
	b _08090DCE
	.align 2, 0
_08090D24: .4byte gSaveGame
_08090D28: .4byte 0x00000365
_08090D2C:
	ldr r0, _08090D38 @ =gSaveGame
	ldr r1, _08090D3C @ =0x00000365
	adds r0, r0, r1
	movs r1, #1
	strb r1, [r0]
	b _08090DCE
	.align 2, 0
_08090D38: .4byte gSaveGame
_08090D3C: .4byte 0x00000365
_08090D40:
	ldr r0, _08090D6C @ =gBgScrollRegs
	movs r3, #4
	ldrsh r2, [r0, r3]
	movs r1, #0xc8
	rsbs r1, r1, #0
	adds r3, r0, #0
	cmp r2, r1
	bgt _08090D74
	movs r0, #4
	ldrsh r1, [r3, r0]
	ldr r0, [r4, #0x24]
	cmn r0, r1
	bgt _08090D74
	ldr r1, [r4, #4]
	movs r0, #0
	strb r0, [r1]
	ldr r0, _08090D70 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
	b _08090DCE
	.align 2, 0
_08090D6C: .4byte gBgScrollRegs
_08090D70: .4byte gCurTask
_08090D74:
	movs r1, #4
	ldrsh r0, [r3, r1]
	rsbs r0, r0, #0
	str r0, [r4, #0x24]
	movs r2, #4
	ldrsh r0, [r3, r2]
	cmp r0, #0
	bne _08090DCE
	ldr r0, _08090DAC @ =gRepeatedKeys
	ldrh r1, [r0]
	movs r0, #0x30
	ands r0, r1
	cmp r0, #0
	beq _08090DCE
	movs r0, #0x10
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0
	beq _08090DB4
	ldrh r1, [r4, #8]
	movs r3, #8
	ldrsh r0, [r4, r3]
	cmp r0, #0
	bne _08090DB0
	movs r0, #1
	b _08090DCC
	.align 2, 0
_08090DAC: .4byte gRepeatedKeys
_08090DB0:
	subs r0, r1, #1
	b _08090DCC
_08090DB4:
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _08090DCE
	ldrh r1, [r4, #8]
	movs r3, #8
	ldrsh r0, [r4, r3]
	cmp r0, #1
	bne _08090DCA
	strh r2, [r4, #8]
	b _08090DCE
_08090DCA:
	adds r0, r1, #1
_08090DCC:
	strh r0, [r4, #8]
_08090DCE:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8090DD4
sub_8090DD4: @ 0x08090DD4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	movs r5, #0
	ldr r7, _08090E30 @ =gUnknown_080D6B48
	movs r0, #0
	mov r8, r0
_08090DE4:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	adds r0, #0x3c
	adds r4, r6, r0
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r7
	ldrh r0, [r0]
	strh r0, [r4, #0xc]
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r0, r0, #3
	adds r0, r0, r7
	ldrb r0, [r0, #2]
	strb r0, [r4, #0x1a]
	lsls r2, r5, #3
	adds r0, r6, #0
	adds r0, #0xc
	adds r0, r0, r2
	ldr r0, [r0]
	lsls r1, r5, #6
	adds r0, r0, r1
	strh r0, [r4, #0x10]
	adds r0, r6, #0
	adds r0, #0x10
	adds r0, r0, r2
	ldr r0, [r0]
	strh r0, [r4, #0x12]
	movs r1, #8
	ldrsh r0, [r6, r1]
	cmp r5, r0
	beq _08090E34
	movs r0, #1
	b _08090E36
	.align 2, 0
_08090E30: .4byte gUnknown_080D6B48
_08090E34:
	mov r0, r8
_08090E36:
	strb r0, [r4, #0x1f]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #1
	bls _08090DE4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8090E58
sub_8090E58: @ 0x08090E58
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r3, r0, #0
	movs r2, #0
	ldr r6, _08090EC8 @ =gBgScrollRegs
	movs r0, #0xc
	adds r0, r0, r3
	mov ip, r0
	movs r7, #4
	ldrsh r1, [r6, r7]
	movs r0, #0x37
	subs r0, r0, r1
	mov r8, r0
	movs r0, #6
	ldrsh r1, [r6, r0]
	movs r0, #0x46
	subs r5, r0, r1
	adds r4, r3, #0
	adds r4, #0x10
_08090E80:
	lsls r1, r2, #3
	mov r7, ip
	adds r0, r7, r1
	mov r7, r8
	str r7, [r0]
	adds r1, r4, r1
	str r5, [r1]
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #1
	bls _08090E80
	movs r0, #4
	ldrsh r1, [r6, r0]
	movs r0, #0x78
	subs r0, r0, r1
	str r0, [r3, #0x1c]
	movs r7, #6
	ldrsh r1, [r6, r7]
	movs r0, #0x87
	subs r0, r0, r1
	str r0, [r3, #0x20]
	ldrh r1, [r6, #4]
	movs r0, #0x78
	subs r0, r0, r1
	strh r0, [r3, #0x34]
	ldrh r1, [r6, #6]
	movs r0, #0x1e
	subs r0, r0, r1
	strh r0, [r3, #0x36]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08090EC8: .4byte gBgScrollRegs

	thumb_func_start sub_8090ECC
sub_8090ECC: @ 0x08090ECC
	push {lr}
	adds r2, r0, #0
	adds r2, #0xdc
	ldr r3, _08090EFC @ =gUnknown_080D71FC
	ldrb r1, [r0]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrh r1, [r1]
	strh r1, [r2, #0xc]
	ldrb r1, [r0]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrb r1, [r1, #2]
	strb r1, [r2, #0x1a]
	ldrh r1, [r0, #0x34]
	strh r1, [r2, #0x10]
	ldrh r0, [r0, #0x36]
	strh r0, [r2, #0x12]
	adds r0, r2, #0
	bl DisplaySprite
	pop {r0}
	bx r0
	.align 2, 0
_08090EFC: .4byte gUnknown_080D71FC

	thumb_func_start sub_8090F00
sub_8090F00: @ 0x08090F00
	push {lr}
	adds r2, r0, #0
	adds r2, #0x8c
	ldr r3, _08090F30 @ =gUnknown_080D7024
	ldrb r1, [r0]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrh r1, [r1]
	strh r1, [r2, #0xc]
	ldrb r1, [r0]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrb r1, [r1, #2]
	strb r1, [r2, #0x1a]
	ldr r1, [r0, #0x1c]
	strh r1, [r2, #0x10]
	ldr r0, [r0, #0x20]
	strh r0, [r2, #0x12]
	adds r0, r2, #0
	bl DisplaySprite
	pop {r0}
	bx r0
	.align 2, 0
_08090F30: .4byte gUnknown_080D7024

	thumb_func_start sub_8090F34
sub_8090F34: @ 0x08090F34
	push {lr}
	adds r3, r0, #0
	adds r0, #0xb4
	movs r1, #8
	ldrsh r2, [r3, r1]
	lsls r2, r2, #3
	adds r1, r3, #0
	adds r1, #0xc
	adds r1, r1, r2
	ldr r2, [r1]
	ldrh r1, [r3, #8]
	lsls r1, r1, #6
	adds r2, r2, r1
	subs r2, #3
	strh r2, [r0, #0x10]
	movs r1, #8
	ldrsh r2, [r3, r1]
	lsls r2, r2, #3
	adds r1, r3, #0
	adds r1, #0x10
	adds r1, r1, r2
	ldr r1, [r1]
	strh r1, [r0, #0x12]
	bl DisplaySprite
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8090F6C
sub_8090F6C: @ 0x08090F6C
	bx lr
	.align 2, 0
 
	thumb_func_start OptionsSlideInit_ButtonConfig
OptionsSlideInit_ButtonConfig: @ 0x08090F70
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x30
	adds r4, r0, #0
	str r1, [sp, #0x14]
	mov sb, r3
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	ldr r1, _08091018 @ =gSaveGame
	movs r2, #0xd7
	lsls r2, r2, #2
	adds r0, r1, r2
	ldrh r0, [r0]
	add r5, sp, #0xc
	movs r6, #0
	movs r2, #0
	mov r8, r2
	strh r0, [r5]
	ldr r2, _0809101C @ =0x0000035E
	adds r0, r1, r2
	ldrh r2, [r0]
	mov r0, sp
	adds r0, #0xe
	strh r2, [r0]
	movs r0, #0xd8
	lsls r0, r0, #2
	adds r1, r1, r0
	ldrh r1, [r1]
	add r0, sp, #0x10
	strh r1, [r0]
	add r0, sp, #4
	adds r1, r5, #0
	movs r2, #6
	bl memcpy
	ldr r1, _08091020 @ =gUnknown_080D73BC
	adds r0, r5, #0
	movs r2, #3
	bl memcpy
	ldr r0, _08091024 @ =sub_8091490
	movs r1, #0x93
	lsls r1, r1, #2
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r3, _08091028 @ =sub_8091C9C
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r1, r1, r0
	mov ip, r1
	strh r4, [r1, #0x1e]
	mov r2, sb
	str r2, [r1, #8]
	mov r0, r8
	strh r0, [r1, #0x20]
	strb r6, [r1, #1]
	movs r0, #2
	strb r0, [r1, #3]
	strb r6, [r1, #2]
	mov r2, r8
	strh r2, [r1, #0x22]
	movs r0, #1
	strb r0, [r1, #4]
	movs r6, #0
_08091000:
	lsls r0, r6, #1
	add r0, sp
	adds r0, #4
	ldrh r1, [r0]
	cmp r1, #2
	beq _08091040
	cmp r1, #2
	bgt _0809102C
	cmp r1, #1
	beq _08091036
	b _08091052
	.align 2, 0
_08091018: .4byte gSaveGame
_0809101C: .4byte 0x0000035E
_08091020: .4byte gUnknown_080D73BC
_08091024: .4byte sub_8091490
_08091028: .4byte sub_8091C9C
_0809102C:
	movs r0, #0x80
	lsls r0, r0, #1
	cmp r1, r0
	beq _0809104A
	b _08091052
_08091036:
	adds r0, r5, r6
	ldrb r0, [r0]
	mov r1, ip
	strh r0, [r1, #0x18]
	b _08091052
_08091040:
	adds r0, r5, r6
	ldrb r0, [r0]
	mov r2, ip
	strh r0, [r2, #0x1a]
	b _08091052
_0809104A:
	adds r0, r5, r6
	ldrb r0, [r0]
	mov r1, ip
	strh r0, [r1, #0x1c]
_08091052:
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #2
	bls _08091000
	mov r2, ip
	ldrh r0, [r2, #0x18]
	strh r0, [r2, #0x20]
	movs r6, #0
	adds r2, #0x24
	str r2, [sp, #0x28]
	ldr r5, _08091144 @ =gBgScrollRegs
	mov r0, ip
	adds r0, #0x28
	str r0, [sp, #0x2c]
	mov r1, ip
	adds r1, #0x3c
	str r1, [sp, #0x18]
	adds r2, #0x1c
	str r2, [sp, #0x1c]
	movs r0, #0xc
	add r0, ip
	mov sl, r0
	movs r1, #0x18
	add r1, ip
	mov sb, r1
	movs r2, #0x12
	add r2, ip
	mov r8, r2
	mov r0, ip
	adds r0, #0x64
	str r0, [sp, #0x20]
	mov r1, ip
	adds r1, #0x66
	str r1, [sp, #0x24]
	adds r7, r5, #0
_0809109A:
	lsls r2, r6, #3
	ldr r0, [sp, #0x28]
	adds r4, r0, r2
	movs r0, #4
	ldrsh r1, [r7, r0]
	movs r0, #0x70
	subs r0, r0, r1
	str r0, [r4]
	ldr r1, [sp, #0x2c]
	adds r3, r1, r2
	movs r0, #6
	ldrsh r1, [r7, r0]
	movs r0, #0x2d
	subs r0, r0, r1
	str r0, [r3]
	ldr r0, [sp, #0x18]
	adds r1, r0, r2
	ldr r0, [r4]
	subs r0, #0x46
	str r0, [r1]
	ldr r1, [sp, #0x1c]
	adds r2, r1, r2
	ldr r0, [r3]
	str r0, [r2]
	lsls r1, r6, #1
	mov r2, sl
	adds r3, r2, r1
	mov r0, sb
	adds r2, r0, r1
	ldrh r0, [r2]
	strh r0, [r3]
	add r1, r8
	ldrh r0, [r2]
	strh r0, [r1]
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #2
	bls _0809109A
	movs r1, #4
	ldrsh r0, [r5, r1]
	rsbs r0, r0, #0
	mov r2, ip
	str r0, [r2, #0x54]
	movs r1, #6
	ldrsh r0, [r5, r1]
	rsbs r0, r0, #0
	str r0, [r2, #0x58]
	ldrh r0, [r5, #4]
	rsbs r0, r0, #0
	adds r0, #0x64
	ldr r2, [sp, #0x20]
	strh r0, [r2]
	ldrh r0, [r5, #6]
	rsbs r0, r0, #0
	ldr r1, [sp, #0x24]
	strh r0, [r1]
	movs r2, #4
	ldrsh r0, [r5, r2]
	rsbs r0, r0, #0
	mov r1, ip
	str r0, [r1, #0x5c]
	movs r2, #6
	ldrsh r0, [r5, r2]
	rsbs r0, r0, #0
	str r0, [r1, #0x60]
	ldr r0, [sp, #0x14]
	str r0, [r1, #0x68]
	ldr r1, _08091148 @ =gSaveGame
	ldr r2, _0809114C @ =0x00000366
	adds r0, r1, r2
	ldrb r0, [r0]
	mov r1, ip
	strb r0, [r1]
	mov r0, ip
	bl sub_8091150
	add sp, #0x30
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08091144: .4byte gBgScrollRegs
_08091148: .4byte gSaveGame
_0809114C: .4byte 0x00000366

	thumb_func_start sub_8091150
sub_8091150: @ 0x08091150
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	adds r6, r0, #0
	movs r1, #0x89
	lsls r1, r1, #2
	adds r0, r6, r1
	ldr r1, [r6, #0x68]
	str r1, [r0]
	ldr r3, _08091404 @ =gUnknown_080D7334
	ldrb r1, [r6]
	lsls r1, r1, #3
	adds r2, r3, #4
	adds r1, r1, r2
	ldr r2, [r1]
	lsls r2, r2, #5
	ldr r1, [r6, #0x68]
	adds r1, r1, r2
	str r1, [r6, #0x68]
	ldrb r1, [r6]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrh r1, [r1]
	movs r4, #0
	movs r2, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r6]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	adds r1, r6, #0
	adds r1, #0x64
	ldrh r1, [r1]
	lsrs r1, r1, #8
	strh r1, [r0, #0x10]
	adds r1, r6, #0
	adds r1, #0x66
	ldrh r1, [r1]
	lsrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r2, [r0, #0x14]
	strh r2, [r0, #0xe]
	strh r2, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	strb r4, [r0, #0x1f]
	str r2, [r0, #8]
	movs r4, #1
	rsbs r4, r4, #0
	str r4, [r0, #0x20]
	bl UpdateSpriteAnimation
	movs r7, #0
	ldr r2, _08091408 @ =gUnknown_080D7264
	mov r8, r2
	movs r3, #0
	movs r0, #0x10
	mov sl, r0
	mov sb, r4
	adds r1, r6, #0
	adds r1, #0x24
	str r1, [sp]
	adds r2, r6, #0
	adds r2, #0x28
	str r2, [sp, #4]
_080911DE:
	lsls r4, r7, #2
	adds r4, r4, r7
	lsls r4, r4, #3
	adds r0, r4, #0
	adds r0, #0x6c
	adds r0, r6, r0
	ldr r1, [r6, #0x68]
	str r1, [r0]
	ldrb r1, [r6]
	lsls r1, r1, #2
	adds r1, r7, r1
	lsls r1, r1, #3
	mov r2, r8
	adds r2, #4
	adds r1, r1, r2
	ldr r2, [r1]
	lsls r2, r2, #5
	ldr r1, [r6, #0x68]
	adds r1, r1, r2
	str r1, [r6, #0x68]
	ldrb r1, [r6]
	lsls r1, r1, #2
	adds r1, r7, r1
	lsls r1, r1, #3
	add r1, r8
	ldrh r1, [r1]
	strh r1, [r0, #0xc]
	ldrb r1, [r6]
	lsls r1, r1, #2
	adds r1, r7, r1
	lsls r1, r1, #3
	add r1, r8
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	ldrb r1, [r0, #0x1b]
	movs r2, #0xff
	orrs r1, r2
	strb r1, [r0, #0x1b]
	lsls r5, r7, #3
	adds r1, r6, #0
	adds r1, #0x24
	adds r1, r1, r5
	ldr r1, [r1]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	adds r1, r6, #0
	adds r1, #0x28
	adds r1, r1, r5
	ldr r1, [r1]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r1, #0x40
	strh r1, [r0, #0x14]
	strh r3, [r0, #0xe]
	strh r3, [r0, #0x16]
	mov r2, sl
	strb r2, [r0, #0x1c]
	movs r1, #0
	strb r1, [r0, #0x1f]
	str r3, [r0, #8]
	mov r2, sb
	str r2, [r0, #0x20]
	str r3, [sp, #8]
	bl UpdateSpriteAnimation
	adds r4, #0xe4
	adds r4, r6, r4
	ldr r0, [r6, #0x68]
	str r0, [r4]
	ldr r2, _0809140C @ =gUnknown_080D731C
	adds r0, r2, #4
	adds r0, r5, r0
	ldr r1, [r0]
	lsls r1, r1, #5
	ldr r0, [r6, #0x68]
	adds r0, r0, r1
	str r0, [r6, #0x68]
	adds r2, r5, r2
	ldrh r0, [r2]
	strh r0, [r4, #0xc]
	ldrb r0, [r2, #2]
	strb r0, [r4, #0x1a]
	ldrb r0, [r4, #0x1b]
	movs r1, #0xff
	orrs r0, r1
	strb r0, [r4, #0x1b]
	adds r0, r6, #0
	adds r0, #0x3c
	adds r0, r0, r5
	ldr r0, [r0]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	adds r0, r6, #0
	adds r0, #0x40
	adds r0, r0, r5
	ldr r0, [r0]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	movs r2, #0x40
	strh r2, [r4, #0x14]
	ldr r3, [sp, #8]
	strh r3, [r4, #0xe]
	strh r3, [r4, #0x16]
	mov r0, sl
	strb r0, [r4, #0x1c]
	movs r1, #0
	strb r1, [r4, #0x1f]
	str r3, [r4, #8]
	mov r2, sb
	str r2, [r4, #0x20]
	adds r0, r4, #0
	str r3, [sp, #8]
	bl UpdateSpriteAnimation
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	ldr r3, [sp, #8]
	cmp r7, #2
	bls _080911DE
	movs r7, #0
	ldr r5, _08091410 @ =gUnknown_080D736C
	movs r4, #0
_080912D4:
	lsls r0, r7, #2
	adds r0, r0, r7
	lsls r0, r0, #3
	movs r1, #0xd6
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r0, r6, r0
	ldr r1, [r6, #0x68]
	str r1, [r0]
	lsls r3, r7, #3
	adds r1, r5, #4
	adds r1, r3, r1
	ldr r2, [r1]
	lsls r2, r2, #5
	ldr r1, [r6, #0x68]
	adds r1, r1, r2
	str r1, [r6, #0x68]
	adds r3, r3, r5
	ldrh r1, [r3]
	strh r1, [r0, #0xc]
	ldrb r1, [r3, #2]
	strb r1, [r0, #0x1a]
	movs r2, #1
	rsbs r2, r2, #0
	mov sl, r2
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	movs r2, #0x1e
	ldrsh r1, [r6, r2]
	lsls r1, r1, #3
	ldr r2, [sp]
	adds r1, r2, r1
	ldr r1, [r1]
	subs r1, #8
	strh r1, [r0, #0x10]
	movs r2, #0x1e
	ldrsh r1, [r6, r2]
	lsls r1, r1, #3
	ldr r2, [sp, #4]
	adds r1, r2, r1
	ldr r2, [r1]
	ldrh r1, [r6, #0x1e]
	lsls r1, r1, #4
	adds r2, r2, r1
	subs r2, #4
	strh r2, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	movs r1, #0x10
	mov sb, r1
	mov r2, sb
	strb r2, [r0, #0x1c]
	movs r1, #0
	strb r1, [r0, #0x1f]
	str r4, [r0, #8]
	movs r2, #1
	rsbs r2, r2, #0
	mov r8, r2
	str r2, [r0, #0x20]
	bl UpdateSpriteAnimation
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #1
	bls _080912D4
	movs r1, #0xfe
	lsls r1, r1, #1
	adds r0, r6, r1
	ldr r1, [r6, #0x68]
	str r1, [r0]
	ldr r3, _08091414 @ =gUnknown_080D7364
	ldr r2, [r3, #4]
	lsls r2, r2, #5
	ldr r1, [r6, #0x68]
	adds r1, r1, r2
	str r1, [r6, #0x68]
	ldrh r1, [r3]
	movs r5, #0
	movs r4, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r3, #2]
	strb r1, [r0, #0x1a]
	ldrb r1, [r0, #0x1b]
	mov r2, sl
	orrs r1, r2
	strb r1, [r0, #0x1b]
	movs r2, #0x1e
	ldrsh r1, [r6, r2]
	lsls r1, r1, #3
	ldr r2, [sp]
	adds r1, r2, r1
	ldr r1, [r1]
	subs r1, #8
	strh r1, [r0, #0x10]
	movs r2, #0x1e
	ldrsh r1, [r6, r2]
	lsls r1, r1, #3
	ldr r2, [sp, #4]
	adds r1, r2, r1
	ldr r2, [r1]
	ldrh r1, [r6, #0x1e]
	lsls r1, r1, #4
	adds r2, r2, r1
	subs r2, #4
	strh r2, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	mov r1, sb
	strb r1, [r0, #0x1c]
	strb r5, [r0, #0x1f]
	str r4, [r0, #8]
	mov r2, r8
	str r2, [r0, #0x20]
	bl UpdateSpriteAnimation
	movs r7, #0
	ldr r3, _08091418 @ =gUnknown_080D7024
	ldr r5, _0809141C @ =gUnknown_080D7234
	movs r0, #0
	mov r8, r0
_080913CA:
	lsls r0, r7, #2
	adds r0, r0, r7
	lsls r0, r0, #3
	movs r1, #0xae
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r2, r6, r0
	ldr r0, [r6, #0x68]
	str r0, [r2]
	cmp r7, #0
	bne _08091420
	ldrb r0, [r6]
	lsls r0, r0, #3
	adds r1, r3, #4
	adds r0, r0, r1
	ldr r1, [r0]
	lsls r1, r1, #5
	ldr r0, [r6, #0x68]
	adds r0, r0, r1
	str r0, [r6, #0x68]
	ldrb r0, [r6]
	lsls r0, r0, #3
	adds r0, r0, r3
	ldrh r0, [r0]
	strh r0, [r2, #0xc]
	ldrb r0, [r6]
	lsls r0, r0, #3
	adds r0, r0, r3
	b _08091442
	.align 2, 0
_08091404: .4byte gUnknown_080D7334
_08091408: .4byte gUnknown_080D7264
_0809140C: .4byte gUnknown_080D731C
_08091410: .4byte gUnknown_080D736C
_08091414: .4byte gUnknown_080D7364
_08091418: .4byte gUnknown_080D7024
_0809141C: .4byte gUnknown_080D7234
_08091420:
	ldrb r0, [r6]
	lsls r0, r0, #3
	adds r1, r5, #4
	adds r0, r0, r1
	ldr r1, [r0]
	lsls r1, r1, #5
	ldr r0, [r6, #0x68]
	adds r0, r0, r1
	str r0, [r6, #0x68]
	ldrb r0, [r6]
	lsls r0, r0, #3
	adds r0, r0, r5
	ldrh r0, [r0]
	strh r0, [r2, #0xc]
	ldrb r0, [r6]
	lsls r0, r0, #3
	adds r0, r0, r5
_08091442:
	ldrb r0, [r0, #2]
	strb r0, [r2, #0x1a]
	movs r0, #0xff
	strb r0, [r2, #0x1b]
	ldr r0, [r6, #0x54]
	asrs r0, r0, #8
	strh r0, [r2, #0x10]
	ldr r0, [r6, #0x58]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	strh r4, [r2, #0x14]
	strh r4, [r2, #0xe]
	strh r4, [r2, #0x16]
	movs r0, #0x10
	strb r0, [r2, #0x1c]
	mov r0, r8
	strb r0, [r2, #0x1f]
	str r4, [r2, #8]
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r2, #0x20]
	adds r0, r2, #0
	str r3, [sp, #8]
	bl UpdateSpriteAnimation
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	ldr r3, [sp, #8]
	cmp r7, #1
	bls _080913CA
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8091490
sub_8091490: @ 0x08091490
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	ldr r0, _08091508 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	adds r0, r5, #0
	bl sub_8091A44
	adds r0, r5, #0
	bl sub_8091AE0
	adds r0, r5, #0
	bl sub_8091CA0
	adds r0, r5, #0
	bl sub_8091BC4
	adds r0, r5, #0
	bl sub_8091CDC
	adds r0, r5, #0
	bl sub_8091B78
	adds r0, r5, #0
	bl sub_8091C38
	ldr r2, _0809150C @ =gBgScrollRegs
	movs r0, #4
	ldrsh r1, [r2, r0]
	movs r0, #0xc8
	rsbs r0, r0, #0
	cmp r1, r0
	bgt _0809154C
	ldr r0, [r5, #0x5c]
	cmn r0, r1
	bgt _0809154C
	movs r1, #0
	movs r0, #1
	strb r0, [r5, #4]
	ldr r0, [r5, #8]
	strb r1, [r0]
	ldr r3, _08091510 @ =gFlags
	ldr r2, [r3]
	movs r0, #0x80
	lsls r0, r0, #0xa
	ands r0, r2
	cmp r0, #0
	beq _08091518
	ldr r0, _08091514 @ =gUnknown_080D737C
	movs r2, #0x10
	bl sub_80C4564
	b _0809152E
	.align 2, 0
_08091508: .4byte gCurTask
_0809150C: .4byte gBgScrollRegs
_08091510: .4byte gFlags
_08091514: .4byte gUnknown_080D737C
_08091518:
	ldr r1, _08091538 @ =0x040000D4
	ldr r0, _0809153C @ =gUnknown_080D737C
	str r0, [r1]
	ldr r0, _08091540 @ =gObjPalette
	str r0, [r1, #4]
	ldr r0, _08091544 @ =0x80000010
	str r0, [r1, #8]
	ldr r0, [r1, #8]
	movs r0, #2
	orrs r2, r0
	str r2, [r3]
_0809152E:
	ldr r0, _08091548 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
	b _08091A24
	.align 2, 0
_08091538: .4byte 0x040000D4
_0809153C: .4byte gUnknown_080D737C
_08091540: .4byte gObjPalette
_08091544: .4byte 0x80000010
_08091548: .4byte gCurTask
_0809154C:
	ldr r0, _080915E4 @ =gBgScrollRegs
	movs r7, #4
	ldrsh r1, [r0, r7]
	rsbs r1, r1, #0
	str r1, [r5, #0x5c]
	movs r1, #4
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _08091560
	b _0809177C
_08091560:
	ldr r0, _080915E8 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _0809156E
	b _0809168A
_0809156E:
	movs r2, #0x1e
	ldrsh r0, [r5, r2]
	lsls r0, r0, #1
	adds r1, r5, #0
	adds r1, #0x12
	adds r0, r1, r0
	movs r4, #0
	mov ip, r1
	adds r6, r5, #0
	adds r6, #0x18
	movs r3, #0xc
	adds r3, r3, r5
	mov sb, r3
	mov r8, ip
	ldrb r0, [r0]
	mov sl, r0
	adds r3, r6, #0
_08091590:
	movs r7, #0x1e
	ldrsh r2, [r5, r7]
	cmp r4, r2
	beq _080915AC
	lsls r0, r4, #1
	mov r7, r8
	adds r1, r7, r0
	ldrh r0, [r1]
	cmp sl, r0
	bne _080915AC
	lsls r0, r2, #1
	adds r0, r3, r0
	ldrh r0, [r0]
	strh r0, [r1]
_080915AC:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #2
	bls _08091590
	movs r4, #0
	adds r3, r6, #0
	ldr r1, _080915EC @ =gUnknown_0300088C
	mov r8, r1
	movs r2, #4
	add r2, r8
	mov sl, r2
_080915C4:
	lsls r1, r4, #1
	adds r2, r3, r1
	mov r7, ip
	adds r0, r7, r1
	ldrh r0, [r0]
	strh r0, [r2]
	ldrh r0, [r2]
	adds r2, r1, #0
	cmp r0, #1
	beq _08091604
	cmp r0, #1
	bgt _080915F0
	cmp r0, #0
	beq _080915F6
	b _08091622
	.align 2, 0
_080915E4: .4byte gBgScrollRegs
_080915E8: .4byte gPressedKeys
_080915EC: .4byte gUnknown_0300088C
_080915F0:
	cmp r0, #2
	beq _08091618
	b _08091622
_080915F6:
	ldr r1, _08091600 @ =gUnknown_080D73C0
	adds r0, r2, r1
	ldrh r0, [r0]
	mov r7, r8
	b _08091620
	.align 2, 0
_08091600: .4byte gUnknown_080D73C0
_08091604:
	ldr r1, _08091610 @ =gUnknown_080D73C0
	adds r0, r2, r1
	ldrh r0, [r0]
	ldr r7, _08091614 @ =gUnknown_0300088E
	b _08091620
	.align 2, 0
_08091610: .4byte gUnknown_080D73C0
_08091614: .4byte gUnknown_0300088E
_08091618:
	ldr r1, _08091664 @ =gUnknown_080D73C0
	adds r0, r2, r1
	ldrh r0, [r0]
	mov r7, sl
_08091620:
	strh r0, [r7]
_08091622:
	mov r0, sb
	adds r1, r0, r2
	adds r0, r3, r2
	ldrh r0, [r0]
	strh r0, [r1]
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #2
	bls _080915C4
	movs r1, #0x1e
	ldrsh r0, [r5, r1]
	lsls r0, r0, #1
	adds r0, r6, r0
	ldrh r0, [r0]
	movs r1, #0
	strh r0, [r5, #0x20]
	strb r1, [r5, #1]
	movs r0, #1
	strb r0, [r5, #4]
	ldr r2, _08091668 @ =gFlags
	ldr r0, [r2]
	movs r1, #0x80
	lsls r1, r1, #0xa
	ands r0, r1
	cmp r0, #0
	beq _08091670
	ldr r0, _0809166C @ =gUnknown_080D737C
	movs r1, #0
	movs r2, #0x10
	bl sub_80C4564
	b _0809168A
	.align 2, 0
_08091664: .4byte gUnknown_080D73C0
_08091668: .4byte gFlags
_0809166C: .4byte gUnknown_080D737C
_08091670:
	ldr r1, _080916E0 @ =0x040000D4
	ldr r3, _080916E4 @ =gUnknown_080D737C
	str r3, [r1]
	ldr r0, _080916E8 @ =gObjPalette
	str r0, [r1, #4]
	ldr r0, _080916EC @ =0x80000010
	str r0, [r1, #8]
	ldr r0, [r1, #8]
	ldr r7, _080916F0 @ =gFlags
	ldr r0, [r7]
	movs r1, #2
	orrs r0, r1
	str r0, [r7]
_0809168A:
	ldr r0, _080916F4 @ =gBgScrollRegs
	movs r1, #4
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _0809177C
	ldr r0, _080916F8 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq _0809177C
	movs r0, #0x6b
	bl m4aSongNumStart
	movs r4, #0
	movs r2, #0x12
	adds r2, r2, r5
	mov ip, r2
	adds r6, r5, #0
	adds r6, #0x18
	ldr r3, _080916FC @ =gUnknown_080D73C0
	ldr r7, _08091700 @ =gUnknown_0300088C
	mov sl, r7
	movs r0, #2
	add r0, sl
	mov sb, r0
	movs r1, #4
	add r1, sl
	mov r8, r1
_080916C4:
	lsls r2, r4, #1
	adds r1, r6, r2
	strh r4, [r1]
	mov r7, ip
	adds r0, r7, r2
	strh r4, [r0]
	ldrh r0, [r1]
	cmp r0, #1
	beq _08091714
	cmp r0, #1
	bgt _08091704
	cmp r0, #0
	beq _0809170A
	b _08091726
	.align 2, 0
_080916E0: .4byte 0x040000D4
_080916E4: .4byte gUnknown_080D737C
_080916E8: .4byte gObjPalette
_080916EC: .4byte 0x80000010
_080916F0: .4byte gFlags
_080916F4: .4byte gBgScrollRegs
_080916F8: .4byte gPressedKeys
_080916FC: .4byte gUnknown_080D73C0
_08091700: .4byte gUnknown_0300088C
_08091704:
	cmp r0, #2
	beq _0809171E
	b _08091726
_0809170A:
	adds r0, r2, r3
	ldrh r0, [r0]
	mov r1, sl
	strh r0, [r1]
	b _08091726
_08091714:
	adds r0, r2, r3
	ldrh r0, [r0]
	mov r2, sb
	strh r0, [r2]
	b _08091726
_0809171E:
	adds r0, r2, r3
	ldrh r0, [r0]
	mov r7, r8
	strh r0, [r7]
_08091726:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #2
	bls _080916C4
	movs r0, #1
	strb r0, [r5, #4]
	movs r1, #0x1e
	ldrsh r0, [r5, r1]
	lsls r0, r0, #1
	adds r0, r6, r0
	ldrh r0, [r0]
	strh r0, [r5, #0x20]
	ldr r1, _0809175C @ =gFlags
	ldr r2, [r1]
	movs r0, #0x80
	lsls r0, r0, #0xa
	ands r0, r2
	cmp r0, #0
	beq _08091764
	ldr r0, _08091760 @ =gUnknown_080D737C
	movs r1, #0
	movs r2, #0x10
	bl sub_80C4564
	b _0809177C
	.align 2, 0
_0809175C: .4byte gFlags
_08091760: .4byte gUnknown_080D737C
_08091764:
	ldr r1, _080917EC @ =0x040000D4
	ldr r0, _080917F0 @ =gUnknown_080D737C
	str r0, [r1]
	ldr r0, _080917F4 @ =gObjPalette
	str r0, [r1, #4]
	ldr r0, _080917F8 @ =0x80000010
	str r0, [r1, #8]
	ldr r0, [r1, #8]
	movs r0, #2
	orrs r2, r0
	ldr r3, _080917FC @ =gFlags
	str r2, [r3]
_0809177C:
	ldr r0, _08091800 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0809181E
	ldrb r0, [r5, #1]
	cmp r0, #0
	beq _080917CA
	movs r4, #0
	adds r6, r5, #0
	adds r6, #0x18
	mov r8, r6
	movs r7, #0xc
	adds r7, r7, r5
	mov ip, r7
	adds r7, r5, #0
	adds r7, #0x12
_080917A0:
	lsls r1, r4, #1
	mov r0, r8
	adds r3, r0, r1
	mov r0, ip
	adds r2, r0, r1
	ldrh r0, [r2]
	strh r0, [r3]
	adds r1, r7, r1
	ldrh r0, [r2]
	strh r0, [r1]
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #2
	bls _080917A0
	movs r1, #0x1e
	ldrsh r0, [r5, r1]
	lsls r0, r0, #1
	adds r0, r6, r0
	ldrh r0, [r0]
	strh r0, [r5, #0x20]
_080917CA:
	movs r0, #0
	strb r0, [r5, #1]
	movs r0, #1
	strb r0, [r5, #4]
	ldr r2, _080917FC @ =gFlags
	ldr r0, [r2]
	movs r1, #0x80
	lsls r1, r1, #0xa
	ands r0, r1
	cmp r0, #0
	beq _08091804
	ldr r0, _080917F0 @ =gUnknown_080D737C
	movs r1, #0
	movs r2, #0x10
	bl sub_80C4564
	b _0809181E
	.align 2, 0
_080917EC: .4byte 0x040000D4
_080917F0: .4byte gUnknown_080D737C
_080917F4: .4byte gObjPalette
_080917F8: .4byte 0x80000010
_080917FC: .4byte gFlags
_08091800: .4byte gPressedKeys
_08091804:
	ldr r1, _08091850 @ =0x040000D4
	ldr r3, _08091854 @ =gUnknown_080D737C
	str r3, [r1]
	ldr r0, _08091858 @ =gObjPalette
	str r0, [r1, #4]
	ldr r0, _0809185C @ =0x80000010
	str r0, [r1, #8]
	ldr r0, [r1, #8]
	ldr r7, _08091860 @ =gFlags
	ldr r0, [r7]
	movs r1, #2
	orrs r0, r1
	str r0, [r7]
_0809181E:
	ldr r0, _08091864 @ =gBgScrollRegs
	movs r1, #4
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0809182A
	b _08091978
_0809182A:
	ldr r0, _08091868 @ =gRepeatedKeys
	ldrh r1, [r0]
	movs r0, #0xc0
	ands r0, r1
	cmp r0, #0
	beq _080918F6
	movs r0, #0x40
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0
	beq _08091870
	ldrh r1, [r5, #0x1e]
	movs r2, #0x1e
	ldrsh r0, [r5, r2]
	cmp r0, #0
	bne _0809186C
	movs r0, #2
	b _08091888
	.align 2, 0
_08091850: .4byte 0x040000D4
_08091854: .4byte gUnknown_080D737C
_08091858: .4byte gObjPalette
_0809185C: .4byte 0x80000010
_08091860: .4byte gFlags
_08091864: .4byte gBgScrollRegs
_08091868: .4byte gRepeatedKeys
_0809186C:
	subs r0, r1, #1
	b _08091888
_08091870:
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _0809188A
	ldrh r1, [r5, #0x1e]
	movs r3, #0x1e
	ldrsh r0, [r5, r3]
	cmp r0, #2
	bne _08091886
	strh r2, [r5, #0x1e]
	b _0809188A
_08091886:
	adds r0, r1, #1
_08091888:
	strh r0, [r5, #0x1e]
_0809188A:
	movs r4, #0
	adds r6, r5, #0
	adds r6, #0x18
	adds r3, r5, #0
	adds r3, #0x12
	adds r2, r6, #0
_08091896:
	lsls r0, r4, #1
	adds r1, r3, r0
	adds r0, r2, r0
	ldrh r0, [r0]
	strh r0, [r1]
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #2
	bls _08091896
	movs r7, #0x1e
	ldrsh r0, [r5, r7]
	lsls r0, r0, #1
	adds r0, r6, r0
	ldrh r0, [r0]
	strh r0, [r5, #0x20]
	movs r0, #1
	strb r0, [r5, #4]
	ldr r1, _080918D4 @ =gFlags
	ldr r0, [r1]
	movs r1, #0x80
	lsls r1, r1, #0xa
	ands r0, r1
	cmp r0, #0
	beq _080918DC
	ldr r0, _080918D8 @ =gUnknown_080D737C
	movs r1, #0
	movs r2, #0x10
	bl sub_80C4564
	b _080918F6
	.align 2, 0
_080918D4: .4byte gFlags
_080918D8: .4byte gUnknown_080D737C
_080918DC:
	ldr r1, _0809192C @ =0x040000D4
	ldr r2, _08091930 @ =gUnknown_080D737C
	str r2, [r1]
	ldr r0, _08091934 @ =gObjPalette
	str r0, [r1, #4]
	ldr r0, _08091938 @ =0x80000010
	str r0, [r1, #8]
	ldr r0, [r1, #8]
	ldr r3, _0809193C @ =gFlags
	ldr r0, [r3]
	movs r1, #2
	orrs r0, r1
	str r0, [r3]
_080918F6:
	ldr r0, _08091940 @ =gBgScrollRegs
	movs r7, #4
	ldrsh r0, [r0, r7]
	cmp r0, #0
	bne _08091978
	ldr r0, _08091944 @ =gRepeatedKeys
	ldrh r1, [r0]
	movs r0, #0x30
	ands r0, r1
	cmp r0, #0
	beq _08091978
	movs r0, #0x20
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0
	beq _08091948
	ldrh r0, [r5, #0x20]
	subs r0, #1
	strh r0, [r5, #0x20]
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _08091960
	movs r0, #2
	strh r0, [r5, #0x20]
	b _08091960
	.align 2, 0
_0809192C: .4byte 0x040000D4
_08091930: .4byte gUnknown_080D737C
_08091934: .4byte gObjPalette
_08091938: .4byte 0x80000010
_0809193C: .4byte gFlags
_08091940: .4byte gBgScrollRegs
_08091944: .4byte gRepeatedKeys
_08091948:
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _08091960
	ldrh r0, [r5, #0x20]
	adds r0, #1
	strh r0, [r5, #0x20]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #2
	ble _08091960
	strh r2, [r5, #0x20]
_08091960:
	movs r1, #0x1e
	ldrsh r0, [r5, r1]
	lsls r0, r0, #1
	adds r1, r5, #0
	adds r1, #0x12
	adds r1, r1, r0
	ldrh r0, [r5, #0x20]
	movs r2, #0
	strh r0, [r1]
	movs r0, #1
	strb r0, [r5, #1]
	strb r2, [r5, #4]
_08091978:
	ldrb r0, [r5, #4]
	cmp r0, #0
	bne _08091A24
	ldrh r0, [r5, #0x22]
	ldrb r2, [r5, #3]
	cmp r0, r2
	blo _08091A1E
	ldrb r0, [r5, #2]
	cmp r0, #0
	bne _080919DC
	ldr r3, _080919A8 @ =gFlags
	ldr r2, [r3]
	movs r0, #0x80
	lsls r0, r0, #0xa
	ands r0, r2
	cmp r0, #0
	beq _080919B0
	ldr r0, _080919AC @ =gUnknown_080D737C
	movs r1, #0
	movs r2, #0x10
	bl sub_80C4564
	b _080919C6
	.align 2, 0
_080919A8: .4byte gFlags
_080919AC: .4byte gUnknown_080D737C
_080919B0:
	ldr r1, _080919CC @ =0x040000D4
	ldr r0, _080919D0 @ =gUnknown_080D737C
	str r0, [r1]
	ldr r0, _080919D4 @ =gObjPalette
	str r0, [r1, #4]
	ldr r0, _080919D8 @ =0x80000010
	str r0, [r1, #8]
	ldr r0, [r1, #8]
	movs r0, #2
	orrs r2, r0
	str r2, [r3]
_080919C6:
	movs r0, #1
	b _08091A18
	.align 2, 0
_080919CC: .4byte 0x040000D4
_080919D0: .4byte gUnknown_080D737C
_080919D4: .4byte gObjPalette
_080919D8: .4byte 0x80000010
_080919DC:
	ldr r3, _080919F8 @ =gFlags
	ldr r2, [r3]
	movs r0, #0x80
	lsls r0, r0, #0xa
	ands r0, r2
	cmp r0, #0
	beq _08091A00
	ldr r0, _080919FC @ =gUnknown_080D739C
	movs r1, #0
	movs r2, #0x10
	bl sub_80C4564
	b _08091A16
	.align 2, 0
_080919F8: .4byte gFlags
_080919FC: .4byte gUnknown_080D739C
_08091A00:
	ldr r1, _08091A34 @ =0x040000D4
	ldr r0, _08091A38 @ =gUnknown_080D739C
	str r0, [r1]
	ldr r0, _08091A3C @ =gObjPalette
	str r0, [r1, #4]
	ldr r0, _08091A40 @ =0x80000010
	str r0, [r1, #8]
	ldr r0, [r1, #8]
	movs r0, #2
	orrs r2, r0
	str r2, [r3]
_08091A16:
	movs r0, #0
_08091A18:
	strb r0, [r5, #2]
	movs r0, #0
	strh r0, [r5, #0x22]
_08091A1E:
	ldrh r0, [r5, #0x22]
	adds r0, #1
	strh r0, [r5, #0x22]
_08091A24:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08091A34: .4byte 0x040000D4
_08091A38: .4byte gUnknown_080D739C
_08091A3C: .4byte gObjPalette
_08091A40: .4byte 0x80000010

	thumb_func_start sub_8091A44
sub_8091A44: @ 0x08091A44
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	mov ip, r0
	movs r5, #0
	ldr r6, _08091ADC @ =gBgScrollRegs
	movs r0, #4
	ldrsh r1, [r6, r0]
	movs r0, #0x70
	subs r0, r0, r1
	mov sb, r0
	movs r0, #6
	ldrsh r1, [r6, r0]
	mov r8, r1
	mov r7, ip
	adds r7, #0x24
_08091A66:
	lsls r2, r5, #3
	adds r4, r7, r2
	mov r1, sb
	str r1, [r4]
	mov r3, ip
	adds r3, #0x28
	adds r3, r3, r2
	lsls r0, r5, #4
	adds r0, #0x2d
	mov r1, r8
	subs r0, r0, r1
	adds r0, r0, r2
	str r0, [r3]
	mov r1, ip
	adds r1, #0x3c
	adds r1, r1, r2
	ldr r0, [r4]
	subs r0, #0x46
	str r0, [r1]
	mov r0, ip
	adds r0, #0x40
	adds r0, r0, r2
	ldr r1, [r3]
	str r1, [r0]
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #2
	bls _08091A66
	movs r0, #4
	ldrsh r1, [r6, r0]
	movs r0, #0x78
	subs r0, r0, r1
	mov r1, ip
	str r0, [r1, #0x54]
	movs r0, #6
	ldrsh r1, [r6, r0]
	movs r0, #0x7b
	subs r0, r0, r1
	mov r1, ip
	str r0, [r1, #0x58]
	ldrh r1, [r6, #4]
	movs r0, #0x78
	subs r0, r0, r1
	mov r1, ip
	adds r1, #0x64
	strh r0, [r1]
	ldrh r1, [r6, #6]
	movs r0, #0x1e
	subs r0, r0, r1
	mov r1, ip
	adds r1, #0x66
	strh r0, [r1]
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08091ADC: .4byte gBgScrollRegs

	thumb_func_start sub_8091AE0
sub_8091AE0: @ 0x08091AE0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	movs r6, #0
	ldr r7, _08091B44 @ =gUnknown_080D7264
	movs r0, #0
	mov r8, r0
_08091AF0:
	lsls r0, r6, #2
	adds r0, r0, r6
	lsls r0, r0, #3
	adds r0, #0x6c
	adds r4, r5, r0
	lsls r1, r6, #1
	adds r0, r5, #0
	adds r0, #0x12
	adds r0, r0, r1
	ldrb r1, [r0]
	ldrb r0, [r5]
	lsls r0, r0, #2
	adds r0, r1, r0
	lsls r0, r0, #3
	adds r0, r0, r7
	ldrh r0, [r0]
	strh r0, [r4, #0xc]
	ldrb r0, [r5]
	lsls r0, r0, #2
	adds r1, r1, r0
	lsls r1, r1, #3
	adds r1, r1, r7
	ldrb r0, [r1, #2]
	strb r0, [r4, #0x1a]
	lsls r1, r6, #3
	adds r0, r5, #0
	adds r0, #0x24
	adds r0, r0, r1
	ldr r0, [r0]
	strh r0, [r4, #0x10]
	adds r0, r5, #0
	adds r0, #0x28
	adds r0, r0, r1
	ldr r0, [r0]
	strh r0, [r4, #0x12]
	movs r1, #0x1e
	ldrsh r0, [r5, r1]
	cmp r6, r0
	bne _08091B48
	mov r0, r8
	b _08091B4A
	.align 2, 0
_08091B44: .4byte gUnknown_080D7264
_08091B48:
	movs r0, #1
_08091B4A:
	strb r0, [r4, #0x1f]
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #0xb
	orrs r0, r1
	str r0, [r4, #8]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #2
	bls _08091AF0
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8091B78
sub_8091B78: @ 0x08091B78
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #0
_08091B7E:
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #3
	adds r0, #0xe4
	adds r0, r5, r0
	ldr r2, _08091BC0 @ =gUnknown_080D731C
	lsls r3, r4, #3
	adds r2, r3, r2
	ldrh r1, [r2]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	adds r1, r5, #0
	adds r1, #0x3c
	adds r1, r1, r3
	ldr r1, [r1]
	strh r1, [r0, #0x10]
	adds r1, r5, #0
	adds r1, #0x40
	adds r1, r1, r3
	ldr r1, [r1]
	strh r1, [r0, #0x12]
	bl DisplaySprite
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #2
	bls _08091B7E
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08091BC0: .4byte gUnknown_080D731C

	thumb_func_start sub_8091BC4
sub_8091BC4: @ 0x08091BC4
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	movs r5, #0
	ldr r7, _08091BF4 @ =gUnknown_080D7024
	ldr r6, _08091BF8 @ =gUnknown_080D7234
_08091BCE:
	lsls r1, r5, #2
	adds r0, r1, r5
	lsls r0, r0, #3
	movs r2, #0xae
	lsls r2, r2, #1
	adds r0, r0, r2
	adds r2, r4, r0
	adds r3, r1, #0
	cmp r5, #0
	bne _08091BFC
	ldrb r0, [r4]
	lsls r0, r0, #3
	adds r0, r0, r7
	ldrh r0, [r0]
	strh r0, [r2, #0xc]
	ldrb r0, [r4]
	lsls r0, r0, #3
	adds r0, r0, r7
	b _08091C0C
	.align 2, 0
_08091BF4: .4byte gUnknown_080D7024
_08091BF8: .4byte gUnknown_080D7234
_08091BFC:
	ldrb r0, [r4]
	lsls r0, r0, #3
	adds r0, r0, r6
	ldrh r0, [r0]
	strh r0, [r2, #0xc]
	ldrb r0, [r4]
	lsls r0, r0, #3
	adds r0, r0, r6
_08091C0C:
	ldrb r0, [r0, #2]
	strb r0, [r2, #0x1a]
	ldr r0, [r4, #0x54]
	lsls r1, r5, #1
	adds r0, r0, r1
	strh r0, [r2, #0x10]
	ldr r0, [r4, #0x58]
	lsls r1, r5, #3
	adds r0, r0, r1
	adds r0, r0, r3
	strh r0, [r2, #0x12]
	adds r0, r2, #0
	bl DisplaySprite
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #1
	bls _08091BCE
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8091C38
sub_8091C38: @ 0x08091C38
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	movs r5, #0
_08091C3E:
	lsls r2, r5, #2
	adds r4, r2, r5
	lsls r4, r4, #3
	movs r0, #0xd6
	lsls r0, r0, #1
	adds r4, r4, r0
	adds r4, r6, r4
	movs r0, #0x1e
	ldrsh r1, [r6, r0]
	lsls r1, r1, #3
	adds r0, r6, #0
	adds r0, #0x24
	adds r0, r0, r1
	ldr r1, [r0]
	lsls r0, r5, #6
	subs r0, #0x12
	adds r1, r1, r0
	lsls r0, r5, #4
	adds r1, r1, r0
	lsls r0, r5, #3
	adds r1, r1, r0
	adds r1, r1, r2
	strh r1, [r4, #0x10]
	movs r0, #0x1e
	ldrsh r1, [r6, r0]
	lsls r1, r1, #3
	adds r0, r6, #0
	adds r0, #0x28
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, #4
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #1
	bls _08091C3E
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8091C9C
sub_8091C9C: @ 0x08091C9C
	bx lr
	.align 2, 0

	thumb_func_start sub_8091CA0
sub_8091CA0: @ 0x08091CA0
	push {lr}
	adds r3, r0, #0
	movs r1, #0x89
	lsls r1, r1, #2
	adds r0, r3, r1
	ldr r2, _08091CD8 @ =gUnknown_080D7334
	ldrb r1, [r3]
	lsls r1, r1, #3
	adds r1, r1, r2
	ldrh r1, [r1]
	strh r1, [r0, #0xc]
	ldrb r1, [r3]
	lsls r1, r1, #3
	adds r1, r1, r2
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	adds r1, r3, #0
	adds r1, #0x64
	ldrh r1, [r1]
	strh r1, [r0, #0x10]
	adds r1, r3, #0
	adds r1, #0x66
	ldrh r1, [r1]
	strh r1, [r0, #0x12]
	bl DisplaySprite
	pop {r0}
	bx r0
	.align 2, 0
_08091CD8: .4byte gUnknown_080D7334

	thumb_func_start sub_8091CDC
sub_8091CDC: @ 0x08091CDC
	push {lr}
	adds r3, r0, #0
	movs r1, #0xfe
	lsls r1, r1, #1
	adds r0, r3, r1
	movs r1, #0x1e
	ldrsh r2, [r3, r1]
	lsls r2, r2, #3
	adds r1, r3, #0
	adds r1, #0x3c
	adds r1, r1, r2
	ldr r1, [r1]
	subs r1, #8
	strh r1, [r0, #0x10]
	movs r1, #0x1e
	ldrsh r2, [r3, r1]
	lsls r2, r2, #3
	adds r1, r3, #0
	adds r1, #0x40
	adds r1, r1, r2
	ldr r1, [r1]
	subs r1, #4
	strh r1, [r0, #0x12]
	bl DisplaySprite
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8091D14
sub_8091D14: @ 0x08091D14
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r5, r0, #0
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	ldr r1, _08091DAC @ =gDispCnt
	movs r2, #0x9a
	lsls r2, r2, #5
	adds r0, r2, #0
	strh r0, [r1]
	ldr r0, _08091DB0 @ =sub_809240C
	movs r1, #0xe0
	lsls r1, r1, #2
	ldr r2, _08091DB4 @ =0x00000101
	ldr r3, _08091DB8 @ =sub_8093950
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	ldrh r6, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r6, r0
	movs r4, #0
	strb r5, [r6, #1]
	adds r0, r6, #0
	bl sub_8091DD0
	str r4, [sp, #4]
	ldr r2, _08091DBC @ =0x040000D4
	add r0, sp, #4
	str r0, [r2]
	ldr r0, _08091DC0 @ =gBgCntRegs
	ldrh r1, [r0, #4]
	movs r0, #0xc
	ands r0, r1
	lsls r0, r0, #0xc
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r0, r0, r1
	str r0, [r2, #4]
	ldr r0, _08091DC4 @ =0x85000010
	str r0, [r2, #8]
	ldr r0, [r2, #8]
	ldr r3, _08091DC8 @ =gUnknown_03006230
	strb r4, [r3]
	ldr r0, _08091DCC @ =gUnknown_03003590
	strb r4, [r0]
	strb r4, [r0, #1]
	movs r1, #0xff
	strb r1, [r0, #2]
	movs r2, #0x40
	strb r2, [r0, #3]
	strb r4, [r3, #1]
	strb r4, [r0, #4]
	strb r4, [r0, #5]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #6]
	strb r2, [r0, #7]
	strb r4, [r3, #2]
	strb r4, [r0, #8]
	strb r4, [r0, #9]
	strb r1, [r0, #0xa]
	strb r2, [r0, #0xb]
	adds r0, r6, #0
	bl sub_8092320
	adds r0, r6, #0
	bl sub_8091E84
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08091DAC: .4byte gDispCnt
_08091DB0: .4byte sub_809240C
_08091DB4: .4byte 0x00000101
_08091DB8: .4byte sub_8093950
_08091DBC: .4byte 0x040000D4
_08091DC0: .4byte gBgCntRegs
_08091DC4: .4byte 0x85000010
_08091DC8: .4byte gUnknown_03006230
_08091DCC: .4byte gUnknown_03003590

	thumb_func_start sub_8091DD0
sub_8091DD0: @ 0x08091DD0
	push {r4, lr}
	ldr r1, _08091E70 @ =gSaveGame
	ldr r2, _08091E74 @ =0x00000366
	adds r1, r1, r2
	ldrb r1, [r1]
	movs r2, #0
	strb r1, [r0]
	movs r3, #0
	strh r2, [r0, #0xe]
	strh r2, [r0, #0xa]
	strh r2, [r0, #0x20]
	strh r2, [r0, #0x22]
	strb r3, [r0, #2]
	strb r3, [r0, #3]
	strh r2, [r0, #0xc]
	strb r3, [r0, #4]
	strb r3, [r0, #5]
	strb r3, [r0, #6]
	movs r4, #0x80
	lsls r4, r4, #1
	strh r4, [r0, #0x14]
	strh r4, [r0, #0x16]
	movs r1, #0x80
	lsls r1, r1, #4
	strh r1, [r0, #0x24]
	strh r1, [r0, #0x26]
	strb r3, [r0, #7]
	strh r2, [r0, #0x1c]
	strh r2, [r0, #0x1e]
	strh r2, [r0, #0x10]
	ldr r1, _08091E78 @ =0xFFFFF200
	str r1, [r0, #0x2c]
	movs r1, #0xc0
	lsls r1, r1, #7
	str r1, [r0, #0x30]
	movs r2, #0x96
	lsls r2, r2, #8
	str r2, [r0, #0x5c]
	movs r3, #0xc0
	lsls r3, r3, #5
	str r3, [r0, #0x60]
	movs r1, #0x1a
	str r1, [r0, #0x3c]
	movs r1, #0x34
	str r1, [r0, #0x40]
	movs r1, #0x90
	strh r1, [r0, #0x12]
	movs r1, #0xa0
	lsls r1, r1, #4
	adds r2, r2, r1
	str r2, [r0, #0x44]
	adds r3, r3, r4
	str r3, [r0, #0x48]
	ldr r1, _08091E7C @ =0xFFFF7400
	str r1, [r0, #0x4c]
	movs r1, #0x80
	lsls r1, r1, #5
	str r1, [r0, #0x50]
	movs r2, #0xd9
	lsls r2, r2, #8
	str r2, [r0, #0x54]
	movs r1, #0x8c
	lsls r1, r1, #8
	str r1, [r0, #0x58]
	str r2, [r0, #0x34]
	str r1, [r0, #0x38]
	str r2, [r0, #0x64]
	str r1, [r0, #0x68]
	movs r1, #0xa0
	lsls r1, r1, #3
	str r1, [r0, #0x6c]
	movs r1, #0xa8
	lsls r1, r1, #6
	str r1, [r0, #0x70]
	ldr r1, _08091E80 @ =0x06010000
	str r1, [r0, #0x28]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08091E70: .4byte gSaveGame
_08091E74: .4byte 0x00000366
_08091E78: .4byte 0xFFFFF200
_08091E7C: .4byte 0xFFFF7400
_08091E80: .4byte 0x06010000

	thumb_func_start sub_8091E84
sub_8091E84: @ 0x08091E84
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	adds r6, r0, #0
	movs r1, #0
	ldrb r2, [r6]
	ldrb r0, [r6, #1]
	cmp r0, #1
	bne _08091E9E
	movs r1, #1
_08091E9E:
	movs r0, #0x8a
	lsls r0, r0, #1
	adds r7, r6, r0
	ldr r0, [r6, #0x28]
	str r0, [r7]
	ldr r3, _08092094 @ =gUnknown_080D73D0
	lsls r2, r2, #1
	adds r2, r1, r2
	lsls r2, r2, #3
	adds r0, r3, #4
	adds r0, r2, r0
	ldr r1, [r0]
	lsls r1, r1, #5
	ldr r0, [r6, #0x28]
	adds r0, r0, r1
	str r0, [r6, #0x28]
	adds r2, r2, r3
	ldrh r0, [r2]
	movs r1, #0
	mov sb, r1
	movs r4, #0
	strh r0, [r7, #0xc]
	ldrb r0, [r2, #2]
	strb r0, [r7, #0x1a]
	movs r0, #0xff
	strb r0, [r7, #0x1b]
	ldr r0, [r6, #0x4c]
	asrs r0, r0, #8
	strh r0, [r7, #0x10]
	ldr r0, [r6, #0x50]
	asrs r0, r0, #8
	strh r0, [r7, #0x12]
	movs r2, #0xc0
	mov r8, r2
	mov r3, r8
	strh r3, [r7, #0x14]
	strh r4, [r7, #0xe]
	strh r4, [r7, #0x16]
	movs r5, #0x10
	strb r5, [r7, #0x1c]
	mov r0, sb
	strb r0, [r7, #0x1f]
	str r4, [r7, #8]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	movs r1, #0xc6
	lsls r1, r1, #1
	adds r7, r6, r1
	ldr r0, [r6, #0x28]
	str r0, [r7]
	ldr r2, _08092098 @ =gUnknown_080D7430
	ldr r1, [r2, #4]
	lsls r1, r1, #5
	ldr r0, [r6, #0x28]
	adds r0, r0, r1
	str r0, [r6, #0x28]
	ldrh r0, [r2]
	strh r0, [r7, #0xc]
	ldrb r0, [r2, #2]
	strb r0, [r7, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r7, #0x1b]
	ldr r0, [r6, #0x64]
	asrs r0, r0, #8
	strh r0, [r7, #0x10]
	ldr r0, [r6, #0x68]
	asrs r0, r0, #8
	strh r0, [r7, #0x12]
	mov r2, r8
	strh r2, [r7, #0x14]
	strh r4, [r7, #0xe]
	strh r4, [r7, #0x16]
	strb r5, [r7, #0x1c]
	mov r3, sb
	strb r3, [r7, #0x1f]
	str r4, [r7, #8]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	movs r0, #0x9e
	lsls r0, r0, #1
	adds r7, r6, r0
	ldr r0, [r6, #0x28]
	str r0, [r7]
	ldr r2, _0809209C @ =gUnknown_080D7438
	ldr r1, [r2, #4]
	lsls r1, r1, #5
	ldr r0, [r6, #0x28]
	adds r0, r0, r1
	str r0, [r6, #0x28]
	ldrh r0, [r2]
	strh r0, [r7, #0xc]
	ldrb r0, [r2, #2]
	strb r0, [r7, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r7, #0x1b]
	ldr r0, [r6, #0x54]
	asrs r0, r0, #8
	strh r0, [r7, #0x10]
	ldr r0, [r6, #0x58]
	asrs r0, r0, #8
	strh r0, [r7, #0x12]
	mov r1, r8
	strh r1, [r7, #0x14]
	strh r4, [r7, #0xe]
	strh r4, [r7, #0x16]
	strb r5, [r7, #0x1c]
	mov r2, sb
	strb r2, [r7, #0x1f]
	str r4, [r7, #8]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	adds r7, r6, #0
	adds r7, #0x74
	ldr r1, [r6, #0x28]
	str r1, [r6, #0x74]
	ldr r2, _080920A0 @ =gUnknown_080D7440
	ldr r0, [r2, #4]
	lsls r0, r0, #5
	adds r1, r1, r0
	str r1, [r6, #0x28]
	ldrh r0, [r2]
	strh r0, [r7, #0xc]
	ldrb r0, [r2, #2]
	strb r0, [r7, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r7, #0x1b]
	ldr r0, [r6, #0x34]
	asrs r0, r0, #8
	strh r0, [r7, #0x10]
	ldr r0, [r6, #0x38]
	asrs r0, r0, #8
	strh r0, [r7, #0x12]
	movs r0, #0x80
	strh r0, [r7, #0x14]
	strh r4, [r7, #0xe]
	strh r4, [r7, #0x16]
	strb r5, [r7, #0x1c]
	mov r3, sb
	strb r3, [r7, #0x1f]
	str r4, [r7, #8]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	movs r0, #0xb2
	lsls r0, r0, #1
	adds r7, r6, r0
	ldr r0, [r6, #0x28]
	str r0, [r7]
	ldr r2, _080920A4 @ =gUnknown_080D73C8
	ldr r1, [r2, #4]
	lsls r1, r1, #5
	ldr r0, [r6, #0x28]
	adds r0, r0, r1
	str r0, [r6, #0x28]
	ldrh r0, [r2]
	strh r0, [r7, #0xc]
	ldrb r0, [r2, #2]
	strb r0, [r7, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r7, #0x1b]
	ldr r0, [r6, #0x5c]
	asrs r0, r0, #8
	strh r0, [r7, #0x10]
	ldr r0, [r6, #0x60]
	asrs r0, r0, #8
	strh r0, [r7, #0x12]
	mov r1, r8
	strh r1, [r7, #0x14]
	strh r4, [r7, #0xe]
	strh r4, [r7, #0x16]
	strb r5, [r7, #0x1c]
	mov r2, sb
	strb r2, [r7, #0x1f]
	str r4, [r7, #8]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	movs r3, #0xbd
	lsls r3, r3, #2
	adds r4, r6, r3
	movs r3, #0
	adds r0, r6, #0
	adds r0, #0xec
	str r0, [sp, #8]
	ldr r1, _080920A8 @ =gUnknown_080D7448
	mov r8, r1
	movs r5, #0
	ldrb r2, [r1, #2]
	mov sl, r2
	ldr r0, [r1, #4]
	lsls r0, r0, #5
	mov sb, r0
_0809202C:
	lsls r0, r3, #2
	adds r0, r0, r3
	lsls r0, r0, #3
	adds r0, #0x9c
	adds r7, r6, r0
	ldr r0, [r6, #0x28]
	str r0, [r7]
	ldr r0, [r6, #0x28]
	add r0, sb
	str r0, [r6, #0x28]
	mov r1, r8
	ldrh r0, [r1]
	strh r0, [r7, #0xc]
	mov r2, sl
	strb r2, [r7, #0x1a]
	movs r0, #0xff
	strb r0, [r7, #0x1b]
	ldr r0, [r6, #0x3c]
	asrs r0, r0, #8
	strh r0, [r7, #0x10]
	ldr r0, [r6, #0x40]
	asrs r0, r0, #8
	strh r0, [r7, #0x12]
	movs r0, #0x80
	strh r0, [r7, #0x14]
	strh r5, [r7, #0xe]
	strh r5, [r7, #0x16]
	movs r0, #0x10
	strb r0, [r7, #0x1c]
	movs r0, #0
	strb r0, [r7, #0x1f]
	cmp r3, #0
	beq _080920AC
	movs r0, #0xe1
	str r0, [r7, #8]
	strh r5, [r4]
	ldrh r0, [r6, #0x14]
	strh r0, [r4, #2]
	ldrh r0, [r6, #0x16]
	strh r0, [r4, #4]
	ldrh r0, [r7, #0x10]
	strh r0, [r4, #6]
	ldrh r0, [r7, #0x12]
	strh r0, [r4, #8]
	adds r0, r7, #0
	adds r1, r4, #0
	str r3, [sp, #0x10]
	bl TransformSprite
	ldr r3, [sp, #0x10]
	b _080920AE
	.align 2, 0
_08092094: .4byte gUnknown_080D73D0
_08092098: .4byte gUnknown_080D7430
_0809209C: .4byte gUnknown_080D7438
_080920A0: .4byte gUnknown_080D7440
_080920A4: .4byte gUnknown_080D73C8
_080920A8: .4byte gUnknown_080D7448
_080920AC:
	str r3, [r7, #8]
_080920AE:
	adds r0, r7, #0
	str r3, [sp, #0x10]
	bl UpdateSpriteAnimation
	ldr r3, [sp, #0x10]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #1
	bls _0809202C
	ldr r7, [sp, #8]
	ldr r0, [r6, #0x28]
	str r0, [r7]
	ldr r2, _080921A0 @ =gUnknown_080D7450
	ldr r1, [r2, #4]
	lsls r1, r1, #5
	ldr r0, [r6, #0x28]
	adds r0, r0, r1
	str r0, [r6, #0x28]
	ldrh r0, [r2]
	movs r1, #0
	mov sb, r1
	movs r1, #0
	strh r0, [r7, #0xc]
	ldrb r0, [r2, #2]
	strb r0, [r7, #0x1a]
	movs r0, #0xff
	strb r0, [r7, #0x1b]
	ldr r0, [r6, #0x44]
	asrs r0, r0, #8
	strh r0, [r7, #0x10]
	ldr r0, [r6, #0x48]
	asrs r0, r0, #8
	strh r0, [r7, #0x12]
	movs r0, #0x80
	strh r0, [r7, #0x14]
	strh r1, [r7, #0xe]
	strh r1, [r7, #0x16]
	movs r2, #0x10
	mov r8, r2
	mov r3, r8
	strb r3, [r7, #0x1c]
	mov r0, sb
	strb r0, [r7, #0x1f]
	str r1, [r7, #8]
	adds r0, r7, #0
	str r1, [sp, #0xc]
	bl UpdateSpriteAnimation
	movs r2, #0xda
	lsls r2, r2, #1
	adds r7, r6, r2
	ldr r0, [r6, #0x28]
	str r0, [r7]
	ldr r4, _080921A4 @ =gUnknown_080D7458
	ldr r5, [r4, #4]
	lsls r5, r5, #5
	ldr r0, [r6, #0x28]
	adds r0, r0, r5
	str r0, [r6, #0x28]
	ldrh r0, [r4]
	strh r0, [r7, #0xc]
	ldrb r0, [r6, #2]
	ldrb r3, [r4, #2]
	adds r0, r0, r3
	strb r0, [r7, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r7, #0x1b]
	ldr r0, [r6, #0x3c]
	asrs r0, r0, #8
	strh r0, [r7, #0x10]
	ldr r0, [r6, #0x40]
	asrs r0, r0, #8
	strh r0, [r7, #0x12]
	movs r0, #0x40
	strh r0, [r7, #0x14]
	ldr r1, [sp, #0xc]
	strh r1, [r7, #0xe]
	strh r1, [r7, #0x16]
	mov r0, r8
	strb r0, [r7, #0x1c]
	mov r2, sb
	strb r2, [r7, #0x1f]
	str r1, [r7, #8]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	movs r3, #0
	mov sl, r4
	str r5, [sp]
	movs r0, #0
	mov sb, r0
_08092168:
	lsls r0, r3, #2
	adds r0, r0, r3
	lsls r0, r0, #3
	movs r1, #0xee
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r7, r6, r0
	ldr r0, [r6, #0x28]
	str r0, [r7]
	ldr r0, [r6, #0x28]
	ldr r2, [sp]
	adds r0, r0, r2
	str r0, [r6, #0x28]
	ldr r0, _080921A8 @ =gSaveGame
	lsls r1, r3, #1
	adds r0, #4
	adds r1, r1, r0
	ldrh r2, [r1]
	ldr r0, _080921AC @ =0x0000FFFF
	cmp r2, r0
	beq _080921C2
	strb r2, [r7, #0x1a]
	ldrh r0, [r1]
	cmp r0, #0xff
	bls _080921B4
	ldr r0, _080921B0 @ =gUnknown_080D7460
	ldrh r0, [r0]
	b _080921B8
	.align 2, 0
_080921A0: .4byte gUnknown_080D7450
_080921A4: .4byte gUnknown_080D7458
_080921A8: .4byte gSaveGame
_080921AC: .4byte 0x0000FFFF
_080921B0: .4byte gUnknown_080D7460
_080921B4:
	mov r1, sl
	ldrh r0, [r1]
_080921B8:
	strh r0, [r7, #0xc]
	ldrb r0, [r6, #5]
	adds r0, #1
	strb r0, [r6, #5]
	b _080921CC
_080921C2:
	mov r2, sl
	ldrh r0, [r2]
	strh r0, [r7, #0xc]
	mov r0, sb
	strb r0, [r7, #0x1a]
_080921CC:
	movs r2, #1
	rsbs r2, r2, #0
	mov r1, sp
	strb r2, [r1, #4]
	movs r0, #0xff
	strb r0, [r7, #0x1b]
	ldr r0, [r6, #0x44]
	asrs r0, r0, #8
	movs r4, #0
	strh r0, [r7, #0x10]
	ldr r0, [r6, #0x48]
	asrs r0, r0, #8
	strh r0, [r7, #0x12]
	movs r0, #0x40
	mov r8, r0
	mov r1, r8
	strh r1, [r7, #0x14]
	strh r4, [r7, #0xe]
	strh r4, [r7, #0x16]
	movs r5, #0x10
	strb r5, [r7, #0x1c]
	mov r2, sb
	strb r2, [r7, #0x1f]
	str r4, [r7, #8]
	adds r0, r7, #0
	str r3, [sp, #0x10]
	bl UpdateSpriteAnimation
	ldr r3, [sp, #0x10]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #5
	bls _08092168
	ldrb r0, [r6, #5]
	strb r0, [r6, #6]
	movs r3, #0xb3
	lsls r3, r3, #2
	adds r7, r6, r3
	ldr r0, [r6, #0x28]
	str r0, [r7]
	ldr r2, _08092270 @ =gUnknown_080D7468
	ldr r1, [r2, #4]
	lsls r1, r1, #5
	ldr r0, [r6, #0x28]
	adds r0, r0, r1
	str r0, [r6, #0x28]
	ldrh r0, [r2]
	movs r1, #0
	strh r0, [r7, #0xc]
	ldrb r0, [r2, #2]
	strb r0, [r7, #0x1a]
	ldrb r0, [r7, #0x1b]
	mov r2, sp
	ldrb r2, [r2, #4]
	orrs r0, r2
	strb r0, [r7, #0x1b]
	ldr r0, [r6, #0x6c]
	asrs r0, r0, #8
	strh r0, [r7, #0x10]
	ldr r0, [r6, #0x70]
	asrs r0, r0, #8
	strh r0, [r7, #0x12]
	mov r3, r8
	strh r3, [r7, #0x14]
	strh r4, [r7, #0xe]
	strh r4, [r7, #0x16]
	strb r5, [r7, #0x1c]
	strb r1, [r7, #0x1f]
	str r4, [r7, #8]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08092270: .4byte gUnknown_080D7468

	thumb_func_start sub_8092274
sub_8092274: @ 0x08092274
	push {r4, lr}
	adds r3, r0, #0
	movs r4, #0
	ldrh r2, [r3, #0x14]
	subs r0, r2, #1
	lsls r0, r0, #0x10
	ldr r1, _0809228C @ =0x018F0000
	cmp r0, r1
	bhi _08092290
	adds r0, r2, #0
	adds r0, #8
	b _0809229E
	.align 2, 0
_0809228C: .4byte 0x018F0000
_08092290:
	lsls r1, r2, #0x10
	movs r0, #0xc8
	lsls r0, r0, #0x11
	cmp r1, r0
	ble _080922A0
	adds r0, r2, #0
	adds r0, #0x10
_0809229E:
	strh r0, [r3, #0x14]
_080922A0:
	movs r0, #0x14
	ldrsh r1, [r3, r0]
	ldr r0, _080922C8 @ =0x000001FF
	cmp r1, r0
	ble _080922B4
	subs r0, #0xff
	strh r0, [r3, #0x14]
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
_080922B4:
	ldrh r2, [r3, #0x16]
	subs r0, r2, #1
	lsls r0, r0, #0x10
	ldr r1, _080922CC @ =0x018F0000
	cmp r0, r1
	bhi _080922D0
	adds r0, r2, #0
	adds r0, #8
	b _080922DE
	.align 2, 0
_080922C8: .4byte 0x000001FF
_080922CC: .4byte 0x018F0000
_080922D0:
	lsls r1, r2, #0x10
	movs r0, #0xc8
	lsls r0, r0, #0x11
	cmp r1, r0
	ble _080922E0
	adds r0, r2, #0
	adds r0, #0x10
_080922DE:
	strh r0, [r3, #0x16]
_080922E0:
	movs r0, #0x16
	ldrsh r1, [r3, r0]
	ldr r0, _08092314 @ =0x000001FF
	cmp r1, r0
	ble _080922F4
	subs r0, #0xff
	strh r0, [r3, #0x16]
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
_080922F4:
	cmp r4, #0
	bne _0809230C
	ldr r2, _08092318 @ =gBldRegs
	ldr r1, _0809231C @ =gUnknown_080D74A8
	ldrh r0, [r3, #0x16]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x15
	subs r0, #8
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2, #2]
_0809230C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08092314: .4byte 0x000001FF
_08092318: .4byte gBldRegs
_0809231C: .4byte gUnknown_080D74A8

	thumb_func_start sub_8092320
sub_8092320: @ 0x08092320
	push {r4, r5, r6, lr}
	mov r6, sl
	mov r5, sb
	mov r4, r8
	push {r4, r5, r6}
	mov r8, r0
	ldr r0, _080923DC @ =gBgCntRegs
	mov sb, r0
	movs r1, #0
	mov sl, r1
	movs r4, #0
	ldr r0, _080923E0 @ =0x00000602
	mov r2, sb
	strh r0, [r2]
	ldr r5, _080923E4 @ =gBgScrollRegs
	strh r4, [r5]
	strh r4, [r5, #2]
	movs r0, #0xc0
	lsls r0, r0, #2
	add r0, r8
	movs r1, #0xc0
	lsls r1, r1, #0x13
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _080923E8 @ =0x06003000
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	ldr r1, _080923EC @ =0x0000015F
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	movs r6, #0x20
	strh r6, [r0, #0x26]
	strh r6, [r0, #0x28]
	ldr r1, _080923F0 @ =0x0000032A
	add r1, r8
	mov r2, sl
	strb r2, [r1]
	strh r4, [r0, #0x2e]
	bl DrawBackground
	ldr r0, _080923F4 @ =0x00009007
	mov r1, sb
	strh r0, [r1, #2]
	movs r0, #0x16
	strh r0, [r5, #4]
	movs r0, #0x24
	strh r0, [r5, #6]
	movs r0, #0xd0
	lsls r0, r0, #2
	add r0, r8
	ldr r1, _080923F8 @ =0x06004000
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _080923FC @ =0x06008000
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	movs r1, #0xb0
	lsls r1, r1, #1
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	strh r6, [r0, #0x26]
	movs r1, #0x40
	strh r1, [r0, #0x28]
	ldr r1, _08092400 @ =0x0000036A
	add r1, r8
	mov r2, sl
	strb r2, [r1]
	movs r1, #1
	strh r1, [r0, #0x2e]
	bl DrawBackground
	ldr r1, _08092404 @ =gWinRegs
	mov r2, r8
	ldrh r0, [r2, #0xc]
	lsrs r0, r0, #8
	ldr r2, _08092408 @ =0x00002A2A
	adds r0, r0, r2
	strh r0, [r1, #4]
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080923DC: .4byte gBgCntRegs
_080923E0: .4byte 0x00000602
_080923E4: .4byte gBgScrollRegs
_080923E8: .4byte 0x06003000
_080923EC: .4byte 0x0000015F
_080923F0: .4byte 0x0000032A
_080923F4: .4byte 0x00009007
_080923F8: .4byte 0x06004000
_080923FC: .4byte 0x06008000
_08092400: .4byte 0x0000036A
_08092404: .4byte gWinRegs
_08092408: .4byte 0x00002A2A

	thumb_func_start sub_809240C
sub_809240C: @ 0x0809240C
	push {r4, r5, r6, r7, lr}
	ldr r6, _080924A8 @ =gCurTask
	ldr r0, [r6]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldrh r5, [r4, #0x22]
	cmp r5, #0
	bne _08092450
	ldr r3, _080924AC @ =gBldRegs
	ldr r0, _080924B0 @ =0x00003FFF
	strh r0, [r3]
	ldr r2, _080924B4 @ =gDispCnt
	ldrh r0, [r2]
	movs r7, #0xc0
	lsls r7, r7, #7
	adds r1, r7, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080924B8 @ =gWinRegs
	movs r0, #0xff
	strh r0, [r1, #2]
	strh r0, [r1, #6]
	ldr r0, _080924BC @ =0x00003D32
	strh r0, [r1, #8]
	strh r5, [r1, #0xa]
	movs r0, #0x10
	strh r0, [r3, #4]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r4, #0x20]
	movs r0, #1
	strh r0, [r4, #0x22]
_08092450:
	adds r0, r4, #0
	bl sub_80933B0
	adds r0, r4, #0
	bl sub_80934B0
	adds r0, r4, #0
	bl sub_809380C
	adds r0, r4, #0
	bl sub_809382C
	adds r0, r4, #0
	bl sub_809384C
	adds r0, r4, #0
	bl sub_8093640
	adds r0, r4, #0
	bl sub_80938B4
	adds r0, r4, #0
	bl sub_8093904
	ldr r1, _080924B8 @ =gWinRegs
	ldr r2, _080924C0 @ =0x00002A2A
	adds r0, r2, #0
	ldrh r7, [r4, #0xc]
	adds r0, r0, r7
	strh r0, [r1, #4]
	ldr r1, _080924AC @ =gBldRegs
	ldrh r0, [r1, #4]
	cmp r0, #0
	beq _080924C8
	ldrh r0, [r4, #0x20]
	lsrs r0, r0, #8
	strh r0, [r1, #4]
	ldr r1, _080924C4 @ =0xFFFFFF00
	adds r0, r1, #0
	ldrh r2, [r4, #0x20]
	adds r0, r0, r2
	strh r0, [r4, #0x20]
	b _080924D0
	.align 2, 0
_080924A8: .4byte gCurTask
_080924AC: .4byte gBldRegs
_080924B0: .4byte 0x00003FFF
_080924B4: .4byte gDispCnt
_080924B8: .4byte gWinRegs
_080924BC: .4byte 0x00003D32
_080924C0: .4byte 0x00002A2A
_080924C4: .4byte 0xFFFFFF00
_080924C8:
	strh r0, [r1, #4]
	ldr r1, [r6]
	ldr r0, _080924D8 @ =sub_8092604
	str r0, [r1, #8]
_080924D0:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080924D8: .4byte sub_8092604

	thumb_func_start sub_80924DC
sub_80924DC: @ 0x080924DC
	push {r4, r5, lr}
	ldr r0, _08092560 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldrh r0, [r4, #0x22]
	cmp r0, #0
	beq _08092518
	ldr r1, _08092564 @ =gBldRegs
	movs r3, #0
	ldr r0, _08092568 @ =0x00003FFF
	strh r0, [r1]
	ldr r2, _0809256C @ =gDispCnt
	ldrh r0, [r2]
	movs r5, #0xc0
	lsls r5, r5, #7
	adds r1, r5, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _08092570 @ =gWinRegs
	movs r0, #0xff
	strh r0, [r1, #2]
	strh r0, [r1, #6]
	ldr r0, _08092574 @ =0x00003D32
	strh r0, [r1, #8]
	strh r3, [r1, #0xa]
	strh r3, [r4, #0x20]
	strh r3, [r4, #0x22]
_08092518:
	adds r0, r4, #0
	bl sub_80934B0
	adds r0, r4, #0
	bl sub_809380C
	adds r0, r4, #0
	bl sub_809382C
	adds r0, r4, #0
	bl sub_809384C
	adds r0, r4, #0
	bl sub_80938B4
	adds r0, r4, #0
	bl sub_8093904
	ldr r5, _08092564 @ =gBldRegs
	ldrh r0, [r5, #4]
	cmp r0, #0xf
	bhi _08092578
	adds r0, r4, #0
	bl sub_80933B0
	ldrh r0, [r4, #0x20]
	lsrs r0, r0, #8
	strh r0, [r5, #4]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r1, #0
	ldrh r5, [r4, #0x20]
	adds r0, r0, r5
	strh r0, [r4, #0x20]
	b _080925F8
	.align 2, 0
_08092560: .4byte gCurTask
_08092564: .4byte gBldRegs
_08092568: .4byte 0x00003FFF
_0809256C: .4byte gDispCnt
_08092570: .4byte gWinRegs
_08092574: .4byte 0x00003D32
_08092578:
	movs r0, #0x10
	strh r0, [r5, #4]
	ldr r3, _080925B0 @ =gSaveGame
	ldr r0, [r3]
	cmp r0, #0
	bne _08092594
	ldr r2, _080925B4 @ =gPseudoRandom
	ldr r1, [r2]
	ldr r0, _080925B8 @ =0x00196225
	muls r0, r1, r0
	ldr r1, _080925BC @ =0x3C6EF35F
	adds r0, r0, r1
	str r0, [r2]
	str r0, [r3]
_08092594:
	bl sub_8001E58
	ldrb r0, [r4, #1]
	cmp r0, #2
	bne _080925C4
	ldr r1, _080925C0 @ =gStageData
	movs r0, #6
	strb r0, [r1, #3]
	bl sub_80003B8
	movs r0, #0
	bl sub_808D0F0
	b _080925F0
	.align 2, 0
_080925B0: .4byte gSaveGame
_080925B4: .4byte gPseudoRandom
_080925B8: .4byte 0x00196225
_080925BC: .4byte 0x3C6EF35F
_080925C0: .4byte gStageData
_080925C4:
	cmp r0, #3
	bne _080925E0
	ldr r1, _080925DC @ =gStageData
	movs r0, #7
	strb r0, [r1, #3]
	bl sub_80003B8
	movs r0, #0
	bl sub_8000340
	b _080925F0
	.align 2, 0
_080925DC: .4byte gStageData
_080925E0:
	cmp r0, #1
	bne _080925EC
	movs r0, #8
	bl LaunchOptionsMenu
	b _080925F0
_080925EC:
	bl LaunchGameIntro
_080925F0:
	ldr r0, _08092600 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
_080925F8:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08092600: .4byte gCurTask

	thumb_func_start sub_8092604
sub_8092604: @ 0x08092604
	push {r4, r5, r6, lr}
	movs r5, #0
	ldr r6, _08092684 @ =gCurTask
	ldr r0, [r6]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_80933B0
	adds r0, r4, #0
	bl sub_80934B0
	adds r0, r4, #0
	bl sub_8093784
	cmp r0, #1
	bne _0809262C
	movs r5, #1
_0809262C:
	adds r0, r4, #0
	movs r1, #0
	bl sub_80934F0
	cmp r0, #1
	bne _0809263E
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_0809263E:
	adds r0, r4, #0
	bl sub_809380C
	adds r0, r4, #0
	bl sub_809382C
	adds r0, r4, #0
	bl sub_809384C
	adds r0, r4, #0
	bl sub_8093640
	adds r0, r4, #0
	bl sub_80938B4
	adds r0, r4, #0
	bl sub_8093904
	ldr r2, _08092688 @ =gWinRegs
	ldr r1, [r4, #0x30]
	asrs r0, r1, #8
	adds r1, r1, r0
	ldrh r0, [r4, #0xc]
	lsrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2, #4]
	cmp r5, #2
	bne _0809267C
	ldr r1, [r6]
	ldr r0, _0809268C @ =sub_8092AC8
	str r0, [r1, #8]
_0809267C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08092684: .4byte gCurTask
_08092688: .4byte gWinRegs
_0809268C: .4byte sub_8092AC8

	thumb_func_start sub_8092690
sub_8092690: @ 0x08092690
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	ldr r0, _08092784 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r2, _08092788 @ =gPseudoRandom
	ldr r0, [r2]
	ldr r7, _0809278C @ =0x00196225
	muls r0, r7, r0
	ldr r6, _08092790 @ =0x3C6EF35F
	adds r5, r0, r6
	str r5, [r2]
	str r5, [sp]
	ldr r0, [sp]
	movs r1, #0xf
	ands r0, r1
	lsls r3, r0, #0x10
	cmp r3, #0
	beq _080926DE
	mov ip, r2
	adds r1, r5, #0
_080926C8:
	adds r0, r1, #0
	muls r0, r7, r0
	adds r1, r0, r6
	str r1, [sp]
	ldr r0, _08092794 @ =0xFFFF0000
	adds r3, r3, r0
	asrs r0, r3, #0x10
	cmp r0, #0
	bne _080926C8
	mov r3, ip
	str r1, [r3]
_080926DE:
	ldr r0, [sp]
	str r0, [r2]
	adds r0, r4, #0
	bl sub_80933B0
	adds r0, r4, #0
	bl sub_80934B0
	ldr r5, _08092798 @ =gPressedKeys
	ldrh r1, [r5]
	movs r6, #2
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _08092708
	movs r0, #0x6b
	bl m4aSongNumStart
	adds r0, r4, #0
	bl sub_8092D1C
_08092708:
	ldrh r1, [r5]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08092720
	movs r0, #1
	strb r0, [r4, #3]
	strh r0, [r4, #0xe]
	adds r0, r4, #0
	bl sub_80937DC
_08092720:
	ldrh r1, [r5]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08092738
	movs r0, #2
	strb r0, [r4, #3]
	strh r6, [r4, #0xe]
	adds r0, r4, #0
	bl sub_80937DC
_08092738:
	adds r0, r4, #0
	bl sub_80935E4
	adds r0, r4, #0
	bl sub_809380C
	adds r0, r4, #0
	bl sub_809382C
	adds r0, r4, #0
	bl sub_809384C
	adds r0, r4, #0
	bl sub_8093640
	adds r0, r4, #0
	bl sub_80938B4
	adds r0, r4, #0
	bl sub_8093904
	ldrh r1, [r5]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0809281C
	movs r0, #0x6a
	bl m4aSongNumStart
	movs r6, #0xe
	ldrsh r0, [r4, r6]
	cmp r0, #1
	beq _08092800
	cmp r0, #1
	bgt _0809279C
	cmp r0, #0
	beq _080927A2
	b _0809281C
	.align 2, 0
_08092784: .4byte gCurTask
_08092788: .4byte gPseudoRandom
_0809278C: .4byte 0x00196225
_08092790: .4byte 0x3C6EF35F
_08092794: .4byte 0xFFFF0000
_08092798: .4byte gPressedKeys
_0809279C:
	cmp r0, #2
	beq _0809280C
	b _0809281C
_080927A2:
	movs r3, #0
	movs r2, #0
	ldrb r0, [r4, #5]
	adds r1, r0, #0
	adds r6, r0, #0
	cmp r3, r1
	bhs _080927E0
	ldr r0, _080927F4 @ =0x00000404
	mov r8, r0
	adds r5, r1, #0
	movs r7, #0xee
	lsls r7, r7, #1
_080927BA:
	lsls r0, r2, #2
	adds r0, r0, r2
	lsls r0, r0, #3
	adds r0, r0, r7
	adds r1, r4, r0
	ldrb r0, [r1, #0x1a]
	cmp r0, #0x4d
	bne _080927D6
	ldrh r0, [r1, #0xc]
	cmp r0, r8
	bne _080927D6
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
_080927D6:
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, r5
	blo _080927BA
_080927E0:
	adds r0, r6, #0
	cmp r0, #0
	beq _0809281C
	cmp r3, r0
	bhs _0809281C
	ldr r0, _080927F8 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080927FC @ =sub_8092A0C
	str r0, [r1, #8]
	b _080929FC
	.align 2, 0
_080927F4: .4byte 0x00000404
_080927F8: .4byte gCurTask
_080927FC: .4byte sub_8092A0C
_08092800:
	ldrb r0, [r4, #6]
	adds r1, r0, #0
	cmp r1, #0
	beq _08092814
	subs r0, #1
	b _0809281A
_0809280C:
	ldrb r0, [r4, #6]
	ldrb r1, [r4, #5]
	cmp r0, r1
	bne _08092818
_08092814:
	strb r1, [r4, #6]
	b _0809281C
_08092818:
	adds r0, #1
_0809281A:
	strb r0, [r4, #6]
_0809281C:
	ldr r5, _08092848 @ =gRepeatedKeys
	ldrh r1, [r5]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	bne _0809282A
	b _080929FC
_0809282A:
	movs r0, #0x6c
	bl m4aSongNumStart
	ldrh r1, [r5]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08092850
	ldrh r1, [r4, #0xe]
	movs r2, #0xe
	ldrsh r0, [r4, r2]
	cmp r0, #2
	bne _0809284C
	movs r0, #0
	b _0809284E
	.align 2, 0
_08092848: .4byte gRepeatedKeys
_0809284C:
	adds r0, r1, #1
_0809284E:
	strh r0, [r4, #0xe]
_08092850:
	ldr r2, _0809286C @ =gRepeatedKeys
	ldrh r1, [r2]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _08092874
	ldrh r1, [r4, #0xe]
	movs r3, #0xe
	ldrsh r0, [r4, r3]
	cmp r0, #0
	bne _08092870
	movs r0, #2
	b _08092872
	.align 2, 0
_0809286C: .4byte gRepeatedKeys
_08092870:
	subs r0, r1, #1
_08092872:
	strh r0, [r4, #0xe]
_08092874:
	ldrh r2, [r2]
	movs r0, #0x20
	ands r0, r2
	cmp r0, #0
	beq _08092930
	movs r2, #0
	movs r0, #0xba
	str r0, [r4, #0x3c]
	ldrb r0, [r4, #8]
	cmp r0, #0
	bne _080928B0
	ldr r0, [r4, #0x40]
	cmp r0, #0x34
	bne _080928AC
	ldrh r1, [r4, #0x12]
	movs r6, #0x12
	ldrsh r0, [r4, r6]
	cmp r0, #0
	bne _080928A4
	movs r0, #0x84
	str r0, [r4, #0x40]
	adds r0, #0x7c
	strh r0, [r4, #0x12]
	b _080928B0
_080928A4:
	adds r0, r1, #0
	subs r0, #0x10
	strh r0, [r4, #0x12]
	b _080928B0
_080928AC:
	subs r0, #0x10
	str r0, [r4, #0x40]
_080928B0:
	ldr r0, _08092924 @ =gCurTask
	mov sb, r0
	ldr r1, _08092928 @ =sub_8092AC8
	mov sl, r1
	cmp r2, #0
	beq _080928BE
	b _080929EA
_080928BE:
	ldr r1, [r4, #0x40]
	subs r1, #0x34
	asrs r1, r1, #4
	ldrh r0, [r4, #0x12]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x14
	adds r0, r0, r1
	lsls r0, r0, #0x18
	ldr r7, _0809292C @ =gUnknown_080D7470
	ldrh r2, [r7]
	mov r8, r2
	mov ip, r7
	lsrs r6, r0, #0x18
_080928D8:
	ldr r1, [r4, #0x3c]
	adds r0, r1, #0
	subs r0, #0x1a
	asrs r0, r0, #4
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	movs r3, #0
	cmp r8, r5
	bne _080928F0
	ldrh r0, [r7, #2]
	cmp r0, r6
	beq _08092910
_080928F0:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0xd
	bhi _08092910
	lsls r2, r3, #2
	adds r0, r2, r7
	ldrh r0, [r0]
	cmp r0, r5
	bne _080928F0
	mov r0, ip
	adds r0, #2
	adds r0, r2, r0
	ldrh r0, [r0]
	cmp r0, r6
	bne _080928F0
_08092910:
	movs r2, #1
	cmp r3, #0xe
	beq _0809291E
	movs r2, #0
	adds r0, r1, #0
	subs r0, #0x10
	str r0, [r4, #0x3c]
_0809291E:
	cmp r2, #0
	beq _080928D8
	b _080929EA
	.align 2, 0
_08092924: .4byte gCurTask
_08092928: .4byte sub_8092AC8
_0809292C: .4byte gUnknown_080D7470
_08092930:
	movs r0, #0x10
	ands r0, r2
	cmp r0, #0
	beq _080929F8
	movs r2, #0
	movs r0, #0x1a
	str r0, [r4, #0x3c]
	ldrb r0, [r4, #8]
	cmp r0, #1
	bne _0809296C
	ldr r0, [r4, #0x40]
	cmp r0, #0x84
	bne _08092968
	ldrh r3, [r4, #0x12]
	movs r0, #0x12
	ldrsh r1, [r4, r0]
	movs r0, #0x80
	lsls r0, r0, #1
	cmp r1, r0
	bne _08092960
	movs r0, #0x34
	str r0, [r4, #0x40]
	strh r2, [r4, #0x12]
	b _0809296C
_08092960:
	adds r0, r3, #0
	adds r0, #0x10
	strh r0, [r4, #0x12]
	b _0809296C
_08092968:
	adds r0, #0x10
	str r0, [r4, #0x40]
_0809296C:
	ldr r1, _080929AC @ =gCurTask
	mov sb, r1
	ldr r3, _080929B0 @ =sub_8092AC8
	mov sl, r3
	cmp r2, #0
	bne _080929EA
	ldr r1, [r4, #0x40]
	subs r1, #0x34
	asrs r1, r1, #4
	ldrh r0, [r4, #0x12]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x14
	adds r0, r0, r1
	lsls r0, r0, #0x18
	ldr r7, _080929B4 @ =gUnknown_080D7470
	ldrh r6, [r7]
	mov r8, r6
	lsrs r0, r0, #0x18
	str r0, [sp, #4]
	adds r0, r7, #2
	mov ip, r0
_08092996:
	ldr r1, [r4, #0x3c]
	adds r0, r1, #0
	subs r0, #0x1a
	asrs r0, r0, #4
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	movs r3, #0
	cmp r8, r5
	bne _080929B8
	ldrh r0, [r7, #2]
	b _080929D2
	.align 2, 0
_080929AC: .4byte gCurTask
_080929B0: .4byte sub_8092AC8
_080929B4: .4byte gUnknown_080D7470
_080929B8:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0xd
	bhi _080929D8
	lsls r2, r3, #2
	adds r0, r2, r7
	ldrh r0, [r0]
	cmp r0, r5
	bne _080929B8
	mov r6, ip
	adds r0, r2, r6
	ldrh r0, [r0]
_080929D2:
	ldr r2, [sp, #4]
	cmp r0, r2
	bne _080929B8
_080929D8:
	movs r2, #1
	cmp r3, #0xe
	beq _080929E6
	movs r2, #0
	adds r0, r1, #0
	adds r0, #0x10
	str r0, [r4, #0x3c]
_080929E6:
	cmp r2, #0
	beq _08092996
_080929EA:
	movs r0, #0
	strb r0, [r4, #7]
	mov r3, sb
	ldr r0, [r3]
	mov r6, sl
	str r6, [r0, #8]
	b _080929FC
_080929F8:
	ldrh r0, [r4, #0xe]
	strb r0, [r4, #3]
_080929FC:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8092A0C
sub_8092A0C: @ 0x08092A0C
	push {r4, r5, r6, r7, lr}
	ldr r0, _08092AB4 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_80933B0
	adds r0, r4, #0
	bl sub_80934B0
	adds r0, r4, #0
	bl sub_809380C
	adds r0, r4, #0
	bl sub_809382C
	adds r0, r4, #0
	bl sub_809384C
	adds r0, r4, #0
	bl sub_80938B4
	adds r0, r4, #0
	bl sub_8093904
	movs r3, #0
	ldrb r0, [r4, #5]
	cmp r3, r0
	bhs _08092A86
	ldr r7, _08092AB8 @ =gUnknown_03000534
	mov ip, r7
	ldr r0, _08092ABC @ =gUnknown_080D7458
	ldrh r5, [r0]
	movs r6, #0xee
	lsls r6, r6, #1
_08092A58:
	lsls r0, r3, #2
	adds r0, r0, r3
	lsls r0, r0, #3
	adds r0, r0, r6
	adds r0, r4, r0
	lsls r1, r3, #1
	add r1, ip
	ldrb r2, [r0, #0x1a]
	strh r2, [r1]
	ldrh r0, [r0, #0xc]
	cmp r0, r5
	beq _08092A7A
	movs r7, #0x80
	lsls r7, r7, #1
	adds r0, r7, #0
	adds r0, r2, r0
	strh r0, [r1]
_08092A7A:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	ldrb r0, [r4, #5]
	cmp r3, r0
	blo _08092A58
_08092A86:
	ldrb r3, [r4, #5]
	ldr r5, _08092AB4 @ =gCurTask
	ldr r6, _08092AC0 @ =sub_8093710
	cmp r3, #5
	bhi _08092AAA
	ldr r4, _08092AB8 @ =gUnknown_03000534
	ldr r7, _08092AC4 @ =0x0000FFFF
	adds r2, r7, #0
_08092A96:
	lsls r0, r3, #1
	adds r0, r0, r4
	ldrh r1, [r0]
	orrs r1, r2
	strh r1, [r0]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #5
	bls _08092A96
_08092AAA:
	ldr r0, [r5]
	str r6, [r0, #8]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08092AB4: .4byte gCurTask
_08092AB8: .4byte gUnknown_03000534
_08092ABC: .4byte gUnknown_080D7458
_08092AC0: .4byte sub_8093710
_08092AC4: .4byte 0x0000FFFF

	thumb_func_start sub_8092AC8
sub_8092AC8: @ 0x08092AC8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	ldr r0, _08092B98 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r2, _08092B9C @ =gPseudoRandom
	ldr r0, [r2]
	ldr r6, _08092BA0 @ =0x00196225
	muls r0, r6, r0
	ldr r5, _08092BA4 @ =0x3C6EF35F
	adds r3, r0, r5
	str r3, [r2]
	str r3, [sp]
	ldr r0, [sp]
	movs r1, #0xf
	ands r0, r1
	lsls r1, r0, #0x10
	adds r7, r2, #0
	ldr r0, _08092BA8 @ =gPressedKeys
	mov r8, r0
	cmp r1, #0
	beq _08092B18
	mov ip, r7
	adds r2, r6, #0
_08092B02:
	adds r0, r3, #0
	muls r0, r2, r0
	adds r3, r0, r5
	str r3, [sp]
	ldr r0, _08092BAC @ =0xFFFF0000
	adds r1, r1, r0
	asrs r0, r1, #0x10
	cmp r0, #0
	bne _08092B02
	mov r0, ip
	str r3, [r0]
_08092B18:
	ldr r0, [sp]
	str r0, [r7]
	mov r0, r8
	ldrh r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08092B34
	movs r0, #0x6b
	bl m4aSongNumStart
	adds r0, r4, #0
	bl sub_8092D1C
_08092B34:
	adds r0, r4, #0
	bl sub_80933B0
	adds r0, r4, #0
	bl sub_80934B0
	adds r0, r4, #0
	bl sub_809380C
	adds r0, r4, #0
	bl sub_809382C
	adds r0, r4, #0
	bl sub_809384C
	adds r0, r4, #0
	bl sub_8093640
	adds r0, r4, #0
	bl sub_80938B4
	adds r0, r4, #0
	bl sub_8093904
	adds r0, r4, #0
	bl sub_80936A0
	movs r3, #0
	ldr r0, _08092BB0 @ =gInput
	ldrh r2, [r0]
	movs r1, #0xc0
	lsls r1, r1, #2
	adds r0, r1, #0
	ands r0, r2
	cmp r0, r1
	bne _08092B7E
	movs r3, #1
_08092B7E:
	ldr r0, _08092BB4 @ =gRepeatedKeys
	ldrh r1, [r0]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	beq _08092BC8
	cmp r3, #0
	beq _08092BB8
	adds r0, r4, #0
	bl sub_80930B8
	b _08092BC4
	.align 2, 0
_08092B98: .4byte gCurTask
_08092B9C: .4byte gPseudoRandom
_08092BA0: .4byte 0x00196225
_08092BA4: .4byte 0x3C6EF35F
_08092BA8: .4byte gPressedKeys
_08092BAC: .4byte 0xFFFF0000
_08092BB0: .4byte gInput
_08092BB4: .4byte gRepeatedKeys
_08092BB8:
	movs r0, #0x6c
	bl m4aSongNumStart
	adds r0, r4, #0
	bl sub_8092F60
_08092BC4:
	cmp r0, #1
	beq _08092CAA
_08092BC8:
	ldr r0, [r4, #0x40]
	subs r0, #0x34
	asrs r0, r0, #4
	ldrh r1, [r4, #0x12]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x14
	adds r1, r1, r0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	ldr r0, _08092C50 @ =gUnknown_080D74B8
	adds r1, r1, r0
	ldr r0, [r4, #0x3c]
	subs r0, #0x1a
	asrs r0, r0, #4
	ldrb r1, [r1]
	adds r0, r0, r1
	strb r0, [r4, #2]
	ldr r5, _08092C54 @ =gPressedKeys
	ldrh r1, [r5]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08092C02
	movs r0, #1
	strb r0, [r4, #3]
	adds r0, r4, #0
	bl sub_80937DC
_08092C02:
	ldrh r1, [r5]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08092C18
	movs r0, #2
	strb r0, [r4, #3]
	adds r0, r4, #0
	bl sub_80937DC
_08092C18:
	adds r0, r4, #0
	bl sub_809386C
	adds r0, r4, #0
	bl sub_80935A4
	adds r0, r4, #0
	bl sub_8092274
	ldrh r1, [r5]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08092C70
	ldrb r0, [r4, #6]
	cmp r0, #6
	bhi _08092C70
	movs r0, #0x6a
	bl m4aSongNumStart
	ldrb r0, [r4, #2]
	cmp r0, #0xa
	bne _08092C58
	adds r0, r4, #0
	bl sub_8092D94
	b _08092C70
	.align 2, 0
_08092C50: .4byte gUnknown_080D74B8
_08092C54: .4byte gPressedKeys
_08092C58:
	cmp r0, #0x15
	bne _08092C64
	adds r0, r4, #0
	bl sub_8092EBC
	b _08092C70
_08092C64:
	ldrb r0, [r4, #6]
	cmp r0, #5
	bhi _08092C70
	adds r0, r4, #0
	bl sub_8092CC8
_08092C70:
	ldr r0, _08092CB8 @ =gInput
	ldrh r1, [r0]
	movs r0, #0xc0
	lsls r0, r0, #2
	adds r2, r0, #0
	ands r2, r1
	cmp r2, r0
	beq _08092C8A
	cmp r2, #0
	beq _08092C8A
	adds r0, r4, #0
	bl sub_80935E4
_08092C8A:
	ldr r0, _08092CBC @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _08092CAA
	movs r0, #0x6a
	bl m4aSongNumStart
	movs r0, #0
	strb r0, [r4, #3]
	strh r0, [r4, #0xe]
	ldr r0, _08092CC0 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08092CC4 @ =sub_8092690
	str r0, [r1, #8]
_08092CAA:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08092CB8: .4byte gInput
_08092CBC: .4byte gPressedKeys
_08092CC0: .4byte gCurTask
_08092CC4: .4byte sub_8092690

	thumb_func_start sub_8092CC8
sub_8092CC8: @ 0x08092CC8
	push {lr}
	adds r2, r0, #0
	ldrb r1, [r2, #6]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	movs r3, #0xee
	lsls r3, r3, #1
	adds r0, r0, r3
	adds r3, r2, r0
	adds r1, #1
	strb r1, [r2, #6]
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	cmp r1, #6
	bls _08092CEC
	movs r0, #6
	strb r0, [r2, #6]
_08092CEC:
	ldrb r1, [r2, #5]
	ldrb r0, [r2, #6]
	cmp r0, r1
	bls _08092D04
	adds r0, r1, #1
	strb r0, [r2, #5]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #6
	bls _08092D04
	movs r0, #6
	strb r0, [r2, #5]
_08092D04:
	ldr r1, _08092D18 @ =gUnknown_080D7458
	ldrh r0, [r1]
	strh r0, [r3, #0xc]
	ldrb r0, [r2, #2]
	ldrb r1, [r1, #2]
	adds r0, r0, r1
	strb r0, [r3, #0x1a]
	pop {r0}
	bx r0
	.align 2, 0
_08092D18: .4byte gUnknown_080D7458

	thumb_func_start sub_8092D1C
sub_8092D1C: @ 0x08092D1C
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r0, #0
	strh r0, [r5, #0xa]
	ldrb r0, [r5, #6]
	ldrb r1, [r5, #5]
	cmp r0, r1
	beq _08092D6A
	adds r4, r0, #0
	cmp r4, r1
	bhs _08092D60
_08092D32:
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r1, r0, #3
	movs r2, #0xee
	lsls r2, r2, #1
	adds r0, r1, r2
	adds r0, r5, r0
	movs r3, #0x81
	lsls r3, r3, #2
	adds r2, r1, r3
	adds r2, r5, r2
	ldrh r1, [r2, #0xc]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #0x1a]
	strb r1, [r0, #0x1a]
	bl UpdateSpriteAnimation
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldrb r0, [r5, #5]
	cmp r4, r0
	blo _08092D32
_08092D60:
	ldrb r0, [r5, #5]
	ldrb r1, [r5, #6]
	adds r2, r0, #0
	cmp r1, r2
	bne _08092D7E
_08092D6A:
	ldrb r0, [r5, #6]
	subs r0, #1
	strb r0, [r5, #6]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldrb r2, [r5, #5]
	cmp r0, #6
	bls _08092D7E
	movs r0, #0
	strb r0, [r5, #6]
_08092D7E:
	subs r0, r2, #1
	strb r0, [r5, #5]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #6
	bls _08092D8E
	movs r0, #0
	strb r0, [r5, #5]
_08092D8E:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8092D94
sub_8092D94: @ 0x08092D94
	push {r4, r5, r6, lr}
	adds r3, r0, #0
	movs r5, #0
	ldrb r2, [r3, #6]
	subs r1, r2, #1
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r3
	mov ip, r0
	movs r0, #0xfb
	lsls r0, r0, #1
	add r0, ip
	ldrb r0, [r0]
	ldr r6, _08092DE0 @ =gUnknown_080D7458
	ldrb r1, [r6, #2]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r2, #0
	beq _08092EB0
	adds r0, r4, #0
	subs r0, #0xa
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #5
	bhi _08092DE4
	movs r0, #0xf4
	lsls r0, r0, #1
	add r0, ip
	ldrh r0, [r0]
	ldrh r6, [r6]
	cmp r0, r6
	bne _08092DE4
	adds r0, r4, #0
	subs r0, #0x19
	b _08092E06
	.align 2, 0
_08092DE0: .4byte gUnknown_080D7458
_08092DE4:
	adds r0, r4, #0
	subs r0, #0x16
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #4
	bhi _08092DF6
	adds r0, r4, #0
	subs r0, #0x1f
	b _08092E06
_08092DF6:
	adds r0, r4, #0
	subs r0, #0x21
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #3
	bhi _08092E0C
	adds r0, r4, #0
	subs r0, #0x25
_08092E06:
	strb r0, [r3, #2]
	movs r5, #1
	b _08092E5E
_08092E0C:
	cmp r4, #0x25
	bne _08092E14
	movs r0, #0
	b _08092E5A
_08092E14:
	adds r0, r4, #0
	subs r0, #0x37
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #4
	bhi _08092E26
	adds r0, r4, #0
	subs r0, #0x36
	b _08092E5A
_08092E26:
	subs r0, r4, #6
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #4
	bhi _08092E54
	ldrb r1, [r3, #6]
	subs r1, #1
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, r3, r0
	movs r1, #0xf4
	lsls r1, r1, #1
	adds r0, r0, r1
	ldr r1, _08092E50 @ =gUnknown_080D7460
	ldrh r0, [r0]
	ldrh r1, [r1]
	cmp r0, r1
	bne _08092E54
	subs r0, r4, #5
	b _08092E5A
	.align 2, 0
_08092E50: .4byte gUnknown_080D7460
_08092E54:
	cmp r4, #2
	bne _08092E5E
	movs r0, #0xb
_08092E5A:
	strb r0, [r3, #2]
	movs r5, #2
_08092E5E:
	cmp r5, #1
	bne _08092E7A
	ldrb r0, [r3, #6]
	subs r0, #1
	lsls r1, r0, #2
	adds r1, r1, r0
	lsls r1, r1, #3
	adds r1, r3, r1
	ldrb r0, [r3, #2]
	movs r2, #0xfb
	lsls r2, r2, #1
	adds r1, r1, r2
	strb r0, [r1]
	b _08092EB0
_08092E7A:
	cmp r5, #2
	bne _08092EB0
	ldrb r1, [r3, #6]
	subs r1, #1
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, r3, r0
	ldr r2, _08092EB8 @ =gUnknown_080D7460
	ldrh r1, [r2]
	movs r4, #0xf4
	lsls r4, r4, #1
	adds r0, r0, r4
	strh r1, [r0]
	ldrb r1, [r3, #6]
	subs r1, #1
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, r3, r0
	ldrb r1, [r3, #2]
	ldrb r2, [r2, #2]
	adds r1, r1, r2
	movs r2, #0xfb
	lsls r2, r2, #1
	adds r0, r0, r2
	strb r1, [r0]
_08092EB0:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08092EB8: .4byte gUnknown_080D7460

	thumb_func_start sub_8092EBC
sub_8092EBC: @ 0x08092EBC
	push {r4, r5, lr}
	adds r3, r0, #0
	movs r5, #0
	ldrb r2, [r3, #6]
	subs r1, r2, #1
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r3
	mov ip, r0
	movs r0, #0xfb
	lsls r0, r0, #1
	add r0, ip
	ldrb r0, [r0]
	ldr r1, _08092EFC @ =gUnknown_080D7458
	ldrb r1, [r1, #2]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	adds r4, r1, #0
	cmp r2, #0
	beq _08092F56
	adds r0, r1, #0
	subs r0, #0x37
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #4
	bhi _08092F00
	adds r0, r1, #0
	subs r0, #0x31
	strb r0, [r3, #2]
	b _08092F24
	.align 2, 0
_08092EFC: .4byte gUnknown_080D7458
_08092F00:
	subs r0, r4, #1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #4
	bhi _08092F20
	movs r0, #0xf4
	lsls r0, r0, #1
	add r0, ip
	ldr r1, _08092F5C @ =gUnknown_080D7460
	ldrh r0, [r0]
	ldrh r1, [r1]
	cmp r0, r1
	bne _08092F20
	adds r0, r4, #5
	strb r0, [r3, #2]
	movs r5, #1
_08092F20:
	cmp r5, #0
	beq _08092F56
_08092F24:
	ldrb r1, [r3, #6]
	subs r1, #1
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, r3, r0
	ldr r2, _08092F5C @ =gUnknown_080D7460
	ldrh r1, [r2]
	movs r4, #0xf4
	lsls r4, r4, #1
	adds r0, r0, r4
	strh r1, [r0]
	ldrb r1, [r3, #6]
	subs r1, #1
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, r3, r0
	ldrb r1, [r3, #2]
	ldrb r2, [r2, #2]
	adds r1, r1, r2
	movs r2, #0xfb
	lsls r2, r2, #1
	adds r0, r0, r2
	strb r1, [r0]
_08092F56:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08092F5C: .4byte gUnknown_080D7460

	thumb_func_start sub_8092F60
sub_8092F60: @ 0x08092F60
	push {r4, r5, r6, lr}
	adds r2, r0, #0
	ldr r0, _08092F7C @ =gRepeatedKeys
	ldrh r1, [r0]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08092F80
	adds r0, r2, #0
	movs r1, #0
	bl sub_80932E0
	b _080930AA
	.align 2, 0
_08092F7C: .4byte gRepeatedKeys
_08092F80:
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _08092F92
	adds r0, r2, #0
	movs r1, #1
	bl sub_80932E0
	b _080930AA
_08092F92:
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _08093018
_08092F9A:
	ldr r1, [r2, #0x3c]
	cmp r1, #0x1a
	bne _08092FAE
	ldrb r1, [r2, #7]
	cmp r1, #0
	bne _08092FB8
	movs r0, #1
	strb r0, [r2, #7]
	strb r1, [r2, #8]
	b _08093032
_08092FAE:
	movs r0, #0
	strb r0, [r2, #7]
	adds r0, r1, #0
	subs r0, #0x10
	str r0, [r2, #0x3c]
_08092FB8:
	ldr r1, [r2, #0x40]
	subs r1, #0x34
	asrs r1, r1, #4
	ldrh r0, [r2, #0x12]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x14
	adds r0, r0, r1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	ldr r0, [r2, #0x3c]
	subs r0, #0x1a
	asrs r0, r0, #4
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	movs r3, #0
	ldr r0, _08093014 @ =gUnknown_080D7470
	ldrh r1, [r0]
	adds r6, r0, #0
	cmp r1, r4
	bne _08092FE6
	ldrh r0, [r6, #2]
	cmp r0, r5
	beq _08093004
_08092FE6:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0xd
	bhi _08093004
	lsls r1, r3, #2
	adds r0, r1, r6
	ldrh r0, [r0]
	cmp r0, r4
	bne _08092FE6
	adds r0, r6, #2
	adds r0, r1, r0
	ldrh r0, [r0]
	cmp r0, r5
	bne _08092FE6
_08093004:
	movs r0, #0
	cmp r3, #0xe
	bne _0809300C
	movs r0, #1
_0809300C:
	cmp r0, #0
	beq _08092F9A
	b _080930AA
	.align 2, 0
_08093014: .4byte gUnknown_080D7470
_08093018:
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _080930AA
_08093020:
	ldr r1, [r2, #0x3c]
	cmp r1, #0xba
	bne _08093048
	ldrb r0, [r2, #7]
	cmp r0, #0
	bne _08093052
	movs r0, #1
	strb r0, [r2, #7]
	strb r0, [r2, #8]
_08093032:
	ldr r0, _08093040 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08093044 @ =sub_8092690
	str r0, [r1, #8]
	movs r0, #1
	b _080930AC
	.align 2, 0
_08093040: .4byte gCurTask
_08093044: .4byte sub_8092690
_08093048:
	movs r0, #0
	strb r0, [r2, #7]
	adds r0, r1, #0
	adds r0, #0x10
	str r0, [r2, #0x3c]
_08093052:
	ldr r1, [r2, #0x40]
	subs r1, #0x34
	asrs r1, r1, #4
	ldrh r0, [r2, #0x12]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x14
	adds r0, r0, r1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	ldr r0, [r2, #0x3c]
	subs r0, #0x1a
	asrs r0, r0, #4
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	movs r3, #0
	ldr r0, _080930B4 @ =gUnknown_080D7470
	ldrh r1, [r0]
	adds r6, r0, #0
	cmp r1, r4
	bne _08093080
	ldrh r0, [r6, #2]
	cmp r0, r5
	beq _0809309E
_08093080:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0xd
	bhi _0809309E
	lsls r1, r3, #2
	adds r0, r1, r6
	ldrh r0, [r0]
	cmp r0, r4
	bne _08093080
	adds r0, r6, #2
	adds r0, r1, r0
	ldrh r0, [r0]
	cmp r0, r5
	bne _08093080
_0809309E:
	movs r0, #0
	cmp r3, #0xe
	bne _080930A6
	movs r0, #1
_080930A6:
	cmp r0, #0
	beq _08093020
_080930AA:
	movs r0, #0
_080930AC:
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_080930B4: .4byte gUnknown_080D7470

	thumb_func_start sub_80930B8
sub_80930B8: @ 0x080930B8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r5, r0, #0
	movs r7, #0
	ldr r0, _08093144 @ =gRepeatedKeys
	ldrh r1, [r0]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0809314C
	ldrh r0, [r5, #0x12]
	subs r0, #0x60
	strh r0, [r5, #0x12]
	lsls r0, r0, #0x10
	cmp r0, #0
	bgt _080930E4
	movs r0, #0x34
	str r0, [r5, #0x40]
	strh r7, [r5, #0x12]
_080930E4:
	ldr r1, [r5, #0x40]
	subs r1, #0x34
	asrs r1, r1, #4
	ldrh r0, [r5, #0x12]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x14
	adds r0, r0, r1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	ldr r0, [r5, #0x3c]
	subs r0, #0x1a
	asrs r0, r0, #4
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	movs r3, #0
	ldr r0, _08093148 @ =gUnknown_080D7470
	ldrh r1, [r0]
	mov sb, r0
	cmp r1, r4
	bne _08093112
	ldrh r0, [r0, #2]
	cmp r0, r2
	beq _08093134
_08093112:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0xd
	bhi _08093134
	lsls r1, r3, #2
	mov r6, sb
	adds r0, r1, r6
	ldrh r0, [r0]
	cmp r0, r4
	bne _08093112
	mov r0, sb
	adds r0, #2
	adds r0, r1, r0
	ldrh r0, [r0]
	cmp r0, r2
	bne _08093112
_08093134:
	cmp r3, #0xe
	bne _0809313A
	b _080932CE
_0809313A:
	adds r0, r5, #0
	movs r1, #1
	bl sub_80932E0
	b _080932CE
	.align 2, 0
_08093144: .4byte gRepeatedKeys
_08093148: .4byte gUnknown_080D7470
_0809314C:
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _080931D0
	ldrh r0, [r5, #0x12]
	adds r0, #0x60
	strh r0, [r5, #0x12]
	movs r1, #0x12
	ldrsh r0, [r5, r1]
	movs r1, #0x80
	lsls r1, r1, #1
	cmp r0, r1
	blt _0809316C
	movs r0, #0x84
	str r0, [r5, #0x40]
	strh r1, [r5, #0x12]
_0809316C:
	ldr r1, [r5, #0x40]
	subs r1, #0x34
	asrs r1, r1, #4
	ldrh r0, [r5, #0x12]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x14
	adds r0, r0, r1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	ldr r0, [r5, #0x3c]
	subs r0, #0x1a
	asrs r0, r0, #4
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	movs r3, #0
	ldr r0, _080931CC @ =gUnknown_080D7470
	ldrh r1, [r0]
	mov sb, r0
	cmp r1, r4
	bne _0809319A
	ldrh r0, [r0, #2]
	cmp r0, r2
	beq _080931BC
_0809319A:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0xd
	bhi _080931BC
	lsls r1, r3, #2
	mov r6, sb
	adds r0, r1, r6
	ldrh r0, [r0]
	cmp r0, r4
	bne _0809319A
	mov r0, sb
	adds r0, #2
	adds r0, r1, r0
	ldrh r0, [r0]
	cmp r0, r2
	bne _0809319A
_080931BC:
	cmp r3, #0xe
	bne _080931C2
	b _080932CE
_080931C2:
	adds r0, r5, #0
	movs r1, #0
	bl sub_80932E0
	b _080932CE
	.align 2, 0
_080931CC: .4byte gUnknown_080D7470
_080931D0:
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _08093250
	movs r0, #0x1a
	str r0, [r5, #0x3c]
	ldrh r0, [r5, #0x12]
	ldr r1, [r5, #0x40]
	ldr r2, _08093244 @ =gUnknown_080D7470
	mov sb, r2
	subs r1, #0x34
	asrs r1, r1, #4
	lsls r0, r0, #0x10
	asrs r0, r0, #0x14
	adds r0, r0, r1
	lsls r0, r0, #0x18
	mov ip, sb
	ldrh r6, [r2]
	mov r8, r6
	lsrs r0, r0, #0x18
	mov sl, r0
_080931FA:
	ldr r1, [r5, #0x3c]
	adds r0, r1, #0
	subs r0, #0x1a
	asrs r0, r0, #4
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	movs r3, #0
	cmp r8, r4
	bne _08093214
	mov r2, sb
	ldrh r0, [r2, #2]
	cmp r0, sl
	beq _08093236
_08093214:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0xd
	bhi _08093236
	lsls r2, r3, #2
	mov r6, ip
	adds r0, r2, r6
	ldrh r0, [r0]
	cmp r0, r4
	bne _08093214
	mov r0, sb
	adds r0, #2
	adds r0, r2, r0
	ldrh r0, [r0]
	cmp r0, sl
	bne _08093214
_08093236:
	cmp r3, #0xe
	beq _08093248
	adds r0, r1, #0
	adds r0, #0x10
	str r0, [r5, #0x3c]
	b _0809324A
	.align 2, 0
_08093244: .4byte gUnknown_080D7470
_08093248:
	movs r7, #1
_0809324A:
	cmp r7, #0
	beq _080931FA
	b _080932CE
_08093250:
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _080932CE
	movs r0, #0xba
	str r0, [r5, #0x3c]
	ldrh r0, [r5, #0x12]
	ldr r1, [r5, #0x40]
	ldr r2, _080932C4 @ =gUnknown_080D7470
	mov sb, r2
	subs r1, #0x34
	asrs r1, r1, #4
	lsls r0, r0, #0x10
	asrs r0, r0, #0x14
	adds r0, r0, r1
	lsls r0, r0, #0x18
	mov ip, sb
	ldrh r6, [r2]
	mov r8, r6
	lsrs r0, r0, #0x18
	mov sl, r0
_0809327A:
	ldr r1, [r5, #0x3c]
	adds r0, r1, #0
	subs r0, #0x1a
	asrs r0, r0, #4
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	movs r3, #0
	cmp r8, r4
	bne _08093294
	mov r2, sb
	ldrh r0, [r2, #2]
	cmp r0, sl
	beq _080932B6
_08093294:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0xd
	bhi _080932B6
	lsls r2, r3, #2
	mov r6, ip
	adds r0, r2, r6
	ldrh r0, [r0]
	cmp r0, r4
	bne _08093294
	mov r0, sb
	adds r0, #2
	adds r0, r2, r0
	ldrh r0, [r0]
	cmp r0, sl
	bne _08093294
_080932B6:
	cmp r3, #0xe
	beq _080932C8
	adds r0, r1, #0
	subs r0, #0x10
	str r0, [r5, #0x3c]
	b _080932CA
	.align 2, 0
_080932C4: .4byte gUnknown_080D7470
_080932C8:
	movs r7, #1
_080932CA:
	cmp r7, #0
	beq _0809327A
_080932CE:
	movs r0, #0
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80932E0
sub_80932E0: @ 0x080932E0
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r2, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	mov r8, r1
	ldr r6, _0809331C @ =gUnknown_080D7470
	movs r0, #0x80
	lsls r0, r0, #1
	mov ip, r0
	adds r7, r6, #0
	mov sb, ip
_080932FC:
	mov r1, r8
	cmp r1, #0
	bne _0809332C
	ldr r0, [r2, #0x40]
	cmp r0, #0x34
	bne _08093328
	ldrh r1, [r2, #0x12]
	movs r3, #0x12
	ldrsh r0, [r2, r3]
	cmp r0, #0
	bne _08093320
	movs r0, #0x84
	str r0, [r2, #0x40]
	mov r0, ip
	strh r0, [r2, #0x12]
	b _08093350
	.align 2, 0
_0809331C: .4byte gUnknown_080D7470
_08093320:
	adds r0, r1, #0
	subs r0, #0x10
	strh r0, [r2, #0x12]
	b _08093350
_08093328:
	subs r0, #0x10
	b _0809334E
_0809332C:
	ldr r0, [r2, #0x40]
	cmp r0, #0x84
	bne _0809334C
	movs r1, #0x12
	ldrsh r0, [r2, r1]
	cmp r0, sb
	bne _08093344
	movs r0, #0x34
	str r0, [r2, #0x40]
	movs r0, #0
	strh r0, [r2, #0x12]
	b _08093350
_08093344:
	ldrh r0, [r2, #0x12]
	adds r0, #0x10
	strh r0, [r2, #0x12]
	b _08093350
_0809334C:
	adds r0, #0x10
_0809334E:
	str r0, [r2, #0x40]
_08093350:
	ldr r1, [r2, #0x40]
	subs r1, #0x34
	asrs r1, r1, #4
	ldrh r0, [r2, #0x12]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x14
	adds r0, r0, r1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	ldr r0, [r2, #0x3c]
	subs r0, #0x1a
	asrs r0, r0, #4
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	movs r3, #0
	ldrh r0, [r7]
	cmp r0, r4
	bne _0809337A
	ldrh r0, [r6, #2]
	cmp r0, r5
	beq _08093398
_0809337A:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0xd
	bhi _08093398
	lsls r1, r3, #2
	adds r0, r1, r7
	ldrh r0, [r0]
	cmp r0, r4
	bne _0809337A
	adds r0, r6, #2
	adds r0, r1, r0
	ldrh r0, [r0]
	cmp r0, r5
	bne _0809337A
_08093398:
	movs r0, #0
	cmp r3, #0xe
	bne _080933A0
	movs r0, #1
_080933A0:
	cmp r0, #0
	beq _080932FC
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80933B0
sub_80933B0: @ 0x080933B0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	ldrh r2, [r0, #0xc]
	lsrs r2, r2, #8
	ldr r4, _08093440 @ =gFlags
	ldr r1, [r4]
	movs r3, #4
	orrs r1, r3
	str r1, [r4]
	ldr r1, [r0, #0x30]
	asrs r1, r1, #8
	lsls r1, r1, #0x18
	lsrs r5, r1, #0x18
	adds r2, r5, r2
	lsls r2, r2, #0x18
	lsrs r1, r2, #0x18
	mov ip, r1
	movs r3, #0xe8
	lsls r3, r3, #0x18
	adds r2, r2, r3
	lsrs r2, r2, #0x18
	str r2, [sp]
	ldr r0, [r0, #0x2c]
	lsls r0, r0, #8
	lsrs r2, r0, #0x10
	ldr r1, _08093444 @ =gUnknown_03003C5C
	ldr r0, _08093448 @ =0x04000040
	str r0, [r1]
	ldr r1, _0809344C @ =gUnknown_03003F30
	movs r0, #2
	strb r0, [r1]
	ldr r0, _08093450 @ =gBgOffsetsHBlank
	ldr r7, [r0]
	movs r4, #0
	ldr r6, _08093454 @ =gUnknown_080D74CE
	mov sb, r4
	movs r0, #2
	mov r8, r0
	adds r0, r2, #0
	adds r0, #0x1e
	lsls r0, r0, #0x10
	str r0, [sp, #4]
	adds r0, r2, #0
	adds r0, #0xd3
	lsls r0, r0, #0x10
	mov sl, r0
_08093414:
	cmp r4, r5
	blo _08093458
	adds r0, r5, #0
	adds r0, #0xc
	cmp r4, r0
	bge _08093458
	subs r1, r4, r5
	lsls r1, r1, #2
	mov r3, sb
	adds r0, r3, r1
	adds r0, r0, r6
	ldrh r0, [r0]
	adds r0, r2, r0
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	add r1, r8
	adds r1, r1, r6
	ldrh r0, [r1]
	adds r0, r2, r0
	lsls r0, r0, #0x10
	b _0809348A
	.align 2, 0
_08093440: .4byte gFlags
_08093444: .4byte gUnknown_03003C5C
_08093448: .4byte 0x04000040
_0809344C: .4byte gUnknown_03003F30
_08093450: .4byte gBgOffsetsHBlank
_08093454: .4byte gUnknown_080D74CE
_08093458:
	mov r0, ip
	subs r0, #0xc
	cmp r4, r0
	blt _08093484
	cmp r4, ip
	bhs _08093484
	ldr r0, [sp]
	subs r1, r4, r0
	lsls r1, r1, #2
	mov r3, sb
	adds r0, r3, r1
	adds r0, r0, r6
	ldrh r0, [r0]
	adds r0, r2, r0
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	add r1, r8
	adds r1, r1, r6
	ldrh r0, [r1]
	adds r0, r2, r0
	lsls r0, r0, #0x10
	b _0809348A
_08093484:
	ldr r0, [sp, #4]
	lsrs r3, r0, #0x10
	mov r0, sl
_0809348A:
	lsrs r1, r0, #0x10
	lsls r0, r3, #8
	adds r0, r1, r0
	strh r0, [r7]
	adds r7, #2
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #0x9f
	bls _08093414
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80934B0
sub_80934B0: @ 0x080934B0
	ldr r2, _080934E8 @ =0xFFFFFF00
	adds r1, r2, #0
	ldrh r3, [r0, #0x1c]
	adds r1, r1, r3
	strh r1, [r0, #0x1c]
	movs r3, #0x80
	lsls r3, r3, #1
	adds r2, r3, #0
	ldrh r3, [r0, #0x1e]
	adds r2, r2, r3
	strh r2, [r0, #0x1e]
	ldr r3, _080934EC @ =gBgScrollRegs
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x18
	rsbs r1, r1, #0
	strh r1, [r3]
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x18
	rsbs r2, r2, #0
	strh r2, [r3, #2]
	ldrh r1, [r0, #0x10]
	adds r1, #0x16
	strh r1, [r3, #4]
	ldrh r0, [r0, #0x12]
	adds r0, #0x24
	strh r0, [r3, #6]
	bx lr
	.align 2, 0
_080934E8: .4byte 0xFFFFFF00
_080934EC: .4byte gBgScrollRegs

	thumb_func_start sub_80934F0
sub_80934F0: @ 0x080934F0
	push {r4, r5, lr}
	adds r2, r0, #0
	lsls r1, r1, #0x18
	movs r3, #0
	movs r5, #0xb
	cmp r1, #0
	bne _08093548
	ldrh r0, [r2, #0xc]
	ldr r1, _08093520 @ =0x00006BFF
	cmp r0, r1
	bhi _08093524
	movs r4, #0x80
	lsls r4, r4, #5
	adds r0, r0, r4
	strh r0, [r2, #0xc]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, r1
	bls _08093526
	movs r0, #0xd8
	lsls r0, r0, #7
	strh r0, [r2, #0xc]
	b _08093526
	.align 2, 0
_08093520: .4byte 0x00006BFF
_08093524:
	movs r3, #1
_08093526:
	ldr r1, [r2, #0x30]
	movs r4, #0xa8
	lsls r4, r4, #6
	cmp r1, r4
	ble _0809358C
	movs r0, #1
	lsls r0, r5
	subs r0, r1, r0
	str r0, [r2, #0x30]
	ldr r1, _08093544 @ =0x000029FF
	cmp r0, r1
	bgt _08093592
	str r4, [r2, #0x30]
	b _08093592
	.align 2, 0
_08093544: .4byte 0x000029FF
_08093548:
	ldrh r0, [r2, #0xc]
	cmp r0, #0
	beq _08093568
	ldr r1, _08093560 @ =0xFFFFF000
	adds r0, r0, r1
	strh r0, [r2, #0xc]
	lsls r0, r0, #0x10
	ldr r1, _08093564 @ =0x6BFF0000
	cmp r0, r1
	bls _0809356A
	strh r3, [r2, #0xc]
	b _0809356A
	.align 2, 0
_08093560: .4byte 0xFFFFF000
_08093564: .4byte 0x6BFF0000
_08093568:
	movs r3, #1
_0809356A:
	ldr r1, [r2, #0x30]
	ldr r0, _08093588 @ =0x00005FFF
	cmp r1, r0
	bgt _0809358C
	movs r0, #1
	lsls r0, r5
	adds r0, r1, r0
	str r0, [r2, #0x30]
	movs r1, #0xc0
	lsls r1, r1, #7
	cmp r0, r1
	ble _08093592
	str r1, [r2, #0x30]
	b _08093592
	.align 2, 0
_08093588: .4byte 0x00005FFF
_0809358C:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
_08093592:
	cmp r3, #2
	bne _0809359A
	movs r0, #1
	b _0809359C
_0809359A:
	movs r0, #0
_0809359C:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80935A4
sub_80935A4: @ 0x080935A4
	push {r4, lr}
	adds r3, r0, #0
	movs r0, #0xbd
	lsls r0, r0, #2
	adds r1, r3, r0
	adds r4, r3, #0
	adds r4, #0xc4
	ldr r0, [r3, #0x3c]
	movs r2, #0
	strh r0, [r4, #0x10]
	ldr r0, [r3, #0x40]
	strh r0, [r4, #0x12]
	movs r0, #0xe1
	str r0, [r4, #8]
	strh r2, [r1]
	ldrh r0, [r3, #0x14]
	strh r0, [r1, #2]
	ldrh r0, [r3, #0x16]
	strh r0, [r1, #4]
	ldrh r0, [r4, #0x10]
	strh r0, [r1, #6]
	ldrh r0, [r4, #0x12]
	strh r0, [r1, #8]
	adds r0, r4, #0
	bl TransformSprite
	adds r0, r4, #0
	bl DisplaySprite
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_80935E4
sub_80935E4: @ 0x080935E4
	push {r4, lr}
	sub sp, #4
	adds r3, r0, #0
	movs r1, #0
	ldrb r2, [r3, #3]
	adds r4, r2, #0
	mov r0, sp
	strb r1, [r0]
	mov r1, sp
	ldrb r0, [r0, #1]
	adds r0, #0xf
	strb r0, [r1, #1]
	adds r1, r3, #0
	adds r1, #0x74
	ldr r0, [r3, #0x34]
	asrs r0, r0, #8
	subs r0, #1
	strh r0, [r1, #0x10]
	cmp r2, #1
	beq _08093622
	cmp r2, #1
	bgt _08093616
	cmp r2, #0
	beq _0809361C
	b _08093632
_08093616:
	cmp r4, #2
	beq _0809362A
	b _08093632
_0809361C:
	ldr r0, [r3, #0x38]
	asrs r0, r0, #8
	b _08093630
_08093622:
	ldr r0, [r3, #0x38]
	asrs r0, r0, #8
	subs r0, #0xf
	b _08093630
_0809362A:
	ldr r0, [r3, #0x38]
	asrs r0, r0, #8
	subs r0, #0x1e
_08093630:
	strh r0, [r1, #0x12]
_08093632:
	adds r0, r1, #0
	bl DisplaySprite
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8093640
sub_8093640: @ 0x08093640
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	movs r6, #0
	adds r5, r4, #0
	adds r5, #0xec
_0809364A:
	ldr r0, [r4, #0x44]
	asrs r0, r0, #8
	lsls r1, r6, #3
	adds r0, r0, r1
	lsls r1, r6, #2
	adds r0, r0, r1
	strh r0, [r5, #0x10]
	ldr r0, [r4, #0x48]
	asrs r0, r0, #8
	strh r0, [r5, #0x12]
	ldrb r0, [r4, #6]
	cmp r6, r0
	bne _08093672
	ldrh r0, [r4, #0xa]
	cmp r0, #0x27
	bhi _0809367C
	adds r0, r5, #0
	bl DisplaySprite
	b _0809367C
_08093672:
	cmp r6, r0
	bls _0809367C
	adds r0, r5, #0
	bl DisplaySprite
_0809367C:
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #5
	bls _0809364A
	ldrh r0, [r4, #0xa]
	adds r0, #1
	strh r0, [r4, #0xa]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x3b
	bls _08093698
	movs r0, #0
	strh r0, [r4, #0xa]
_08093698:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80936A0
sub_80936A0: @ 0x080936A0
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r2, #0
	movs r0, #0xb3
	lsls r0, r0, #2
	adds r4, r5, r0
	movs r1, #0x12
	ldrsh r0, [r5, r1]
	cmp r0, #0xf0
	bgt _080936DA
	ldr r0, [r5, #0x6c]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x70]
	asrs r0, r0, #8
	adds r0, #0x6c
	strh r0, [r4, #0x12]
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #4
	orrs r0, r1
	str r0, [r4, #8]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	movs r2, #1
_080936DA:
	movs r1, #0x12
	ldrsh r0, [r5, r1]
	cmp r0, #0
	ble _08093706
	ldr r0, [r5, #0x6c]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x70]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	ldr r0, [r4, #8]
	ldr r1, _0809370C @ =0xFFFFF7FF
	ands r0, r1
	str r0, [r4, #8]
	cmp r2, #0
	bne _08093700
	adds r0, r4, #0
	bl UpdateSpriteAnimation
_08093700:
	adds r0, r4, #0
	bl DisplaySprite
_08093706:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809370C: .4byte 0xFFFFF7FF

	thumb_func_start sub_8093710
sub_8093710: @ 0x08093710
	push {r4, r5, r6, lr}
	movs r5, #0
	ldr r6, _08093778 @ =gCurTask
	ldr r0, [r6]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_80933B0
	adds r0, r4, #0
	bl sub_80934B0
	adds r0, r4, #0
	movs r1, #1
	bl sub_80934F0
	cmp r0, #1
	bne _0809373A
	movs r5, #1
_0809373A:
	adds r0, r4, #0
	bl sub_809380C
	adds r0, r4, #0
	bl sub_809382C
	adds r0, r4, #0
	bl sub_809384C
	adds r0, r4, #0
	bl sub_80938B4
	adds r0, r4, #0
	bl sub_8093904
	ldr r2, _0809377C @ =gWinRegs
	ldr r1, [r4, #0x30]
	asrs r0, r1, #8
	adds r1, r1, r0
	ldrh r0, [r4, #0xc]
	lsrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2, #4]
	cmp r5, #0
	beq _08093772
	ldr r1, [r6]
	ldr r0, _08093780 @ =sub_80924DC
	str r0, [r1, #8]
_08093772:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08093778: .4byte gCurTask
_0809377C: .4byte gWinRegs
_08093780: .4byte sub_80924DC

	thumb_func_start sub_8093784
sub_8093784: @ 0x08093784
	push {lr}
	adds r2, r0, #0
	ldrb r3, [r2, #4]
	ldr r1, _080937B8 @ =gUnknown_080D6ED4
	lsls r0, r3, #2
	adds r0, r0, r1
	ldr r1, [r2, #0x4c]
	ldr r0, [r0]
	adds r1, r1, r0
	str r1, [r2, #0x4c]
	cmp r3, #0
	bne _080937A2
	ldr r0, _080937BC @ =0x000009FF
	cmp r1, r0
	bgt _080937AE
_080937A2:
	cmp r3, #1
	bne _080937C4
	ldr r1, [r2, #0x4c]
	ldr r0, _080937C0 @ =0xFFFFF600
	cmp r1, r0
	bgt _080937C4
_080937AE:
	ldrb r0, [r2, #4]
	adds r0, #1
	strb r0, [r2, #4]
	b _080937D6
	.align 2, 0
_080937B8: .4byte gUnknown_080D6ED4
_080937BC: .4byte 0x000009FF
_080937C0: .4byte 0xFFFFF600
_080937C4:
	cmp r3, #2
	bne _080937D6
	ldr r0, [r2, #0x4c]
	cmp r0, #0
	ble _080937D6
	movs r0, #0
	str r0, [r2, #0x4c]
	movs r0, #1
	b _080937D8
_080937D6:
	movs r0, #0
_080937D8:
	pop {r1}
	bx r1

	thumb_func_start sub_80937DC
sub_80937DC: @ 0x080937DC
	push {lr}
	adds r1, r0, #0
	ldrb r0, [r1, #3]
	cmp r0, #1
	bne _080937F2
	ldrb r0, [r1, #6]
	adds r2, r0, #0
	cmp r2, #0
	beq _080937FE
	subs r0, #1
	b _08093804
_080937F2:
	cmp r0, #2
	bne _08093806
	ldrb r0, [r1, #6]
	ldrb r2, [r1, #5]
	cmp r0, r2
	bne _08093802
_080937FE:
	strb r2, [r1, #6]
	b _08093806
_08093802:
	adds r0, #1
_08093804:
	strb r0, [r1, #6]
_08093806:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_809380C
sub_809380C: @ 0x0809380C
	push {lr}
	movs r1, #0x8a
	lsls r1, r1, #1
	adds r2, r0, r1
	ldr r1, [r0, #0x4c]
	asrs r1, r1, #8
	strh r1, [r2, #0x10]
	ldr r0, [r0, #0x50]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	adds r0, r2, #0
	bl DisplaySprite
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_809382C
sub_809382C: @ 0x0809382C
	push {lr}
	movs r1, #0xb2
	lsls r1, r1, #1
	adds r2, r0, r1
	ldr r1, [r0, #0x5c]
	asrs r1, r1, #8
	strh r1, [r2, #0x10]
	ldr r0, [r0, #0x60]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	adds r0, r2, #0
	bl DisplaySprite
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_809384C
sub_809384C: @ 0x0809384C
	push {lr}
	movs r1, #0x9e
	lsls r1, r1, #1
	adds r2, r0, r1
	ldr r1, [r0, #0x54]
	asrs r1, r1, #8
	strh r1, [r2, #0x10]
	ldr r0, [r0, #0x58]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	adds r0, r2, #0
	bl DisplaySprite
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_809386C
sub_809386C: @ 0x0809386C
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x9c
	ldr r0, [r5, #0x3c]
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x40]
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl DisplaySprite
	movs r0, #0xda
	lsls r0, r0, #1
	adds r4, r5, r0
	ldr r0, [r5, #0x3c]
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x40]
	strh r0, [r4, #0x12]
	ldr r1, _080938B0 @ =gUnknown_080D7458
	ldrb r0, [r5, #2]
	ldrb r1, [r1, #2]
	adds r0, r0, r1
	strb r0, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080938B0: .4byte gUnknown_080D7458

	thumb_func_start sub_80938B4
sub_80938B4: @ 0x080938B4
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r0, #0xc6
	lsls r0, r0, #1
	adds r4, r5, r0
	ldr r0, [r5, #0x64]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x68]
	asrs r0, r0, #8
	subs r0, #0xf
	strh r0, [r4, #0x12]
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	str r0, [r4, #8]
	adds r0, r4, #0
	bl DisplaySprite
	ldr r0, [r5, #0x64]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x68]
	asrs r0, r0, #8
	subs r0, #0x1e
	strh r0, [r4, #0x12]
	ldr r0, [r4, #8]
	ldr r1, _08093900 @ =0xFFFFFBFF
	ands r0, r1
	str r0, [r4, #8]
	adds r0, r4, #0
	bl DisplaySprite
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08093900: .4byte 0xFFFFFBFF

	thumb_func_start sub_8093904
sub_8093904: @ 0x08093904
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	movs r6, #0
	b _08093944
_0809390C:
	lsls r2, r6, #2
	adds r4, r2, r6
	lsls r4, r4, #3
	movs r0, #0xee
	lsls r0, r0, #1
	adds r4, r4, r0
	adds r4, r5, r4
	ldr r0, [r5, #0x44]
	asrs r0, r0, #8
	lsls r1, r6, #3
	adds r0, r0, r1
	adds r0, r0, r2
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x48]
	asrs r0, r0, #8
	subs r0, #1
	strh r0, [r4, #0x12]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
_08093944:
	ldrb r0, [r5, #5]
	cmp r6, r0
	blo _0809390C
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_8093950
sub_8093950: @ 0x08093950
	bx lr
	.align 2, 0

	thumb_func_start OptionsSlideInit_SoundTest
OptionsSlideInit_SoundTest: @ 0x08093954
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r1, #0
	adds r6, r2, #0
	adds r4, r3, #0
	ldr r0, _08093A94 @ =InitOptionsSlide_SoundTest
	movs r1, #0x94
	lsls r1, r1, #2
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r3, _08093A98 @ =sub_8094698
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	ldrh r2, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r0, r0, r2
	mov ip, r0
	str r4, [r0, #0xc]
	movs r3, #0
	movs r1, #0
	strh r1, [r0, #0x18]
	strb r3, [r0, #5]
	ldr r4, _08093A9C @ =0x030000A0
	adds r0, r2, r4
	str r5, [r0]
	ldr r0, _08093AA0 @ =gSaveGame
	ldr r4, _08093AA4 @ =0x00000366
	adds r0, r0, r4
	ldrb r0, [r0]
	mov r4, ip
	strb r0, [r4, #4]
	strb r3, [r4, #6]
	str r6, [r4, #0x14]
	strh r1, [r4, #0x12]
	strh r1, [r4, #0x24]
	strh r1, [r4, #0x22]
	str r1, [r4, #0x58]
	str r1, [r4, #0x5c]
	ldr r0, _08093AA8 @ =0x03000028
	adds r4, r2, r0
	movs r3, #0
	subs r0, #0xe
	adds r2, r2, r0
_080939B0:
	lsls r0, r1, #2
	adds r0, r4, r0
	str r3, [r0]
	cmp r1, #3
	bhi _080939C0
	lsls r0, r1, #1
	adds r0, r2, r0
	strh r3, [r0]
_080939C0:
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0xb
	bls _080939B0
	ldr r1, _08093AAC @ =gBgScrollRegs
	movs r2, #4
	ldrsh r0, [r1, r2]
	rsbs r0, r0, #0
	adds r0, #0x18
	mov r3, ip
	str r0, [r3, #0x60]
	movs r4, #6
	ldrsh r0, [r1, r4]
	rsbs r0, r0, #0
	adds r0, #0x87
	str r0, [r3, #0x64]
	movs r2, #4
	ldrsh r0, [r1, r2]
	rsbs r0, r0, #0
	adds r0, #0x19
	str r0, [r3, #0x68]
	movs r3, #6
	ldrsh r0, [r1, r3]
	rsbs r0, r0, #0
	adds r0, #0x19
	mov r4, ip
	str r0, [r4, #0x6c]
	movs r2, #4
	ldrsh r0, [r1, r2]
	rsbs r0, r0, #0
	str r0, [r4, #0x70]
	movs r3, #6
	ldrsh r0, [r1, r3]
	rsbs r0, r0, #0
	str r0, [r4, #0x74]
	movs r4, #4
	ldrsh r0, [r1, r4]
	rsbs r0, r0, #0
	adds r0, #0x50
	mov r2, ip
	str r0, [r2, #0x78]
	movs r3, #6
	ldrsh r0, [r1, r3]
	rsbs r0, r0, #0
	adds r0, #0x5c
	str r0, [r2, #0x7c]
	adds r2, #0x80
	movs r4, #4
	ldrsh r0, [r1, r4]
	rsbs r0, r0, #0
	str r0, [r2]
	adds r2, #4
	movs r3, #6
	ldrsh r0, [r1, r3]
	rsbs r0, r0, #0
	str r0, [r2]
	adds r2, #0xc
	movs r4, #4
	ldrsh r0, [r1, r4]
	rsbs r0, r0, #0
	adds r0, #0x50
	str r0, [r2]
	adds r2, #4
	movs r3, #6
	ldrsh r0, [r1, r3]
	rsbs r0, r0, #0
	adds r0, #0x5c
	str r0, [r2]
	adds r2, #4
	movs r4, #4
	ldrsh r0, [r1, r4]
	rsbs r0, r0, #0
	str r0, [r2]
	adds r2, #4
	movs r3, #6
	ldrsh r0, [r1, r3]
	rsbs r0, r0, #0
	str r0, [r2]
	mov r0, ip
	adds r0, #0x88
	movs r2, #0
	str r2, [r0]
	adds r0, #4
	str r2, [r0]
	movs r1, #0
	movs r0, #0x80
	lsls r0, r0, #1
	mov r4, ip
	strh r0, [r4, #0x26]
	strb r1, [r4, #9]
	strb r1, [r4, #8]
	movs r0, #1
	strb r0, [r4, #7]
	str r2, [r4]
	mov r0, ip
	bl sub_8094144
	movs r0, #6
	bl m4aSongNumStop
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08093A94: .4byte InitOptionsSlide_SoundTest
_08093A98: .4byte sub_8094698
_08093A9C: .4byte 0x030000A0
_08093AA0: .4byte gSaveGame
_08093AA4: .4byte 0x00000366
_08093AA8: .4byte 0x03000028
_08093AAC: .4byte gBgScrollRegs

	thumb_func_start sub_8093AB0
sub_8093AB0: @ 0x08093AB0
	push {r4, r5, r6, r7, lr}
	ldr r0, _08093AEC @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r7, _08093AF0 @ =gSoundInfo
	adds r0, r4, #0
	bl sub_80945A0
	adds r0, r4, #0
	bl sub_8093F64
	adds r0, r4, #0
	bl sub_8094630
	adds r0, r4, #0
	bl sub_8094664
	adds r0, r4, #0
	bl sub_8093FDC
	ldrb r0, [r4, #6]
	cmp r0, #0
	beq _08093AF4
	adds r0, r4, #0
	bl sub_8093DF4
	b _08093AFA
	.align 2, 0
_08093AEC: .4byte gCurTask
_08093AF0: .4byte gSoundInfo
_08093AF4:
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r4, #0x26]
_08093AFA:
	adds r0, r4, #0
	bl sub_8094604
	adds r0, r4, #0
	bl sub_80940B4
	ldr r2, _08093B28 @ =gBgScrollRegs
	movs r0, #4
	ldrsh r1, [r2, r0]
	movs r0, #0xc8
	rsbs r0, r0, #0
	cmp r1, r0
	bgt _08093B2C
	ldr r0, [r4, #0x70]
	cmn r0, r1
	bgt _08093B2C
	ldr r1, [r4, #0xc]
	movs r0, #0
	strb r0, [r1]
	movs r0, #0
	strb r0, [r4, #5]
	b _08093B94
	.align 2, 0
_08093B28: .4byte gBgScrollRegs
_08093B2C:
	ldr r2, _08093B68 @ =gBgScrollRegs
	movs r1, #4
	ldrsh r0, [r2, r1]
	rsbs r0, r0, #0
	str r0, [r4, #0x70]
	ldr r0, _08093B6C @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08093BAC
	ldrb r0, [r4, #6]
	cmp r0, #1
	bne _08093B74
	movs r1, #0
	strb r1, [r4, #6]
	adds r0, r4, #0
	adds r0, #0x88
	str r1, [r0]
	adds r0, #4
	str r1, [r0]
	ldr r1, _08093B70 @ =gUnknown_080D7530
	ldrh r0, [r4, #0x12]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	bl m4aSongNumStop
	b _08093C44
	.align 2, 0
_08093B68: .4byte gBgScrollRegs
_08093B6C: .4byte gPressedKeys
_08093B70: .4byte gUnknown_080D7530
_08093B74:
	movs r0, #0x6b
	bl m4aSongNumStart
	movs r0, #6
	bl m4aSongNumStart
	ldr r1, [r4, #0x14]
	movs r0, #0x7b
	strh r0, [r1]
	ldr r1, _08093BA0 @ =gUnknown_080D7530
	ldrh r0, [r4, #0x12]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	bl m4aSongNumStop
_08093B94:
	ldr r0, _08093BA4 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08093BA8 @ =sub_8093D30
	str r0, [r1, #8]
	b _08093D28
	.align 2, 0
_08093BA0: .4byte gUnknown_080D7530
_08093BA4: .4byte gCurTask
_08093BA8: .4byte sub_8093D30
_08093BAC:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08093C44
	movs r0, #4
	ldrsh r5, [r2, r0]
	cmp r5, #0
	beq _08093BBE
	b _08093CCE
_08093BBE:
	bl m4aMPlayAllStop
	ldr r1, _08093C40 @ =gUnknown_080D7530
	ldrh r0, [r4, #0x12]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	bl m4aSongNumStop
	strh r5, [r4, #0x24]
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r4, #0x26]
	str r5, [r4, #0x5c]
	str r5, [r4, #0x58]
	strh r5, [r4, #0x22]
	movs r1, #0
	adds r6, r4, #0
	adds r6, #0x1a
	adds r5, r4, #0
	adds r5, #0x28
	movs r2, #0
	adds r3, r7, #0
	adds r3, #0x70
_08093BEE:
	lsls r0, r1, #2
	adds r0, r5, r0
	str r2, [r0]
	lsls r0, r1, #6
	adds r0, r3, r0
	str r2, [r0]
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0xb
	bls _08093BEE
	movs r1, #0
	ldr r5, _08093C40 @ =gUnknown_080D7530
	adds r2, r6, #0
	movs r3, #0
_08093C0C:
	lsls r0, r1, #1
	adds r0, r2, r0
	strh r3, [r0]
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #3
	bls _08093C0C
	movs r2, #0xd4
	lsls r2, r2, #2
	adds r1, r7, r2
	movs r0, #0
	strb r0, [r1]
	movs r0, #1
	strb r0, [r4, #6]
	movs r1, #0x18
	ldrsh r0, [r4, r1]
	lsls r0, r0, #1
	adds r0, r0, r5
	ldrh r0, [r0]
	bl m4aSongNumStart
	ldrh r0, [r4, #0x18]
	strh r0, [r4, #0x12]
	b _08093D28
	.align 2, 0
_08093C40: .4byte gUnknown_080D7530
_08093C44:
	ldr r0, _08093C74 @ =gBgScrollRegs
	movs r2, #4
	ldrsh r0, [r0, r2]
	cmp r0, #0
	bne _08093CCE
	ldr r0, _08093C78 @ =gRepeatedKeys
	ldrh r1, [r0]
	movs r0, #0x30
	ands r0, r1
	cmp r0, #0
	beq _08093CCE
	movs r5, #0
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _08093C80
	ldrh r1, [r4, #0x18]
	movs r2, #0x18
	ldrsh r0, [r4, r2]
	cmp r0, #0x7a
	bne _08093C7C
	strh r5, [r4, #0x18]
	b _08093C9A
	.align 2, 0
_08093C74: .4byte gBgScrollRegs
_08093C78: .4byte gRepeatedKeys
_08093C7C:
	adds r0, r1, #1
	b _08093C98
_08093C80:
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _08093C9A
	ldrh r1, [r4, #0x18]
	movs r2, #0x18
	ldrsh r0, [r4, r2]
	cmp r0, #0
	bne _08093C96
	movs r0, #0x7a
	b _08093C98
_08093C96:
	subs r0, r1, #1
_08093C98:
	strh r0, [r4, #0x18]
_08093C9A:
	movs r1, #0x18
	ldrsh r0, [r4, r1]
	adds r0, #1
	movs r1, #0xa
	bl __divsi3
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	adds r0, r5, #0
	movs r1, #0xa
	bl __udivsi3
	strb r0, [r4, #9]
	ldrb r1, [r4, #9]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	subs r0, r5, r0
	strb r0, [r4, #8]
	ldrb r1, [r4, #0x18]
	adds r1, #1
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #1
	subs r1, r1, r0
	strb r1, [r4, #7]
_08093CCE:
	ldrb r0, [r4, #6]
	cmp r0, #1
	bne _08093D28
	ldr r0, [r4, #0x58]
	cmp r0, #0
	bne _08093D24
	movs r2, #0x22
	ldrsh r0, [r4, r2]
	cmp r0, #0
	bne _08093D24
	movs r1, #0xd4
	lsls r1, r1, #2
	adds r0, r7, r1
	movs r1, #0
	ldrsb r1, [r0, r1]
	cmp r1, #0
	bne _08093D28
	ldrh r0, [r4, #0x24]
	adds r0, #1
	strh r0, [r4, #0x24]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x77
	bls _08093D28
	strh r1, [r4, #0x24]
	movs r0, #0
	strb r0, [r4, #6]
	adds r0, r4, #0
	adds r0, #0x88
	str r1, [r0]
	adds r0, #4
	str r1, [r0]
	ldr r1, _08093D20 @ =gUnknown_080D7530
	ldrh r0, [r4, #0x12]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	bl m4aSongNumStop
	b _08093D28
	.align 2, 0
_08093D20: .4byte gUnknown_080D7530
_08093D24:
	movs r0, #0
	strh r0, [r4, #0x24]
_08093D28:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8093D30
sub_8093D30: @ 0x08093D30
	push {r4, lr}
	ldr r0, _08093DA4 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_80945A0
	adds r0, r4, #0
	bl sub_8093F64
	adds r0, r4, #0
	bl sub_8094630
	adds r0, r4, #0
	bl sub_8094664
	adds r0, r4, #0
	bl sub_8093FDC
	ldrb r0, [r4, #6]
	cmp r0, #0
	beq _08093D68
	adds r0, r4, #0
	bl sub_8093DF4
_08093D68:
	adds r0, r4, #0
	bl sub_8094604
	adds r0, r4, #0
	bl sub_80940B4
	ldr r2, _08093DA8 @ =gBgScrollRegs
	movs r0, #4
	ldrsh r1, [r2, r0]
	movs r0, #0xc8
	rsbs r0, r0, #0
	cmp r1, r0
	bgt _08093DD8
	ldr r0, [r4, #0x70]
	cmn r0, r1
	bgt _08093DD8
	ldr r3, _08093DAC @ =gFlags
	ldr r2, [r3]
	movs r0, #0x80
	lsls r0, r0, #0xa
	ands r0, r2
	cmp r0, #0
	beq _08093DB4
	ldr r0, _08093DB0 @ =gUnknown_080D6C1C
	movs r2, #0x80
	lsls r2, r2, #1
	movs r1, #0
	bl sub_80C4564
	b _08093DCA
	.align 2, 0
_08093DA4: .4byte gCurTask
_08093DA8: .4byte gBgScrollRegs
_08093DAC: .4byte gFlags
_08093DB0: .4byte gUnknown_080D6C1C
_08093DB4:
	ldr r1, _08093DE0 @ =0x040000D4
	ldr r0, _08093DE4 @ =gUnknown_080D6C1C
	str r0, [r1]
	ldr r0, _08093DE8 @ =gObjPalette
	str r0, [r1, #4]
	ldr r0, _08093DEC @ =0x80000100
	str r0, [r1, #8]
	ldr r0, [r1, #8]
	movs r0, #2
	orrs r2, r0
	str r2, [r3]
_08093DCA:
	ldr r1, [r4, #0xc]
	movs r0, #0
	strb r0, [r1]
	ldr r0, _08093DF0 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
_08093DD8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08093DE0: .4byte 0x040000D4
_08093DE4: .4byte gUnknown_080D6C1C
_08093DE8: .4byte gObjPalette
_08093DEC: .4byte 0x80000100
_08093DF0: .4byte gCurTask

	thumb_func_start sub_8093DF4
sub_8093DF4: @ 0x08093DF4
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	adds r6, r0, #0
	ldr r0, _08093E5C @ =gSoundInfo
	mov sb, r0
	movs r1, #0
	mov r8, r1
	mov r0, sp
	movs r2, #8
	bl memset
	mov r1, sp
	ldr r0, _08093E60 @ =0x04000062
	ldrh r0, [r0]
	lsrs r0, r0, #0xc
	strh r0, [r1]
	movs r0, #0
	strh r0, [r1, #2]
	ldr r0, _08093E64 @ =0x04000072
	ldrh r0, [r0]
	lsrs r0, r0, #0xc
	strh r0, [r1, #4]
	ldr r0, _08093E68 @ =0x04000078
	ldrh r0, [r0]
	lsrs r0, r0, #0xc
	strh r0, [r1, #6]
	mov r3, r8
	strh r3, [r6, #0x22]
	mov r7, r8
	str r7, [r6, #0x58]
	movs r5, #0
	movs r0, #0x1a
	adds r0, r0, r6
	mov ip, r0
_08093E3E:
	lsls r2, r5, #1
	mov r1, ip
	adds r4, r1, r2
	movs r3, #0
	ldrsh r1, [r4, r3]
	mov r7, sp
	adds r3, r7, r2
	movs r7, #0
	ldrsh r0, [r3, r7]
	subs r1, r1, r0
	cmp r1, #0
	blt _08093E6C
	ldrh r0, [r4]
	ldrh r1, [r3]
	b _08093E70
	.align 2, 0
_08093E5C: .4byte gSoundInfo
_08093E60: .4byte 0x04000062
_08093E64: .4byte 0x04000072
_08093E68: .4byte 0x04000078
_08093E6C:
	ldrh r0, [r3]
	ldrh r1, [r4]
_08093E70:
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	movs r0, #0x22
	ldrsh r1, [r6, r0]
	lsls r0, r3, #0x10
	asrs r0, r0, #0x10
	cmp r1, r0
	bge _08093E84
	strh r3, [r6, #0x22]
_08093E84:
	mov r3, ip
	adds r1, r3, r2
	mov r7, sp
	adds r0, r7, r2
	ldrh r0, [r0]
	strh r0, [r1]
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #3
	bls _08093E3E
	movs r5, #0
	movs r0, #0x70
	add r0, sb
	mov ip, r0
	adds r7, r6, #0
	adds r7, #0x28
_08093EA6:
	lsls r0, r5, #6
	mov r1, ip
	adds r4, r1, r0
	ldr r1, [r4]
	lsls r0, r5, #2
	adds r3, r7, r0
	ldr r0, [r3]
	subs r2, r0, r1
	subs r1, r1, r0
	cmp r2, #0
	blt _08093EBE
	adds r1, r2, #0
_08093EBE:
	ldr r0, [r6, #0x58]
	cmp r0, r1
	bhs _08093EC6
	str r1, [r6, #0x58]
_08093EC6:
	ldr r0, [r4]
	str r0, [r3]
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #0xb
	bls _08093EA6
	ldr r0, [r6, #0x58]
	lsrs r3, r0, #7
	cmp r3, #0x20
	bls _08093EDE
	movs r3, #0x20
_08093EDE:
	ldrh r0, [r6, #0x22]
	lsls r0, r0, #0x13
	lsrs r4, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x20
	ble _08093EEC
	movs r4, #0x20
_08093EEC:
	movs r1, #0xd4
	lsls r1, r1, #2
	add r1, sb
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	beq _08093F3E
	ldr r0, [r6, #0x5c]
	movs r2, #0
	ldrsb r2, [r1, r2]
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	subs r0, r2, r1
	cmp r0, #0
	bge _08093F0C
	subs r0, r1, r2
_08093F0C:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	ble _08093F1C
	lsls r0, r0, #0x12
	b _08093F1E
_08093F1C:
	lsls r0, r0, #0x11
_08093F1E:
	lsrs r0, r0, #0x10
	mov r8, r0
	mov r7, r8
	lsls r0, r7, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x30
	ble _08093F30
	movs r0, #0x30
	mov r8, r0
_08093F30:
	movs r0, #0xd4
	lsls r0, r0, #2
	add r0, sb
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	str r0, [r6, #0x5c]
_08093F3E:
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r4, r1
	adds r0, r3, r0
	add r0, r8
	strh r0, [r6, #0x26]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	adds r1, #0x80
	cmp r0, r1
	bls _08093F56
	strh r1, [r6, #0x26]
_08093F56:
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8093F64
sub_8093F64: @ 0x08093F64
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r0, #0xa4
	ldr r2, _08093FD4 @ =gUnknown_080D7628
	ldrb r1, [r5, #4]
	lsls r1, r1, #3
	adds r1, r1, r2
	ldrh r1, [r1]
	strh r1, [r0, #0xc]
	ldrb r1, [r5, #4]
	lsls r1, r1, #3
	adds r1, r1, r2
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	ldr r1, [r5, #0x60]
	strh r1, [r0, #0x10]
	ldr r1, [r5, #0x64]
	strh r1, [r0, #0x12]
	bl DisplaySprite
	adds r4, r5, #0
	adds r4, #0xcc
	ldr r1, _08093FD8 @ =gUnknown_080D7658
	ldrb r0, [r5, #4]
	lsls r0, r0, #1
	ldrb r2, [r5, #6]
	adds r0, r0, r2
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r4, #0xc]
	ldrb r0, [r5, #4]
	lsls r0, r0, #1
	ldrb r2, [r5, #6]
	adds r0, r0, r2
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrb r0, [r0, #2]
	strb r0, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	ldr r0, [r5, #0x60]
	adds r0, #0x50
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x64]
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08093FD4: .4byte gUnknown_080D7628
_08093FD8: .4byte gUnknown_080D7658

	thumb_func_start sub_8093FDC
sub_8093FDC: @ 0x08093FDC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	movs r6, #0
	ldr r0, _08094048 @ =gUnknown_080D76F0
	mov r8, r0
	adds r7, r5, #0
	adds r7, #0x90
_08093FEE:
	lsls r0, r6, #2
	adds r0, r0, r6
	lsls r0, r0, #3
	movs r1, #0x8e
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r4, r5, r0
	adds r1, r5, #7
	adds r1, r1, r6
	ldrb r0, [r1]
	lsls r0, r0, #3
	add r0, r8
	ldrh r0, [r0]
	strh r0, [r4, #0xc]
	ldrb r0, [r1]
	lsls r0, r0, #3
	add r0, r8
	ldrb r0, [r0, #2]
	strb r0, [r4, #0x1a]
	cmp r6, #0
	bne _0809404C
	ldr r1, [r7]
	strh r1, [r4, #0x10]
	adds r0, r5, #0
	adds r0, #0x94
	ldr r0, [r0]
	strh r0, [r4, #0x12]
	ldrb r0, [r5, #8]
	cmp r0, #0
	beq _0809402E
	adds r0, r1, #6
	strh r0, [r4, #0x10]
_0809402E:
	ldrb r0, [r5, #9]
	cmp r0, #0
	beq _0809406C
	ldrb r0, [r5, #8]
	cmp r0, #0
	beq _08094040
	ldrh r0, [r4, #0x10]
	subs r0, #6
	strh r0, [r4, #0x10]
_08094040:
	ldrh r0, [r4, #0x10]
	adds r0, #0xc
	strh r0, [r4, #0x10]
	b _0809406C
	.align 2, 0
_08094048: .4byte gUnknown_080D76F0
_0809404C:
	cmp r6, #1
	bne _0809407A
	ldr r1, [r7]
	subs r0, r1, #6
	strh r0, [r4, #0x10]
	adds r0, r5, #0
	adds r0, #0x94
	ldr r0, [r0]
	strh r0, [r4, #0x12]
	ldrb r0, [r5, #9]
	cmp r0, #0
	beq _08094066
	strh r1, [r4, #0x10]
_08094066:
	ldrh r0, [r5, #8]
	cmp r0, #0
	beq _0809409E
_0809406C:
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	b _0809409E
_0809407A:
	cmp r6, #2
	bne _0809409E
	ldr r0, [r7]
	subs r0, #0xc
	strh r0, [r4, #0x10]
	adds r0, r5, #0
	adds r0, #0x94
	ldr r0, [r0]
	strh r0, [r4, #0x12]
	ldrb r0, [r5, #9]
	cmp r0, #0
	beq _0809409E
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
_0809409E:
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #2
	bls _08093FEE
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80940B4
sub_80940B4: @ 0x080940B4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	movs r0, #0xde
	lsls r0, r0, #1
	adds r4, r7, r0
	movs r5, #0
	ldr r1, _08094108 @ =gBgScrollRegs
	mov r8, r1
	adds r6, r7, #0
	adds r6, #0x88
_080940CC:
	mov r1, r8
	ldrh r0, [r1, #4]
	rsbs r2, r0, #0
	adds r3, r2, #0
	adds r3, #0x38
	strh r3, [r4, #0x10]
	ldrh r1, [r1, #6]
	rsbs r1, r1, #0
	adds r1, #0x5a
	strh r1, [r4, #0x12]
	adds r0, r7, #0
	adds r0, #0x8c
	ldr r0, [r0]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r4, #0x12]
	cmp r5, #0
	beq _08094110
	ldr r0, [r4, #8]
	ldr r1, _0809410C @ =0xFFFFFBFF
	ands r0, r1
	str r0, [r4, #8]
	adds r1, r2, #0
	adds r1, #0x68
	strh r1, [r4, #0x10]
	ldr r0, [r6]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r4, #0x10]
	b _08094122
	.align 2, 0
_08094108: .4byte gBgScrollRegs
_0809410C: .4byte 0xFFFFFBFF
_08094110:
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	str r0, [r4, #8]
	ldr r0, [r6]
	asrs r0, r0, #8
	subs r0, r3, r0
	strh r0, [r4, #0x10]
_08094122:
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #1
	bls _080940CC
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8094144
sub_8094144: @ 0x08094144
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	adds r7, r0, #0
	adds r0, #0xf4
	adds r5, r7, #0
	adds r5, #0xa0
	ldr r1, [r5]
	str r1, [r0]
	ldr r3, _08094388 @ =gUnknown_080D76C0
	ldrb r1, [r7, #4]
	lsls r1, r1, #3
	adds r2, r3, #4
	adds r1, r1, r2
	ldr r2, [r1]
	lsls r2, r2, #5
	ldr r1, [r5]
	adds r1, r1, r2
	str r1, [r5]
	ldrb r1, [r7, #4]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrh r1, [r1]
	movs r2, #0
	mov sb, r2
	movs r4, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r7, #4]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x68]
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x6c]
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	movs r3, #0x10
	mov r8, r3
	mov r6, r8
	strb r6, [r0, #0x1c]
	mov r1, sb
	strb r1, [r0, #0x1f]
	str r4, [r0, #8]
	movs r6, #1
	rsbs r6, r6, #0
	str r6, [r0, #0x20]
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	adds r0, #0xa4
	ldr r1, [r5]
	str r1, [r0]
	ldr r1, [r5]
	movs r2, #0xa0
	lsls r2, r2, #2
	adds r1, r1, r2
	str r1, [r5]
	ldr r2, _0809438C @ =gUnknown_080D7628
	ldrb r1, [r7, #4]
	lsls r1, r1, #3
	adds r1, r1, r2
	ldrh r1, [r1]
	strh r1, [r0, #0xc]
	ldrb r1, [r7, #4]
	lsls r1, r1, #3
	adds r1, r1, r2
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	adds r1, r6, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x60]
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x64]
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	mov r3, r8
	strb r3, [r0, #0x1c]
	mov r1, sb
	strb r1, [r0, #0x1f]
	str r4, [r0, #8]
	str r6, [r0, #0x20]
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	adds r0, #0xcc
	ldr r1, [r5]
	str r1, [r0]
	ldr r1, [r5]
	movs r2, #0xc0
	lsls r2, r2, #1
	adds r1, r1, r2
	str r1, [r5]
	ldr r2, _08094390 @ =gUnknown_080D7658
	ldrb r1, [r7, #4]
	lsls r1, r1, #1
	ldrb r3, [r7, #6]
	adds r1, r1, r3
	lsls r1, r1, #3
	adds r1, r1, r2
	ldrh r1, [r1]
	strh r1, [r0, #0xc]
	ldrb r1, [r7, #4]
	lsls r1, r1, #1
	ldrb r3, [r7, #6]
	adds r1, r1, r3
	lsls r1, r1, #3
	adds r1, r1, r2
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	adds r1, r6, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x60]
	adds r1, #0x40
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x64]
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	mov r1, r8
	strb r1, [r0, #0x1c]
	mov r2, sb
	strb r2, [r0, #0x1f]
	str r4, [r0, #8]
	str r6, [r0, #0x20]
	bl UpdateSpriteAnimation
	ldr r2, _08094394 @ =gUnknown_080D76F0
	movs r6, #0
	ldrb r0, [r2, #2]
	mov r3, sp
	strb r0, [r3, #4]
	ldr r0, [r2, #4]
	lsls r0, r0, #5
	str r0, [sp]
	mov r8, r5
_08094268:
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #3
	movs r1, #0x8e
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r0, r7, r0
	ldr r1, [r5]
	str r1, [r0]
	ldr r1, [r5]
	ldr r3, [sp]
	adds r1, r1, r3
	str r1, [r5]
	ldrh r1, [r2]
	strh r1, [r0, #0xc]
	mov r1, sp
	ldrb r1, [r1, #4]
	strb r1, [r0, #0x1a]
	movs r3, #1
	rsbs r3, r3, #0
	mov sb, r3
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	adds r1, r7, #0
	adds r1, #0x90
	ldr r1, [r1]
	strh r1, [r0, #0x10]
	adds r1, r7, #0
	adds r1, #0x94
	ldr r1, [r1]
	strh r1, [r0, #0x12]
	strh r6, [r0, #0x14]
	strh r6, [r0, #0xe]
	strh r6, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	movs r3, #0
	strb r3, [r0, #0x1f]
	str r6, [r0, #8]
	movs r1, #1
	rsbs r1, r1, #0
	mov sl, r1
	str r1, [r0, #0x20]
	str r2, [sp, #8]
	bl UpdateSpriteAnimation
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldr r2, [sp, #8]
	cmp r4, #2
	bls _08094268
	movs r2, #0xf2
	lsls r2, r2, #1
	adds r0, r7, r2
	mov r3, r8
	ldr r1, [r3]
	str r1, [r0]
	ldr r3, _08094398 @ =gUnknown_080D76B8
	ldr r2, [r3, #4]
	lsls r2, r2, #5
	mov r4, r8
	ldr r1, [r4]
	adds r1, r1, r2
	str r1, [r4]
	ldrh r1, [r3]
	movs r5, #0
	movs r4, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r3, #2]
	strb r1, [r0, #0x1a]
	ldrb r1, [r0, #0x1b]
	mov r6, sb
	orrs r1, r6
	strb r1, [r0, #0x1b]
	adds r1, r7, #0
	adds r1, #0x80
	ldr r1, [r1]
	strh r1, [r0, #0x10]
	adds r1, r7, #0
	adds r1, #0x84
	ldr r1, [r1]
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	strb r5, [r0, #0x1f]
	str r4, [r0, #8]
	mov r2, sl
	str r2, [r0, #0x20]
	bl UpdateSpriteAnimation
	movs r3, #0xde
	lsls r3, r3, #1
	adds r0, r7, r3
	mov r6, r8
	ldr r1, [r6]
	str r1, [r0]
	ldr r3, _0809439C @ =gUnknown_080D7740
	ldr r2, [r3, #4]
	lsls r2, r2, #5
	ldr r1, [r6]
	adds r1, r1, r2
	str r1, [r6]
	ldrh r1, [r3]
	strh r1, [r0, #0xc]
	ldrb r1, [r3, #2]
	strb r1, [r0, #0x1a]
	ldrb r1, [r0, #0x1b]
	mov r2, sb
	orrs r1, r2
	strb r1, [r0, #0x1b]
	adds r1, r7, #0
	adds r1, #0x88
	ldr r1, [r1]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	adds r1, r7, #0
	adds r1, #0x8c
	ldr r1, [r1]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	movs r3, #0x10
	strb r3, [r0, #0x1c]
	strb r5, [r0, #0x1f]
	str r4, [r0, #8]
	mov r4, sl
	str r4, [r0, #0x20]
	bl UpdateSpriteAnimation
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08094388: .4byte gUnknown_080D76C0
_0809438C: .4byte gUnknown_080D7628
_08094390: .4byte gUnknown_080D7658
_08094394: .4byte gUnknown_080D76F0
_08094398: .4byte gUnknown_080D76B8
_0809439C: .4byte gUnknown_080D7740

	thumb_func_start sub_80943A0
sub_80943A0: @ 0x080943A0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r0, _08094430 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	ldrb r4, [r5, #4]
	adds r0, r4, #0
	adds r0, #8
	cmp r4, r0
	bge _0809440E
	ldr r7, _08094434 @ =gUnknown_080D8A84
	movs r6, #0
	ldrb r0, [r7, #2]
	mov r8, r0
_080943C4:
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #3
	adds r0, #0x1c
	adds r0, r5, r0
	ldr r1, [r5, #0x18]
	str r1, [r0]
	ldr r1, [r5, #0x18]
	adds r1, #0x80
	str r1, [r5, #0x18]
	ldrh r1, [r7]
	strh r1, [r0, #0xc]
	mov r1, r8
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	strh r6, [r0, #0x10]
	strh r6, [r0, #0x12]
	strh r6, [r0, #0x14]
	strh r6, [r0, #0xe]
	strh r6, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	movs r1, #9
	strb r1, [r0, #0x1f]
	movs r1, #0x80
	lsls r1, r1, #0xb
	str r1, [r0, #8]
	bl UpdateSpriteAnimation
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldrb r0, [r5, #4]
	adds r0, #8
	cmp r4, r0
	blt _080943C4
_0809440E:
	ldrb r0, [r5, #4]
	adds r0, #8
	cmp r0, #0x17
	ble _0809447C
	ldr r3, _08094438 @ =gFlags
	ldr r2, [r3]
	movs r0, #0x80
	lsls r0, r0, #0xa
	ands r0, r2
	cmp r0, #0
	beq _08094440
	ldr r0, _0809443C @ =gUnknown_080D8A8C
	movs r1, #0xf0
	movs r2, #0x10
	bl sub_80C4564
	b _08094456
	.align 2, 0
_08094430: .4byte gCurTask
_08094434: .4byte gUnknown_080D8A84
_08094438: .4byte gFlags
_0809443C: .4byte gUnknown_080D8A8C
_08094440:
	ldr r1, _08094464 @ =0x040000D4
	ldr r0, _08094468 @ =gUnknown_080D8A8C
	str r0, [r1]
	ldr r0, _0809446C @ =gUnknown_03003550
	str r0, [r1, #4]
	ldr r0, _08094470 @ =0x80000010
	str r0, [r1, #8]
	ldr r0, [r1, #8]
	movs r0, #2
	orrs r2, r0
	str r2, [r3]
_08094456:
	movs r0, #0
	strb r0, [r5, #4]
	ldr r0, _08094474 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08094478 @ =sub_80946F0
	str r0, [r1, #8]
	b _0809447E
	.align 2, 0
_08094464: .4byte 0x040000D4
_08094468: .4byte gUnknown_080D8A8C
_0809446C: .4byte gUnknown_03003550
_08094470: .4byte 0x80000010
_08094474: .4byte gCurTask
_08094478: .4byte sub_80946F0
_0809447C:
	strb r0, [r5, #4]
_0809447E:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start SoundTest_DrawSongName
SoundTest_DrawSongName: @ 0x08094488
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r6, r0, #0
	movs r5, #0
	ldr r3, _0809453C @ =sSongNames
	ldr r2, [r6, #8]
	movs r0, #0
	ldrsh r1, [r2, r0]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r3     @ r0 = &sSongNames[i]
	ldrb r0, [r0]       @ r0 = sSongNames[i].strlen
	cmp r5, r0
	bhs _08094530
	mov sb, r3
	movs r1, #1
	add r1, sb
	mov r8, r1
	ldr r7, _08094540 @ =gUnknown_080D8A84
_080944B4:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	adds r0, #0x1c
	adds r4, r6, r0
	movs r0, #0
	ldrsh r1, [r2, r0]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, r5, r0
	add r0, r8
	ldrb r0, [r0]
	cmp r0, #0x30
	beq _08094516
	ldrh r0, [r7]
	strh r0, [r4, #0xc]
	ldr r0, [r6, #8]
	movs r2, #0
	ldrsh r1, [r0, r2]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, r5, r0
	add r0, r8
	ldrb r0, [r0]
	ldrb r1, [r7, #2]
	adds r0, r0, r1
	subs r0, #0x20
	strb r0, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	ldr r0, _08094544 @ =gBgScrollRegs
	ldrh r1, [r0, #4]
	ldr r0, [r6, #0x10]
	asrs r0, r0, #8
	subs r0, r0, r1
	lsls r1, r5, #3
	adds r0, r0, r1
	strh r0, [r4, #0x10]
	ldr r0, [r6, #0x14]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
_08094516:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	ldr r2, [r6, #8]
	movs r0, #0
	ldrsh r1, [r2, r0]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	add r0, sb
	ldrb r0, [r0]
	cmp r5, r0
	blo _080944B4
_08094530:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809453C: .4byte sSongNames
_08094540: .4byte gUnknown_080D8A84
_08094544: .4byte gBgScrollRegs

	thumb_func_start InitOptionsSlide_SoundTest
InitOptionsSlide_SoundTest: @ 0x08094548
	push {r4, r5, r6, lr}
	ldr r6, _0809458C @ =gCurTask
	ldr r0, [r6]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r4, r0
	ldr r0, _08094590 @ =gBgScrollRegs
	movs r2, #4
	ldrsh r1, [r0, r2]
	movs r0, #0x1e
	rsbs r0, r0, #0
	cmp r1, r0
	ble _08094584
	ldr r3, _08094594 @ =0x03000018
	adds r0, r4, r3
	ldr r1, [r5, #0xc]
	adds r3, #0x88
	adds r2, r4, r3
	ldr r2, [r2]
	bl CreateSoundTest
	ldr r2, _08094598 @ =0x0300024C
	adds r1, r4, r2
	str r0, [r1]
	movs r0, #1
	str r0, [r5]
	ldr r1, [r6]
	ldr r0, _0809459C @ =sub_8093AB0
	str r0, [r1, #8]
_08094584:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809458C: .4byte gCurTask
_08094590: .4byte gBgScrollRegs
_08094594: .4byte 0x03000018
_08094598: .4byte 0x0300024C
_0809459C: .4byte sub_8093AB0

	thumb_func_start sub_80945A0
sub_80945A0: @ 0x080945A0
	push {r4, lr}
	ldr r3, _08094600 @ =gBgScrollRegs
	movs r1, #4
	ldrsh r2, [r3, r1]
	movs r1, #0x18
	subs r1, r1, r2
	str r1, [r0, #0x60]
	movs r4, #6
	ldrsh r2, [r3, r4]
	movs r1, #0x87
	subs r1, r1, r2
	str r1, [r0, #0x64]
	movs r2, #4
	ldrsh r1, [r3, r2]
	movs r2, #0x19
	subs r1, r2, r1
	str r1, [r0, #0x68]
	movs r4, #6
	ldrsh r1, [r3, r4]
	subs r2, r2, r1
	str r2, [r0, #0x6c]
	movs r2, #4
	ldrsh r1, [r3, r2]
	rsbs r1, r1, #0
	adds r1, #0x50
	str r1, [r0, #0x78]
	movs r4, #6
	ldrsh r1, [r3, r4]
	rsbs r1, r1, #0
	adds r1, #0x5c
	str r1, [r0, #0x7c]
	adds r2, r0, #0
	adds r2, #0x90
	movs r4, #4
	ldrsh r1, [r3, r4]
	rsbs r1, r1, #0
	adds r1, #0x50
	str r1, [r2]
	adds r0, #0x94
	movs r2, #6
	ldrsh r1, [r3, r2]
	rsbs r1, r1, #0
	adds r1, #0x5c
	str r1, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08094600: .4byte gBgScrollRegs

	thumb_func_start sub_8094604
sub_8094604: @ 0x08094604
	push {lr}
	adds r1, r0, #0
	adds r2, r1, #0
	adds r2, #0x88
	ldr r0, [r2]
	ldr r3, _0809462C @ =0x000009FF
	cmp r0, r3
	bgt _08094620
	adds r0, #0x60
	str r0, [r2]
	cmp r0, r3
	ble _08094620
	movs r0, #0
	str r0, [r2]
_08094620:
	adds r1, #0x8c
	movs r0, #0
	str r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_0809462C: .4byte 0x000009FF

	thumb_func_start sub_8094630
sub_8094630: @ 0x08094630
	push {lr}
	adds r2, r0, #0
	adds r2, #0xf4
	ldr r3, _08094660 @ =gUnknown_080D76C0
	ldrb r1, [r0, #4]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrh r1, [r1]
	strh r1, [r2, #0xc]
	ldrb r1, [r0, #4]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrb r1, [r1, #2]
	strb r1, [r2, #0x1a]
	ldr r1, [r0, #0x68]
	strh r1, [r2, #0x10]
	ldr r0, [r0, #0x6c]
	strh r0, [r2, #0x12]
	adds r0, r2, #0
	bl DisplaySprite
	pop {r0}
	bx r0
	.align 2, 0
_08094660: .4byte gUnknown_080D76C0

	thumb_func_start sub_8094664
sub_8094664: @ 0x08094664
	push {lr}
	sub sp, #0x10
	movs r1, #0x26
	ldrsh r2, [r0, r1]
	movs r1, #0x40
	str r1, [sp]
	ldr r1, [r0, #0x78]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	str r1, [sp, #4]
	ldr r0, [r0, #0x7c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp, #8]
	ldr r0, _08094694 @ =gBgAffineRegs
	str r0, [sp, #0xc]
	movs r0, #0
	adds r1, r2, #0
	movs r3, #0x40
	bl sa2__sub_8003EE4
	add sp, #0x10
	pop {r0}
	bx r0
	.align 2, 0
_08094694: .4byte gBgAffineRegs
    
	thumb_func_start sub_8094698
sub_8094698: @ 0x08094698
	bx lr
	.align 2, 0

	thumb_func_start CreateSoundTest
CreateSoundTest: @ 0x0809469C
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	adds r4, r1, #0
	adds r6, r2, #0
	ldr r0, _080946E4 @ =sub_80943A0
	movs r1, #0xf7
	lsls r1, r1, #2
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r3, _080946E8 @ =sub_80946EC
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	ldrh r1, [r0, #6]
	movs r2, #0xc0
	lsls r2, r2, #0x12
	adds r1, r1, r2
	str r4, [r1]
	str r5, [r1, #8]
	movs r2, #0
	strb r2, [r1, #4]
	strh r2, [r1, #0xc]
	movs r2, #0x8c
	lsls r2, r2, #6
	str r2, [r1, #0x10]
	movs r2, #0xf0
	lsls r2, r2, #6
	str r2, [r1, #0x14]
	str r6, [r1, #0x18]
	add sp, #4
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_080946E4: .4byte sub_80943A0
_080946E8: .4byte sub_80946EC

	thumb_func_start sub_80946EC
sub_80946EC: @ 0x080946EC
	bx lr
	.align 2, 0

	thumb_func_start sub_80946F0
sub_80946F0: @ 0x080946F0
	push {r4, lr}
	ldr r0, _08094720 @ =gCurTask
	ldr r2, [r0]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, _08094724 @ =gBgScrollRegs
	movs r3, #4
	ldrsh r1, [r0, r3]
	movs r0, #0x14
	rsbs r0, r0, #0
	cmp r1, r0
	blt _08094728
	movs r0, #1
	strb r0, [r4, #4]
	adds r0, r4, #0
	bl SoundTest_DrawSongName
	adds r0, r4, #0
	bl sub_809473C
	b _08094734
	.align 2, 0
_08094720: .4byte gCurTask
_08094724: .4byte gBgScrollRegs
_08094728:
	ldrb r0, [r4, #4]
	cmp r0, #0
	beq _08094734
	adds r0, r2, #0
	bl TaskDestroy
_08094734:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_809473C
sub_809473C: @ 0x0809473C
	bx lr
	.align 2, 0

	thumb_func_start sub_8094740
sub_8094740: @ 0x08094740
	push {r4, r5, r6, lr}
	sub sp, #4
	ldr r6, _080947C8 @ =gCurTask
	ldr r0, [r6]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r5, r0
	movs r2, #0
	str r2, [sp]
	ldr r3, _080947CC @ =0x040000D4
	mov r0, sp
	str r0, [r3]
	ldr r0, _080947D0 @ =gBgCntRegs
	ldrh r1, [r0, #4]
	movs r0, #0xc
	ands r0, r1
	lsls r0, r0, #0xc
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r0, r0, r1
	str r0, [r3, #4]
	ldr r0, _080947D4 @ =0x85000010
	str r0, [r3, #8]
	ldr r0, [r3, #8]
	ldr r4, _080947D8 @ =gUnknown_03006230
	strb r2, [r4]
	ldr r0, _080947DC @ =gUnknown_03003590
	strb r2, [r0]
	strb r2, [r0, #1]
	movs r1, #0xff
	strb r1, [r0, #2]
	movs r3, #0x40
	strb r3, [r0, #3]
	strb r2, [r4, #1]
	strb r2, [r0, #4]
	strb r2, [r0, #5]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #6]
	strb r3, [r0, #7]
	strb r2, [r4, #2]
	strb r2, [r0, #8]
	strb r2, [r0, #9]
	strb r1, [r0, #0xa]
	strb r3, [r0, #0xb]
	adds r0, r5, #0
	bl sub_8094F3C
	adds r0, r5, #0
	bl sub_8094A98
	ldr r0, _080947E0 @ =0x0000FFFF
	bl sub_80C4C0C
	ldr r1, _080947E4 @ =gBgPalette
	strh r0, [r1]
	ldr r2, [r6]
	ldr r1, _080947E8 @ =gUnknown_080D8B4C
	ldrb r0, [r5, #3]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	str r0, [r2, #8]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080947C8: .4byte gCurTask
_080947CC: .4byte 0x040000D4
_080947D0: .4byte gBgCntRegs
_080947D4: .4byte 0x85000010
_080947D8: .4byte gUnknown_03006230
_080947DC: .4byte gUnknown_03003590
_080947E0: .4byte 0x0000FFFF
_080947E4: .4byte gBgPalette
_080947E8: .4byte gUnknown_080D8B4C

	thumb_func_start sub_80947EC
sub_80947EC: @ 0x080947EC
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	mov ip, r0
	ldr r3, _0809486C @ =gSaveGame
	ldr r1, _08094870 @ =0x00000366
	adds r0, r3, r1
	ldrb r0, [r0]
	movs r2, #0
	mov r4, ip
	strb r0, [r4]
	movs r0, #1
	strb r0, [r4, #1]
	strb r0, [r4, #2]
	movs r1, #0
	strh r2, [r4, #0x22]
	strb r1, [r4, #0x1c]
	strb r1, [r4, #0x1d]
	strh r2, [r4, #0x26]
	strh r2, [r4, #0x28]
	movs r0, #0xa
	strh r0, [r4, #0x20]
	strh r2, [r4, #0x24]
	strb r1, [r4, #0x1e]
	strb r1, [r4, #0x1f]
	strb r1, [r4, #4]
	movs r4, #0
	mov r8, r3
	mov r6, ip
	adds r6, #0x78
	mov r5, ip
	adds r5, #0x7c
	mov r3, ip
	adds r3, #0xf
	mov sb, r4
_08094834:
	lsls r1, r4, #3
	adds r2, r6, r1
	lsls r0, r4, #0xe
	movs r7, #0xf0
	lsls r7, r7, #8
	adds r0, r0, r7
	str r0, [r2]
	adds r1, r5, r1
	lsls r0, r4, #0xc
	movs r2, #0x80
	lsls r2, r2, #5
	adds r0, r0, r2
	str r0, [r1]
	adds r0, r3, r4
	mov r7, sb
	strb r7, [r0]
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #4
	bls _08094834
	mov r1, ip
	ldrb r0, [r1, #3]
	cmp r0, #0
	bne _08094874
	movs r0, #7
	strb r0, [r1, #0x14]
	b _08094888
	.align 2, 0
_0809486C: .4byte gSaveGame
_08094870: .4byte 0x00000366
_08094874:
	mov r2, r8
	ldrb r3, [r2, #0x11]
	cmp r3, #7
	bls _08094884
	movs r0, #7
	mov r4, ip
	strb r0, [r4, #0x14]
	b _08094888
_08094884:
	mov r7, ip
	strb r3, [r7, #0x14]
_08094888:
	movs r4, #0
	mov r6, ip
	adds r6, #0xa0
	mov r2, ip
	adds r2, #0x15
	movs r3, #3
	ldr r5, _080948A4 @ =gUnknown_03000559
_08094896:
	mov r1, ip
	ldrb r0, [r1, #3]
	cmp r0, #0
	bne _080948A8
	adds r0, r2, r4
	strb r3, [r0]
	b _080948CC
	.align 2, 0
_080948A4: .4byte gUnknown_03000559
_080948A8:
	adds r0, r4, r5
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	beq _080948C8
	adds r1, r2, r4
	lsrs r0, r0, #0x19
	adds r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #3
	ble _080948CC
	strb r3, [r1]
	b _080948CC
_080948C8:
	adds r0, r2, r4
	strb r1, [r0]
_080948CC:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #6
	bls _08094896
	ldr r0, _0809491C @ =0xFFFFCE00
	mov r2, ip
	str r0, [r2, #0x30]
	movs r1, #0xa0
	lsls r1, r1, #7
	str r1, [r2, #0x34]
	movs r0, #0x84
	lsls r0, r0, #8
	str r0, [r2, #0x68]
	str r1, [r2, #0x6c]
	movs r0, #0xf8
	lsls r0, r0, #7
	str r0, [r2, #0x70]
	str r1, [r2, #0x74]
	movs r0, #0
	str r0, [r2, #0x58]
	str r0, [r2, #0x5c]
	str r0, [r2, #0x54]
	movs r0, #0xa0
	lsls r0, r0, #8
	str r0, [r2, #0x2c]
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r2, #0x60]
	movs r0, #0x80
	lsls r0, r0, #6
	str r0, [r2, #0x64]
	ldr r0, _08094920 @ =0x06010000
	str r0, [r6]
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809491C: .4byte 0xFFFFCE00
_08094920: .4byte 0x06010000

	thumb_func_start sub_8094924
sub_8094924: @ 0x08094924
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	adds r7, r0, #0
	movs r0, #0
	str r0, [sp]
_08094936:
	movs r1, #0
	mov sb, r1
	ldr r2, [sp]
	lsls r0, r2, #4
	lsls r4, r2, #2
	str r4, [sp, #0xc]
	adds r2, #1
	str r2, [sp, #0x14]
	ldr r5, [sp]
	subs r0, r0, r5
	lsls r0, r0, #4
	str r0, [sp, #4]
_0809494E:
	movs r0, #0
	mov r8, r0
	mov r1, sb
	lsls r0, r1, #4
	lsls r1, r1, #2
	str r1, [sp, #0x10]
	mov r2, sb
	adds r2, #1
	str r2, [sp, #8]
	mov r4, sb
	subs r0, r0, r4
	lsls r0, r0, #2
	mov sl, r0
_08094968:
	mov r5, r8
	lsls r2, r5, #1
	add r2, sl
	ldr r0, [sp, #4]
	adds r2, r2, r0
	ldr r1, _08094A70 @ =0x0000054C
	adds r3, r7, r1
	adds r3, r3, r2
	lsls r6, r5, #2
	ldr r1, [sp, #0x10]
	add r1, sb
	lsls r1, r1, #2
	adds r1, r6, r1
	ldr r4, [sp, #0xc]
	ldr r5, [sp]
	adds r0, r4, r5
	lsls r0, r0, #4
	adds r1, r1, r0
	ldr r0, _08094A74 @ =gSaveGame
	adds r4, r1, r0
	movs r1, #0x96
	lsls r1, r1, #1
	adds r0, r4, r1
	ldrb r0, [r0]
	strb r0, [r3]
	ldr r5, _08094A78 @ =0x0000054D
	adds r1, r7, r5
	adds r1, r1, r2
	ldr r2, _08094A7C @ =0x0000012D
	adds r0, r4, r2
	ldrb r0, [r0]
	strb r0, [r1]
	movs r5, #0x97
	lsls r5, r5, #1
	adds r0, r4, r5
	ldrh r4, [r0]
	adds r0, r4, #0
	movs r1, #0x3c
	bl Mod
	adds r5, r0, #0
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	adds r0, r4, #0
	movs r1, #0x3c
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	adds r0, r4, #0
	movs r1, #0x3c
	bl Div
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	lsls r1, r0, #4
	subs r1, r1, r0
	lsls r1, r1, #2
	subs r4, r4, r1
	lsls r4, r4, #0x10
	add r6, r8
	lsls r6, r6, #1
	add r6, sl
	ldr r1, [sp, #4]
	adds r6, r6, r1
	ldr r1, _08094A80 @ =0x0000055E
	adds r2, r7, r1
	adds r2, r2, r6
	lsls r5, r5, #1
	ldr r1, _08094A84 @ =gUnknown_080CE4B2
	adds r1, #1
	adds r1, r5, r1
	ldrb r1, [r1]
	strh r1, [r2]
	ldr r1, _08094A88 @ =0x0000055C
	adds r2, r7, r1
	adds r2, r2, r6
	ldr r1, _08094A84 @ =gUnknown_080CE4B2
	adds r5, r5, r1
	ldrb r1, [r5]
	strh r1, [r2]
	ldr r5, _08094A8C @ =0x0000055A
	adds r2, r7, r5
	adds r2, r2, r6
	lsrs r4, r4, #0xf
	ldr r1, _08094A90 @ =gUnknown_080CE438
	adds r1, #1
	adds r1, r4, r1
	ldrb r1, [r1]
	strh r1, [r2]
	movs r1, #0xab
	lsls r1, r1, #3
	adds r2, r7, r1
	adds r2, r2, r6
	ldr r5, _08094A90 @ =gUnknown_080CE438
	adds r4, r4, r5
	ldrb r1, [r4]
	strh r1, [r2]
	ldr r2, _08094A94 @ =0x00000556
	adds r1, r7, r2
	adds r1, r1, r6
	strh r0, [r1]
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	cmp r0, #4
	bls _08094968
	ldr r4, [sp, #8]
	lsls r0, r4, #0x18
	lsrs r0, r0, #0x18
	mov sb, r0
	cmp r0, #3
	bhi _08094A52
	b _0809494E
_08094A52:
	ldr r5, [sp, #0x14]
	lsls r0, r5, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp]
	cmp r0, #6
	bhi _08094A60
	b _08094936
_08094A60:
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08094A70: .4byte 0x0000054C
_08094A74: .4byte gSaveGame
_08094A78: .4byte 0x0000054D
_08094A7C: .4byte 0x0000012D
_08094A80: .4byte 0x0000055E
_08094A84: .4byte gUnknown_080CE4B2
_08094A88: .4byte 0x0000055C
_08094A8C: .4byte 0x0000055A
_08094A90: .4byte gUnknown_080CE438
_08094A94: .4byte 0x00000556

	thumb_func_start sub_8094A98
sub_8094A98: @ 0x08094A98
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x2c
	mov sl, r0
	ldrb r1, [r0]
	rsbs r0, r1, #0
	orrs r0, r1
	lsrs r5, r0, #0x1f
	movs r3, #0
	mov r0, sl
	ldrb r0, [r0, #2]
	cmp r3, r0
	bhi _08094B30
	mov r4, sl
	adds r4, #0xa0
	ldr r1, _08094E90 @ =gUnknown_080D8AAC
	mov r8, r1
	movs r2, #0
	mov sb, r2
	movs r6, #0
_08094AC6:
	mov r7, sl
	adds r7, #0xcc
	cmp r3, #0
	bne _08094AD0
	subs r7, #0x28
_08094AD0:
	ldr r0, [r4]
	str r0, [r7]
	lsls r2, r5, #1
	adds r2, r3, r2
	lsls r2, r2, #3
	mov r0, r8
	adds r0, #4
	adds r0, r2, r0
	ldr r1, [r0]
	lsls r1, r1, #5
	ldr r0, [r4]
	adds r0, r0, r1
	str r0, [r4]
	add r2, r8
	ldrh r0, [r2]
	strh r0, [r7, #0xc]
	ldrb r0, [r2, #2]
	strb r0, [r7, #0x1a]
	movs r0, #0xff
	strb r0, [r7, #0x1b]
	mov r1, sl
	ldr r0, [r1, #0x30]
	asrs r0, r0, #8
	strh r0, [r7, #0x10]
	ldr r0, [r1, #0x34]
	asrs r0, r0, #8
	strh r0, [r7, #0x12]
	movs r0, #0xc0
	strh r0, [r7, #0x14]
	strh r6, [r7, #0xe]
	strh r6, [r7, #0x16]
	movs r0, #0x10
	strb r0, [r7, #0x1c]
	mov r2, sb
	strb r2, [r7, #0x1f]
	str r6, [r7, #8]
	adds r0, r7, #0
	str r3, [sp, #0x24]
	bl UpdateSpriteAnimation
	ldr r3, [sp, #0x24]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	mov r0, sl
	ldrb r0, [r0, #2]
	cmp r3, r0
	bls _08094AC6
_08094B30:
	movs r7, #0x8e
	lsls r7, r7, #1
	add r7, sl
	mov r4, sl
	adds r4, #0xa0
	ldr r0, [r4]
	str r0, [r7]
	ldr r2, _08094E94 @ =gUnknown_080D8AE4
	ldr r1, [r2, #4]
	lsls r1, r1, #5
	ldr r0, [r4]
	adds r0, r0, r1
	str r0, [r4]
	ldrh r0, [r2]
	movs r5, #0
	strh r0, [r7, #0xc]
	ldrb r0, [r2, #2]
	strb r0, [r7, #0x1a]
	movs r0, #0xff
	strb r0, [r7, #0x1b]
	mov r1, sl
	ldr r0, [r1, #0x60]
	asrs r0, r0, #8
	strh r0, [r7, #0x10]
	ldr r0, [r1, #0x64]
	asrs r0, r0, #8
	strh r0, [r7, #0x12]
	movs r0, #0x80
	strh r0, [r7, #0x14]
	strh r5, [r7, #0xe]
	strh r5, [r7, #0x16]
	movs r2, #0x10
	mov sb, r2
	mov r3, sb
	strb r3, [r7, #0x1c]
	movs r1, #0
	strb r1, [r7, #0x1f]
	str r0, [r7, #8]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	movs r7, #0xa2
	lsls r7, r7, #1
	add r7, sl
	ldr r0, [r4]
	str r0, [r7]
	ldr r2, _08094E98 @ =gUnknown_080D8AEC
	ldr r1, [r2, #4]
	lsls r1, r1, #5
	ldr r0, [r4]
	adds r0, r0, r1
	str r0, [r4]
	ldrh r0, [r2]
	strh r0, [r7, #0xc]
	ldrb r0, [r2, #2]
	strb r0, [r7, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r7, #0x1b]
	mov r2, sl
	ldr r0, [r2, #0x68]
	asrs r0, r0, #8
	strh r0, [r7, #0x10]
	ldr r0, [r2, #0x6c]
	asrs r0, r0, #8
	strh r0, [r7, #0x12]
	movs r3, #0xc0
	strh r3, [r7, #0x14]
	strh r5, [r7, #0xe]
	strh r5, [r7, #0x16]
	mov r0, sb
	strb r0, [r7, #0x1c]
	movs r1, #0
	strb r1, [r7, #0x1f]
	str r5, [r7, #8]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	movs r7, #0xb6
	lsls r7, r7, #1
	add r7, sl
	ldr r0, [r4]
	str r0, [r7]
	ldr r2, _08094E9C @ =gUnknown_080D8ADC
	ldr r1, [r2, #4]
	lsls r1, r1, #5
	ldr r0, [r4]
	adds r0, r0, r1
	str r0, [r4]
	ldrh r0, [r2]
	mov r3, sp
	strh r0, [r3]
	strh r0, [r7, #0xc]
	ldrb r2, [r2, #2]
	mov r8, r2
	strb r2, [r7, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r7, #0x1b]
	mov r1, sl
	ldr r0, [r1, #0x30]
	asrs r0, r0, #8
	strh r0, [r7, #0x10]
	ldr r0, [r1, #0x34]
	asrs r0, r0, #8
	strh r0, [r7, #0x12]
	movs r2, #0xc0
	strh r2, [r7, #0x14]
	strh r5, [r7, #0xe]
	strh r5, [r7, #0x16]
	mov r3, sb
	strb r3, [r7, #0x1c]
	movs r0, #0
	strb r0, [r7, #0x1f]
	str r5, [r7, #8]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	movs r7, #0xca
	lsls r7, r7, #1
	add r7, sl
	ldr r0, [r4]
	str r0, [r7]
	ldr r0, [r4]
	adds r0, #0x80
	str r0, [r4]
	mov r1, sp
	ldrh r1, [r1]
	strh r1, [r7, #0xc]
	mov r2, r8
	strb r2, [r7, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r7, #0x1b]
	mov r3, sl
	ldr r0, [r3, #0x30]
	asrs r0, r0, #8
	strh r0, [r7, #0x10]
	ldr r0, [r3, #0x34]
	asrs r0, r0, #8
	strh r0, [r7, #0x12]
	movs r0, #0xc0
	strh r0, [r7, #0x14]
	strh r5, [r7, #0xe]
	strh r5, [r7, #0x16]
	mov r1, sb
	strb r1, [r7, #0x1c]
	movs r2, #0
	strb r2, [r7, #0x1f]
	str r5, [r7, #8]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	mov r3, sl
	ldrb r0, [r3]
	movs r5, #5
	adds r6, r4, #0
	cmp r0, #0
	bne _08094C70
	movs r5, #0
_08094C70:
	movs r3, #0
	mov r0, sl
	adds r0, #0x78
	str r0, [sp, #0x18]
	mov r1, sl
	adds r1, #0x7c
	str r1, [sp, #0x1c]
	mov r2, sl
	adds r2, #0xf4
	str r2, [sp, #0x14]
	adds r4, r6, #0
	ldr r0, _08094EA0 @ =gUnknown_080D8AF4
	mov sb, r0
	mov r8, r3
_08094C8C:
	lsls r0, r3, #2
	adds r0, r0, r3
	lsls r0, r0, #3
	movs r1, #0xd3
	lsls r1, r1, #2
	adds r0, r0, r1
	mov r2, sl
	adds r7, r2, r0
	ldr r0, [r4]
	str r0, [r7]
	adds r2, r3, r5
	lsls r2, r2, #3
	mov r0, sb
	adds r0, #4
	adds r0, r2, r0
	ldr r1, [r0]
	lsls r1, r1, #5
	ldr r0, [r4]
	adds r0, r0, r1
	str r0, [r4]
	add r2, sb
	ldrh r0, [r2]
	strh r0, [r7, #0xc]
	ldrb r0, [r2, #2]
	strb r0, [r7, #0x1a]
	movs r0, #0xff
	strb r0, [r7, #0x1b]
	lsls r1, r3, #3
	ldr r2, [sp, #0x18]
	adds r0, r2, r1
	ldr r0, [r0]
	asrs r0, r0, #8
	strh r0, [r7, #0x10]
	ldr r0, [sp, #0x1c]
	adds r1, r0, r1
	ldr r0, [r1]
	asrs r0, r0, #8
	strh r0, [r7, #0x12]
	movs r0, #0xc0
	strh r0, [r7, #0x14]
	mov r1, r8
	strh r1, [r7, #0xe]
	strh r1, [r7, #0x16]
	movs r0, #0x10
	strb r0, [r7, #0x1c]
	movs r2, #0
	strb r2, [r7, #0x1f]
	mov r0, r8
	str r0, [r7, #8]
	adds r0, r7, #0
	str r3, [sp, #0x24]
	bl UpdateSpriteAnimation
	ldr r3, [sp, #0x24]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #4
	bls _08094C8C
	movs r3, #1
	adds r4, r6, #0
	ldr r1, _08094EA4 @ =gUnknown_080D8B44
	movs r5, #0
	ldr r0, [r1, #4]
	lsls r0, r0, #5
	str r0, [sp, #4]
_08094D10:
	lsls r0, r3, #2
	adds r0, r0, r3
	lsls r0, r0, #3
	movs r2, #0xca
	lsls r2, r2, #1
	adds r0, r0, r2
	mov r2, sl
	adds r7, r2, r0
	ldr r0, [r4]
	str r0, [r7]
	ldr r0, [r4]
	ldr r2, [sp, #4]
	adds r0, r0, r2
	str r0, [r4]
	ldrh r0, [r1]
	strh r0, [r7, #0xc]
	ldrb r2, [r1, #2]
	adds r0, r3, r2
	strb r0, [r7, #0x1a]
	movs r2, #1
	rsbs r2, r2, #0
	mov r0, sp
	strb r2, [r0, #8]
	movs r0, #0xff
	strb r0, [r7, #0x1b]
	mov r2, sl
	ldr r0, [r2, #0x78]
	asrs r0, r0, #8
	strh r0, [r7, #0x10]
	ldr r0, [r2, #0x7c]
	asrs r0, r0, #8
	strh r0, [r7, #0x12]
	movs r0, #0xc0
	mov sb, r0
	mov r2, sb
	strh r2, [r7, #0x14]
	strh r5, [r7, #0xe]
	strh r5, [r7, #0x16]
	movs r0, #0x10
	mov r8, r0
	mov r2, r8
	strb r2, [r7, #0x1c]
	movs r0, #0
	strb r0, [r7, #0x1f]
	str r5, [r7, #8]
	adds r0, r7, #0
	str r1, [sp, #0x20]
	str r3, [sp, #0x24]
	bl UpdateSpriteAnimation
	ldr r3, [sp, #0x24]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	ldr r1, [sp, #0x20]
	cmp r3, #0xa
	bls _08094D10
	ldr r7, _08094EA8 @ =0x00000414
	add r7, sl
	ldr r0, [r6]
	str r0, [r7]
	ldr r4, _08094EA4 @ =gUnknown_080D8B44
	ldr r5, [r4, #4]
	lsls r5, r5, #5
	ldr r0, [r6]
	adds r0, r0, r5
	str r0, [r6]
	ldrh r0, [r4]
	movs r1, #0
	mov ip, r1
	movs r1, #0
	strh r0, [r7, #0xc]
	ldrb r3, [r4, #2]
	mov r2, sp
	strb r3, [r2, #0xc]
	strb r3, [r7, #0x1a]
	ldrb r0, [r7, #0x1b]
	ldrb r2, [r2, #8]
	orrs r0, r2
	strb r0, [r7, #0x1b]
	mov r3, sl
	ldr r0, [r3, #0x78]
	asrs r0, r0, #8
	strh r0, [r7, #0x10]
	ldr r0, [r3, #0x7c]
	asrs r0, r0, #8
	strh r0, [r7, #0x12]
	mov r0, sb
	strh r0, [r7, #0x14]
	strh r1, [r7, #0xe]
	strh r1, [r7, #0x16]
	mov r2, r8
	strb r2, [r7, #0x1c]
	mov r3, ip
	strb r3, [r7, #0x1f]
	str r1, [r7, #8]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	movs r3, #0
	adds r1, r6, #0
	movs r4, #0
	mov r0, sp
	ldrb r2, [r0, #0xc]
	strb r2, [r0, #0x10]
	str r5, [sp, #0x28]
_08094DE4:
	lsls r0, r3, #2
	adds r0, r0, r3
	lsls r0, r0, #3
	ldr r5, _08094EAC @ =0x0000043C
	adds r0, r0, r5
	mov r2, sl
	adds r7, r2, r0
	ldr r0, [r1]
	str r0, [r7]
	ldr r0, [r1]
	ldr r5, [sp, #0x28]
	adds r0, r0, r5
	str r0, [r1]
	ldr r2, _08094EA4 @ =gUnknown_080D8B44
	ldrh r0, [r2]
	strh r0, [r7, #0xc]
	adds r0, r3, #0
	adds r0, #0xb
	mov r5, sp
	ldrb r5, [r5, #0x10]
	adds r0, r5, r0
	strb r0, [r7, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	mov r8, r0
	movs r0, #0xff
	strb r0, [r7, #0x1b]
	mov r2, sl
	ldr r0, [r2, #0x78]
	asrs r0, r0, #8
	strh r0, [r7, #0x10]
	ldr r0, [r2, #0x7c]
	asrs r0, r0, #8
	strh r0, [r7, #0x12]
	movs r5, #0xc0
	strh r5, [r7, #0x14]
	strh r4, [r7, #0xe]
	strh r4, [r7, #0x16]
	movs r0, #0x10
	mov sb, r0
	mov r2, sb
	strb r2, [r7, #0x1c]
	movs r5, #0
	strb r5, [r7, #0x1f]
	str r4, [r7, #8]
	adds r0, r7, #0
	str r1, [sp, #0x20]
	str r3, [sp, #0x24]
	bl UpdateSpriteAnimation
	ldr r3, [sp, #0x24]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	ldr r1, [sp, #0x20]
	cmp r3, #1
	bls _08094DE4
	mov r0, sl
	ldrb r1, [r0]
	rsbs r0, r1, #0
	orrs r0, r1
	lsrs r5, r0, #0x1f
	ldr r7, [sp, #0x14]
	ldr r0, [r6]
	str r0, [r7]
	ldr r3, _08094EB0 @ =gUnknown_080D8ACC
	lsls r2, r5, #3
	adds r0, r3, #4
	adds r0, r2, r0
	ldr r1, [r0]
	lsls r1, r1, #5
	ldr r0, [r6]
	adds r0, r0, r1
	str r0, [r6]
	adds r2, r2, r3
	ldrh r0, [r2]
	movs r5, #0
	movs r4, #0
	strh r0, [r7, #0xc]
	ldrb r0, [r2, #2]
	strb r0, [r7, #0x1a]
	ldrb r0, [r7, #0x1b]
	mov r1, r8
	orrs r0, r1
	b _08094EB4
	.align 2, 0
_08094E90: .4byte gUnknown_080D8AAC
_08094E94: .4byte gUnknown_080D8AE4
_08094E98: .4byte gUnknown_080D8AEC
_08094E9C: .4byte gUnknown_080D8ADC
_08094EA0: .4byte gUnknown_080D8AF4
_08094EA4: .4byte gUnknown_080D8B44
_08094EA8: .4byte 0x00000414
_08094EAC: .4byte 0x0000043C
_08094EB0: .4byte gUnknown_080D8ACC
_08094EB4:
	strb r0, [r7, #0x1b]
	mov r2, sl
	ldr r0, [r2, #0x48]
	asrs r0, r0, #8
	strh r0, [r7, #0x10]
	ldr r0, [r2, #0x4c]
	asrs r0, r0, #8
	strh r0, [r7, #0x12]
	movs r3, #0xc0
	strh r3, [r7, #0x14]
	strh r4, [r7, #0xe]
	strh r4, [r7, #0x16]
	mov r0, sb
	strb r0, [r7, #0x1c]
	strb r5, [r7, #0x1f]
	str r4, [r7, #8]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	movs r7, #0xb6
	lsls r7, r7, #1
	add r7, sl
	ldr r0, [r6]
	str r0, [r7]
	ldr r0, [r6]
	adds r0, #0x80
	str r0, [r6]
	ldr r1, _08094F38 @ =gUnknown_080D8ADC
	ldrh r0, [r1]
	strh r0, [r7, #0xc]
	ldrb r0, [r1, #2]
	strb r0, [r7, #0x1a]
	ldrb r0, [r7, #0x1b]
	mov r1, r8
	orrs r0, r1
	strb r0, [r7, #0x1b]
	mov r2, sl
	ldr r0, [r2, #0x30]
	asrs r0, r0, #8
	movs r3, #0x80
	lsls r3, r3, #6
	adds r0, r0, r3
	strh r0, [r7, #0x10]
	ldr r0, [r2, #0x34]
	asrs r0, r0, #8
	strh r0, [r7, #0x12]
	movs r0, #0xc0
	strh r0, [r7, #0x14]
	strh r4, [r7, #0xe]
	strh r4, [r7, #0x16]
	mov r1, sb
	strb r1, [r7, #0x1c]
	strb r5, [r7, #0x1f]
	str r4, [r7, #8]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	add sp, #0x2c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08094F38: .4byte gUnknown_080D8ADC

	thumb_func_start sub_8094F3C
sub_8094F3C: @ 0x08094F3C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r5, r0, #0
	ldr r0, _0809503C @ =gDispCnt
	mov sb, r0
	ldrh r0, [r0]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r2, #0
	orrs r0, r1
	mov r1, sb
	strh r0, [r1]
	ldr r2, _08095040 @ =gBgCntRegs
	mov sl, r2
	movs r7, #0
	movs r4, #0
	ldr r0, _08095044 @ =0x00000603
	strh r0, [r2]
	ldr r0, _08095048 @ =gBgScrollRegs
	mov r8, r0
	strh r4, [r0]
	strh r4, [r0, #2]
	ldr r1, _0809504C @ =0x0000050C
	adds r0, r5, r1
	movs r1, #0xc0
	lsls r1, r1, #0x13
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _08095050 @ =0x06003000
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	ldr r1, _08095054 @ =0x00000161
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	movs r6, #0x20
	strh r6, [r0, #0x26]
	strh r6, [r0, #0x28]
	ldr r2, _08095058 @ =0x00000536
	adds r1, r5, r2
	strb r7, [r1]
	movs r1, #2
	strh r1, [r0, #0x2e]
	bl DrawBackground
	ldr r0, _0809505C @ =0x00004E06
	mov r1, sl
	strh r0, [r1, #2]
	mov r2, r8
	strh r4, [r2, #4]
	movs r0, #0x80
	strh r0, [r2, #6]
	ldr r1, _08095060 @ =0x000004CC
	adds r0, r5, r1
	ldr r1, _08095064 @ =0x06004000
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _08095068 @ =0x06007000
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	movs r1, #0xb1
	lsls r1, r1, #1
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	strh r6, [r0, #0x26]
	strh r6, [r0, #0x28]
	ldr r2, _0809506C @ =0x000004F6
	adds r1, r5, r2
	strb r7, [r1]
	movs r1, #1
	strh r1, [r0, #0x2e]
	bl DrawBackground
	ldr r0, _08095070 @ =0x00005609
	mov r1, sl
	strh r0, [r1, #4]
	mov r2, sb
	ldrh r0, [r2]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	orrs r0, r1
	mov r1, sb
	strh r0, [r1]
	ldr r0, _08095074 @ =0x0000FF06
	mov r2, r8
	strh r0, [r2, #8]
	strh r4, [r2, #0xa]
	ldr r1, _08095078 @ =0x0000048C
	adds r0, r5, r1
	ldr r1, _0809507C @ =0x06008000
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _08095080 @ =0x0600B000
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	ldr r1, _08095084 @ =0x00000163
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	strh r6, [r0, #0x26]
	strh r6, [r0, #0x28]
	ldr r2, _08095088 @ =0x000004B6
	adds r5, r5, r2
	strb r7, [r5]
	strh r4, [r0, #0x2e]
	bl DrawBackground
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809503C: .4byte gDispCnt
_08095040: .4byte gBgCntRegs
_08095044: .4byte 0x00000603
_08095048: .4byte gBgScrollRegs
_0809504C: .4byte 0x0000050C
_08095050: .4byte 0x06003000
_08095054: .4byte 0x00000161
_08095058: .4byte 0x00000536
_0809505C: .4byte 0x00004E06
_08095060: .4byte 0x000004CC
_08095064: .4byte 0x06004000
_08095068: .4byte 0x06007000
_0809506C: .4byte 0x000004F6
_08095070: .4byte 0x00005609
_08095074: .4byte 0x0000FF06
_08095078: .4byte 0x0000048C
_0809507C: .4byte 0x06008000
_08095080: .4byte 0x0600B000
_08095084: .4byte 0x00000163
_08095088: .4byte 0x000004B6

	thumb_func_start sub_809508C
sub_809508C: @ 0x0809508C
	push {r4, r5, r6, r7, lr}
	ldr r0, _08095108 @ =gCurTask
	mov ip, r0
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r3, r1, r0
	ldrh r5, [r3, #0x28]
	ldr r6, _0809510C @ =gBldRegs
	ldr r4, _08095110 @ =gWinRegs
	cmp r5, #0
	bne _080950D4
	ldr r0, _08095114 @ =0x00003FFF
	strh r0, [r6]
	ldr r2, _08095118 @ =gDispCnt
	ldrh r0, [r2]
	movs r7, #0xc0
	lsls r7, r7, #7
	adds r1, r7, #0
	orrs r0, r1
	strh r0, [r2]
	movs r0, #0xff
	strh r0, [r4]
	strh r0, [r4, #2]
	strh r0, [r4, #6]
	ldr r0, _0809511C @ =0x00003130
	strh r0, [r4, #8]
	strh r5, [r4, #0xa]
	movs r0, #0x10
	strh r0, [r6, #4]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r3, #0x26]
	movs r0, #1
	strh r0, [r3, #0x28]
_080950D4:
	ldr r0, [r3, #0x54]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r3, #0x2c]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r4, #4]
	ldrh r0, [r6, #4]
	cmp r0, #0
	beq _08095128
	ldrh r0, [r3, #0x26]
	lsrs r0, r0, #8
	strh r0, [r6, #4]
	ldr r1, _08095120 @ =0xFFFFFE00
	adds r0, r1, #0
	ldrh r7, [r3, #0x26]
	adds r0, r0, r7
	strh r0, [r3, #0x26]
	lsls r0, r0, #0x10
	ldr r1, _08095124 @ =0x0FFF0000
	cmp r0, r1
	bls _0809513E
	movs r0, #0
	strh r0, [r3, #0x26]
	b _0809513E
	.align 2, 0
_08095108: .4byte gCurTask
_0809510C: .4byte gBldRegs
_08095110: .4byte gWinRegs
_08095114: .4byte 0x00003FFF
_08095118: .4byte gDispCnt
_0809511C: .4byte 0x00003130
_08095120: .4byte 0xFFFFFE00
_08095124: .4byte 0x0FFF0000
_08095128:
	strh r0, [r3, #0x28]
	ldr r0, _08095144 @ =0x00003110
	strh r0, [r4, #8]
	movs r0, #0x1f
	strh r0, [r6, #2]
	movs r0, #0x10
	strh r0, [r6, #4]
	mov r0, ip
	ldr r1, [r0]
	ldr r0, _08095148 @ =sub_8095674
	str r0, [r1, #8]
_0809513E:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08095144: .4byte 0x00003110
_08095148: .4byte sub_8095674

	thumb_func_start sub_809514C
sub_809514C: @ 0x0809514C
	push {r4, lr}
	ldr r4, _080951A0 @ =gCurTask
	ldr r0, [r4]
	ldrh r2, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r2, r2, r0
	ldrb r3, [r2, #4]
	movs r0, #0
	strb r0, [r2, #4]
	strh r0, [r2, #0x24]
	strh r0, [r2, #0x26]
	strh r0, [r2, #0x28]
	movs r0, #4
	strb r0, [r2, #1]
	movs r0, #0x8c
	lsls r0, r0, #9
	str r0, [r2, #0x30]
	movs r1, #0x8c
	subs r1, r1, r3
	lsls r1, r1, #8
	str r1, [r2, #0x34]
	movs r0, #0xc0
	lsls r0, r0, #5
	str r0, [r2, #0x2c]
	lsls r3, r3, #8
	adds r1, r1, r3
	ldr r0, _080951A4 @ =0xFFFFF400
	adds r1, r1, r0
	str r1, [r2, #0x54]
	ldr r2, _080951A8 @ =gWinRegs
	asrs r0, r1, #8
	adds r0, r0, r1
	adds r0, #0x18
	strh r0, [r2, #4]
	ldr r1, [r4]
	ldr r0, _080951AC @ =sub_8095210
	str r0, [r1, #8]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080951A0: .4byte gCurTask
_080951A4: .4byte 0xFFFFF400
_080951A8: .4byte gWinRegs
_080951AC: .4byte sub_8095210

	thumb_func_start sub_80951B0
sub_80951B0: @ 0x080951B0
	ldr r3, _08095204 @ =gCurTask
	ldr r0, [r3]
	ldrh r2, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r2, r2, r0
	movs r1, #0
	movs r0, #0x20
	strb r0, [r2, #4]
	movs r0, #1
	strh r0, [r2, #0x24]
	strh r1, [r2, #0x26]
	strh r1, [r2, #0x28]
	movs r0, #4
	strb r0, [r2, #1]
	movs r0, #0x8c
	lsls r0, r0, #9
	str r0, [r2, #0x30]
	movs r1, #0xd8
	lsls r1, r1, #7
	str r1, [r2, #0x34]
	str r0, [r2, #0x38]
	str r1, [r2, #0x3c]
	movs r0, #0xc0
	lsls r0, r0, #5
	str r0, [r2, #0x2c]
	movs r0, #0xa0
	lsls r0, r0, #5
	adds r1, r1, r0
	str r1, [r2, #0x54]
	movs r0, #3
	strb r0, [r2, #0x1e]
	ldr r2, _08095208 @ =gWinRegs
	lsrs r0, r1, #8
	orrs r0, r1
	adds r0, #0x18
	strh r0, [r2, #4]
	ldr r1, [r3]
	ldr r0, _0809520C @ =sub_8095210
	str r0, [r1, #8]
	bx lr
	.align 2, 0
_08095204: .4byte gCurTask
_08095208: .4byte gWinRegs
_0809520C: .4byte sub_8095210

	thumb_func_start sub_8095210
sub_8095210: @ 0x08095210
	push {r4, r5, r6, lr}
	ldr r0, _08095254 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldrh r0, [r4, #0x28]
	ldr r3, _08095258 @ =gWinRegs
	cmp r0, #0
	bne _08095284
	ldr r1, _0809525C @ =gBldRegs
	movs r5, #0
	ldr r0, _08095260 @ =0x00003FFF
	strh r0, [r1]
	ldr r2, _08095264 @ =gDispCnt
	ldrh r0, [r2]
	movs r6, #0xc0
	lsls r6, r6, #7
	adds r1, r6, #0
	orrs r0, r1
	strh r0, [r2]
	movs r0, #0xff
	strh r0, [r3]
	strh r0, [r3, #2]
	strh r0, [r3, #6]
	ldrb r0, [r4, #3]
	subs r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _0809526C
	ldr r0, _08095268 @ =0x00003530
	b _0809526E
	.align 2, 0
_08095254: .4byte gCurTask
_08095258: .4byte gWinRegs
_0809525C: .4byte gBldRegs
_08095260: .4byte 0x00003FFF
_08095264: .4byte gDispCnt
_08095268: .4byte 0x00003530
_0809526C:
	ldr r0, _080952C8 @ =0x00003510
_0809526E:
	strh r0, [r3, #8]
	movs r0, #0
	strh r0, [r3, #0xa]
	ldr r1, _080952CC @ =gBldRegs
	movs r0, #0x10
	strh r0, [r1, #4]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r4, #0x26]
	movs r0, #1
	strh r0, [r4, #0x28]
_08095284:
	ldr r0, [r4, #0x54]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r4, #0x2c]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r3, #4]
	adds r0, r4, #0
	bl sub_80964F8
	adds r0, r4, #0
	bl sub_8096590
	adds r0, r4, #0
	bl sub_8095D24
	adds r0, r4, #0
	bl sub_809660C
	adds r0, r4, #0
	bl sub_80960B8
	adds r0, r4, #0
	bl sub_8095EF4
	movs r1, #0x24
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bne _080952D0
	adds r0, r4, #0
	bl sub_809673C
	b _080952D6
	.align 2, 0
_080952C8: .4byte 0x00003510
_080952CC: .4byte gBldRegs
_080952D0:
	adds r0, r4, #0
	bl sub_8096758
_080952D6:
	ldr r3, _080952F4 @ =gBldRegs
	ldrh r0, [r3, #4]
	adds r5, r0, #0
	cmp r5, #0
	beq _080952FC
	ldrh r0, [r4, #0x26]
	lsrs r0, r0, #8
	strh r0, [r3, #4]
	ldr r6, _080952F8 @ =0xFFFFFF00
	adds r0, r6, #0
	ldrh r1, [r4, #0x26]
	adds r0, r0, r1
	strh r0, [r4, #0x26]
	b _08095350
	.align 2, 0
_080952F4: .4byte gBldRegs
_080952F8: .4byte 0xFFFFFF00
_080952FC:
	lsls r0, r0, #8
	strh r0, [r4, #0x26]
	ldr r0, _08095358 @ =0xFFFFCE00
	str r0, [r4, #0x30]
	ldr r2, _0809535C @ =gDispCnt
	ldrh r0, [r2]
	movs r6, #0x80
	lsls r6, r6, #2
	adds r1, r6, #0
	orrs r0, r1
	strh r0, [r2]
	movs r1, #0x24
	ldrsh r0, [r4, r1]
	cmp r0, #0
	beq _08095324
	ldr r0, [r4, #0x34]
	movs r6, #0x80
	lsls r6, r6, #6
	adds r0, r0, r6
	str r0, [r4, #0x34]
_08095324:
	ldr r0, [r4, #0x30]
	movs r1, #0xa8
	lsls r1, r1, #6
	adds r0, r0, r1
	str r0, [r4, #0x48]
	ldr r0, [r4, #0x34]
	str r0, [r4, #0x4c]
	movs r0, #0x82
	strh r0, [r3]
	ldr r1, _08095360 @ =gWinRegs
	ldr r0, _08095364 @ =0x00003532
	strh r0, [r1, #8]
	movs r0, #0x10
	strh r0, [r3, #4]
	strh r5, [r4, #0x28]
	ldrh r0, [r3, #4]
	lsls r0, r0, #8
	strh r0, [r4, #0x26]
	ldr r0, _08095368 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809536C @ =sub_8095840
	str r0, [r1, #8]
_08095350:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08095358: .4byte 0xFFFFCE00
_0809535C: .4byte gDispCnt
_08095360: .4byte gWinRegs
_08095364: .4byte 0x00003532
_08095368: .4byte gCurTask
_0809536C: .4byte sub_8095840

	thumb_func_start sub_8095370
sub_8095370: @ 0x08095370
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	ldr r0, _080953C0 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldrh r0, [r4, #0x28]
	cmp r0, #0
	beq _080953B0
	ldr r1, _080953C4 @ =gBldRegs
	movs r3, #0
	ldr r0, _080953C8 @ =0x00003FFF
	strh r0, [r1]
	ldr r2, _080953CC @ =gDispCnt
	ldrh r0, [r2]
	movs r5, #0xc0
	lsls r5, r5, #7
	adds r1, r5, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080953D0 @ =gWinRegs
	ldr r0, _080953D4 @ =0x00003510
	strh r0, [r1, #8]
	strh r3, [r1, #0xa]
	strh r3, [r4, #0x26]
	strh r3, [r4, #0x28]
_080953B0:
	movs r7, #0x24
	ldrsh r0, [r4, r7]
	cmp r0, #0
	bne _080953D8
	adds r0, r4, #0
	bl sub_809673C
	b _080953DE
	.align 2, 0
_080953C0: .4byte gCurTask
_080953C4: .4byte gBldRegs
_080953C8: .4byte 0x00003FFF
_080953CC: .4byte gDispCnt
_080953D0: .4byte gWinRegs
_080953D4: .4byte 0x00003510
_080953D8:
	adds r0, r4, #0
	bl sub_8096758
_080953DE:
	adds r0, r4, #0
	bl sub_80964F8
	adds r0, r4, #0
	bl sub_8096490
	adds r0, r4, #0
	bl sub_8096714
	ldr r2, _08095420 @ =gWinRegs
	ldr r0, [r4, #0x54]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r4, #0x2c]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2, #4]
	ldr r1, _08095424 @ =gBldRegs
	ldrh r0, [r1, #4]
	cmp r0, #0xf
	bhi _08095428
	ldrh r0, [r4, #0x26]
	lsrs r0, r0, #8
	strh r0, [r1, #4]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r1, #0
	ldrh r2, [r4, #0x26]
	adds r0, r0, r2
	strh r0, [r4, #0x26]
	b _0809548A
	.align 2, 0
_08095420: .4byte gWinRegs
_08095424: .4byte gBldRegs
_08095428:
	lsls r0, r0, #8
	strh r0, [r4, #0x26]
	movs r3, #0
	ldr r5, _0809549C @ =gCurTask
	mov sl, r5
	ldr r7, _080954A0 @ =gBgScrollRegs
	mov r8, r7
	ldr r0, _080954A4 @ =sub_80962B4
	mov sb, r0
	adds r1, r4, #0
	adds r1, #0x78
	str r1, [sp]
	adds r6, r4, #0
	adds r6, #0x7c
	adds r5, r4, #0
	adds r5, #0xf
	mov ip, r3
_0809544A:
	lsls r1, r3, #3
	ldr r7, [sp]
	adds r2, r7, r1
	lsls r0, r3, #0xe
	movs r7, #0xf0
	lsls r7, r7, #8
	adds r0, r0, r7
	str r0, [r2]
	adds r1, r6, r1
	lsls r0, r3, #0xc
	movs r2, #0x80
	lsls r2, r2, #5
	adds r0, r0, r2
	str r0, [r1]
	adds r0, r5, r3
	mov r7, ip
	strb r7, [r0]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #4
	bls _0809544A
	movs r0, #0
	strb r0, [r4, #0x1f]
	strb r0, [r4, #0x1e]
	movs r0, #0x80
	mov r1, r8
	strh r0, [r1, #6]
	mov r2, sl
	ldr r0, [r2]
	mov r5, sb
	str r5, [r0, #8]
_0809548A:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809549C: .4byte gCurTask
_080954A0: .4byte gBgScrollRegs
_080954A4: .4byte sub_80962B4

	thumb_func_start sub_80954A8
sub_80954A8: @ 0x080954A8
	push {r4, r5, r6, lr}
	ldr r0, _080954F0 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r1, r0
	ldrh r0, [r6, #0x28]
	cmp r0, #0
	beq _0809551A
	ldr r1, _080954F4 @ =gBldRegs
	movs r3, #0
	movs r4, #0
	ldr r0, _080954F8 @ =0x00003FFF
	strh r0, [r1]
	ldr r2, _080954FC @ =gDispCnt
	ldrh r0, [r2]
	movs r5, #0xc0
	lsls r5, r5, #7
	adds r1, r5, #0
	orrs r0, r1
	strh r0, [r2]
	ldrb r0, [r6, #3]
	cmp r0, #0
	bne _08095508
	ldr r0, _08095500 @ =gWinRegs
	movs r1, #0xff
	strh r1, [r0]
	strh r1, [r0, #4]
	strh r1, [r0, #2]
	strh r1, [r0, #6]
	ldr r1, _08095504 @ =0x00003130
	strh r1, [r0, #8]
	strh r4, [r0, #0xa]
	b _08095510
	.align 2, 0
_080954F0: .4byte gCurTask
_080954F4: .4byte gBldRegs
_080954F8: .4byte 0x00003FFF
_080954FC: .4byte gDispCnt
_08095500: .4byte gWinRegs
_08095504: .4byte 0x00003130
_08095508:
	ldr r1, _08095540 @ =gWinRegs
	ldr r0, _08095544 @ =0x00003532
	strh r0, [r1, #8]
	strh r4, [r1, #0xa]
_08095510:
	movs r0, #0
	strh r0, [r6, #0x26]
	strh r0, [r6, #0x28]
	ldr r1, _08095548 @ =gBldRegs
	strh r0, [r1, #4]
_0809551A:
	ldrb r0, [r6, #3]
	cmp r0, #1
	beq _0809552C
	cmp r0, #5
	beq _0809552C
	cmp r0, #7
	beq _0809552C
	cmp r0, #3
	bne _0809554C
_0809552C:
	adds r0, r6, #0
	bl sub_809673C
	adds r0, r6, #0
	bl sub_8096814
	adds r0, r6, #0
	bl sub_8096774
	b _08095562
	.align 2, 0
_08095540: .4byte gWinRegs
_08095544: .4byte 0x00003532
_08095548: .4byte gBldRegs
_0809554C:
	cmp r0, #2
	beq _0809555C
	cmp r0, #6
	beq _0809555C
	cmp r0, #8
	beq _0809555C
	cmp r0, #4
	bne _08095582
_0809555C:
	adds r0, r6, #0
	bl sub_8096758
_08095562:
	adds r0, r6, #0
	bl sub_809673C
	adds r0, r6, #0
	bl sub_8095E8C
	adds r0, r6, #0
	bl sub_80960B8
	adds r0, r6, #0
	bl sub_80967DC
	adds r0, r6, #0
	bl sub_8095EF4
	b _08095598
_08095582:
	movs r1, #0x24
	ldrsh r0, [r6, r1]
	cmp r0, #0
	bne _08095592
	adds r0, r6, #0
	bl sub_809673C
	b _08095598
_08095592:
	adds r0, r6, #0
	bl sub_8096758
_08095598:
	ldr r1, _080955B4 @ =gBldRegs
	ldrh r0, [r1, #4]
	cmp r0, #0xf
	bhi _080955B8
	ldrh r0, [r6, #0x26]
	lsrs r0, r0, #8
	strh r0, [r1, #4]
	movs r5, #0x80
	lsls r5, r5, #1
	adds r0, r5, #0
	ldrh r1, [r6, #0x26]
	adds r0, r0, r1
	strh r0, [r6, #0x26]
	b _0809566A
	.align 2, 0
_080955B4: .4byte gBldRegs
_080955B8:
	ldrb r0, [r6, #3]
	cmp r0, #1
	beq _080955C2
	cmp r0, #3
	bne _080955E4
_080955C2:
	ldr r4, _080955E0 @ =gStageData
	movs r5, #0
	movs r0, #3
	strb r0, [r4, #3]
	movs r0, #0x1f
	ldrsb r0, [r6, r0]
	lsls r1, r0, #2
	adds r1, r1, r0
	lsls r1, r1, #1
	movs r0, #0x1e
	ldrsb r0, [r6, r0]
	adds r0, r0, r1
	adds r0, #3
	b _08095606
	.align 2, 0
_080955E0: .4byte gStageData
_080955E4:
	cmp r0, #2
	beq _080955EC
	cmp r0, #4
	bne _08095614
_080955EC:
	ldr r4, _08095610 @ =gStageData
	movs r5, #0
	movs r0, #4
	strb r0, [r4, #3]
	movs r1, #0x1f
	ldrsb r1, [r6, r1]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #0x11
	movs r1, #0xe0
	lsls r1, r1, #0xb
	adds r0, r0, r1
	asrs r0, r0, #0x10
_08095606:
	movs r1, #0
	bl sub_8002210
	strb r5, [r4, #1]
	b _0809566A
	.align 2, 0
_08095610: .4byte gStageData
_08095614:
	cmp r0, #5
	bne _08095624
	ldr r0, _08095620 @ =gStageData
	movs r2, #0
	movs r1, #3
	b _0809562E
	.align 2, 0
_08095620: .4byte gStageData
_08095624:
	cmp r0, #6
	bne _08095640
	ldr r0, _0809563C @ =gStageData
	movs r2, #0
	movs r1, #4
_0809562E:
	strb r1, [r0, #3]
	strb r2, [r0, #6]
	movs r0, #0
	bl sub_8097C54
	b _08095662
	.align 2, 0
_0809563C: .4byte gStageData
_08095640:
	cmp r0, #7
	beq _08095648
	cmp r0, #8
	bne _0809565C
_08095648:
	ldr r1, _08095658 @ =gStageData
	movs r0, #0
	strb r0, [r1, #6]
	movs r0, #3
	bl sub_8097C54
	b _08095662
	.align 2, 0
_08095658: .4byte gStageData
_0809565C:
	movs r0, #9
	bl LaunchOptionsMenu
_08095662:
	ldr r0, _08095670 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
_0809566A:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08095670: .4byte gCurTask

	thumb_func_start sub_8095674
sub_8095674: @ 0x08095674
	push {r4, r5, lr}
	ldr r0, _08095694 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	movs r5, #0
	movs r1, #0x24
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bne _08095698
	adds r0, r4, #0
	bl sub_809673C
	b _0809569E
	.align 2, 0
_08095694: .4byte gCurTask
_08095698:
	adds r0, r4, #0
	bl sub_8096758
_0809569E:
	adds r0, r4, #0
	bl sub_8096398
	adds r1, r0, #0
	cmp r1, #1
	bne _080956B2
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	strb r1, [r4, #1]
_080956B2:
	adds r0, r4, #0
	bl sub_8096678
	cmp r0, #1
	bne _080956C6
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	movs r0, #2
	strb r0, [r4, #1]
_080956C6:
	cmp r5, #2
	bne _080956D6
	movs r0, #3
	strb r0, [r4, #1]
	ldr r0, _080956DC @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080956E0 @ =sub_8095764
	str r0, [r1, #8]
_080956D6:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080956DC: .4byte gCurTask
_080956E0: .4byte sub_8095764

	thumb_func_start sub_80956E4
sub_80956E4: @ 0x080956E4
	push {r4, r5, lr}
	ldr r0, _08095704 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	movs r5, #0
	movs r1, #0x24
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bne _08095708
	adds r0, r4, #0
	bl sub_809673C
	b _0809570E
	.align 2, 0
_08095704: .4byte gCurTask
_08095708:
	adds r0, r4, #0
	bl sub_8096758
_0809570E:
	adds r0, r4, #0
	bl sub_80963E0
	cmp r0, #1
	bne _0809571E
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_0809571E:
	adds r0, r4, #0
	bl sub_80966C4
	cmp r0, #1
	bne _0809572E
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_0809572E:
	ldr r2, _08095758 @ =gWinRegs
	ldr r0, [r4, #0x54]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r4, #0x2c]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2, #4]
	cmp r5, #2
	bne _08095750
	movs r0, #3
	strb r0, [r4, #1]
	ldr r0, _0809575C @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08095760 @ =sub_80954A8
	str r0, [r1, #8]
_08095750:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08095758: .4byte gWinRegs
_0809575C: .4byte gCurTask
_08095760: .4byte sub_80954A8

	thumb_func_start sub_8095764
sub_8095764: @ 0x08095764
	push {r4, r5, lr}
	ldr r5, _080957B0 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_809673C
	adds r0, r4, #0
	bl sub_8096758
	adds r0, r4, #0
	bl sub_8096790
	adds r0, r4, #0
	bl sub_8096428
	adds r0, r4, #0
	bl sub_8096554
	ldr r0, _080957B4 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080957BC
	movs r0, #0x6b
	bl m4aSongNumStart
	movs r0, #1
	strb r0, [r4, #1]
	strh r0, [r4, #0x28]
	ldr r1, [r5]
	ldr r0, _080957B8 @ =sub_80956E4
	str r0, [r1, #8]
	b _08095830
	.align 2, 0
_080957B0: .4byte gCurTask
_080957B4: .4byte gPressedKeys
_080957B8: .4byte sub_80956E4
_080957BC:
	movs r2, #1
	ands r2, r1
	cmp r2, #0
	beq _080957DC
	movs r0, #0x6a
	bl m4aSongNumStart
	movs r0, #4
	strb r0, [r4, #1]
	ldr r1, [r5]
	ldr r0, _080957D8 @ =sub_809624C
	str r0, [r1, #8]
	b _08095830
	.align 2, 0
_080957D8: .4byte sub_809624C
_080957DC:
	movs r0, #0xc0
	ands r0, r1
	cmp r0, #0
	beq _08095830
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08095804
	movs r1, #0x24
	ldrsh r0, [r4, r1]
	cmp r0, #0
	beq _08095804
	strb r2, [r4, #4]
	strh r2, [r4, #0x24]
	movs r0, #0x80
	lsls r0, r0, #6
	str r0, [r4, #0x64]
	movs r0, #0x6c
	bl m4aSongNumStart
_08095804:
	ldr r0, _08095838 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _0809582A
	movs r1, #0x24
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bne _0809582A
	movs r0, #0x20
	strb r0, [r4, #4]
	movs r0, #1
	strh r0, [r4, #0x24]
	ldr r0, _0809583C @ =0xFFFFF800
	str r0, [r4, #0x64]
	movs r0, #0x6c
	bl m4aSongNumStart
_0809582A:
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r4, #0x60]
_08095830:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08095838: .4byte gPressedKeys
_0809583C: .4byte 0xFFFFF800

	thumb_func_start sub_8095840
sub_8095840: @ 0x08095840
	push {r4, r5, lr}
	ldr r0, _080958AC @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	movs r5, #0
	adds r0, r4, #0
	bl sub_80960B8
	adds r0, r4, #0
	bl sub_80964F8
	adds r0, r4, #0
	bl sub_8095D24
	cmp r0, #1
	bne _08095868
	movs r5, #2
_08095868:
	adds r0, r4, #0
	bl sub_8096590
	cmp r0, #1
	bne _08095876
	movs r0, #1
	orrs r5, r0
_08095876:
	adds r0, r4, #0
	bl sub_809660C
	cmp r0, #1
	bne _08095888
	movs r0, #4
	orrs r5, r0
	lsls r0, r5, #0x18
	lsrs r5, r0, #0x18
_08095888:
	adds r0, r4, #0
	bl sub_80967DC
	movs r1, #0x24
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bne _080958B0
	adds r0, r4, #0
	bl sub_809673C
	adds r0, r4, #0
	bl sub_8096774
	adds r0, r4, #0
	bl sub_8096814
	b _080958BC
	.align 2, 0
_080958AC: .4byte gCurTask
_080958B0:
	adds r0, r4, #0
	bl sub_809673C
	adds r0, r4, #0
	bl sub_8096758
_080958BC:
	adds r0, r4, #0
	bl sub_8095EF4
	ldr r0, _080958D8 @ =gBldRegs
	ldrh r0, [r0]
	cmp r0, #0x82
	bne _080958DC
	ldrh r0, [r4, #0x28]
	cmp r0, #0
	beq _080958DC
	adds r0, r4, #0
	bl sub_8095DF8
	b _08095910
	.align 2, 0
_080958D8: .4byte gBldRegs
_080958DC:
	movs r0, #2
	ands r0, r5
	cmp r0, #0
	beq _08095910
	ldr r1, _08095960 @ =gBldRegs
	ldrh r0, [r1, #4]
	cmp r0, #0
	beq _080958FC
	ldr r2, _08095964 @ =0xFFFFFF00
	adds r0, r2, #0
	ldrh r3, [r4, #0x26]
	adds r0, r0, r3
	strh r0, [r4, #0x26]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x18
	strh r0, [r1, #4]
_080958FC:
	ldrh r0, [r1, #4]
	subs r0, #1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0xe
	bls _08095910
	movs r0, #0
	strh r0, [r1, #4]
	strh r0, [r4, #0x26]
	movs r5, #0xf
_08095910:
	cmp r5, #0xf
	bne _0809595A
	ldr r2, _08095968 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r1, r3, #0
	orrs r0, r1
	movs r3, #0x80
	lsls r3, r3, #3
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _08095960 @ =gBldRegs
	movs r0, #0x82
	strh r0, [r1]
	ldr r1, _0809596C @ =gWinRegs
	ldr r0, _08095970 @ =0x00003532
	strh r0, [r1, #8]
	ldr r1, _08095974 @ =gBgScrollRegs
	ldr r0, [r4, #0x78]
	asrs r0, r0, #8
	adds r0, #0xf
	strh r0, [r1, #8]
	movs r0, #0x84
	lsls r0, r0, #8
	str r0, [r4, #0x68]
	ldr r1, [r4, #0x34]
	str r1, [r4, #0x6c]
	movs r0, #0xf8
	lsls r0, r0, #7
	str r0, [r4, #0x70]
	str r1, [r4, #0x74]
	ldr r0, _08095978 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809597C @ =sub_809630C
	str r0, [r1, #8]
_0809595A:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08095960: .4byte gBldRegs
_08095964: .4byte 0xFFFFFF00
_08095968: .4byte gDispCnt
_0809596C: .4byte gWinRegs
_08095970: .4byte 0x00003532
_08095974: .4byte gBgScrollRegs
_08095978: .4byte gCurTask
_0809597C: .4byte sub_809630C

	thumb_func_start sub_8095980
sub_8095980: @ 0x08095980
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r4, r0, #0
	movs r6, #0
	ldrb r0, [r4, #0x1e]
	mov r8, r0
	ldrb r7, [r4, #0x1f]
	ldr r0, _080959B4 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08095A04
	movs r0, #0x6b
	bl m4aSongNumStart
	movs r0, #1
	strh r0, [r4, #0x28]
	ldrb r0, [r4, #3]
	cmp r0, #1
	bne _080959B8
	movs r0, #5
	strb r0, [r4, #3]
	b _08095A1C
	.align 2, 0
_080959B4: .4byte gPressedKeys
_080959B8:
	cmp r0, #2
	bne _080959C2
	movs r0, #6
	strb r0, [r4, #3]
	b _08095A1C
_080959C2:
	cmp r0, #3
	bne _080959CC
	movs r0, #7
	strb r0, [r4, #3]
	b _08095A1C
_080959CC:
	cmp r0, #4
	bne _080959D6
	movs r0, #8
	strb r0, [r4, #3]
	b _08095A1C
_080959D6:
	movs r1, #0x24
	ldrsh r0, [r4, r1]
	cmp r0, #0
	beq _080959EA
	ldr r0, [r4, #0x38]
	str r0, [r4, #0x30]
	ldr r0, [r4, #0x3c]
	ldr r2, _080959F8 @ =0xFFFFE000
	adds r0, r0, r2
	str r0, [r4, #0x34]
_080959EA:
	movs r0, #3
	strb r0, [r4, #1]
	ldr r0, _080959FC @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08095A00 @ =sub_8095370
	str r0, [r1, #8]
	b _08095C00
	.align 2, 0
_080959F8: .4byte 0xFFFFE000
_080959FC: .4byte gCurTask
_08095A00: .4byte sub_8095370
_08095A04:
	ldrb r0, [r4, #3]
	cmp r0, #0
	beq _08095A30
	movs r5, #1
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq _08095A30
	movs r0, #0x6a
	bl m4aSongNumStart
	strh r5, [r4, #0x28]
_08095A1C:
	ldr r0, _08095A28 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08095A2C @ =sub_80954A8
	str r0, [r1, #8]
	b _08095C00
	.align 2, 0
_08095A28: .4byte gCurTask
_08095A2C: .4byte sub_80954A8
_08095A30:
	ldr r1, _08095AD8 @ =gRepeatedKeys
	ldrh r2, [r1]
	movs r0, #0xc0
	ands r0, r2
	adds r5, r1, #0
	cmp r0, #0
	beq _08095AE4
	movs r0, #0x40
	ands r0, r2
	cmp r0, #0
	beq _08095A5C
	ldrb r0, [r4, #0x1f]
	adds r0, #1
	strb r0, [r4, #0x1f]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	movs r1, #0x14
	ldrsb r1, [r4, r1]
	cmp r0, r1
	blt _08095A5C
	movs r0, #0
	strb r0, [r4, #0x1f]
_08095A5C:
	ldrh r1, [r5]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _08095A78
	ldrb r0, [r4, #0x1f]
	subs r0, #1
	strb r0, [r4, #0x1f]
	lsls r0, r0, #0x18
	cmp r0, #0
	bge _08095A78
	ldrb r0, [r4, #0x14]
	subs r0, #1
	strb r0, [r4, #0x1f]
_08095A78:
	movs r1, #0x1f
	ldrsb r1, [r4, r1]
	lsls r0, r7, #0x18
	asrs r0, r0, #0x18
	cmp r1, r0
	beq _08095A86
	movs r6, #1
_08095A86:
	cmp r6, #0
	beq _08095AE4
	movs r0, #0x6c
	bl m4aSongNumStart
	movs r0, #2
	strh r0, [r4, #0x28]
	movs r3, #0
	adds r6, r4, #0
	adds r6, #0x78
	adds r5, r4, #0
	adds r5, #0x7c
	adds r4, #0xf
	mov r8, r3
_08095AA2:
	lsls r1, r3, #3
	adds r2, r6, r1
	lsls r0, r3, #0xe
	movs r7, #0xf0
	lsls r7, r7, #8
	adds r0, r0, r7
	str r0, [r2]
	adds r1, r5, r1
	lsls r0, r3, #0xc
	movs r2, #0x80
	lsls r2, r2, #5
	adds r0, r0, r2
	str r0, [r1]
	adds r0, r4, r3
	mov r7, r8
	strb r7, [r0]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #4
	bls _08095AA2
	ldr r0, _08095ADC @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08095AE0 @ =sub_8095840
	str r0, [r1, #8]
	b _08095C00
	.align 2, 0
_08095AD8: .4byte gRepeatedKeys
_08095ADC: .4byte gCurTask
_08095AE0: .4byte sub_8095840
_08095AE4:
	ldrh r1, [r5]
	movs r0, #0x30
	ands r0, r1
	cmp r0, #0
	bne _08095AF0
	b _08095C00
_08095AF0:
	movs r0, #0x6c
	bl m4aSongNumStart
	ldrh r1, [r5]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _08095B4A
	movs r0, #0x24
	ldrsh r2, [r4, r0]
	cmp r2, #0
	bne _08095B2E
	ldrb r0, [r4, #0x1e]
	adds r0, #1
	strb r0, [r4, #0x1e]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #2
	ble _08095B4A
	strb r2, [r4, #0x1e]
	ldrb r0, [r4, #0x1f]
	adds r0, #1
	strb r0, [r4, #0x1f]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	movs r1, #0x14
	ldrsb r1, [r4, r1]
	cmp r0, r1
	blt _08095B4A
	strb r2, [r4, #0x1f]
	b _08095B4A
_08095B2E:
	movs r0, #3
	strb r0, [r4, #0x1e]
	ldrb r0, [r4, #0x1f]
	adds r0, #1
	strb r0, [r4, #0x1f]
	movs r1, #0x1f
	ldrsb r1, [r4, r1]
	movs r0, #0x14
	ldrsb r0, [r4, r0]
	subs r0, #1
	cmp r1, r0
	ble _08095B4A
	movs r0, #0
	strb r0, [r4, #0x1f]
_08095B4A:
	ldr r0, _08095B70 @ =gRepeatedKeys
	ldrh r1, [r0]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _08095B8A
	movs r1, #0x24
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bne _08095B74
	ldrb r0, [r4, #0x1e]
	subs r0, #1
	strb r0, [r4, #0x1e]
	lsls r0, r0, #0x18
	cmp r0, #0
	bge _08095B8A
	movs r0, #2
	b _08095B76
	.align 2, 0
_08095B70: .4byte gRepeatedKeys
_08095B74:
	movs r0, #3
_08095B76:
	strb r0, [r4, #0x1e]
	ldrb r0, [r4, #0x1f]
	subs r0, #1
	strb r0, [r4, #0x1f]
	lsls r0, r0, #0x18
	cmp r0, #0
	bge _08095B8A
	ldrb r0, [r4, #0x14]
	subs r0, #1
	strb r0, [r4, #0x1f]
_08095B8A:
	movs r0, #0x1f
	ldrsb r0, [r4, r0]
	lsls r1, r7, #0x18
	asrs r2, r1, #0x18
	ldrb r3, [r4, #0x1f]
	adds r5, r1, #0
	cmp r0, r2
	bne _08095BA8
	movs r1, #0x1e
	ldrsb r1, [r4, r1]
	mov r2, r8
	lsls r0, r2, #0x18
	asrs r0, r0, #0x18
	cmp r1, r0
	beq _08095BAA
_08095BA8:
	movs r6, #1
_08095BAA:
	cmp r6, #0
	beq _08095C00
	lsls r0, r3, #0x18
	cmp r0, r5
	beq _08095BB8
	movs r0, #2
	strh r0, [r4, #0x28]
_08095BB8:
	movs r3, #0
	ldr r7, _08095C0C @ =gCurTask
	mov r8, r7
	ldr r0, _08095C10 @ =sub_8095840
	mov ip, r0
	adds r6, r4, #0
	adds r6, #0x78
	adds r5, r4, #0
	adds r5, #0x7c
	adds r4, #0xf
	mov sb, r3
_08095BCE:
	lsls r1, r3, #3
	adds r2, r6, r1
	lsls r0, r3, #0xe
	movs r7, #0xf0
	lsls r7, r7, #8
	adds r0, r0, r7
	str r0, [r2]
	adds r1, r5, r1
	lsls r0, r3, #0xc
	movs r2, #0x80
	lsls r2, r2, #5
	adds r0, r0, r2
	str r0, [r1]
	adds r0, r4, r3
	mov r7, sb
	strb r7, [r0]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #4
	bls _08095BCE
	mov r1, r8
	ldr r0, [r1]
	mov r2, ip
	str r2, [r0, #8]
_08095C00:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08095C0C: .4byte gCurTask
_08095C10: .4byte sub_8095840

	thumb_func_start sub_8095C14
sub_8095C14: @ 0x08095C14
	push {r4, r5, lr}
	adds r2, r0, #0
	ldr r1, _08095C6C @ =gPressedKeys
	ldrh r3, [r1]
	movs r0, #4
	ands r0, r3
	cmp r0, #0
	beq _08095C80
	movs r0, #0
	movs r1, #1
	strb r1, [r2, #1]
	movs r1, #0
	strh r0, [r2, #0x24]
	strb r1, [r2, #0x1e]
	strh r0, [r2, #0x22]
	strb r1, [r2, #4]
	ldrb r1, [r2, #2]
	ldr r3, _08095C70 @ =gWinRegs
	ldr r4, _08095C74 @ =gCurTask
	ldr r5, _08095C78 @ =sub_8095674
	cmp r0, r1
	bhi _08095C54
_08095C40:
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, r1
	bls _08095C40
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [r2, #0x34]
	ldr r0, _08095C7C @ =0xFFFFCE00
	str r0, [r2, #0x30]
_08095C54:
	movs r0, #0
	str r0, [r2, #0x54]
	movs r0, #0xa0
	lsls r0, r0, #8
	str r0, [r2, #0x2c]
	movs r0, #0xff
	strh r0, [r3]
	movs r0, #0xa0
	strh r0, [r3, #4]
	ldr r0, [r4]
	str r5, [r0, #8]
	b _08095CAE
	.align 2, 0
_08095C6C: .4byte gPressedKeys
_08095C70: .4byte gWinRegs
_08095C74: .4byte gCurTask
_08095C78: .4byte sub_8095674
_08095C7C: .4byte 0xFFFFCE00
_08095C80:
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r3
	cmp r0, #0
	beq _08095C90
	ldrh r0, [r2, #0x20]
	adds r0, #1
	strh r0, [r2, #0x20]
_08095C90:
	ldrh r1, [r1]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08095CAE
	ldrh r0, [r2, #0x20]
	subs r0, #1
	strh r0, [r2, #0x20]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #1
	bne _08095CAE
	movs r0, #2
	strh r0, [r2, #0x20]
_08095CAE:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8095CB4
sub_8095CB4: @ 0x08095CB4
	push {r4, r5, lr}
	adds r2, r0, #0
	ldrb r1, [r2, #4]
	movs r4, #0
	movs r0, #0x8c
	subs r0, r0, r1
	lsls r3, r0, #8
	ldr r1, [r2, #0x34]
	cmp r1, r3
	bge _08095CE8
	ldrh r0, [r2, #0x20]
	subs r0, #1
	lsls r0, r0, #8
	adds r1, r1, r0
	str r1, [r2, #0x34]
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r2, #0x30]
	movs r5, #0x24
	ldrsh r0, [r2, r5]
	cmp r0, #0
	beq _08095D02
	cmp r1, r3
	blt _08095D02
	str r3, [r2, #0x34]
	b _08095D02
_08095CE8:
	ldrh r0, [r2, #0x20]
	adds r0, #2
	lsls r0, r0, #8
	ldr r1, [r2, #0x30]
	adds r1, r1, r0
	str r1, [r2, #0x30]
	str r3, [r2, #0x34]
	ldr r0, _08095D18 @ =0x000117FF
	cmp r1, r0
	ble _08095D02
	adds r0, #1
	str r0, [r2, #0x30]
	movs r4, #1
_08095D02:
	ldr r0, [r2, #0x30]
	str r0, [r2, #0x38]
	ldr r0, [r2, #0x34]
	movs r1, #0x80
	lsls r1, r1, #6
	adds r0, r0, r1
	str r0, [r2, #0x3c]
	cmp r4, #0
	bne _08095D1C
	movs r0, #0
	b _08095D1E
	.align 2, 0
_08095D18: .4byte 0x000117FF
_08095D1C:
	movs r0, #1
_08095D1E:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_8095D24
sub_8095D24: @ 0x08095D24
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov ip, r0
	movs r0, #0
	mov r8, r0
	movs r5, #0
	mov r7, ip
	adds r7, #0xf
	mov r6, ip
	adds r6, #0x78
	mov sl, r5
	ldr r4, _08095D78 @ =gUnknown_080D8BB0
	mov sb, r4
_08095D44:
	adds r0, r7, r5
	ldrb r3, [r0]
	lsls r2, r5, #3
	mov r1, ip
	adds r1, #0x7c
	adds r1, r1, r2
	lsls r0, r5, #2
	ldr r4, _08095D7C @ =gUnknown_080D8B9C
	adds r0, r0, r4
	ldr r0, [r0]
	lsls r0, r0, #8
	str r0, [r1]
	cmp r3, #6
	bne _08095D86
	adds r2, r6, r2
	ldr r0, [r2]
	cmp r0, #0
	blt _08095D80
	mov r0, sl
	str r0, [r2]
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	b _08095DCC
	.align 2, 0
_08095D78: .4byte gUnknown_080D8BB0
_08095D7C: .4byte gUnknown_080D8B9C
_08095D80:
	mov r4, sl
	str r4, [r2]
	b _08095DCC
_08095D86:
	cmp r3, #5
	bhi _08095DA0
	adds r0, r6, r2
	ldr r1, [r0]
	asrs r1, r1, #8
	lsls r0, r3, #2
	add r0, sb
	ldr r0, [r0]
	mov r4, ip
	adds r4, #0x78
	cmp r1, r0
	bgt _08095DBA
	b _08095DB4
_08095DA0:
	adds r0, r6, r2
	ldr r1, [r0]
	asrs r1, r1, #8
	lsls r0, r3, #2
	add r0, sb
	ldr r0, [r0]
	mov r4, ip
	adds r4, #0x78
	cmp r1, r0
	blt _08095DBA
_08095DB4:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
_08095DBA:
	adds r2, r4, r2
	ldr r0, _08095DE4 @ =gUnknown_080D8BD8
	adds r0, r3, r0
	movs r1, #0
	ldrsb r1, [r0, r1]
	lsls r1, r1, #8
	ldr r0, [r2]
	subs r0, r0, r1
	str r0, [r2]
_08095DCC:
	adds r0, r7, r5
	strb r3, [r0]
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #4
	bls _08095D44
	mov r0, r8
	cmp r0, #4
	bhi _08095DE8
	movs r0, #0
	b _08095DEA
	.align 2, 0
_08095DE4: .4byte gUnknown_080D8BD8
_08095DE8:
	movs r0, #1
_08095DEA:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_8095DF8
sub_8095DF8: @ 0x08095DF8
	push {r4, r5, lr}
	adds r2, r0, #0
	ldrb r3, [r2, #0x1f]
	ldr r4, _08095E80 @ =gBgScrollRegs
	movs r0, #0
	strh r0, [r4, #4]
	ldrh r0, [r2, #0x28]
	cmp r0, #2
	bne _08095E46
	ldr r1, _08095E84 @ =gBldRegs
	ldrh r0, [r1, #4]
	cmp r0, #0xf
	bhi _08095E24
	movs r5, #0x80
	lsls r5, r5, #1
	adds r0, r5, #0
	ldrh r5, [r2, #0x26]
	adds r0, r0, r5
	strh r0, [r2, #0x26]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x18
	strh r0, [r1, #4]
_08095E24:
	ldrh r0, [r1, #4]
	subs r0, #1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0xe
	bls _08095E46
	movs r0, #0x10
	strh r0, [r1, #4]
	movs r1, #1
	strh r1, [r2, #0x28]
	lsls r0, r0, #8
	strh r0, [r2, #0x26]
	lsls r1, r3, #4
	lsls r0, r3, #3
	adds r0, #0x80
	adds r1, r1, r0
	strh r1, [r4, #6]
_08095E46:
	ldrh r0, [r2, #0x28]
	cmp r0, #1
	bne _08095E76
	ldr r1, _08095E84 @ =gBldRegs
	ldrh r0, [r1, #4]
	cmp r0, #0
	beq _08095E64
	ldr r3, _08095E88 @ =0xFFFFFF00
	adds r0, r3, #0
	ldrh r5, [r2, #0x26]
	adds r0, r0, r5
	strh r0, [r2, #0x26]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x18
	strh r0, [r1, #4]
_08095E64:
	ldrh r0, [r1, #4]
	subs r0, #1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0xf
	bls _08095E76
	movs r0, #0
	strh r0, [r1, #4]
	strh r0, [r2, #0x28]
_08095E76:
	movs r0, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_08095E80: .4byte gBgScrollRegs
_08095E84: .4byte gBldRegs
_08095E88: .4byte 0xFFFFFF00

	thumb_func_start sub_8095E8C
sub_8095E8C: @ 0x08095E8C
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r0, #0xa2
	lsls r0, r0, #1
	adds r4, r5, r0
	ldr r0, [r5, #0x68]
	asrs r0, r0, #8
	subs r0, #0x20
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x6c]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	ldr r0, [r4, #8]
	ldr r1, _08095EEC @ =0xFFFFFBFF
	ands r0, r1
	str r0, [r4, #8]
	ldrh r1, [r5, #0x1e]
	ldr r0, _08095EF0 @ =0x00000603
	cmp r1, r0
	bne _08095EBA
	adds r0, r4, #0
	bl UpdateSpriteAnimation
_08095EBA:
	adds r0, r4, #0
	bl DisplaySprite
	ldr r0, [r5, #0x70]
	asrs r0, r0, #8
	adds r0, #0x69
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x74]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	str r0, [r4, #8]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08095EEC: .4byte 0xFFFFFBFF
_08095EF0: .4byte 0x00000603

	thumb_func_start sub_8095EF4
sub_8095EF4: @ 0x08095EF4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x30
	adds r6, r0, #0
	movs r0, #0
	str r0, [sp, #0x10]
	ldr r1, _08095FBC @ =gUnknown_080D8BE2
	mov r0, sp
	movs r2, #5
	bl memcpy
	ldrb r1, [r6, #0x1e]
	ldrb r2, [r6, #0x1f]
	movs r3, #0
	lsls r0, r1, #4
	subs r0, r0, r1
	lsls r0, r0, #2
	str r0, [sp, #0x14]
	lsls r0, r2, #4
	subs r0, r0, r2
	lsls r0, r0, #4
	str r0, [sp, #0x18]
_08095F26:
	movs r1, #0
	mov r8, r1
	lsls r0, r3, #1
	ldr r2, [sp, #0x14]
	adds r0, r0, r2
	ldr r1, [sp, #0x18]
	adds r0, r0, r1
	ldr r2, _08095FC0 @ =0x0000054C
	adds r1, r6, r2
	adds r1, r1, r0
	ldrb r0, [r1]
	cmp r0, #4
	bhi _08095F46
	ldr r0, [sp, #0x10]
	cmp r0, #0
	beq _08095FC4
_08095F46:
	movs r1, #1
	str r1, [sp, #0x10]
	movs r4, #0
	lsls r7, r3, #3
	adds r5, r6, #0
	adds r5, #0x78
	movs r2, #0x7c
	adds r2, r2, r6
	mov sb, r2
	adds r3, #1
	str r3, [sp, #0x24]
	mov sl, r7
	adds r2, r2, r7
	str r2, [sp, #0x2c]
_08095F62:
	cmp r4, #1
	beq _08095F6A
	cmp r4, #3
	bne _08095F74
_08095F6A:
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
_08095F74:
	mov r3, sp
	adds r0, r3, r4
	ldrb r1, [r0]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	movs r1, #0xde
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r2, r6, r0
	mov r3, sl
	adds r0, r5, r3
	ldr r0, [r0]
	asrs r0, r0, #8
	adds r0, #0xaa
	lsls r1, r4, #3
	adds r0, r0, r1
	adds r0, r0, r4
	mov r3, r8
	lsls r1, r3, #3
	adds r0, r0, r1
	strh r0, [r2, #0x10]
	ldr r1, [sp, #0x2c]
	ldr r0, [r1]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	adds r0, r2, #0
	bl DisplaySprite
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #4
	bls _08095F62
	b _08096058
	.align 2, 0
_08095FBC: .4byte gUnknown_080D8BE2
_08095FC0: .4byte 0x0000054C
_08095FC4:
	movs r4, #0
	lsls r7, r3, #3
	adds r5, r6, #0
	adds r5, #0x78
	movs r2, #0x7c
	adds r2, r2, r6
	mov sb, r2
	mov r0, sp
	adds r0, #8
	str r0, [sp, #0x20]
	lsls r0, r3, #2
	adds r1, r3, #1
	str r1, [sp, #0x24]
	str r7, [sp, #0x1c]
	adds r2, r2, r7
	mov sl, r2
	adds r0, r0, r3
	lsls r0, r0, #1
	str r0, [sp, #0x2c]
_08095FEA:
	ldr r3, [sp, #0x20]
	adds r2, r3, r4
	lsls r0, r4, #1
	ldr r1, [sp, #0x2c]
	adds r0, r0, r1
	ldr r3, [sp, #0x14]
	adds r0, r0, r3
	ldr r1, [sp, #0x18]
	adds r0, r0, r1
	ldr r3, _080960AC @ =0x00000556
	adds r1, r6, r3
	adds r1, r1, r0
	ldrh r0, [r1]
	strb r0, [r2]
	ldrb r1, [r2]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	movs r1, #0xde
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r2, r6, r0
	cmp r4, #1
	beq _0809601E
	cmp r4, #3
	bne _08096028
_0809601E:
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
_08096028:
	ldr r3, [sp, #0x1c]
	adds r0, r5, r3
	ldr r0, [r0]
	asrs r0, r0, #8
	adds r0, #0xaa
	lsls r1, r4, #3
	adds r0, r0, r1
	adds r0, r0, r4
	mov r3, r8
	lsls r1, r3, #3
	adds r0, r0, r1
	strh r0, [r2, #0x10]
	mov r1, sl
	ldr r0, [r1]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	adds r0, r2, #0
	bl DisplaySprite
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #4
	bls _08095FEA
_08096058:
	ldr r3, _080960B0 @ =0x0000043C
	adds r2, r6, r3
	adds r5, r5, r7
	ldr r0, [r5]
	asrs r0, r0, #8
	adds r0, #0xb3
	strh r0, [r2, #0x10]
	mov r0, sb
	adds r4, r0, r7
	ldr r0, [r4]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	adds r0, r2, #0
	bl DisplaySprite
	ldr r1, _080960B4 @ =0x00000464
	adds r2, r6, r1
	ldr r0, [r5]
	asrs r0, r0, #8
	adds r0, #0xce
	strh r0, [r2, #0x10]
	ldr r0, [r4]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	adds r0, r2, #0
	bl DisplaySprite
	ldr r2, [sp, #0x24]
	lsls r0, r2, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #4
	bhi _0809609A
	b _08095F26
_0809609A:
	add sp, #0x30
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080960AC: .4byte 0x00000556
_080960B0: .4byte 0x0000043C
_080960B4: .4byte 0x00000464

	thumb_func_start sub_80960B8
sub_80960B8: @ 0x080960B8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r6, r0, #0
	ldrb r1, [r6]
	rsbs r0, r1, #0
	orrs r0, r1
	lsrs r0, r0, #0x1f
	str r0, [sp, #4]
	ldrb r0, [r6, #0x1e]
	str r0, [sp]
	ldrb r1, [r6, #0x1f]
	mov sl, r1
	movs r2, #0
	mov sb, r2
_080960DC:
	mov r3, sb
	lsls r1, r3, #1
	ldr r2, [sp]
	lsls r0, r2, #4
	subs r0, r0, r2
	lsls r0, r0, #2
	adds r1, r1, r0
	mov r3, sl
	lsls r0, r3, #4
	subs r0, r0, r3
	lsls r0, r0, #4
	adds r1, r1, r0
	mov r8, r1
	ldr r1, _080961D0 @ =0x0000054C
	adds r0, r6, r1
	mov r2, r8
	adds r7, r0, r2
	ldrb r0, [r7]
	cmp r0, #4
	bhi _080961C0
	adds r1, r0, #0
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	movs r3, #0xd3
	lsls r3, r3, #2
	adds r0, r0, r3
	adds r2, r6, r0
	mov r0, sb
	lsls r1, r0, #3
	adds r0, r6, #0
	adds r0, #0x78
	adds r0, r0, r1
	ldr r4, [r0]
	asrs r4, r4, #8
	adds r4, #0x20
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	strh r4, [r2, #0x10]
	adds r5, r6, #0
	adds r5, #0x7c
	adds r5, r5, r1
	ldr r0, [r5]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	ldr r0, [r2, #8]
	movs r1, #0x81
	rsbs r1, r1, #0
	ands r0, r1
	str r0, [r2, #8]
	adds r0, r2, #0
	bl DisplaySprite
	ldr r3, _080961D4 @ =0x00000414
	adds r2, r6, r3
	ldr r1, _080961D8 @ =gUnknown_080D8B44
	ldrh r0, [r1]
	strh r0, [r2, #0xc]
	ldrb r0, [r1, #2]
	strb r0, [r2, #0x1a]
	ldr r1, _080961DC @ =gUnknown_080D8BE7
	ldr r3, [sp, #4]
	lsls r0, r3, #2
	orrs r0, r3
	ldrb r7, [r7]
	adds r0, r0, r7
	adds r0, r0, r1
	ldrb r0, [r0]
	adds r4, r4, r0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	strh r4, [r2, #0x10]
	ldr r0, [r5]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	ldr r0, [r2, #8]
	movs r1, #0x81
	rsbs r1, r1, #0
	ands r0, r1
	str r0, [r2, #8]
	adds r0, r2, #0
	bl DisplaySprite
	ldr r2, _080961E0 @ =0x0000054D
	adds r0, r6, r2
	add r0, r8
	ldrb r1, [r0]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	movs r3, #0xd3
	lsls r3, r3, #2
	adds r0, r0, r3
	adds r2, r6, r0
	adds r4, #0x10
	strh r4, [r2, #0x10]
	ldr r0, [r5]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	ldr r0, [r2, #8]
	movs r1, #0x81
	rsbs r1, r1, #0
	ands r0, r1
	str r0, [r2, #8]
	adds r0, r2, #0
	bl DisplaySprite
	mov r0, sb
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov sb, r0
	cmp r0, #4
	bls _080960DC
_080961C0:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080961D0: .4byte 0x0000054C
_080961D4: .4byte 0x00000414
_080961D8: .4byte gUnknown_080D8B44
_080961DC: .4byte gUnknown_080D8BE7
_080961E0: .4byte 0x0000054D

	thumb_func_start sub_80961E4
sub_80961E4: @ 0x080961E4
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	ldr r1, _08096238 @ =gDispCnt
	movs r2, #0x82
	lsls r2, r2, #5
	adds r0, r2, #0
	strh r0, [r1]
	ldr r0, _0809623C @ =sub_8094740
	ldr r1, _08096240 @ =0x00000BDC
	ldr r2, _08096244 @ =0x00000101
	ldr r3, _08096248 @ =sub_809684C
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	strb r5, [r4, #3]
	adds r0, r4, #0
	bl sub_80947EC
	adds r0, r4, #0
	bl sub_8094924
	ldrb r0, [r4, #3]
	cmp r0, #0
	beq _0809622E
	bl m4aMPlayAllStop
	movs r0, #0x47
	bl m4aSongNumStart
_0809622E:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08096238: .4byte gDispCnt
_0809623C: .4byte sub_8094740
_08096240: .4byte 0x00000BDC
_08096244: .4byte 0x00000101
_08096248: .4byte sub_809684C

	thumb_func_start sub_809624C
sub_809624C: @ 0x0809624C
	push {r4, lr}
	ldr r0, _0809626C @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	movs r1, #0x24
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bne _08096270
	adds r0, r4, #0
	bl sub_809673C
	b _08096276
	.align 2, 0
_0809626C: .4byte gCurTask
_08096270:
	adds r0, r4, #0
	bl sub_8096758
_08096276:
	adds r0, r4, #0
	bl sub_8096714
	adds r0, r4, #0
	bl sub_8095CB4
	cmp r0, #1
	bne _080962A4
	movs r0, #0
	strh r0, [r4, #0x28]
	adds r0, r4, #0
	bl sub_8096714
	movs r1, #0x24
	ldrsh r0, [r4, r1]
	cmp r0, #0
	beq _0809629C
	movs r0, #3
	strb r0, [r4, #0x1e]
_0809629C:
	ldr r0, _080962AC @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080962B0 @ =sub_8095210
	str r0, [r1, #8]
_080962A4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080962AC: .4byte gCurTask
_080962B0: .4byte sub_8095210

	thumb_func_start sub_80962B4
sub_80962B4: @ 0x080962B4
	push {r4, lr}
	ldr r0, _080962D4 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	movs r1, #0x24
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bne _080962D8
	adds r0, r4, #0
	bl sub_809673C
	b _080962DE
	.align 2, 0
_080962D4: .4byte gCurTask
_080962D8:
	adds r0, r4, #0
	bl sub_8096758
_080962DE:
	adds r0, r4, #0
	bl sub_8096714
	adds r0, r4, #0
	bl sub_8096490
	cmp r0, #1
	bne _080962FC
	adds r0, r4, #0
	bl sub_8096714
	ldr r0, _08096304 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08096308 @ =sub_8095764
	str r0, [r1, #8]
_080962FC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08096304: .4byte gCurTask
_08096308: .4byte sub_8095764

	thumb_func_start sub_809630C
sub_809630C: @ 0x0809630C
	push {r4, r5, lr}
	ldr r0, _0809634C @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r1, [r4, #0x30]
	ldr r0, _08096350 @ =0x00007BFF
	cmp r1, r0
	ble _0809632E
	ldrh r0, [r4, #0x28]
	cmp r0, #0
	beq _0809632E
	adds r0, r4, #0
	bl sub_8095DF8
_0809632E:
	movs r1, #0x24
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bne _08096354
	adds r0, r4, #0
	bl sub_809673C
	adds r0, r4, #0
	bl sub_8096814
	adds r0, r4, #0
	bl sub_8096774
	b _0809635A
	.align 2, 0
_0809634C: .4byte gCurTask
_08096350: .4byte 0x00007BFF
_08096354:
	adds r0, r4, #0
	bl sub_8096758
_0809635A:
	adds r0, r4, #0
	bl sub_809673C
	adds r0, r4, #0
	bl sub_8095E8C
	adds r0, r4, #0
	bl sub_8096520
	adds r0, r4, #0
	bl sub_8096520
	adds r0, r4, #0
	bl sub_80964F8
	adds r0, r4, #0
	bl sub_80960B8
	adds r0, r4, #0
	bl sub_80967DC
	adds r0, r4, #0
	bl sub_8095EF4
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_8095980
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8096398
sub_8096398: @ 0x08096398
	push {lr}
	adds r2, r0, #0
	ldrb r0, [r2, #1]
	cmp r0, #0
	beq _080963CE
	ldr r1, [r2, #0x30]
	ldr r3, _080963D4 @ =0x000077FF
	cmp r1, r3
	bgt _080963C4
	ldrh r0, [r2, #0x20]
	adds r0, #1
	lsls r0, r0, #8
	adds r0, r1, r0
	str r0, [r2, #0x30]
	movs r1, #0xa0
	lsls r1, r1, #7
	str r1, [r2, #0x34]
	cmp r0, r3
	ble _080963C4
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r2, #0x30]
_080963C4:
	ldr r1, [r2, #0x30]
	movs r0, #0xf0
	lsls r0, r0, #7
	cmp r1, r0
	beq _080963D8
_080963CE:
	movs r0, #0
	b _080963DA
	.align 2, 0
_080963D4: .4byte 0x000077FF
_080963D8:
	movs r0, #1
_080963DA:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80963E0
sub_80963E0: @ 0x080963E0
	push {r4, lr}
	adds r2, r0, #0
	ldrb r4, [r2, #4]
	ldrb r0, [r2, #1]
	cmp r0, #0
	beq _08096416
	ldr r0, [r2, #0x30]
	ldr r3, _0809641C @ =0xFFFFCE00
	cmp r0, r3
	blt _0809640C
	ldrh r1, [r2, #0x20]
	adds r1, #1
	lsls r1, r1, #8
	subs r1, r0, r1
	str r1, [r2, #0x30]
	movs r0, #0x50
	subs r0, r0, r4
	lsls r0, r0, #8
	str r0, [r2, #0x34]
	cmp r1, r3
	bgt _0809640C
	str r3, [r2, #0x30]
_0809640C:
	ldr r1, [r2, #0x30]
	str r1, [r2, #0x38]
	ldr r0, _0809641C @ =0xFFFFCE00
	cmp r1, r0
	beq _08096420
_08096416:
	movs r0, #0
	b _08096422
	.align 2, 0
_0809641C: .4byte 0xFFFFCE00
_08096420:
	movs r0, #1
_08096422:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_8096428
sub_8096428: @ 0x08096428
	push {lr}
	adds r2, r0, #0
	ldrb r3, [r2, #4]
	ldr r1, [r2, #0x30]
	movs r0, #0xf0
	lsls r0, r0, #7
	cmp r1, r0
	bne _0809647A
	movs r1, #0x24
	ldrsh r0, [r2, r1]
	cmp r0, #0
	beq _0809645E
	movs r0, #0x50
	subs r0, r0, r3
	lsls r1, r0, #8
	ldr r3, [r2, #0x34]
	cmp r3, r1
	ble _0809647A
	ldrh r0, [r2, #0x20]
	subs r0, #1
	lsls r0, r0, #8
	subs r0, r3, r0
	str r0, [r2, #0x34]
	cmp r0, r1
	bgt _0809647A
	str r1, [r2, #0x34]
	b _0809647A
_0809645E:
	ldr r1, [r2, #0x34]
	movs r3, #0xa0
	lsls r3, r3, #7
	cmp r1, r3
	bgt _0809647A
	ldrh r0, [r2, #0x20]
	subs r0, #1
	lsls r0, r0, #8
	adds r0, r1, r0
	str r0, [r2, #0x34]
	ldr r1, _0809648C @ =0x00004FFF
	cmp r0, r1
	ble _0809647A
	str r3, [r2, #0x34]
_0809647A:
	ldr r0, [r2, #0x30]
	str r0, [r2, #0x38]
	ldr r0, [r2, #0x34]
	movs r1, #0x80
	lsls r1, r1, #6
	adds r0, r0, r1
	str r0, [r2, #0x3c]
	pop {r0}
	bx r0
	.align 2, 0
_0809648C: .4byte 0x00004FFF

	thumb_func_start sub_8096490
sub_8096490: @ 0x08096490
	push {r4, r5, lr}
	adds r2, r0, #0
	ldrb r4, [r2, #4]
	movs r5, #0
	ldr r0, [r2, #0x30]
	movs r3, #0xf0
	lsls r3, r3, #7
	cmp r0, r3
	ble _080964BC
	ldrh r1, [r2, #0x20]
	adds r1, #7
	lsls r1, r1, #8
	subs r1, r0, r1
	str r1, [r2, #0x30]
	movs r0, #0x8c
	subs r0, r0, r4
	lsls r0, r0, #8
	str r0, [r2, #0x34]
	cmp r1, r3
	bgt _080964D8
	str r3, [r2, #0x30]
	b _080964D8
_080964BC:
	ldrh r0, [r2, #0x20]
	subs r0, #1
	lsls r0, r0, #8
	ldr r1, [r2, #0x34]
	subs r1, r1, r0
	str r1, [r2, #0x34]
	str r3, [r2, #0x30]
	movs r0, #0x50
	subs r0, r0, r4
	lsls r0, r0, #8
	cmp r1, r0
	bgt _080964D8
	str r0, [r2, #0x34]
	movs r5, #1
_080964D8:
	ldr r0, [r2, #0x30]
	str r0, [r2, #0x38]
	ldr r0, [r2, #0x34]
	movs r1, #0x80
	lsls r1, r1, #6
	adds r0, r0, r1
	str r0, [r2, #0x3c]
	cmp r5, #0
	bne _080964EE
	movs r0, #0
	b _080964F0
_080964EE:
	movs r0, #1
_080964F0:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80964F8
sub_80964F8: @ 0x080964F8
	ldr r2, [r0, #0x58]
	movs r1, #0xc0
	lsls r1, r1, #1
	adds r2, r2, r1
	str r2, [r0, #0x58]
	ldr r1, [r0, #0x5c]
	ldr r3, _08096518 @ =0xFFFFFE80
	adds r1, r1, r3
	str r1, [r0, #0x5c]
	ldr r0, _0809651C @ =gBgScrollRegs
	asrs r2, r2, #8
	strh r2, [r0]
	asrs r1, r1, #8
	strh r1, [r0, #2]
	bx lr
	.align 2, 0
_08096518: .4byte 0xFFFFFE80
_0809651C: .4byte gBgScrollRegs

	thumb_func_start sub_8096520
sub_8096520: @ 0x08096520
	push {lr}
	adds r2, r0, #0
	ldr r0, [r2, #0x68]
	subs r0, #0x20
	str r0, [r2, #0x68]
	ldr r1, _08096550 @ =0x00007FFF
	cmp r0, r1
	bgt _08096536
	movs r0, #0x84
	lsls r0, r0, #8
	str r0, [r2, #0x68]
_08096536:
	ldr r0, [r2, #0x70]
	adds r0, #0x20
	str r0, [r2, #0x70]
	movs r1, #0x80
	lsls r1, r1, #8
	cmp r0, r1
	ble _0809654A
	movs r0, #0xf8
	lsls r0, r0, #7
	str r0, [r2, #0x70]
_0809654A:
	pop {r0}
	bx r0
	.align 2, 0
_08096550: .4byte 0x00007FFF

	thumb_func_start sub_8096554
sub_8096554: @ 0x08096554
	push {lr}
	adds r2, r0, #0
	movs r1, #0x24
	ldrsh r0, [r2, r1]
	cmp r0, #0
	bne _08096574
	ldr r0, [r2, #0x64]
	adds r0, #0x80
	str r0, [r2, #0x64]
	movs r1, #0x94
	lsls r1, r1, #6
	cmp r0, r1
	ble _08096584
	movs r0, #0x80
	lsls r0, r0, #6
	b _08096582
_08096574:
	ldr r0, [r2, #0x64]
	subs r0, #0x80
	str r0, [r2, #0x64]
	ldr r1, _08096588 @ =0xFFFFF300
	cmp r0, r1
	bge _08096584
	ldr r0, _0809658C @ =0xFFFFF800
_08096582:
	str r0, [r2, #0x64]
_08096584:
	pop {r0}
	bx r0
	.align 2, 0
_08096588: .4byte 0xFFFFF300
_0809658C: .4byte 0xFFFFF800

	thumb_func_start sub_8096590
sub_8096590: @ 0x08096590
	push {r4, r5, lr}
	mov ip, r0
	movs r4, #0
	movs r3, #0
	movs r5, #0
	ldr r2, _080965F8 @ =gFlags
	ldr r0, [r2]
	movs r1, #4
	orrs r0, r1
	str r0, [r2]
	ldr r1, _080965FC @ =gUnknown_03003C5C
	ldr r0, _08096600 @ =0x04000018
	str r0, [r1]
	ldr r1, _08096604 @ =gUnknown_03003F30
	movs r0, #2
	strb r0, [r1]
	ldr r0, _08096608 @ =gBgOffsetsHBlank
	ldr r2, [r0]
_080965B4:
	lsls r0, r5, #3
	mov r1, ip
	adds r1, #0x78
	adds r1, r1, r0
	ldr r0, [r1]
	asrs r0, r0, #8
	subs r0, #0xf
	cmp r0, #0xf0
	ble _080965C8
	movs r0, #0xf0
_080965C8:
	rsbs r0, r0, #0
	strh r0, [r2]
	adds r2, #2
	cmp r4, #3
	bls _080965E4
	adds r0, r3, #1
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	cmp r3, #0x18
	bne _080965E4
	adds r0, r5, #1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	movs r3, #0
_080965E4:
	adds r0, r4, #1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0x9f
	bls _080965B4
	movs r0, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080965F8: .4byte gFlags
_080965FC: .4byte gUnknown_03003C5C
_08096600: .4byte 0x04000018
_08096604: .4byte gUnknown_03003F30
_08096608: .4byte gBgOffsetsHBlank

	thumb_func_start sub_809660C
sub_809660C: @ 0x0809660C
	push {r4, r5, lr}
	adds r3, r0, #0
	movs r5, #0
	movs r1, #0x24
	ldrsh r0, [r3, r1]
	movs r1, #0x8c
	cmp r0, #0
	bne _0809661E
	movs r1, #0x7c
_0809661E:
	lsls r4, r1, #8
	ldr r0, [r3, #0x30]
	cmp r0, r4
	bgt _0809664C
	ldrh r2, [r3, #0x20]
	adds r2, #8
	lsls r2, r2, #8
	adds r2, r0, r2
	str r2, [r3, #0x30]
	ldrh r1, [r3, #0x20]
	adds r1, #8
	lsls r1, r1, #8
	ldr r0, [r3, #0x48]
	adds r0, r0, r1
	str r0, [r3, #0x48]
	cmp r2, r4
	ble _0809664C
	str r4, [r3, #0x30]
	movs r2, #0xa8
	lsls r2, r2, #6
	adds r0, r4, r2
	str r0, [r3, #0x48]
	movs r5, #1
_0809664C:
	ldr r1, [r3, #0x30]
	movs r2, #0xf0
	lsls r2, r2, #6
	adds r0, r1, r2
	str r0, [r3, #0x38]
	ldrb r0, [r3]
	cmp r0, #0
	beq _08096664
	movs r2, #0x84
	lsls r2, r2, #7
	adds r0, r1, r2
	str r0, [r3, #0x38]
_08096664:
	ldr r0, [r3, #0x34]
	str r0, [r3, #0x3c]
	cmp r5, #0
	bne _08096670
	movs r0, #0
	b _08096672
_08096670:
	movs r0, #1
_08096672:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_8096678
sub_8096678: @ 0x08096678
	push {r4, lr}
	adds r3, r0, #0
	ldrb r4, [r3, #4]
	ldr r2, [r3, #0x2c]
	movs r1, #0xc0
	lsls r1, r1, #5
	cmp r2, r1
	ble _080966BC
	ldrh r0, [r3, #0x20]
	lsls r0, r0, #8
	subs r0, r2, r0
	str r0, [r3, #0x2c]
	cmp r0, r1
	bgt _08096696
	str r1, [r3, #0x2c]
_08096696:
	lsls r1, r4, #8
	ldr r0, [r3, #0x34]
	adds r0, r0, r1
	ldr r2, [r3, #0x2c]
	asrs r1, r2, #1
	subs r0, r0, r1
	str r0, [r3, #0x54]
	ldr r3, _080966B8 @ =gWinRegs
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	asrs r2, r2, #8
	adds r1, r1, r2
	strh r1, [r3, #4]
	movs r0, #0
	b _080966BE
	.align 2, 0
_080966B8: .4byte gWinRegs
_080966BC:
	movs r0, #1
_080966BE:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_80966C4
sub_80966C4: @ 0x080966C4
	push {r4, lr}
	adds r3, r0, #0
	ldrb r4, [r3, #4]
	ldr r2, [r3, #0x2c]
	ldr r1, _08096704 @ =0x00009FFF
	cmp r2, r1
	bgt _0809670C
	ldrh r0, [r3, #0x20]
	lsls r0, r0, #8
	adds r0, r2, r0
	str r0, [r3, #0x2c]
	cmp r0, r1
	ble _080966E4
	movs r0, #0xa0
	lsls r0, r0, #8
	str r0, [r3, #0x2c]
_080966E4:
	lsls r1, r4, #8
	ldr r0, [r3, #0x34]
	adds r0, r0, r1
	ldr r2, [r3, #0x2c]
	asrs r1, r2, #1
	subs r0, r0, r1
	str r0, [r3, #0x54]
	ldr r3, _08096708 @ =gWinRegs
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	asrs r2, r2, #8
	adds r1, r1, r2
	strh r1, [r3, #4]
	movs r0, #0
	b _0809670E
	.align 2, 0
_08096704: .4byte 0x00009FFF
_08096708: .4byte gWinRegs
_0809670C:
	movs r0, #1
_0809670E:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_8096714
sub_8096714: @ 0x08096714
	ldrb r2, [r0, #4]
	lsls r2, r2, #8
	ldr r1, [r0, #0x34]
	adds r1, r1, r2
	ldr r2, _08096734 @ =0xFFFFF400
	adds r1, r1, r2
	str r1, [r0, #0x54]
	ldr r3, _08096738 @ =gWinRegs
	asrs r1, r1, #8
	lsls r2, r1, #8
	adds r2, r2, r1
	ldr r0, [r0, #0x2c]
	asrs r0, r0, #8
	adds r2, r2, r0
	strh r2, [r3, #4]
	bx lr
	.align 2, 0
_08096734: .4byte 0xFFFFF400
_08096738: .4byte gWinRegs

	thumb_func_start sub_809673C
sub_809673C: @ 0x0809673C
	push {lr}
	adds r2, r0, #0
	adds r2, #0xa4
	ldr r1, [r0, #0x30]
	asrs r1, r1, #8
	strh r1, [r2, #0x10]
	ldr r0, [r0, #0x34]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	adds r0, r2, #0
	bl DisplaySprite
	pop {r0}
	bx r0

	thumb_func_start sub_8096758
sub_8096758: @ 0x08096758
	push {lr}
	adds r2, r0, #0
	adds r2, #0xcc
	ldr r1, [r0, #0x38]
	asrs r1, r1, #8
	strh r1, [r2, #0x10]
	ldr r0, [r0, #0x3c]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	adds r0, r2, #0
	bl DisplaySprite
	pop {r0}
	bx r0

	thumb_func_start sub_8096774
sub_8096774: @ 0x08096774
	push {lr}
	adds r2, r0, #0
	adds r2, #0xf4
	ldr r1, [r0, #0x48]
	asrs r1, r1, #8
	strh r1, [r2, #0x10]
	ldr r0, [r0, #0x4c]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	adds r0, r2, #0
	bl DisplaySprite
	pop {r0}
	bx r0

	thumb_func_start sub_8096790
sub_8096790: @ 0x08096790
	push {r4, lr}
	movs r1, #0x8e
	lsls r1, r1, #1
	adds r4, r0, r1
	ldr r1, [r0, #0x60]
	asrs r1, r1, #8
	strh r1, [r4, #0x10]
	ldr r2, [r0, #0x64]
	asrs r2, r2, #8
	strh r2, [r4, #0x12]
	ldr r1, [r0, #0x54]
	asrs r1, r1, #8
	adds r2, r2, r1
	strh r2, [r4, #0x12]
	movs r1, #0x24
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _080967BE
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #4
	orrs r0, r1
	b _080967C4
_080967BE:
	ldr r0, [r4, #8]
	ldr r1, _080967D8 @ =0xFFFFF7FF
	ands r0, r1
_080967C4:
	str r0, [r4, #8]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080967D8: .4byte 0xFFFFF7FF

	thumb_func_start sub_80967DC
sub_80967DC: @ 0x080967DC
	push {r4, lr}
	movs r1, #0xb6
	lsls r1, r1, #1
	adds r4, r0, r1
	ldr r1, [r0, #0x30]
	asrs r1, r1, #8
	adds r1, #0x19
	strh r1, [r4, #0x10]
	ldr r1, [r0, #0x34]
	asrs r1, r1, #8
	strh r1, [r4, #0x12]
	ldr r1, _08096810 @ =gUnknown_080D8ADC
	ldrb r0, [r0, #0x1f]
	ldrb r1, [r1, #2]
	adds r0, r0, r1
	strb r0, [r4, #0x1a]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08096810: .4byte gUnknown_080D8ADC

	thumb_func_start sub_8096814
sub_8096814: @ 0x08096814
	push {r4, lr}
	ldrb r2, [r0, #0x1e]
	movs r1, #0xca
	lsls r1, r1, #1
	adds r4, r0, r1
	ldr r1, [r0, #0x48]
	asrs r1, r1, #8
	adds r1, #0x2d
	strh r1, [r4, #0x10]
	ldr r0, [r0, #0x4c]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	ldr r0, _08096848 @ =gUnknown_080D8ADC
	ldrb r0, [r0, #2]
	adds r2, r2, r0
	strb r2, [r4, #0x1a]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08096848: .4byte gUnknown_080D8ADC
    
	thumb_func_start sub_809684C
sub_809684C: @ 0x0809684C
	bx lr
	.align 2, 0

	thumb_func_start sub_8096850
sub_8096850: @ 0x08096850
	push {r4, r5, lr}
	sub sp, #8
	ldr r1, _080968EC @ =gDispCnt
	movs r2, #0x9a
	lsls r2, r2, #5
	adds r0, r2, #0
	strh r0, [r1]
	ldr r0, _080968F0 @ =sub_8096FA8
	ldr r1, _080968F4 @ =0x00000FB8
	ldr r2, _080968F8 @ =0x00000101
	ldr r3, _080968FC @ =sub_8097C50
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r5, r0
	adds r0, r5, #0
	bl sub_8096B30
	adds r0, r5, #0
	bl sub_8096918
	movs r2, #0
	str r2, [sp, #4]
	ldr r3, _08096900 @ =0x040000D4
	add r0, sp, #4
	str r0, [r3]
	ldr r0, _08096904 @ =gBgCntRegs
	ldrh r1, [r0, #4]
	movs r0, #0xc
	ands r0, r1
	lsls r0, r0, #0xc
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r0, r0, r1
	str r0, [r3, #4]
	ldr r0, _08096908 @ =0x85000010
	str r0, [r3, #8]
	ldr r0, [r3, #8]
	ldr r4, _0809690C @ =gUnknown_03006230
	strb r2, [r4]
	ldr r0, _08096910 @ =gUnknown_03003590
	strb r2, [r0]
	strb r2, [r0, #1]
	movs r1, #0xff
	strb r1, [r0, #2]
	movs r3, #0x40
	strb r3, [r0, #3]
	movs r1, #3
	strb r1, [r4, #1]
	strb r2, [r0, #4]
	strb r2, [r0, #5]
	subs r1, #4
	strb r1, [r0, #6]
	strb r3, [r0, #7]
	strb r2, [r4, #2]
	strb r2, [r0, #8]
	strb r2, [r0, #9]
	strb r1, [r0, #0xa]
	strb r3, [r0, #0xb]
	adds r0, r5, #0
	bl sub_8096EB8
	adds r0, r5, #0
	bl sub_8096C60
	movs r0, #0
	bl sub_80C4C0C
	ldr r1, _08096914 @ =gBgPalette
	strh r0, [r1]
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080968EC: .4byte gDispCnt
_080968F0: .4byte sub_8096FA8
_080968F4: .4byte 0x00000FB8
_080968F8: .4byte 0x00000101
_080968FC: .4byte sub_8097C50
_08096900: .4byte 0x040000D4
_08096904: .4byte gBgCntRegs
_08096908: .4byte 0x85000010
_0809690C: .4byte gUnknown_03006230
_08096910: .4byte gUnknown_03003590
_08096914: .4byte gBgPalette

	thumb_func_start sub_8096918
sub_8096918: @ 0x08096918
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	adds r7, r0, #0
	movs r3, #0
_08096928:
	lsls r0, r3, #2
	adds r0, r0, r3
	lsls r0, r0, #2
	ldr r1, _080969A8 @ =gSaveGame
	adds r0, r0, r1
	adds r0, #0x74
	ldrb r0, [r0]
	cmp r0, #0
	beq _08096940
	ldrb r0, [r7, #0x1b]
	adds r0, #1
	strb r0, [r7, #0x1b]
_08096940:
	movs r5, #0
	movs r2, #0xc2
	adds r2, r2, r7
	mov sl, r2
	adds r0, r7, #0
	adds r0, #0xc3
	str r0, [sp, #4]
	adds r1, r7, #0
	adds r1, #0xc4
	str r1, [sp, #8]
	adds r2, r7, #0
	adds r2, #0xc5
	str r2, [sp, #0xc]
	adds r0, #3
	str r0, [sp, #0x10]
	adds r1, #3
	str r1, [sp, #0x14]
	adds r2, r3, #1
	str r2, [sp]
	adds r6, r7, #0
	adds r6, #0x3e
	ldr r0, _080969A8 @ =gSaveGame
	adds r0, #0x68
	mov ip, r0
	lsls r0, r3, #1
	adds r0, r0, r3
	lsls r0, r0, #2
	mov sb, r0
	subs r1, r3, #1
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	mov r8, r0
	adds r0, r7, #0
	adds r0, #0xd
	adds r4, r0, r3
_08096988:
	cmp r3, #0
	bne _080969AC
	lsls r1, r5, #1
	adds r2, r7, #0
	adds r2, #0x2c
	adds r2, r2, r1
	ldr r0, _080969A8 @ =gSaveGame
	adds r0, #4
	adds r0, r1, r0
	ldrh r0, [r0]
	strh r0, [r2]
	adds r2, r6, r1
	add r1, ip
	ldrh r0, [r1]
	strh r0, [r2]
	b _080969CC
	.align 2, 0
_080969A8: .4byte gSaveGame
_080969AC:
	lsls r0, r5, #1
	mov r2, sb
	adds r1, r0, r2
	adds r1, r6, r1
	add r0, r8
	add r0, ip
	ldrh r0, [r0]
	strh r0, [r1]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r1, _08096A90 @ =0x0000FFFF
	cmp r0, r1
	beq _080969CC
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
_080969CC:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #5
	bls _08096988
	cmp r3, #0
	bne _08096A9C
	ldr r4, _08096A94 @ =gSaveGame
	adds r4, #0x75
	ldrb r0, [r4]
	movs r1, #0xa
	bl __udivsi3
	mov r2, sl
	strb r0, [r2]
	ldrb r0, [r4]
	movs r1, #0xa
	bl __umodsi3
	ldr r1, [sp, #4]
	strb r0, [r1]
	ldr r4, _08096A94 @ =gSaveGame
	adds r4, #0x76
	ldrb r0, [r4]
	movs r1, #0xa
	bl __udivsi3
	ldr r2, [sp, #8]
	strb r0, [r2]
	ldrb r0, [r4]
	movs r1, #0xa
	bl __umodsi3
	ldr r1, [sp, #0xc]
	strb r0, [r1]
	ldr r4, _08096A94 @ =gSaveGame
	adds r4, #0x77
	ldrb r0, [r4]
	movs r1, #0xa
	bl __udivsi3
	ldr r2, [sp, #0x10]
	strb r0, [r2]
	ldrb r0, [r4]
	movs r1, #0xa
	bl __umodsi3
	ldr r1, [sp, #0x14]
	strb r0, [r1]
	ldr r4, _08096A94 @ =gSaveGame
	adds r4, #0x60
	ldrb r0, [r4]
	movs r1, #0xa
	bl __udivsi3
	adds r1, r7, #0
	adds r1, #0x38
	strb r0, [r1]
	ldrb r0, [r4]
	movs r1, #0xa
	bl __umodsi3
	adds r1, r7, #0
	adds r1, #0x39
	strb r0, [r1]
	ldr r4, _08096A94 @ =gSaveGame
	adds r4, #0x61
	ldrb r0, [r4]
	movs r1, #0xa
	bl __udivsi3
	adds r1, r7, #0
	adds r1, #0x3a
	strb r0, [r1]
	ldrb r0, [r4]
	movs r1, #0xa
	bl __umodsi3
	adds r1, r7, #0
	adds r1, #0x3b
	strb r0, [r1]
	ldr r2, _08096A98 @ =gUnknown_03000592
	ldrb r0, [r2]
	movs r1, #0xa
	bl __udivsi3
	adds r1, r7, #0
	adds r1, #0x3c
	strb r0, [r1]
	ldr r1, _08096A98 @ =gUnknown_03000592
	ldrb r0, [r1]
	movs r1, #0xa
	bl __umodsi3
	adds r1, r7, #0
	adds r1, #0x3d
	strb r0, [r1]
	b _08096B0E
	.align 2, 0
_08096A90: .4byte 0x0000FFFF
_08096A94: .4byte gSaveGame
_08096A98: .4byte gUnknown_03000592
_08096A9C:
	lsls r4, r3, #1
	adds r4, r4, r3
	lsls r4, r4, #1
	mov r2, sl
	adds r5, r2, r4
	subs r1, r3, #1
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	ldr r1, _08096B2C @ =gSaveGame
	adds r0, r0, r1
	mov r8, r0
	mov r6, r8
	adds r6, #0x75
	ldrb r0, [r6]
	movs r1, #0xa
	bl __udivsi3
	strb r0, [r5]
	ldr r2, [sp, #4]
	adds r5, r2, r4
	ldrb r0, [r6]
	movs r1, #0xa
	bl __umodsi3
	strb r0, [r5]
	ldr r0, [sp, #8]
	adds r5, r0, r4
	adds r6, #1
	ldrb r0, [r6]
	movs r1, #0xa
	bl __udivsi3
	strb r0, [r5]
	ldr r1, [sp, #0xc]
	adds r5, r1, r4
	ldrb r0, [r6]
	movs r1, #0xa
	bl __umodsi3
	strb r0, [r5]
	ldr r2, [sp, #0x10]
	adds r6, r2, r4
	mov r5, r8
	adds r5, #0x77
	ldrb r0, [r5]
	movs r1, #0xa
	bl __udivsi3
	strb r0, [r6]
	ldr r0, [sp, #0x14]
	adds r4, r0, r4
	ldrb r0, [r5]
	movs r1, #0xa
	bl __umodsi3
	strb r0, [r4]
_08096B0E:
	ldr r1, [sp]
	lsls r0, r1, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0xa
	bhi _08096B1A
	b _08096928
_08096B1A:
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08096B2C: .4byte gSaveGame

	thumb_func_start sub_8096B30
sub_8096B30: @ 0x08096B30
	push {lr}
	mov ip, r0
	ldr r0, _08096C4C @ =gSaveGame
	ldr r1, _08096C50 @ =0x00000366
	adds r0, r0, r1
	ldrb r0, [r0]
	movs r1, #0
	mov r2, ip
	strb r0, [r2]
	movs r0, #0
	strh r1, [r2, #0x1c]
	strh r1, [r2, #0x28]
	strh r1, [r2, #0x2a]
	strb r0, [r2, #1]
	strb r0, [r2, #3]
	strb r0, [r2, #4]
	strh r1, [r2, #0x1e]
	strb r0, [r2, #5]
	strb r0, [r2, #2]
	strb r0, [r2, #0x19]
	strb r0, [r2, #0x1a]
	strb r0, [r2, #0xc]
	strb r0, [r2, #0x1b]
	adds r2, #6
_08096B60:
	adds r0, r2, r1
	strb r1, [r0]
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #5
	bls _08096B60
	movs r1, #0
	mov r2, ip
	adds r2, #0xd
	movs r3, #0
_08096B76:
	adds r0, r2, r1
	strb r3, [r0]
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0xa
	bls _08096B76
	movs r0, #0x8c
	lsls r0, r0, #1
	add r0, ip
	movs r3, #0xc8
	lsls r3, r3, #7
	str r3, [r0]
	movs r0, #0x8e
	lsls r0, r0, #1
	add r0, ip
	movs r2, #0x96
	lsls r2, r2, #7
	str r2, [r0]
	movs r1, #0x88
	lsls r1, r1, #1
	add r1, ip
	movs r0, #0xb6
	lsls r0, r0, #7
	str r0, [r1]
	movs r0, #0x8a
	lsls r0, r0, #1
	add r0, ip
	str r2, [r0]
	movs r1, #0x90
	lsls r1, r1, #1
	add r1, ip
	movs r0, #0xbc
	lsls r0, r0, #7
	str r0, [r1]
	movs r1, #0x92
	lsls r1, r1, #1
	add r1, ip
	movs r0, #0xf0
	lsls r0, r0, #6
	str r0, [r1]
	movs r1, #0x94
	lsls r1, r1, #1
	add r1, ip
	movs r0, #0x80
	lsls r0, r0, #4
	str r0, [r1]
	movs r1, #0x96
	lsls r1, r1, #1
	add r1, ip
	movs r0, #0x98
	lsls r0, r0, #7
	str r0, [r1]
	movs r0, #0
	mov r1, ip
	strh r0, [r1, #0x24]
	strh r0, [r1, #0x26]
	movs r1, #0x9c
	lsls r1, r1, #1
	add r1, ip
	ldr r0, _08096C54 @ =0xFFFF7400
	str r0, [r1]
	movs r1, #0x9e
	lsls r1, r1, #1
	add r1, ip
	movs r0, #0x80
	lsls r0, r0, #5
	str r0, [r1]
	movs r1, #0x98
	lsls r1, r1, #1
	add r1, ip
	ldr r0, _08096C58 @ =0xFFFFEA00
	str r0, [r1]
	movs r0, #0x9a
	lsls r0, r0, #1
	add r0, ip
	str r3, [r0]
	movs r0, #0xa0
	lsls r0, r0, #1
	add r0, ip
	movs r2, #0xf0
	lsls r2, r2, #7
	str r2, [r0]
	movs r1, #0xa2
	lsls r1, r1, #1
	add r1, ip
	movs r0, #0x8e
	lsls r0, r0, #8
	str r0, [r1]
	movs r0, #0xa4
	lsls r0, r0, #1
	add r0, ip
	str r2, [r0]
	movs r1, #0xa6
	lsls r1, r1, #1
	add r1, ip
	movs r0, #0xb8
	lsls r0, r0, #6
	str r0, [r1]
	movs r1, #0x82
	lsls r1, r1, #1
	add r1, ip
	ldr r0, _08096C5C @ =0x06010000
	str r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_08096C4C: .4byte gSaveGame
_08096C50: .4byte 0x00000366
_08096C54: .4byte 0xFFFF7400
_08096C58: .4byte 0xFFFFEA00
_08096C5C: .4byte 0x06010000

	thumb_func_start sub_8096C60
sub_8096C60: @ 0x08096C60
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	mov sl, r0
	ldrb r5, [r0]
	movs r7, #0xa8
	lsls r7, r7, #1
	add r7, sl
	movs r6, #0x82
	lsls r6, r6, #1
	add r6, sl
	ldr r0, [r6]
	str r0, [r7]
	ldr r2, _08096DB4 @ =gUnknown_080D8BF4
	lsls r5, r5, #3
	adds r0, r2, #4
	adds r0, r5, r0
	ldr r1, [r0]
	lsls r1, r1, #5
	ldr r0, [r6]
	adds r0, r0, r1
	str r0, [r6]
	adds r2, r5, r2
	ldrh r0, [r2]
	movs r1, #0
	mov sb, r1
	movs r4, #0
	strh r0, [r7, #0xc]
	ldrb r0, [r2, #2]
	strb r0, [r7, #0x1a]
	movs r0, #0xff
	strb r0, [r7, #0x1b]
	adds r0, #0x39
	add r0, sl
	ldr r0, [r0]
	asrs r0, r0, #8
	strh r0, [r7, #0x10]
	movs r0, #0x9e
	lsls r0, r0, #1
	add r0, sl
	ldr r0, [r0]
	asrs r0, r0, #8
	strh r0, [r7, #0x12]
	movs r0, #0xc0
	strh r0, [r7, #0x14]
	strh r4, [r7, #0xe]
	strh r4, [r7, #0x16]
	movs r0, #0x10
	mov r8, r0
	mov r1, r8
	strb r1, [r7, #0x1c]
	mov r0, sb
	strb r0, [r7, #0x1f]
	str r4, [r7, #8]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	ldr r7, _08096DB8 @ =0x00000E98
	add r7, sl
	ldr r0, [r6]
	str r0, [r7]
	ldr r2, _08096DBC @ =gUnknown_080D8C6C
	ldr r1, [r2, #4]
	lsls r1, r1, #5
	ldr r0, [r6]
	adds r0, r0, r1
	str r0, [r6]
	ldrh r0, [r2]
	strh r0, [r7, #0xc]
	ldrb r0, [r2, #2]
	strb r0, [r7, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r7, #0x1b]
	movs r0, #0xa0
	lsls r0, r0, #1
	add r0, sl
	ldr r0, [r0]
	asrs r0, r0, #8
	strh r0, [r7, #0x10]
	movs r0, #0xa2
	lsls r0, r0, #1
	add r0, sl
	ldr r0, [r0]
	asrs r0, r0, #8
	strh r0, [r7, #0x12]
	strh r4, [r7, #0x14]
	strh r4, [r7, #0xe]
	strh r4, [r7, #0x16]
	mov r1, r8
	strb r1, [r7, #0x1c]
	mov r0, sb
	strb r0, [r7, #0x1f]
	str r4, [r7, #8]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	movs r7, #0xec
	lsls r7, r7, #4
	add r7, sl
	ldr r0, _08096DC0 @ =0x06004000
	str r0, [r7]
	ldr r0, _08096DC4 @ =gUnknown_080D8C24
	adds r5, r5, r0
	ldrh r0, [r5]
	strh r0, [r7, #0xc]
	ldrb r0, [r5, #2]
	strb r0, [r7, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r7, #0x1b]
	strh r4, [r7, #0x10]
	movs r0, #8
	strh r0, [r7, #0x12]
	strh r4, [r7, #0x14]
	strh r4, [r7, #0xe]
	strh r4, [r7, #0x16]
	mov r1, r8
	strb r1, [r7, #0x1c]
	mov r0, sb
	strb r0, [r7, #0x1f]
	movs r0, #0x80
	lsls r0, r0, #8
	str r0, [r7, #8]
	adds r0, r7, #0
	bl sa2__sub_80036E0
	adds r0, r7, #0
	bl sub_80BE46C
	movs r6, #0x82
	lsls r6, r6, #1
	add r6, sl
	ldr r3, _08096DC8 @ =gUnknown_080D8C5C
	movs r5, #0
	ldr r0, [r3, #4]
	lsls r0, r0, #5
	mov r8, r0
_08096D7A:
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #3
	movs r1, #0x9a
	lsls r1, r1, #2
	adds r0, r0, r1
	mov r1, sl
	adds r7, r1, r0
	ldr r0, [r6]
	str r0, [r7]
	ldr r0, [r6]
	add r0, r8
	str r0, [r6]
	lsls r1, r4, #1
	mov r0, sl
	adds r0, #0x2c
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r2, r1, #0
	ldr r0, _08096DCC @ =0x0000FFFF
	cmp r2, r0
	beq _08096DE4
	cmp r2, #0xff
	bls _08096DD4
	strb r1, [r7, #0x1a]
	ldr r0, _08096DD0 @ =gUnknown_080D8C64
	ldrh r0, [r0]
	b _08096DD8
	.align 2, 0
_08096DB4: .4byte gUnknown_080D8BF4
_08096DB8: .4byte 0x00000E98
_08096DBC: .4byte gUnknown_080D8C6C
_08096DC0: .4byte 0x06004000
_08096DC4: .4byte gUnknown_080D8C24
_08096DC8: .4byte gUnknown_080D8C5C
_08096DCC: .4byte 0x0000FFFF
_08096DD0: .4byte gUnknown_080D8C64
_08096DD4:
	strb r1, [r7, #0x1a]
	ldrh r0, [r3]
_08096DD8:
	strh r0, [r7, #0xc]
	mov r1, sl
	ldrb r0, [r1, #0xc]
	adds r0, #1
	strb r0, [r1, #0xc]
	b _08096DEA
_08096DE4:
	strb r5, [r7, #0x1a]
	ldrh r0, [r3]
	strh r0, [r7, #0xc]
_08096DEA:
	movs r0, #0xff
	strb r0, [r7, #0x1b]
	lsls r0, r4, #3
	adds r0, #0x12
	strh r0, [r7, #0x10]
	movs r0, #0x45
	strh r0, [r7, #0x12]
	strh r5, [r7, #0xe]
	strh r5, [r7, #0x16]
	movs r0, #0x10
	strb r0, [r7, #0x1c]
	strb r5, [r7, #0x1f]
	strh r5, [r7, #0x14]
	movs r0, #0x80
	str r0, [r7, #8]
	adds r0, r7, #0
	str r3, [sp, #8]
	bl UpdateSpriteAnimation
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldr r3, [sp, #8]
	cmp r4, #5
	bls _08096D7A
	movs r4, #0
	mov r0, sl
	adds r0, #0x38
	str r0, [sp]
	movs r5, #0x82
	lsls r5, r5, #1
	add r5, sl
	ldr r2, _08096EB4 @ =gUnknown_080D8C54
	movs r6, #0
	ldrb r1, [r2, #2]
	mov sb, r1
	ldr r0, [r2, #4]
	lsls r0, r0, #5
	mov r8, r0
_08096E38:
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #3
	movs r1, #0xbc
	lsls r1, r1, #1
	adds r0, r0, r1
	mov r1, sl
	adds r7, r1, r0
	ldr r0, [r5]
	str r0, [r7]
	ldr r0, [r5]
	add r0, r8
	str r0, [r5]
	ldrh r0, [r2]
	strh r0, [r7, #0xc]
	ldr r1, [sp]
	adds r0, r1, r4
	ldrb r0, [r0]
	add r0, sb
	strb r0, [r7, #0x1a]
	movs r0, #0xff
	strb r0, [r7, #0x1b]
	adds r0, #0x11
	add r0, sl
	ldr r0, [r0]
	asrs r0, r0, #8
	lsls r1, r4, #3
	adds r0, r0, r1
	strh r0, [r7, #0x10]
	movs r0, #0x8a
	lsls r0, r0, #1
	add r0, sl
	ldr r0, [r0]
	asrs r0, r0, #8
	strh r0, [r7, #0x12]
	strh r6, [r7, #0xe]
	strh r6, [r7, #0x16]
	movs r0, #0x10
	strb r0, [r7, #0x1c]
	movs r0, #0
	strb r0, [r7, #0x1f]
	strh r6, [r7, #0x14]
	movs r0, #0x80
	str r0, [r7, #8]
	adds r0, r7, #0
	str r2, [sp, #4]
	bl UpdateSpriteAnimation
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldr r2, [sp, #4]
	cmp r4, #5
	bls _08096E38
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08096EB4: .4byte gUnknown_080D8C54

	thumb_func_start sub_8096EB8
sub_8096EB8: @ 0x08096EB8
	push {r4, r5, r6, lr}
	mov r6, sb
	mov r5, r8
	push {r5, r6}
	mov r8, r0
	ldr r6, _08096F6C @ =gBgCntRegs
	movs r0, #0
	mov sb, r0
	movs r4, #0
	ldr r0, _08096F70 @ =0x00000602
	strh r0, [r6]
	ldr r5, _08096F74 @ =gBgScrollRegs
	strh r4, [r5]
	strh r4, [r5, #2]
	ldr r0, _08096F78 @ =0x00000F38
	add r0, r8
	movs r1, #0xc0
	lsls r1, r1, #0x13
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _08096F7C @ =0x06003000
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	ldr r1, _08096F80 @ =0x0000015F
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	movs r1, #0x20
	strh r1, [r0, #0x26]
	strh r1, [r0, #0x28]
	ldr r1, _08096F84 @ =0x00000F62
	add r1, r8
	mov r2, sb
	strb r2, [r1]
	strh r4, [r0, #0x2e]
	bl DrawBackground
	ldr r0, _08096F88 @ =0x00001007
	strh r0, [r6, #2]
	strh r4, [r5, #4]
	strh r4, [r5, #6]
	ldr r0, _08096F8C @ =0x00001E0D
	strh r0, [r6, #4]
	strh r4, [r5, #8]
	strh r4, [r5, #0xa]
	ldr r0, _08096F90 @ =0x00000F78
	add r0, r8
	ldr r1, _08096F94 @ =0x0600C000
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _08096F98 @ =0x0600F000
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	movs r1, #0xb2
	lsls r1, r1, #1
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	movs r1, #0x1e
	strh r1, [r0, #0x26]
	movs r1, #0x14
	strh r1, [r0, #0x28]
	ldr r1, _08096F9C @ =0x00000FA2
	add r1, r8
	mov r2, sb
	strb r2, [r1]
	movs r1, #2
	strh r1, [r0, #0x2e]
	bl DrawBackground
	ldr r1, _08096FA0 @ =gWinRegs
	mov r2, r8
	ldrh r0, [r2, #0x1e]
	lsrs r0, r0, #8
	ldr r2, _08096FA4 @ =0x00003C3C
	adds r0, r0, r2
	strh r0, [r1, #4]
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08096F6C: .4byte gBgCntRegs
_08096F70: .4byte 0x00000602
_08096F74: .4byte gBgScrollRegs
_08096F78: .4byte 0x00000F38
_08096F7C: .4byte 0x06003000
_08096F80: .4byte 0x0000015F
_08096F84: .4byte 0x00000F62
_08096F88: .4byte 0x00001007
_08096F8C: .4byte 0x00001E0D
_08096F90: .4byte 0x00000F78
_08096F94: .4byte 0x0600C000
_08096F98: .4byte 0x0600F000
_08096F9C: .4byte 0x00000FA2
_08096FA0: .4byte gWinRegs
_08096FA4: .4byte 0x00003C3C

	thumb_func_start sub_8096FA8
sub_8096FA8: @ 0x08096FA8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	ldr r0, _08097034 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r3, r1, r0
	ldrb r4, [r3, #0x19]
	adds r0, r4, #3
	cmp r4, r0
	bge _080970AA
	ldr r0, _08097038 @ =0x0300003E
	adds r0, r1, r0
	str r0, [sp]
	ldr r7, _0809703C @ =0x03000104
	adds r7, r1, r7
	str r7, [sp, #8]
	ldr r6, _08097040 @ =gUnknown_080D8C5C
_08096FD6:
	movs r5, #0
	lsls r0, r4, #4
	lsls r1, r4, #1
	mov sb, r1
	adds r7, r4, #1
	mov sl, r7
	subs r0, r0, r4
	lsls r0, r0, #4
	ldr r1, _08097044 @ =0x000008F8
	adds r0, r0, r1
	adds r0, r0, r3
	mov r8, r0
_08096FEE:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	mov r7, r8
	adds r2, r7, r0
	ldr r1, [sp, #8]
	ldr r0, [r1]
	str r0, [r2]
	ldr r1, [r6, #4]
	lsls r1, r1, #5
	ldr r7, [sp, #8]
	ldr r0, [r7]
	adds r0, r0, r1
	str r0, [r7]
	lsls r1, r5, #1
	mov r7, sb
	adds r0, r7, r4
	lsls r0, r0, #2
	adds r1, r1, r0
	ldr r0, [sp]
	adds r1, r0, r1
	ldrh r1, [r1]
	adds r0, r1, #0
	ldr r7, _08097048 @ =0x0000FFFF
	cmp r0, r7
	beq _0809705C
	cmp r0, #0xff
	bls _08097050
	ldrb r0, [r6, #2]
	adds r0, r1, r0
	strb r0, [r2, #0x1a]
	ldr r0, _0809704C @ =gUnknown_080D8C64
	ldrh r0, [r0]
	strh r0, [r2, #0xc]
	b _08097064
	.align 2, 0
_08097034: .4byte gCurTask
_08097038: .4byte 0x0300003E
_0809703C: .4byte 0x03000104
_08097040: .4byte gUnknown_080D8C5C
_08097044: .4byte 0x000008F8
_08097048: .4byte 0x0000FFFF
_0809704C: .4byte gUnknown_080D8C64
_08097050:
	ldrb r0, [r6, #2]
	adds r0, r1, r0
	strb r0, [r2, #0x1a]
	ldrh r0, [r6]
	strh r0, [r2, #0xc]
	b _08097064
_0809705C:
	ldrh r0, [r6]
	strh r0, [r2, #0xc]
	movs r0, #0
	strb r0, [r2, #0x1a]
_08097064:
	movs r0, #0xff
	strb r0, [r2, #0x1b]
	lsls r0, r5, #3
	adds r0, #0x12
	movs r1, #0
	strh r0, [r2, #0x10]
	movs r0, #0x45
	strh r0, [r2, #0x12]
	strh r1, [r2, #0xe]
	strh r1, [r2, #0x16]
	movs r0, #0x10
	strb r0, [r2, #0x1c]
	strb r1, [r2, #0x1f]
	movs r0, #0x40
	strh r0, [r2, #0x14]
	movs r0, #0x82
	lsls r0, r0, #6
	str r0, [r2, #8]
	adds r0, r2, #0
	str r3, [sp, #4]
	bl UpdateSpriteAnimation
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	ldr r3, [sp, #4]
	cmp r5, #5
	bls _08096FEE
	mov r7, sl
	lsls r0, r7, #0x18
	lsrs r4, r0, #0x18
	ldrb r0, [r3, #0x19]
	adds r0, #3
	cmp r4, r0
	blt _08096FD6
_080970AA:
	ldrb r0, [r3, #0x19]
	adds r0, r4, r0
	strb r0, [r3, #0x19]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #5
	bls _080970C4
	movs r0, #0
	strb r0, [r3, #0x19]
	ldr r0, _080970D4 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080970D8 @ =sub_80970DC
	str r0, [r1, #8]
_080970C4:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080970D4: .4byte gCurTask
_080970D8: .4byte sub_80970DC

	thumb_func_start sub_80970DC
sub_80970DC: @ 0x080970DC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	ldr r0, _080971E8 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r1, r0
	ldrb r4, [r6, #0x19]
	adds r0, r4, #3
	cmp r4, r0
	bge _080971C0
	ldr r0, _080971EC @ =0x030000C2
	adds r0, r1, r0
	str r0, [sp, #4]
	ldr r2, _080971F0 @ =0x03000104
	adds r2, r1, r2
	str r2, [sp, #0x10]
	ldr r7, _080971F4 @ =gUnknown_080D8C54
	mov sl, r7
	mov r0, sl
	ldrb r1, [r0, #2]
	mov r0, sp
	strb r1, [r0]
_08097114:
	movs r5, #0
	lsls r2, r4, #1
	mov sb, r2
	adds r7, r4, #1
	str r7, [sp, #8]
	lsls r3, r4, #4
	subs r0, r3, r4
	lsls r0, r0, #4
	movs r1, #0xd6
	lsls r1, r1, #2
	adds r0, r0, r1
	adds r0, r0, r6
	mov r8, r0
_0809712E:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	add r0, r8
	ldr r2, [sp, #0x10]
	ldr r1, [r2]
	str r1, [r0]
	mov r7, sl
	ldr r2, [r7, #4]
	lsls r2, r2, #5
	ldr r7, [sp, #0x10]
	ldr r1, [r7]
	adds r1, r1, r2
	str r1, [r7]
	mov r2, sl
	ldrh r1, [r2]
	strh r1, [r0, #0xc]
	mov r7, sb
	adds r1, r7, r4
	lsls r1, r1, #1
	adds r1, r5, r1
	ldr r2, [sp, #4]
	adds r1, r2, r1
	ldrb r1, [r1]
	mov r7, sp
	ldrb r7, [r7]
	adds r1, r7, r1
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	movs r2, #0x88
	lsls r2, r2, #1
	adds r1, r6, r2
	ldr r1, [r1]
	asrs r1, r1, #8
	lsls r2, r5, #3
	adds r1, r1, r2
	strh r1, [r0, #0x10]
	movs r7, #0x8a
	lsls r7, r7, #1
	adds r1, r6, r7
	ldr r1, [r1]
	asrs r1, r1, #8
	adds r1, r1, r3
	strh r1, [r0, #0x12]
	movs r1, #0
	strh r1, [r0, #0xe]
	strh r1, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	movs r2, #0
	strb r2, [r0, #0x1f]
	movs r1, #0x40
	strh r1, [r0, #0x14]
	movs r1, #0x82
	lsls r1, r1, #6
	str r1, [r0, #8]
	str r3, [sp, #0xc]
	bl UpdateSpriteAnimation
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	ldr r3, [sp, #0xc]
	cmp r5, #5
	bls _0809712E
	ldr r7, [sp, #8]
	lsls r0, r7, #0x18
	lsrs r4, r0, #0x18
	ldrb r0, [r6, #0x19]
	adds r0, #3
	cmp r4, r0
	blt _08097114
_080971C0:
	ldrb r0, [r6, #0x19]
	adds r0, r4, r0
	strb r0, [r6, #0x19]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #5
	bls _080971D6
	ldr r0, _080971E8 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080971F8 @ =sub_80971FC
	str r0, [r1, #8]
_080971D6:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080971E8: .4byte gCurTask
_080971EC: .4byte 0x030000C2
_080971F0: .4byte 0x03000104
_080971F4: .4byte gUnknown_080D8C54
_080971F8: .4byte sub_80971FC

	thumb_func_start sub_80971FC
sub_80971FC: @ 0x080971FC
	push {r4, r5, r6, r7, lr}
	ldr r6, _0809728C @ =gCurTask
	ldr r0, [r6]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldrh r5, [r4, #0x2a]
	cmp r5, #0
	bne _08097240
	ldr r3, _08097290 @ =gBldRegs
	ldr r0, _08097294 @ =0x00003FFF
	strh r0, [r3]
	ldr r2, _08097298 @ =gDispCnt
	ldrh r0, [r2]
	movs r7, #0xc0
	lsls r7, r7, #7
	adds r1, r7, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _0809729C @ =gWinRegs
	movs r0, #0xff
	strh r0, [r1, #2]
	strh r0, [r1, #6]
	ldr r0, _080972A0 @ =0x00003336
	strh r0, [r1, #8]
	strh r5, [r1, #0xa]
	movs r0, #0x10
	strh r0, [r3, #4]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r4, #0x28]
	movs r0, #1
	strh r0, [r4, #0x2a]
_08097240:
	adds r0, r4, #0
	bl sub_8097710
	adds r0, r4, #0
	bl sub_8097BB4
	adds r0, r4, #0
	bl sub_8097BE8
	adds r0, r4, #0
	bl sub_8097C28
	ldr r2, _0809729C @ =gWinRegs
	ldr r1, _080972A4 @ =0x00003C3C
	adds r0, r1, #0
	ldrh r3, [r4, #0x1e]
	adds r0, r0, r3
	movs r3, #0
	strh r0, [r2, #4]
	ldr r1, _08097290 @ =gBldRegs
	ldrh r0, [r1, #4]
	cmp r0, #0
	beq _080972B4
	ldrh r0, [r4, #0x28]
	lsrs r0, r0, #8
	strh r0, [r1, #4]
	ldr r7, _080972A8 @ =0xFFFFFF00
	adds r0, r7, #0
	ldrh r1, [r4, #0x28]
	adds r0, r0, r1
	strh r0, [r4, #0x28]
	ldr r1, _080972AC @ =gBgScrollRegs
	ldr r0, _080972B0 @ =0x0000FF9C
	strh r0, [r1, #4]
	adds r0, #0x36
	strh r0, [r1, #6]
	b _080972DA
	.align 2, 0
_0809728C: .4byte gCurTask
_08097290: .4byte gBldRegs
_08097294: .4byte 0x00003FFF
_08097298: .4byte gDispCnt
_0809729C: .4byte gWinRegs
_080972A0: .4byte 0x00003336
_080972A4: .4byte 0x00003C3C
_080972A8: .4byte 0xFFFFFF00
_080972AC: .4byte gBgScrollRegs
_080972B0: .4byte 0x0000FF9C
_080972B4:
	strh r0, [r1, #4]
	ldr r0, _080972E0 @ =0x00003316
	strh r0, [r2, #8]
	movs r0, #0xf8
	lsls r0, r0, #5
	strh r0, [r1, #2]
	movs r0, #0xa0
	lsls r0, r0, #1
	strh r0, [r1]
	ldr r2, _080972E4 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #3
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, [r6]
	ldr r0, _080972E8 @ =sub_809738C
	str r0, [r1, #8]
_080972DA:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080972E0: .4byte 0x00003316
_080972E4: .4byte gDispCnt
_080972E8: .4byte sub_809738C

	thumb_func_start sub_80972EC
sub_80972EC: @ 0x080972EC
	push {r4, r5, r6, lr}
	ldr r5, _0809735C @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldrh r0, [r4, #0x2a]
	cmp r0, #0
	beq _08097328
	ldr r1, _08097360 @ =gBldRegs
	movs r3, #0
	ldr r0, _08097364 @ =0x00003FFF
	strh r0, [r1]
	ldr r2, _08097368 @ =gDispCnt
	ldrh r0, [r2]
	movs r6, #0xc0
	lsls r6, r6, #7
	adds r1, r6, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _0809736C @ =gWinRegs
	movs r0, #0xff
	strh r0, [r1, #2]
	strh r0, [r1, #6]
	ldr r0, _08097370 @ =0x00003332
	strh r0, [r1, #8]
	strh r3, [r1, #0xa]
	strh r3, [r4, #0x28]
	strh r3, [r4, #0x2a]
_08097328:
	adds r0, r4, #0
	bl sub_8097710
	adds r0, r4, #0
	bl sub_8097BB4
	adds r0, r4, #0
	bl sub_8097BE8
	adds r0, r4, #0
	bl sub_8097C28
	ldr r1, _08097360 @ =gBldRegs
	ldrh r0, [r1, #4]
	cmp r0, #0xf
	bhi _08097374
	ldrh r0, [r4, #0x28]
	lsrs r0, r0, #8
	strh r0, [r1, #4]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r1, #0
	ldrh r6, [r4, #0x28]
	adds r0, r0, r6
	strh r0, [r4, #0x28]
	b _08097384
	.align 2, 0
_0809735C: .4byte gCurTask
_08097360: .4byte gBldRegs
_08097364: .4byte 0x00003FFF
_08097368: .4byte gDispCnt
_0809736C: .4byte gWinRegs
_08097370: .4byte 0x00003332
_08097374:
	movs r0, #0x10
	strh r0, [r1, #4]
	movs r0, #0xa
	bl LaunchOptionsMenu
	ldr r0, [r5]
	bl TaskDestroy
_08097384:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_809738C
sub_809738C: @ 0x0809738C
	push {r4, r5, r6, r7, lr}
	movs r5, #0
	ldr r7, _080973F8 @ =gCurTask
	ldr r0, [r7]
	ldrh r6, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r6, r0
	adds r0, r4, #0
	bl sub_8097710
	adds r0, r4, #0
	bl sub_8097BB4
	adds r0, r4, #0
	bl sub_8097830
	cmp r0, #1
	bne _080973B4
	movs r5, #1
_080973B4:
	adds r0, r4, #0
	movs r1, #0
	bl sub_809789C
	cmp r0, #1
	bne _080973C6
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_080973C6:
	adds r0, r4, #0
	bl sub_8097C28
	adds r0, r4, #0
	movs r1, #0
	bl sub_8097958
	ldr r2, _080973FC @ =gWinRegs
	ldr r1, _08097400 @ =0x03000134
	adds r0, r6, r1
	ldr r1, [r0]
	asrs r0, r1, #8
	adds r1, r1, r0
	ldrh r0, [r4, #0x1e]
	lsrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2, #4]
	cmp r5, #2
	bne _080973F2
	ldr r1, [r7]
	ldr r0, _08097404 @ =sub_8097474
	str r0, [r1, #8]
_080973F2:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080973F8: .4byte gCurTask
_080973FC: .4byte gWinRegs
_08097400: .4byte 0x03000134
_08097404: .4byte sub_8097474

	thumb_func_start sub_8097408
sub_8097408: @ 0x08097408
	push {r4, r5, r6, r7, lr}
	movs r6, #0
	ldr r7, _08097460 @ =gCurTask
	ldr r0, [r7]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	adds r0, r4, #0
	bl sub_8097710
	adds r0, r4, #0
	bl sub_8097BB4
	adds r0, r4, #0
	movs r1, #1
	bl sub_809789C
	cmp r0, #1
	bne _08097432
	movs r6, #1
_08097432:
	adds r0, r4, #0
	bl sub_8097C28
	ldr r2, _08097464 @ =gWinRegs
	ldr r1, _08097468 @ =0x03000134
	adds r0, r5, r1
	ldr r1, [r0]
	asrs r0, r1, #8
	adds r1, r1, r0
	ldrh r0, [r4, #0x1e]
	lsrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2, #4]
	cmp r6, #0
	beq _0809745A
	ldr r0, _0809746C @ =0x00003332
	strh r0, [r2, #8]
	ldr r1, [r7]
	ldr r0, _08097470 @ =sub_80972EC
	str r0, [r1, #8]
_0809745A:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08097460: .4byte gCurTask
_08097464: .4byte gWinRegs
_08097468: .4byte 0x03000134
_0809746C: .4byte 0x00003332
_08097470: .4byte sub_80972EC

	thumb_func_start sub_8097474
sub_8097474: @ 0x08097474
	push {r4, r5, lr}
	ldr r5, _080974C0 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_8097710
	adds r0, r4, #0
	bl sub_8097BE8
	adds r0, r4, #0
	bl sub_8097BB4
	adds r0, r4, #0
	bl sub_8097C28
	adds r0, r4, #0
	movs r1, #0
	bl sub_8097958
	adds r0, r4, #0
	bl sub_8097ACC
	ldr r0, _080974C4 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #2
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0
	beq _080974CC
	ldr r1, [r5]
	ldr r0, _080974C8 @ =sub_8097408
	b _08097520
	.align 2, 0
_080974C0: .4byte gCurTask
_080974C4: .4byte gPressedKeys
_080974C8: .4byte sub_8097408
_080974CC:
	ldr r1, _080974F4 @ =gRepeatedKeys
	ldrh r3, [r1]
	movs r0, #0xc0
	ands r0, r3
	cmp r0, #0
	beq _08097522
	movs r0, #0x40
	ands r0, r3
	cmp r0, #0
	beq _080974F8
	ldrb r0, [r4, #2]
	cmp r0, #0
	beq _080974F8
	movs r0, #2
	strb r0, [r4, #1]
	strb r2, [r4, #0x19]
	strb r2, [r4, #0x1a]
	ldr r1, [r5]
	b _0809751E
	.align 2, 0
_080974F4: .4byte gRepeatedKeys
_080974F8:
	ldrh r1, [r1]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _08097522
	ldrb r0, [r4, #0x1b]
	ldrb r1, [r4, #2]
	subs r0, r0, r1
	cmp r0, #5
	ble _08097522
	cmp r1, #5
	bhi _08097522
	movs r1, #0
	movs r0, #1
	strb r0, [r4, #1]
	strb r1, [r4, #0x19]
	strb r1, [r4, #0x1a]
	ldr r0, _08097528 @ =gCurTask
	ldr r1, [r0]
_0809751E:
	ldr r0, _0809752C @ =sub_8097530
_08097520:
	str r0, [r1, #8]
_08097522:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08097528: .4byte gCurTask
_0809752C: .4byte sub_8097530

	thumb_func_start sub_8097530
sub_8097530: @ 0x08097530
	push {r4, r5, r6, lr}
	ldr r0, _080975A8 @ =gCurTask
	ldr r0, [r0]
	ldrh r6, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r6, r0
	adds r0, r4, #0
	bl sub_8097710
	adds r0, r4, #0
	bl sub_8097BB4
	adds r0, r4, #0
	bl sub_8097BE8
	adds r0, r4, #0
	bl sub_8097ACC
	adds r0, r4, #0
	bl sub_8097C28
	adds r0, r4, #0
	movs r1, #1
	bl sub_8097958
	ldrb r1, [r4, #1]
	adds r0, r4, #0
	bl sub_8097B54
	cmp r0, #1
	bne _080975F6
	ldrb r0, [r4, #1]
	cmp r0, #1
	bne _080975B0
	ldrb r0, [r4, #2]
	adds r0, #1
	strb r0, [r4, #2]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #6
	bls _08097588
	movs r0, #6
	strb r0, [r4, #2]
_08097588:
	ldrb r5, [r4, #6]
	movs r1, #0
	ldr r0, _080975AC @ =0x03000006
	adds r3, r6, r0
_08097590:
	adds r2, r3, r1
	adds r1, #1
	adds r0, r3, r1
	ldrb r0, [r0]
	strb r0, [r2]
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	cmp r1, #4
	bls _08097590
	strb r5, [r4, #0xb]
	movs r0, #6
	b _080975E4
	.align 2, 0
_080975A8: .4byte gCurTask
_080975AC: .4byte 0x03000006
_080975B0:
	cmp r0, #2
	bne _080975E6
	ldrb r0, [r4, #2]
	subs r0, #1
	strb r0, [r4, #2]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #6
	bls _080975C6
	movs r0, #0
	strb r0, [r4, #2]
_080975C6:
	ldrb r5, [r4, #0xb]
	movs r1, #5
	ldr r0, _080975FC @ =0x03000006
	adds r3, r6, r0
_080975CE:
	adds r2, r3, r1
	subs r1, #1
	adds r0, r3, r1
	ldrb r0, [r0]
	strb r0, [r2]
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	cmp r1, #0
	bne _080975CE
	strb r5, [r4, #6]
	movs r0, #1
_080975E4:
	strb r0, [r4, #0x18]
_080975E6:
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_8097608
	ldr r0, _08097600 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08097604 @ =sub_8097474
	str r0, [r1, #8]
_080975F6:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080975FC: .4byte 0x03000006
_08097600: .4byte gCurTask
_08097604: .4byte sub_8097474

	thumb_func_start sub_8097608
sub_8097608: @ 0x08097608
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r6, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	str r1, [sp]
	movs r4, #0
	ldrb r0, [r6, #0x18]
	mov sl, r0
	ldrb r1, [r6, #2]
	adds r0, r1, r0
	cmp r0, #0xb
	bhi _08097634
	mov r0, sl
	adds r0, #0xff
	adds r0, r1, r0
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_08097634:
	adds r1, r6, #0
	adds r1, #0xd
	adds r0, r1, r5
	strb r4, [r0]
	movs r7, #0
	str r1, [sp, #4]
_08097640:
	ldrb r1, [r6, #2]
	mov r2, sl
	adds r0, r1, r2
	cmp r0, #0xb
	bhi _080976EC
	mov r0, sl
	adds r0, #0xff
	adds r0, r1, r0
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	ldr r0, [sp]
	lsls r3, r0, #4
	subs r1, r3, r0
	lsls r1, r1, #4
	ldr r2, _08097690 @ =0x000008F8
	adds r1, r1, r2
	adds r1, r6, r1
	lsls r2, r7, #2
	adds r0, r2, r7
	lsls r0, r0, #3
	adds r4, r1, r0
	lsls r1, r7, #1
	lsls r0, r5, #1
	adds r0, r0, r5
	lsls r0, r0, #2
	adds r1, r1, r0
	adds r0, r6, #0
	adds r0, #0x3e
	adds r1, r0, r1
	ldrh r0, [r1]
	mov r8, r3
	mov sb, r2
	ldr r2, _08097694 @ =0x0000FFFF
	cmp r0, r2
	beq _080976B6
	cmp r0, #0xff
	bls _0809769C
	ldr r0, _08097698 @ =gUnknown_080D8C64
	b _0809769E
	.align 2, 0
_08097690: .4byte 0x000008F8
_08097694: .4byte 0x0000FFFF
_08097698: .4byte gUnknown_080D8C64
_0809769C:
	ldr r0, _08097708 @ =gUnknown_080D8C5C
_0809769E:
	ldrh r0, [r0]
	strh r0, [r4, #0xc]
	ldrh r0, [r1]
	strb r0, [r4, #0x1a]
	ldr r0, [sp, #4]
	adds r1, r0, r5
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
_080976B6:
	mov r2, r8
	ldr r0, [sp]
	subs r1, r2, r0
	lsls r1, r1, #4
	movs r2, #0xd6
	lsls r2, r2, #2
	adds r1, r1, r2
	adds r1, r6, r1
	mov r2, sb
	adds r0, r2, r7
	lsls r0, r0, #3
	adds r4, r1, r0
	lsls r0, r5, #1
	adds r0, r0, r5
	lsls r0, r0, #1
	adds r0, r7, r0
	adds r1, r6, #0
	adds r1, #0xc2
	adds r1, r1, r0
	ldrb r0, [r1]
	ldr r1, _0809770C @ =gUnknown_080D8C54
	ldrb r1, [r1, #2]
	adds r0, r0, r1
	strb r0, [r4, #0x1a]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
_080976EC:
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #5
	bls _08097640
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08097708: .4byte gUnknown_080D8C5C
_0809770C: .4byte gUnknown_080D8C54

	thumb_func_start sub_8097710
sub_8097710: @ 0x08097710
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r4, r0, #0
	ldrh r1, [r4, #0x1e]
	lsrs r1, r1, #8
	ldr r3, _08097794 @ =gFlags
	ldr r0, [r3]
	movs r2, #4
	orrs r0, r2
	str r0, [r3]
	movs r2, #0x9a
	lsls r2, r2, #1
	adds r0, r4, r2
	ldr r0, [r0]
	asrs r0, r0, #8
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	adds r1, r5, r1
	lsls r1, r1, #0x18
	lsrs r0, r1, #0x18
	mov ip, r0
	movs r2, #0xe8
	lsls r2, r2, #0x18
	adds r1, r1, r2
	lsrs r1, r1, #0x18
	str r1, [sp]
	movs r1, #0x98
	lsls r1, r1, #1
	adds r0, r4, r1
	ldr r0, [r0]
	lsls r0, r0, #8
	lsrs r4, r0, #0x10
	ldr r1, _08097798 @ =gUnknown_03003C5C
	ldr r0, _0809779C @ =0x04000040
	str r0, [r1]
	ldr r1, _080977A0 @ =gUnknown_03003F30
	movs r0, #2
	strb r0, [r1]
	ldr r0, _080977A4 @ =gBgOffsetsHBlank
	ldr r7, [r0]
	movs r3, #0
	ldr r6, _080977A8 @ =gUnknown_080D8C74
	mov sb, r3
	movs r2, #2
	mov r8, r2
	adds r0, r4, #0
	adds r0, #0x1e
	lsls r0, r0, #0x10
	str r0, [sp, #4]
	adds r0, r4, #0
	adds r0, #0xfe
	lsls r0, r0, #0x10
	mov sl, r0
_08097782:
	adds r0, r3, #0
	subs r0, #0x1e
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #3
	bhi _080977AC
	movs r2, #0x78
	movs r1, #0x79
	b _0809780E
	.align 2, 0
_08097794: .4byte gFlags
_08097798: .4byte gUnknown_03003C5C
_0809779C: .4byte 0x04000040
_080977A0: .4byte gUnknown_03003F30
_080977A4: .4byte gBgOffsetsHBlank
_080977A8: .4byte gUnknown_080D8C74
_080977AC:
	cmp r3, r5
	blo _080977D8
	adds r0, r5, #0
	adds r0, #0xc
	cmp r3, r0
	bge _080977D8
	subs r1, r3, r5
	lsls r1, r1, #2
	mov r2, sb
	adds r0, r2, r1
	adds r0, r0, r6
	ldrh r0, [r0]
	adds r0, r4, r0
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	add r1, r8
	adds r1, r1, r6
	ldrh r0, [r1]
	adds r0, r4, r0
	adds r0, #0x2b
	lsls r0, r0, #0x10
	b _0809780C
_080977D8:
	mov r0, ip
	subs r0, #0xc
	cmp r3, r0
	blt _08097806
	cmp r3, ip
	bhs _08097806
	ldr r0, [sp]
	subs r1, r3, r0
	lsls r1, r1, #2
	mov r2, sb
	adds r0, r2, r1
	adds r0, r0, r6
	ldrh r0, [r0]
	adds r0, r4, r0
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	add r1, r8
	adds r1, r1, r6
	ldrh r0, [r1]
	adds r0, r4, r0
	adds r0, #0x2b
	lsls r0, r0, #0x10
	b _0809780C
_08097806:
	ldr r0, [sp, #4]
	lsrs r2, r0, #0x10
	mov r0, sl
_0809780C:
	lsrs r1, r0, #0x10
_0809780E:
	lsls r0, r2, #8
	adds r0, r1, r0
	strh r0, [r7]
	adds r7, #2
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0x9f
	bls _08097782
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8097830
sub_8097830: @ 0x08097830
	push {r4, lr}
	adds r3, r0, #0
	ldrb r4, [r3, #5]
	movs r0, #0x9c
	lsls r0, r0, #1
	adds r2, r3, r0
	ldr r1, _08097870 @ =gUnknown_080D6ED4
	lsls r0, r4, #2
	adds r0, r0, r1
	ldr r1, [r2]
	ldr r0, [r0]
	adds r1, r1, r0
	str r1, [r2]
	cmp r4, #0
	bne _08097854
	ldr r0, _08097874 @ =0x000009FF
	cmp r1, r0
	bgt _08097866
_08097854:
	cmp r4, #1
	bne _0809787C
	movs r1, #0x9c
	lsls r1, r1, #1
	adds r0, r3, r1
	ldr r1, [r0]
	ldr r0, _08097878 @ =0xFFFFF600
	cmp r1, r0
	bgt _0809787C
_08097866:
	ldrb r0, [r3, #5]
	adds r0, #1
	strb r0, [r3, #5]
	b _08097894
	.align 2, 0
_08097870: .4byte gUnknown_080D6ED4
_08097874: .4byte 0x000009FF
_08097878: .4byte 0xFFFFF600
_0809787C:
	cmp r4, #2
	bne _08097894
	movs r0, #0x9c
	lsls r0, r0, #1
	adds r2, r3, r0
	ldr r0, [r2]
	cmp r0, #0
	ble _08097894
	movs r0, #0
	str r0, [r2]
	movs r0, #1
	b _08097896
_08097894:
	movs r0, #0
_08097896:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_809789C
sub_809789C: @ 0x0809789C
	push {r4, r5, lr}
	adds r2, r0, #0
	lsls r1, r1, #0x18
	movs r3, #0
	movs r5, #0xb
	cmp r1, #0
	bne _080978F8
	ldrh r0, [r2, #0x1e]
	ldr r1, _080978CC @ =0x00004FFF
	cmp r0, r1
	bhi _080978D0
	movs r4, #0x80
	lsls r4, r4, #5
	adds r0, r0, r4
	strh r0, [r2, #0x1e]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, r1
	bls _080978D2
	movs r0, #0xa0
	lsls r0, r0, #7
	strh r0, [r2, #0x1e]
	b _080978D2
	.align 2, 0
_080978CC: .4byte 0x00004FFF
_080978D0:
	movs r3, #1
_080978D2:
	movs r0, #0x9a
	lsls r0, r0, #1
	adds r2, r2, r0
	ldr r1, [r2]
	movs r4, #0xf0
	lsls r4, r4, #6
	cmp r1, r4
	ble _08097940
	movs r0, #1
	lsls r0, r5
	subs r0, r1, r0
	str r0, [r2]
	ldr r1, _080978F4 @ =0x00003BFF
	cmp r0, r1
	bgt _08097946
	str r4, [r2]
	b _08097946
	.align 2, 0
_080978F4: .4byte 0x00003BFF
_080978F8:
	ldrh r0, [r2, #0x1e]
	cmp r0, #0
	beq _08097918
	ldr r1, _08097910 @ =0xFFFFF000
	adds r0, r0, r1
	strh r0, [r2, #0x1e]
	lsls r0, r0, #0x10
	ldr r1, _08097914 @ =0x4FFF0000
	cmp r0, r1
	bls _0809791A
	strh r3, [r2, #0x1e]
	b _0809791A
	.align 2, 0
_08097910: .4byte 0xFFFFF000
_08097914: .4byte 0x4FFF0000
_08097918:
	movs r3, #1
_0809791A:
	movs r4, #0x9a
	lsls r4, r4, #1
	adds r1, r2, r4
	ldr r2, [r1]
	ldr r0, _0809793C @ =0x000063FF
	cmp r2, r0
	bgt _08097940
	movs r0, #1
	lsls r0, r5
	adds r0, r2, r0
	str r0, [r1]
	movs r2, #0xc8
	lsls r2, r2, #7
	cmp r0, r2
	ble _08097946
	str r2, [r1]
	b _08097946
	.align 2, 0
_0809793C: .4byte 0x000063FF
_08097940:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
_08097946:
	cmp r3, #2
	bne _0809794E
	movs r0, #1
	b _08097950
_0809794E:
	movs r0, #0
_08097950:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8097958
sub_8097958: @ 0x08097958
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	adds r5, r0, #0
	lsls r1, r1, #0x18
	movs r0, #5
	str r0, [sp]
	cmp r1, #0
	beq _08097974
	movs r1, #6
	str r1, [sp]
_08097974:
	movs r2, #0
	mov sb, r2
	b _08097AAC
_0809797A:
	mov r1, sb
	cmp r1, #0
	beq _0809799C
	ldr r2, _08097998 @ =gSaveGame
	subs r1, #1
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r2
	adds r0, #0x74
	ldrb r1, [r0]
	rsbs r0, r1, #0
	orrs r0, r1
	lsrs r0, r0, #0x1f
	b _0809799E
	.align 2, 0
_08097998: .4byte gSaveGame
_0809799C:
	movs r0, #1
_0809799E:
	mov r2, sb
	adds r2, #1
	str r2, [sp, #8]
	cmp r0, #0
	beq _08097AA4
	movs r7, #0
	adds r0, r5, #6
	str r0, [sp, #4]
	mov r1, sb
	lsls r1, r1, #4
	mov sl, r1
	adds r2, r5, #0
	adds r2, #0xd
	str r2, [sp, #0xc]
_080979BA:
	lsls r0, r7, #2
	mov r8, r0
	mov r1, sb
	cmp r1, #0
	bne _08097A16
	adds r0, r0, r7
	lsls r6, r0, #3
	movs r2, #0xbc
	lsls r2, r2, #1
	adds r0, r6, r2
	adds r4, r5, r0
	movs r0, #0x4b
	strh r0, [r4, #0x12]
	movs r1, #0x8c
	lsls r1, r1, #1
	adds r0, r5, r1
	ldr r0, [r0]
	ldr r1, _08097AC4 @ =gUnknown_080D8CD4
	adds r1, r7, r1
	asrs r0, r0, #8
	ldrb r1, [r1]
	adds r0, r0, r1
	strh r0, [r4, #0x10]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	ldrb r2, [r5, #0xc]
	cmp r7, r2
	bhs _08097A16
	movs r1, #0x9a
	lsls r1, r1, #2
	adds r0, r6, r1
	adds r4, r5, r0
	lsls r1, r7, #3
	lsls r0, r7, #1
	adds r0, #0x12
	adds r1, r1, r0
	strh r1, [r4, #0x10]
	movs r0, #0x45
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl DisplaySprite
_08097A16:
	ldr r3, [sp, #4]
	add r3, sb
	ldrb r1, [r3]
	lsls r0, r1, #4
	subs r0, r0, r1
	lsls r0, r0, #4
	movs r2, #0xd6
	lsls r2, r2, #2
	adds r0, r0, r2
	adds r0, r5, r0
	mov r2, r8
	adds r1, r2, r7
	lsls r2, r1, #3
	adds r4, r0, r2
	movs r1, #0x8c
	lsls r1, r1, #1
	adds r0, r5, r1
	ldr r0, [r0]
	ldr r1, _08097AC4 @ =gUnknown_080D8CD4
	adds r1, r7, r1
	asrs r0, r0, #8
	ldrb r1, [r1]
	adds r0, r0, r1
	strh r0, [r4, #0x10]
	movs r0, #0x8e
	lsls r0, r0, #1
	adds r6, r5, r0
	ldr r0, [r6]
	asrs r0, r0, #8
	add r0, sl
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	str r2, [sp, #0x10]
	str r3, [sp, #0x14]
	bl DisplaySprite
	ldrb r0, [r5, #2]
	add r0, sb
	ldr r1, [sp, #0xc]
	adds r0, r1, r0
	ldr r2, [sp, #0x10]
	ldr r3, [sp, #0x14]
	ldrb r0, [r0]
	cmp r7, r0
	bhs _08097A9A
	ldrb r1, [r3]
	lsls r0, r1, #4
	subs r0, r0, r1
	lsls r0, r0, #4
	ldr r1, _08097AC8 @ =0x000008F8
	adds r0, r0, r1
	adds r0, r5, r0
	adds r4, r0, r2
	lsls r1, r7, #3
	lsls r0, r7, #1
	adds r0, #0x12
	adds r1, r1, r0
	strh r1, [r4, #0x10]
	ldr r0, [r6]
	asrs r0, r0, #8
	add r0, sl
	subs r0, #6
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl DisplaySprite
_08097A9A:
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #5
	bls _080979BA
_08097AA4:
	ldr r2, [sp, #8]
	lsls r0, r2, #0x18
	lsrs r0, r0, #0x18
	mov sb, r0
_08097AAC:
	ldr r0, [sp]
	cmp sb, r0
	bhs _08097AB4
	b _0809797A
_08097AB4:
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08097AC4: .4byte gUnknown_080D8CD4
_08097AC8: .4byte 0x000008F8

	thumb_func_start sub_8097ACC
sub_8097ACC: @ 0x08097ACC
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r2, #0
	ldr r0, _08097B4C @ =0x00000E98
	adds r4, r5, r0
	ldrb r0, [r5, #0x1b]
	ldrb r1, [r5, #2]
	subs r0, r0, r1
	cmp r0, #5
	ble _08097B12
	cmp r1, #5
	bhi _08097B12
	movs r1, #0xa0
	lsls r1, r1, #1
	adds r0, r5, r1
	ldr r0, [r0]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	adds r1, #4
	adds r0, r5, r1
	ldr r0, [r0]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #4
	orrs r0, r1
	str r0, [r4, #8]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	movs r2, #1
_08097B12:
	ldrb r0, [r5, #2]
	cmp r0, #0
	beq _08097B46
	movs r1, #0xa4
	lsls r1, r1, #1
	adds r0, r5, r1
	ldr r0, [r0]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	adds r1, #4
	adds r0, r5, r1
	ldr r0, [r0]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	ldr r0, [r4, #8]
	ldr r1, _08097B50 @ =0xFFFFF7FF
	ands r0, r1
	str r0, [r4, #8]
	cmp r2, #0
	bne _08097B40
	adds r0, r4, #0
	bl UpdateSpriteAnimation
_08097B40:
	adds r0, r4, #0
	bl DisplaySprite
_08097B46:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08097B4C: .4byte 0x00000E98
_08097B50: .4byte 0xFFFFF7FF

	thumb_func_start sub_8097B54
sub_8097B54: @ 0x08097B54
	push {lr}
	adds r2, r0, #0
	ldrb r1, [r2, #1]
	cmp r1, #1
	bne _08097B84
	ldrb r0, [r2, #2]
	cmp r0, #6
	bhi _08097BAE
	movs r0, #0x8e
	lsls r0, r0, #1
	adds r2, r2, r0
	ldr r0, [r2]
	ldr r1, _08097B7C @ =0xFFFFFE00
	adds r0, r0, r1
	str r0, [r2]
	ldr r1, _08097B80 @ =0x00003AFF
	cmp r0, r1
	ble _08097BA8
	b _08097BA4
	.align 2, 0
_08097B7C: .4byte 0xFFFFFE00
_08097B80: .4byte 0x00003AFF
_08097B84:
	cmp r1, #2
	bne _08097BAE
	ldrb r0, [r2, #2]
	cmp r0, #6
	bhi _08097BAE
	movs r0, #0x8e
	lsls r0, r0, #1
	adds r2, r2, r0
	lsls r0, r1, #8
	ldr r1, [r2]
	adds r1, r1, r0
	str r1, [r2]
	movs r0, #0xb6
	lsls r0, r0, #7
	cmp r1, r0
	bgt _08097BA8
_08097BA4:
	movs r0, #0
	b _08097BB0
_08097BA8:
	movs r0, #0x96
	lsls r0, r0, #7
	str r0, [r2]
_08097BAE:
	movs r0, #1
_08097BB0:
	pop {r1}
	bx r1

	thumb_func_start sub_8097BB4
sub_8097BB4: @ 0x08097BB4
	ldr r2, _08097BE0 @ =0xFFFFFF00
	adds r1, r2, #0
	ldrh r3, [r0, #0x24]
	adds r1, r1, r3
	strh r1, [r0, #0x24]
	movs r3, #0x80
	lsls r3, r3, #1
	adds r2, r3, #0
	ldrh r3, [r0, #0x26]
	adds r2, r2, r3
	strh r2, [r0, #0x26]
	ldr r0, _08097BE4 @ =gBgScrollRegs
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x18
	rsbs r1, r1, #0
	strh r1, [r0]
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x18
	rsbs r2, r2, #0
	strh r2, [r0, #2]
	bx lr
	.align 2, 0
_08097BE0: .4byte 0xFFFFFF00
_08097BE4: .4byte gBgScrollRegs

	thumb_func_start sub_8097BE8
sub_8097BE8: @ 0x08097BE8
	push {lr}
	adds r3, r0, #0
	movs r0, #0xa2
	lsls r0, r0, #1
	adds r2, r3, r0
	ldr r0, [r2]
	adds r0, #0x40
	str r0, [r2]
	movs r1, #0x93
	lsls r1, r1, #8
	cmp r0, r1
	ble _08097C06
	movs r0, #0x8e
	lsls r0, r0, #8
	str r0, [r2]
_08097C06:
	movs r0, #0xa6
	lsls r0, r0, #1
	adds r2, r3, r0
	ldr r0, [r2]
	subs r0, #0x40
	str r0, [r2]
	ldr r1, _08097C24 @ =0x000028FF
	cmp r0, r1
	bgt _08097C1E
	movs r0, #0xb8
	lsls r0, r0, #6
	str r0, [r2]
_08097C1E:
	pop {r0}
	bx r0
	.align 2, 0
_08097C24: .4byte 0x000028FF

	thumb_func_start sub_8097C28
sub_8097C28: @ 0x08097C28
	push {lr}
	adds r2, r0, #0
	movs r1, #0xa8
	lsls r1, r1, #1
	adds r0, r2, r1
	movs r3, #0x9c
	lsls r3, r3, #1
	adds r1, r2, r3
	ldr r1, [r1]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	adds r3, #4
	adds r1, r2, r3
	ldr r1, [r1]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	bl DisplaySprite
	pop {r0}
	bx r0

	thumb_func_start sub_8097C50
sub_8097C50: @ 0x08097C50
	bx lr
	.align 2, 0

	thumb_func_start sub_8097C54
sub_8097C54: @ 0x08097C54
	push {r4, r5, r6, lr}
	sub sp, #8
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	ldr r1, _08097CE4 @ =gDispCnt
	ldr r2, _08097CE8 @ =0x00001541
	adds r0, r2, #0
	strh r0, [r1]
	ldr r0, _08097CEC @ =sub_809B0C4
	movs r1, #0x9d
	lsls r1, r1, #2
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r3, _08097CF0 @ =sub_809B758
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	movs r5, #0
	str r5, [sp, #4]
	ldr r3, _08097CF4 @ =0x040000D4
	add r1, sp, #4
	str r1, [r3]
	ldr r1, _08097CF8 @ =gBgCntRegs
	ldrh r2, [r1, #4]
	movs r1, #0xc
	ands r1, r2
	lsls r1, r1, #0xc
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r1, r2
	str r1, [r3, #4]
	ldr r1, _08097CFC @ =0x85000010
	str r1, [r3, #8]
	ldr r1, [r3, #8]
	ldr r4, _08097D00 @ =gUnknown_03006230
	strb r5, [r4, #2]
	ldr r1, _08097D04 @ =gUnknown_03003590
	strb r5, [r1, #8]
	strb r5, [r1, #9]
	movs r2, #0xff
	strb r2, [r1, #0xa]
	movs r3, #0x40
	strb r3, [r1, #0xb]
	strb r5, [r4, #1]
	strb r5, [r1, #4]
	strb r5, [r1, #5]
	movs r2, #1
	rsbs r2, r2, #0
	strb r2, [r1, #6]
	strb r3, [r1, #7]
	strb r5, [r4]
	strb r5, [r1]
	strb r5, [r1, #1]
	strb r2, [r1, #2]
	strb r3, [r1, #3]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	cmp r6, #4
	bne _08097D24
	movs r2, #1
	strb r2, [r4, #8]
	ldr r0, _08097D08 @ =gStageData
	ldrb r0, [r0, #3]
	adds r1, r0, #0
	cmp r1, #0
	bne _08097D0C
	strb r5, [r4, #7]
	b _08097D28
	.align 2, 0
_08097CE4: .4byte gDispCnt
_08097CE8: .4byte 0x00001541
_08097CEC: .4byte sub_809B0C4
_08097CF0: .4byte sub_809B758
_08097CF4: .4byte 0x040000D4
_08097CF8: .4byte gBgCntRegs
_08097CFC: .4byte 0x85000010
_08097D00: .4byte gUnknown_03006230
_08097D04: .4byte gUnknown_03003590
_08097D08: .4byte gStageData
_08097D0C:
	cmp r1, #5
	bne _08097D14
	strb r2, [r4, #7]
	b _08097D28
_08097D14:
	subs r0, #3
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _08097D28
	movs r0, #3
	strb r0, [r4, #7]
	b _08097D28
_08097D24:
	strb r6, [r4, #7]
	strb r5, [r4, #8]
_08097D28:
	adds r0, r4, #0
	bl sub_8097D90
	adds r0, r4, #0
	bl sub_8098080
	adds r0, r4, #0
	bl sub_8097E5C
	bl m4aMPlayAllStop
	movs r0, #3
	bl m4aSongNumStart
	ldr r2, _08097D80 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _08097D84 @ =gWinRegs
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	ldrh r2, [r1, #8]
	movs r0, #0x3f
	orrs r0, r2
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	orrs r0, r2
	strh r0, [r1, #0xa]
	ldr r1, _08097D88 @ =gBldRegs
	ldr r0, _08097D8C @ =0x00003FFF
	strh r0, [r1]
	movs r0, #0x10
	strh r0, [r1, #4]
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08097D80: .4byte gDispCnt
_08097D84: .4byte gWinRegs
_08097D88: .4byte gBldRegs
_08097D8C: .4byte 0x00003FFF

	thumb_func_start sub_8097D90
sub_8097D90: @ 0x08097D90
	push {r4, lr}
	ldr r1, _08097E4C @ =gSaveGame
	ldr r2, _08097E50 @ =0x00000366
	adds r1, r1, r2
	ldrb r1, [r1]
	movs r2, #0
	strb r1, [r0, #0xa]
	strb r2, [r0, #3]
	strb r2, [r0, #4]
	strb r2, [r0, #5]
	movs r1, #2
	strb r1, [r0, #6]
	strb r2, [r0, #0xb]
	movs r1, #0
	strh r2, [r0, #0x14]
	strh r2, [r0, #0x16]
	strb r1, [r0]
	strb r1, [r0, #9]
	movs r1, #1
	strh r1, [r0, #0xe]
	strh r2, [r0, #0x10]
	strh r2, [r0, #0x12]
	movs r1, #0x80
	lsls r1, r1, #5
	strh r1, [r0, #0x18]
	movs r3, #0xf0
	lsls r3, r3, #7
	str r3, [r0, #0x24]
	movs r1, #0x88
	lsls r1, r1, #5
	str r1, [r0, #0x28]
	str r3, [r0, #0x2c]
	str r1, [r0, #0x30]
	str r2, [r0, #0x44]
	str r2, [r0, #0x48]
	str r3, [r0, #0x4c]
	movs r1, #0xaa
	lsls r1, r1, #7
	str r1, [r0, #0x50]
	movs r1, #0xc9
	lsls r1, r1, #8
	str r1, [r0, #0x54]
	movs r1, #0xb0
	lsls r1, r1, #5
	str r1, [r0, #0x58]
	str r3, [r0, #0x3c]
	movs r1, #0xa0
	lsls r1, r1, #7
	str r1, [r0, #0x40]
	str r3, [r0, #0x34]
	str r1, [r0, #0x38]
	str r3, [r0, #0x64]
	movs r3, #0x91
	lsls r3, r3, #8
	str r3, [r0, #0x68]
	movs r1, #0x96
	lsls r1, r1, #9
	str r1, [r0, #0x6c]
	str r3, [r0, #0x70]
	str r2, [r0, #0x5c]
	str r2, [r0, #0x60]
	str r2, [r0, #0x20]
	str r2, [r0, #0x1c]
	ldr r1, _08097E54 @ =gStageData
	ldrb r2, [r1, #6]
	adds r3, r2, #1
	movs r1, #1
	ands r3, r1
	ldr r4, _08097E58 @ =gPlayers
	lsls r1, r2, #2
	adds r1, r1, r2
	lsls r1, r1, #2
	adds r1, r1, r2
	lsls r1, r1, #4
	adds r1, r1, r4
	adds r1, #0x2a
	ldrb r1, [r1]
	lsls r1, r1, #0x1c
	lsrs r1, r1, #0x1c
	strb r1, [r0, #0xc]
	lsls r1, r3, #2
	adds r1, r1, r3
	lsls r1, r1, #2
	adds r1, r1, r3
	lsls r1, r1, #4
	adds r1, r1, r4
	adds r1, #0x2a
	ldrb r1, [r1]
	lsls r1, r1, #0x1c
	lsrs r1, r1, #0x1c
	strb r1, [r0, #0xd]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08097E4C: .4byte gSaveGame
_08097E50: .4byte 0x00000366
_08097E54: .4byte gStageData
_08097E58: .4byte gPlayers

	thumb_func_start sub_8097E5C
sub_8097E5C: @ 0x08097E5C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r7, r0, #0
	ldr r5, _0809805C @ =0x06010000
	adds r0, #0xc4
	str r5, [r0]
	movs r1, #0xb4
	lsls r1, r1, #3
	adds r5, r5, r1
	ldr r2, _08098060 @ =gUnknown_080D8D00
	ldrh r1, [r2]
	movs r3, #0
	mov r8, r3
	movs r4, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x2c]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x30]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r1, #0x40
	strh r1, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	movs r3, #0x10
	strb r3, [r0, #0x1c]
	mov r1, r8
	strb r1, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	adds r0, #0x9c
	str r5, [r0]
	movs r3, #0xc8
	lsls r3, r3, #3
	adds r5, r5, r3
	ldr r2, _08098064 @ =gUnknown_080D8D08
	ldrb r1, [r7, #0xa]
	lsls r1, r1, #6
	adds r1, r1, r2
	ldrh r1, [r1]
	strh r1, [r0, #0xc]
	ldrb r1, [r7, #0xa]
	lsls r1, r1, #6
	adds r1, r1, r2
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x24]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x28]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	mov r3, r8
	strb r3, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	movs r1, #0xc6
	lsls r1, r1, #1
	adds r0, r7, r1
	str r5, [r0]
	adds r5, #0x80
	ldr r1, _08098068 @ =0x00000574
	strh r1, [r0, #0xc]
	movs r1, #5
	strb r1, [r0, #0x1a]
	subs r1, #6
	strb r1, [r0, #0x1b]
	movs r1, #0x78
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x68]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	movs r3, #0x10
	strb r3, [r0, #0x1c]
	mov r1, r8
	strb r1, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	adds r0, #0x74
	str r5, [r7, #0x74]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r5, r5, r3
	ldr r2, _0809806C @ =gUnknown_080D8F08
	ldrh r1, [r2]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x5c]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x60]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	ldr r1, _08098070 @ =0x0000FFC0
	strh r1, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	mov r3, r8
	strb r3, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	adds r0, #0xec
	ldrb r1, [r7, #0xa]
	rsbs r2, r1, #0
	orrs r2, r1
	lsrs r2, r2, #0x1f
	ldr r1, _08098074 @ =gUnknown_080D8F18
	mov sl, r1
	ldrb r1, [r7, #5]
	add r1, sl
	ldrb r1, [r1]
	str r5, [r0]
	movs r3, #0xe0
	lsls r3, r3, #1
	mov sb, r3
	add r5, sb
	ldr r6, _08098078 @ =gUnknown_080D8E80
	lsls r2, r2, #3
	adds r1, r1, r2
	lsls r1, r1, #3
	adds r1, r1, r6
	ldrh r2, [r1]
	strh r2, [r0, #0xc]
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x64]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x68]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	mov r3, r8
	strb r3, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	movs r1, #0x9e
	lsls r1, r1, #1
	adds r0, r7, r1
	ldrb r1, [r7, #0xa]
	rsbs r2, r1, #0
	orrs r2, r1
	lsrs r2, r2, #0x1f
	ldrb r1, [r7, #5]
	add r1, sl
	ldrb r1, [r1]
	str r5, [r0]
	add r5, sb
	lsls r2, r2, #3
	adds r1, r1, r2
	lsls r1, r1, #3
	adds r1, r1, r6
	ldrh r2, [r1]
	strh r2, [r0, #0xc]
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x6c]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x70]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	movs r3, #0x10
	strb r3, [r0, #0x1c]
	mov r1, r8
	strb r1, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	movs r3, #0x8a
	lsls r3, r3, #1
	adds r0, r7, r3
	str r5, [r0]
	movs r1, #0xc0
	lsls r1, r1, #2
	adds r5, r5, r1
	ldr r2, _0809807C @ =gUnknown_080D8EF8
	ldrh r1, [r2]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x64]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x68]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r3, #0x40
	strh r3, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	mov r3, r8
	strb r3, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	str r5, [r7, #0x1c]
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809805C: .4byte 0x06010000
_08098060: .4byte gUnknown_080D8D00
_08098064: .4byte gUnknown_080D8D08
_08098068: .4byte 0x00000574
_0809806C: .4byte gUnknown_080D8F08
_08098070: .4byte 0x0000FFC0
_08098074: .4byte gUnknown_080D8F18
_08098078: .4byte gUnknown_080D8E80
_0809807C: .4byte gUnknown_080D8EF8

	thumb_func_start sub_8098080
sub_8098080: @ 0x08098080
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r7, r0, #0
	ldr r0, _08098174 @ =gBgCntRegs
	mov sb, r0
	movs r1, #0
	mov sl, r1
	movs r4, #0
	ldr r0, _08098178 @ =0x00004E07
	mov r2, sb
	strh r0, [r2]
	ldr r6, _0809817C @ =gBgScrollRegs
	strh r4, [r6]
	strh r4, [r6, #2]
	movs r1, #0xda
	lsls r1, r1, #1
	adds r0, r7, r1
	ldr r1, _08098180 @ =0x06004000
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _08098184 @ =0x06007000
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	ldr r2, _08098188 @ =gUnknown_080D8CDC
	mov r8, r2
	ldrh r1, [r2]
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	movs r1, #0x2d
	strh r1, [r0, #0x26]
	movs r1, #0x14
	strh r1, [r0, #0x28]
	movs r2, #0xef
	lsls r2, r2, #1
	adds r1, r7, r2
	mov r2, sl
	strb r2, [r1]
	strh r4, [r0, #0x2e]
	bl DrawBackground
	ldr r0, _0809818C @ =0x0000030E
	mov r1, sb
	strh r0, [r1, #2]
	strh r4, [r6, #4]
	strh r4, [r6, #6]
	movs r2, #0xfa
	lsls r2, r2, #1
	adds r0, r7, r2
	ldr r1, _08098190 @ =0x0600C000
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _08098194 @ =0x06001800
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	mov r2, r8
	ldrh r1, [r2, #0x16]
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	movs r5, #0x10
	strh r5, [r0, #0x26]
	strh r5, [r0, #0x28]
	ldr r2, _08098198 @ =0x0000021E
	adds r1, r7, r2
	mov r2, sl
	strb r2, [r1]
	movs r1, #1
	strh r1, [r0, #0x2e]
	bl DrawBackground
	ldr r0, _0809819C @ =0x00001B89
	mov r1, sb
	strh r0, [r1, #4]
	strh r4, [r6, #8]
	strh r4, [r6, #0xa]
	movs r2, #0x8d
	lsls r2, r2, #2
	adds r0, r7, r2
	ldr r1, _080981A0 @ =0x06008000
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _080981A4 @ =0x0600D800
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	ldrb r1, [r7, #5]
	adds r1, #5
	lsls r1, r1, #1
	add r1, r8
	ldrh r1, [r1]
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	strh r5, [r0, #0x26]
	strh r5, [r0, #0x28]
	adds r2, #0x2a
	adds r1, r7, r2
	mov r2, sl
	strb r2, [r1]
	movs r1, #6
	strh r1, [r0, #0x2e]
	bl DrawBackground
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08098174: .4byte gBgCntRegs
_08098178: .4byte 0x00004E07
_0809817C: .4byte gBgScrollRegs
_08098180: .4byte 0x06004000
_08098184: .4byte 0x06007000
_08098188: .4byte gUnknown_080D8CDC
_0809818C: .4byte 0x0000030E
_08098190: .4byte 0x0600C000
_08098194: .4byte 0x06001800
_08098198: .4byte 0x0000021E
_0809819C: .4byte 0x00001B89
_080981A0: .4byte 0x06008000
_080981A4: .4byte 0x0600D800

	thumb_func_start sub_80981A8
sub_80981A8: @ 0x080981A8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	ldr r0, _080981D0 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, _080981D4 @ =gStageData
	ldrb r7, [r0, #6]
	cmp r7, #0
	bne _080981D8
	movs r0, #0
	bl sub_8024074
	b _080981DC
	.align 2, 0
_080981D0: .4byte gCurTask
_080981D4: .4byte gStageData
_080981D8:
	bl sub_8023E04
_080981DC:
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	movs r0, #0x10
	ands r0, r2
	ldrb r1, [r4, #9]
	orrs r0, r1
	strb r0, [r4, #9]
	lsls r0, r2, #0x10
	cmp r0, #0
	bge _080981F6
	bl sub_802613C
	b _080983D8
_080981F6:
	ldrb r1, [r4, #7]
	cmp r1, #1
	bne _080982C2
	ldr r4, _08098278 @ =gPlayers
	adds r3, r4, #0
	adds r3, #0x2a
	ldrb r1, [r3]
	movs r2, #0x10
	rsbs r2, r2, #0
	adds r0, r2, #0
	ands r0, r1
	strb r0, [r3]
	adds r5, r4, #0
	adds r5, #0x2b
	ldrb r1, [r5]
	movs r3, #4
	rsbs r3, r3, #0
	adds r0, r3, #0
	ands r0, r1
	movs r1, #1
	orrs r0, r1
	strb r0, [r5]
	movs r0, #0xbd
	lsls r0, r0, #1
	adds r1, r4, r0
	ldrb r0, [r1]
	ands r2, r0
	movs r0, #2
	orrs r2, r0
	strb r2, [r1]
	ldr r0, _0809827C @ =0x0000017B
	adds r1, r4, r0
	ldrb r0, [r1]
	ands r3, r0
	strb r3, [r1]
	movs r3, #0
	ldr r1, _08098280 @ =gCurTask
	mov sl, r1
	ldr r0, _08098284 @ =sub_80983E8
	mov sb, r0
	adds r5, r7, #0
	mov ip, r4
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #2
	adds r0, r0, r5
	lsls r0, r0, #4
	add r0, ip
	adds r7, r0, #0
	adds r7, #0x2b
	movs r1, #0x1d
	rsbs r1, r1, #0
	mov r8, r1
_08098260:
	lsls r0, r3, #0x10
	asrs r2, r0, #0x10
	adds r6, r0, #0
	cmp r5, r2
	bne _08098288
	ldrb r0, [r7]
	mov r1, r8
	ands r1, r0
	movs r0, #4
	orrs r1, r0
	strb r1, [r7]
	b _080982B2
	.align 2, 0
_08098278: .4byte gPlayers
_0809827C: .4byte 0x0000017B
_08098280: .4byte gCurTask
_08098284: .4byte sub_80983E8
_08098288:
	lsls r1, r2, #2
	adds r1, r1, r2
	lsls r1, r1, #2
	adds r1, r1, r2
	lsls r1, r1, #4
	add r1, ip
	adds r4, r1, #0
	adds r4, #0x2b
	ldrb r2, [r4]
	mov r0, r8
	ands r0, r2
	movs r2, #0xc
	orrs r0, r2
	strb r0, [r4]
	adds r1, #0x2a
	lsls r3, r3, #4
	ldrb r2, [r1]
	movs r0, #0xf
	ands r0, r2
	orrs r0, r3
	strb r0, [r1]
_080982B2:
	movs r1, #0x80
	lsls r1, r1, #9
	adds r0, r6, r1
	lsrs r3, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	ble _08098260
	b _080983D0
_080982C2:
	ldr r0, _08098378 @ =gCurTask
	mov sl, r0
	ldr r0, _0809837C @ =sub_80983E8
	mov sb, r0
	cmp r1, #2
	beq _080982D0
	b _080983D0
_080982D0:
	ldr r5, _08098380 @ =gPlayers
	adds r3, r5, #0
	adds r3, #0x2a
	ldrb r1, [r3]
	movs r2, #0x10
	rsbs r2, r2, #0
	adds r0, r2, #0
	ands r0, r1
	strb r0, [r3]
	adds r4, r5, #0
	adds r4, #0x2b
	ldrb r1, [r4]
	movs r3, #4
	rsbs r3, r3, #0
	adds r0, r3, #0
	ands r0, r1
	movs r6, #2
	orrs r0, r6
	strb r0, [r4]
	movs r1, #0xbd
	lsls r1, r1, #1
	adds r4, r5, r1
	ldrb r1, [r4]
	adds r0, r2, #0
	ands r0, r1
	strb r0, [r4]
	ldr r0, _08098384 @ =0x0000017B
	adds r4, r5, r0
	ldrb r0, [r4]
	movs r1, #3
	orrs r0, r1
	strb r0, [r4]
	ldr r1, _08098388 @ =0x000002CA
	adds r4, r5, r1
	ldrb r1, [r4]
	adds r0, r2, #0
	ands r0, r1
	orrs r0, r6
	strb r0, [r4]
	ldr r0, _0809838C @ =0x000002CB
	adds r4, r5, r0
	ldrb r1, [r4]
	adds r0, r3, #0
	ands r0, r1
	strb r0, [r4]
	ldr r0, _08098390 @ =0x0000041A
	adds r1, r5, r0
	ldrb r0, [r1]
	ands r2, r0
	orrs r2, r6
	strb r2, [r1]
	ldr r0, _08098394 @ =0x0000041B
	adds r1, r5, r0
	ldrb r0, [r1]
	ands r3, r0
	movs r0, #1
	orrs r3, r0
	strb r3, [r1]
	movs r3, #0
	mov ip, r5
	lsls r0, r7, #2
	adds r0, r0, r7
	lsls r0, r0, #2
	adds r0, r0, r7
	lsls r0, r0, #4
	add r0, ip
	adds r5, r0, #0
	adds r5, #0x2b
	movs r1, #0x1d
	rsbs r1, r1, #0
	mov r8, r1
_0809835E:
	lsls r0, r3, #0x10
	asrs r2, r0, #0x10
	adds r6, r0, #0
	cmp r7, r2
	bne _08098398
	ldrb r0, [r5]
	mov r1, r8
	ands r1, r0
	movs r0, #4
	orrs r1, r0
	strb r1, [r5]
	b _080983C2
	.align 2, 0
_08098378: .4byte gCurTask
_0809837C: .4byte sub_80983E8
_08098380: .4byte gPlayers
_08098384: .4byte 0x0000017B
_08098388: .4byte 0x000002CA
_0809838C: .4byte 0x000002CB
_08098390: .4byte 0x0000041A
_08098394: .4byte 0x0000041B
_08098398:
	lsls r1, r2, #2
	adds r1, r1, r2
	lsls r1, r1, #2
	adds r1, r1, r2
	lsls r1, r1, #4
	add r1, ip
	adds r4, r1, #0
	adds r4, #0x2b
	ldrb r2, [r4]
	mov r0, r8
	ands r0, r2
	movs r2, #0xc
	orrs r0, r2
	strb r0, [r4]
	adds r1, #0x2a
	lsls r3, r3, #4
	ldrb r2, [r1]
	movs r0, #0xf
	ands r0, r2
	orrs r0, r3
	strb r0, [r1]
_080983C2:
	movs r1, #0x80
	lsls r1, r1, #9
	adds r0, r6, r1
	lsrs r3, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #3
	ble _0809835E
_080983D0:
	mov r1, sl
	ldr r0, [r1]
	mov r1, sb
	str r1, [r0, #8]
_080983D8:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80983E8
sub_80983E8: @ 0x080983E8
	push {r4, r5, lr}
	ldr r0, _08098410 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, _08098414 @ =gStageData
	ldrb r5, [r0, #6]
	ldrb r0, [r4, #7]
	cmp r0, #0
	beq _08098436
	cmp r0, #3
	beq _08098436
	cmp r5, #0
	bne _08098418
	movs r0, #0
	bl sub_8024074
	b _0809841C
	.align 2, 0
_08098410: .4byte gCurTask
_08098414: .4byte gStageData
_08098418:
	bl sub_8023E04
_0809841C:
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	movs r0, #0x10
	ands r0, r2
	ldrb r1, [r4, #9]
	orrs r0, r1
	strb r0, [r4, #9]
	lsls r0, r2, #0x10
	cmp r0, #0
	bge _08098436
	bl sub_802613C
	b _080984FA
_08098436:
	ldrh r0, [r4, #0xe]
	cmp r0, #0
	beq _08098478
	ldr r2, _080984D8 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080984DC @ =gWinRegs
	movs r3, #0
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	ldrh r2, [r1, #8]
	movs r0, #0x3f
	orrs r0, r2
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	orrs r0, r2
	strh r0, [r1, #0xa]
	ldr r1, _080984E0 @ =gBldRegs
	ldr r0, _080984E4 @ =0x00003FFF
	strh r0, [r1]
	movs r0, #0x10
	strh r0, [r1, #4]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r4, #0x10]
	strh r3, [r4, #0xe]
_08098478:
	adds r0, r4, #0
	bl sub_809B13C
	ldrb r0, [r4, #7]
	cmp r0, #0
	beq _08098498
	cmp r0, #3
	beq _08098498
	cmp r0, #1
	bne _08098490
	cmp r5, #0
	beq _08098498
_08098490:
	cmp r0, #2
	bne _080984A4
	cmp r5, #1
	bhi _080984A4
_08098498:
	adds r0, r4, #0
	bl sub_809B284
	adds r0, r4, #0
	bl sub_809AD74
_080984A4:
	adds r0, r4, #0
	bl sub_809ADF0
	adds r0, r4, #0
	bl sub_809AE50
	adds r0, r4, #0
	bl sub_809B69C
	adds r0, r4, #0
	bl sub_809B6C0
	ldr r2, _080984E0 @ =gBldRegs
	ldrh r1, [r2, #4]
	cmp r1, #0
	beq _080984EC
	ldrh r0, [r4, #0x10]
	lsrs r0, r0, #8
	strh r0, [r2, #4]
	ldr r1, _080984E8 @ =0xFFFFFF00
	adds r0, r1, #0
	ldrh r3, [r4, #0x10]
	adds r0, r0, r3
	strh r0, [r4, #0x10]
	b _080984FA
	.align 2, 0
_080984D8: .4byte gDispCnt
_080984DC: .4byte gWinRegs
_080984E0: .4byte gBldRegs
_080984E4: .4byte 0x00003FFF
_080984E8: .4byte 0xFFFFFF00
_080984EC:
	movs r0, #1
	strh r0, [r4, #0xe]
	strh r1, [r2, #4]
	ldr r0, _08098500 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08098504 @ =sub_8098DE4
	str r0, [r1, #8]
_080984FA:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08098500: .4byte gCurTask
_08098504: .4byte sub_8098DE4

	thumb_func_start sub_8098508
sub_8098508: @ 0x08098508
	push {r4, lr}
	ldr r0, _0809856C @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldrh r0, [r4, #0xe]
	cmp r0, #0
	beq _08098550
	ldr r2, _08098570 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _08098574 @ =gWinRegs
	movs r3, #0
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	ldrh r2, [r1, #8]
	movs r0, #0x3f
	orrs r0, r2
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	orrs r0, r2
	strh r0, [r1, #0xa]
	ldr r1, _08098578 @ =gBldRegs
	ldr r0, _0809857C @ =0x00003FFF
	strh r0, [r1]
	strh r3, [r4, #0xe]
	strh r3, [r4, #0x10]
_08098550:
	adds r0, r4, #0
	bl sub_809ADF0
	adds r0, r4, #0
	bl sub_809B6C0
	ldrb r0, [r4, #0xb]
	cmp r0, #0x13
	bls _08098580
	adds r0, r4, #0
	bl sub_809AFC0
	b _08098586
	.align 2, 0
_0809856C: .4byte gCurTask
_08098570: .4byte gDispCnt
_08098574: .4byte gWinRegs
_08098578: .4byte gBldRegs
_0809857C: .4byte 0x00003FFF
_08098580:
	adds r0, r4, #0
	bl sub_809AE50
_08098586:
	ldrb r0, [r4, #0xb]
	cmp r0, #1
	bne _08098592
	adds r0, r4, #0
	bl sub_809AD74
_08098592:
	ldrb r0, [r4, #0xb]
	cmp r0, #5
	bne _080985A6
	adds r0, r4, #0
	bl sub_809B234
	adds r0, r4, #0
	bl sub_809B1E4
	b _080985B6
_080985A6:
	cmp r0, #8
	bne _080985B6
	adds r0, r4, #0
	bl sub_809B184
	adds r0, r4, #0
	bl sub_809B148
_080985B6:
	ldr r1, _080985D4 @ =gBldRegs
	ldrh r0, [r1, #4]
	cmp r0, #0xf
	bhi _080985D8
	ldrh r0, [r4, #0x10]
	lsrs r0, r0, #8
	strh r0, [r1, #4]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r1, #0
	ldrh r3, [r4, #0x10]
	adds r0, r0, r3
	strh r0, [r4, #0x10]
	b _080985F0
	.align 2, 0
_080985D4: .4byte gBldRegs
_080985D8:
	movs r0, #0x10
	strh r0, [r1, #4]
	movs r0, #0x9b
	lsls r0, r0, #9
	str r0, [r4, #0x3c]
	str r0, [r4, #0x34]
	movs r0, #0x1d
	strb r0, [r4, #0xb]
	ldr r0, _080985F8 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080985FC @ =sub_8098600
	str r0, [r1, #8]
_080985F0:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080985F8: .4byte gCurTask
_080985FC: .4byte sub_8098600

	thumb_func_start sub_8098600
sub_8098600: @ 0x08098600
	push {lr}
	ldr r0, _08098620 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r1, r1, r0
	ldrb r0, [r1, #2]
	cmp r0, #3
	beq _0809866E
	cmp r0, #3
	bgt _08098624
	cmp r0, #2
	beq _0809862A
	b _08098680
	.align 2, 0
_08098620: .4byte gCurTask
_08098624:
	cmp r0, #4
	beq _0809867A
	b _08098680
_0809862A:
	ldrb r0, [r1, #8]
	cmp r0, #0
	beq _08098638
	adds r0, r1, #0
	bl sub_80986AC
	b _080986A0
_08098638:
	ldr r0, _0809864C @ =gStageData
	ldrb r0, [r0, #3]
	adds r2, r0, #0
	cmp r2, #0
	bne _08098650
	adds r0, r1, #0
	bl sub_80988B0
	b _08098674
	.align 2, 0
_0809864C: .4byte gStageData
_08098650:
	cmp r2, #5
	bne _0809865C
	adds r0, r1, #0
	bl sub_8098A00
	b _08098674
_0809865C:
	subs r0, #3
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _0809866E
	adds r0, r1, #0
	bl sub_8098B50
	b _08098674
_0809866E:
	adds r0, r1, #0
	bl sub_8098CFC
_08098674:
	cmp r0, #1
	beq _080986A0
	b _08098698
_0809867A:
	bl sub_802613C
	b _08098698
_08098680:
	bl MultiSioStop
	movs r0, #0
	bl MultiSioInit
	ldr r1, _080986A4 @ =gUnknown_03002C68
	movs r0, #0
	strb r0, [r1]
	movs r0, #1
	movs r1, #0
	bl sub_808723C
_08098698:
	ldr r0, _080986A8 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
_080986A0:
	pop {r0}
	bx r0
	.align 2, 0
_080986A4: .4byte gUnknown_03002C68
_080986A8: .4byte gCurTask

	thumb_func_start sub_80986AC
sub_80986AC: @ 0x080986AC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov sl, r0
	bl sub_80003B8
	ldr r1, _080986E4 @ =gStageData
	ldrb r0, [r1, #3]
	cmp r0, #5
	beq _080986C6
	b _080987D4
_080986C6:
	ldrb r2, [r1, #6]
	adds r1, r2, #0
	adds r3, r1, #1
	movs r0, #1
	ands r3, r0
	cmp r1, #0
	bne _080986EC
	ldr r0, _080986E8 @ =gUnknown_080D8F18
	mov r4, sl
	ldrb r1, [r4, #5]
	adds r1, r1, r0
	ldrb r6, [r1]
	ldrb r1, [r4, #6]
	b _080986FA
	.align 2, 0
_080986E4: .4byte gStageData
_080986E8: .4byte gUnknown_080D8F18
_080986EC:
	ldr r0, _080987C4 @ =gUnknown_080D8F18
	mov r6, sl
	ldrb r1, [r6, #6]
	adds r1, r1, r0
	ldrb r6, [r1]
	mov r4, sl
	ldrb r1, [r4, #5]
_080986FA:
	adds r1, r1, r0
	ldrb r1, [r1]
	mov r8, r1
	mov sl, r2
	lsls r1, r2, #2
	add r1, sl
	lsls r1, r1, #2
	add r1, sl
	lsls r1, r1, #4
	ldr r0, _080987C8 @ =gPlayers
	adds r1, r1, r0
	movs r2, #0
	str r2, [r1]
	adds r7, r1, #0
	adds r7, #0x2b
	movs r4, #3
	mov ip, r4
	ldrb r2, [r7]
	movs r5, #4
	rsbs r5, r5, #0
	adds r0, r5, #0
	ands r0, r2
	orrs r0, r3
	strb r0, [r7]
	adds r1, #0x2a
	movs r0, #0xf
	ands r6, r0
	ldrb r2, [r1]
	subs r4, #0x13
	adds r0, r4, #0
	ands r0, r2
	orrs r0, r6
	strb r0, [r1]
	ldrb r1, [r7]
	movs r6, #0x1d
	rsbs r6, r6, #0
	adds r0, r6, #0
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	strb r0, [r7]
	lsls r1, r3, #2
	adds r1, r1, r3
	lsls r1, r1, #2
	adds r1, r1, r3
	lsls r1, r1, #4
	ldr r2, _080987C8 @ =gPlayers
	adds r1, r1, r2
	movs r0, #0
	str r0, [r1]
	adds r7, r1, #0
	adds r7, #0x2b
	ldrb r2, [r7]
	adds r0, r6, #0
	ands r0, r2
	movs r2, #0xc
	orrs r0, r2
	strb r0, [r7]
	adds r1, #0x2a
	lsls r3, r3, #4
	ldrb r2, [r1]
	movs r0, #0xf
	ands r0, r2
	orrs r0, r3
	strb r0, [r1]
	mov r2, sl
	mov r0, ip
	ands r2, r0
	ldrb r0, [r7]
	ands r5, r0
	orrs r5, r2
	strb r5, [r7]
	mov r2, r8
	movs r0, #0xf
	ands r2, r0
	ldrb r0, [r1]
	ands r4, r0
	orrs r4, r2
	strb r4, [r1]
	ldr r1, _080987C8 @ =gPlayers
	movs r2, #0xa8
	lsls r2, r2, #2
	adds r0, r1, r2
	movs r4, #0
	str r4, [r0]
	ldr r0, _080987CC @ =0x000002CB
	adds r2, r1, r0
	ldrb r1, [r2]
	adds r0, r6, #0
	ands r0, r1
	strb r0, [r2]
	ldr r1, _080987C8 @ =gPlayers
	movs r2, #0xfc
	lsls r2, r2, #2
	adds r0, r1, r2
	str r4, [r0]
	ldr r4, _080987D0 @ =gPlayers+0x150*3+0x2B
	ldrb r0, [r4]
	ands r6, r0
	strb r6, [r4]
	b _08098884
	.align 2, 0
_080987C4: .4byte gUnknown_080D8F18
_080987C8: .4byte gPlayers
_080987CC: .4byte 0x000002CB
_080987D0: .4byte gPlayers+0x150*3+0x2B
_080987D4:
	movs r6, #0
	strb r6, [r1, #6]
	ldr r7, _0809889C @ =gPlayers
	movs r0, #0
	str r0, [r7]
	movs r1, #0x2b
	adds r1, r1, r7
	mov sb, r1
	ldrb r0, [r1]
	movs r4, #4
	rsbs r4, r4, #0
	adds r1, r4, #0
	ands r1, r0
	movs r0, #1
	orrs r1, r0
	mov r2, sb
	strb r1, [r2]
	mov r6, sl
	ldrb r0, [r6, #5]
	ldr r2, _080988A0 @ =gUnknown_080D8F18
	adds r0, r0, r2
	ldrb r0, [r0]
	movs r6, #0x2a
	movs r2, #0xf
	ands r2, r0
	ldrb r5, [r6, r7]
	movs r3, #0x10
	rsbs r3, r3, #0
	adds r0, r3, #0
	ands r0, r5
	orrs r0, r2
	strb r0, [r6, r7]
	movs r5, #0x1d
	rsbs r5, r5, #0
	ands r1, r5
	movs r0, #4
	orrs r1, r0
	mov r0, sb
	strb r1, [r0]
	movs r1, #0xa8
	lsls r1, r1, #1
	adds r0, r7, r1
	movs r2, #0
	str r2, [r0]
	ldr r6, _080988A4 @ =0x0000017B
	adds r2, r7, r6
	ldrb r0, [r2]
	ands r4, r0
	strb r4, [r2]
	mov r1, sl
	ldrb r0, [r1, #6]
	ldr r6, _080988A0 @ =gUnknown_080D8F18
	adds r0, r0, r6
	ldrb r0, [r0]
	movs r6, #0xbd
	lsls r6, r6, #1
	adds r1, r7, r6
	movs r6, #0xf
	ands r6, r0
	ldrb r0, [r1]
	ands r3, r0
	orrs r3, r6
	strb r3, [r1]
	ands r4, r5
	movs r0, #8
	orrs r4, r0
	strb r4, [r2]
	movs r1, #0xa8
	lsls r1, r1, #2
	adds r0, r7, r1
	movs r2, #0
	str r2, [r0]
	ldr r4, _080988A8 @ =0x000002CB
	adds r2, r7, r4
	ldrb r1, [r2]
	adds r0, r5, #0
	ands r0, r1
	strb r0, [r2]
	movs r6, #0xfc
	lsls r6, r6, #2
	adds r0, r7, r6
	movs r1, #0
	str r1, [r0]
	ldr r2, _080988AC @ =0x0000041B
	adds r1, r7, r2
	ldrb r0, [r1]
	ands r5, r0
	strb r5, [r1]
_08098884:
	movs r0, #1
	movs r1, #0
	bl sub_8002210
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809889C: .4byte gPlayers
_080988A0: .4byte gUnknown_080D8F18
_080988A4: .4byte 0x0000017B
_080988A8: .4byte 0x000002CB
_080988AC: .4byte 0x0000041B

	thumb_func_start sub_80988B0
sub_80988B0: @ 0x080988B0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov sb, r0
	ldr r4, _080989A8 @ =gStageData
	movs r0, #0
	strb r0, [r4, #6]
	bl sub_800214C
	ldr r1, _080989AC @ =gSaveGame
	movs r2, #0xd9
	lsls r2, r2, #2
	adds r0, r1, r2
	ldrb r0, [r0]
	strb r0, [r4, #1]
	ldr r0, _080989B0 @ =gPlayers
	mov ip, r0
	movs r1, #0
	str r1, [r0]
	movs r2, #0x2b
	add r2, ip
	mov sl, r2
	ldrb r0, [r2]
	movs r4, #4
	rsbs r4, r4, #0
	adds r1, r4, #0
	ands r1, r0
	movs r0, #1
	orrs r1, r0
	strb r1, [r2]
	ldr r0, _080989B4 @ =gUnknown_080D8F18
	mov r8, r0
	mov r2, sb
	ldrb r0, [r2, #5]
	add r0, r8
	ldrb r0, [r0]
	mov r7, ip
	adds r7, #0x2a
	movs r6, #0xf
	adds r2, r6, #0
	ands r2, r0
	ldrb r5, [r7]
	movs r3, #0x10
	rsbs r3, r3, #0
	adds r0, r3, #0
	ands r0, r5
	orrs r0, r2
	strb r0, [r7]
	movs r5, #0x1d
	rsbs r5, r5, #0
	ands r1, r5
	movs r0, #4
	orrs r1, r0
	mov r0, sl
	strb r1, [r0]
	movs r0, #0xa8
	lsls r0, r0, #1
	add r0, ip
	movs r1, #0
	str r1, [r0]
	ldr r2, _080989B8 @ =0x0000017B
	add r2, ip
	ldrb r0, [r2]
	ands r4, r0
	strb r4, [r2]
	mov r1, sb
	ldrb r0, [r1, #6]
	add r0, r8
	ldrb r0, [r0]
	movs r1, #0xbd
	lsls r1, r1, #1
	add r1, ip
	ands r6, r0
	ldrb r0, [r1]
	ands r3, r0
	orrs r3, r6
	strb r3, [r1]
	ands r4, r5
	movs r0, #8
	orrs r4, r0
	strb r4, [r2]
	movs r0, #0xa8
	lsls r0, r0, #2
	add r0, ip
	movs r2, #0
	str r2, [r0]
	ldr r2, _080989BC @ =0x000002CB
	add r2, ip
	ldrb r1, [r2]
	adds r0, r5, #0
	ands r0, r1
	strb r0, [r2]
	movs r0, #0xfc
	lsls r0, r0, #2
	add r0, ip
	movs r1, #0
	str r1, [r0]
	ldr r1, _080989C0 @ =0x0000041B
	add r1, ip
	ldrb r0, [r1]
	ands r5, r0
	strb r5, [r1]
	ldr r1, _080989C4 @ =0x040000D4
	ldr r0, _080989C8 @ =gUnknown_082B5344
	str r0, [r1]
	ldr r0, _080989CC @ =0x06017EC0
	str r0, [r1, #4]
	ldr r0, _080989D0 @ =0x800000A0
	str r0, [r1, #8]
	ldr r0, [r1, #8]
	bl sub_80003B8
	ldr r2, _080989AC @ =gSaveGame
	ldrh r1, [r2, #0x34]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _080989D4
	bl sub_80AD824
	movs r0, #0
	b _080989EE
	.align 2, 0
_080989A8: .4byte gStageData
_080989AC: .4byte gSaveGame
_080989B0: .4byte gPlayers
_080989B4: .4byte gUnknown_080D8F18
_080989B8: .4byte 0x0000017B
_080989BC: .4byte 0x000002CB
_080989C0: .4byte 0x0000041B
_080989C4: .4byte 0x040000D4
_080989C8: .4byte gUnknown_082B5344
_080989CC: .4byte 0x06017EC0
_080989D0: .4byte 0x800000A0
_080989D4:
	ldr r0, _080989FC @ =gSaveGame
	ldrb r1, [r0, #0x12]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #0x11
	movs r1, #0x80
	lsls r1, r1, #0xa
	adds r0, r0, r1
	asrs r0, r0, #0x10
	movs r1, #0
	bl sub_8002210
	movs r0, #1
_080989EE:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080989FC: .4byte gSaveGame

	thumb_func_start sub_8098A00
sub_8098A00: @ 0x08098A00
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r2, r0, #0
	ldr r0, _08098A28 @ =gStageData
	ldrb r4, [r0, #6]
	adds r1, r4, #0
	adds r7, r1, #1
	movs r0, #1
	ands r7, r0
	cmp r1, #0
	bne _08098A30
	ldr r0, _08098A2C @ =gUnknown_080D8F18
	ldrb r1, [r2, #5]
	adds r1, r1, r0
	ldrb r6, [r1]
	ldrb r1, [r2, #6]
	b _08098A3A
	.align 2, 0
_08098A28: .4byte gStageData
_08098A2C: .4byte gUnknown_080D8F18
_08098A30:
	ldr r0, _08098B38 @ =gUnknown_080D8F18
	ldrb r1, [r2, #6]
	adds r1, r1, r0
	ldrb r6, [r1]
	ldrb r1, [r2, #5]
_08098A3A:
	adds r1, r1, r0
	ldrb r1, [r1]
	mov sb, r1
	bl sub_800214C
	ldr r1, _08098B3C @ =gStageData
	ldr r0, _08098B40 @ =gSaveGame
	movs r2, #0xd9
	lsls r2, r2, #2
	adds r0, r0, r2
	ldrb r0, [r0]
	strb r0, [r1, #1]
	ldr r0, _08098B44 @ =gPlayers
	mov r8, r0
	mov sl, r4
	lsls r1, r4, #2
	add r1, sl
	lsls r1, r1, #2
	add r1, sl
	lsls r1, r1, #4
	add r1, r8
	movs r2, #0
	str r2, [r1]
	adds r3, r1, #0
	adds r3, #0x2b
	movs r0, #3
	mov ip, r0
	ldrb r2, [r3]
	movs r5, #4
	rsbs r5, r5, #0
	adds r0, r5, #0
	ands r0, r2
	orrs r0, r7
	strb r0, [r3]
	adds r1, #0x2a
	movs r2, #0xf
	ands r6, r2
	ldrb r2, [r1]
	movs r4, #0x10
	rsbs r4, r4, #0
	adds r0, r4, #0
	ands r0, r2
	orrs r0, r6
	strb r0, [r1]
	ldrb r1, [r3]
	movs r6, #0x1d
	rsbs r6, r6, #0
	adds r0, r6, #0
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	strb r0, [r3]
	adds r3, r7, #0
	lsls r1, r3, #2
	adds r1, r1, r3
	lsls r1, r1, #2
	adds r1, r1, r3
	lsls r1, r1, #4
	add r1, r8
	movs r0, #0
	str r0, [r1]
	adds r7, r1, #0
	adds r7, #0x2b
	ldrb r2, [r7]
	adds r0, r6, #0
	ands r0, r2
	movs r2, #0xc
	orrs r0, r2
	strb r0, [r7]
	adds r1, #0x2a
	lsls r3, r3, #4
	ldrb r2, [r1]
	movs r0, #0xf
	ands r0, r2
	orrs r0, r3
	strb r0, [r1]
	mov r2, sl
	mov r0, ip
	ands r2, r0
	ldrb r0, [r7]
	ands r5, r0
	orrs r5, r2
	strb r5, [r7]
	mov r2, sb
	movs r0, #0xf
	ands r2, r0
	ldrb r0, [r1]
	ands r4, r0
	orrs r4, r2
	strb r4, [r1]
	movs r0, #0xa8
	lsls r0, r0, #2
	add r0, r8
	movs r1, #0
	str r1, [r0]
	ldr r2, _08098B48 @ =0x000002CB
	add r2, r8
	ldrb r1, [r2]
	adds r0, r6, #0
	ands r0, r1
	strb r0, [r2]
	movs r0, #0xfc
	lsls r0, r0, #2
	add r0, r8
	movs r2, #0
	str r2, [r0]
	ldr r0, _08098B4C @ =0x0000041B
	add r8, r0
	mov r1, r8
	ldrb r0, [r1]
	ands r6, r0
	strb r6, [r1]
	bl sub_80003B8
	movs r0, #2
	movs r1, #0
	bl sub_8002210
	movs r0, #1
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08098B38: .4byte gUnknown_080D8F18
_08098B3C: .4byte gStageData
_08098B40: .4byte gSaveGame
_08098B44: .4byte gPlayers
_08098B48: .4byte 0x000002CB
_08098B4C: .4byte 0x0000041B

	thumb_func_start sub_8098B50
sub_8098B50: @ 0x08098B50
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r4, r0, #0
	ldr r0, _08098CAC @ =gStageData
	mov ip, r0
	movs r7, #0
	strb r7, [r0, #6]
	ldr r5, _08098CB0 @ =gPlayers
	str r7, [r5]
	ldr r1, _08098CB4 @ =gPlayers+0x2B
	ldrb r0, [r1]
	movs r1, #4
	rsbs r1, r1, #0
	ands r1, r0
	movs r2, #1
	orrs r1, r2
	ldr r0, _08098CB4 @ =gPlayers+0x2B
	strb r1, [r0]
	ldrb r0, [r4, #5]
	ldr r2, _08098CB8 @ =gUnknown_080D8F18
	adds r0, r0, r2
	ldrb r0, [r0]
	movs r2, #0xf
	ands r2, r0
	ldr r0, _08098CBC @ =gPlayers+0x2A
	ldrb r3, [r0]
	movs r0, #0x10
	rsbs r0, r0, #0
	ands r0, r3
	orrs r0, r2
	ldr r2, _08098CBC @ =gPlayers+0x2A
	strb r0, [r2]
	movs r6, #0x1d
	rsbs r6, r6, #0
	ands r1, r6
	movs r0, #4
	orrs r1, r0
	ldr r2, _08098CB4 @ =gPlayers+0x2B
	strb r1, [r2]
	ldr r0, _08098CC0 @ =gPlayers+0x150*1
	str r7, [r0]
	ldr r1, _08098CC4 @ =0x0000017B
	adds r1, r1, r5
	mov sb, r1
	ldrb r0, [r1]
	movs r1, #4
	rsbs r1, r1, #0
	ands r1, r0
	mov r2, sb
	strb r1, [r2]
	ldrb r0, [r4, #6]
	ldr r2, _08098CB8 @ =gUnknown_080D8F18
	adds r0, r0, r2
	ldrb r0, [r0]
	movs r2, #0xf
	ands r2, r0
	ldr r0, _08098CC8 @ =gPlayers+0x150*1+0x2A
	ldrb r3, [r0]
	movs r0, #0x10
	rsbs r0, r0, #0
	ands r0, r3
	orrs r0, r2
	ldr r2, _08098CC8 @ =gPlayers+0x150*1+0x2A
	strb r0, [r2]
	ands r1, r6
	movs r0, #8
	orrs r1, r0
	mov r2, sb
	strb r1, [r2]
	ldr r0, _08098CCC @ =gPlayers+0x150*2
	str r7, [r0]
	ldr r1, _08098CD0 @ =0x000002CB
	adds r1, r1, r5
	mov sl, r1
	ldrb r1, [r1]
	adds r0, r6, #0
	ands r0, r1
	mov r2, sl
	strb r0, [r2]
	ldr r0, _08098CD4 @ =gPlayers+0x150*3
	str r7, [r0]
	ldr r1, _08098CD8 @ =0x0000041B
	adds r1, r1, r5
	mov r8, r1
	ldrb r1, [r1]
	adds r0, r6, #0
	ands r0, r1
	mov r2, r8
	strb r0, [r2]
	mov r1, ip
	ldrb r0, [r1, #3]
	cmp r0, #3
	bne _08098CDC
	bl sub_800214C
	str r7, [r5]
	ldr r2, _08098CB4 @ =gPlayers+0x2B
	ldrb r0, [r2]
	movs r1, #4
	rsbs r1, r1, #0
	ands r1, r0
	movs r0, #1
	orrs r1, r0
	strb r1, [r2]
	ldrb r0, [r4, #5]
	ldr r2, _08098CB8 @ =gUnknown_080D8F18
	adds r0, r0, r2
	ldrb r0, [r0]
	movs r2, #0xf
	ands r2, r0
	ldr r0, _08098CBC @ =gPlayers+0x2A
	ldrb r3, [r0]
	movs r0, #0x10
	rsbs r0, r0, #0
	ands r0, r3
	orrs r0, r2
	ldr r2, _08098CBC @ =gPlayers+0x2A
	strb r0, [r2]
	ands r1, r6
	movs r0, #4
	orrs r1, r0
	ldr r2, _08098CB4 @ =gPlayers+0x2B
	strb r1, [r2]
	ldr r0, _08098CC0 @ =gPlayers+0x150*1
	str r7, [r0]
	mov r1, sb
	ldrb r0, [r1]
	movs r1, #4
	rsbs r1, r1, #0
	ands r1, r0
	mov r2, sb
	strb r1, [r2]
	ldrb r0, [r4, #6]
	ldr r2, _08098CB8 @ =gUnknown_080D8F18
	adds r0, r0, r2
	ldrb r0, [r0]
	movs r2, #0xf
	ands r2, r0
	ldr r0, _08098CC8 @ =gPlayers+0x150*1+0x2A
	ldrb r3, [r0]
	movs r0, #0x10
	rsbs r0, r0, #0
	ands r0, r3
	orrs r0, r2
	ldr r2, _08098CC8 @ =gPlayers+0x150*1+0x2A
	strb r0, [r2]
	ands r1, r6
	movs r0, #8
	orrs r1, r0
	mov r2, sb
	strb r1, [r2]
	ldr r0, _08098CCC @ =gPlayers+0x150*2
	str r7, [r0]
	mov r2, sl
	ldrb r1, [r2]
	adds r0, r6, #0
	ands r0, r1
	strb r0, [r2]
	ldr r0, _08098CD4 @ =gPlayers+0x150*3
	str r7, [r0]
	mov r2, r8
	ldrb r1, [r2]
	adds r0, r6, #0
	ands r0, r1
	strb r0, [r2]
	bl sub_80003B8
	movs r0, #1
	bl sub_80961E4
	b _08098CEA
	.align 2, 0
_08098CAC: .4byte gStageData
_08098CB0: .4byte gPlayers
_08098CB4: .4byte gPlayers+0x2B
_08098CB8: .4byte gUnknown_080D8F18
_08098CBC: .4byte gPlayers+0x2A
_08098CC0: .4byte gPlayers+0x150*1
_08098CC4: .4byte 0x0000017B
_08098CC8: .4byte gPlayers+0x150*1+0x2A
_08098CCC: .4byte gPlayers+0x150*2
_08098CD0: .4byte 0x000002CB
_08098CD4: .4byte gPlayers+0x150*3
_08098CD8: .4byte 0x0000041B
_08098CDC:
	cmp r0, #4
	bne _08098CEA
	bl sub_80003B8
	movs r0, #2
	bl sub_80961E4
_08098CEA:
	movs r0, #0
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8098CFC
sub_8098CFC: @ 0x08098CFC
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r7, r0, #0
	ldr r0, _08098D84 @ =gStageData
	mov sb, r0
	ldrb r4, [r0, #6]
	adds r6, r4, #1
	movs r0, #1
	ands r6, r0
	movs r0, #0x6b
	bl m4aSongNumStart
	ldr r1, _08098D88 @ =gPlayers
	mov r8, r1
	lsls r1, r4, #2
	adds r1, r1, r4
	lsls r1, r1, #2
	adds r1, r1, r4
	lsls r1, r1, #4
	add r1, r8
	ldrb r0, [r7, #0xc]
	adds r1, #0x2a
	movs r5, #0xf
	adds r3, r5, #0
	ands r3, r0
	ldrb r4, [r1]
	movs r2, #0x10
	rsbs r2, r2, #0
	adds r0, r2, #0
	ands r0, r4
	orrs r0, r3
	strb r0, [r1]
	lsls r0, r6, #2
	adds r0, r0, r6
	lsls r0, r0, #2
	adds r0, r0, r6
	lsls r0, r0, #4
	add r0, r8
	ldrb r1, [r7, #0xd]
	adds r0, #0x2a
	ands r5, r1
	ldrb r1, [r0]
	ands r2, r1
	orrs r2, r5
	strb r2, [r0]
	ldrb r4, [r7, #8]
	cmp r4, #0
	bne _08098D74
	bl MultiSioStop
	movs r0, #0
	bl MultiSioInit
	ldr r0, _08098D8C @ =gUnknown_03002C68
	strb r4, [r0]
	ldrb r0, [r7, #8]
	cmp r0, #0
	beq _08098D90
_08098D74:
	bl sub_80003B8
	movs r0, #1
	movs r1, #0
	bl sub_8002210
	movs r0, #1
	b _08098DD6
	.align 2, 0
_08098D84: .4byte gStageData
_08098D88: .4byte gPlayers
_08098D8C: .4byte gUnknown_03002C68
_08098D90:
	ldrb r0, [r7, #7]
	cmp r0, #0
	bne _08098DBA
	mov r1, sb
	ldrb r0, [r1, #3]
	cmp r0, #3
	bne _08098DA2
	movs r0, #0
	b _08098DA8
_08098DA2:
	cmp r0, #4
	bne _08098DB0
	movs r0, #1
_08098DA8:
	movs r1, #5
	bl sub_808723C
	b _08098DD4
_08098DB0:
	movs r0, #0
	movs r1, #0
	bl sub_808723C
	b _08098DD4
_08098DBA:
	cmp r0, #1
	bne _08098DC8
	movs r0, #1
	movs r1, #4
	bl sub_808723C
	b _08098DD4
_08098DC8:
	cmp r0, #3
	bne _08098DD4
	movs r0, #0
	movs r1, #5
	bl sub_808723C
_08098DD4:
	movs r0, #0
_08098DD6:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8098DE4
sub_8098DE4: @ 0x08098DE4
	push {r4, r5, r6, lr}
	ldr r0, _08098E60 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, _08098E64 @ =gStageData
	ldrb r5, [r0, #6]
	adds r0, r4, #0
	bl sub_809B13C
	adds r0, r4, #0
	bl sub_809ADF0
	adds r0, r4, #0
	bl sub_809AE50
	adds r0, r4, #0
	bl sub_809B69C
	adds r0, r4, #0
	bl sub_809B6C0
	ldrb r0, [r4, #7]
	cmp r0, #0
	beq _08098E2E
	cmp r0, #3
	beq _08098E2E
	cmp r0, #1
	bne _08098E26
	cmp r5, #0
	beq _08098E2E
_08098E26:
	cmp r0, #2
	bne _08098E3A
	cmp r5, #1
	bhi _08098E3A
_08098E2E:
	adds r0, r4, #0
	bl sub_809B284
	adds r0, r4, #0
	bl sub_809AD74
_08098E3A:
	ldr r2, _08098E68 @ =gDispCnt
	ldrh r1, [r2]
	ldr r0, _08098E6C @ =0x0000FDFF
	ands r0, r1
	strh r0, [r2]
	ldrb r0, [r4, #7]
	cmp r0, #0
	beq _08098EB2
	cmp r0, #3
	beq _08098E8E
	cmp r0, #1
	bne _08098E82
	cmp r5, #0
	bne _08098E70
	ldrb r0, [r4, #4]
	bl sub_8024074
	b _08098E74
	.align 2, 0
_08098E60: .4byte gCurTask
_08098E64: .4byte gStageData
_08098E68: .4byte gDispCnt
_08098E6C: .4byte 0x0000FDFF
_08098E70:
	bl sub_8023E04
_08098E74:
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	movs r0, #0x10
	ands r0, r6
	ldrb r1, [r4, #9]
	orrs r0, r1
	strb r0, [r4, #9]
_08098E82:
	lsls r0, r6, #0x10
	cmp r0, #0
	bge _08098E8E
	bl sub_802613C
	b _08098FE2
_08098E8E:
	ldrb r0, [r4, #7]
	adds r1, r0, #0
	cmp r1, #0
	beq _08098EB2
	cmp r1, #3
	beq _08098EAA
	cmp r1, #1
	bne _08098EA2
	cmp r5, #0
	beq _08098EAA
_08098EA2:
	cmp r1, #2
	bne _08098F5C
	cmp r5, #1
	bhi _08098F5C
_08098EAA:
	cmp r0, #0
	beq _08098EB2
	cmp r0, #3
	bne _08098EE0
_08098EB2:
	ldr r0, _08098ED4 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08098EE0
	movs r0, #0x6b
	bl m4aSongNumStart
	movs r0, #3
	strb r0, [r4, #2]
	movs r0, #2
	strb r0, [r4, #0xb]
	ldr r0, _08098ED8 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08098EDC @ =sub_8098508
	b _08098FE0
	.align 2, 0
_08098ED4: .4byte gPressedKeys
_08098ED8: .4byte gCurTask
_08098EDC: .4byte sub_8098508
_08098EE0:
	ldr r0, _08098EFC @ =gRepeatedKeys
	ldrh r1, [r0]
	movs r0, #0x30
	ands r0, r1
	cmp r0, #0
	beq _08098F00
	movs r0, #0x67
	bl m4aSongNumStart
	adds r0, r4, #0
	bl sub_80992A8
	b _08098FDA
	.align 2, 0
_08098EFC: .4byte gRepeatedKeys
_08098F00:
	ldr r0, _08098F40 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08098FE2
	ldr r0, _08098F44 @ =gUnknown_080D8F18
	ldrb r3, [r4, #5]
	adds r0, r3, r0
	ldrb r1, [r0]
	ldr r2, _08098F48 @ =gSaveGame
	ldr r0, _08098F4C @ =gUnknown_080D946D
	adds r1, r1, r0
	ldrb r2, [r2, #0x10]
	ldrb r0, [r1]
	ands r0, r2
	cmp r0, #0
	beq _08098FE2
	ldr r1, _08098F50 @ =gUnknown_080D9022
	lsls r0, r3, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	bl m4aSongNumStart
	adds r0, r4, #0
	bl sub_809B5D0
	ldr r0, _08098F54 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08098F58 @ =sub_8099300
	b _08098FE0
	.align 2, 0
_08098F40: .4byte gPressedKeys
_08098F44: .4byte gUnknown_080D8F18
_08098F48: .4byte gSaveGame
_08098F4C: .4byte gUnknown_080D946D
_08098F50: .4byte gUnknown_080D9022
_08098F54: .4byte gCurTask
_08098F58: .4byte sub_8099300
_08098F5C:
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bne _08098FE2
	lsls r0, r6, #0x10
	asrs r2, r0, #0x10
	movs r3, #0x10
	adds r0, r2, #0
	ands r0, r3
	cmp r0, #0
	bne _08098F7C
	ldrb r1, [r4, #9]
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq _08098F94
_08098F7C:
	adds r0, r4, #0
	bl sub_809B5D0
	ldr r0, _08098F8C @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08098F90 @ =sub_8099300
	b _08098FE0
	.align 2, 0
_08098F8C: .4byte gCurTask
_08098F90: .4byte sub_8099300
_08098F94:
	ldrb r1, [r4, #3]
	subs r0, r2, #1
	cmp r1, r0
	beq _08098FE2
	cmp r2, #0
	ble _08098FE2
	cmp r2, #5
	bgt _08098FE2
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r1, r2
	bge _08098FBC
	movs r3, #1
	cmp r1, #1
	bgt _08098FCA
	adds r0, r1, #2
	cmp r0, r2
	bge _08098FCA
	movs r3, #2
	b _08098FCA
_08098FBC:
	movs r3, #2
	cmp r1, #2
	ble _08098FCA
	subs r0, r1, #2
	cmp r0, r2
	ble _08098FCA
	movs r3, #1
_08098FCA:
	cmp r3, #1
	bne _08098FD2
	movs r0, #0
	b _08098FD4
_08098FD2:
	movs r0, #1
_08098FD4:
	strb r0, [r4, #1]
	subs r0, r6, #1
	strb r0, [r4, #4]
_08098FDA:
	ldr r0, _08098FE8 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08098FEC @ =sub_8098FF0
_08098FE0:
	str r0, [r1, #8]
_08098FE2:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08098FE8: .4byte gCurTask
_08098FEC: .4byte sub_8098FF0

	thumb_func_start sub_8098FF0
sub_8098FF0: @ 0x08098FF0
	push {r4, r5, lr}
	ldr r0, _08099020 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	movs r5, #0
	ldr r0, _08099024 @ =gStageData
	ldrb r1, [r0, #6]
	ldrb r0, [r4, #7]
	cmp r0, #0
	beq _08099046
	cmp r0, #3
	beq _08099046
	cmp r0, #1
	bne _0809903A
	cmp r1, #0
	bne _08099028
	ldrb r0, [r4, #4]
	bl sub_8024074
	b _0809902C
	.align 2, 0
_08099020: .4byte gCurTask
_08099024: .4byte gStageData
_08099028:
	bl sub_8023E04
_0809902C:
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	movs r0, #0x10
	ands r0, r2
	ldrb r1, [r4, #9]
	orrs r0, r1
	strb r0, [r4, #9]
_0809903A:
	lsls r0, r2, #0x10
	cmp r0, #0
	bge _08099046
	bl sub_802613C
	b _080990A2
_08099046:
	adds r0, r4, #0
	bl sub_809B13C
	adds r0, r4, #0
	bl sub_809ADF0
	adds r0, r4, #0
	bl sub_809AE50
	adds r0, r4, #0
	bl sub_809B69C
	adds r0, r4, #0
	bl sub_809B6C0
	adds r0, r4, #0
	bl sub_809B234
	adds r0, r4, #0
	bl sub_809B2E4
	ldrb r0, [r4, #1]
	cmp r0, #0
	bne _08099080
	adds r0, r4, #0
	bl sub_809B638
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_08099080:
	ldrb r0, [r4, #1]
	cmp r0, #1
	bne _08099090
	adds r0, r4, #0
	bl sub_809B668
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_08099090:
	cmp r5, #0
	beq _080990A2
	adds r0, r4, #0
	bl sub_80990B0
	ldr r0, _080990A8 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080990AC @ =sub_8099200
	str r0, [r1, #8]
_080990A2:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080990A8: .4byte gCurTask
_080990AC: .4byte sub_8099200

	thumb_func_start sub_80990B0
sub_80990B0: @ 0x080990B0
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r0, #0x8d
	lsls r0, r0, #2
	adds r2, r4, r0
	ldr r1, _080990E8 @ =gUnknown_080D8F18
	ldrb r0, [r4, #5]
	adds r0, r0, r1
	ldrb r5, [r0]
	ldr r0, _080990EC @ =0x06008000
	str r0, [r2, #4]
	movs r1, #0
	strh r1, [r2, #0xa]
	ldr r0, _080990F0 @ =0x0600D800
	str r0, [r2, #0xc]
	strh r1, [r2, #0x18]
	strh r1, [r2, #0x1a]
	ldr r1, _080990F4 @ =gSaveGame
	ldr r0, _080990F8 @ =gUnknown_080D946D
	adds r0, r5, r0
	ldrb r1, [r1, #0x10]
	ldrb r0, [r0]
	ands r0, r1
	cmp r0, #0
	bne _08099100
	ldr r0, _080990FC @ =gUnknown_080D8CDC
	ldrh r0, [r0, #0x20]
	b _0809910A
	.align 2, 0
_080990E8: .4byte gUnknown_080D8F18
_080990EC: .4byte 0x06008000
_080990F0: .4byte 0x0600D800
_080990F4: .4byte gSaveGame
_080990F8: .4byte gUnknown_080D946D
_080990FC: .4byte gUnknown_080D8CDC
_08099100:
	ldr r0, _0809915C @ =gUnknown_080D8CDC
	adds r1, r5, #5
	lsls r1, r1, #1
	adds r1, r1, r0
	ldrh r0, [r1]
_0809910A:
	strh r0, [r2, #0x1c]
	movs r1, #0
	movs r0, #0
	strh r0, [r2, #0x1e]
	strh r0, [r2, #0x20]
	strh r0, [r2, #0x22]
	strh r0, [r2, #0x24]
	movs r0, #0x10
	strh r0, [r2, #0x26]
	strh r0, [r2, #0x28]
	adds r0, r2, #0
	adds r0, #0x2a
	strb r1, [r0]
	movs r0, #6
	strh r0, [r2, #0x2e]
	adds r0, r2, #0
	bl DrawBackground
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [r4, #0x40]
	movs r0, #4
	strb r0, [r4, #0xb]
	ldr r1, _08099160 @ =gSaveGame
	ldr r0, _08099164 @ =gUnknown_080D946D
	adds r0, r5, r0
	ldrb r1, [r1, #0x10]
	ldrb r0, [r0]
	ands r0, r1
	cmp r0, #0
	bne _08099198
	ldr r3, _08099168 @ =gFlags
	ldr r2, [r3]
	movs r0, #0x80
	lsls r0, r0, #0xa
	ands r0, r2
	cmp r0, #0
	beq _08099170
	ldr r0, _0809916C @ =gUnknown_08E2EEF0
	b _080991AC
	.align 2, 0
_0809915C: .4byte gUnknown_080D8CDC
_08099160: .4byte gSaveGame
_08099164: .4byte gUnknown_080D946D
_08099168: .4byte gFlags
_0809916C: .4byte gUnknown_08E2EEF0
_08099170:
	ldr r1, _08099188 @ =0x040000D4
	ldr r0, _0809918C @ =gUnknown_08E2EEF0
	str r0, [r1]
	ldr r0, _08099190 @ =gUnknown_03003430
	str r0, [r1, #4]
	ldr r0, _08099194 @ =0x80000010
	str r0, [r1, #8]
	ldr r0, [r1, #8]
	movs r0, #2
	orrs r2, r0
	str r2, [r3]
	b _080991DA
	.align 2, 0
_08099188: .4byte 0x040000D4
_0809918C: .4byte gUnknown_08E2EEF0
_08099190: .4byte gUnknown_03003430
_08099194: .4byte 0x80000010
_08099198:
	ldr r4, _080991B8 @ =gFlags
	ldr r3, [r4]
	movs r0, #0x80
	lsls r0, r0, #0xa
	ands r0, r3
	cmp r0, #0
	beq _080991C0
	lsls r0, r5, #5
	ldr r1, _080991BC @ =gUnknown_08E2EE50
	adds r0, r0, r1
_080991AC:
	movs r1, #0x60
	movs r2, #0x10
	bl sub_80C4564
	b _080991DA
	.align 2, 0
_080991B8: .4byte gFlags
_080991BC: .4byte gUnknown_08E2EE50
_080991C0:
	ldr r2, _080991EC @ =0x040000D4
	lsls r0, r5, #5
	ldr r1, _080991F0 @ =gUnknown_08E2EE50
	adds r0, r0, r1
	str r0, [r2]
	ldr r0, _080991F4 @ =gUnknown_03003430
	str r0, [r2, #4]
	ldr r0, _080991F8 @ =0x80000010
	str r0, [r2, #8]
	ldr r0, [r2, #8]
	movs r0, #2
	orrs r3, r0
	str r3, [r4]
_080991DA:
	ldr r0, _080991FC @ =gFlags
	ldr r1, [r0]
	movs r2, #2
	orrs r1, r2
	str r1, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080991EC: .4byte 0x040000D4
_080991F0: .4byte gUnknown_08E2EE50
_080991F4: .4byte gUnknown_03003430
_080991F8: .4byte 0x80000010
_080991FC: .4byte gFlags

	thumb_func_start sub_8099200
sub_8099200: @ 0x08099200
	push {r4, lr}
	ldr r0, _0809922C @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, _08099230 @ =gStageData
	ldrb r1, [r0, #6]
	ldrb r0, [r4, #7]
	cmp r0, #0
	beq _08099252
	cmp r0, #3
	beq _08099252
	cmp r0, #1
	bne _08099246
	cmp r1, #0
	bne _08099234
	ldrb r0, [r4, #4]
	bl sub_8024074
	b _08099238
	.align 2, 0
_0809922C: .4byte gCurTask
_08099230: .4byte gStageData
_08099234:
	bl sub_8023E04
_08099238:
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	movs r0, #0x10
	ands r0, r2
	ldrb r1, [r4, #9]
	orrs r0, r1
	strb r0, [r4, #9]
_08099246:
	lsls r0, r2, #0x10
	cmp r0, #0
	bge _08099252
	bl sub_802613C
	b _08099296
_08099252:
	adds r0, r4, #0
	bl sub_809B13C
	adds r0, r4, #0
	bl sub_809ADF0
	adds r0, r4, #0
	bl sub_809AE50
	adds r0, r4, #0
	bl sub_809B69C
	adds r0, r4, #0
	bl sub_809B6C0
	adds r0, r4, #0
	bl sub_809B2AC
	adds r0, r4, #0
	bl sub_809B148
	cmp r0, #1
	bne _08099296
	adds r0, r4, #0
	bl sub_809B184
	cmp r0, #1
	bne _08099296
	movs r0, #0
	str r0, [r4, #0x5c]
	ldr r0, _0809929C @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080992A0 @ =sub_8098DE4
	str r0, [r1, #8]
_08099296:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809929C: .4byte gCurTask
_080992A0: .4byte sub_8098DE4
_080992A4:
	.byte 0x70, 0x47, 0x00, 0x00

	thumb_func_start sub_80992A8
sub_80992A8: @ 0x080992A8
	push {r4, lr}
	adds r3, r0, #0
	ldrb r4, [r3, #3]
	strb r4, [r3, #4]
	ldr r2, _080992C8 @ =gRepeatedKeys
	ldrh r1, [r2]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _080992D8
	lsls r0, r4, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #3
	bls _080992CC
	movs r0, #0
	b _080992CE
	.align 2, 0
_080992C8: .4byte gRepeatedKeys
_080992CC:
	adds r0, r4, #1
_080992CE:
	strb r0, [r3, #4]
	movs r0, #0
	strb r0, [r3, #1]
	movs r0, #6
	strb r0, [r3, #0xb]
_080992D8:
	ldrh r1, [r2]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _080992F8
	ldrb r0, [r3, #4]
	cmp r0, #0
	bne _080992EC
	movs r0, #4
	b _080992EE
_080992EC:
	subs r0, #1
_080992EE:
	strb r0, [r3, #4]
	movs r0, #1
	strb r0, [r3, #1]
	movs r0, #7
	strb r0, [r3, #0xb]
_080992F8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8099300
sub_8099300: @ 0x08099300
	push {r4, r5, lr}
	sub sp, #4
	ldr r0, _08099330 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	ldr r0, _08099334 @ =gStageData
	ldrb r1, [r0, #6]
	ldrb r0, [r5, #7]
	cmp r0, #0
	beq _08099356
	cmp r0, #3
	beq _08099356
	cmp r0, #1
	bne _0809934A
	cmp r1, #0
	bne _08099338
	ldrb r0, [r5, #3]
	bl sub_80240B4
	b _0809933C
	.align 2, 0
_08099330: .4byte gCurTask
_08099334: .4byte gStageData
_08099338:
	bl sub_80240F4
_0809933C:
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	movs r0, #0x10
	ands r0, r2
	ldrb r1, [r5, #9]
	orrs r0, r1
	strb r0, [r5, #9]
_0809934A:
	lsls r0, r2, #0x10
	cmp r0, #0
	bge _08099356
	bl sub_802613C
	b _08099462
_08099356:
	adds r0, r5, #0
	bl sub_809ADF0
	adds r0, r5, #0
	bl sub_809AE50
	adds r0, r5, #0
	bl sub_809AF08
	adds r0, r5, #0
	bl sub_809B69C
	adds r0, r5, #0
	bl sub_809B6C0
	ldrb r0, [r5, #0xb]
	cmp r0, #0xc
	bhi _080993BA
	ldr r2, _08099418 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldrb r0, [r5, #0xb]
	cmp r0, #0xc
	bhi _080993BA
	movs r0, #0xc
	strb r0, [r5, #0xb]
	ldr r0, [r5, #0x3c]
	str r0, [r5, #0x34]
	ldr r0, [r5, #0x40]
	str r0, [r5, #0x38]
	ldrb r0, [r5, #3]
	strb r0, [r5, #5]
	adds r0, r5, #5
	adds r1, r5, #0
	adds r1, #0xb
	adds r2, r5, #0
	adds r2, #0x34
	adds r3, r5, #0
	adds r3, #0x38
	ldr r4, [r5, #0x20]
	str r4, [sp]
	bl sub_809BF3C
	movs r0, #0x96
	lsls r0, r0, #9
	str r0, [r5, #0x4c]
_080993BA:
	adds r0, r5, #0
	adds r0, #0x9c
	ldrb r2, [r5, #0xb]
	subs r2, #0xb
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	ldr r3, _0809941C @ =gUnknown_080D8D08
	ldrb r1, [r5, #0xa]
	lsls r1, r1, #3
	adds r1, r2, r1
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrh r1, [r1]
	strh r1, [r0, #0xc]
	ldrb r1, [r5, #0xa]
	lsls r1, r1, #3
	adds r2, r2, r1
	lsls r2, r2, #3
	adds r2, r2, r3
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	bl UpdateSpriteAnimation
	ldr r1, _08099420 @ =gStageData
	ldrb r0, [r1, #3]
	cmp r0, #0
	beq _080993F8
	cmp r0, #3
	beq _080993F8
	cmp r0, #4
	bne _0809942C
_080993F8:
	ldr r3, _08099424 @ =gPlayers
	ldr r1, _08099428 @ =gUnknown_080D8F18
	ldrb r0, [r5, #5]
	adds r0, r0, r1
	ldrb r0, [r0]
	adds r3, #0x2a
	movs r1, #0xf
	ands r1, r0
	ldrb r2, [r3]
	movs r0, #0x10
	rsbs r0, r0, #0
	ands r0, r2
	orrs r0, r1
	strb r0, [r3]
	b _0809945A
	.align 2, 0
_08099418: .4byte gDispCnt
_0809941C: .4byte gUnknown_080D8D08
_08099420: .4byte gStageData
_08099424: .4byte gPlayers
_08099428: .4byte gUnknown_080D8F18
_0809942C:
	cmp r0, #5
	bne _08099462
	ldr r2, _0809946C @ =gPlayers
	ldrb r0, [r1, #6]
	lsls r1, r0, #2
	adds r1, r1, r0
	lsls r1, r1, #2
	adds r1, r1, r0
	lsls r1, r1, #4
	adds r1, r1, r2
	ldr r2, _08099470 @ =gUnknown_080D8F18
	ldrb r0, [r5, #5]
	adds r0, r0, r2
	ldrb r0, [r0]
	adds r1, #0x2a
	movs r2, #0xf
	ands r2, r0
	ldrb r3, [r1]
	movs r0, #0x10
	rsbs r0, r0, #0
	ands r0, r3
	orrs r0, r2
	strb r0, [r1]
_0809945A:
	ldr r0, _08099474 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08099478 @ =sub_809947C
	str r0, [r1, #8]
_08099462:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809946C: .4byte gPlayers
_08099470: .4byte gUnknown_080D8F18
_08099474: .4byte gCurTask
_08099478: .4byte sub_809947C

	thumb_func_start sub_809947C
sub_809947C: @ 0x0809947C
	push {r4, r5, r6, lr}
	ldr r0, _080994A8 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, _080994AC @ =gStageData
	ldrb r1, [r0, #6]
	ldrb r0, [r4, #7]
	cmp r0, #0
	beq _080994CE
	cmp r0, #3
	beq _080994CE
	cmp r0, #1
	bne _080994C2
	cmp r1, #0
	bne _080994B0
	ldrb r0, [r4, #3]
	bl sub_80240B4
	b _080994B4
	.align 2, 0
_080994A8: .4byte gCurTask
_080994AC: .4byte gStageData
_080994B0:
	bl sub_80240F4
_080994B4:
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	movs r0, #0x10
	ands r0, r2
	ldrb r1, [r4, #9]
	orrs r0, r1
	strb r0, [r4, #9]
_080994C2:
	lsls r0, r2, #0x10
	cmp r0, #0
	bge _080994CE
	bl sub_802613C
	b _0809966E
_080994CE:
	adds r0, r4, #0
	bl sub_809ADF0
	adds r0, r4, #0
	bl sub_809AE50
	adds r0, r4, #0
	bl sub_809AF08
	adds r0, r4, #0
	bl sub_809B69C
	adds r0, r4, #0
	bl sub_809B6C0
	movs r0, #0
	strb r0, [r4, #3]
	movs r1, #0
	ldrb r0, [r4, #5]
	cmp r1, r0
	bne _08099514
_080994F8:
	ldrb r0, [r4, #3]
	adds r0, #1
	strb r0, [r4, #3]
_080994FE:
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #3
	bhi _08099514
	ldrb r0, [r4, #3]
	ldrb r2, [r4, #5]
	cmp r0, r2
	beq _080994F8
	cmp r0, #4
	bhi _080994FE
_08099514:
	ldrb r0, [r4, #3]
	strb r0, [r4, #4]
	strb r0, [r4, #6]
	ldr r1, _08099550 @ =gUnknown_080D8F18
	ldrb r0, [r4, #6]
	adds r0, r0, r1
	ldrb r5, [r0]
	movs r0, #0x9b
	lsls r0, r0, #9
	str r0, [r4, #0x3c]
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [r4, #0x40]
	ldr r1, _08099554 @ =gSaveGame
	ldr r0, _08099558 @ =gUnknown_080D946D
	adds r0, r5, r0
	ldrb r1, [r1, #0x10]
	ldrb r0, [r0]
	ands r0, r1
	cmp r0, #0
	bne _0809958C
	ldr r3, _0809955C @ =gFlags
	ldr r2, [r3]
	movs r0, #0x80
	lsls r0, r0, #0xa
	ands r0, r2
	cmp r0, #0
	beq _08099564
	ldr r0, _08099560 @ =gUnknown_08E2EEF0
	b _080995A0
	.align 2, 0
_08099550: .4byte gUnknown_080D8F18
_08099554: .4byte gSaveGame
_08099558: .4byte gUnknown_080D946D
_0809955C: .4byte gFlags
_08099560: .4byte gUnknown_08E2EEF0
_08099564:
	ldr r1, _0809957C @ =0x040000D4
	ldr r0, _08099580 @ =gUnknown_08E2EEF0
	str r0, [r1]
	ldr r0, _08099584 @ =gUnknown_03003450
	str r0, [r1, #4]
	ldr r0, _08099588 @ =0x80000010
	str r0, [r1, #8]
	ldr r0, [r1, #8]
	movs r0, #2
	orrs r2, r0
	str r2, [r3]
	b _080995CE
	.align 2, 0
_0809957C: .4byte 0x040000D4
_08099580: .4byte gUnknown_08E2EEF0
_08099584: .4byte gUnknown_03003450
_08099588: .4byte 0x80000010
_0809958C:
	ldr r6, _080995AC @ =gFlags
	ldr r3, [r6]
	movs r0, #0x80
	lsls r0, r0, #0xa
	ands r0, r3
	cmp r0, #0
	beq _080995B4
	lsls r0, r5, #5
	ldr r1, _080995B0 @ =gUnknown_08E2EE50
	adds r0, r0, r1
_080995A0:
	movs r1, #0x70
	movs r2, #0x10
	bl sub_80C4564
	b _080995CE
	.align 2, 0
_080995AC: .4byte gFlags
_080995B0: .4byte gUnknown_08E2EE50
_080995B4:
	ldr r2, _0809960C @ =0x040000D4
	lsls r0, r5, #5
	ldr r1, _08099610 @ =gUnknown_08E2EE50
	adds r0, r0, r1
	str r0, [r2]
	ldr r0, _08099614 @ =gUnknown_03003450
	str r0, [r2, #4]
	ldr r0, _08099618 @ =0x80000010
	str r0, [r2, #8]
	ldr r0, [r2, #8]
	movs r0, #2
	orrs r3, r0
	str r3, [r6]
_080995CE:
	ldr r2, _0809961C @ =gFlags
	ldr r0, [r2]
	movs r1, #2
	orrs r0, r1
	str r0, [r2]
	ldr r0, _08099620 @ =0x00000157
	adds r1, r4, r0
	movs r0, #0xff
	strb r0, [r1]
	movs r0, #0x8d
	lsls r0, r0, #2
	adds r2, r4, r0
	ldr r0, _08099624 @ =0x06008000
	str r0, [r2, #4]
	movs r1, #0
	strh r1, [r2, #0xa]
	ldr r0, _08099628 @ =0x0600D800
	str r0, [r2, #0xc]
	strh r1, [r2, #0x18]
	strh r1, [r2, #0x1a]
	ldr r1, _0809962C @ =gSaveGame
	ldr r0, _08099630 @ =gUnknown_080D946D
	adds r0, r5, r0
	ldrb r1, [r1, #0x10]
	ldrb r0, [r0]
	ands r0, r1
	cmp r0, #0
	bne _08099638
	ldr r0, _08099634 @ =gUnknown_080D8CDC
	ldrh r0, [r0, #0x20]
	b _08099642
	.align 2, 0
_0809960C: .4byte 0x040000D4
_08099610: .4byte gUnknown_08E2EE50
_08099614: .4byte gUnknown_03003450
_08099618: .4byte 0x80000010
_0809961C: .4byte gFlags
_08099620: .4byte 0x00000157
_08099624: .4byte 0x06008000
_08099628: .4byte 0x0600D800
_0809962C: .4byte gSaveGame
_08099630: .4byte gUnknown_080D946D
_08099634: .4byte gUnknown_080D8CDC
_08099638:
	ldr r0, _08099674 @ =gUnknown_080D8CDC
	adds r1, r5, #5
	lsls r1, r1, #1
	adds r1, r1, r0
	ldrh r0, [r1]
_08099642:
	strh r0, [r2, #0x1c]
	movs r1, #0
	movs r0, #0
	strh r0, [r2, #0x1e]
	strh r0, [r2, #0x20]
	strh r0, [r2, #0x22]
	strh r0, [r2, #0x24]
	movs r0, #0x10
	strh r0, [r2, #0x26]
	strh r0, [r2, #0x28]
	adds r0, r2, #0
	adds r0, #0x2a
	strb r1, [r0]
	movs r0, #6
	strh r0, [r2, #0x2e]
	adds r0, r2, #0
	bl DrawBackground
	ldr r0, _08099678 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809967C @ =sub_8099680
	str r0, [r1, #8]
_0809966E:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08099674: .4byte gUnknown_080D8CDC
_08099678: .4byte gCurTask
_0809967C: .4byte sub_8099680

	thumb_func_start sub_8099680
sub_8099680: @ 0x08099680
	push {r4, r5, lr}
	ldr r0, _080996AC @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	movs r5, #0
	ldr r0, _080996B0 @ =gStageData
	ldrb r1, [r0, #6]
	ldrb r0, [r4, #7]
	cmp r0, #0
	beq _080996D4
	cmp r0, #3
	beq _080996D4
	cmp r0, #1
	bne _080996C8
	cmp r1, #0
	bne _080996B4
	bl sub_8023E80
	b _080996BA
	.align 2, 0
_080996AC: .4byte gCurTask
_080996B0: .4byte gStageData
_080996B4:
	ldrb r0, [r4, #4]
	bl sub_8024188
_080996BA:
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	movs r0, #0x10
	ands r0, r2
	ldrb r1, [r4, #9]
	orrs r0, r1
	strb r0, [r4, #9]
_080996C8:
	lsls r0, r2, #0x10
	cmp r0, #0
	bge _080996D4
	bl sub_802613C
	b _08099748
_080996D4:
	movs r0, #0xc
	strb r0, [r4, #0xb]
	adds r0, r4, #0
	movs r1, #0
	bl sub_809AC44
	cmp r0, #1
	bne _080996EA
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_080996EA:
	adds r0, r4, #0
	movs r1, #0
	bl sub_809B32C
	cmp r0, #1
	bne _080996FC
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_080996FC:
	adds r0, r4, #0
	movs r1, #0
	bl sub_809B3C4
	cmp r0, #1
	bne _0809970E
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_0809970E:
	adds r0, r4, #0
	bl sub_809B41C
	adds r0, r4, #0
	bl sub_809B13C
	adds r0, r4, #0
	bl sub_809ADF0
	adds r0, r4, #0
	bl sub_809AE50
	adds r0, r4, #0
	bl sub_809AF08
	adds r0, r4, #0
	bl sub_809B69C
	adds r0, r4, #0
	bl sub_809B6C0
	cmp r5, #3
	bne _08099748
	movs r0, #0xe
	strb r0, [r4, #0xb]
	ldr r0, _08099750 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08099754 @ =sub_8099758
	str r0, [r1, #8]
_08099748:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08099750: .4byte gCurTask
_08099754: .4byte sub_8099758

	thumb_func_start sub_8099758
sub_8099758: @ 0x08099758
	push {r4, r5, r6, lr}
	ldr r0, _080997D4 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, _080997D8 @ =gStageData
	ldrb r5, [r0, #6]
	adds r0, r4, #0
	bl sub_809B13C
	adds r0, r4, #0
	bl sub_809ADF0
	adds r0, r4, #0
	bl sub_809AE50
	adds r0, r4, #0
	bl sub_809AF08
	adds r0, r4, #0
	bl sub_809B69C
	adds r0, r4, #0
	bl sub_809B6C0
	ldrb r0, [r4, #7]
	cmp r0, #0
	beq _080997AE
	cmp r0, #3
	beq _080997AE
	cmp r0, #1
	bne _080997A0
	cmp r5, #1
	beq _080997AE
_080997A0:
	cmp r0, #2
	bne _080997BA
	subs r0, r5, #2
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #1
	bhi _080997BA
_080997AE:
	adds r0, r4, #0
	bl sub_809B284
	adds r0, r4, #0
	bl sub_809AD74
_080997BA:
	ldrb r0, [r4, #7]
	cmp r0, #0
	beq _08099824
	cmp r0, #3
	beq _080997F6
	cmp r0, #1
	bne _080997F0
	cmp r5, #0
	bne _080997DC
	bl sub_8023E80
	b _080997E2
	.align 2, 0
_080997D4: .4byte gCurTask
_080997D8: .4byte gStageData
_080997DC:
	ldrb r0, [r4, #4]
	bl sub_8024188
_080997E2:
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	movs r0, #0x10
	ands r0, r6
	ldrb r1, [r4, #9]
	orrs r0, r1
	strb r0, [r4, #9]
_080997F0:
	lsls r0, r6, #0x10
	cmp r0, #0
	blt _080998B4
_080997F6:
	ldrb r0, [r4, #7]
	adds r1, r0, #0
	adds r2, r0, #0
	cmp r1, #0
	beq _08099824
	cmp r1, #3
	beq _0809981A
	cmp r1, #1
	bne _0809980C
	cmp r5, #1
	beq _0809981A
_0809980C:
	cmp r1, #2
	bne _080998E0
	subs r0, r5, #2
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #1
	bhi _080998E0
_0809981A:
	adds r0, r2, #0
	cmp r0, #0
	beq _08099824
	cmp r0, #3
	bne _08099850
_08099824:
	ldr r0, _08099844 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08099850
	movs r0, #0x6b
	bl m4aSongNumStart
	movs r0, #0x13
	strb r0, [r4, #0xb]
	ldr r0, _08099848 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809984C @ =sub_809AABC
	b _08099956
	.align 2, 0
_08099844: .4byte gPressedKeys
_08099848: .4byte gCurTask
_0809984C: .4byte sub_809AABC
_08099850:
	ldr r0, _0809986C @ =gRepeatedKeys
	ldrh r1, [r0]
	movs r0, #0x30
	ands r0, r1
	cmp r0, #0
	beq _08099870
	movs r0, #0x67
	bl m4aSongNumStart
	adds r0, r4, #0
	bl sub_8099C34
	b _08099950
	.align 2, 0
_0809986C: .4byte gRepeatedKeys
_08099870:
	ldr r0, _080998BC @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08099958
	ldr r5, _080998C0 @ =gUnknown_080D8F18
	ldrb r3, [r4, #6]
	adds r0, r3, r5
	ldrb r1, [r0]
	ldr r2, _080998C4 @ =gSaveGame
	ldr r0, _080998C8 @ =gUnknown_080D946D
	adds r1, r1, r0
	ldrb r2, [r2, #0x10]
	ldrb r0, [r1]
	ands r0, r2
	cmp r0, #0
	beq _08099958
	ldr r1, _080998CC @ =gUnknown_080D9022
	lsls r0, r3, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	bl m4aSongNumStart
	movs r0, #0x14
	strb r0, [r4, #0xb]
	ldrb r1, [r4, #5]
	adds r1, r1, r5
	ldrb r0, [r4, #6]
	adds r0, r0, r5
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bne _080998D0
_080998B4:
	bl sub_802613C
	b _08099958
	.align 2, 0
_080998BC: .4byte gPressedKeys
_080998C0: .4byte gUnknown_080D8F18
_080998C4: .4byte gSaveGame
_080998C8: .4byte gUnknown_080D946D
_080998CC: .4byte gUnknown_080D9022
_080998D0:
	ldr r0, _080998D8 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080998DC @ =sub_8099C9C
	b _08099956
	.align 2, 0
_080998D8: .4byte gCurTask
_080998DC: .4byte sub_8099C9C
_080998E0:
	lsls r0, r2, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bne _08099958
	lsls r0, r6, #0x10
	asrs r1, r0, #0x10
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _08099908
	movs r0, #0x14
	strb r0, [r4, #0xb]
	ldr r0, _08099900 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08099904 @ =sub_8099C9C
	b _08099956
	.align 2, 0
_08099900: .4byte gCurTask
_08099904: .4byte sub_8099C9C
_08099908:
	ldrb r2, [r4, #3]
	subs r0, r1, #1
	cmp r2, r0
	beq _08099958
	cmp r1, #0
	ble _08099958
	cmp r1, #5
	bgt _08099958
	adds r1, r2, #0
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r1, r2
	bge _08099932
	movs r3, #1
	cmp r1, #1
	bgt _08099940
	adds r0, r1, #2
	cmp r0, r2
	bge _08099940
	movs r3, #2
	b _08099940
_08099932:
	movs r3, #2
	cmp r1, #2
	ble _08099940
	subs r0, r1, #2
	cmp r0, r2
	ble _08099940
	movs r3, #1
_08099940:
	cmp r3, #1
	bne _08099948
	movs r0, #0
	b _0809994A
_08099948:
	movs r0, #1
_0809994A:
	strb r0, [r4, #1]
	subs r0, r6, #1
	strb r0, [r4, #4]
_08099950:
	ldr r0, _08099960 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08099964 @ =sub_8099968
_08099956:
	str r0, [r1, #8]
_08099958:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08099960: .4byte gCurTask
_08099964: .4byte sub_8099968

	thumb_func_start sub_8099968
sub_8099968: @ 0x08099968
	push {r4, r5, r6, r7, lr}
	ldr r0, _08099994 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	movs r6, #0
	ldr r0, _08099998 @ =gStageData
	ldrb r1, [r0, #6]
	ldrb r0, [r4, #7]
	cmp r0, #0
	beq _080999BC
	cmp r0, #3
	beq _080999BC
	cmp r0, #1
	bne _080999B0
	cmp r1, #0
	bne _0809999C
	bl sub_8023E80
	b _080999A2
	.align 2, 0
_08099994: .4byte gCurTask
_08099998: .4byte gStageData
_0809999C:
	ldrb r0, [r4, #4]
	bl sub_8024188
_080999A2:
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	movs r0, #0x10
	ands r0, r2
	ldrb r1, [r4, #9]
	orrs r0, r1
	strb r0, [r4, #9]
_080999B0:
	lsls r0, r2, #0x10
	cmp r0, #0
	bge _080999BC
	bl sub_802613C
	b _08099B66
_080999BC:
	adds r0, r4, #0
	movs r1, #1
	bl sub_809B32C
	cmp r0, #1
	bne _080999CE
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
_080999CE:
	adds r0, r4, #0
	bl sub_809B25C
	cmp r0, #1
	bne _080999DE
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
_080999DE:
	adds r0, r4, #0
	bl sub_809B13C
	adds r0, r4, #0
	bl sub_809ADF0
	adds r0, r4, #0
	bl sub_809AE50
	adds r0, r4, #0
	bl sub_809AF08
	adds r0, r4, #0
	bl sub_809B69C
	adds r0, r4, #0
	bl sub_809B6C0
	cmp r6, #2
	beq _08099A08
	b _08099B66
_08099A08:
	ldrb r1, [r4, #4]
	strb r1, [r4, #3]
	movs r0, #0xa5
	lsls r0, r0, #9
	str r0, [r4, #0x3c]
	strb r1, [r4, #6]
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [r4, #0x40]
	movs r0, #4
	strb r0, [r4, #0xb]
	movs r0, #0xa0
	lsls r0, r0, #9
	str r0, [r4, #0x4c]
	ldr r1, _08099A50 @ =gUnknown_080D8F18
	ldrb r0, [r4, #6]
	adds r0, r0, r1
	ldrb r5, [r0]
	ldr r1, _08099A54 @ =gSaveGame
	ldr r0, _08099A58 @ =gUnknown_080D946D
	adds r0, r5, r0
	ldrb r1, [r1, #0x10]
	ldrb r0, [r0]
	ands r0, r1
	cmp r0, #0
	bne _08099A8C
	ldr r3, _08099A5C @ =gFlags
	ldr r2, [r3]
	movs r0, #0x80
	lsls r0, r0, #0xa
	ands r0, r2
	cmp r0, #0
	beq _08099A64
	ldr r0, _08099A60 @ =gUnknown_08E2EEF0
	b _08099AA0
	.align 2, 0
_08099A50: .4byte gUnknown_080D8F18
_08099A54: .4byte gSaveGame
_08099A58: .4byte gUnknown_080D946D
_08099A5C: .4byte gFlags
_08099A60: .4byte gUnknown_08E2EEF0
_08099A64:
	ldr r1, _08099A7C @ =0x040000D4
	ldr r0, _08099A80 @ =gUnknown_08E2EEF0
	str r0, [r1]
	ldr r0, _08099A84 @ =gUnknown_03003450
	str r0, [r1, #4]
	ldr r0, _08099A88 @ =0x80000010
	str r0, [r1, #8]
	ldr r0, [r1, #8]
	orrs r2, r6
	str r2, [r3]
	b _08099ACC
	.align 2, 0
_08099A7C: .4byte 0x040000D4
_08099A80: .4byte gUnknown_08E2EEF0
_08099A84: .4byte gUnknown_03003450
_08099A88: .4byte 0x80000010
_08099A8C:
	ldr r7, _08099AAC @ =gFlags
	ldr r3, [r7]
	movs r0, #0x80
	lsls r0, r0, #0xa
	ands r0, r3
	cmp r0, #0
	beq _08099AB4
	lsls r0, r5, #5
	ldr r1, _08099AB0 @ =gUnknown_08E2EE50
	adds r0, r0, r1
_08099AA0:
	movs r1, #0x70
	movs r2, #0x10
	bl sub_80C4564
	b _08099ACC
	.align 2, 0
_08099AAC: .4byte gFlags
_08099AB0: .4byte gUnknown_08E2EE50
_08099AB4:
	ldr r2, _08099B08 @ =0x040000D4
	lsls r0, r5, #5
	ldr r1, _08099B0C @ =gUnknown_08E2EE50
	adds r0, r0, r1
	str r0, [r2]
	ldr r0, _08099B10 @ =gUnknown_03003450
	str r0, [r2, #4]
	ldr r0, _08099B14 @ =0x80000010
	str r0, [r2, #8]
	ldr r0, [r2, #8]
	orrs r3, r6
	str r3, [r7]
_08099ACC:
	ldr r2, _08099B18 @ =gFlags
	ldr r0, [r2]
	movs r1, #2
	orrs r0, r1
	str r0, [r2]
	movs r1, #0
	movs r0, #0xe
	strb r0, [r4, #0xb]
	movs r0, #0x8d
	lsls r0, r0, #2
	adds r2, r4, r0
	ldr r0, _08099B1C @ =0x06008000
	str r0, [r2, #4]
	strh r1, [r2, #0xa]
	ldr r0, _08099B20 @ =0x0600D800
	str r0, [r2, #0xc]
	strh r1, [r2, #0x18]
	strh r1, [r2, #0x1a]
	ldr r1, _08099B24 @ =gSaveGame
	ldr r0, _08099B28 @ =gUnknown_080D946D
	adds r0, r5, r0
	ldrb r1, [r1, #0x10]
	ldrb r0, [r0]
	ands r0, r1
	cmp r0, #0
	bne _08099B30
	ldr r0, _08099B2C @ =gUnknown_080D8CDC
	ldrh r0, [r0, #0x20]
	b _08099B3A
	.align 2, 0
_08099B08: .4byte 0x040000D4
_08099B0C: .4byte gUnknown_08E2EE50
_08099B10: .4byte gUnknown_03003450
_08099B14: .4byte 0x80000010
_08099B18: .4byte gFlags
_08099B1C: .4byte 0x06008000
_08099B20: .4byte 0x0600D800
_08099B24: .4byte gSaveGame
_08099B28: .4byte gUnknown_080D946D
_08099B2C: .4byte gUnknown_080D8CDC
_08099B30:
	ldr r0, _08099B6C @ =gUnknown_080D8CDC
	adds r1, r5, #5
	lsls r1, r1, #1
	adds r1, r1, r0
	ldrh r0, [r1]
_08099B3A:
	strh r0, [r2, #0x1c]
	movs r1, #0
	movs r0, #0
	strh r0, [r2, #0x1e]
	strh r0, [r2, #0x20]
	strh r0, [r2, #0x22]
	strh r0, [r2, #0x24]
	movs r0, #0x10
	strh r0, [r2, #0x26]
	strh r0, [r2, #0x28]
	adds r0, r2, #0
	adds r0, #0x2a
	strb r1, [r0]
	movs r0, #6
	strh r0, [r2, #0x2e]
	adds r0, r2, #0
	bl DrawBackground
	ldr r0, _08099B70 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08099B74 @ =sub_8099B78
	str r0, [r1, #8]
_08099B66:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08099B6C: .4byte gUnknown_080D8CDC
_08099B70: .4byte gCurTask
_08099B74: .4byte sub_8099B78

	thumb_func_start sub_8099B78
sub_8099B78: @ 0x08099B78
	push {r4, r5, lr}
	ldr r0, _08099BA4 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	movs r5, #0
	ldr r0, _08099BA8 @ =gStageData
	ldrb r1, [r0, #6]
	ldrb r0, [r4, #7]
	cmp r0, #0
	beq _08099BCC
	cmp r0, #3
	beq _08099BCC
	cmp r0, #1
	bne _08099BC0
	cmp r1, #0
	bne _08099BAC
	bl sub_8023E80
	b _08099BB2
	.align 2, 0
_08099BA4: .4byte gCurTask
_08099BA8: .4byte gStageData
_08099BAC:
	ldrb r0, [r4, #4]
	bl sub_8024188
_08099BB2:
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	movs r0, #0x10
	ands r0, r2
	ldrb r1, [r4, #9]
	orrs r0, r1
	strb r0, [r4, #9]
_08099BC0:
	lsls r0, r2, #0x10
	cmp r0, #0
	bge _08099BCC
	bl sub_802613C
	b _08099C26
_08099BCC:
	adds r0, r4, #0
	movs r1, #0
	bl sub_809B32C
	cmp r0, #1
	bne _08099BDE
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_08099BDE:
	adds r0, r4, #0
	bl sub_809B1B4
	cmp r0, #1
	bne _08099BEE
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_08099BEE:
	adds r0, r4, #0
	bl sub_809B13C
	adds r0, r4, #0
	bl sub_809ADF0
	adds r0, r4, #0
	bl sub_809AE50
	adds r0, r4, #0
	bl sub_809AF08
	adds r0, r4, #0
	bl sub_809B69C
	adds r0, r4, #0
	bl sub_809B6C0
	cmp r5, #2
	bne _08099C26
	movs r0, #0
	str r0, [r4, #0x5c]
	movs r0, #0xe
	strb r0, [r4, #0xb]
	ldr r0, _08099C2C @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08099C30 @ =sub_8099758
	str r0, [r1, #8]
_08099C26:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08099C2C: .4byte gCurTask
_08099C30: .4byte sub_8099758

	thumb_func_start sub_8099C34
sub_8099C34: @ 0x08099C34
	push {r4, lr}
	adds r3, r0, #0
	ldrb r0, [r3, #3]
	strb r0, [r3, #4]
	ldr r2, _08099C54 @ =gRepeatedKeys
	ldrh r1, [r2]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _08099C6C
	movs r1, #0
_08099C4A:
	ldrb r0, [r3, #4]
	cmp r0, #3
	bls _08099C58
	strb r1, [r3, #4]
	b _08099C5C
	.align 2, 0
_08099C54: .4byte gRepeatedKeys
_08099C58:
	adds r0, #1
	strb r0, [r3, #4]
_08099C5C:
	ldrb r0, [r3, #4]
	ldrb r4, [r3, #5]
	cmp r0, r4
	beq _08099C4A
	movs r0, #0
	strb r0, [r3, #1]
	movs r0, #0xf
	strb r0, [r3, #0xb]
_08099C6C:
	ldrh r1, [r2]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _08099C96
	movs r1, #4
_08099C78:
	ldrb r0, [r3, #4]
	cmp r0, #0
	bne _08099C82
	strb r1, [r3, #4]
	b _08099C86
_08099C82:
	subs r0, #1
	strb r0, [r3, #4]
_08099C86:
	ldrb r0, [r3, #4]
	ldrb r2, [r3, #5]
	cmp r0, r2
	beq _08099C78
	movs r0, #1
	strb r0, [r3, #1]
	movs r0, #0x10
	strb r0, [r3, #0xb]
_08099C96:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8099C9C
sub_8099C9C: @ 0x08099C9C
	push {r4, r5, r6, lr}
	ldr r0, _08099CC8 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	ldr r0, _08099CCC @ =gStageData
	ldrb r1, [r0, #6]
	ldrb r0, [r5, #7]
	cmp r0, #0
	beq _08099CF0
	cmp r0, #3
	beq _08099CF0
	cmp r0, #1
	bne _08099CE4
	cmp r1, #0
	bne _08099CD0
	bl sub_8023EFC
	b _08099CD6
	.align 2, 0
_08099CC8: .4byte gCurTask
_08099CCC: .4byte gStageData
_08099CD0:
	ldrb r0, [r5, #4]
	bl sub_80241AC
_08099CD6:
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	movs r0, #0x10
	ands r0, r2
	ldrb r1, [r5, #9]
	orrs r0, r1
	strb r0, [r5, #9]
_08099CE4:
	lsls r0, r2, #0x10
	cmp r0, #0
	bge _08099CF0
	bl sub_802613C
	b _08099E32
_08099CF0:
	adds r0, r5, #0
	bl sub_809ADF0
	adds r0, r5, #0
	bl sub_809AE50
	adds r0, r5, #0
	bl sub_809AF08
	ldr r0, _08099DC0 @ =gUnknown_03006230
	movs r3, #0
	strb r3, [r0, #2]
	ldr r1, _08099DC4 @ =gUnknown_03003590
	strb r3, [r1, #8]
	strb r3, [r1, #9]
	movs r0, #0xff
	strb r0, [r1, #0xa]
	movs r0, #0x40
	strb r0, [r1, #0xb]
	movs r0, #0x8e
	lsls r0, r0, #8
	str r0, [r5, #0x4c]
	movs r0, #0xb0
	lsls r0, r0, #5
	str r0, [r5, #0x50]
	ldr r1, _08099DC8 @ =gBgScrollRegs
	movs r4, #0
	movs r0, #0x8e
	strh r0, [r1, #8]
	ldr r0, _08099DCC @ =0x0000FFEA
	strh r0, [r1, #0xa]
	ldr r1, _08099DD0 @ =gDispCnt
	movs r2, #0xba
	lsls r2, r2, #5
	adds r0, r2, #0
	strh r0, [r1]
	ldr r1, _08099DD4 @ =gBgCntRegs
	ldr r0, _08099DD8 @ =0x00001B09
	strh r0, [r1, #4]
	movs r1, #0x8d
	lsls r1, r1, #2
	adds r0, r5, r1
	ldr r6, _08099DDC @ =gUnknown_080D8F18
	ldrb r1, [r5, #6]
	adds r1, r1, r6
	ldrb r1, [r1]
	ldr r2, _08099DE0 @ =0x06008000
	str r2, [r0, #4]
	strh r3, [r0, #0xa]
	ldr r2, _08099DE4 @ =0x0600D800
	str r2, [r0, #0xc]
	strh r3, [r0, #0x18]
	strh r3, [r0, #0x1a]
	ldr r2, _08099DE8 @ =gUnknown_080D8CDC
	adds r1, #0xa
	lsls r1, r1, #1
	adds r1, r1, r2
	ldrh r1, [r1]
	strh r1, [r0, #0x1c]
	strh r3, [r0, #0x1e]
	strh r3, [r0, #0x20]
	strh r3, [r0, #0x22]
	strh r3, [r0, #0x24]
	movs r1, #0x10
	strh r1, [r0, #0x26]
	strh r1, [r0, #0x28]
	ldr r2, _08099DEC @ =0x0000025E
	adds r1, r5, r2
	strb r4, [r1]
	movs r1, #2
	strh r1, [r0, #0x2e]
	bl DrawBackground
	adds r0, r5, #0
	bl sub_809B69C
	adds r0, r5, #0
	bl sub_809B6C0
	ldr r1, _08099DF0 @ =gStageData
	ldrb r0, [r1, #3]
	cmp r0, #0
	beq _08099D9E
	cmp r0, #3
	beq _08099D9E
	cmp r0, #4
	bne _08099DF8
_08099D9E:
	ldr r2, _08099DF4 @ =gPlayers
	ldr r1, _08099DDC @ =gUnknown_080D8F18
	ldrb r0, [r5, #6]
	adds r0, r0, r1
	ldrb r0, [r0]
	movs r1, #0xbd
	lsls r1, r1, #1
	adds r3, r2, r1
	movs r1, #0xf
	ands r1, r0
	ldrb r2, [r3]
	movs r0, #0x10
	rsbs r0, r0, #0
	ands r0, r2
	orrs r0, r1
	strb r0, [r3]
	b _08099E2A
	.align 2, 0
_08099DC0: .4byte gUnknown_03006230
_08099DC4: .4byte gUnknown_03003590
_08099DC8: .4byte gBgScrollRegs
_08099DCC: .4byte 0x0000FFEA
_08099DD0: .4byte gDispCnt
_08099DD4: .4byte gBgCntRegs
_08099DD8: .4byte 0x00001B09
_08099DDC: .4byte gUnknown_080D8F18
_08099DE0: .4byte 0x06008000
_08099DE4: .4byte 0x0600D800
_08099DE8: .4byte gUnknown_080D8CDC
_08099DEC: .4byte 0x0000025E
_08099DF0: .4byte gStageData
_08099DF4: .4byte gPlayers
_08099DF8:
	cmp r0, #5
	bne _08099E32
	ldrb r0, [r1, #6]
	adds r0, #1
	movs r1, #1
	ldr r2, _08099E38 @ =gPlayers
	ands r0, r1
	lsls r1, r0, #2
	adds r1, r1, r0
	lsls r1, r1, #2
	adds r1, r1, r0
	lsls r1, r1, #4
	adds r1, r1, r2
	ldrb r0, [r5, #6]
	adds r0, r0, r6
	ldrb r0, [r0]
	adds r1, #0x2a
	movs r2, #0xf
	ands r2, r0
	ldrb r3, [r1]
	movs r0, #0x10
	rsbs r0, r0, #0
	ands r0, r3
	orrs r0, r2
	strb r0, [r1]
_08099E2A:
	ldr r0, _08099E3C @ =gCurTask
	ldr r1, [r0]
	ldr r0, _08099E40 @ =sub_8099EC8
	str r0, [r1, #8]
_08099E32:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08099E38: .4byte gPlayers
_08099E3C: .4byte gCurTask
_08099E40: .4byte sub_8099EC8

	thumb_func_start sub_8099E44
sub_8099E44: @ 0x08099E44
	push {r4, r5, r6, lr}
	ldr r6, _08099EC0 @ =gCurTask
	ldr r0, [r6]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	movs r5, #0
	adds r0, r4, #0
	movs r1, #0
	bl sub_809B424
	cmp r0, #1
	bne _08099E62
	movs r5, #1
_08099E62:
	adds r0, r4, #0
	movs r1, #0
	bl sub_809B470
	cmp r0, #1
	bne _08099E74
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_08099E74:
	adds r0, r4, #0
	movs r1, #0
	bl sub_809B4BC
	cmp r0, #1
	bne _08099E86
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_08099E86:
	adds r0, r4, #0
	movs r1, #0
	bl sub_809B548
	cmp r0, #1
	bne _08099E98
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_08099E98:
	adds r0, r4, #0
	bl sub_809ADF0
	adds r0, r4, #0
	bl sub_809AE50
	adds r0, r4, #0
	bl sub_809AF08
	adds r0, r4, #0
	bl sub_809B094
	cmp r5, #4
	bne _08099EBA
	ldr r1, [r6]
	ldr r0, _08099EC4 @ =sub_8099EC8
	str r0, [r1, #8]
_08099EBA:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08099EC0: .4byte gCurTask
_08099EC4: .4byte sub_8099EC8

	thumb_func_start sub_8099EC8
sub_8099EC8: @ 0x08099EC8
	push {r4, r5, r6, r7, lr}
	ldr r0, _08099F2C @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	movs r5, #0
	ldr r0, _08099F30 @ =gStageData
	ldrb r6, [r0, #6]
	ldrh r0, [r4, #0xe]
	cmp r0, #0
	beq _08099F14
	ldr r2, _08099F34 @ =gDispCnt
	ldrh r0, [r2]
	movs r7, #0x80
	lsls r7, r7, #6
	adds r1, r7, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _08099F38 @ =gWinRegs
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	ldrh r2, [r1, #8]
	movs r0, #0x3f
	orrs r0, r2
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	orrs r0, r2
	strh r0, [r1, #0xa]
	ldr r1, _08099F3C @ =gBldRegs
	ldr r0, _08099F40 @ =0x00003FBF
	strh r0, [r1]
	strh r5, [r4, #0x10]
	strh r5, [r4, #0xe]
_08099F14:
	ldrb r0, [r4, #7]
	cmp r0, #0
	beq _08099F64
	cmp r0, #3
	beq _08099F64
	cmp r0, #1
	bne _08099F58
	cmp r6, #0
	bne _08099F44
	bl sub_8023EFC
	b _08099F4A
	.align 2, 0
_08099F2C: .4byte gCurTask
_08099F30: .4byte gStageData
_08099F34: .4byte gDispCnt
_08099F38: .4byte gWinRegs
_08099F3C: .4byte gBldRegs
_08099F40: .4byte 0x00003FBF
_08099F44:
	ldrb r0, [r4, #4]
	bl sub_80241AC
_08099F4A:
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	movs r0, #0x10
	ands r0, r3
	ldrb r1, [r4, #9]
	orrs r0, r1
	strb r0, [r4, #9]
_08099F58:
	lsls r0, r3, #0x10
	cmp r0, #0
	bge _08099F64
	bl sub_802613C
	b _0809A00A
_08099F64:
	adds r0, r4, #0
	movs r1, #0
	bl sub_809B424
	cmp r0, #1
	bne _08099F76
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_08099F76:
	adds r0, r4, #0
	movs r1, #0
	bl sub_809B470
	cmp r0, #1
	bne _08099F88
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_08099F88:
	adds r0, r4, #0
	movs r1, #0
	bl sub_809B4BC
	cmp r0, #1
	bne _08099F9A
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_08099F9A:
	adds r0, r4, #0
	movs r1, #0
	bl sub_809B548
	cmp r0, #1
	bne _08099FAC
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_08099FAC:
	adds r0, r4, #0
	bl sub_809ADF0
	adds r0, r4, #0
	bl sub_809AE50
	adds r0, r4, #0
	bl sub_809AF08
	adds r0, r4, #0
	bl sub_809B094
	ldr r1, _08099FE0 @ =gBldRegs
	ldrh r0, [r1, #4]
	cmp r0, #0xf
	bhi _08099FE4
	ldrh r0, [r4, #0x10]
	lsrs r0, r0, #8
	strh r0, [r1, #4]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r1, #0
	ldrh r7, [r4, #0x10]
	adds r0, r0, r7
	strh r0, [r4, #0x10]
	b _0809A00A
	.align 2, 0
_08099FE0: .4byte gBldRegs
_08099FE4:
	cmp r5, #4
	bne _0809A00A
	movs r0, #0x10
	strh r0, [r1, #4]
	movs r0, #0x16
	strb r0, [r4, #0xb]
	adds r0, r4, #0
	bl sub_809A9A0
	adds r0, r4, #0
	bl sub_809A808
	movs r0, #0xe0
	lsls r0, r0, #4
	str r0, [r4, #0x58]
	ldr r0, _0809A010 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809A014 @ =sub_809A018
	str r0, [r1, #8]
_0809A00A:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809A010: .4byte gCurTask
_0809A014: .4byte sub_809A018

	thumb_func_start sub_809A018
sub_809A018: @ 0x0809A018
	push {r4, r5, r6, lr}
	ldr r0, _0809A084 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, _0809A088 @ =gStageData
	ldrb r6, [r0, #6]
	ldrh r0, [r4, #0xe]
	cmp r0, #0
	beq _0809A06C
	ldr r2, _0809A08C @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _0809A090 @ =gWinRegs
	movs r3, #0
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	ldrh r2, [r1, #8]
	movs r0, #0x3f
	orrs r0, r2
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	orrs r0, r2
	strh r0, [r1, #0xa]
	ldr r1, _0809A094 @ =gBldRegs
	ldr r0, _0809A098 @ =0x00003FBF
	strh r0, [r1]
	movs r0, #0x10
	strh r0, [r1, #4]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r4, #0x10]
	strh r3, [r4, #0xe]
_0809A06C:
	ldrb r0, [r4, #7]
	cmp r0, #0
	beq _0809A0BC
	cmp r0, #3
	beq _0809A0BC
	cmp r0, #1
	bne _0809A0B0
	cmp r6, #0
	bne _0809A09C
	bl sub_8023EFC
	b _0809A0A2
	.align 2, 0
_0809A084: .4byte gCurTask
_0809A088: .4byte gStageData
_0809A08C: .4byte gDispCnt
_0809A090: .4byte gWinRegs
_0809A094: .4byte gBldRegs
_0809A098: .4byte 0x00003FBF
_0809A09C:
	ldrb r0, [r4, #4]
	bl sub_80241AC
_0809A0A2:
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	movs r0, #0x10
	ands r0, r5
	ldrb r1, [r4, #9]
	orrs r0, r1
	strb r0, [r4, #9]
_0809A0B0:
	lsls r0, r5, #0x10
	cmp r0, #0
	bge _0809A0BC
	bl sub_802613C
	b _0809A120
_0809A0BC:
	adds r0, r4, #0
	bl sub_809B13C
	adds r0, r4, #0
	bl sub_809ADF0
	adds r0, r4, #0
	bl sub_809AFC0
	adds r0, r4, #0
	bl sub_809B6C0
	adds r0, r4, #0
	bl sub_809B69C
	ldr r2, _0809A0F4 @ =gBldRegs
	ldrh r1, [r2, #4]
	cmp r1, #0
	beq _0809A0FC
	ldrh r0, [r4, #0x10]
	lsrs r0, r0, #8
	strh r0, [r2, #4]
	ldr r1, _0809A0F8 @ =0xFFFFFF00
	adds r0, r1, #0
	ldrh r3, [r4, #0x10]
	adds r0, r0, r3
	strh r0, [r4, #0x10]
	b _0809A120
	.align 2, 0
_0809A0F4: .4byte gBldRegs
_0809A0F8: .4byte 0xFFFFFF00
_0809A0FC:
	movs r0, #1
	strh r0, [r4, #0xe]
	strh r1, [r2, #4]
	ldrb r0, [r4, #7]
	cmp r0, #1
	bne _0809A118
	ldr r0, _0809A110 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809A114 @ =sub_809A130
	b _0809A11E
	.align 2, 0
_0809A110: .4byte gCurTask
_0809A114: .4byte sub_809A130
_0809A118:
	ldr r0, _0809A128 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809A12C @ =sub_809A1C4
_0809A11E:
	str r0, [r1, #8]
_0809A120:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809A128: .4byte gCurTask
_0809A12C: .4byte sub_809A1C4

	thumb_func_start sub_809A130
sub_809A130: @ 0x0809A130
	push {r4, r5, lr}
	ldr r0, _0809A15C @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, _0809A160 @ =gStageData
	ldrb r1, [r0, #6]
	ldrb r0, [r4, #7]
	cmp r0, #0
	beq _0809A184
	cmp r0, #3
	beq _0809A184
	cmp r0, #1
	bne _0809A178
	cmp r1, #0
	bne _0809A164
	bl sub_8023EFC
	b _0809A16A
	.align 2, 0
_0809A15C: .4byte gCurTask
_0809A160: .4byte gStageData
_0809A164:
	ldrb r0, [r4, #4]
	bl sub_80241AC
_0809A16A:
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	movs r0, #0x10
	ands r0, r5
	ldrb r1, [r4, #9]
	orrs r0, r1
	strb r0, [r4, #9]
_0809A178:
	lsls r0, r5, #0x10
	cmp r0, #0
	bge _0809A184
	bl sub_802613C
	b _0809A1B6
_0809A184:
	adds r0, r4, #0
	bl sub_809B13C
	adds r0, r4, #0
	bl sub_809ADF0
	adds r0, r4, #0
	bl sub_809AFC0
	adds r0, r4, #0
	bl sub_809B6C0
	adds r0, r4, #0
	bl sub_809B69C
	lsls r0, r5, #0x10
	asrs r0, r0, #0x10
	movs r1, #0x10
	ands r0, r1
	cmp r0, #0
	beq _0809A1B6
	ldr r0, _0809A1BC @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809A1C0 @ =sub_809A1C4
	str r0, [r1, #8]
_0809A1B6:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809A1BC: .4byte gCurTask
_0809A1C0: .4byte sub_809A1C4

	thumb_func_start sub_809A1C4
sub_809A1C4: @ 0x0809A1C4
	push {r4, r5, lr}
	ldr r0, _0809A20C @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, _0809A210 @ =gStageData
	ldrb r5, [r0, #6]
	adds r0, r4, #0
	bl sub_809B13C
	adds r0, r4, #0
	bl sub_809ADF0
	adds r0, r4, #0
	bl sub_809AFC0
	adds r0, r4, #0
	bl sub_809B6C0
	adds r0, r4, #0
	bl sub_809B69C
	ldrh r0, [r4, #0x14]
	cmp r0, #0
	bne _0809A218
	ldr r0, _0809A214 @ =gUnknown_080D900E
	ldrb r1, [r4, #5]
	lsls r1, r1, #1
	adds r1, r1, r0
	ldrh r0, [r1]
	bl m4aSongNumStart
	b _0809A23A
	.align 2, 0
_0809A20C: .4byte gCurTask
_0809A210: .4byte gStageData
_0809A214: .4byte gUnknown_080D900E
_0809A218:
	cmp r0, #0x3c
	bne _0809A228
	ldr r0, _0809A224 @ =0x000001FF
	bl m4aSongNumStart
	b _0809A23A
	.align 2, 0
_0809A224: .4byte 0x000001FF
_0809A228:
	cmp r0, #0x5a
	bne _0809A23A
	ldr r0, _0809A26C @ =gUnknown_080D9018
	ldrb r1, [r4, #6]
	lsls r1, r1, #1
	adds r1, r1, r0
	ldrh r0, [r1]
	bl m4aSongNumStart
_0809A23A:
	ldrh r0, [r4, #0x14]
	adds r3, r0, #1
	strh r3, [r4, #0x14]
	ldrb r1, [r4, #7]
	cmp r1, #1
	bne _0809A2AA
	cmp r5, #0
	bne _0809A288
	ldr r0, _0809A270 @ =gPressedKeys
	ldrh r2, [r0]
	ands r1, r2
	cmp r1, #0
	bne _0809A25C
	movs r0, #8
	ands r0, r2
	cmp r0, #0
	beq _0809A274
_0809A25C:
	bl sub_802610C
	lsls r0, r0, #0x10
	cmp r0, #0
	blt _0809A294
	bl sub_8024130
	b _0809A2C6
	.align 2, 0
_0809A26C: .4byte gUnknown_080D9018
_0809A270: .4byte gPressedKeys
_0809A274:
	lsls r0, r3, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x78
	bls _0809A2D6
	bl sub_8024130
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0809A2C6
	b _0809A2A4
_0809A288:
	bl sub_8024208
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bge _0809A29A
_0809A294:
	bl sub_802613C
	b _0809A2D6
_0809A29A:
	cmp r0, #0
	bne _0809A2C6
	ldrh r0, [r4, #0x14]
	cmp r0, #0x78
	bls _0809A2D6
_0809A2A4:
	movs r0, #0x79
	strh r0, [r4, #0x14]
	b _0809A2D6
_0809A2AA:
	ldr r0, _0809A2DC @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _0809A2C6
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	bne _0809A2C6
	lsls r0, r3, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x78
	bls _0809A2D6
_0809A2C6:
	movs r0, #2
	strb r0, [r4, #2]
	movs r0, #0x17
	strb r0, [r4, #0xb]
	ldr r0, _0809A2E0 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809A2E4 @ =sub_8098508
	str r0, [r1, #8]
_0809A2D6:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809A2DC: .4byte gPressedKeys
_0809A2E0: .4byte gCurTask
_0809A2E4: .4byte sub_8098508

	thumb_func_start sub_809A2E8
sub_809A2E8: @ 0x0809A2E8
	push {r4, r5, lr}
	ldr r5, _0809A378 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldrh r0, [r4, #0xe]
	cmp r0, #0
	beq _0809A330
	ldr r2, _0809A37C @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _0809A380 @ =gWinRegs
	movs r3, #0
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	ldrh r2, [r1, #8]
	movs r0, #0x3f
	orrs r0, r2
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	orrs r0, r2
	strh r0, [r1, #0xa]
	ldr r1, _0809A384 @ =gBldRegs
	ldr r0, _0809A388 @ =0x00003FBF
	strh r0, [r1]
	strh r3, [r4, #0xe]
	strh r3, [r4, #0x10]
_0809A330:
	adds r0, r4, #0
	bl sub_809B13C
	adds r0, r4, #0
	bl sub_809ADF0
	adds r0, r4, #0
	bl sub_809AFC0
	adds r0, r4, #0
	bl sub_809B6C0
	adds r0, r4, #0
	bl sub_809B69C
	ldr r2, _0809A384 @ =gBldRegs
	ldrh r0, [r2, #4]
	cmp r0, #0xf
	bls _0809A390
	movs r1, #0
	movs r0, #0x10
	strh r0, [r2, #4]
	strh r1, [r4, #0x14]
	movs r0, #0x9b
	lsls r0, r0, #9
	str r0, [r4, #0x3c]
	str r0, [r4, #0x34]
	movs r0, #0x1d
	strb r0, [r4, #0xb]
	adds r0, r4, #0
	bl sub_809A50C
	ldr r1, [r5]
	ldr r0, _0809A38C @ =sub_809A3BC
	str r0, [r1, #8]
	b _0809A3B6
	.align 2, 0
_0809A378: .4byte gCurTask
_0809A37C: .4byte gDispCnt
_0809A380: .4byte gWinRegs
_0809A384: .4byte gBldRegs
_0809A388: .4byte 0x00003FBF
_0809A38C: .4byte sub_809A3BC
_0809A390:
	ldrh r0, [r4, #0x10]
	lsrs r0, r0, #8
	strh r0, [r2, #4]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r1, #0
	ldrh r3, [r4, #0x10]
	adds r0, r0, r3
	strh r0, [r4, #0x10]
	ldrb r0, [r4, #7]
	cmp r0, #1
	bne _0809A3B6
	adds r0, r4, #0
	bl sub_809AD08
	cmp r0, #0
	bne _0809A3B6
	bl sub_802613C
_0809A3B6:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_809A3BC
sub_809A3BC: @ 0x0809A3BC
	push {r4, r5, r6, lr}
	sub sp, #4
	ldr r0, _0809A458 @ =gCurTask
	ldr r0, [r0]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r4, r0
	ldr r1, _0809A45C @ =0x03000005
	adds r0, r4, r1
	adds r1, #6
	adds r5, r4, r1
	adds r1, #0x29
	adds r2, r4, r1
	adds r1, #4
	adds r3, r4, r1
	ldr r1, [r6, #0x20]
	str r1, [sp]
	adds r1, r5, #0
	bl sub_809BF3C
	ldr r1, _0809A460 @ =0x03000003
	adds r0, r4, r1
	adds r1, #0x39
	adds r2, r4, r1
	adds r1, #4
	adds r4, r4, r1
	ldr r1, [r6, #0x1c]
	str r1, [sp]
	adds r1, r5, #0
	adds r3, r4, #0
	bl sub_809BF3C
	movs r0, #0xe
	strb r0, [r6, #0xb]
	adds r0, r6, #0
	bl sub_809A644
	movs r0, #0xb4
	lsls r0, r0, #7
	str r0, [r6, #0x34]
	movs r0, #0x96
	lsls r0, r0, #8
	str r0, [r6, #0x3c]
	movs r0, #0xbe
	lsls r0, r0, #7
	str r0, [r6, #0x64]
	movs r0, #0x91
	lsls r0, r0, #8
	str r0, [r6, #0x6c]
	movs r0, #0xc9
	lsls r0, r0, #8
	str r0, [r6, #0x54]
	movs r0, #0xb0
	lsls r0, r0, #5
	str r0, [r6, #0x58]
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r6, #0x4c]
	ldr r1, _0809A464 @ =gUnknown_080D8F18
	ldrb r0, [r6, #5]
	adds r0, r0, r1
	ldrb r4, [r0]
	ldr r5, _0809A468 @ =gFlags
	ldr r3, [r5]
	movs r0, #0x80
	lsls r0, r0, #0xa
	ands r0, r3
	cmp r0, #0
	beq _0809A470
	lsls r0, r4, #5
	ldr r1, _0809A46C @ =gUnknown_08E2EE50
	adds r0, r0, r1
	movs r1, #0x60
	movs r2, #0x10
	bl sub_80C4564
	b _0809A48A
	.align 2, 0
_0809A458: .4byte gCurTask
_0809A45C: .4byte 0x03000005
_0809A460: .4byte 0x03000003
_0809A464: .4byte gUnknown_080D8F18
_0809A468: .4byte gFlags
_0809A46C: .4byte gUnknown_08E2EE50
_0809A470:
	ldr r2, _0809A4B0 @ =0x040000D4
	lsls r0, r4, #5
	ldr r1, _0809A4B4 @ =gUnknown_08E2EE50
	adds r0, r0, r1
	str r0, [r2]
	ldr r0, _0809A4B8 @ =gUnknown_03003430
	str r0, [r2, #4]
	ldr r0, _0809A4BC @ =0x80000010
	str r0, [r2, #8]
	ldr r0, [r2, #8]
	movs r0, #2
	orrs r3, r0
	str r3, [r5]
_0809A48A:
	ldr r0, _0809A4C0 @ =gUnknown_080D8F18
	ldrb r1, [r6, #6]
	adds r1, r1, r0
	ldrb r4, [r1]
	ldr r5, _0809A4C4 @ =gFlags
	ldr r3, [r5]
	movs r0, #0x80
	lsls r0, r0, #0xa
	ands r0, r3
	cmp r0, #0
	beq _0809A4C8
	lsls r0, r4, #5
	ldr r1, _0809A4B4 @ =gUnknown_08E2EE50
	adds r0, r0, r1
	movs r1, #0x70
	movs r2, #0x10
	bl sub_80C4564
	b _0809A4E2
	.align 2, 0
_0809A4B0: .4byte 0x040000D4
_0809A4B4: .4byte gUnknown_08E2EE50
_0809A4B8: .4byte gUnknown_03003430
_0809A4BC: .4byte 0x80000010
_0809A4C0: .4byte gUnknown_080D8F18
_0809A4C4: .4byte gFlags
_0809A4C8:
	ldr r2, _0809A4F4 @ =0x040000D4
	lsls r0, r4, #5
	ldr r1, _0809A4F8 @ =gUnknown_08E2EE50
	adds r0, r0, r1
	str r0, [r2]
	ldr r0, _0809A4FC @ =gUnknown_03003450
	str r0, [r2, #4]
	ldr r0, _0809A500 @ =0x80000010
	str r0, [r2, #8]
	ldr r0, [r2, #8]
	movs r0, #2
	orrs r3, r0
	str r3, [r5]
_0809A4E2:
	ldr r0, _0809A504 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809A508 @ =sub_809A6C0
	str r0, [r1, #8]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809A4F4: .4byte 0x040000D4
_0809A4F8: .4byte gUnknown_08E2EE50
_0809A4FC: .4byte gUnknown_03003450
_0809A500: .4byte 0x80000010
_0809A504: .4byte gCurTask
_0809A508: .4byte sub_809A6C0

	thumb_func_start sub_809A50C
sub_809A50C: @ 0x0809A50C
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	ldr r1, _0809A56C @ =gDispCnt
	ldr r2, _0809A570 @ =0x00001741
	adds r0, r2, #0
	strh r0, [r1]
	ldr r0, _0809A574 @ =gUnknown_03006230
	movs r2, #0
	strb r2, [r0, #1]
	ldr r1, _0809A578 @ =gUnknown_03003590
	strb r2, [r1, #4]
	strb r2, [r1, #5]
	movs r0, #0xff
	strb r0, [r1, #6]
	movs r0, #0x40
	strb r0, [r1, #7]
	ldr r1, _0809A57C @ =gBgCntRegs
	ldr r0, _0809A580 @ =0x0000030E
	strh r0, [r1, #2]
	ldr r0, _0809A584 @ =gBgScrollRegs
	strh r2, [r0, #4]
	strh r2, [r0, #6]
	movs r0, #0xfa
	lsls r0, r0, #1
	adds r3, r7, r0
	ldr r1, _0809A588 @ =gUnknown_080D8F18
	ldrb r0, [r7, #5]
	adds r0, r0, r1
	ldrb r4, [r0]
	ldr r0, _0809A58C @ =0x0600C000
	str r0, [r3, #4]
	strh r2, [r3, #0xa]
	ldr r0, _0809A590 @ =0x06001800
	str r0, [r3, #0xc]
	strh r2, [r3, #0x18]
	strh r2, [r3, #0x1a]
	ldr r1, _0809A594 @ =gSaveGame
	ldr r0, _0809A598 @ =gUnknown_080D946D
	adds r0, r4, r0
	ldrb r1, [r1, #0x10]
	ldrb r0, [r0]
	ands r0, r1
	cmp r0, #0
	bne _0809A5A0
	ldr r0, _0809A59C @ =gUnknown_080D8CDC
	ldrh r0, [r0, #0x20]
	b _0809A5AC
	.align 2, 0
_0809A56C: .4byte gDispCnt
_0809A570: .4byte 0x00001741
_0809A574: .4byte gUnknown_03006230
_0809A578: .4byte gUnknown_03003590
_0809A57C: .4byte gBgCntRegs
_0809A580: .4byte 0x0000030E
_0809A584: .4byte gBgScrollRegs
_0809A588: .4byte gUnknown_080D8F18
_0809A58C: .4byte 0x0600C000
_0809A590: .4byte 0x06001800
_0809A594: .4byte gSaveGame
_0809A598: .4byte gUnknown_080D946D
_0809A59C: .4byte gUnknown_080D8CDC
_0809A5A0:
	ldr r0, _0809A624 @ =gUnknown_080D8CDC
	adds r1, r4, #0
	adds r1, #0xa
	lsls r1, r1, #1
	adds r1, r1, r0
	ldrh r0, [r1]
_0809A5AC:
	strh r0, [r3, #0x1c]
	movs r6, #0
	movs r4, #0
	strh r4, [r3, #0x1e]
	strh r4, [r3, #0x20]
	strh r4, [r3, #0x22]
	strh r4, [r3, #0x24]
	movs r5, #0x10
	strh r5, [r3, #0x26]
	strh r5, [r3, #0x28]
	adds r0, r3, #0
	adds r0, #0x2a
	strb r6, [r0]
	movs r0, #1
	strh r0, [r3, #0x2e]
	adds r0, r3, #0
	bl DrawBackground
	ldr r1, _0809A628 @ =gBgCntRegs
	ldr r0, _0809A62C @ =0x00001B89
	strh r0, [r1, #4]
	ldr r0, _0809A630 @ =gBgScrollRegs
	strh r4, [r0, #8]
	strh r4, [r0, #0xa]
	movs r1, #0x8d
	lsls r1, r1, #2
	adds r0, r7, r1
	ldr r2, _0809A634 @ =gUnknown_080D8F18
	ldrb r1, [r7, #6]
	adds r1, r1, r2
	ldrb r1, [r1]
	ldr r2, _0809A638 @ =0x06008000
	str r2, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r2, _0809A63C @ =0x0600D800
	str r2, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	ldr r2, _0809A624 @ =gUnknown_080D8CDC
	adds r1, #5
	lsls r1, r1, #1
	adds r1, r1, r2
	ldrh r1, [r1]
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	strh r5, [r0, #0x26]
	strh r5, [r0, #0x28]
	ldr r2, _0809A640 @ =0x0000025E
	adds r1, r7, r2
	strb r6, [r1]
	movs r1, #6
	strh r1, [r0, #0x2e]
	bl DrawBackground
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809A624: .4byte gUnknown_080D8CDC
_0809A628: .4byte gBgCntRegs
_0809A62C: .4byte 0x00001B89
_0809A630: .4byte gBgScrollRegs
_0809A634: .4byte gUnknown_080D8F18
_0809A638: .4byte 0x06008000
_0809A63C: .4byte 0x0600D800
_0809A640: .4byte 0x0000025E

	thumb_func_start sub_809A644
sub_809A644: @ 0x0809A644
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r1, #0x8a
	lsls r1, r1, #1
	adds r0, r5, r1
	ldr r2, _0809A6B8 @ =gUnknown_080D8EF8
	ldrh r1, [r2]
	movs r4, #0
	movs r3, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r5, #0x64]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r5, #0x68]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r1, #0x40
	strh r1, [r0, #0x14]
	strh r3, [r0, #0xe]
	strh r3, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	strb r4, [r0, #0x1f]
	movs r1, #0x80
	lsls r1, r1, #0xb
	str r1, [r0, #8]
	bl UpdateSpriteAnimation
	adds r0, r5, #0
	adds r0, #0x9c
	ldrb r2, [r5, #0xb]
	subs r2, #0xd
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	ldr r3, _0809A6BC @ =gUnknown_080D8D08
	ldrb r1, [r5, #0xa]
	lsls r1, r1, #3
	adds r1, r2, r1
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrh r1, [r1]
	strh r1, [r0, #0xc]
	ldrb r1, [r5, #0xa]
	lsls r1, r1, #3
	adds r2, r2, r1
	lsls r2, r2, #3
	adds r2, r2, r3
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	bl UpdateSpriteAnimation
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809A6B8: .4byte gUnknown_080D8EF8
_0809A6BC: .4byte gUnknown_080D8D08

	thumb_func_start sub_809A6C0
sub_809A6C0: @ 0x0809A6C0
	push {r4, r5, r6, r7, lr}
	ldr r0, _0809A728 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	movs r5, #0
	ldrh r0, [r4, #0xe]
	cmp r0, #0
	beq _0809A710
	ldr r2, _0809A72C @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _0809A730 @ =gWinRegs
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	ldrh r2, [r1, #8]
	movs r0, #0x3f
	orrs r0, r2
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	orrs r0, r2
	strh r0, [r1, #0xa]
	ldr r1, _0809A734 @ =gBldRegs
	ldr r0, _0809A738 @ =0x00003FBF
	strh r0, [r1]
	movs r0, #0x10
	strh r0, [r1, #4]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r4, #0x10]
	strh r5, [r4, #0xe]
_0809A710:
	ldrb r0, [r4, #7]
	cmp r0, #1
	bne _0809A73C
	adds r0, r4, #0
	bl sub_809AD08
	cmp r0, #0
	bne _0809A73C
	bl sub_802613C
	b _0809A7FA
	.align 2, 0
_0809A728: .4byte gCurTask
_0809A72C: .4byte gDispCnt
_0809A730: .4byte gWinRegs
_0809A734: .4byte gBldRegs
_0809A738: .4byte 0x00003FBF
_0809A73C:
	adds r0, r4, #0
	bl sub_809B13C
	adds r0, r4, #0
	bl sub_809ADF0
	adds r0, r4, #0
	bl sub_809AE50
	adds r0, r4, #0
	bl sub_809AF08
	adds r0, r4, #0
	bl sub_809B69C
	adds r0, r4, #0
	bl sub_809B6C0
	adds r0, r4, #0
	movs r1, #1
	bl sub_809B424
	cmp r0, #1
	bne _0809A772
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_0809A772:
	adds r0, r4, #0
	movs r1, #1
	bl sub_809B470
	cmp r0, #1
	bne _0809A784
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_0809A784:
	adds r0, r4, #0
	movs r1, #1
	bl sub_809B4BC
	cmp r0, #1
	bne _0809A796
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_0809A796:
	adds r0, r4, #0
	movs r1, #1
	bl sub_809B548
	cmp r0, #1
	bne _0809A7A8
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_0809A7A8:
	ldr r6, _0809A7C4 @ =gBldRegs
	ldrh r7, [r6, #4]
	cmp r7, #0
	beq _0809A7CC
	ldrh r0, [r4, #0x10]
	lsrs r0, r0, #8
	strh r0, [r6, #4]
	ldr r1, _0809A7C8 @ =0xFFFFFF00
	adds r0, r1, #0
	ldrh r3, [r4, #0x10]
	adds r0, r0, r3
	strh r0, [r4, #0x10]
	b _0809A7FA
	.align 2, 0
_0809A7C4: .4byte gBldRegs
_0809A7C8: .4byte 0xFFFFFF00
_0809A7CC:
	cmp r5, #4
	bne _0809A7FA
	movs r0, #0xe
	strb r0, [r4, #0xb]
	ldrb r0, [r4, #7]
	cmp r0, #1
	bne _0809A7E0
	adds r0, r4, #0
	bl sub_809B700
_0809A7E0:
	adds r0, r4, #0
	movs r1, #0xe
	bl sub_809B704
	cmp r0, #0
	beq _0809A7FA
	movs r0, #1
	strh r0, [r4, #0xe]
	strh r7, [r6, #4]
	ldr r0, _0809A800 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809A804 @ =sub_8099758
	str r0, [r1, #8]
_0809A7FA:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809A800: .4byte gCurTask
_0809A804: .4byte sub_8099758

	thumb_func_start sub_809A808
sub_809A808: @ 0x0809A808
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r3, r6, #0
	adds r3, #0x9c
	ldr r0, _0809A834 @ =gUnknown_080D8F18
	ldrb r1, [r6, #5]
	adds r1, r1, r0
	ldrb r2, [r1]
	ldrb r1, [r6, #6]
	adds r1, r1, r0
	ldrb r0, [r1]
	cmp r2, #0
	beq _0809A826
	cmp r0, #0
	bne _0809A850
_0809A826:
	cmp r2, #2
	beq _0809A82E
	cmp r0, #2
	bne _0809A838
_0809A82E:
	movs r2, #4
	b _0809A866
	.align 2, 0
_0809A834: .4byte gUnknown_080D8F18
_0809A838:
	cmp r2, #3
	beq _0809A840
	cmp r0, #3
	bne _0809A844
_0809A840:
	movs r2, #6
	b _0809A866
_0809A844:
	cmp r2, #4
	beq _0809A84C
	cmp r0, #4
	bne _0809A864
_0809A84C:
	movs r2, #3
	b _0809A866
_0809A850:
	cmp r2, #4
	bne _0809A858
	cmp r0, #1
	beq _0809A860
_0809A858:
	cmp r2, #1
	bne _0809A864
	cmp r0, #4
	bne _0809A864
_0809A860:
	movs r2, #5
	b _0809A866
_0809A864:
	movs r2, #2
_0809A866:
	ldr r1, _0809A8C8 @ =gUnknown_080D8D08
	ldrb r0, [r6, #0xa]
	lsls r0, r0, #3
	adds r0, r2, r0
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	movs r5, #0
	movs r4, #0
	strh r0, [r3, #0xc]
	ldrb r0, [r6, #0xa]
	lsls r0, r0, #3
	adds r0, r2, r0
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrb r0, [r0, #2]
	strb r0, [r3, #0x1a]
	adds r0, r3, #0
	bl UpdateSpriteAnimation
	movs r1, #0x8a
	lsls r1, r1, #1
	adds r0, r6, r1
	ldr r2, _0809A8CC @ =gUnknown_080D8F00
	ldrh r1, [r2]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r6, #0x64]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r6, #0x68]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r1, #0x40
	strh r1, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	strb r5, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809A8C8: .4byte gUnknown_080D8D08
_0809A8CC: .4byte gUnknown_080D8F00

	thumb_func_start sub_809A8D0
sub_809A8D0: @ 0x0809A8D0
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	lsls r1, r1, #0x18
	lsrs r6, r1, #0x18
	adds r7, r6, #0
	ldr r2, _0809A954 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _0809A958 @ =gBgCntRegs
	movs r4, #0
	movs r2, #0
	movs r0, #0xe3
	lsls r0, r0, #2
	strh r0, [r1, #2]
	ldr r0, _0809A95C @ =gBgScrollRegs
	strh r2, [r0, #4]
	strh r2, [r0, #6]
	movs r1, #0xfa
	lsls r1, r1, #1
	adds r0, r5, r1
	ldr r1, _0809A960 @ =0x0600C000
	str r1, [r0, #4]
	strh r2, [r0, #0xa]
	ldr r1, _0809A964 @ =0x06001800
	str r1, [r0, #0xc]
	strh r2, [r0, #0x18]
	strh r2, [r0, #0x1a]
	ldr r3, _0809A968 @ =gUnknown_080D8CDC
	subs r1, r6, #2
	lsls r1, r1, #1
	adds r1, r1, r3
	ldrh r1, [r1]
	strh r1, [r0, #0x1c]
	strh r2, [r0, #0x1e]
	strh r2, [r0, #0x20]
	strh r2, [r0, #0x22]
	strh r2, [r0, #0x24]
	movs r1, #0x10
	strh r1, [r0, #0x26]
	strh r1, [r0, #0x28]
	ldr r2, _0809A96C @ =0x0000021E
	adds r1, r5, r2
	strb r4, [r1]
	movs r1, #5
	strh r1, [r0, #0x2e]
	bl DrawBackground
	cmp r6, #4
	beq _0809A942
	cmp r6, #6
	beq _0809A942
	cmp r6, #3
	bne _0809A974
_0809A942:
	ldr r0, _0809A970 @ =gUnknown_080D8F18
	ldrb r1, [r5, #5]
	adds r1, r1, r0
	ldrb r0, [r1]
	cmp r0, #0
	bne _0809A990
	movs r0, #0x80
	lsls r0, r0, #5
	b _0809A994
	.align 2, 0
_0809A954: .4byte gDispCnt
_0809A958: .4byte gBgCntRegs
_0809A95C: .4byte gBgScrollRegs
_0809A960: .4byte 0x0600C000
_0809A964: .4byte 0x06001800
_0809A968: .4byte gUnknown_080D8CDC
_0809A96C: .4byte 0x0000021E
_0809A970: .4byte gUnknown_080D8F18
_0809A974:
	cmp r7, #5
	bne _0809A996
	ldr r0, _0809A98C @ =gUnknown_080D8F18
	ldrb r1, [r5, #5]
	adds r1, r1, r0
	ldrb r0, [r1]
	cmp r0, #1
	bne _0809A990
	movs r0, #0x80
	lsls r0, r0, #5
	b _0809A994
	.align 2, 0
_0809A98C: .4byte gUnknown_080D8F18
_0809A990:
	movs r0, #0xf0
	lsls r0, r0, #8
_0809A994:
	strh r0, [r5, #0x18]
_0809A996:
	movs r0, #0
	strh r0, [r5, #0x12]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_809A9A0
sub_809A9A0: @ 0x0809A9A0
	push {r4, lr}
	adds r3, r0, #0
	ldr r1, _0809AA04 @ =gDispCnt
	ldr r2, _0809AA08 @ =0x00001541
	adds r0, r2, #0
	strh r0, [r1]
	ldr r1, _0809AA0C @ =gBgCntRegs
	movs r4, #0
	movs r2, #0
	ldr r0, _0809AA10 @ =0x00001B89
	strh r0, [r1, #4]
	ldr r0, _0809AA14 @ =gBgScrollRegs
	strh r2, [r0, #8]
	strh r2, [r0, #0xa]
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r3, #0x4c]
	movs r0, #0xaa
	lsls r0, r0, #7
	str r0, [r3, #0x50]
	movs r1, #0x8d
	lsls r1, r1, #2
	adds r0, r3, r1
	ldr r1, _0809AA18 @ =0x06008000
	str r1, [r0, #4]
	strh r2, [r0, #0xa]
	ldr r1, _0809AA1C @ =0x0600D800
	str r1, [r0, #0xc]
	strh r2, [r0, #0x18]
	strh r2, [r0, #0x1a]
	ldr r1, _0809AA20 @ =gUnknown_080D8CDC
	ldrh r1, [r1, #0x1e]
	strh r1, [r0, #0x1c]
	strh r2, [r0, #0x1e]
	strh r2, [r0, #0x20]
	strh r2, [r0, #0x22]
	strh r2, [r0, #0x24]
	movs r1, #0x10
	strh r1, [r0, #0x26]
	strh r1, [r0, #0x28]
	ldr r2, _0809AA24 @ =0x0000025E
	adds r3, r3, r2
	strb r4, [r3]
	movs r1, #6
	strh r1, [r0, #0x2e]
	bl DrawBackground
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809AA04: .4byte gDispCnt
_0809AA08: .4byte 0x00001541
_0809AA0C: .4byte gBgCntRegs
_0809AA10: .4byte 0x00001B89
_0809AA14: .4byte gBgScrollRegs
_0809AA18: .4byte 0x06008000
_0809AA1C: .4byte 0x0600D800
_0809AA20: .4byte gUnknown_080D8CDC
_0809AA24: .4byte 0x0000025E

	thumb_func_start sub_809AA28
sub_809AA28: @ 0x0809AA28
	push {r4, r5, r6, lr}
	ldr r6, _0809AAAC @ =gCurTask
	ldr r0, [r6]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r4, r0
	adds r0, r5, #0
	bl sub_809ADF0
	adds r0, r5, #0
	bl sub_809AE50
	adds r0, r5, #0
	bl sub_809AF08
	adds r0, r5, #0
	bl sub_809B69C
	adds r0, r5, #0
	bl sub_809B6C0
	ldrb r0, [r5, #0xb]
	cmp r0, #0xb
	bls _0809AA6E
	movs r0, #1
	strb r0, [r5, #0xb]
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r5, #0x3c]
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [r5, #0x40]
	ldrb r0, [r5, #5]
	strb r0, [r5, #3]
_0809AA6E:
	ldr r1, _0809AAB0 @ =0x0300009C
	adds r0, r4, r1
	ldr r2, _0809AAB4 @ =gUnknown_080D8D08
	ldrb r1, [r5, #0xa]
	lsls r1, r1, #6
	adds r1, r1, r2
	ldrh r1, [r1]
	movs r4, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r5, #0xa]
	lsls r1, r1, #6
	adds r1, r1, r2
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	bl UpdateSpriteAnimation
	movs r0, #4
	strb r0, [r5, #0xb]
	strh r4, [r5, #0x12]
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r5, #0x4c]
	movs r0, #0xaa
	lsls r0, r0, #7
	str r0, [r5, #0x50]
	ldr r1, [r6]
	ldr r0, _0809AAB8 @ =sub_8098DE4
	str r0, [r1, #8]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809AAAC: .4byte gCurTask
_0809AAB0: .4byte 0x0300009C
_0809AAB4: .4byte gUnknown_080D8D08
_0809AAB8: .4byte sub_8098DE4

	thumb_func_start sub_809AABC
sub_809AABC: @ 0x0809AABC
	push {r4, r5, lr}
	ldr r0, _0809AB5C @ =gCurTask
	ldr r0, [r0]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	adds r0, r4, #0
	bl sub_809ADF0
	adds r0, r4, #0
	bl sub_809AE50
	adds r0, r4, #0
	bl sub_809AF08
	adds r0, r4, #0
	bl sub_809B69C
	adds r0, r4, #0
	bl sub_809B6C0
	adds r0, r4, #0
	movs r1, #1
	bl sub_809B32C
	adds r0, r4, #0
	bl sub_809B13C
	adds r0, r4, #0
	movs r1, #1
	bl sub_809B3C4
	adds r0, r4, #0
	bl sub_809B41C
	adds r0, r4, #0
	movs r1, #1
	bl sub_809AC44
	cmp r0, #1
	bne _0809ABC8
	movs r0, #0xa0
	lsls r0, r0, #9
	str r0, [r4, #0x34]
	ldrb r0, [r4, #5]
	movs r2, #0
	strb r0, [r4, #3]
	movs r0, #0x1f
	strb r0, [r4, #0xb]
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r4, #0x3c]
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [r4, #0x40]
	ldr r0, _0809AB60 @ =0x03000234
	adds r3, r5, r0
	ldr r1, _0809AB64 @ =gUnknown_080D8F18
	ldrb r0, [r4, #5]
	adds r0, r0, r1
	ldrb r5, [r0]
	ldr r0, _0809AB68 @ =0x06008000
	str r0, [r3, #4]
	strh r2, [r3, #0xa]
	ldr r0, _0809AB6C @ =0x0600D800
	str r0, [r3, #0xc]
	strh r2, [r3, #0x18]
	strh r2, [r3, #0x1a]
	ldr r1, _0809AB70 @ =gSaveGame
	ldr r0, _0809AB74 @ =gUnknown_080D946D
	adds r0, r5, r0
	ldrb r1, [r1, #0x10]
	ldrb r0, [r0]
	ands r0, r1
	cmp r0, #0
	bne _0809AB7C
	ldr r0, _0809AB78 @ =gUnknown_080D8CDC
	ldrh r0, [r0, #0x20]
	b _0809AB86
	.align 2, 0
_0809AB5C: .4byte gCurTask
_0809AB60: .4byte 0x03000234
_0809AB64: .4byte gUnknown_080D8F18
_0809AB68: .4byte 0x06008000
_0809AB6C: .4byte 0x0600D800
_0809AB70: .4byte gSaveGame
_0809AB74: .4byte gUnknown_080D946D
_0809AB78: .4byte gUnknown_080D8CDC
_0809AB7C:
	ldr r0, _0809ABBC @ =gUnknown_080D8CDC
	adds r1, r5, #5
	lsls r1, r1, #1
	adds r1, r1, r0
	ldrh r0, [r1]
_0809AB86:
	strh r0, [r3, #0x1c]
	movs r1, #0
	movs r0, #0
	strh r0, [r3, #0x1e]
	strh r0, [r3, #0x20]
	strh r0, [r3, #0x22]
	strh r0, [r3, #0x24]
	movs r0, #0x10
	strh r0, [r3, #0x26]
	strh r0, [r3, #0x28]
	adds r0, r3, #0
	adds r0, #0x2a
	strb r1, [r0]
	movs r0, #6
	strh r0, [r3, #0x2e]
	adds r0, r3, #0
	bl DrawBackground
	movs r0, #0x91
	lsls r0, r0, #8
	str r0, [r4, #0x70]
	ldr r0, _0809ABC0 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809ABC4 @ =sub_809AA28
	str r0, [r1, #8]
	b _0809AC3C
	.align 2, 0
_0809ABBC: .4byte gUnknown_080D8CDC
_0809ABC0: .4byte gCurTask
_0809ABC4: .4byte sub_809AA28
_0809ABC8:
	ldrb r0, [r4, #7]
	cmp r0, #1
	bne _0809ABDE
	adds r0, r4, #0
	bl sub_809AD08
	cmp r0, #0
	bne _0809ABDE
	bl sub_802613C
	b _0809AC3C
_0809ABDE:
	ldr r0, _0809AC04 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	ldrb r2, [r4, #7]
	cmp r0, #0
	beq _0809AC38
	adds r0, r2, #0
	cmp r0, #0
	beq _0809AC0C
	cmp r0, #3
	beq _0809AC0C
	ldr r0, _0809AC08 @ =gMultiSioStatusFlags
	ldr r0, [r0]
	movs r1, #0x80
	ands r0, r1
	rsbs r0, r0, #0
	lsrs r0, r0, #0x1f
	b _0809AC0E
	.align 2, 0
_0809AC04: .4byte gPressedKeys
_0809AC08: .4byte gMultiSioStatusFlags
_0809AC0C:
	movs r0, #1
_0809AC0E:
	cmp r0, #0
	beq _0809AC38
	movs r0, #0xc
	strb r0, [r4, #0xb]
	lsls r0, r2, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bne _0809AC24
	adds r0, r4, #0
	bl sub_809B700
_0809AC24:
	ldr r0, _0809AC30 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809AC34 @ =sub_8099680
	str r0, [r1, #8]
	b _0809AC3C
	.align 2, 0
_0809AC30: .4byte gCurTask
_0809AC34: .4byte sub_8099680
_0809AC38:
	lsls r0, r2, #0x18
	lsrs r0, r0, #0x18
_0809AC3C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_809AC44
sub_809AC44: @ 0x0809AC44
	push {r4, r5, lr}
	adds r2, r0, #0
	lsls r1, r1, #0x18
	movs r3, #0
	cmp r1, #0
	beq _0809AC9E
	ldr r4, _0809AC6C @ =0xFFFFF820
	ldr r1, [r2, #0x34]
	ldr r0, _0809AC70 @ =0x000077FF
	cmp r1, r0
	bgt _0809AC78
	movs r5, #0xc0
	lsls r5, r5, #3
	adds r0, r1, r5
	str r0, [r2, #0x34]
	ldr r0, [r2, #0x54]
	ldr r1, _0809AC74 @ =0xFFFFFA00
	adds r0, r0, r1
	str r0, [r2, #0x54]
	b _0809AC86
	.align 2, 0
_0809AC6C: .4byte 0xFFFFF820
_0809AC70: .4byte 0x000077FF
_0809AC74: .4byte 0xFFFFFA00
_0809AC78:
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r2, #0x34]
	movs r0, #0xc9
	lsls r0, r0, #8
	str r0, [r2, #0x54]
	movs r3, #1
_0809AC86:
	ldr r0, [r2, #0x44]
	cmp r0, #0
	ble _0809AC9A
	adds r0, r0, r4
	str r0, [r2, #0x44]
	cmp r0, #0
	bge _0809ACF8
	movs r0, #0
	str r0, [r2, #0x44]
	b _0809ACF8
_0809AC9A:
	movs r0, #0
	b _0809ACF0
_0809AC9E:
	movs r4, #0xfc
	lsls r4, r4, #3
	ldr r1, [r2, #0x34]
	asrs r0, r1, #8
	cmp r0, #0x3c
	ble _0809ACC0
	ldr r5, _0809ACBC @ =0xFFFFFA00
	adds r0, r1, r5
	str r0, [r2, #0x34]
	ldr r0, [r2, #0x54]
	movs r1, #0xc0
	lsls r1, r1, #3
	adds r0, r0, r1
	str r0, [r2, #0x54]
	b _0809ACCC
	.align 2, 0
_0809ACBC: .4byte 0xFFFFFA00
_0809ACC0:
	movs r0, #0xf0
	lsls r0, r0, #6
	str r0, [r2, #0x34]
	ldr r0, _0809ACE4 @ =0x00010500
	str r0, [r2, #0x54]
	movs r3, #1
_0809ACCC:
	ldr r1, [r2, #0x44]
	ldr r0, _0809ACE8 @ =0x000077FF
	cmp r1, r0
	bgt _0809ACEC
	adds r0, r1, r4
	str r0, [r2, #0x44]
	movs r1, #0xf0
	lsls r1, r1, #7
	cmp r0, r1
	ble _0809ACF8
	str r1, [r2, #0x44]
	b _0809ACF8
	.align 2, 0
_0809ACE4: .4byte 0x00010500
_0809ACE8: .4byte 0x000077FF
_0809ACEC:
	movs r0, #0xf0
	lsls r0, r0, #7
_0809ACF0:
	str r0, [r2, #0x44]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
_0809ACF8:
	cmp r3, #2
	beq _0809AD00
	movs r0, #0
	b _0809AD02
_0809AD00:
	movs r0, #1
_0809AD02:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_809AD08
sub_809AD08: @ 0x0809AD08
	push {lr}
	adds r3, r0, #0
	movs r2, #0x20
	ldrb r0, [r3, #7]
	cmp r0, #1
	bne _0809AD1E
	ldr r0, _0809AD30 @ =gStageData
	ldrb r0, [r0, #6]
	cmp r0, #1
	bls _0809AD1E
	movs r2, #0x22
_0809AD1E:
	ldr r0, _0809AD34 @ =gMultiSioStatusFlags
	ldr r1, [r0]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _0809AD38
	movs r0, #2
	b _0809AD3A
	.align 2, 0
_0809AD30: .4byte gStageData
_0809AD34: .4byte gMultiSioStatusFlags
_0809AD38:
	movs r0, #1
_0809AD3A:
	ands r1, r0
	cmp r1, #0
	bne _0809AD42
	movs r2, #0x21
_0809AD42:
	cmp r2, #0x21
	bne _0809AD4C
	ldrh r0, [r3, #0x16]
	adds r0, #1
	strh r0, [r3, #0x16]
_0809AD4C:
	ldrh r0, [r3, #0x16]
	cmp r0, #0x77
	bls _0809AD6C
	cmp r2, #0x21
	beq _0809AD64
	cmp r2, #0x21
	bgt _0809AD60
	cmp r2, #0x20
	beq _0809AD6C
	b _0809AD68
_0809AD60:
	cmp r2, #0x22
	bne _0809AD68
_0809AD64:
	movs r0, #0
	b _0809AD6E
_0809AD68:
	movs r0, #0
	strh r0, [r3, #0x16]
_0809AD6C:
	movs r0, #1
_0809AD6E:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_809AD74
sub_809AD74: @ 0x0809AD74
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x74
	movs r0, #2
	mov sb, r0
	ldrb r0, [r5, #0xb]
	movs r1, #0x78
	cmp r0, #0xd
	bls _0809AD90
	movs r1, #0xb4
_0809AD90:
	movs r6, #0
	movs r0, #0x28
	rsbs r0, r0, #0
	adds r0, r0, r1
	mov r8, r0
	adds r7, r1, #0
	adds r7, #0x28
_0809AD9E:
	cmp r6, #0
	beq _0809ADAC
	ldr r0, [r5, #0x5c]
	asrs r0, r0, #8
	mov r1, r8
	subs r0, r1, r0
	b _0809ADB2
_0809ADAC:
	ldr r0, [r5, #0x5c]
	asrs r0, r0, #8
	adds r0, r7, r0
_0809ADB2:
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x60]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	cmp r6, #0
	beq _0809ADC8
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	b _0809ADCE
_0809ADC8:
	ldr r0, [r4, #8]
	ldr r1, _0809ADEC @ =0xFFFFFBFF
	ands r0, r1
_0809ADCE:
	str r0, [r4, #8]
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, sb
	blo _0809AD9E
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809ADEC: .4byte 0xFFFFFBFF

	thumb_func_start sub_809ADF0
sub_809ADF0: @ 0x0809ADF0
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	movs r6, #0
	adds r4, r5, #0
	adds r4, #0xc4
_0809ADFA:
	ldr r0, [r5, #0x2c]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x30]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	cmp r6, #0
	beq _0809AE18
	ldr r0, [r4, #8]
	ldr r1, _0809AE14 @ =0xFFFFFBFF
	ands r0, r1
	b _0809AE20
	.align 2, 0
_0809AE14: .4byte 0xFFFFFBFF
_0809AE18:
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
_0809AE20:
	str r0, [r4, #8]
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #1
	bls _0809ADFA
	adds r4, r5, #0
	adds r4, #0x9c
	ldr r0, [r5, #0x24]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x28]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl DisplaySprite
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_809AE50
sub_809AE50: @ 0x0809AE50
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	movs r5, #0
	movs r0, #0x8a
	lsls r0, r0, #1
	adds r4, r6, r0
	movs r7, #0
_0809AE5E:
	ldr r0, [r6, #0x64]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r6, #0x68]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	strb r7, [r4, #0x1f]
	cmp r5, #0
	beq _0809AE7A
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	b _0809AE80
_0809AE7A:
	ldr r0, [r4, #8]
	ldr r1, _0809AEC0 @ =0xFFFFFBFF
	ands r0, r1
_0809AE80:
	str r0, [r4, #8]
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #1
	bls _0809AE5E
	ldrb r1, [r6, #0xa]
	rsbs r0, r1, #0
	orrs r0, r1
	lsrs r3, r0, #0x1f
	ldr r1, _0809AEC4 @ =gUnknown_080D8F18
	ldrb r0, [r6, #5]
	adds r0, r0, r1
	ldrb r2, [r0]
	adds r4, r6, #0
	adds r4, #0xec
	ldr r1, _0809AEC8 @ =gSaveGame
	ldr r0, _0809AECC @ =gUnknown_080D946D
	adds r0, r2, r0
	ldrb r1, [r1, #0x10]
	ldrb r0, [r0]
	ands r0, r1
	cmp r0, #0
	bne _0809AED4
	ldr r1, _0809AED0 @ =gUnknown_080D8E80
	lsls r0, r3, #3
	adds r0, #6
	b _0809AEDA
	.align 2, 0
_0809AEC0: .4byte 0xFFFFFBFF
_0809AEC4: .4byte gUnknown_080D8F18
_0809AEC8: .4byte gSaveGame
_0809AECC: .4byte gUnknown_080D946D
_0809AED0: .4byte gUnknown_080D8E80
_0809AED4:
	ldr r1, _0809AF04 @ =gUnknown_080D8E80
	lsls r0, r3, #3
	adds r0, r2, r0
_0809AEDA:
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r1, [r0]
	strh r1, [r4, #0xc]
	ldrb r0, [r0, #2]
	strb r0, [r4, #0x1a]
	ldr r0, [r6, #0x64]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r6, #0x68]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809AF04: .4byte gUnknown_080D8E80

	thumb_func_start sub_809AF08
sub_809AF08: @ 0x0809AF08
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	movs r5, #0
	movs r0, #0x8a
	lsls r0, r0, #1
	adds r4, r6, r0
_0809AF14:
	ldr r0, [r6, #0x6c]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r6, #0x70]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	movs r0, #1
	strb r0, [r4, #0x1f]
	cmp r5, #0
	beq _0809AF32
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	b _0809AF38
_0809AF32:
	ldr r0, [r4, #8]
	ldr r1, _0809AF78 @ =0xFFFFFBFF
	ands r0, r1
_0809AF38:
	str r0, [r4, #8]
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #1
	bls _0809AF14
	ldrb r1, [r6, #0xa]
	rsbs r0, r1, #0
	orrs r0, r1
	lsrs r3, r0, #0x1f
	ldr r1, _0809AF7C @ =gUnknown_080D8F18
	ldrb r0, [r6, #6]
	adds r0, r0, r1
	ldrb r2, [r0]
	movs r0, #0x9e
	lsls r0, r0, #1
	adds r4, r6, r0
	ldr r1, _0809AF80 @ =gSaveGame
	ldr r0, _0809AF84 @ =gUnknown_080D946D
	adds r0, r2, r0
	ldrb r1, [r1, #0x10]
	ldrb r0, [r0]
	ands r0, r1
	cmp r0, #0
	bne _0809AF8C
	ldr r1, _0809AF88 @ =gUnknown_080D8E80
	lsls r0, r3, #3
	adds r0, #6
	b _0809AF92
	.align 2, 0
_0809AF78: .4byte 0xFFFFFBFF
_0809AF7C: .4byte gUnknown_080D8F18
_0809AF80: .4byte gSaveGame
_0809AF84: .4byte gUnknown_080D946D
_0809AF88: .4byte gUnknown_080D8E80
_0809AF8C:
	ldr r1, _0809AFBC @ =gUnknown_080D8E80
	lsls r0, r3, #3
	adds r0, r2, r0
_0809AF92:
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r1, [r0]
	strh r1, [r4, #0xc]
	ldrb r0, [r0, #2]
	strb r0, [r4, #0x1a]
	ldr r0, [r6, #0x6c]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r6, #0x70]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809AFBC: .4byte gUnknown_080D8E80

	thumb_func_start sub_809AFC0
sub_809AFC0: @ 0x0809AFC0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	ldrb r1, [r6, #5]
	ldrb r2, [r6, #6]
	ldrb r0, [r6, #0xa]
	cmp r0, #0
	beq _0809AFE4
	lsls r0, r1, #3
	adds r0, r0, r2
	lsls r1, r0, #1
	adds r1, r1, r0
	ldr r0, _0809AFE0 @ =gUnknown_080D8F95
	b _0809AFEE
	.align 2, 0
_0809AFE0: .4byte gUnknown_080D8F95
_0809AFE4:
	lsls r0, r1, #3
	adds r0, r0, r2
	lsls r1, r0, #1
	adds r1, r1, r0
	ldr r0, _0809B018 @ =gUnknown_080D8F1D
_0809AFEE:
	adds r7, r1, r0
	movs r5, #0
	movs r0, #0xec
	adds r0, r0, r6
	mov r8, r0
	movs r0, #0x8a
	lsls r0, r0, #1
	adds r4, r6, r0
_0809AFFE:
	movs r0, #0x78
	strh r0, [r4, #0x10]
	ldr r0, [r6, #0x68]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	cmp r5, #0
	beq _0809B01C
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	b _0809B022
	.align 2, 0
_0809B018: .4byte gUnknown_080D8F1D
_0809B01C:
	ldr r0, [r4, #8]
	ldr r1, _0809B090 @ =0xFFFFFBFF
	ands r0, r1
_0809B022:
	str r0, [r4, #8]
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #1
	bls _0809AFFE
	mov r4, r8
	ldrb r0, [r7]
	strh r0, [r4, #0x10]
	ldr r0, [r6, #0x68]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	movs r0, #0xc6
	lsls r0, r0, #1
	adds r4, r6, r0
	ldrb r0, [r7, #1]
	strh r0, [r4, #0x10]
	ldr r0, [r6, #0x68]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	movs r0, #0x9e
	lsls r0, r0, #1
	adds r4, r6, r0
	ldrb r0, [r7, #2]
	strh r0, [r4, #0x10]
	ldr r0, [r6, #0x70]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809B090: .4byte 0xFFFFFBFF

	thumb_func_start sub_809B094
sub_809B094: @ 0x0809B094
	ldr r2, _0809B0C0 @ =gBgScrollRegs
	ldr r1, [r0, #0x44]
	asrs r1, r1, #8
	strh r1, [r2]
	ldr r1, [r0, #0x48]
	asrs r1, r1, #8
	strh r1, [r2, #2]
	ldr r1, [r0, #0x54]
	asrs r1, r1, #8
	strh r1, [r2, #4]
	ldr r1, [r0, #0x58]
	asrs r1, r1, #8
	rsbs r1, r1, #0
	strh r1, [r2, #6]
	ldr r1, [r0, #0x4c]
	asrs r1, r1, #8
	strh r1, [r2, #8]
	ldr r0, [r0, #0x50]
	asrs r0, r0, #8
	rsbs r0, r0, #0
	strh r0, [r2, #0xa]
	bx lr
	.align 2, 0
_0809B0C0: .4byte gBgScrollRegs

	thumb_func_start sub_809B0C4
sub_809B0C4: @ 0x0809B0C4
	push {r4, r5, r6, lr}
	sub sp, #4
	ldr r6, _0809B100 @ =gCurTask
	ldr r0, [r6]
	ldrh r3, [r0, #6]
	movs r5, #0xc0
	lsls r5, r5, #0x12
	adds r5, r3, r5
	ldr r1, _0809B104 @ =0x03000003
	adds r0, r3, r1
	ldr r2, _0809B108 @ =0x0300000B
	adds r1, r3, r2
	ldr r4, _0809B10C @ =0x0300003C
	adds r2, r3, r4
	adds r4, #4
	adds r3, r3, r4
	ldr r4, [r5, #0x1c]
	str r4, [sp]
	bl sub_809BF3C
	str r0, [r5, #0x20]
	ldrb r0, [r5, #7]
	cmp r0, #1
	bne _0809B114
	bl sub_8024068
	ldr r1, [r6]
	ldr r0, _0809B110 @ =sub_80981A8
	b _0809B12C
	.align 2, 0
_0809B100: .4byte gCurTask
_0809B104: .4byte 0x03000003
_0809B108: .4byte 0x0300000B
_0809B10C: .4byte 0x0300003C
_0809B110: .4byte sub_80981A8
_0809B114:
	cmp r0, #2
	bne _0809B128
	bl sub_80258D4
	ldr r1, [r6]
	ldr r0, _0809B124 @ =sub_80981A8
	b _0809B12C
	.align 2, 0
_0809B124: .4byte sub_80981A8
_0809B128:
	ldr r1, [r6]
	ldr r0, _0809B138 @ =sub_80983E8
_0809B12C:
	str r0, [r1, #8]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809B138: .4byte sub_80983E8

	thumb_func_start sub_809B13C
sub_809B13C: @ 0x0809B13C
	ldrh r1, [r0, #0x12]
	adds r1, #0xc0
	strh r1, [r0, #0x12]
	movs r0, #1
	bx lr
	.align 2, 0

	thumb_func_start sub_809B148
sub_809B148: @ 0x0809B148
	push {lr}
	adds r1, r0, #0
	movs r2, #0x78
	ldrb r0, [r1, #1]
	cmp r0, #0
	bne _0809B168
	ldr r0, [r1, #0x3c]
	ldr r3, _0809B164 @ =0xFFFFF200
	adds r0, r0, r3
	str r0, [r1, #0x3c]
	lsls r2, r2, #8
	cmp r0, r2
	bgt _0809B17E
	b _0809B178
	.align 2, 0
_0809B164: .4byte 0xFFFFF200
_0809B168:
	ldr r0, [r1, #0x3c]
	movs r3, #0xe0
	lsls r3, r3, #4
	adds r0, r0, r3
	str r0, [r1, #0x3c]
	lsls r2, r2, #8
	cmp r0, r2
	blt _0809B17E
_0809B178:
	str r2, [r1, #0x3c]
	movs r0, #1
	b _0809B180
_0809B17E:
	movs r0, #0
_0809B180:
	pop {r1}
	bx r1

	thumb_func_start sub_809B184
sub_809B184: @ 0x0809B184
	push {lr}
	adds r2, r0, #0
	ldr r1, [r2, #0x68]
	movs r3, #0x91
	lsls r3, r3, #8
	cmp r1, r3
	bgt _0809B198
	str r3, [r2, #0x68]
	movs r0, #1
	b _0809B1A8
_0809B198:
	ldr r0, _0809B1AC @ =0xFFFFFA00
	adds r1, r1, r0
	str r1, [r2, #0x68]
	ldr r0, _0809B1B0 @ =0x000090FF
	cmp r1, r0
	bgt _0809B1A6
	str r3, [r2, #0x68]
_0809B1A6:
	movs r0, #0
_0809B1A8:
	pop {r1}
	bx r1
	.align 2, 0
_0809B1AC: .4byte 0xFFFFFA00
_0809B1B0: .4byte 0x000090FF

	thumb_func_start sub_809B1B4
sub_809B1B4: @ 0x0809B1B4
	push {lr}
	adds r2, r0, #0
	ldr r1, [r2, #0x70]
	movs r3, #0x91
	lsls r3, r3, #8
	cmp r1, r3
	bgt _0809B1C8
	str r3, [r2, #0x70]
	movs r0, #1
	b _0809B1D8
_0809B1C8:
	ldr r0, _0809B1DC @ =0xFFFFFA00
	adds r1, r1, r0
	str r1, [r2, #0x70]
	ldr r0, _0809B1E0 @ =0x000090FF
	cmp r1, r0
	bgt _0809B1D6
	str r3, [r2, #0x70]
_0809B1D6:
	movs r0, #0
_0809B1D8:
	pop {r1}
	bx r1
	.align 2, 0
_0809B1DC: .4byte 0xFFFFFA00
_0809B1E0: .4byte 0x000090FF

	thumb_func_start sub_809B1E4
sub_809B1E4: @ 0x0809B1E4
	push {lr}
	adds r2, r0, #0
	ldrb r0, [r2, #1]
	cmp r0, #0
	bne _0809B20C
	ldr r0, [r2, #0x3c]
	ldr r1, _0809B204 @ =0xFFFFF200
	adds r0, r0, r1
	str r0, [r2, #0x3c]
	ldr r1, _0809B208 @ =0xFFFFA600
	cmp r0, r1
	bgt _0809B22C
	movs r0, #0x96
	lsls r0, r0, #9
	b _0809B21E
	.align 2, 0
_0809B204: .4byte 0xFFFFF200
_0809B208: .4byte 0xFFFFA600
_0809B20C:
	ldr r0, [r2, #0x3c]
	movs r1, #0xe0
	lsls r1, r1, #4
	adds r0, r0, r1
	str r0, [r2, #0x3c]
	ldr r1, _0809B224 @ =0x000149FF
	cmp r0, r1
	ble _0809B22C
	ldr r0, _0809B228 @ =0xFFFFC400
_0809B21E:
	str r0, [r2, #0x3c]
	movs r0, #1
	b _0809B22E
	.align 2, 0
_0809B224: .4byte 0x000149FF
_0809B228: .4byte 0xFFFFC400
_0809B22C:
	movs r0, #0
_0809B22E:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_809B234
sub_809B234: @ 0x0809B234
	push {lr}
	adds r1, r0, #0
	ldr r2, [r1, #0x68]
	ldr r0, _0809B248 @ =0x0000B3FF
	cmp r2, r0
	ble _0809B24C
	adds r0, #1
	str r0, [r1, #0x68]
	movs r0, #1
	b _0809B256
	.align 2, 0
_0809B248: .4byte 0x0000B3FF
_0809B24C:
	movs r3, #0xc0
	lsls r3, r3, #3
	adds r0, r2, r3
	str r0, [r1, #0x68]
	movs r0, #0
_0809B256:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_809B25C
sub_809B25C: @ 0x0809B25C
	push {lr}
	adds r1, r0, #0
	ldr r2, [r1, #0x70]
	ldr r0, _0809B270 @ =0x0000B3FF
	cmp r2, r0
	ble _0809B274
	adds r0, #1
	str r0, [r1, #0x70]
	movs r0, #1
	b _0809B27E
	.align 2, 0
_0809B270: .4byte 0x0000B3FF
_0809B274:
	movs r3, #0xc0
	lsls r3, r3, #3
	adds r0, r2, r3
	str r0, [r1, #0x70]
	movs r0, #0
_0809B27E:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_809B284
sub_809B284: @ 0x0809B284
	push {lr}
	adds r1, r0, #0
	ldr r2, [r1, #0x5c]
	ldr r0, _0809B298 @ =0x000004FF
	cmp r2, r0
	bgt _0809B29C
	adds r0, r2, #0
	adds r0, #0x40
	b _0809B29E
	.align 2, 0
_0809B298: .4byte 0x000004FF
_0809B29C:
	movs r0, #0
_0809B29E:
	str r0, [r1, #0x5c]
	movs r0, #0xb4
	lsls r0, r0, #7
	str r0, [r1, #0x60]
	movs r0, #1
	pop {r1}
	bx r1

	thumb_func_start sub_809B2AC
sub_809B2AC: @ 0x0809B2AC
	push {lr}
	adds r1, r0, #0
	movs r2, #0x78
	ldrb r0, [r1, #1]
	cmp r0, #0
	bne _0809B2CC
	ldr r0, [r1, #0x4c]
	ldr r3, _0809B2C8 @ =0xFFFFF200
	adds r0, r0, r3
	str r0, [r1, #0x4c]
	lsls r2, r2, #8
	cmp r0, r2
	bgt _0809B2DE
	b _0809B2DC
	.align 2, 0
_0809B2C8: .4byte 0xFFFFF200
_0809B2CC:
	ldr r0, [r1, #0x4c]
	movs r3, #0xe0
	lsls r3, r3, #4
	adds r0, r0, r3
	str r0, [r1, #0x4c]
	lsls r2, r2, #8
	cmp r0, r2
	blt _0809B2DE
_0809B2DC:
	str r2, [r1, #0x4c]
_0809B2DE:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_809B2E4
sub_809B2E4: @ 0x0809B2E4
	push {lr}
	adds r2, r0, #0
	ldrb r0, [r2, #1]
	cmp r0, #0
	bne _0809B30C
	ldr r0, [r2, #0x4c]
	ldr r1, _0809B304 @ =0xFFFFF200
	adds r0, r0, r1
	str r0, [r2, #0x4c]
	ldr r1, _0809B308 @ =0xFFFFA600
	cmp r0, r1
	bgt _0809B320
	movs r0, #0x96
	lsls r0, r0, #9
	b _0809B31E
	.align 2, 0
_0809B304: .4byte 0xFFFFF200
_0809B308: .4byte 0xFFFFA600
_0809B30C:
	ldr r0, [r2, #0x4c]
	movs r1, #0xe0
	lsls r1, r1, #4
	adds r0, r0, r1
	str r0, [r2, #0x4c]
	ldr r1, _0809B324 @ =0x000149FF
	cmp r0, r1
	ble _0809B320
	ldr r0, _0809B328 @ =0xFFFFC400
_0809B31E:
	str r0, [r2, #0x4c]
_0809B320:
	pop {r0}
	bx r0
	.align 2, 0
_0809B324: .4byte 0x000149FF
_0809B328: .4byte 0xFFFFC400

	thumb_func_start sub_809B32C
sub_809B32C: @ 0x0809B32C
	push {r4, r5, lr}
	adds r2, r0, #0
	lsls r1, r1, #0x18
	movs r0, #0xa0
	lsls r0, r0, #3
	movs r4, #0xf0
	lsls r4, r4, #2
	adds r3, r0, r4
	movs r5, #0xd0
	lsls r5, r5, #2
	adds r4, r0, r5
	cmp r1, #0
	beq _0809B378
	ldr r1, [r2, #0x3c]
	ldr r0, _0809B358 @ =0x00012BFF
	cmp r1, r0
	ble _0809B35C
	adds r0, #1
	str r0, [r2, #0x3c]
	movs r0, #1
	b _0809B3AC
	.align 2, 0
_0809B358: .4byte 0x00012BFF
_0809B35C:
	adds r0, r1, r3
	str r0, [r2, #0x3c]
	movs r1, #0x96
	lsls r1, r1, #9
	cmp r0, r1
	ble _0809B36A
	str r1, [r2, #0x3c]
_0809B36A:
	ldr r0, [r2, #0x4c]
	adds r0, r0, r4
	str r0, [r2, #0x4c]
	cmp r0, r1
	ble _0809B3AA
	str r1, [r2, #0x4c]
	b _0809B3AA
_0809B378:
	ldr r1, [r2, #0x3c]
	movs r3, #0xb4
	lsls r3, r3, #8
	cmp r1, r3
	bgt _0809B388
	str r3, [r2, #0x3c]
	movs r0, #1
	b _0809B3AC
_0809B388:
	ldr r0, _0809B3B4 @ =0xFFFFF740
	adds r1, r1, r0
	str r1, [r2, #0x3c]
	ldr r0, _0809B3B8 @ =0x0000B3FF
	cmp r1, r0
	bgt _0809B396
	str r3, [r2, #0x3c]
_0809B396:
	ldr r0, [r2, #0x4c]
	ldr r1, _0809B3BC @ =0xFFFFF7C0
	adds r0, r0, r1
	str r0, [r2, #0x4c]
	ldr r1, _0809B3C0 @ =0x00006DFF
	cmp r0, r1
	bgt _0809B3AA
	movs r0, #0xdc
	lsls r0, r0, #7
	str r0, [r2, #0x4c]
_0809B3AA:
	movs r0, #0
_0809B3AC:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_0809B3B4: .4byte 0xFFFFF740
_0809B3B8: .4byte 0x0000B3FF
_0809B3BC: .4byte 0xFFFFF7C0
_0809B3C0: .4byte 0x00006DFF

	thumb_func_start sub_809B3C4
sub_809B3C4: @ 0x0809B3C4
	push {r4, lr}
	adds r2, r0, #0
	lsls r1, r1, #0x18
	movs r3, #0
	cmp r1, #0
	beq _0809B3F0
	ldr r1, [r2, #0x64]
	ldr r0, _0809B3E4 @ =0x000077FF
	cmp r1, r0
	bgt _0809B3E8
	movs r4, #0xc2
	lsls r4, r4, #3
	adds r0, r1, r4
	str r0, [r2, #0x64]
	b _0809B40C
	.align 2, 0
_0809B3E4: .4byte 0x000077FF
_0809B3E8:
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r2, #0x64]
	b _0809B414
_0809B3F0:
	ldr r0, [r2, #0x64]
	movs r1, #0xf0
	lsls r1, r1, #6
	cmp r0, r1
	ble _0809B408
	ldr r1, _0809B404 @ =0xFFFFF9F0
	adds r0, r0, r1
	str r0, [r2, #0x64]
	b _0809B40C
	.align 2, 0
_0809B404: .4byte 0xFFFFF9F0
_0809B408:
	str r1, [r2, #0x64]
	movs r3, #1
_0809B40C:
	cmp r3, #0
	bne _0809B414
	movs r0, #0
	b _0809B416
_0809B414:
	movs r0, #1
_0809B416:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_809B41C
sub_809B41C: @ 0x0809B41C
	ldr r1, [r0, #0x3c]
	str r1, [r0, #0x6c]
	movs r0, #1
	bx lr

	thumb_func_start sub_809B424
sub_809B424: @ 0x0809B424
	push {lr}
	adds r2, r0, #0
	lsls r1, r1, #0x18
	cmp r1, #0
	bne _0809B44E
	ldr r1, [r2, #0x34]
	ldr r0, _0809B440 @ =0x000059FF
	cmp r1, r0
	bgt _0809B444
	movs r0, #3
	lsls r0, r0, #8
	adds r0, r1, r0
	b _0809B462
	.align 2, 0
_0809B440: .4byte 0x000059FF
_0809B444:
	movs r0, #0xb4
	lsls r0, r0, #7
	str r0, [r2, #0x34]
	movs r0, #1
	b _0809B466
_0809B44E:
	ldr r0, [r2, #0x34]
	movs r1, #0xf0
	lsls r1, r1, #6
	cmp r0, r1
	bgt _0809B45E
	str r1, [r2, #0x34]
	movs r0, #1
	b _0809B466
_0809B45E:
	ldr r1, _0809B46C @ =0xFFFFFD00
	adds r0, r0, r1
_0809B462:
	str r0, [r2, #0x34]
	movs r0, #0
_0809B466:
	pop {r1}
	bx r1
	.align 2, 0
_0809B46C: .4byte 0xFFFFFD00

	thumb_func_start sub_809B470
sub_809B470: @ 0x0809B470
	push {lr}
	adds r2, r0, #0
	lsls r1, r1, #0x18
	cmp r1, #0
	bne _0809B496
	ldr r0, [r2, #0x3c]
	movs r1, #0x96
	lsls r1, r1, #8
	cmp r0, r1
	ble _0809B490
	ldr r1, _0809B48C @ =0xFFFFFD00
	adds r0, r0, r1
	b _0809B4B2
	.align 2, 0
_0809B48C: .4byte 0xFFFFFD00
_0809B490:
	str r1, [r2, #0x3c]
	movs r0, #1
	b _0809B4B6
_0809B496:
	ldr r1, [r2, #0x3c]
	ldr r0, _0809B4A8 @ =0x0000B3FF
	cmp r1, r0
	ble _0809B4AC
	adds r0, #1
	str r0, [r2, #0x3c]
	movs r0, #1
	b _0809B4B6
	.align 2, 0
_0809B4A8: .4byte 0x0000B3FF
_0809B4AC:
	movs r0, #3
	lsls r0, r0, #8
	adds r0, r1, r0
_0809B4B2:
	str r0, [r2, #0x3c]
	movs r0, #0
_0809B4B6:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_809B4BC
sub_809B4BC: @ 0x0809B4BC
	push {r4, lr}
	adds r2, r0, #0
	lsls r1, r1, #0x18
	movs r3, #0
	movs r4, #3
	cmp r1, #0
	bne _0809B4FA
	ldr r1, [r2, #0x64]
	ldr r0, _0809B4DC @ =0x00005EFF
	cmp r1, r0
	bgt _0809B4E0
	lsls r0, r4, #8
	adds r0, r1, r0
	str r0, [r2, #0x64]
	b _0809B4E8
	.align 2, 0
_0809B4DC: .4byte 0x00005EFF
_0809B4E0:
	movs r0, #0xbe
	lsls r0, r0, #7
	str r0, [r2, #0x64]
	movs r3, #1
_0809B4E8:
	ldr r1, [r2, #0x54]
	movs r0, #0xc9
	lsls r0, r0, #8
	cmp r1, r0
	ble _0809B52A
	lsls r0, r4, #8
	subs r0, r1, r0
	str r0, [r2, #0x54]
	b _0809B532
_0809B4FA:
	ldr r0, [r2, #0x64]
	movs r1, #0xf0
	lsls r1, r1, #6
	cmp r0, r1
	ble _0809B510
	ldr r1, _0809B50C @ =0xFFFFFD00
	adds r0, r0, r1
	str r0, [r2, #0x64]
	b _0809B514
	.align 2, 0
_0809B50C: .4byte 0xFFFFFD00
_0809B510:
	str r1, [r2, #0x64]
	movs r3, #1
_0809B514:
	ldr r1, [r2, #0x54]
	ldr r0, _0809B524 @ =0x000104FF
	cmp r1, r0
	bgt _0809B528
	lsls r0, r4, #8
	adds r0, r1, r0
	str r0, [r2, #0x54]
	b _0809B532
	.align 2, 0
_0809B524: .4byte 0x000104FF
_0809B528:
	ldr r0, _0809B53C @ =0x00010500
_0809B52A:
	str r0, [r2, #0x54]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
_0809B532:
	cmp r3, #2
	beq _0809B540
	movs r0, #0
	b _0809B542
	.align 2, 0
_0809B53C: .4byte 0x00010500
_0809B540:
	movs r0, #1
_0809B542:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_809B548
sub_809B548: @ 0x0809B548
	push {r4, lr}
	adds r2, r0, #0
	lsls r1, r1, #0x18
	movs r3, #0
	movs r4, #3
	cmp r1, #0
	bne _0809B584
	ldr r0, [r2, #0x6c]
	movs r1, #0x91
	lsls r1, r1, #8
	cmp r0, r1
	ble _0809B56C
	ldr r1, _0809B568 @ =0xFFFFFD00
	adds r0, r0, r1
	str r0, [r2, #0x6c]
	b _0809B570
	.align 2, 0
_0809B568: .4byte 0xFFFFFD00
_0809B56C:
	str r1, [r2, #0x6c]
	movs r3, #1
_0809B570:
	ldr r1, [r2, #0x4c]
	ldr r0, _0809B580 @ =0x0000C8FF
	cmp r1, r0
	ble _0809B5A8
	movs r0, #0xc9
	lsls r0, r0, #8
	b _0809B5B8
	.align 2, 0
_0809B580: .4byte 0x0000C8FF
_0809B584:
	ldr r1, [r2, #0x6c]
	ldr r0, _0809B594 @ =0x0000B3FF
	cmp r1, r0
	bgt _0809B598
	lsls r0, r4, #8
	adds r0, r1, r0
	str r0, [r2, #0x6c]
	b _0809B5A0
	.align 2, 0
_0809B594: .4byte 0x0000B3FF
_0809B598:
	movs r0, #0xb4
	lsls r0, r0, #8
	str r0, [r2, #0x6c]
	movs r3, #1
_0809B5A0:
	ldr r1, [r2, #0x4c]
	ldr r0, _0809B5B0 @ =0x0000B3FF
	cmp r1, r0
	bgt _0809B5B4
_0809B5A8:
	lsls r0, r4, #8
	adds r0, r1, r0
	str r0, [r2, #0x4c]
	b _0809B5C0
	.align 2, 0
_0809B5B0: .4byte 0x0000B3FF
_0809B5B4:
	movs r0, #0xb4
	lsls r0, r0, #8
_0809B5B8:
	str r0, [r2, #0x4c]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
_0809B5C0:
	cmp r3, #2
	beq _0809B5C8
	movs r0, #0
	b _0809B5CA
_0809B5C8:
	movs r0, #1
_0809B5CA:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_809B5D0
sub_809B5D0: @ 0x0809B5D0
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	movs r1, #0xfa
	lsls r1, r1, #1
	adds r0, r5, r1
	ldr r2, _0809B624 @ =gUnknown_080D8F18
	ldrb r1, [r5, #5]
	adds r1, r1, r2
	ldrb r3, [r1]
	ldr r4, _0809B628 @ =gDispCnt
	ldrh r1, [r4]
	movs r6, #0x80
	lsls r6, r6, #2
	adds r2, r6, #0
	orrs r1, r2
	strh r1, [r4]
	ldr r1, _0809B62C @ =0x0600C000
	str r1, [r0, #4]
	ldr r1, _0809B630 @ =0x06001800
	str r1, [r0, #0xc]
	ldr r1, _0809B634 @ =gUnknown_080D8CDC
	adds r3, #0xa
	lsls r3, r3, #1
	adds r3, r3, r1
	ldrh r1, [r3]
	strh r1, [r0, #0x1c]
	movs r1, #1
	strh r1, [r0, #0x2e]
	bl DrawBackground
	movs r0, #3
	strb r0, [r5, #0xb]
	ldrb r0, [r5, #7]
	cmp r0, #1
	bne _0809B61C
	adds r0, r5, #0
	bl sub_809B700
_0809B61C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809B624: .4byte gUnknown_080D8F18
_0809B628: .4byte gDispCnt
_0809B62C: .4byte 0x0600C000
_0809B630: .4byte 0x06001800
_0809B634: .4byte gUnknown_080D8CDC

	thumb_func_start sub_809B638
sub_809B638: @ 0x0809B638
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	movs r5, #0
	ldr r0, [r4, #0x3c]
	movs r6, #0xa5
	lsls r6, r6, #9
	cmp r0, r6
	bne _0809B64C
	movs r5, #1
	b _0809B660
_0809B64C:
	adds r0, r4, #0
	bl sub_809B1E4
	cmp r0, #1
	bne _0809B660
	ldrb r0, [r4, #4]
	strb r0, [r4, #3]
	movs r5, #1
	str r6, [r4, #0x3c]
	strb r0, [r4, #5]
_0809B660:
	adds r0, r5, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_809B668
sub_809B668: @ 0x0809B668
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	movs r5, #0
	ldr r0, [r4, #0x3c]
	ldr r6, _0809B67C @ =0xFFFFA600
	cmp r0, r6
	bne _0809B680
	movs r5, #1
	b _0809B694
	.align 2, 0
_0809B67C: .4byte 0xFFFFA600
_0809B680:
	adds r0, r4, #0
	bl sub_809B1E4
	cmp r0, #1
	bne _0809B694
	ldrb r0, [r4, #4]
	strb r0, [r4, #3]
	movs r5, #1
	str r6, [r4, #0x3c]
	strb r0, [r4, #5]
_0809B694:
	adds r0, r5, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_809B69C
sub_809B69C: @ 0x0809B69C
	ldr r2, _0809B6BC @ =gBgScrollRegs
	ldr r1, [r0, #0x44]
	asrs r1, r1, #8
	strh r1, [r2]
	ldr r1, [r0, #0x48]
	asrs r1, r1, #8
	strh r1, [r2, #2]
	ldr r1, [r0, #0x54]
	asrs r1, r1, #8
	strh r1, [r2, #4]
	ldr r0, [r0, #0x58]
	asrs r0, r0, #8
	rsbs r0, r0, #0
	strh r0, [r2, #6]
	bx lr
	.align 2, 0
_0809B6BC: .4byte gBgScrollRegs

	thumb_func_start sub_809B6C0
sub_809B6C0: @ 0x0809B6C0
	push {r4, lr}
	sub sp, #0x10
	ldrh r4, [r0, #0x12]
	lsrs r4, r4, #6
	ldrh r1, [r0, #0x18]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x14
	movs r2, #0x80
	lsls r2, r2, #1
	movs r3, #0x40
	str r3, [sp]
	ldr r3, [r0, #0x4c]
	lsls r3, r3, #8
	asrs r3, r3, #0x10
	str r3, [sp, #4]
	ldr r0, [r0, #0x50]
	lsls r0, r0, #8
	asrs r0, r0, #0x10
	str r0, [sp, #8]
	ldr r0, _0809B6FC @ =gBgAffineRegs
	str r0, [sp, #0xc]
	adds r0, r4, #0
	movs r3, #0x40
	bl sa2__sub_8003EE4
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809B6FC: .4byte gBgAffineRegs

	thumb_func_start sub_809B700
sub_809B700: @ 0x0809B700
	bx lr
	.align 2, 0

	thumb_func_start sub_809B704
sub_809B704: @ 0x0809B704
	push {lr}
	adds r3, r0, #0
	lsls r1, r1, #0x10
	lsrs r0, r1, #0x10
	movs r1, #0
	ldrb r2, [r3, #7]
	cmp r2, #0
	beq _0809B726
	cmp r2, #3
	beq _0809B726
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r1, r0
	bne _0809B72A
	ldrb r3, [r3, #0xb]
	cmp r1, r3
	bne _0809B72A
_0809B726:
	movs r0, #1
	b _0809B72C
_0809B72A:
	movs r0, #0
_0809B72C:
	pop {r1}
	bx r1

	thumb_func_start sub_809B730
sub_809B730: @ 0x0809B730
	push {lr}
	ldrb r0, [r0, #7]
	cmp r0, #0
	beq _0809B750
	cmp r0, #3
	beq _0809B750
	ldr r0, _0809B74C @ =gMultiSioStatusFlags
	ldr r0, [r0]
	movs r1, #0x80
	ands r0, r1
	rsbs r0, r0, #0
	lsrs r0, r0, #0x1f
	b _0809B752
	.align 2, 0
_0809B74C: .4byte gMultiSioStatusFlags
_0809B750:
	movs r0, #1
_0809B752:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_809B758
sub_809B758: @ 0x0809B758
	push {lr}
	ldrh r0, [r0, #6]
	ldr r1, _0809B76C @ =0x030000C4
	adds r0, r0, r1
	ldr r0, [r0]
	bl VramFree
	pop {r0}
	bx r0
	.align 2, 0
_0809B76C: .4byte 0x030000C4

	thumb_func_start sub_809B770
sub_809B770: @ 0x0809B770
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _0809B798 @ =gUnknown_080D8F18
	ldr r0, [r5]
	ldrb r0, [r0]
	adds r0, r0, r1
	ldrb r2, [r0]
	ldr r0, [r5, #4]
	ldrb r0, [r0]
	cmp r0, #0x15
	bls _0809B7A4
	ldr r0, _0809B79C @ =gUnknown_080D9438
	adds r0, r2, r0
	ldrb r7, [r0]
	ldr r1, _0809B7A0 @ =gUnknown_080D93EC
	b _0809B7AC
	.align 2, 0
_0809B798: .4byte gUnknown_080D8F18
_0809B79C: .4byte gUnknown_080D9438
_0809B7A0: .4byte gUnknown_080D93EC
_0809B7A4:
	ldr r0, _0809B828 @ =gUnknown_080D9432
	adds r0, r2, r0
	ldrb r7, [r0]
	ldr r1, _0809B82C @ =gUnknown_080D93D4
_0809B7AC:
	lsls r0, r2, #2
	adds r0, r0, r1
	ldr r0, [r0]
	mov r8, r0
	ldr r6, [r5, #0xc]
	movs r4, #0
	cmp r4, r7
	bhs _0809B818
	movs r0, #0
	mov sb, r0
	movs r3, #0
_0809B7C2:
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #3
	adds r0, #0x18
	adds r0, r5, r0
	str r6, [r0]
	lsls r2, r4, #3
	add r2, r8
	ldr r1, [r2, #4]
	lsls r1, r1, #5
	adds r6, r6, r1
	ldrh r1, [r2]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r5, #0x10]
	ldr r1, [r1]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r5, #0x14]
	ldr r1, [r1]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r1, #0x40
	strh r1, [r0, #0x14]
	strh r3, [r0, #0xe]
	strh r3, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	mov r1, sb
	strb r1, [r0, #0x1f]
	str r3, [r0, #8]
	str r3, [sp]
	bl UpdateSpriteAnimation
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldr r3, [sp]
	cmp r4, r7
	blo _0809B7C2
_0809B818:
	ldr r0, [r5, #4]
	ldrb r0, [r0]
	cmp r0, #0x15
	bls _0809B838
	ldr r0, _0809B830 @ =gUnknown_080D9438
	ldrb r7, [r0, #5]
	ldr r0, _0809B834 @ =gUnknown_080D93EC
	b _0809B83E
	.align 2, 0
_0809B828: .4byte gUnknown_080D9432
_0809B82C: .4byte gUnknown_080D93D4
_0809B830: .4byte gUnknown_080D9438
_0809B834: .4byte gUnknown_080D93EC
_0809B838:
	ldr r0, _0809B8C0 @ =gUnknown_080D9432
	ldrb r7, [r0, #5]
	ldr r0, _0809B8C4 @ =gUnknown_080D93D4
_0809B83E:
	ldr r0, [r0, #0x14]
	mov r8, r0
	movs r4, #0
	cmp r4, r7
	bhs _0809B8A8
	movs r0, #0
	mov sb, r0
	movs r3, #0
_0809B84E:
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #3
	movs r1, #0xd4
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r0, r5, r0
	str r6, [r0]
	lsls r2, r4, #3
	add r2, r8
	ldr r1, [r2, #4]
	lsls r1, r1, #5
	adds r6, r6, r1
	ldrh r1, [r2]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r5, #0x10]
	ldr r1, [r1]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r5, #0x14]
	ldr r1, [r1]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r1, #0x40
	strh r1, [r0, #0x14]
	strh r3, [r0, #0xe]
	strh r3, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	mov r1, sb
	strb r1, [r0, #0x1f]
	str r3, [r0, #8]
	str r3, [sp]
	bl UpdateSpriteAnimation
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldr r3, [sp]
	cmp r4, r7
	blo _0809B84E
_0809B8A8:
	ldr r0, [r5, #0xc]
	movs r1, #0xd4
	lsls r1, r1, #4
	adds r0, r0, r1
	str r0, [r5, #0xc]
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809B8C0: .4byte gUnknown_080D9432
_0809B8C4: .4byte gUnknown_080D93D4

	thumb_func_start sub_809B8C8
sub_809B8C8: @ 0x0809B8C8
	push {r4, r5, lr}
	ldr r5, _0809B91C @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_809BA58
	cmp r0, #0
	beq _0809B960
	ldr r0, [r4, #4]
	ldrb r0, [r0]
	subs r0, #0x16
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #6
	bhi _0809B8F4
	adds r0, r4, #0
	bl sub_809B970
_0809B8F4:
	ldr r0, [r4, #0x10]
	ldr r1, [r0]
	movs r2, #0xf0
	lsls r2, r2, #6
	adds r1, r1, r2
	movs r2, #0xb4
	lsls r2, r2, #9
	ldr r3, [r4, #4]
	adds r4, r0, #0
	cmp r1, r2
	bls _0809B934
	ldrb r0, [r3]
	cmp r0, #0x1d
	beq _0809B914
	cmp r0, #0x23
	bls _0809B92C
_0809B914:
	cmp r0, #0x24
	bne _0809B920
	movs r0, #0x25
	b _0809B922
	.align 2, 0
_0809B91C: .4byte gCurTask
_0809B920:
	movs r0, #0x24
_0809B922:
	strb r0, [r3]
	ldr r0, [r5]
	bl TaskDestroy
	b _0809B960
_0809B92C:
	cmp r0, #4
	bne _0809B934
	ldr r1, [r5]
	b _0809B95C
_0809B934:
	ldrb r0, [r3]
	cmp r0, #0x1f
	bne _0809B960
	ldr r0, [r4]
	movs r1, #0xf0
	lsls r1, r1, #6
	adds r0, r0, r1
	movs r1, #0xb4
	lsls r1, r1, #9
	cmp r0, r1
	bls _0809B958
	ldr r0, _0809B954 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
	b _0809B960
	.align 2, 0
_0809B954: .4byte gCurTask
_0809B958:
	ldr r0, _0809B968 @ =gCurTask
	ldr r1, [r0]
_0809B95C:
	ldr r0, _0809B96C @ =sub_809BF9C
	str r0, [r1, #8]
_0809B960:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809B968: .4byte gCurTask
_0809B96C: .4byte sub_809BF9C

	thumb_func_start sub_809B970
sub_809B970: @ 0x0809B970
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	movs r5, #0
	movs r0, #0
	ldr r2, _0809B994 @ =gStageData
	ldrb r1, [r2, #3]
	cmp r1, #4
	bhi _0809B99C
	ldr r1, _0809B998 @ =gPlayers
	adds r0, r1, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r5, r0, #0x1c
	movs r2, #0xbd
	lsls r2, r2, #1
	adds r0, r1, r2
	b _0809BA00
	.align 2, 0
_0809B994: .4byte gStageData
_0809B998: .4byte gPlayers
_0809B99C:
	cmp r1, #6
	bne _0809B9D0
	ldrb r0, [r2, #6]
	cmp r0, #0
	beq _0809B9AA
	cmp r0, #2
	bne _0809B9BC
_0809B9AA:
	ldr r0, _0809B9B8 @ =gUnknown_03001060
	adds r1, r0, #0
	adds r1, #0x4c
	ldrb r5, [r1]
	adds r0, #0x4e
	ldrb r0, [r0]
	b _0809BA06
	.align 2, 0
_0809B9B8: .4byte gUnknown_03001060
_0809B9BC:
	ldr r0, _0809B9CC @ =gUnknown_03001060
	adds r1, r0, #0
	adds r1, #0x4d
	ldrb r5, [r1]
	adds r0, #0x4f
	ldrb r0, [r0]
	b _0809BA06
	.align 2, 0
_0809B9CC: .4byte gUnknown_03001060
_0809B9D0:
	cmp r1, #5
	bne _0809BA06
	ldrb r1, [r2, #6]
	adds r2, r1, #1
	movs r4, #1
	ldr r3, _0809BA1C @ =gPlayers
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r3
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r5, r0, #0x1c
	ands r2, r4
	lsls r0, r2, #2
	adds r0, r0, r2
	lsls r0, r0, #2
	adds r0, r0, r2
	lsls r0, r0, #4
	adds r0, r0, r3
	adds r0, #0x2a
_0809BA00:
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
_0809BA06:
	cmp r5, #0
	beq _0809BA0E
	cmp r0, #0
	bne _0809BA38
_0809BA0E:
	cmp r5, #2
	beq _0809BA16
	cmp r0, #2
	bne _0809BA20
_0809BA16:
	movs r0, #2
	b _0809BA4E
	.align 2, 0
_0809BA1C: .4byte gPlayers
_0809BA20:
	cmp r5, #3
	beq _0809BA28
	cmp r0, #3
	bne _0809BA2C
_0809BA28:
	movs r0, #3
	b _0809BA4E
_0809BA2C:
	cmp r5, #4
	beq _0809BA34
	cmp r0, #4
	bne _0809BA4C
_0809BA34:
	movs r0, #4
	b _0809BA4E
_0809BA38:
	cmp r5, #4
	bne _0809BA40
	cmp r0, #1
	beq _0809BA48
_0809BA40:
	cmp r5, #1
	bne _0809BA4C
	cmp r0, #4
	bne _0809BA4C
_0809BA48:
	movs r0, #5
	b _0809BA4E
_0809BA4C:
	movs r0, #1
_0809BA4E:
	strb r0, [r6, #9]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_809BA58
sub_809BA58: @ 0x0809BA58
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	adds r6, r0, #0
	ldr r1, _0809BAD0 @ =gUnknown_080D8F18
	ldr r0, [r6]
	ldrb r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	mov r8, r0
	movs r0, #0
	str r0, [sp]
	movs r1, #0
	str r1, [sp, #4]
	movs r2, #0
	str r2, [sp, #8]
	ldr r0, _0809BAD4 @ =gStageData
	mov sl, r2
	str r1, [sp, #0xc]
	ldrb r3, [r0, #6]
	cmp r3, #1
	bgt _0809BADC
	ldr r1, [r6, #4]
	ldrb r2, [r1]
	adds r0, r2, #0
	subs r0, #0xc
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r4, r1, #0
	cmp r0, #7
	bhi _0809BAA6
	ldr r0, [r6, #0x10]
	ldr r0, [r0]
	asrs r0, r0, #8
	cmp r0, #0x78
	bgt _0809BACA
_0809BAA6:
	adds r0, r2, #0
	cmp r0, #0x13
	bls _0809BB24
	cmp r0, #0x1c
	beq _0809BB24
	ldr r0, _0809BAD8 @ =gPlayers
	lsls r1, r3, #2
	adds r1, r1, r3
	lsls r1, r1, #2
	adds r1, r1, r3
	lsls r1, r1, #4
	adds r1, r1, r0
	adds r1, #0x2a
	ldrb r0, [r1]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	cmp r8, r0
	beq _0809BB24
_0809BACA:
	movs r2, #1
	str r2, [sp, #8]
	b _0809BB24
	.align 2, 0
_0809BAD0: .4byte gUnknown_080D8F18
_0809BAD4: .4byte gStageData
_0809BAD8: .4byte gPlayers
_0809BADC:
	ldr r1, [r6, #4]
	ldrb r2, [r1]
	adds r0, r2, #0
	subs r0, #0xc
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r4, r1, #0
	cmp r0, #7
	bhi _0809BAF8
	ldr r0, [r6, #0x10]
	ldr r0, [r0]
	asrs r0, r0, #8
	cmp r0, #0x78
	bgt _0809BB20
_0809BAF8:
	adds r0, r2, #0
	cmp r0, #0x13
	bls _0809BB24
	cmp r0, #0x1c
	beq _0809BB24
	ldr r2, _0809BB5C @ =gPlayers
	movs r1, #1
	ands r1, r3
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r2
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	cmp r8, r0
	beq _0809BB24
_0809BB20:
	movs r0, #1
	str r0, [sp, #8]
_0809BB24:
	ldrb r1, [r4]
	adds r0, r1, #0
	subs r0, #0x16
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #6
	bls _0809BB34
	b _0809BC44
_0809BB34:
	adds r0, r1, #0
	subs r0, #0x19
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #2
	bhi _0809BB42
	b _0809BC50
_0809BB42:
	ldrb r0, [r6, #9]
	cmp r0, #1
	bne _0809BB4A
	b _0809BC74
_0809BB4A:
	ldrb r0, [r6, #9]
	cmp r0, #3
	beq _0809BB98
	cmp r0, #3
	bgt _0809BB60
	cmp r0, #2
	beq _0809BB6A
	b _0809BCBC
	.align 2, 0
_0809BB5C: .4byte gPlayers
_0809BB60:
	cmp r0, #4
	beq _0809BBC8
	cmp r0, #5
	beq _0809BBF8
	b _0809BCBC
_0809BB6A:
	mov r0, r8
	cmp r0, #0
	bne _0809BB84
	ldr r0, _0809BB7C @ =gUnknown_080D943E
	ldrb r0, [r0]
	str r0, [sp]
	ldr r0, _0809BB80 @ =gUnknown_080D9404
	ldr r0, [r0]
	b _0809BC26
	.align 2, 0
_0809BB7C: .4byte gUnknown_080D943E
_0809BB80: .4byte gUnknown_080D9404
_0809BB84:
	ldr r0, _0809BB90 @ =gUnknown_080D9441
	ldrb r0, [r0]
	str r0, [sp]
	ldr r0, _0809BB94 @ =gUnknown_080D9404
	ldr r0, [r0, #4]
	b _0809BC26
	.align 2, 0
_0809BB90: .4byte gUnknown_080D9441
_0809BB94: .4byte gUnknown_080D9404
_0809BB98:
	mov r1, r8
	cmp r1, #0
	bne _0809BBB4
	ldr r0, _0809BBAC @ =gUnknown_080D943E
	ldrb r0, [r0, #1]
	str r0, [sp]
	ldr r0, _0809BBB0 @ =gUnknown_080D9404
	ldr r0, [r0, #0x10]
	b _0809BC26
	.align 2, 0
_0809BBAC: .4byte gUnknown_080D943E
_0809BBB0: .4byte gUnknown_080D9404
_0809BBB4:
	ldr r0, _0809BBC0 @ =gUnknown_080D9441
	ldrb r0, [r0, #1]
	str r0, [sp]
	ldr r0, _0809BBC4 @ =gUnknown_080D9404
	ldr r0, [r0, #0x14]
	b _0809BC26
	.align 2, 0
_0809BBC0: .4byte gUnknown_080D9441
_0809BBC4: .4byte gUnknown_080D9404
_0809BBC8:
	mov r2, r8
	cmp r2, #0
	bne _0809BBE4
	ldr r0, _0809BBDC @ =gUnknown_080D943E
	ldrb r0, [r0, #2]
	str r0, [sp]
	ldr r0, _0809BBE0 @ =gUnknown_080D9404
	ldr r0, [r0, #8]
	b _0809BC26
	.align 2, 0
_0809BBDC: .4byte gUnknown_080D943E
_0809BBE0: .4byte gUnknown_080D9404
_0809BBE4:
	ldr r0, _0809BBF0 @ =gUnknown_080D9441
	ldrb r0, [r0, #2]
	str r0, [sp]
	ldr r0, _0809BBF4 @ =gUnknown_080D9404
	ldr r0, [r0, #0xc]
	b _0809BC26
	.align 2, 0
_0809BBF0: .4byte gUnknown_080D9441
_0809BBF4: .4byte gUnknown_080D9404
_0809BBF8:
	mov r0, r8
	cmp r0, #1
	bne _0809BC1C
	ldr r0, _0809BC14 @ =gUnknown_080D9444
	ldrb r1, [r0]
	str r1, [sp]
	ldrb r0, [r0, #2]
	str r0, [sp, #4]
	ldr r0, _0809BC18 @ =gUnknown_080D9404
	ldr r2, [r0, #0x1c]
	mov sl, r2
	ldr r0, [r0, #0x20]
	str r0, [sp, #0xc]
	b _0809BC28
	.align 2, 0
_0809BC14: .4byte gUnknown_080D9444
_0809BC18: .4byte gUnknown_080D9404
_0809BC1C:
	ldr r0, _0809BC3C @ =gUnknown_080D9444
	ldrb r0, [r0, #1]
	str r0, [sp]
	ldr r0, _0809BC40 @ =gUnknown_080D9404
	ldr r0, [r0, #0x18]
_0809BC26:
	mov sl, r0
_0809BC28:
	ldr r1, [r6, #0x10]
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r1]
	ldr r1, [r6, #0x14]
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [r1]
	b _0809BCBC
	.align 2, 0
_0809BC3C: .4byte gUnknown_080D9444
_0809BC40: .4byte gUnknown_080D9404
_0809BC44:
	adds r0, r1, #0
	subs r0, #0x19
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #2
	bhi _0809BC5E
_0809BC50:
	movs r0, #0
	strb r0, [r6, #9]
	str r0, [sp, #8]
	ldrb r0, [r4]
	cmp r0, #0x1b
	bne _0809BC6E
	b _0809BC6A
_0809BC5E:
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x1c
	bne _0809BC6E
	movs r1, #0
	str r1, [sp, #8]
_0809BC6A:
	movs r0, #1
	strb r0, [r6, #9]
_0809BC6E:
	ldrb r0, [r6, #9]
	cmp r0, #1
	bne _0809BC9C
_0809BC74:
	ldr r1, _0809BC94 @ =gUnknown_080D9438
	mov r2, r8
	adds r0, r2, r1
	ldrb r0, [r0]
	str r0, [sp]
	ldrb r1, [r1, #5]
	str r1, [sp, #4]
	ldr r1, _0809BC98 @ =gUnknown_080D93EC
	lsls r0, r2, #2
	adds r0, r0, r1
	ldr r0, [r0]
	mov sl, r0
	ldr r1, [r1, #0x14]
	str r1, [sp, #0xc]
	b _0809BCBC
	.align 2, 0
_0809BC94: .4byte gUnknown_080D9438
_0809BC98: .4byte gUnknown_080D93EC
_0809BC9C:
	ldr r1, _0809BD0C @ =gUnknown_080D9432
	mov r2, r8
	adds r0, r2, r1
	ldrb r0, [r0]
	str r0, [sp]
	ldrb r1, [r1, #5]
	str r1, [sp, #4]
	ldr r1, _0809BD10 @ =gUnknown_080D93D4
	lsls r0, r2, #2
	adds r0, r0, r1
	ldr r0, [r0]
	mov sl, r0
	ldr r1, [r1, #0x14]
	str r1, [sp, #0xc]
	movs r0, #0
	strb r0, [r6, #9]
_0809BCBC:
	ldr r7, [r6, #0x18]
	movs r5, #0
	ldr r0, [sp]
	cmp r5, r0
	bhs _0809BD58
	mov sb, r5
_0809BCC8:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	adds r0, #0x18
	adds r4, r6, r0
	str r7, [r4]
	lsls r1, r5, #3
	add r1, sl
	ldr r0, [r1, #4]
	lsls r0, r0, #5
	adds r7, r7, r0
	ldrh r0, [r1]
	strh r0, [r4, #0xc]
	ldrb r0, [r1, #2]
	strb r0, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	ldr r0, [r6, #0x10]
	ldr r0, [r0]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r6, #0x14]
	ldr r0, [r0]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	ldr r0, _0809BD14 @ =gPlayers
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	cmp r8, r0
	beq _0809BD18
	movs r0, #0x80
	b _0809BD1A
	.align 2, 0
_0809BD0C: .4byte gUnknown_080D9432
_0809BD10: .4byte gUnknown_080D93D4
_0809BD14: .4byte gPlayers
_0809BD18:
	movs r0, #0x40
_0809BD1A:
	strh r0, [r4, #0x14]
	mov r1, sb
	strh r1, [r4, #0xe]
	strh r1, [r4, #0x16]
	movs r0, #0x10
	strb r0, [r4, #0x1c]
	movs r2, #0
	strb r2, [r4, #0x1f]
	mov r0, sb
	str r0, [r4, #8]
	ldr r1, [sp, #8]
	cmp r1, #0
	beq _0809BD3C
	movs r0, #0x80
	lsls r0, r0, #3
	str r0, [r4, #8]
	b _0809BD40
_0809BD3C:
	ldr r2, [sp, #8]
	str r2, [r4, #8]
_0809BD40:
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	ldr r0, [sp]
	cmp r5, r0
	blo _0809BCC8
_0809BD58:
	mov r1, r8
	cmp r1, #1
	beq _0809BD60
	b _0809BE6E
_0809BD60:
	movs r5, #0
	ldr r2, [sp, #4]
	cmp r5, r2
	bhs _0809BE00
	movs r0, #0
	mov sl, r0
	movs r1, #0
	mov sb, r1
_0809BD70:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	movs r2, #0xd4
	lsls r2, r2, #1
	adds r0, r0, r2
	adds r4, r6, r0
	str r7, [r4]
	lsls r1, r5, #3
	ldr r0, [sp, #0xc]
	adds r1, r1, r0
	ldr r0, [r1, #4]
	lsls r0, r0, #5
	adds r7, r7, r0
	ldrh r0, [r1]
	strh r0, [r4, #0xc]
	ldrb r0, [r1, #2]
	strb r0, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	ldr r0, [r6, #0x10]
	ldr r0, [r0]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r6, #0x14]
	ldr r0, [r0]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	ldr r0, _0809BDBC @ =gPlayers
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	cmp r8, r0
	beq _0809BDC0
	movs r0, #0x80
	b _0809BDC2
	.align 2, 0
_0809BDBC: .4byte gPlayers
_0809BDC0:
	movs r0, #0x40
_0809BDC2:
	strh r0, [r4, #0x14]
	mov r1, sb
	strh r1, [r4, #0xe]
	strh r1, [r4, #0x16]
	movs r0, #0x10
	strb r0, [r4, #0x1c]
	mov r2, sl
	strb r2, [r4, #0x1f]
	mov r0, sb
	str r0, [r4, #8]
	ldr r1, [sp, #8]
	cmp r1, #0
	beq _0809BDE4
	movs r0, #0x80
	lsls r0, r0, #3
	str r0, [r4, #8]
	b _0809BDE8
_0809BDE4:
	ldr r2, [sp, #8]
	str r2, [r4, #8]
_0809BDE8:
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	ldr r0, [sp, #4]
	cmp r5, r0
	blo _0809BD70
_0809BE00:
	ldr r0, _0809BE44 @ =gStageData
	ldrb r0, [r0, #3]
	cmp r0, #5
	bls _0809BE0A
	b _0809BF14
_0809BE0A:
	ldr r1, _0809BE48 @ =gSaveGame
	ldr r0, _0809BE4C @ =gUnknown_080D946D
	add r0, r8
	ldrb r1, [r1, #0x10]
	ldrb r0, [r0]
	ands r0, r1
	cmp r0, #0
	bne _0809BE6E
	ldr r0, [r6, #4]
	ldrb r0, [r0]
	subs r0, #0x19
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #2
	bls _0809BE6E
	ldr r3, _0809BE50 @ =gFlags
	ldr r2, [r3]
	movs r0, #0x80
	lsls r0, r0, #0xa
	ands r0, r2
	cmp r0, #0
	beq _0809BE58
	ldr r0, _0809BE54 @ =gUnknown_080D9448
	movs r1, #0x50
	movs r2, #0x10
	bl sub_80C4564
	b _0809BE6E
	.align 2, 0
_0809BE44: .4byte gStageData
_0809BE48: .4byte gSaveGame
_0809BE4C: .4byte gUnknown_080D946D
_0809BE50: .4byte gFlags
_0809BE54: .4byte gUnknown_080D9448
_0809BE58:
	ldr r1, _0809BEA8 @ =0x040000D4
	ldr r0, _0809BEAC @ =gUnknown_080D9448
	str r0, [r1]
	ldr r0, _0809BEB0 @ =gUnknown_03003410
	str r0, [r1, #4]
	ldr r0, _0809BEB4 @ =0x80000010
	str r0, [r1, #8]
	ldr r0, [r1, #8]
	movs r0, #2
	orrs r2, r0
	str r2, [r3]
_0809BE6E:
	ldr r0, _0809BEB8 @ =gStageData
	ldrb r2, [r0, #3]
	cmp r2, #5
	bhi _0809BF14
	ldr r1, _0809BEBC @ =gSaveGame
	ldr r0, _0809BEC0 @ =gUnknown_080D946D
	add r0, r8
	ldrb r1, [r1, #0x10]
	ldrb r0, [r0]
	ands r0, r1
	cmp r0, #0
	bne _0809BF14
	ldr r0, [r6, #4]
	ldrb r1, [r0]
	adds r0, r1, #0
	subs r0, #0x19
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #2
	bls _0809BF14
	cmp r1, #0x13
	bls _0809BEC4
	cmp r2, #5
	bne _0809BEC4
	bl sub_802613C
	movs r0, #0
	b _0809BF16
	.align 2, 0
_0809BEA8: .4byte 0x040000D4
_0809BEAC: .4byte gUnknown_080D9448
_0809BEB0: .4byte gUnknown_03003410
_0809BEB4: .4byte 0x80000010
_0809BEB8: .4byte gStageData
_0809BEBC: .4byte gSaveGame
_0809BEC0: .4byte gUnknown_080D946D
_0809BEC4:
	ldr r4, _0809BEE8 @ =gFlags
	ldr r3, [r4]
	movs r0, #0x80
	lsls r0, r0, #0xa
	ands r0, r3
	cmp r0, #0
	beq _0809BEF4
	ldr r0, _0809BEEC @ =gUnknown_080D9448
	ldr r1, _0809BEF0 @ =gUnknown_080D9468
	add r1, r8
	ldrb r1, [r1]
	lsls r1, r1, #0x1c
	lsrs r1, r1, #0x18
	movs r2, #0x10
	bl sub_80C4564
	b _0809BF14
	.align 2, 0
_0809BEE8: .4byte gFlags
_0809BEEC: .4byte gUnknown_080D9448
_0809BEF0: .4byte gUnknown_080D9468
_0809BEF4:
	ldr r2, _0809BF28 @ =0x040000D4
	ldr r0, _0809BF2C @ =gUnknown_080D9448
	str r0, [r2]
	ldr r0, _0809BF30 @ =gUnknown_080D9468
	add r0, r8
	ldrb r0, [r0]
	lsls r0, r0, #5
	ldr r1, _0809BF34 @ =gObjPalette
	adds r0, r0, r1
	str r0, [r2, #4]
	ldr r0, _0809BF38 @ =0x80000010
	str r0, [r2, #8]
	ldr r0, [r2, #8]
	movs r0, #2
	orrs r3, r0
	str r3, [r4]
_0809BF14:
	movs r0, #1
_0809BF16:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0809BF28: .4byte 0x040000D4
_0809BF2C: .4byte gUnknown_080D9448
_0809BF30: .4byte gUnknown_080D9468
_0809BF34: .4byte gObjPalette
_0809BF38: .4byte 0x80000010

	thumb_func_start sub_809BF3C
sub_809BF3C: @ 0x0809BF3C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r6, r0, #0
	adds r5, r1, #0
	mov r8, r2
	mov sb, r3
	ldr r7, [sp, #0x20]
	ldr r0, _0809BF94 @ =sub_809B8C8
	movs r1, #0x9c
	lsls r1, r1, #2
	ldr r2, _0809BF98 @ =sub_809BFE4
	str r2, [sp]
	movs r2, #0xff
	movs r3, #0
	bl TaskCreate
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	movs r0, #0
	strb r0, [r4, #9]
	str r5, [r4, #4]
	str r6, [r4]
	strb r0, [r4, #8]
	mov r0, r8
	str r0, [r4, #0x10]
	mov r0, sb
	str r0, [r4, #0x14]
	str r7, [r4, #0xc]
	adds r0, r4, #0
	bl sub_809B770
	ldr r0, [r4, #0xc]
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0809BF94: .4byte sub_809B8C8
_0809BF98: .4byte sub_809BFE4

	thumb_func_start sub_809BF9C
sub_809BF9C: @ 0x0809BF9C
	push {lr}
	ldr r0, _0809BFBC @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r1, r1, r0
	ldr r2, [r1, #4]
	ldrb r0, [r2]
	cmp r0, #4
	bne _0809BFC0
	movs r0, #0
	strb r0, [r1, #8]
	movs r0, #8
	b _0809BFC6
	.align 2, 0
_0809BFBC: .4byte gCurTask
_0809BFC0:
	movs r0, #1
	strb r0, [r1, #8]
	movs r0, #0xe
_0809BFC6:
	strb r0, [r2]
	adds r0, r1, #0
	bl sub_809BA58
	ldr r0, _0809BFDC @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809BFE0 @ =sub_809B8C8
	str r0, [r1, #8]
	pop {r0}
	bx r0
	.align 2, 0
_0809BFDC: .4byte gCurTask
_0809BFE0: .4byte sub_809B8C8

	thumb_func_start sub_809BFE4
sub_809BFE4: @ 0x0809BFE4
	bx lr
	.align 2, 0

	thumb_func_start sub_809BFE8
sub_809BFE8: @ 0x0809BFE8
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r5, r0, #0
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	ldr r1, _0809C0A0 @ =gDispCnt
	ldr r2, _0809C0A4 @ =0x00001141
	adds r0, r2, #0
	strh r0, [r1]
	ldr r0, _0809C0A8 @ =sub_809C44C
	movs r1, #0xae
	lsls r1, r1, #3
	movs r2, #0x84
	lsls r2, r2, #6
	ldr r3, _0809C0AC @ =sub_809E280
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r7, r1, r0
	movs r2, #0
	str r2, [sp, #4]
	ldr r6, _0809C0B0 @ =0x040000D4
	add r0, sp, #4
	str r0, [r6]
	ldr r0, _0809C0B4 @ =gBgCntRegs
	ldrh r1, [r0, #4]
	movs r0, #0xc
	ands r0, r1
	lsls r0, r0, #0xc
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r0, r0, r1
	str r0, [r6, #4]
	ldr r0, _0809C0B8 @ =0x85000010
	str r0, [r6, #8]
	ldr r0, [r6, #8]
	ldr r4, _0809C0BC @ =gUnknown_03006230
	strb r2, [r4, #2]
	ldr r0, _0809C0C0 @ =gUnknown_03003590
	strb r2, [r0, #8]
	strb r2, [r0, #9]
	movs r1, #0xff
	strb r1, [r0, #0xa]
	movs r3, #0x40
	strb r3, [r0, #0xb]
	strb r2, [r4, #1]
	strb r2, [r0, #4]
	strb r2, [r0, #5]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #6]
	strb r3, [r0, #7]
	strb r2, [r4]
	strb r2, [r0]
	strb r2, [r0, #1]
	strb r1, [r0, #2]
	strb r3, [r0, #3]
	strb r5, [r7, #5]
	adds r0, r7, #0
	bl sub_809E078
	adds r0, r7, #0
	bl sub_809C354
	adds r0, r7, #0
	bl sub_809C274
	ldr r3, _0809C0C4 @ =gFlags
	ldr r2, [r3]
	movs r0, #0x80
	lsls r0, r0, #9
	ands r0, r2
	cmp r0, #0
	beq _0809C0D0
	ldr r1, _0809C0C8 @ =gUnknown_08E2EF10
	ldr r0, _0809C0CC @ =gPlayers
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1a
	adds r0, r0, r1
	ldr r0, [r0]
	movs r1, #0
	movs r2, #0x10
	bl sub_80C460C
	b _0809C0F2
	.align 2, 0
_0809C0A0: .4byte gDispCnt
_0809C0A4: .4byte 0x00001141
_0809C0A8: .4byte sub_809C44C
_0809C0AC: .4byte sub_809E280
_0809C0B0: .4byte 0x040000D4
_0809C0B4: .4byte gBgCntRegs
_0809C0B8: .4byte 0x85000010
_0809C0BC: .4byte gUnknown_03006230
_0809C0C0: .4byte gUnknown_03003590
_0809C0C4: .4byte gFlags
_0809C0C8: .4byte gUnknown_08E2EF10
_0809C0CC: .4byte gPlayers
_0809C0D0:
	ldr r1, _0809C120 @ =gUnknown_08E2EF10
	ldr r0, _0809C124 @ =gPlayers
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1a
	adds r0, r0, r1
	ldr r0, [r0]
	str r0, [r6]
	ldr r0, _0809C128 @ =gBgPalette
	str r0, [r6, #4]
	ldr r0, _0809C12C @ =0x80000010
	str r0, [r6, #8]
	ldr r0, [r6, #8]
	movs r0, #1
	orrs r2, r0
	str r2, [r3]
_0809C0F2:
	ldr r4, _0809C130 @ =gFlags
	ldr r3, [r4]
	movs r0, #0x80
	lsls r0, r0, #9
	ands r0, r3
	cmp r0, #0
	beq _0809C134
	ldr r1, _0809C120 @ =gUnknown_08E2EF10
	ldr r0, _0809C124 @ =gPlayers
	movs r2, #0xbd
	lsls r2, r2, #1
	adds r0, r0, r2
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1a
	adds r0, r0, r1
	ldr r0, [r0]
	movs r1, #0x10
	movs r2, #0x10
	bl sub_80C460C
	b _0809C15C
	.align 2, 0
_0809C120: .4byte gUnknown_08E2EF10
_0809C124: .4byte gPlayers
_0809C128: .4byte gBgPalette
_0809C12C: .4byte 0x80000010
_0809C130: .4byte gFlags
_0809C134:
	ldr r1, _0809C188 @ =0x040000D4
	ldr r2, _0809C18C @ =gUnknown_08E2EF10
	ldr r0, _0809C190 @ =gPlayers
	movs r5, #0xbd
	lsls r5, r5, #1
	adds r0, r0, r5
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1a
	adds r0, r0, r2
	ldr r0, [r0]
	str r0, [r1]
	ldr r0, _0809C194 @ =gUnknown_03003D50
	str r0, [r1, #4]
	ldr r0, _0809C198 @ =0x80000010
	str r0, [r1, #8]
	ldr r0, [r1, #8]
	movs r0, #1
	orrs r3, r0
	str r3, [r4]
_0809C15C:
	ldr r4, _0809C19C @ =gFlags
	ldr r3, [r4]
	movs r0, #0x80
	lsls r0, r0, #9
	ands r0, r3
	cmp r0, #0
	beq _0809C1A4
	ldr r1, _0809C18C @ =gUnknown_08E2EF10
	ldr r0, _0809C190 @ =gPlayers
	ldr r2, _0809C1A0 @ =0x000002CA
	adds r0, r0, r2
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1a
	adds r0, r0, r1
	ldr r0, [r0]
	movs r1, #0x20
	movs r2, #0x10
	bl sub_80C460C
	b _0809C1CA
	.align 2, 0
_0809C188: .4byte 0x040000D4
_0809C18C: .4byte gUnknown_08E2EF10
_0809C190: .4byte gPlayers
_0809C194: .4byte gUnknown_03003D50
_0809C198: .4byte 0x80000010
_0809C19C: .4byte gFlags
_0809C1A0: .4byte 0x000002CA
_0809C1A4:
	ldr r1, _0809C1F4 @ =0x040000D4
	ldr r2, _0809C1F8 @ =gUnknown_08E2EF10
	ldr r0, _0809C1FC @ =gPlayers
	ldr r5, _0809C200 @ =0x000002CA
	adds r0, r0, r5
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1a
	adds r0, r0, r2
	ldr r0, [r0]
	str r0, [r1]
	ldr r0, _0809C204 @ =gUnknown_03003D70
	str r0, [r1, #4]
	ldr r0, _0809C208 @ =0x80000010
	str r0, [r1, #8]
	ldr r0, [r1, #8]
	movs r0, #1
	orrs r3, r0
	str r3, [r4]
_0809C1CA:
	ldr r4, _0809C20C @ =gFlags
	ldr r3, [r4]
	movs r0, #0x80
	lsls r0, r0, #9
	ands r0, r3
	cmp r0, #0
	beq _0809C214
	ldr r1, _0809C1F8 @ =gUnknown_08E2EF10
	ldr r0, _0809C1FC @ =gPlayers
	ldr r2, _0809C210 @ =0x0000041A
	adds r0, r0, r2
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1a
	adds r0, r0, r1
	ldr r0, [r0]
	movs r1, #0x30
	movs r2, #0x10
	bl sub_80C460C
	b _0809C23A
	.align 2, 0
_0809C1F4: .4byte 0x040000D4
_0809C1F8: .4byte gUnknown_08E2EF10
_0809C1FC: .4byte gPlayers
_0809C200: .4byte 0x000002CA
_0809C204: .4byte gUnknown_03003D70
_0809C208: .4byte 0x80000010
_0809C20C: .4byte gFlags
_0809C210: .4byte 0x0000041A
_0809C214:
	ldr r1, _0809C24C @ =0x040000D4
	ldr r2, _0809C250 @ =gUnknown_08E2EF10
	ldr r0, _0809C254 @ =gPlayers
	ldr r5, _0809C258 @ =0x0000041A
	adds r0, r0, r5
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1a
	adds r0, r0, r2
	ldr r0, [r0]
	str r0, [r1]
	ldr r0, _0809C25C @ =gUnknown_03003D90
	str r0, [r1, #4]
	ldr r0, _0809C260 @ =0x80000010
	str r0, [r1, #8]
	ldr r0, [r1, #8]
	movs r0, #1
	orrs r3, r0
	str r3, [r4]
_0809C23A:
	bl m4aMPlayAllStop
	ldrb r0, [r7, #5]
	cmp r0, #0
	bne _0809C264
	movs r0, #0x45
	bl m4aSongNumStart
	b _0809C26A
	.align 2, 0
_0809C24C: .4byte 0x040000D4
_0809C250: .4byte gUnknown_08E2EF10
_0809C254: .4byte gPlayers
_0809C258: .4byte 0x0000041A
_0809C25C: .4byte gUnknown_03003D90
_0809C260: .4byte 0x80000010
_0809C264:
	movs r0, #0x46
	bl m4aSongNumStart
_0809C26A:
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_809C274
sub_809C274: @ 0x0809C274
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r1, r0, #0
	movs r5, #0
	ldr r0, _0809C334 @ =0x00009803
	ldr r2, _0809C338 @ =gBgCntRegs
	strh r0, [r2]
	ldr r6, _0809C33C @ =gBgScrollRegs
	strh r5, [r6]
	strh r5, [r6, #2]
	movs r0, #0xa6
	lsls r0, r0, #3
	adds r4, r1, r0
	movs r7, #0xc0
	lsls r7, r7, #0x13
	str r7, [r4, #4]
	strh r5, [r4, #0xa]
	ldr r2, _0809C340 @ =0x0600C000
	mov sl, r2
	str r2, [r4, #0xc]
	strh r5, [r4, #0x18]
	strh r5, [r4, #0x1a]
	ldr r0, _0809C344 @ =0x00000175
	mov sb, r0
	mov r2, sb
	strh r2, [r4, #0x1c]
	strh r5, [r4, #0x1e]
	strh r5, [r4, #0x20]
	strh r5, [r4, #0x22]
	strh r5, [r4, #0x24]
	movs r0, #0x1e
	mov r8, r0
	mov r2, r8
	strh r2, [r4, #0x26]
	movs r0, #0x28
	strh r0, [r4, #0x28]
	ldr r0, _0809C348 @ =0x0000055A
	adds r1, r1, r0
	movs r2, #0
	strb r2, [r1]
	strh r5, [r4, #0x2e]
	adds r0, r4, #0
	str r1, [sp, #4]
	bl DrawBackground
	movs r0, #0x98
	lsls r0, r0, #8
	ldr r2, _0809C338 @ =gBgCntRegs
	strh r0, [r2, #2]
	strh r5, [r6, #4]
	movs r0, #0xa0
	strh r0, [r6, #6]
	str r7, [r4, #4]
	strh r5, [r4, #0xa]
	mov r0, sl
	str r0, [r4, #0xc]
	strh r5, [r4, #0x18]
	strh r5, [r4, #0x1a]
	mov r2, sb
	strh r2, [r4, #0x1c]
	strh r5, [r4, #0x1e]
	strh r5, [r4, #0x20]
	strh r5, [r4, #0x22]
	strh r5, [r4, #0x24]
	mov r0, r8
	strh r0, [r4, #0x26]
	movs r0, #0x50
	strh r0, [r4, #0x28]
	ldr r1, [sp, #4]
	movs r2, #0
	strb r2, [r1]
	movs r0, #1
	strh r0, [r4, #0x2e]
	adds r0, r4, #0
	bl DrawBackground
	mov r1, sp
	movs r0, #0xd
	strh r0, [r1]
	ldr r1, _0809C34C @ =0x0600C7FC
	ldr r2, _0809C350 @ =0x01000002
	mov r0, sp
	bl CpuSet
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809C334: .4byte 0x00009803
_0809C338: .4byte gBgCntRegs
_0809C33C: .4byte gBgScrollRegs
_0809C340: .4byte 0x0600C000
_0809C344: .4byte 0x00000175
_0809C348: .4byte 0x0000055A
_0809C34C: .4byte 0x0600C7FC
_0809C350: .4byte 0x01000002

	thumb_func_start sub_809C354
sub_809C354: @ 0x0809C354
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r6, r0, #0
	ldr r0, _0809C440 @ =0x06010000
	mov r8, r0
	movs r5, #0
_0809C368:
	movs r4, #0
	adds r1, r6, r5
	ldrb r0, [r1]
	ldr r2, _0809C444 @ =gUnknown_080D9618
	adds r0, r0, r2
	adds r2, r5, #1
	str r2, [sp]
	ldrb r0, [r0]
	cmp r4, r0
	bhs _0809C422
	adds r3, r1, #0
	mov sl, r4
	movs r0, #0x80
	lsls r0, r0, #5
	mov sb, r0
	lsls r7, r5, #3
_0809C388:
	lsls r1, r5, #2
	adds r1, r1, r5
	lsls r1, r1, #6
	adds r1, #0x30
	adds r1, r6, r1
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #3
	adds r2, r1, r0
	ldr r1, _0809C448 @ =gUnknown_080D9564
	ldrb r0, [r3]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	mov r1, r8
	str r1, [r2]
	lsls r1, r4, #3
	adds r1, r1, r0
	ldr r0, [r1, #4]
	lsls r0, r0, #5
	add r8, r0
	ldrh r0, [r1]
	strh r0, [r2, #0xc]
	ldrb r0, [r1, #2]
	strb r0, [r2, #0x1a]
	movs r0, #0xff
	strb r0, [r2, #0x1b]
	adds r0, r6, #0
	adds r0, #0x10
	adds r0, r0, r7
	ldr r0, [r0]
	asrs r0, r0, #8
	strh r0, [r2, #0x10]
	adds r0, r6, #0
	adds r0, #0x14
	adds r0, r0, r7
	ldr r0, [r0]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	movs r0, #0xa0
	lsls r0, r0, #2
	strh r0, [r2, #0x14]
	mov r0, sl
	strh r0, [r2, #0xe]
	strh r0, [r2, #0x16]
	movs r0, #0x10
	strb r0, [r2, #0x1c]
	movs r1, #0
	strb r1, [r2, #0x1f]
	mov r0, sb
	str r0, [r2, #8]
	movs r0, #1
	ands r0, r5
	cmp r0, #0
	beq _0809C400
	movs r0, #0x80
	lsls r0, r0, #3
	mov r1, sb
	orrs r0, r1
	str r0, [r2, #8]
_0809C400:
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r2, #0x20]
	adds r0, r2, #0
	str r3, [sp, #4]
	bl UpdateSpriteAnimation
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldr r3, [sp, #4]
	ldrb r0, [r3]
	ldr r2, _0809C444 @ =gUnknown_080D9618
	adds r0, r0, r2
	ldrb r0, [r0]
	cmp r4, r0
	blo _0809C388
_0809C422:
	ldr r1, [sp]
	lsls r0, r1, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #3
	bls _0809C368
	mov r2, r8
	str r2, [r6, #0xc]
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809C440: .4byte 0x06010000
_0809C444: .4byte gUnknown_080D9618
_0809C448: .4byte gUnknown_080D9564

	thumb_func_start sub_809C44C
sub_809C44C: @ 0x0809C44C
	push {r4, r5, r6, r7, lr}
	ldr r0, _0809C484 @ =gStageData
	ldrb r4, [r0, #6]
	bl sub_802610C
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0809C4A0
	ldr r1, _0809C488 @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _0809C48C @ =gBackgroundsCopyQueueCursor
	ldr r0, _0809C490 @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _0809C494 @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _0809C498 @ =gVramGraphicsCopyCursor
	ldr r0, _0809C49C @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	movs r0, #3
	bl sub_80A1A4C
	b _0809C52E
	.align 2, 0
_0809C484: .4byte gStageData
_0809C488: .4byte 0x0000FFFF
_0809C48C: .4byte gBackgroundsCopyQueueCursor
_0809C490: .4byte gBackgroundsCopyQueueIndex
_0809C494: .4byte gUnknown_03006840
_0809C498: .4byte gVramGraphicsCopyCursor
_0809C49C: .4byte gVramGraphicsCopyQueueIndex
_0809C4A0:
	ldr r5, _0809C4F4 @ =gPlayers
	adds r3, r4, #0
	lsls r0, r3, #2
	adds r0, r0, r3
	lsls r0, r0, #2
	adds r0, r0, r3
	lsls r0, r0, #4
	adds r0, r0, r5
	adds r0, #0x2b
	ldrb r2, [r0]
	movs r4, #0x1d
	rsbs r4, r4, #0
	adds r1, r4, #0
	ands r1, r2
	movs r2, #4
	orrs r1, r2
	strb r1, [r0]
	movs r6, #0
	ldr r0, _0809C4F8 @ =gCurTask
	mov ip, r0
	ldr r7, _0809C4FC @ =sub_809C534
_0809C4CA:
	cmp r3, r6
	beq _0809C51E
	ldr r0, _0809C500 @ =gUnknown_03001060
	ldrb r0, [r0, #7]
	asrs r0, r6
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _0809C504
	lsls r0, r6, #2
	adds r0, r0, r6
	lsls r0, r0, #2
	adds r0, r0, r6
	lsls r0, r0, #4
	adds r0, r0, r5
	adds r0, #0x2b
	ldrb r2, [r0]
	adds r1, r4, #0
	ands r1, r2
	movs r2, #0xc
	b _0809C51A
	.align 2, 0
_0809C4F4: .4byte gPlayers
_0809C4F8: .4byte gCurTask
_0809C4FC: .4byte sub_809C534
_0809C500: .4byte gUnknown_03001060
_0809C504:
	lsls r0, r6, #2
	adds r0, r0, r6
	lsls r0, r0, #2
	adds r0, r0, r6
	lsls r0, r0, #4
	adds r0, r0, r5
	adds r0, #0x2b
	ldrb r2, [r0]
	adds r1, r4, #0
	ands r1, r2
	movs r2, #8
_0809C51A:
	orrs r1, r2
	strb r1, [r0]
_0809C51E:
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #3
	bls _0809C4CA
	mov r1, ip
	ldr r0, [r1]
	str r7, [r0, #8]
_0809C52E:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_809C534
sub_809C534: @ 0x0809C534
	push {r4, r5, lr}
	ldr r5, _0809C574 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	bl sub_802610C
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0809C590
	ldr r1, _0809C578 @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _0809C57C @ =gBackgroundsCopyQueueCursor
	ldr r0, _0809C580 @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _0809C584 @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _0809C588 @ =gVramGraphicsCopyCursor
	ldr r0, _0809C58C @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	movs r0, #3
	bl sub_80A1A4C
	b _0809C616
	.align 2, 0
_0809C574: .4byte gCurTask
_0809C578: .4byte 0x0000FFFF
_0809C57C: .4byte gBackgroundsCopyQueueCursor
_0809C580: .4byte gBackgroundsCopyQueueIndex
_0809C584: .4byte gUnknown_03006840
_0809C588: .4byte gVramGraphicsCopyCursor
_0809C58C: .4byte gVramGraphicsCopyQueueIndex
_0809C590:
	ldrh r0, [r4, #6]
	cmp r0, #0
	bne _0809C5D2
	ldr r2, _0809C5F8 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _0809C5FC @ =gWinRegs
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	ldrh r2, [r1, #8]
	movs r0, #0x3f
	orrs r0, r2
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	orrs r0, r2
	strh r0, [r1, #0xa]
	ldr r1, _0809C600 @ =gBldRegs
	ldr r0, _0809C604 @ =0x00003FFF
	strh r0, [r1]
	movs r0, #0x10
	strh r0, [r1, #4]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r4, #8]
	movs r0, #1
	strh r0, [r4, #6]
_0809C5D2:
	adds r0, r4, #0
	bl sub_809C810
	adds r0, r4, #0
	bl sub_809C8C4
	ldr r1, _0809C600 @ =gBldRegs
	ldrh r0, [r1, #4]
	cmp r0, #0
	beq _0809C60C
	ldrh r0, [r4, #8]
	lsrs r0, r0, #8
	strh r0, [r1, #4]
	ldr r1, _0809C608 @ =0xFFFFFF00
	adds r0, r1, #0
	ldrh r3, [r4, #8]
	adds r0, r0, r3
	strh r0, [r4, #8]
	b _0809C616
	.align 2, 0
_0809C5F8: .4byte gDispCnt
_0809C5FC: .4byte gWinRegs
_0809C600: .4byte gBldRegs
_0809C604: .4byte 0x00003FFF
_0809C608: .4byte 0xFFFFFF00
_0809C60C:
	strh r0, [r4, #6]
	strh r0, [r1, #4]
	ldr r1, [r5]
	ldr r0, _0809C61C @ =sub_809E0D4
	str r0, [r1, #8]
_0809C616:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809C61C: .4byte sub_809E0D4

	thumb_func_start sub_809C620
sub_809C620: @ 0x0809C620
	push {r4, r5, r6, r7, lr}
	ldr r0, _0809C660 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	bl sub_802610C
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0809C67C
	ldr r1, _0809C664 @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _0809C668 @ =gBackgroundsCopyQueueCursor
	ldr r0, _0809C66C @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _0809C670 @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _0809C674 @ =gVramGraphicsCopyCursor
	ldr r0, _0809C678 @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	movs r0, #3
	bl sub_80A1A4C
	b _0809C702
	.align 2, 0
_0809C660: .4byte gCurTask
_0809C664: .4byte 0x0000FFFF
_0809C668: .4byte gBackgroundsCopyQueueCursor
_0809C66C: .4byte gBackgroundsCopyQueueIndex
_0809C670: .4byte gUnknown_03006840
_0809C674: .4byte gVramGraphicsCopyCursor
_0809C678: .4byte gVramGraphicsCopyQueueIndex
_0809C67C:
	adds r0, r4, #0
	bl sub_809C8C4
	ldrb r1, [r4, #4]
	cmp r1, #0xa
	beq _0809C69C
	cmp r1, #9
	bne _0809C692
	ldrb r0, [r4, #5]
	cmp r0, #0
	bne _0809C69C
_0809C692:
	cmp r1, #0xb
	bne _0809C6B0
	ldrb r0, [r4, #5]
	cmp r0, #0
	beq _0809C6B0
_0809C69C:
	ldr r0, _0809C6A8 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809C6AC @ =sub_809C71C
	str r0, [r1, #8]
	b _0809C702
	.align 2, 0
_0809C6A8: .4byte gCurTask
_0809C6AC: .4byte sub_809C71C
_0809C6B0:
	ldrb r1, [r4, #4]
	cmp r1, #0
	bne _0809C702
	movs r0, #0
	strh r1, [r4, #0xa]
	strh r1, [r4, #6]
	strh r1, [r4, #8]
	strb r0, [r4, #4]
	movs r2, #0
	ldr r6, _0809C708 @ =gCurTask
	ldr r7, _0809C70C @ =sub_809E0D4
	ldr r5, _0809C710 @ =gUnknown_030010AC
	ldr r3, _0809C714 @ =gUnknown_080D961D
_0809C6CA:
	adds r0, r2, r5
	ldrb r0, [r0]
	adds r1, r4, r2
	adds r0, r0, r3
	ldrb r0, [r0]
	strb r0, [r1]
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #3
	bls _0809C6CA
	ldr r0, _0809C718 @ =0xFFFF7E00
	str r0, [r4, #0x10]
	movs r2, #0xa0
	lsls r2, r2, #7
	str r2, [r4, #0x14]
	str r0, [r4, #0x20]
	movs r1, #0xa0
	lsls r1, r1, #8
	str r1, [r4, #0x24]
	movs r0, #0xb9
	lsls r0, r0, #9
	str r0, [r4, #0x18]
	str r2, [r4, #0x1c]
	str r0, [r4, #0x28]
	str r1, [r4, #0x2c]
	ldr r0, [r6]
	str r7, [r0, #8]
_0809C702:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809C708: .4byte gCurTask
_0809C70C: .4byte sub_809E0D4
_0809C710: .4byte gUnknown_030010AC
_0809C714: .4byte gUnknown_080D961D
_0809C718: .4byte 0xFFFF7E00

	thumb_func_start sub_809C71C
sub_809C71C: @ 0x0809C71C
	push {r4, r5, lr}
	ldr r5, _0809C75C @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	bl sub_802610C
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0809C778
	ldr r1, _0809C760 @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _0809C764 @ =gBackgroundsCopyQueueCursor
	ldr r0, _0809C768 @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _0809C76C @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _0809C770 @ =gVramGraphicsCopyCursor
	ldr r0, _0809C774 @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	movs r0, #3
	bl sub_80A1A4C
	b _0809C804
	.align 2, 0
_0809C75C: .4byte gCurTask
_0809C760: .4byte 0x0000FFFF
_0809C764: .4byte gBackgroundsCopyQueueCursor
_0809C768: .4byte gBackgroundsCopyQueueIndex
_0809C76C: .4byte gUnknown_03006840
_0809C770: .4byte gVramGraphicsCopyCursor
_0809C774: .4byte gVramGraphicsCopyQueueIndex
_0809C778:
	ldrh r0, [r4, #6]
	cmp r0, #0
	bne _0809C7B6
	ldr r2, _0809C7D8 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _0809C7DC @ =gWinRegs
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	ldrh r2, [r1, #8]
	movs r0, #0x3f
	orrs r0, r2
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	orrs r0, r2
	strh r0, [r1, #0xa]
	ldr r1, _0809C7E0 @ =gBldRegs
	ldr r0, _0809C7E4 @ =0x00003FFF
	strh r0, [r1]
	ldrh r0, [r1, #4]
	lsls r0, r0, #8
	strh r0, [r4, #8]
	movs r0, #1
	strh r0, [r4, #6]
_0809C7B6:
	adds r0, r4, #0
	bl sub_809C8C4
	ldr r1, _0809C7E0 @ =gBldRegs
	ldrh r0, [r1, #4]
	cmp r0, #0xf
	bhi _0809C7F6
	ldrh r0, [r4, #8]
	lsrs r0, r0, #8
	strh r0, [r1, #4]
	ldrb r0, [r4, #4]
	cmp r0, #0xb
	bne _0809C7E8
	ldrh r0, [r4, #8]
	adds r0, #0x20
	strh r0, [r4, #8]
	b _0809C804
	.align 2, 0
_0809C7D8: .4byte gDispCnt
_0809C7DC: .4byte gWinRegs
_0809C7E0: .4byte gBldRegs
_0809C7E4: .4byte 0x00003FFF
_0809C7E8:
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r1, #0
	ldrh r3, [r4, #8]
	adds r0, r0, r3
	strh r0, [r4, #8]
	b _0809C804
_0809C7F6:
	movs r0, #0x10
	strh r0, [r1, #4]
	movs r0, #0xa
	strb r0, [r4, #4]
	ldr r1, [r5]
	ldr r0, _0809C80C @ =sub_809E164
	str r0, [r1, #8]
_0809C804:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809C80C: .4byte sub_809E164

	thumb_func_start sub_809C810
sub_809C810: @ 0x0809C810
	push {r4, lr}
	adds r2, r0, #0
	movs r3, #0
	ldr r1, [r2, #0x10]
	ldr r0, _0809C834 @ =0x000077FF
	cmp r1, r0
	bgt _0809C838
	movs r4, #0xc0
	lsls r4, r4, #4
	adds r0, r1, r4
	str r0, [r2, #0x10]
	movs r1, #0xf0
	lsls r1, r1, #7
	cmp r0, r1
	ble _0809C840
	str r1, [r2, #0x10]
	b _0809C83E
	.align 2, 0
_0809C834: .4byte 0x000077FF
_0809C838:
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r2, #0x10]
_0809C83E:
	movs r3, #1
_0809C840:
	ldr r1, [r2, #0x20]
	ldr r0, _0809C85C @ =0x000077FF
	cmp r1, r0
	bgt _0809C860
	movs r4, #0xf0
	lsls r4, r4, #3
	adds r0, r1, r4
	str r0, [r2, #0x20]
	movs r1, #0xf0
	lsls r1, r1, #7
	cmp r0, r1
	ble _0809C86C
	str r1, [r2, #0x20]
	b _0809C866
	.align 2, 0
_0809C85C: .4byte 0x000077FF
_0809C860:
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r2, #0x20]
_0809C866:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
_0809C86C:
	ldr r1, [r2, #0x18]
	movs r4, #0xf0
	lsls r4, r4, #7
	cmp r1, r4
	ble _0809C882
	ldr r0, _0809C8B0 @ =0xFFFFF700
	adds r1, r1, r0
	str r1, [r2, #0x18]
	ldr r0, _0809C8B4 @ =0x000077FF
	cmp r1, r0
	bgt _0809C88A
_0809C882:
	str r4, [r2, #0x18]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
_0809C88A:
	ldr r1, [r2, #0x28]
	movs r4, #0xf0
	lsls r4, r4, #7
	cmp r1, r4
	ble _0809C8A0
	ldr r0, _0809C8B8 @ =0xFFFFF900
	adds r1, r1, r0
	str r1, [r2, #0x28]
	ldr r0, _0809C8B4 @ =0x000077FF
	cmp r1, r0
	bgt _0809C8A8
_0809C8A0:
	str r4, [r2, #0x28]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
_0809C8A8:
	cmp r3, #4
	beq _0809C8BC
	movs r0, #0
	b _0809C8BE
	.align 2, 0
_0809C8B0: .4byte 0xFFFFF700
_0809C8B4: .4byte 0x000077FF
_0809C8B8: .4byte 0xFFFFF900
_0809C8BC:
	movs r0, #1
_0809C8BE:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_809C8C4
sub_809C8C4: @ 0x0809C8C4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r6, r0, #0
	movs r5, #0
_0809C8D4:
	movs r4, #0
	adds r1, r6, r5
	ldrb r0, [r1]
	ldr r2, _0809C928 @ =gUnknown_080D9618
	adds r0, r0, r2
	mov sb, r1
	adds r1, r5, #1
	mov sl, r1
	ldrb r0, [r0]
	cmp r4, r0
	bhs _0809C950
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #6
	adds r0, #0x30
	adds r0, r0, r6
	mov r8, r0
	lsls r7, r5, #3
	adds r0, r6, #0
	adds r0, #0x10
	adds r3, r0, r7
_0809C8FE:
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #3
	mov r2, r8
	adds r1, r2, r0
	ldr r0, [r3]
	asrs r2, r0, #8
	strh r2, [r1, #0x10]
	adds r0, r6, #0
	adds r0, #0x14
	adds r0, r0, r7
	ldr r0, [r0]
	asrs r0, r0, #8
	strh r0, [r1, #0x12]
	movs r0, #1
	ands r0, r5
	cmp r0, #0
	bne _0809C92C
	adds r0, r2, #0
	subs r0, #0x78
	b _0809C930
	.align 2, 0
_0809C928: .4byte gUnknown_080D9618
_0809C92C:
	adds r0, r2, #0
	adds r0, #0x78
_0809C930:
	strh r0, [r1, #0x10]
	adds r0, r1, #0
	str r3, [sp]
	bl DisplaySprite
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	mov r1, sb
	ldrb r0, [r1]
	ldr r2, _0809C96C @ =gUnknown_080D9618
	adds r0, r0, r2
	ldr r3, [sp]
	ldrb r0, [r0]
	cmp r4, r0
	blo _0809C8FE
_0809C950:
	mov r1, sl
	lsls r0, r1, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #3
	bls _0809C8D4
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809C96C: .4byte gUnknown_080D9618

	thumb_func_start sub_809C970
sub_809C970: @ 0x0809C970
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	mov r8, r0
	mov sl, r1
	ldr r0, _0809CA4C @ =sub_809E284
	movs r2, #0x84
	lsls r2, r2, #6
	ldr r1, _0809CA50 @ =sub_809E3B4
	str r1, [sp]
	movs r1, #0x60
	movs r3, #0
	bl TaskCreate
	ldrh r4, [r0, #6]
	movs r5, #0xc0
	lsls r5, r5, #0x12
	adds r5, r4, r5
	movs r6, #0
	strh r6, [r5, #6]
	movs r0, #0
	strb r0, [r5, #4]
	mov r1, sl
	str r1, [r5]
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r5, #8]
	ldr r0, _0809CA54 @ =0xFFFFC400
	str r0, [r5, #0xc]
	ldr r1, _0809CA58 @ =0x03000038
	adds r0, r4, r1
	mov r1, r8
	str r1, [r0]
	ldr r2, _0809CA5C @ =gUnknown_080D9624
	ldr r1, [r2, #4]
	lsls r1, r1, #5
	add r8, r1
	ldrh r1, [r2]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r5, #8]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r5, #0xc]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r1, #0x80
	lsls r1, r1, #2
	mov sb, r1
	mov r1, sb
	strh r1, [r0, #0x14]
	strh r6, [r0, #0xe]
	strh r6, [r0, #0x16]
	movs r7, #0x10
	strb r7, [r0, #0x1c]
	movs r1, #0
	strb r1, [r0, #0x1f]
	str r6, [r0, #8]
	movs r1, #1
	rsbs r1, r1, #0
	mov sl, r1
	str r1, [r0, #0x20]
	str r2, [sp, #4]
	bl UpdateSpriteAnimation
	ldr r0, _0809CA60 @ =0x03000010
	adds r4, r4, r0
	mov r1, r8
	str r1, [r4]
	ldr r2, [sp, #4]
	ldrh r0, [r2, #8]
	strh r0, [r4, #0xc]
	ldrb r0, [r2, #0xa]
	strb r0, [r4, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r4, #0x1b]
	ldr r0, [r5, #8]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0xc]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	mov r0, sb
	strh r0, [r4, #0x14]
	strh r6, [r4, #0xe]
	strh r6, [r4, #0x16]
	strb r7, [r4, #0x1c]
	movs r1, #0
	strb r1, [r4, #0x1f]
	str r6, [r4, #8]
	mov r0, sl
	str r0, [r4, #0x20]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809CA4C: .4byte sub_809E284
_0809CA50: .4byte sub_809E3B4
_0809CA54: .4byte 0xFFFFC400
_0809CA58: .4byte 0x03000038
_0809CA5C: .4byte gUnknown_080D9624
_0809CA60: .4byte 0x03000010

	thumb_func_start sub_809CA64
sub_809CA64: @ 0x0809CA64
	push {r4, r5, lr}
	ldr r0, _0809CA88 @ =gStageData
	ldrb r5, [r0, #6]
	ldr r0, _0809CA8C @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_809E384
	cmp r5, #0
	bne _0809CA90
	bl sub_8025A90
	b _0809CA94
	.align 2, 0
_0809CA88: .4byte gStageData
_0809CA8C: .4byte gCurTask
_0809CA90:
	bl sub_80253CC
_0809CA94:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0809CADC
	ldr r1, _0809CAC4 @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _0809CAC8 @ =gBackgroundsCopyQueueCursor
	ldr r0, _0809CACC @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _0809CAD0 @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _0809CAD4 @ =gVramGraphicsCopyCursor
	ldr r0, _0809CAD8 @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	movs r0, #3
	bl sub_80A1A4C
	b _0809CB20
	.align 2, 0
_0809CAC4: .4byte 0x0000FFFF
_0809CAC8: .4byte gBackgroundsCopyQueueCursor
_0809CACC: .4byte gBackgroundsCopyQueueIndex
_0809CAD0: .4byte gUnknown_03006840
_0809CAD4: .4byte gVramGraphicsCopyCursor
_0809CAD8: .4byte gVramGraphicsCopyQueueIndex
_0809CADC:
	ldrb r0, [r4, #4]
	cmp r0, #8
	bhi _0809CAE6
	adds r0, #1
	b _0809CAE8
_0809CAE6:
	movs r0, #9
_0809CAE8:
	strb r0, [r4, #4]
	ldr r1, _0809CB0C @ =gUnknown_080D9634
	ldrb r0, [r4, #4]
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #8
	str r0, [r4, #0xc]
	ldrb r0, [r4, #4]
	cmp r0, #9
	bne _0809CB20
	adds r0, r5, #0
	cmp r0, #0
	bne _0809CB18
	strh r0, [r4, #6]
	ldr r0, _0809CB10 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809CB14 @ =sub_809CB30
	b _0809CB1E
	.align 2, 0
_0809CB0C: .4byte gUnknown_080D9634
_0809CB10: .4byte gCurTask
_0809CB14: .4byte sub_809CB30
_0809CB18:
	ldr r0, _0809CB28 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809CB2C @ =sub_809E1E8
_0809CB1E:
	str r0, [r1, #8]
_0809CB20:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809CB28: .4byte gCurTask
_0809CB2C: .4byte sub_809E1E8

	thumb_func_start sub_809CB30
sub_809CB30: @ 0x0809CB30
	push {r4, r5, r6, r7, lr}
	ldr r0, _0809CB80 @ =gStageData
	ldrb r4, [r0, #6]
	ldr r7, _0809CB84 @ =gCurTask
	ldr r0, [r7]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	adds r0, r5, #0
	bl sub_809E384
	cmp r4, #0
	bne _0809CB54
	bl sub_8025A90
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
_0809CB54:
	lsls r0, r6, #0x10
	cmp r0, #0
	bge _0809CBA0
	ldr r1, _0809CB88 @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _0809CB8C @ =gBackgroundsCopyQueueCursor
	ldr r0, _0809CB90 @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _0809CB94 @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _0809CB98 @ =gVramGraphicsCopyCursor
	ldr r0, _0809CB9C @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	movs r0, #3
	bl sub_80A1A4C
	b _0809CBDA
	.align 2, 0
_0809CB80: .4byte gStageData
_0809CB84: .4byte gCurTask
_0809CB88: .4byte 0x0000FFFF
_0809CB8C: .4byte gBackgroundsCopyQueueCursor
_0809CB90: .4byte gBackgroundsCopyQueueIndex
_0809CB94: .4byte gUnknown_03006840
_0809CB98: .4byte gVramGraphicsCopyCursor
_0809CB9C: .4byte gVramGraphicsCopyQueueIndex
_0809CBA0:
	cmp r4, #0
	bne _0809CBDA
	ldrh r0, [r5, #6]
	adds r0, #1
	strh r0, [r5, #6]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x3c
	bls _0809CBCC
	ldr r0, _0809CBC8 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0809CBCC
	movs r0, #0x6a
	bl m4aSongNumStart
	ldr r1, [r7]
	b _0809CBD6
	.align 2, 0
_0809CBC8: .4byte gPressedKeys
_0809CBCC:
	ldrh r0, [r5, #6]
	cmp r0, #0x78
	bls _0809CBDA
	ldr r0, _0809CBE0 @ =gCurTask
	ldr r1, [r0]
_0809CBD6:
	ldr r0, _0809CBE4 @ =sub_809E1E8
	str r0, [r1, #8]
_0809CBDA:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809CBE0: .4byte gCurTask
_0809CBE4: .4byte sub_809E1E8

	thumb_func_start sub_809CBE8
sub_809CBE8: @ 0x0809CBE8
	push {r4, r5, lr}
	sub sp, #4
	ldr r5, _0809CC58 @ =gCurTask
	ldr r0, [r5]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	bl sub_80260F0
	ldr r2, _0809CC5C @ =gDispCnt
	ldrh r1, [r2]
	ldr r0, _0809CC60 @ =0x00009FFF
	ands r0, r1
	strh r0, [r2]
	ldr r1, _0809CC64 @ =gBldRegs
	movs r3, #0
	movs r0, #0
	strh r0, [r1]
	strh r0, [r1, #2]
	strh r0, [r1, #4]
	str r0, [sp]
	ldr r2, _0809CC68 @ =0x040000D4
	mov r0, sp
	str r0, [r2]
	ldr r0, _0809CC6C @ =gBgCntRegs
	ldrh r1, [r0, #4]
	movs r0, #0xc
	ands r0, r1
	lsls r0, r0, #0xc
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r0, r0, r1
	str r0, [r2, #4]
	ldr r0, _0809CC70 @ =0x85000010
	str r0, [r2, #8]
	ldr r0, [r2, #8]
	ldr r0, _0809CC74 @ =gUnknown_03006230
	strb r3, [r0, #2]
	ldr r1, _0809CC78 @ =gUnknown_03003590
	strb r3, [r1, #8]
	strb r3, [r1, #9]
	movs r0, #0xff
	strb r0, [r1, #0xa]
	movs r0, #0x40
	strb r0, [r1, #0xb]
	adds r0, #0xec
	strh r0, [r4, #6]
	ldr r1, [r5]
	ldr r0, _0809CC7C @ =sub_809E31C
	str r0, [r1, #8]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809CC58: .4byte gCurTask
_0809CC5C: .4byte gDispCnt
_0809CC60: .4byte 0x00009FFF
_0809CC64: .4byte gBldRegs
_0809CC68: .4byte 0x040000D4
_0809CC6C: .4byte gBgCntRegs
_0809CC70: .4byte 0x85000010
_0809CC74: .4byte gUnknown_03006230
_0809CC78: .4byte gUnknown_03003590
_0809CC7C: .4byte sub_809E31C

	thumb_func_start sub_809CC80
sub_809CC80: @ 0x0809CC80
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r7, r0, #0
	adds r5, r1, #0
	lsls r4, r2, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _0809CDB4 @ =sub_809E3B8
	movs r2, #0x84
	lsls r2, r2, #6
	ldr r1, _0809CDB8 @ =sub_809E4DC
	str r1, [sp]
	movs r1, #0xf4
	movs r3, #0
	bl TaskCreate
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r1, r0
	movs r1, #0
	strh r1, [r6, #6]
	str r5, [r6]
	strb r4, [r6, #4]
	ldr r0, _0809CDBC @ =0xFFFFD800
	str r0, [r6, #0xc]
	str r1, [r6, #0x10]
	str r0, [r6, #0x1c]
	movs r2, #0xa0
	lsls r2, r2, #8
	str r2, [r6, #0x20]
	movs r0, #0x8c
	lsls r0, r0, #9
	str r0, [r6, #0x14]
	str r1, [r6, #0x18]
	str r0, [r6, #0x24]
	str r2, [r6, #0x28]
	movs r4, #0
_0809CCD2:
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #3
	adds r0, #0x2c
	adds r0, r6, r0
	str r7, [r0]
	lsls r3, r4, #3
	ldr r2, _0809CDC0 @ =gUnknown_080D9644
	adds r1, r3, r2
	ldr r1, [r1]
	lsls r1, r1, #5
	adds r7, r7, r1
	ldr r1, _0809CDC4 @ =gUnknown_080D9640
	adds r2, r3, r1
	ldrh r1, [r2]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	mov r2, sp
	strb r1, [r2, #4]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	adds r1, r6, #0
	adds r1, #0xc
	adds r1, r1, r3
	ldr r1, [r1]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	adds r1, r6, #0
	adds r1, #0x10
	adds r1, r1, r3
	ldr r1, [r1]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r2, #0x80
	lsls r2, r2, #2
	mov sl, r2
	mov r3, sl
	strh r3, [r0, #0x14]
	movs r1, #0
	strh r1, [r0, #0xe]
	strh r1, [r0, #0x16]
	movs r2, #0x10
	mov sb, r2
	mov r3, sb
	strb r3, [r0, #0x1c]
	strb r1, [r0, #0x1f]
	movs r2, #0x80
	lsls r2, r2, #5
	mov r8, r2
	str r2, [r0, #8]
	movs r5, #1
	rsbs r5, r5, #0
	str r5, [r0, #0x20]
	bl UpdateSpriteAnimation
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #3
	bls _0809CCD2
	adds r0, r6, #0
	adds r0, #0xcc
	str r7, [r0]
	ldr r2, _0809CDC0 @ =gUnknown_080D9644
	subs r2, #4
	ldr r1, [r2, #0x24]
	lsls r1, r1, #5
	adds r7, r7, r1
	ldrh r1, [r2, #0x20]
	movs r3, #0
	mov ip, r3
	movs r2, #0
	strh r1, [r0, #0xc]
	ldr r4, _0809CDC0 @ =gUnknown_080D9644
	ldrb r1, [r4, #0x1e]
	strb r1, [r0, #0x1a]
	ldrb r1, [r0, #0x1b]
	mov r3, sp
	ldrb r3, [r3, #4]
	orrs r1, r3
	strb r1, [r0, #0x1b]
	ldr r1, [r6, #0xc]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r6, #0x10]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	mov r4, sl
	strh r4, [r0, #0x14]
	strh r2, [r0, #0xe]
	strh r2, [r0, #0x16]
	mov r1, sb
	strb r1, [r0, #0x1c]
	mov r2, ip
	strb r2, [r0, #0x1f]
	mov r3, r8
	str r3, [r0, #8]
	str r5, [r0, #0x20]
	bl UpdateSpriteAnimation
	str r7, [r6, #8]
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809CDB4: .4byte sub_809E3B8
_0809CDB8: .4byte sub_809E4DC
_0809CDBC: .4byte 0xFFFFD800
_0809CDC0: .4byte gUnknown_080D9644
_0809CDC4: .4byte gUnknown_080D9640

	thumb_func_start sub_809CDC8
sub_809CDC8: @ 0x0809CDC8
	push {r4, lr}
	adds r2, r0, #0
	movs r3, #0
	ldr r0, [r2, #0xc]
	cmp r0, #0
	bge _0809CDE2
	movs r1, #0x80
	lsls r1, r1, #4
	adds r0, r0, r1
	str r0, [r2, #0xc]
	cmp r0, #0
	blt _0809CDE4
	str r3, [r2, #0xc]
_0809CDE2:
	movs r3, #1
_0809CDE4:
	ldr r0, [r2, #0x1c]
	cmp r0, #0
	bge _0809CDFA
	movs r1, #0x80
	lsls r1, r1, #4
	adds r0, r0, r1
	str r0, [r2, #0x1c]
	cmp r0, #0
	ble _0809CE00
	movs r0, #0
	str r0, [r2, #0x1c]
_0809CDFA:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
_0809CE00:
	ldr r1, [r2, #0x14]
	movs r4, #0xf0
	lsls r4, r4, #8
	cmp r1, r4
	ble _0809CE18
	ldr r0, _0809CE48 @ =0xFFFFF800
	adds r1, r1, r0
	str r1, [r2, #0x14]
	ldr r0, _0809CE4C @ =0x0000EFFF
	cmp r1, r0
	bgt _0809CE1E
	str r4, [r2, #0x14]
_0809CE18:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
_0809CE1E:
	ldr r1, [r2, #0x24]
	movs r0, #0xf0
	lsls r0, r0, #8
	cmp r1, r0
	ble _0809CE38
	ldr r0, _0809CE48 @ =0xFFFFF800
	adds r1, r1, r0
	str r1, [r2, #0x24]
	ldr r0, _0809CE4C @ =0x0000EFFF
	cmp r1, r0
	bgt _0809CE3E
	movs r0, #0
	str r0, [r2, #0x24]
_0809CE38:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
_0809CE3E:
	cmp r3, #4
	beq _0809CE50
	movs r0, #0
	b _0809CE52
	.align 2, 0
_0809CE48: .4byte 0xFFFFF800
_0809CE4C: .4byte 0x0000EFFF
_0809CE50:
	movs r0, #1
_0809CE52:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_809CE58
sub_809CE58: @ 0x0809CE58
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	movs r4, #0
	movs r5, #0
	ldr r7, _0809CEA4 @ =gPlayers
_0809CE62:
	lsls r0, r5, #2
	adds r2, r0, r5
	lsls r0, r2, #2
	adds r0, r0, r5
	lsls r0, r0, #4
	adds r0, r0, r7
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r1, r0, #0x1b
	lsrs r0, r1, #0x1d
	cmp r0, #2
	bne _0809CEC2
	adds r4, r6, #0
	adds r4, #0xcc
	lsls r1, r5, #3
	adds r0, r6, #0
	adds r0, #0xc
	adds r0, r0, r1
	ldr r0, [r0]
	asrs r2, r0, #8
	strh r2, [r4, #0x10]
	adds r0, r6, #0
	adds r0, #0x10
	adds r0, r0, r1
	ldr r0, [r0]
	asrs r1, r0, #8
	strh r1, [r4, #0x12]
	cmp r5, #1
	bne _0809CEA8
	adds r0, r2, #0
	subs r0, #0x28
	strh r0, [r4, #0x10]
	b _0809CEEC
	.align 2, 0
_0809CEA4: .4byte gPlayers
_0809CEA8:
	cmp r5, #2
	bne _0809CEB2
	adds r0, r1, #0
	subs r0, #0x18
	b _0809CEEA
_0809CEB2:
	cmp r5, #3
	bne _0809CEEC
	adds r0, r2, #0
	subs r0, #0x28
	strh r0, [r4, #0x10]
	adds r0, r1, #0
	subs r0, #0x18
	b _0809CEEA
_0809CEC2:
	lsrs r0, r1, #0x1d
	cmp r0, #1
	beq _0809CECC
	cmp r0, #3
	bne _0809CEEC
_0809CECC:
	lsls r0, r2, #3
	adds r0, #0x2c
	adds r4, r6, r0
	lsls r1, r5, #3
	adds r0, r6, #0
	adds r0, #0xc
	adds r0, r0, r1
	ldr r0, [r0]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	adds r0, r6, #0
	adds r0, #0x10
	adds r0, r0, r1
	ldr r0, [r0]
	asrs r0, r0, #8
_0809CEEA:
	strh r0, [r4, #0x12]
_0809CEEC:
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #3
	bls _0809CE62
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_809CF04
sub_809CF04: @ 0x0809CF04
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #4
	adds r5, r0, #0
	adds r6, r1, #0
	ldr r0, _0809CF94 @ =sub_809E4E0
	movs r2, #0x84
	lsls r2, r2, #6
	ldr r1, _0809CF98 @ =sub_809E630
	str r1, [sp]
	movs r1, #0x3c
	movs r3, #0
	bl TaskCreate
	ldrh r0, [r0, #6]
	movs r4, #0xc0
	lsls r4, r4, #0x12
	adds r4, r0, r4
	movs r1, #0
	mov r8, r1
	movs r3, #0
	strh r3, [r4, #6]
	mov r1, r8
	strb r1, [r4, #4]
	str r6, [r4]
	ldr r1, _0809CF9C @ =0xFFFF8800
	str r1, [r4, #0xc]
	movs r1, #0xa0
	lsls r1, r1, #7
	str r1, [r4, #0x10]
	ldr r1, _0809CFA0 @ =0x03000014
	adds r0, r0, r1
	str r5, [r0]
	ldr r2, _0809CFA4 @ =gUnknown_080D9668
	ldr r1, [r2, #4]
	lsls r1, r1, #5
	adds r5, r5, r1
	ldrh r1, [r2]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r4, #0xc]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r4, #0x10]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r1, #0x80
	lsls r1, r1, #2
	strh r1, [r0, #0x14]
	strh r3, [r0, #0xe]
	strh r3, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	mov r1, r8
	strb r1, [r0, #0x1f]
	movs r1, #0x80
	lsls r1, r1, #5
	str r1, [r0, #8]
	bl UpdateSpriteAnimation
	str r5, [r4, #8]
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809CF94: .4byte sub_809E4E0
_0809CF98: .4byte sub_809E630
_0809CF9C: .4byte 0xFFFF8800
_0809CFA0: .4byte 0x03000014
_0809CFA4: .4byte gUnknown_080D9668

	thumb_func_start sub_809CFA8
sub_809CFA8: @ 0x0809CFA8
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #4
	adds r5, r0, #0
	adds r6, r1, #0
	ldr r0, _0809D038 @ =sub_809D04C
	movs r2, #0x84
	lsls r2, r2, #6
	ldr r1, _0809D03C @ =sub_809E688
	str r1, [sp]
	movs r1, #0x3c
	movs r3, #0
	bl TaskCreate
	ldrh r0, [r0, #6]
	movs r4, #0xc0
	lsls r4, r4, #0x12
	adds r4, r0, r4
	movs r1, #0
	mov r8, r1
	movs r3, #0
	strh r3, [r4, #6]
	mov r1, r8
	strb r1, [r4, #4]
	str r6, [r4]
	ldr r1, _0809D040 @ =0xFFFF8800
	str r1, [r4, #0xc]
	movs r1, #0xa0
	lsls r1, r1, #7
	str r1, [r4, #0x10]
	ldr r1, _0809D044 @ =0x03000014
	adds r0, r0, r1
	str r5, [r0]
	ldr r2, _0809D048 @ =gUnknown_080D9678
	ldr r1, [r2, #0x1c]
	lsls r1, r1, #5
	adds r5, r5, r1
	ldrh r1, [r2, #0x18]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #0x1a]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r4, #0xc]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r4, #0x10]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r1, #0xe0
	lsls r1, r1, #1
	strh r1, [r0, #0x14]
	strh r3, [r0, #0xe]
	strh r3, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	mov r1, r8
	strb r1, [r0, #0x1f]
	movs r1, #0x80
	lsls r1, r1, #5
	str r1, [r0, #8]
	bl UpdateSpriteAnimation
	str r5, [r4, #8]
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809D038: .4byte sub_809D04C
_0809D03C: .4byte sub_809E688
_0809D040: .4byte 0xFFFF8800
_0809D044: .4byte 0x03000014
_0809D048: .4byte gUnknown_080D9678

	thumb_func_start sub_809D04C
sub_809D04C: @ 0x0809D04C
	push {r4, r5, r6, r7, lr}
	ldr r6, _0809D090 @ =gMultiSioSend
	ldr r0, _0809D094 @ =gStageData
	ldrb r5, [r0, #6]
	ldr r7, _0809D098 @ =gCurTask
	ldr r0, [r7]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	bl sub_802610C
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0809D0B4
	ldr r1, _0809D09C @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _0809D0A0 @ =gBackgroundsCopyQueueCursor
	ldr r0, _0809D0A4 @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _0809D0A8 @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _0809D0AC @ =gVramGraphicsCopyCursor
	ldr r0, _0809D0B0 @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	movs r0, #3
	bl sub_80A1A4C
	b _0809D13C
	.align 2, 0
_0809D090: .4byte gMultiSioSend
_0809D094: .4byte gStageData
_0809D098: .4byte gCurTask
_0809D09C: .4byte 0x0000FFFF
_0809D0A0: .4byte gBackgroundsCopyQueueCursor
_0809D0A4: .4byte gBackgroundsCopyQueueIndex
_0809D0A8: .4byte gUnknown_03006840
_0809D0AC: .4byte gVramGraphicsCopyCursor
_0809D0B0: .4byte gVramGraphicsCopyQueueIndex
_0809D0B4:
	adds r0, r4, #0
	bl sub_809E66C
	adds r0, r4, #0
	bl sub_809E634
	adds r1, r0, #0
	cmp r1, #1
	bne _0809D13C
	cmp r5, #0
	bne _0809D0FC
	ldr r0, _0809D0D8 @ =gPressedKeys
	ldrh r2, [r0]
	ands r1, r2
	cmp r1, #0
	beq _0809D0E0
	ldr r0, _0809D0DC @ =0x00006613
	b _0809D0EA
	.align 2, 0
_0809D0D8: .4byte gPressedKeys
_0809D0DC: .4byte 0x00006613
_0809D0E0:
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq _0809D13C
	ldr r0, _0809D0F4 @ =0x00006614
_0809D0EA:
	strh r0, [r6]
	ldr r1, [r7]
	ldr r0, _0809D0F8 @ =sub_809D148
	str r0, [r1, #8]
	b _0809D13C
	.align 2, 0
_0809D0F4: .4byte 0x00006614
_0809D0F8: .4byte sub_809D148
_0809D0FC:
	ldr r0, _0809D11C @ =gMultiSioRecv
	movs r2, #0
	ldr r1, _0809D120 @ =0x00006615
	strh r1, [r6]
	ldrh r1, [r0]
	ldr r0, _0809D124 @ =0x00006613
	cmp r1, r0
	bne _0809D128
	strh r1, [r6]
	ldr r0, [r4]
	movs r1, #0xa
	strb r1, [r0]
	ldr r0, [r7]
	bl TaskDestroy
	b _0809D13C
	.align 2, 0
_0809D11C: .4byte gMultiSioRecv
_0809D120: .4byte 0x00006615
_0809D124: .4byte 0x00006613
_0809D128:
	ldr r0, _0809D144 @ =0x00006614
	cmp r1, r0
	bne _0809D13C
	strh r1, [r6]
	ldr r0, [r4]
	strb r2, [r0]
	strb r2, [r4, #4]
	ldr r0, [r7]
	bl TaskDestroy
_0809D13C:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809D144: .4byte 0x00006614

	thumb_func_start sub_809D148
sub_809D148: @ 0x0809D148
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	mov r0, sp
	movs r1, #0
	movs r2, #3
	bl memset
	add r4, sp, #4
	adds r0, r4, #0
	movs r1, #0
	movs r2, #3
	bl memset
	movs r6, #0
	movs r7, #0
	ldr r0, _0809D1A8 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	bl sub_802610C
	lsls r0, r0, #0x10
	mov sb, r4
	cmp r0, #0
	bge _0809D1C4
	ldr r1, _0809D1AC @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _0809D1B0 @ =gBackgroundsCopyQueueCursor
	ldr r0, _0809D1B4 @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r0, _0809D1B8 @ =gUnknown_03006840
	strb r6, [r0]
	ldr r1, _0809D1BC @ =gVramGraphicsCopyCursor
	ldr r0, _0809D1C0 @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	movs r0, #3
	bl sub_80A1A4C
	b _0809D26A
	.align 2, 0
_0809D1A8: .4byte gCurTask
_0809D1AC: .4byte 0x0000FFFF
_0809D1B0: .4byte gBackgroundsCopyQueueCursor
_0809D1B4: .4byte gBackgroundsCopyQueueIndex
_0809D1B8: .4byte gUnknown_03006840
_0809D1BC: .4byte gVramGraphicsCopyCursor
_0809D1C0: .4byte gVramGraphicsCopyQueueIndex
_0809D1C4:
	adds r0, r5, #0
	bl sub_809E66C
	movs r3, #0
	ldr r0, _0809D21C @ =gPlayers
	mov r8, r0
	ldr r1, _0809D220 @ =0x00006613
	mov ip, r1
	ldr r4, _0809D224 @ =0x00006614
_0809D1D6:
	lsls r0, r3, #2
	adds r0, r0, r3
	lsls r0, r0, #2
	adds r0, r0, r3
	lsls r0, r0, #4
	add r0, r8
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r0, r0, #0x1b
	lsrs r0, r0, #0x1d
	mov r1, sp
	adds r2, r1, r3
	cmp r0, #3
	bne _0809D1FC
	movs r0, #1
	strb r0, [r2]
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
_0809D1FC:
	ldrb r0, [r2]
	cmp r0, #1
	bne _0809D23A
	lsls r0, r3, #1
	adds r0, r0, r3
	lsls r0, r0, #3
	ldr r1, _0809D228 @ =gMultiSioRecv
	adds r0, r0, r1
	ldrh r0, [r0]
	cmp r0, ip
	bne _0809D22C
	ldr r1, [r5]
	movs r0, #0xa
	strb r0, [r1]
	b _0809D23A
	.align 2, 0
_0809D21C: .4byte gPlayers
_0809D220: .4byte 0x00006613
_0809D224: .4byte 0x00006614
_0809D228: .4byte gMultiSioRecv
_0809D22C:
	cmp r0, r4
	bne _0809D23A
	ldr r0, [r5]
	movs r1, #0
	strb r1, [r0]
	movs r0, #0
	strb r0, [r5, #4]
_0809D23A:
	ldrb r1, [r2]
	cmp r1, #0
	beq _0809D254
	mov r2, sb
	adds r0, r2, r3
	ldrb r0, [r0]
	cmp r0, #0
	beq _0809D254
	cmp r1, r0
	bne _0809D254
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
_0809D254:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #2
	bls _0809D1D6
	cmp r6, r7
	bne _0809D26A
	ldr r0, _0809D278 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
_0809D26A:
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809D278: .4byte gCurTask

	thumb_func_start sub_809D27C
sub_809D27C: @ 0x0809D27C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	adds r6, r0, #0
	adds r4, r1, #0
	movs r0, #0
	str r0, [sp, #4]
	ldr r0, _0809D2E0 @ =sub_809D3C4
	movs r2, #0x84
	lsls r2, r2, #6
	ldr r1, _0809D2E4 @ =sub_809E774
	str r1, [sp]
	movs r1, #0x64
	movs r3, #0
	bl TaskCreate
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r7, r1, r0
	ldr r0, _0809D2E8 @ =gSaveGame
	ldr r1, _0809D2EC @ =0x00000366
	adds r0, r0, r1
	ldrb r1, [r0]
	movs r0, #0
	mov r2, sp
	ldrh r2, [r2, #4]
	strh r2, [r7, #6]
	strb r0, [r7, #4]
	str r4, [r7]
	ldr r0, _0809D2F0 @ =0xFFFF8800
	str r0, [r7, #0xc]
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [r7, #0x10]
	ldr r0, _0809D2F4 @ =gStageData
	adds r0, #0xb8
	ldrb r0, [r0]
	cmp r0, #0
	beq _0809D2F8
	cmp r0, #1
	beq _0809D300
	movs r2, #2
	movs r3, #2
	str r3, [sp, #4]
	b _0809D302
	.align 2, 0
_0809D2E0: .4byte sub_809D3C4
_0809D2E4: .4byte sub_809E774
_0809D2E8: .4byte gSaveGame
_0809D2EC: .4byte 0x00000366
_0809D2F0: .4byte 0xFFFF8800
_0809D2F4: .4byte gStageData
_0809D2F8:
	movs r2, #0
	movs r0, #1
	str r0, [sp, #4]
	b _0809D302
_0809D300:
	movs r2, #1
_0809D302:
	adds r0, r7, #0
	adds r0, #0x14
	str r6, [r7, #0x14]
	lsls r4, r1, #2
	adds r2, r2, r4
	lsls r2, r2, #3
	ldr r5, _0809D3C0 @ =gUnknown_080D9678
	adds r5, #4
	adds r1, r2, r5
	ldr r1, [r1]
	lsls r1, r1, #5
	adds r6, r6, r1
	ldr r1, _0809D3C0 @ =gUnknown_080D9678
	adds r2, r2, r1
	ldrh r1, [r2]
	movs r3, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0xc]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x10]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r2, #0xe0
	lsls r2, r2, #1
	mov r8, r2
	mov r1, r8
	strh r1, [r0, #0x14]
	strh r3, [r0, #0xe]
	strh r3, [r0, #0x16]
	movs r2, #0x10
	mov sl, r2
	mov r1, sl
	strb r1, [r0, #0x1c]
	movs r2, #0
	strb r2, [r0, #0x1f]
	movs r1, #0x80
	lsls r1, r1, #5
	mov sb, r1
	str r1, [r0, #8]
	str r3, [sp, #8]
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	adds r0, #0x3c
	str r6, [r7, #0x3c]
	ldr r2, [sp, #4]
	adds r4, r2, r4
	lsls r4, r4, #3
	adds r5, r4, r5
	ldr r1, [r5]
	lsls r1, r1, #5
	adds r6, r6, r1
	ldr r1, _0809D3C0 @ =gUnknown_080D9678
	adds r4, r4, r1
	ldrh r1, [r4]
	strh r1, [r0, #0xc]
	ldrb r1, [r4, #2]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0xc]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x10]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	mov r2, r8
	strh r2, [r0, #0x14]
	ldr r3, [sp, #8]
	strh r3, [r0, #0xe]
	strh r3, [r0, #0x16]
	mov r3, sl
	strb r3, [r0, #0x1c]
	movs r1, #0
	strb r1, [r0, #0x1f]
	mov r2, sb
	str r2, [r0, #8]
	bl UpdateSpriteAnimation
	str r6, [r7, #8]
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809D3C0: .4byte gUnknown_080D9678

	thumb_func_start sub_809D3C4
sub_809D3C4: @ 0x0809D3C4
	push {r4, r5, r6, r7, lr}
	ldr r6, _0809D408 @ =gMultiSioSend
	ldr r0, _0809D40C @ =gStageData
	ldrb r5, [r0, #6]
	ldr r7, _0809D410 @ =gCurTask
	ldr r0, [r7]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	bl sub_802610C
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0809D42C
	ldr r1, _0809D414 @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _0809D418 @ =gBackgroundsCopyQueueCursor
	ldr r0, _0809D41C @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _0809D420 @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _0809D424 @ =gVramGraphicsCopyCursor
	ldr r0, _0809D428 @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	movs r0, #3
	bl sub_80A1A4C
	b _0809D482
	.align 2, 0
_0809D408: .4byte gMultiSioSend
_0809D40C: .4byte gStageData
_0809D410: .4byte gCurTask
_0809D414: .4byte 0x0000FFFF
_0809D418: .4byte gBackgroundsCopyQueueCursor
_0809D41C: .4byte gBackgroundsCopyQueueIndex
_0809D420: .4byte gUnknown_03006840
_0809D424: .4byte gVramGraphicsCopyCursor
_0809D428: .4byte gVramGraphicsCopyQueueIndex
_0809D42C:
	adds r0, r4, #0
	bl sub_809E740
	adds r0, r4, #0
	bl sub_809E708
	cmp r0, #1
	bne _0809D482
	adds r1, r5, #0
	cmp r1, #0
	bne _0809D464
	ldrh r0, [r4, #6]
	adds r0, #1
	strh r0, [r4, #6]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x59
	bls _0809D482
	strh r1, [r4, #6]
	ldr r0, _0809D45C @ =0x00006611
	strh r0, [r6]
	ldr r1, [r7]
	ldr r0, _0809D460 @ =sub_809D498
	b _0809D480
	.align 2, 0
_0809D45C: .4byte 0x00006611
_0809D460: .4byte sub_809D498
_0809D464:
	ldr r0, _0809D488 @ =gMultiSioRecv
	ldr r1, _0809D48C @ =0x00006610
	strh r1, [r6]
	ldrh r1, [r0]
	ldr r0, _0809D490 @ =0x00006611
	cmp r1, r0
	bne _0809D482
	strh r1, [r6]
	ldr r0, [r4]
	ldr r1, [r4, #8]
	bl sub_809D5B8
	ldr r1, [r7]
	ldr r0, _0809D494 @ =sub_809E68C
_0809D480:
	str r0, [r1, #8]
_0809D482:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809D488: .4byte gMultiSioRecv
_0809D48C: .4byte 0x00006610
_0809D490: .4byte 0x00006611
_0809D494: .4byte sub_809E68C

	thumb_func_start sub_809D498
sub_809D498: @ 0x0809D498
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	mov r0, sp
	movs r1, #0
	movs r2, #3
	bl memset
	add r5, sp, #4
	adds r0, r5, #0
	movs r1, #0
	movs r2, #3
	bl memset
	movs r6, #0
	movs r7, #0
	ldr r0, _0809D4F8 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r1, r1, r0
	mov r8, r1
	bl sub_802610C
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0809D514
	ldr r1, _0809D4FC @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _0809D500 @ =gBackgroundsCopyQueueCursor
	ldr r0, _0809D504 @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r0, _0809D508 @ =gUnknown_03006840
	strb r6, [r0]
	ldr r1, _0809D50C @ =gVramGraphicsCopyCursor
	ldr r0, _0809D510 @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	movs r0, #3
	bl sub_80A1A4C
	b _0809D596
	.align 2, 0
_0809D4F8: .4byte gCurTask
_0809D4FC: .4byte 0x0000FFFF
_0809D500: .4byte gBackgroundsCopyQueueCursor
_0809D504: .4byte gBackgroundsCopyQueueIndex
_0809D508: .4byte gUnknown_03006840
_0809D50C: .4byte gVramGraphicsCopyCursor
_0809D510: .4byte gVramGraphicsCopyQueueIndex
_0809D514:
	movs r4, #0
	ldr r0, _0809D5A4 @ =gPlayers
	mov sb, r0
	ldr r1, _0809D5A8 @ =0x00006611
	mov ip, r1
_0809D51E:
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #2
	adds r0, r0, r4
	lsls r0, r0, #4
	add r0, sb
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r0, r0, #0x1b
	lsrs r0, r0, #0x1d
	mov r1, sp
	adds r2, r1, r4
	cmp r0, #3
	bne _0809D544
	movs r0, #1
	strb r0, [r2]
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
_0809D544:
	ldrb r3, [r2]
	cmp r3, #1
	bne _0809D55E
	lsls r0, r4, #1
	adds r0, r0, r4
	lsls r0, r0, #3
	ldr r1, _0809D5AC @ =gMultiSioRecv
	adds r0, r0, r1
	ldrh r0, [r0]
	cmp r0, ip
	bne _0809D55E
	adds r0, r5, r4
	strb r3, [r0]
_0809D55E:
	ldrb r1, [r2]
	cmp r1, #0
	beq _0809D576
	adds r0, r5, r4
	ldrb r0, [r0]
	cmp r0, #0
	beq _0809D576
	cmp r1, r0
	bne _0809D576
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
_0809D576:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #2
	bls _0809D51E
	cmp r6, r7
	bne _0809D596
	mov r2, r8
	ldr r0, [r2]
	ldr r1, [r2, #8]
	bl sub_809D5B8
	ldr r0, _0809D5B0 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809D5B4 @ =sub_809E68C
	str r0, [r1, #8]
_0809D596:
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809D5A4: .4byte gPlayers
_0809D5A8: .4byte 0x00006611
_0809D5AC: .4byte gMultiSioRecv
_0809D5B0: .4byte gCurTask
_0809D5B4: .4byte sub_809E68C

	thumb_func_start sub_809D5B8
sub_809D5B8: @ 0x0809D5B8
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r5, r1, #0
	ldr r0, _0809D670 @ =sub_809D810
	movs r2, #0x84
	lsls r2, r2, #6
	ldr r1, _0809D674 @ =sub_809E858
	str r1, [sp]
	movs r1, #0xd4
	movs r3, #0
	bl TaskCreate
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	str r5, [r4, #0xc]
	str r6, [r4]
	movs r5, #0
	strb r5, [r4, #5]
	strh r5, [r4, #6]
	strh r5, [r4, #8]
	strh r5, [r4, #0xa]
	movs r0, #0xa0
	lsls r0, r0, #8
	str r0, [r4, #0x10]
	str r5, [r4, #0x18]
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r4, #0x1c]
	ldr r1, _0809D678 @ =0xFFFFCE00
	str r1, [r4, #0x20]
	ldr r0, _0809D67C @ =0xFFFF8800
	str r0, [r4, #0x2c]
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [r4, #0x30]
	str r1, [r4, #0x24]
	str r0, [r4, #0x28]
	adds r0, r4, #0
	bl sub_809D6A0
	ldr r2, _0809D680 @ =gWinRegs
	ldr r0, [r4, #0x18]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r4, #0x10]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2, #4]
	ldr r2, _0809D684 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r0, _0809D688 @ =gBgPalette
	strh r5, [r0]
	ldr r5, _0809D68C @ =gFlags
	ldr r0, [r5]
	movs r1, #1
	orrs r0, r1
	str r0, [r5]
	ldr r6, _0809D690 @ =gUnknown_080D97F8
	ldr r1, _0809D694 @ =0x05000200
	adds r0, r6, #0
	movs r2, #0x28
	bl CpuFastSet
	ldr r0, _0809D698 @ =gUnknown_080D9898
	ldr r4, _0809D69C @ =gUnknown_03003450
	adds r1, r4, #0
	movs r2, #8
	bl CpuFastSet
	subs r4, #0xe0
	adds r0, r6, #0
	adds r1, r4, #0
	movs r2, #0x28
	bl CpuFastSet
	ldr r0, [r5]
	movs r1, #2
	orrs r0, r1
	str r0, [r5]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809D670: .4byte sub_809D810
_0809D674: .4byte sub_809E858
_0809D678: .4byte 0xFFFFCE00
_0809D67C: .4byte 0xFFFF8800
_0809D680: .4byte gWinRegs
_0809D684: .4byte gDispCnt
_0809D688: .4byte gBgPalette
_0809D68C: .4byte gFlags
_0809D690: .4byte gUnknown_080D97F8
_0809D694: .4byte 0x05000200
_0809D698: .4byte gUnknown_080D9898
_0809D69C: .4byte gUnknown_03003450

	thumb_func_start sub_809D6A0
sub_809D6A0: @ 0x0809D6A0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	ldr r0, _0809D804 @ =gSaveGame
	ldr r1, _0809D808 @ =0x00000366
	adds r0, r0, r1
	ldrb r2, [r0]
	adds r0, r7, #0
	adds r0, #0x34
	ldr r3, [r7, #0xc]
	str r3, [r7, #0x34]
	ldr r6, _0809D80C @ =gUnknown_080D9738
	lsls r4, r2, #2
	str r4, [sp]
	lsls r2, r2, #5
	adds r1, r6, #4
	mov r8, r1
	adds r1, r2, r1
	ldr r1, [r1]
	lsls r1, r1, #5
	adds r3, r3, r1
	str r3, [r7, #0xc]
	adds r2, r2, r6
	ldrh r1, [r2]
	movs r5, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x1c]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x20]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r4, #0xc0
	lsls r4, r4, #1
	mov sl, r4
	mov r1, sl
	strh r1, [r0, #0x14]
	strh r5, [r0, #0xe]
	strh r5, [r0, #0x16]
	movs r4, #0x10
	mov sb, r4
	mov r1, sb
	strb r1, [r0, #0x1c]
	movs r4, #0
	strb r4, [r0, #0x1f]
	movs r1, #0x80
	str r1, [r0, #8]
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	adds r0, #0x5c
	ldr r3, [r7, #0xc]
	str r3, [r7, #0x5c]
	ldr r2, [sp]
	adds r2, #1
	lsls r2, r2, #3
	adds r1, r2, #0
	add r1, r8
	ldr r4, [r1]
	mov ip, r4
	mov r1, ip
	lsls r1, r1, #5
	mov ip, r1
	add r3, ip
	str r3, [r7, #0xc]
	adds r2, r2, r6
	ldrh r1, [r2]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x24]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x28]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	mov r4, sl
	strh r4, [r0, #0x14]
	strh r5, [r0, #0xe]
	strh r5, [r0, #0x16]
	mov r1, sb
	strb r1, [r0, #0x1c]
	movs r4, #0
	strb r4, [r0, #0x1f]
	str r5, [r0, #8]
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	adds r0, #0x84
	ldr r1, [r7, #0xc]
	str r1, [r0]
	ldr r4, [sp]
	adds r4, #2
	lsls r4, r4, #3
	add r8, r4
	mov r1, r8
	ldr r2, [r1]
	lsls r2, r2, #5
	ldr r1, [r7, #0xc]
	adds r1, r1, r2
	str r1, [r7, #0xc]
	adds r4, r4, r6
	ldrh r1, [r4]
	strh r1, [r0, #0xc]
	ldrb r1, [r4, #2]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x24]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x28]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	mov r4, sl
	strh r4, [r0, #0x14]
	strh r5, [r0, #0xe]
	strh r5, [r0, #0x16]
	mov r1, sb
	strb r1, [r0, #0x1c]
	movs r4, #0
	strb r4, [r0, #0x1f]
	str r5, [r0, #8]
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	adds r0, #0xac
	ldr r1, [r7, #0xc]
	str r1, [r0]
	ldr r2, [r6, #0x1c]
	lsls r2, r2, #5
	ldr r1, [r7, #0xc]
	adds r1, r1, r2
	str r1, [r7, #0xc]
	ldrh r1, [r6, #0x18]
	strh r1, [r0, #0xc]
	ldrb r1, [r6, #0x1a]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x2c]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x30]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	mov r1, sl
	strh r1, [r0, #0x14]
	strh r5, [r0, #0xe]
	strh r5, [r0, #0x16]
	mov r4, sb
	strb r4, [r0, #0x1c]
	movs r1, #0
	strb r1, [r0, #0x1f]
	str r5, [r0, #8]
	bl UpdateSpriteAnimation
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809D804: .4byte gSaveGame
_0809D808: .4byte 0x00000366
_0809D80C: .4byte gUnknown_080D9738

	thumb_func_start sub_809D810
sub_809D810: @ 0x0809D810
	push {r4, r5, r6, r7, lr}
	ldr r7, _0809D848 @ =gMultiSioSend
	ldr r0, _0809D84C @ =gStageData
	ldrb r5, [r0, #6]
	movs r6, #0
	bl sub_802610C
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0809D868
	ldr r1, _0809D850 @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _0809D854 @ =gBackgroundsCopyQueueCursor
	ldr r0, _0809D858 @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r0, _0809D85C @ =gUnknown_03006840
	strb r6, [r0]
	ldr r1, _0809D860 @ =gVramGraphicsCopyCursor
	ldr r0, _0809D864 @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	movs r0, #3
	bl sub_80A1A4C
	b _0809D92C
	.align 2, 0
_0809D848: .4byte gMultiSioSend
_0809D84C: .4byte gStageData
_0809D850: .4byte 0x0000FFFF
_0809D854: .4byte gBackgroundsCopyQueueCursor
_0809D858: .4byte gBackgroundsCopyQueueIndex
_0809D85C: .4byte gUnknown_03006840
_0809D860: .4byte gVramGraphicsCopyCursor
_0809D864: .4byte gVramGraphicsCopyQueueIndex
_0809D868:
	ldr r0, _0809D934 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	cmp r5, #0
	beq _0809D87C
	ldr r0, _0809D938 @ =0x00006611
	strh r0, [r7]
_0809D87C:
	adds r0, r4, #0
	bl sub_809E7DC
	ldrh r0, [r4, #0xa]
	cmp r0, #0
	bne _0809D8BE
	ldr r3, _0809D93C @ =gBldRegs
	ldr r0, _0809D940 @ =0x00003FFF
	strh r0, [r3]
	ldr r2, _0809D944 @ =gDispCnt
	ldrh r0, [r2]
	movs r5, #0xc0
	lsls r5, r5, #7
	adds r1, r5, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _0809D948 @ =gWinRegs
	movs r0, #0xff
	strh r0, [r1]
	strh r0, [r1, #2]
	strh r0, [r1, #6]
	ldr r0, _0809D94C @ =0x00003112
	strh r0, [r1, #8]
	strh r6, [r1, #0xa]
	movs r0, #0x1f
	strh r0, [r3, #2]
	movs r0, #6
	strh r0, [r3, #4]
	movs r0, #0xc0
	lsls r0, r0, #3
	strh r0, [r4, #8]
	movs r0, #1
	strh r0, [r4, #0xa]
_0809D8BE:
	ldr r1, [r4, #0x18]
	movs r2, #0x88
	lsls r2, r2, #7
	cmp r1, r2
	bgt _0809D8DA
	movs r0, #0x80
	lsls r0, r0, #3
	adds r1, r1, r0
	str r1, [r4, #0x18]
	ldr r0, _0809D950 @ =0x000043FF
	cmp r1, r0
	ble _0809D8DA
	str r2, [r4, #0x18]
	movs r6, #1
_0809D8DA:
	ldr r1, [r4, #0x10]
	ldr r0, _0809D954 @ =0x000017FF
	cmp r1, r0
	ble _0809D8F8
	ldr r2, _0809D958 @ =0xFFFFF800
	adds r0, r1, r2
	str r0, [r4, #0x10]
	movs r1, #0xc0
	lsls r1, r1, #5
	cmp r0, r1
	bgt _0809D8F8
	str r1, [r4, #0x10]
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
_0809D8F8:
	ldr r2, _0809D948 @ =gWinRegs
	ldr r0, [r4, #0x18]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r4, #0x10]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2, #4]
	cmp r6, #2
	bne _0809D92C
	ldr r1, _0809D93C @ =gBldRegs
	ldr r0, _0809D940 @ =0x00003FFF
	strh r0, [r1]
	ldr r0, _0809D94C @ =0x00003112
	strh r0, [r2, #8]
	movs r0, #0x1f
	strh r0, [r1, #2]
	movs r0, #6
	strh r0, [r1, #4]
	movs r0, #0
	strh r0, [r4, #0xa]
	ldr r0, _0809D934 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809D95C @ =sub_809D960
	str r0, [r1, #8]
_0809D92C:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809D934: .4byte gCurTask
_0809D938: .4byte 0x00006611
_0809D93C: .4byte gBldRegs
_0809D940: .4byte 0x00003FFF
_0809D944: .4byte gDispCnt
_0809D948: .4byte gWinRegs
_0809D94C: .4byte 0x00003112
_0809D950: .4byte 0x000043FF
_0809D954: .4byte 0x000017FF
_0809D958: .4byte 0xFFFFF800
_0809D95C: .4byte sub_809D960

	thumb_func_start sub_809D960
sub_809D960: @ 0x0809D960
	push {r4, r5, r6, lr}
	ldr r6, _0809D998 @ =gMultiSioSend
	ldr r0, _0809D99C @ =gStageData
	ldrb r4, [r0, #6]
	movs r5, #0
	bl sub_802610C
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0809D9B8
	ldr r1, _0809D9A0 @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _0809D9A4 @ =gBackgroundsCopyQueueCursor
	ldr r0, _0809D9A8 @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r0, _0809D9AC @ =gUnknown_03006840
	strb r5, [r0]
	ldr r1, _0809D9B0 @ =gVramGraphicsCopyCursor
	ldr r0, _0809D9B4 @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	movs r0, #3
	bl sub_80A1A4C
	b _0809DA04
	.align 2, 0
_0809D998: .4byte gMultiSioSend
_0809D99C: .4byte gStageData
_0809D9A0: .4byte 0x0000FFFF
_0809D9A4: .4byte gBackgroundsCopyQueueCursor
_0809D9A8: .4byte gBackgroundsCopyQueueIndex
_0809D9AC: .4byte gUnknown_03006840
_0809D9B0: .4byte gVramGraphicsCopyCursor
_0809D9B4: .4byte gVramGraphicsCopyQueueIndex
_0809D9B8:
	cmp r4, #0
	beq _0809D9C0
	ldr r0, _0809DA0C @ =0x00006611
	strh r0, [r6]
_0809D9C0:
	ldr r6, _0809DA10 @ =gCurTask
	ldr r0, [r6]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_809E7DC
	adds r0, r4, #0
	bl sub_809DFAC
	adds r0, r4, #0
	bl sub_809E018
	adds r0, r4, #0
	bl sub_809E7F8
	cmp r0, #1
	bne _0809D9EA
	movs r5, #1
_0809D9EA:
	adds r0, r4, #0
	bl sub_809E828
	cmp r0, #1
	bne _0809D9FA
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_0809D9FA:
	cmp r5, #2
	bne _0809DA04
	ldr r1, [r6]
	ldr r0, _0809DA14 @ =sub_809DA18
	str r0, [r1, #8]
_0809DA04:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809DA0C: .4byte 0x00006611
_0809DA10: .4byte gCurTask
_0809DA14: .4byte sub_809DA18

	thumb_func_start sub_809DA18
sub_809DA18: @ 0x0809DA18
	push {r4, r5, r6, r7, lr}
	ldr r7, _0809DA50 @ =gMultiSioSend
	ldr r0, _0809DA54 @ =gStageData
	ldrb r5, [r0, #6]
	bl sub_802610C
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0809DA70
	ldr r1, _0809DA58 @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _0809DA5C @ =gBackgroundsCopyQueueCursor
	ldr r0, _0809DA60 @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _0809DA64 @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _0809DA68 @ =gVramGraphicsCopyCursor
	ldr r0, _0809DA6C @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	movs r0, #3
	bl sub_80A1A4C
	b _0809DB64
	.align 2, 0
_0809DA50: .4byte gMultiSioSend
_0809DA54: .4byte gStageData
_0809DA58: .4byte 0x0000FFFF
_0809DA5C: .4byte gBackgroundsCopyQueueCursor
_0809DA60: .4byte gBackgroundsCopyQueueIndex
_0809DA64: .4byte gUnknown_03006840
_0809DA68: .4byte gVramGraphicsCopyCursor
_0809DA6C: .4byte gVramGraphicsCopyQueueIndex
_0809DA70:
	ldr r6, _0809DAB4 @ =gCurTask
	ldr r0, [r6]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_809E7DC
	adds r0, r4, #0
	bl sub_809DFAC
	adds r0, r4, #0
	bl sub_809E018
	cmp r5, #0
	beq _0809DAF4
	ldr r3, _0809DAB8 @ =gMultiSioRecv
	ldrh r2, [r3]
	adds r1, r2, #0
	ldr r0, _0809DABC @ =0x00006612
	cmp r1, r0
	bne _0809DAC4
	ldrb r0, [r4, #5]
	cmp r0, #1
	bne _0809DAAE
	bl m4aMPlayAllStop
	movs r0, #0x62
	bl m4aSongNumStart
_0809DAAE:
	ldr r1, [r6]
	ldr r0, _0809DAC0 @ =sub_809DCA4
	b _0809DB62
	.align 2, 0
_0809DAB4: .4byte gCurTask
_0809DAB8: .4byte gMultiSioRecv
_0809DABC: .4byte 0x00006612
_0809DAC0: .4byte sub_809DCA4
_0809DAC4:
	ldr r0, _0809DAEC @ =0x00006611
	cmp r1, r0
	beq _0809DAF0
	lsls r0, r2, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bls _0809DAD6
	movs r0, #0
	strb r0, [r4, #5]
_0809DAD6:
	ldrh r0, [r3]
	strb r0, [r4, #5]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bls _0809DAE6
	movs r0, #0
	strb r0, [r4, #5]
_0809DAE6:
	ldrb r0, [r4, #5]
	strh r0, [r7]
	b _0809DB64
	.align 2, 0
_0809DAEC: .4byte 0x00006611
_0809DAF0:
	strh r1, [r7]
	b _0809DB64
_0809DAF4:
	ldr r6, _0809DB38 @ =gRepeatedKeys
	ldrh r1, [r6]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0809DB08
	movs r0, #0x6c
	bl m4aSongNumStart
	strb r5, [r4, #5]
_0809DB08:
	ldrh r1, [r6]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _0809DB1C
	movs r0, #0x6c
	bl m4aSongNumStart
	movs r0, #1
	strb r0, [r4, #5]
_0809DB1C:
	ldrb r0, [r4, #5]
	strh r0, [r7]
	ldr r0, _0809DB3C @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	bne _0809DB40
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0809DB64
	b _0809DB44
	.align 2, 0
_0809DB38: .4byte gRepeatedKeys
_0809DB3C: .4byte gPressedKeys
_0809DB40:
	movs r0, #1
	strb r0, [r4, #5]
_0809DB44:
	ldrb r0, [r4, #5]
	cmp r0, #1
	bne _0809DB56
	bl m4aMPlayAllStop
	movs r0, #0x62
	bl m4aSongNumStart
	b _0809DB5C
_0809DB56:
	movs r0, #0x6a
	bl m4aSongNumStart
_0809DB5C:
	ldr r0, _0809DB6C @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809DB70 @ =sub_809DB74
_0809DB62:
	str r0, [r1, #8]
_0809DB64:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809DB6C: .4byte gCurTask
_0809DB70: .4byte sub_809DB74

	thumb_func_start sub_809DB74
sub_809DB74: @ 0x0809DB74
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	ldr r0, _0809DBD8 @ =gMultiSioSend
	mov sb, r0
	mov r0, sp
	movs r1, #0
	movs r2, #3
	bl memset
	add r4, sp, #4
	adds r0, r4, #0
	movs r1, #0
	movs r2, #3
	bl memset
	movs r7, #0
	movs r1, #0
	mov r8, r1
	ldr r0, _0809DBDC @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	bl sub_802610C
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0809DBF8
	ldr r1, _0809DBE0 @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _0809DBE4 @ =gBackgroundsCopyQueueCursor
	ldr r0, _0809DBE8 @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r0, _0809DBEC @ =gUnknown_03006840
	strb r7, [r0]
	ldr r1, _0809DBF0 @ =gVramGraphicsCopyCursor
	ldr r0, _0809DBF4 @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	movs r0, #3
	bl sub_80A1A4C
	b _0809DC80
	.align 2, 0
_0809DBD8: .4byte gMultiSioSend
_0809DBDC: .4byte gCurTask
_0809DBE0: .4byte 0x0000FFFF
_0809DBE4: .4byte gBackgroundsCopyQueueCursor
_0809DBE8: .4byte gBackgroundsCopyQueueIndex
_0809DBEC: .4byte gUnknown_03006840
_0809DBF0: .4byte gVramGraphicsCopyCursor
_0809DBF4: .4byte gVramGraphicsCopyQueueIndex
_0809DBF8:
	ldrb r0, [r5, #5]
	mov r1, sb
	strh r0, [r1]
	movs r3, #0
	ldr r0, _0809DC90 @ =gPlayers
	mov ip, r0
	adds r6, r4, #0
_0809DC06:
	lsls r0, r3, #2
	adds r0, r0, r3
	lsls r0, r0, #2
	adds r0, r0, r3
	lsls r0, r0, #4
	add r0, ip
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r0, r0, #0x1b
	lsrs r0, r0, #0x1d
	mov r1, sp
	adds r2, r1, r3
	cmp r0, #3
	bne _0809DC30
	movs r0, #1
	strb r0, [r2]
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
_0809DC30:
	ldrb r4, [r2]
	cmp r4, #1
	bne _0809DC4C
	lsls r0, r3, #1
	adds r0, r0, r3
	lsls r0, r0, #3
	ldr r1, _0809DC94 @ =gMultiSioRecv
	adds r0, r0, r1
	ldrh r0, [r0]
	ldrb r1, [r5, #5]
	cmp r0, r1
	bne _0809DC4C
	adds r0, r6, r3
	strb r4, [r0]
_0809DC4C:
	ldrb r1, [r2]
	cmp r1, #0
	beq _0809DC64
	adds r0, r6, r3
	ldrb r0, [r0]
	cmp r0, #0
	beq _0809DC64
	cmp r1, r0
	bne _0809DC64
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
_0809DC64:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #2
	bls _0809DC06
	cmp r7, r8
	bne _0809DC80
	ldr r0, _0809DC98 @ =0x00006612
	mov r1, sb
	strh r0, [r1]
	ldr r0, _0809DC9C @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809DCA0 @ =sub_809DCA4
	str r0, [r1, #8]
_0809DC80:
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809DC90: .4byte gPlayers
_0809DC94: .4byte gMultiSioRecv
_0809DC98: .4byte 0x00006612
_0809DC9C: .4byte gCurTask
_0809DCA0: .4byte sub_809DCA4

	thumb_func_start sub_809DCA4
sub_809DCA4: @ 0x0809DCA4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	ldr r0, _0809DD10 @ =gMultiSioSend
	mov sl, r0
	ldr r0, _0809DD14 @ =gStageData
	ldrb r4, [r0, #6]
	movs r7, #0
	mov r0, sp
	movs r1, #0
	movs r2, #3
	bl memset
	add r6, sp, #4
	adds r0, r6, #0
	movs r1, #0
	movs r2, #3
	bl memset
	movs r1, #0
	mov sb, r1
	mov r8, r1
	ldr r0, _0809DD18 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	bl sub_802610C
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0809DD34
	ldr r1, _0809DD1C @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _0809DD20 @ =gBackgroundsCopyQueueCursor
	ldr r0, _0809DD24 @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r0, _0809DD28 @ =gUnknown_03006840
	strb r7, [r0]
	ldr r1, _0809DD2C @ =gVramGraphicsCopyCursor
	ldr r0, _0809DD30 @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	movs r0, #3
	bl sub_80A1A4C
	b _0809DE7C
	.align 2, 0
_0809DD10: .4byte gMultiSioSend
_0809DD14: .4byte gStageData
_0809DD18: .4byte gCurTask
_0809DD1C: .4byte 0x0000FFFF
_0809DD20: .4byte gBackgroundsCopyQueueCursor
_0809DD24: .4byte gBackgroundsCopyQueueIndex
_0809DD28: .4byte gUnknown_03006840
_0809DD2C: .4byte gVramGraphicsCopyCursor
_0809DD30: .4byte gVramGraphicsCopyQueueIndex
_0809DD34:
	cmp r4, #0
	bne _0809DDC0
	movs r4, #0
	ldr r2, _0809DDB4 @ =gPlayers
	mov ip, r2
	ldr r0, _0809DDB8 @ =0x00006612
	mov sl, r0
_0809DD42:
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #2
	adds r0, r0, r4
	lsls r0, r0, #4
	add r0, ip
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r0, r0, #0x1b
	lsrs r0, r0, #0x1d
	mov r1, sp
	adds r2, r1, r4
	cmp r0, #3
	bne _0809DD6C
	movs r0, #1
	strb r0, [r2]
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
_0809DD6C:
	ldrb r3, [r2]
	cmp r3, #1
	bne _0809DD86
	lsls r0, r4, #1
	adds r0, r0, r4
	lsls r0, r0, #3
	ldr r1, _0809DDBC @ =gMultiSioRecv
	adds r0, r0, r1
	ldrh r0, [r0]
	cmp r0, sl
	bne _0809DD86
	adds r0, r6, r4
	strb r3, [r0]
_0809DD86:
	ldrb r1, [r2]
	cmp r1, #0
	beq _0809DDA2
	adds r0, r6, r4
	ldrb r0, [r0]
	cmp r0, #0
	beq _0809DDA2
	cmp r1, r0
	bne _0809DDA2
	mov r0, sb
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov sb, r0
_0809DDA2:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #2
	bls _0809DD42
	cmp sb, r8
	bne _0809DDD0
	movs r7, #1
	b _0809DDD4
	.align 2, 0
_0809DDB4: .4byte gPlayers
_0809DDB8: .4byte 0x00006612
_0809DDBC: .4byte gMultiSioRecv
_0809DDC0:
	ldr r1, _0809DDEC @ =0x00006612
	mov r2, sl
	strh r1, [r2]
	ldr r0, _0809DDF0 @ =gMultiSioRecv
	ldrh r0, [r0]
	cmp r0, r1
	bne _0809DDD0
	movs r7, #1
_0809DDD0:
	cmp r7, #0
	beq _0809DE7C
_0809DDD4:
	ldr r1, [r5, #0x18]
	movs r0, #0xa0
	lsls r0, r0, #7
	cmp r1, r0
	bgt _0809DE0E
	ldrb r0, [r5, #5]
	cmp r0, #1
	bne _0809DDF4
	adds r0, r1, #0
	adds r0, #0x40
	b _0809DDFA
	.align 2, 0
_0809DDEC: .4byte 0x00006612
_0809DDF0: .4byte gMultiSioRecv
_0809DDF4:
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r1, r2
_0809DDFA:
	str r0, [r5, #0x18]
	ldr r1, [r5, #0x18]
	ldr r0, _0809DE20 @ =0x00004FFF
	cmp r1, r0
	ble _0809DE0E
	adds r0, #1
	str r0, [r5, #0x18]
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
_0809DE0E:
	ldr r1, [r5, #0x10]
	cmp r1, #0
	blt _0809DE3A
	ldrb r0, [r5, #5]
	cmp r0, #1
	bne _0809DE24
	adds r0, r1, #0
	subs r0, #0x80
	b _0809DE28
	.align 2, 0
_0809DE20: .4byte 0x00004FFF
_0809DE24:
	ldr r2, _0809DE5C @ =0xFFFFFE00
	adds r0, r1, r2
_0809DE28:
	str r0, [r5, #0x10]
	ldr r0, [r5, #0x10]
	cmp r0, #0
	bgt _0809DE3A
	movs r0, #0
	str r0, [r5, #0x10]
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
_0809DE3A:
	ldr r2, _0809DE60 @ =gWinRegs
	ldr r0, [r5, #0x18]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r5, #0x10]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2, #4]
	cmp r7, #3
	bne _0809DE7C
	ldrb r0, [r5, #5]
	cmp r0, #1
	bne _0809DE64
	ldr r1, [r5]
	movs r0, #0xb
	b _0809DE68
	.align 2, 0
_0809DE5C: .4byte 0xFFFFFE00
_0809DE60: .4byte gWinRegs
_0809DE64:
	ldr r1, [r5]
	movs r0, #9
_0809DE68:
	strb r0, [r1]
	ldr r2, _0809DE8C @ =gDispCnt
	ldrh r1, [r2]
	ldr r0, _0809DE90 @ =0x0000FDFF
	ands r0, r1
	strh r0, [r2]
	ldr r0, _0809DE94 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809DE98 @ =sub_809E778
	str r0, [r1, #8]
_0809DE7C:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809DE8C: .4byte gDispCnt
_0809DE90: .4byte 0x0000FDFF
_0809DE94: .4byte gCurTask
_0809DE98: .4byte sub_809E778

	thumb_func_start sub_809DE9C
sub_809DE9C: @ 0x0809DE9C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	ldr r0, _0809DEBC @ =gStageData
	ldrb r3, [r0, #6]
	adds r0, #0xb8
	ldrb r0, [r0]
	cmp r0, #1
	beq _0809DECC
	cmp r0, #1
	bgt _0809DEC0
	cmp r0, #0
	beq _0809DEC6
	b _0809DFA0
	.align 2, 0
_0809DEBC: .4byte gStageData
_0809DEC0:
	cmp r0, #2
	beq _0809DED2
	b _0809DFA0
_0809DEC6:
	movs r4, #1
	ands r4, r3
	b _0809DED4
_0809DECC:
	adds r4, r0, #0
	bics r4, r3
	b _0809DED4
_0809DED2:
	movs r4, #2
_0809DED4:
	cmp r4, #1
	beq _0809DEF4
	cmp r4, #1
	bgt _0809DEE2
	cmp r4, #0
	beq _0809DEE8
	b _0809DFA0
_0809DEE2:
	cmp r4, #2
	beq _0809DF00
	b _0809DFA0
_0809DEE8:
	ldr r0, _0809DEF0 @ =gSaveGame
	adds r1, r0, #0
	adds r1, #0x60
	b _0809DF06
	.align 2, 0
_0809DEF0: .4byte gSaveGame
_0809DEF4:
	ldr r0, _0809DEFC @ =gSaveGame
	adds r1, r0, #0
	adds r1, #0x61
	b _0809DF06
	.align 2, 0
_0809DEFC: .4byte gSaveGame
_0809DF00:
	ldr r0, _0809DF64 @ =gSaveGame
	adds r1, r0, #0
	adds r1, #0x62
_0809DF06:
	ldrb r0, [r1]
	cmp r0, #0x62
	bhi _0809DF10
	adds r0, #1
	strb r0, [r1]
_0809DF10:
	movs r1, #3
	ldr r5, _0809DF68 @ =gUnknown_03001060
	movs r7, #1
	movs r0, #0x1c
	adds r0, r0, r5
	mov r8, r0
_0809DF1C:
	ldrb r0, [r5, #7]
	lsls r1, r1, #0x18
	asrs r2, r1, #0x18
	asrs r0, r2
	ands r0, r7
	adds r6, r1, #0
	cmp r0, #0
	beq _0809DF94
	adds r1, r3, #0
	ands r1, r7
	adds r0, r2, #0
	ands r0, r7
	cmp r1, r0
	beq _0809DF94
	lsls r0, r2, #2
	adds r1, r5, #0
	adds r1, #0xc
	adds r0, r0, r1
	ldr r0, [r0]
	lsls r1, r2, #1
	adds r1, r1, r2
	lsls r1, r1, #2
	add r1, r8
	str r3, [sp]
	bl sub_8001C30
	adds r1, r0, #0
	ldr r3, [sp]
	cmp r4, #1
	beq _0809DF7E
	cmp r4, #1
	bgt _0809DF6C
	cmp r4, #0
	beq _0809DF72
	b _0809DF94
	.align 2, 0
_0809DF64: .4byte gSaveGame
_0809DF68: .4byte gUnknown_03001060
_0809DF6C:
	cmp r4, #2
	beq _0809DF8A
	b _0809DF94
_0809DF72:
	ldrb r0, [r1, #0x12]
	cmp r0, #0x62
	bhi _0809DF94
	adds r0, #1
	strb r0, [r1, #0x12]
	b _0809DF94
_0809DF7E:
	ldrb r0, [r1, #0x11]
	cmp r0, #0x62
	bhi _0809DF94
	adds r0, #1
	strb r0, [r1, #0x11]
	b _0809DF94
_0809DF8A:
	ldrb r0, [r1, #0x13]
	cmp r0, #0x62
	bhi _0809DF94
	adds r0, #1
	strb r0, [r1, #0x13]
_0809DF94:
	movs r1, #0xff
	lsls r1, r1, #0x18
	adds r0, r6, r1
	lsrs r1, r0, #0x18
	cmp r0, #0
	bge _0809DF1C
_0809DFA0:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_809DFAC
sub_809DFAC: @ 0x0809DFAC
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0xac
	movs r0, #0x64
	strh r0, [r4, #0x10]
	movs r0, #0x50
	strh r0, [r4, #0x12]
	ldr r0, [r4, #8]
	ldr r1, _0809DFD0 @ =0xFFFFFBFF
	ands r0, r1
	str r0, [r4, #8]
	ldrb r0, [r5, #5]
	cmp r0, #0
	bne _0809DFD4
	movs r0, #4
	b _0809DFD6
	.align 2, 0
_0809DFD0: .4byte 0xFFFFFBFF
_0809DFD4:
	movs r0, #0
_0809DFD6:
	strb r0, [r4, #0x1f]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	movs r0, #0x8c
	strh r0, [r4, #0x10]
	movs r0, #0x50
	strh r0, [r4, #0x12]
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	str r0, [r4, #8]
	ldrb r0, [r5, #5]
	cmp r0, #0
	bne _0809E000
	movs r0, #0
	b _0809E002
_0809E000:
	movs r0, #4
_0809E002:
	strb r0, [r4, #0x1f]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_809E018
sub_809E018: @ 0x0809E018
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x5c
	ldr r0, [r4, #0x24]
	asrs r0, r0, #8
	strh r0, [r1, #0x10]
	ldr r0, [r4, #0x28]
	asrs r0, r0, #8
	strh r0, [r1, #0x12]
	ldrb r0, [r4, #5]
	cmp r0, #0
	bne _0809E036
	movs r0, #0
	b _0809E038
_0809E036:
	movs r0, #2
_0809E038:
	strb r0, [r1, #0x1f]
	movs r0, #0
	str r0, [r1, #8]
	adds r0, r1, #0
	bl DisplaySprite
	adds r2, r4, #0
	adds r2, #0x84
	ldr r1, [r4, #0x24]
	asrs r1, r1, #8
	movs r0, #0xf0
	subs r0, r0, r1
	strh r0, [r2, #0x10]
	ldr r0, [r4, #0x28]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	ldrb r0, [r4, #5]
	cmp r0, #0
	bne _0809E062
	movs r0, #2
	b _0809E064
_0809E062:
	movs r0, #0
_0809E064:
	strb r0, [r2, #0x1f]
	movs r0, #0
	str r0, [r2, #8]
	adds r0, r2, #0
	bl DisplaySprite
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_809E078
sub_809E078: @ 0x0809E078
	push {r4, r5, lr}
	adds r3, r0, #0
	movs r1, #0
	movs r0, #0
	strh r0, [r3, #0xa]
	strh r0, [r3, #6]
	strh r0, [r3, #8]
	strb r1, [r3, #4]
	movs r2, #0
	ldr r5, _0809E0C8 @ =gUnknown_030010AC
	ldr r4, _0809E0CC @ =gUnknown_080D961D
_0809E08E:
	adds r0, r2, r5
	ldrb r0, [r0]
	adds r1, r3, r2
	adds r0, r0, r4
	ldrb r0, [r0]
	strb r0, [r1]
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #3
	bls _0809E08E
	ldr r0, _0809E0D0 @ =0xFFFF7E00
	str r0, [r3, #0x10]
	movs r2, #0xa0
	lsls r2, r2, #7
	str r2, [r3, #0x14]
	str r0, [r3, #0x20]
	movs r1, #0xa0
	lsls r1, r1, #8
	str r1, [r3, #0x24]
	movs r0, #0xb9
	lsls r0, r0, #9
	str r0, [r3, #0x18]
	str r2, [r3, #0x1c]
	str r0, [r3, #0x28]
	str r1, [r3, #0x2c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809E0C8: .4byte gUnknown_030010AC
_0809E0CC: .4byte gUnknown_080D961D
_0809E0D0: .4byte 0xFFFF7E00

	thumb_func_start sub_809E0D4
sub_809E0D4: @ 0x0809E0D4
	push {r4, r5, r6, lr}
	ldr r6, _0809E114 @ =gCurTask
	ldr r0, [r6]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	bl sub_802610C
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0809E130
	ldr r1, _0809E118 @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _0809E11C @ =gBackgroundsCopyQueueCursor
	ldr r0, _0809E120 @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _0809E124 @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _0809E128 @ =gVramGraphicsCopyCursor
	ldr r0, _0809E12C @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	movs r0, #3
	bl sub_80A1A4C
	b _0809E154
	.align 2, 0
_0809E114: .4byte gCurTask
_0809E118: .4byte 0x0000FFFF
_0809E11C: .4byte gBackgroundsCopyQueueCursor
_0809E120: .4byte gBackgroundsCopyQueueIndex
_0809E124: .4byte gUnknown_03006840
_0809E128: .4byte gVramGraphicsCopyCursor
_0809E12C: .4byte gVramGraphicsCopyQueueIndex
_0809E130:
	adds r0, r4, #0
	bl sub_809C8C4
	adds r0, r4, #0
	bl sub_809C810
	cmp r0, #1
	bne _0809E154
	strb r0, [r4, #4]
	ldr r0, [r4, #0xc]
	ldr r2, _0809E15C @ =0x03000004
	adds r1, r5, r2
	ldrb r2, [r4, #5]
	bl sub_809CC80
	ldr r1, [r6]
	ldr r0, _0809E160 @ =sub_809C620
	str r0, [r1, #8]
_0809E154:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809E15C: .4byte 0x03000004
_0809E160: .4byte sub_809C620

	thumb_func_start sub_809E164
sub_809E164: @ 0x0809E164
	push {r4, r5, lr}
	ldr r5, _0809E1A4 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	bl sub_802610C
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0809E1C0
	ldr r1, _0809E1A8 @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _0809E1AC @ =gBackgroundsCopyQueueCursor
	ldr r0, _0809E1B0 @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _0809E1B4 @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _0809E1B8 @ =gVramGraphicsCopyCursor
	ldr r0, _0809E1BC @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	movs r0, #3
	bl sub_80A1A4C
	b _0809E1E0
	.align 2, 0
_0809E1A4: .4byte gCurTask
_0809E1A8: .4byte 0x0000FFFF
_0809E1AC: .4byte gBackgroundsCopyQueueCursor
_0809E1B0: .4byte gBackgroundsCopyQueueIndex
_0809E1B4: .4byte gUnknown_03006840
_0809E1B8: .4byte gVramGraphicsCopyCursor
_0809E1BC: .4byte gVramGraphicsCopyQueueIndex
_0809E1C0:
	ldrb r0, [r4, #4]
	cmp r0, #0xa
	bne _0809E1E0
	ldrb r0, [r4, #5]
	cmp r0, #0
	beq _0809E1D4
	ldr r0, [r5]
	bl TaskDestroy
	b _0809E1E0
_0809E1D4:
	movs r0, #0
	bl sub_809E85C
	ldr r0, [r5]
	bl TaskDestroy
_0809E1E0:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_809E1E8
sub_809E1E8: @ 0x0809E1E8
	push {r4, r5, lr}
	ldr r0, _0809E20C @ =gStageData
	ldrb r4, [r0, #6]
	ldr r0, _0809E210 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	adds r0, r5, #0
	bl sub_809E384
	cmp r4, #0
	bne _0809E214
	bl sub_8025360
	b _0809E218
	.align 2, 0
_0809E20C: .4byte gStageData
_0809E210: .4byte gCurTask
_0809E214:
	bl sub_8025AA8
_0809E218:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bge _0809E264
	ldr r1, _0809E24C @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _0809E250 @ =gBackgroundsCopyQueueCursor
	ldr r0, _0809E254 @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _0809E258 @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _0809E25C @ =gVramGraphicsCopyCursor
	ldr r0, _0809E260 @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	movs r0, #3
	bl sub_80A1A4C
	b _0809E276
	.align 2, 0
_0809E24C: .4byte 0x0000FFFF
_0809E250: .4byte gBackgroundsCopyQueueCursor
_0809E254: .4byte gBackgroundsCopyQueueIndex
_0809E258: .4byte gUnknown_03006840
_0809E25C: .4byte gVramGraphicsCopyCursor
_0809E260: .4byte gVramGraphicsCopyQueueIndex
_0809E264:
	cmp r0, #1
	bne _0809E276
	ldr r1, [r5]
	movs r0, #0xa
	strb r0, [r1]
	ldr r0, _0809E27C @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
_0809E276:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809E27C: .4byte gCurTask

	thumb_func_start sub_809E280
sub_809E280: @ 0x0809E280
	bx lr
	.align 2, 0

	thumb_func_start sub_809E284
sub_809E284: @ 0x0809E284
	push {r4, r5, lr}
	ldr r0, _0809E2A8 @ =gStageData
	ldrb r4, [r0, #6]
	ldr r0, _0809E2AC @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	adds r0, r5, #0
	bl sub_809E384
	cmp r4, #0
	bne _0809E2B0
	bl sub_8025A90
	b _0809E2B4
	.align 2, 0
_0809E2A8: .4byte gStageData
_0809E2AC: .4byte gCurTask
_0809E2B0:
	bl sub_80253CC
_0809E2B4:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0809E2FC
	ldr r1, _0809E2E4 @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _0809E2E8 @ =gBackgroundsCopyQueueCursor
	ldr r0, _0809E2EC @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _0809E2F0 @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _0809E2F4 @ =gVramGraphicsCopyCursor
	ldr r0, _0809E2F8 @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	movs r0, #3
	bl sub_80A1A4C
	b _0809E30E
	.align 2, 0
_0809E2E4: .4byte 0x0000FFFF
_0809E2E8: .4byte gBackgroundsCopyQueueCursor
_0809E2EC: .4byte gBackgroundsCopyQueueIndex
_0809E2F0: .4byte gUnknown_03006840
_0809E2F4: .4byte gVramGraphicsCopyCursor
_0809E2F8: .4byte gVramGraphicsCopyQueueIndex
_0809E2FC:
	adds r0, r5, #0
	bl sub_809E354
	cmp r0, #1
	bne _0809E30E
	ldr r0, _0809E314 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809E318 @ =sub_809CA64
	str r0, [r1, #8]
_0809E30E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809E314: .4byte gCurTask
_0809E318: .4byte sub_809CA64

	thumb_func_start sub_809E31C
sub_809E31C: @ 0x0809E31C
	push {r4, lr}
	ldr r4, _0809E350 @ =gCurTask
	ldr r0, [r4]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r1, r1, r0
	ldrh r0, [r1, #6]
	subs r0, #1
	strh r0, [r1, #6]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0809E348
	ldr r0, [r1]
	movs r1, #0xa
	strb r1, [r0]
	movs r0, #1
	bl sub_808ADF0
	ldr r0, [r4]
	bl TaskDestroy
_0809E348:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809E350: .4byte gCurTask

	thumb_func_start sub_809E354
sub_809E354: @ 0x0809E354
	push {lr}
	adds r1, r0, #0
	ldr r0, [r1, #0xc]
	ldr r2, _0809E378 @ =0x00004FFF
	cmp r0, r2
	bgt _0809E36C
	movs r3, #0x80
	lsls r3, r3, #5
	adds r0, r0, r3
	str r0, [r1, #0xc]
	cmp r0, r2
	ble _0809E37C
_0809E36C:
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [r1, #0xc]
	movs r0, #1
	b _0809E37E
	.align 2, 0
_0809E378: .4byte 0x00004FFF
_0809E37C:
	movs r0, #0
_0809E37E:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_809E384
sub_809E384: @ 0x0809E384
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x10
	ldr r1, [r4, #8]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r4, #0xc]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	bl DisplaySprite
	adds r0, r4, #0
	adds r0, #0x38
	ldr r1, [r4, #8]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r4, #0xc]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	bl DisplaySprite
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_809E3B4
sub_809E3B4: @ 0x0809E3B4
	bx lr
	.align 2, 0

	thumb_func_start sub_809E3B8
sub_809E3B8: @ 0x0809E3B8
	push {r4, lr}
	ldr r0, _0809E3F8 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	bl sub_802610C
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0809E414
	ldr r1, _0809E3FC @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _0809E400 @ =gBackgroundsCopyQueueCursor
	ldr r0, _0809E404 @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _0809E408 @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _0809E40C @ =gVramGraphicsCopyCursor
	ldr r0, _0809E410 @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	movs r0, #3
	bl sub_80A1A4C
	b _0809E448
	.align 2, 0
_0809E3F8: .4byte gCurTask
_0809E3FC: .4byte 0x0000FFFF
_0809E400: .4byte gBackgroundsCopyQueueCursor
_0809E404: .4byte gBackgroundsCopyQueueIndex
_0809E408: .4byte gUnknown_03006840
_0809E40C: .4byte gVramGraphicsCopyCursor
_0809E410: .4byte gVramGraphicsCopyQueueIndex
_0809E414:
	adds r0, r4, #0
	bl sub_809CE58
	adds r0, r4, #0
	bl sub_809CDC8
	cmp r0, #1
	bne _0809E448
	ldrb r0, [r4, #4]
	cmp r0, #0
	bne _0809E434
	ldr r0, [r4, #8]
	ldr r1, [r4]
	bl sub_809C970
	b _0809E440
_0809E434:
	cmp r0, #1
	bne _0809E440
	ldr r0, [r4, #8]
	ldr r1, [r4]
	bl sub_809CF04
_0809E440:
	ldr r0, _0809E450 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809E454 @ =sub_809E458
	str r0, [r1, #8]
_0809E448:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809E450: .4byte gCurTask
_0809E454: .4byte sub_809E458

	thumb_func_start sub_809E458
sub_809E458: @ 0x0809E458
	push {r4, r5, lr}
	ldr r5, _0809E498 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	bl sub_802610C
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0809E4B4
	ldr r1, _0809E49C @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _0809E4A0 @ =gBackgroundsCopyQueueCursor
	ldr r0, _0809E4A4 @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _0809E4A8 @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _0809E4AC @ =gVramGraphicsCopyCursor
	ldr r0, _0809E4B0 @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	movs r0, #3
	bl sub_80A1A4C
	b _0809E4D4
	.align 2, 0
_0809E498: .4byte gCurTask
_0809E49C: .4byte 0x0000FFFF
_0809E4A0: .4byte gBackgroundsCopyQueueCursor
_0809E4A4: .4byte gBackgroundsCopyQueueIndex
_0809E4A8: .4byte gUnknown_03006840
_0809E4AC: .4byte gVramGraphicsCopyCursor
_0809E4B0: .4byte gVramGraphicsCopyQueueIndex
_0809E4B4:
	adds r0, r4, #0
	bl sub_809CE58
	ldr r0, [r4]
	ldrb r0, [r0]
	cmp r0, #0xa
	bne _0809E4CA
	ldr r0, [r5]
	bl TaskDestroy
	b _0809E4D4
_0809E4CA:
	cmp r0, #0
	bne _0809E4D4
	ldr r0, [r5]
	bl TaskDestroy
_0809E4D4:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_809E4DC
sub_809E4DC: @ 0x0809E4DC
	bx lr
	.align 2, 0

	thumb_func_start sub_809E4E0
sub_809E4E0: @ 0x0809E4E0
	push {r4, r5, lr}
	ldr r5, _0809E520 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	bl sub_802610C
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0809E53C
	ldr r1, _0809E524 @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _0809E528 @ =gBackgroundsCopyQueueCursor
	ldr r0, _0809E52C @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _0809E530 @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _0809E534 @ =gVramGraphicsCopyCursor
	ldr r0, _0809E538 @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	movs r0, #3
	bl sub_80A1A4C
	b _0809E56A
	.align 2, 0
_0809E520: .4byte gCurTask
_0809E524: .4byte 0x0000FFFF
_0809E528: .4byte gBackgroundsCopyQueueCursor
_0809E52C: .4byte gBackgroundsCopyQueueIndex
_0809E530: .4byte gUnknown_03006840
_0809E534: .4byte gVramGraphicsCopyCursor
_0809E538: .4byte gVramGraphicsCopyQueueIndex
_0809E53C:
	adds r0, r4, #0
	bl sub_809E5E4
	adds r0, r4, #0
	bl sub_809E5AC
	cmp r0, #1
	bne _0809E56A
	ldrb r0, [r4, #4]
	cmp r0, #1
	bne _0809E55C
	ldr r0, [r4, #8]
	ldr r1, [r4]
	bl sub_809CFA8
	b _0809E564
_0809E55C:
	ldr r0, [r4, #8]
	ldr r1, [r4]
	bl sub_809D27C
_0809E564:
	ldr r1, [r5]
	ldr r0, _0809E570 @ =sub_809E574
	str r0, [r1, #8]
_0809E56A:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809E570: .4byte sub_809E574

	thumb_func_start sub_809E574
sub_809E574: @ 0x0809E574
	push {r4, r5, lr}
	ldr r5, _0809E598 @ =gCurTask
	ldr r0, [r5]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	adds r0, r4, #0
	bl sub_809E5E4
	ldr r0, [r4]
	ldrb r0, [r0]
	cmp r0, #0xa
	bne _0809E59C
	ldr r0, [r5]
	bl TaskDestroy
	b _0809E5A6
	.align 2, 0
_0809E598: .4byte gCurTask
_0809E59C:
	cmp r0, #0
	bne _0809E5A6
	ldr r0, [r5]
	bl TaskDestroy
_0809E5A6:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_809E5AC
sub_809E5AC: @ 0x0809E5AC
	push {lr}
	adds r1, r0, #0
	ldr r2, [r1, #0xc]
	ldr r0, _0809E5D0 @ =0x000077FF
	cmp r2, r0
	bgt _0809E5D4
	movs r3, #0x80
	lsls r3, r3, #5
	adds r0, r2, r3
	str r0, [r1, #0xc]
	movs r2, #0xf0
	lsls r2, r2, #7
	cmp r0, r2
	ble _0809E5DE
	str r2, [r1, #0xc]
	movs r0, #1
	b _0809E5E0
	.align 2, 0
_0809E5D0: .4byte 0x000077FF
_0809E5D4:
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r1, #0xc]
	movs r0, #1
	b _0809E5E0
_0809E5DE:
	movs r0, #0
_0809E5E0:
	pop {r1}
	bx r1

	thumb_func_start sub_809E5E4
sub_809E5E4: @ 0x0809E5E4
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x14
	ldr r0, [r5, #0xc]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x10]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	ldr r0, [r4, #8]
	ldr r1, _0809E62C @ =0xFFFFFBFF
	ands r0, r1
	str r0, [r4, #8]
	adds r0, r4, #0
	bl DisplaySprite
	ldr r1, [r5, #0xc]
	asrs r1, r1, #8
	movs r0, #0xf0
	subs r0, r0, r1
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x10]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	str r0, [r4, #8]
	adds r0, r4, #0
	bl DisplaySprite
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809E62C: .4byte 0xFFFFFBFF
    
	thumb_func_start sub_809E630
sub_809E630: @ 0x0809E630
	bx lr
	.align 2, 0

	thumb_func_start sub_809E634
sub_809E634: @ 0x0809E634
	push {lr}
	adds r1, r0, #0
	ldr r2, [r1, #0xc]
	ldr r0, _0809E658 @ =0x000077FF
	cmp r2, r0
	bgt _0809E65C
	movs r3, #0x80
	lsls r3, r3, #4
	adds r0, r2, r3
	str r0, [r1, #0xc]
	movs r2, #0xf0
	lsls r2, r2, #7
	cmp r0, r2
	ble _0809E666
	str r2, [r1, #0xc]
	movs r0, #1
	b _0809E668
	.align 2, 0
_0809E658: .4byte 0x000077FF
_0809E65C:
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r1, #0xc]
	movs r0, #1
	b _0809E668
_0809E666:
	movs r0, #0
_0809E668:
	pop {r1}
	bx r1

	thumb_func_start sub_809E66C
sub_809E66C: @ 0x0809E66C
	push {lr}
	adds r2, r0, #0
	adds r2, #0x14
	ldr r1, [r0, #0xc]
	asrs r1, r1, #8
	strh r1, [r2, #0x10]
	ldr r0, [r0, #0x10]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	adds r0, r2, #0
	bl DisplaySprite
	pop {r0}
	bx r0

	thumb_func_start sub_809E688
sub_809E688: @ 0x0809E688
	bx lr
	.align 2, 0

	thumb_func_start sub_809E68C
sub_809E68C: @ 0x0809E68C
	push {r4, r5, lr}
	ldr r5, _0809E6CC @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	bl sub_802610C
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0809E6E8
	ldr r1, _0809E6D0 @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _0809E6D4 @ =gBackgroundsCopyQueueCursor
	ldr r0, _0809E6D8 @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _0809E6DC @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _0809E6E0 @ =gVramGraphicsCopyCursor
	ldr r0, _0809E6E4 @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	movs r0, #3
	bl sub_80A1A4C
	b _0809E702
	.align 2, 0
_0809E6CC: .4byte gCurTask
_0809E6D0: .4byte 0x0000FFFF
_0809E6D4: .4byte gBackgroundsCopyQueueCursor
_0809E6D8: .4byte gBackgroundsCopyQueueIndex
_0809E6DC: .4byte gUnknown_03006840
_0809E6E0: .4byte gVramGraphicsCopyCursor
_0809E6E4: .4byte gVramGraphicsCopyQueueIndex
_0809E6E8:
	ldr r0, [r4]
	ldrb r0, [r0]
	cmp r0, #0xa
	bne _0809E6F8
	ldr r0, [r5]
	bl TaskDestroy
	b _0809E702
_0809E6F8:
	cmp r0, #0
	bne _0809E702
	ldr r0, [r5]
	bl TaskDestroy
_0809E702:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_809E708
sub_809E708: @ 0x0809E708
	push {lr}
	adds r1, r0, #0
	ldr r2, [r1, #0xc]
	ldr r0, _0809E72C @ =0x000027FF
	cmp r2, r0
	bgt _0809E730
	movs r3, #0x80
	lsls r3, r3, #4
	adds r0, r2, r3
	str r0, [r1, #0xc]
	movs r2, #0xa0
	lsls r2, r2, #6
	cmp r0, r2
	ble _0809E73A
	str r2, [r1, #0xc]
	movs r0, #1
	b _0809E73C
	.align 2, 0
_0809E72C: .4byte 0x000027FF
_0809E730:
	movs r0, #0xa0
	lsls r0, r0, #6
	str r0, [r1, #0xc]
	movs r0, #1
	b _0809E73C
_0809E73A:
	movs r0, #0
_0809E73C:
	pop {r1}
	bx r1

	thumb_func_start sub_809E740
sub_809E740: @ 0x0809E740
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x14
	ldr r1, [r4, #0xc]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r4, #0x10]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	bl DisplaySprite
	adds r0, r4, #0
	adds r0, #0x3c
	ldr r2, [r4, #0xc]
	asrs r2, r2, #8
	movs r1, #0xf0
	subs r1, r1, r2
	strh r1, [r0, #0x10]
	ldr r1, [r4, #0x10]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	bl DisplaySprite
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_809E774
sub_809E774: @ 0x0809E774
	bx lr
	.align 2, 0

	thumb_func_start sub_809E778
sub_809E778: @ 0x0809E778
	push {r4, lr}
	ldr r4, _0809E7AC @ =gCurTask
	ldr r0, [r4]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r1, r1, r0
	ldr r0, [r1]
	ldrb r0, [r0]
	cmp r0, #0xa
	bne _0809E7D0
	ldrb r0, [r1, #5]
	cmp r0, #0
	beq _0809E7B8
	ldr r2, _0809E7B0 @ =gDispCnt
	ldrh r1, [r2]
	ldr r0, _0809E7B4 @ =0x00009FFF
	ands r0, r1
	strh r0, [r2]
	bl sub_80AD9E4
	ldr r0, [r4]
	bl TaskDestroy
	b _0809E7D0
	.align 2, 0
_0809E7AC: .4byte gCurTask
_0809E7B0: .4byte gDispCnt
_0809E7B4: .4byte 0x00009FFF
_0809E7B8:
	adds r0, r1, #0
	bl sub_809DE9C
	ldr r0, _0809E7D8 @ =gStageData
	movs r1, #6
	strb r1, [r0, #3]
	movs r0, #0xff
	bl sub_808D0F0
	ldr r0, [r4]
	bl TaskDestroy
_0809E7D0:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809E7D8: .4byte gStageData

	thumb_func_start sub_809E7DC
sub_809E7DC: @ 0x0809E7DC
	push {lr}
	adds r2, r0, #0
	adds r2, #0x34
	ldr r1, [r0, #0x1c]
	asrs r1, r1, #8
	strh r1, [r2, #0x10]
	ldr r0, [r0, #0x20]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	adds r0, r2, #0
	bl DisplaySprite
	pop {r0}
	bx r0

	thumb_func_start sub_809E7F8
sub_809E7F8: @ 0x0809E7F8
	push {lr}
	adds r1, r0, #0
	ldr r0, [r1, #0x20]
	ldr r2, _0809E81C @ =0x000031FF
	cmp r0, r2
	bgt _0809E810
	movs r3, #0x80
	lsls r3, r3, #5
	adds r0, r0, r3
	str r0, [r1, #0x20]
	cmp r0, r2
	ble _0809E820
_0809E810:
	movs r0, #0xc8
	lsls r0, r0, #6
	str r0, [r1, #0x20]
	movs r0, #1
	b _0809E822
	.align 2, 0
_0809E81C: .4byte 0x000031FF
_0809E820:
	movs r0, #0
_0809E822:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_809E828
sub_809E828: @ 0x0809E828
	push {lr}
	adds r1, r0, #0
	ldr r0, [r1, #0x24]
	ldr r2, _0809E84C @ =0x00003BFF
	cmp r0, r2
	bgt _0809E840
	movs r3, #0x80
	lsls r3, r3, #5
	adds r0, r0, r3
	str r0, [r1, #0x24]
	cmp r0, r2
	ble _0809E850
_0809E840:
	movs r0, #0xf0
	lsls r0, r0, #6
	str r0, [r1, #0x24]
	movs r0, #1
	b _0809E852
	.align 2, 0
_0809E84C: .4byte 0x00003BFF
_0809E850:
	movs r0, #0
_0809E852:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_809E858
sub_809E858: @ 0x0809E858
	bx lr
	.align 2, 0

	thumb_func_start sub_809E85C
sub_809E85C: @ 0x0809E85C
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r1, _0809E8DC @ =gDispCnt
	ldr r2, _0809E8E0 @ =0x00001041
	adds r0, r2, #0
	strh r0, [r1]
	ldr r0, _0809E8E4 @ =sub_809EBF4
	movs r1, #0xf0
	lsls r1, r1, #1
	movs r2, #0x84
	lsls r2, r2, #6
	ldr r3, _0809E8E8 @ =sub_809F84C
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	movs r0, #0
	strb r4, [r5, #2]
	ldr r2, _0809E8EC @ =gSaveGame
	ldr r3, _0809E8F0 @ =0x00000366
	adds r1, r2, r3
	ldrb r1, [r1]
	strb r1, [r5, #5]
	strb r0, [r5, #3]
	strb r0, [r5, #4]
	strh r0, [r5, #0x12]
	str r0, [r5, #0x14]
	str r0, [r5, #0x18]
	str r0, [r5, #0x1c]
	strh r0, [r5, #0xe]
	strh r0, [r5, #0x10]
	str r0, [r5, #0x20]
	str r0, [r5, #0x24]
	str r0, [r5, #0x28]
	str r0, [r5, #0x2c]
	str r0, [r5, #0x30]
	str r0, [r5, #0x34]
	ldr r0, _0809E8F4 @ =gUnknown_03001060
	adds r0, #0x50
	ldrh r0, [r0]
	strb r0, [r5, #1]
	movs r1, #0x84
	lsls r1, r1, #8
	str r1, [r5, #0x38]
	str r1, [r5, #0x3c]
	movs r0, #0xf8
	lsls r0, r0, #7
	str r0, [r5, #0x40]
	str r1, [r5, #0x44]
	cmp r4, #0
	beq _0809E8D6
	ldrb r1, [r2, #0x11]
	cmp r1, #7
	bls _0809E8F8
_0809E8D6:
	movs r0, #7
	strb r0, [r5, #6]
	b _0809E8FA
	.align 2, 0
_0809E8DC: .4byte gDispCnt
_0809E8E0: .4byte 0x00001041
_0809E8E4: .4byte sub_809EBF4
_0809E8E8: .4byte sub_809F84C
_0809E8EC: .4byte gSaveGame
_0809E8F0: .4byte 0x00000366
_0809E8F4: .4byte gUnknown_03001060
_0809E8F8:
	strb r1, [r5, #6]
_0809E8FA:
	movs r2, #0
	adds r3, r5, #7
	movs r4, #3
	ldr r6, _0809E910 @ =gUnknown_03000559
_0809E902:
	ldrb r0, [r5, #2]
	cmp r0, #0
	bne _0809E914
	adds r0, r3, r2
	strb r4, [r0]
	b _0809E938
	.align 2, 0
_0809E910: .4byte gUnknown_03000559
_0809E914:
	adds r0, r2, r6
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	beq _0809E934
	adds r1, r3, r2
	lsrs r0, r0, #0x19
	adds r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #3
	ble _0809E938
	strb r4, [r1]
	b _0809E938
_0809E934:
	adds r0, r3, r2
	strb r1, [r0]
_0809E938:
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #6
	bls _0809E902
	adds r0, r5, #0
	bl sub_809E978
	adds r0, r5, #0
	bl sub_809EB74
	ldr r0, _0809E96C @ =0x0000FFFF
	bl sub_80C4C0C
	ldr r1, _0809E970 @ =gBgPalette
	strh r0, [r1]
	ldr r2, _0809E974 @ =gFlags
	ldr r0, [r2]
	movs r1, #1
	orrs r0, r1
	str r0, [r2]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809E96C: .4byte 0x0000FFFF
_0809E970: .4byte gBgPalette
_0809E974: .4byte gFlags

	thumb_func_start sub_809E978
sub_809E978: @ 0x0809E978
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	ldr r6, _0809EB5C @ =0x06010000
	ldrb r0, [r7, #5]
	rsbs r5, r0, #0
	orrs r5, r0
	lsrs r5, r5, #0x1f
	movs r1, #0x88
	lsls r1, r1, #1
	adds r0, r7, r1
	str r6, [r0]
	ldr r3, _0809EB60 @ =gUnknown_080D98D8
	lsls r2, r5, #3
	mov r8, r2
	adds r1, r3, #4
	add r1, r8
	ldr r1, [r1]
	lsls r1, r1, #5
	adds r6, r1, r6
	adds r2, r2, r3
	ldrh r1, [r2]
	movs r4, #0
	mov sl, r4
	movs r4, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x20]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x24]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	movs r1, #0x10
	mov sb, r1
	mov r2, sb
	strb r2, [r0, #0x1c]
	mov r1, sl
	strb r1, [r0, #0x1f]
	str r4, [r0, #8]
	str r3, [sp]
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	adds r0, #0xe8
	str r6, [r0]
	ldr r3, [sp]
	ldr r1, [r3, #0x14]
	lsls r1, r1, #5
	adds r6, r6, r1
	ldrh r1, [r3, #0x10]
	strh r1, [r0, #0xc]
	ldrb r1, [r3, #0x12]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x28]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x2c]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	mov r2, sb
	strb r2, [r0, #0x1c]
	mov r1, sl
	strb r1, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	adds r0, #0x48
	str r6, [r7, #0x48]
	ldr r2, _0809EB64 @ =gUnknown_080D8AAC
	lsls r5, r5, #4
	adds r1, r2, #4
	adds r1, r5, r1
	ldr r1, [r1]
	lsls r1, r1, #5
	adds r6, r6, r1
	adds r5, r5, r2
	ldrh r1, [r5]
	strh r1, [r0, #0xc]
	ldrb r1, [r5, #2]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x20]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x24]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	mov r2, sb
	strb r2, [r0, #0x1c]
	mov r1, sl
	strb r1, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	adds r0, #0x70
	str r6, [r7, #0x70]
	ldr r2, _0809EB68 @ =gUnknown_080D8ACC
	adds r1, r2, #4
	add r1, r8
	ldr r1, [r1]
	lsls r1, r1, #5
	adds r6, r6, r1
	add r8, r2
	mov r2, r8
	ldrh r1, [r2]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x20]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x24]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	mov r1, sb
	strb r1, [r0, #0x1c]
	mov r2, sl
	strb r2, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	adds r0, #0x98
	str r6, [r0]
	adds r6, #0x80
	ldr r5, _0809EB6C @ =gUnknown_080D8ADC
	ldrh r1, [r5]
	strh r1, [r0, #0xc]
	ldrb r1, [r5, #2]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x20]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x24]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	mov r1, sb
	strb r1, [r0, #0x1c]
	mov r2, sl
	strb r2, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	adds r0, #0xc0
	str r6, [r0]
	adds r6, #0x80
	ldrh r1, [r5]
	strh r1, [r0, #0xc]
	ldrb r1, [r5, #2]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x20]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x24]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	mov r1, sb
	strb r1, [r0, #0x1c]
	mov r2, sl
	strb r2, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	movs r1, #0x9c
	lsls r1, r1, #1
	adds r0, r7, r1
	str r6, [r0]
	ldr r2, _0809EB70 @ =gUnknown_080D8AEC
	ldrh r1, [r2]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x20]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x24]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	mov r2, sb
	strb r2, [r0, #0x1c]
	mov r1, sl
	strb r1, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809EB5C: .4byte 0x06010000
_0809EB60: .4byte gUnknown_080D98D8
_0809EB64: .4byte gUnknown_080D8AAC
_0809EB68: .4byte gUnknown_080D8ACC
_0809EB6C: .4byte gUnknown_080D8ADC
_0809EB70: .4byte gUnknown_080D8AEC

	thumb_func_start sub_809EB74
sub_809EB74: @ 0x0809EB74
	push {lr}
	mov ip, r0
	ldr r2, _0809EBD8 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _0809EBDC @ =gBgCntRegs
	movs r3, #0
	movs r2, #0
	ldr r0, _0809EBE0 @ =0x00001808
	strh r0, [r1, #2]
	ldr r1, _0809EBE4 @ =gBgScrollRegs
	strh r2, [r1, #4]
	ldr r0, _0809EBE8 @ =0x0000FF88
	strh r0, [r1, #6]
	movs r0, #0xd0
	lsls r0, r0, #1
	add r0, ip
	ldr r1, _0809EBEC @ =0x06008000
	str r1, [r0, #4]
	strh r2, [r0, #0xa]
	ldr r1, _0809EBF0 @ =0x0600C000
	str r1, [r0, #0xc]
	strh r2, [r0, #0x18]
	strh r2, [r0, #0x1a]
	movs r1, #0xb1
	lsls r1, r1, #1
	strh r1, [r0, #0x1c]
	strh r2, [r0, #0x1e]
	strh r2, [r0, #0x20]
	strh r2, [r0, #0x22]
	strh r2, [r0, #0x24]
	movs r1, #0x1e
	strh r1, [r0, #0x26]
	movs r1, #0x28
	strh r1, [r0, #0x28]
	movs r1, #0xe5
	lsls r1, r1, #1
	add r1, ip
	strb r3, [r1]
	movs r1, #1
	strh r1, [r0, #0x2e]
	bl DrawBackground
	pop {r0}
	bx r0
	.align 2, 0
_0809EBD8: .4byte gDispCnt
_0809EBDC: .4byte gBgCntRegs
_0809EBE0: .4byte 0x00001808
_0809EBE4: .4byte gBgScrollRegs
_0809EBE8: .4byte 0x0000FF88
_0809EBEC: .4byte 0x06008000
_0809EBF0: .4byte 0x0600C000

	thumb_func_start sub_809EBF4
sub_809EBF4: @ 0x0809EBF4
	push {r4, r5, lr}
	ldr r5, _0809EC60 @ =gCurTask
	ldr r0, [r5]
	ldrh r3, [r0, #6]
	ldr r2, _0809EC64 @ =gDispCnt
	ldrh r0, [r2]
	movs r4, #0x80
	lsls r4, r4, #1
	adds r1, r4, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _0809EC68 @ =gBgCntRegs
	movs r4, #0
	movs r2, #0
	ldr r0, _0809EC6C @ =0x00000E83
	strh r0, [r1]
	ldr r0, _0809EC70 @ =gBgScrollRegs
	strh r2, [r0]
	strh r2, [r0, #2]
	ldr r1, _0809EC74 @ =0x03000160
	adds r0, r3, r1
	movs r1, #0xc0
	lsls r1, r1, #0x13
	str r1, [r0, #4]
	strh r2, [r0, #0xa]
	ldr r1, _0809EC78 @ =0x06007000
	str r1, [r0, #0xc]
	strh r2, [r0, #0x18]
	strh r2, [r0, #0x1a]
	movs r1, #0xbb
	lsls r1, r1, #1
	strh r1, [r0, #0x1c]
	strh r2, [r0, #0x1e]
	strh r2, [r0, #0x20]
	strh r2, [r0, #0x22]
	strh r2, [r0, #0x24]
	movs r1, #0x1e
	strh r1, [r0, #0x26]
	movs r1, #0x14
	strh r1, [r0, #0x28]
	ldr r1, _0809EC7C @ =0x0300018A
	adds r3, r3, r1
	strb r4, [r3]
	movs r1, #4
	strh r1, [r0, #0x2e]
	bl DrawBackground
	ldr r1, [r5]
	ldr r0, _0809EC80 @ =sub_809EC84
	str r0, [r1, #8]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809EC60: .4byte gCurTask
_0809EC64: .4byte gDispCnt
_0809EC68: .4byte gBgCntRegs
_0809EC6C: .4byte 0x00000E83
_0809EC70: .4byte gBgScrollRegs
_0809EC74: .4byte 0x03000160
_0809EC78: .4byte 0x06007000
_0809EC7C: .4byte 0x0300018A
_0809EC80: .4byte sub_809EC84

	thumb_func_start sub_809EC84
sub_809EC84: @ 0x0809EC84
	push {r4, r5, r6, r7, lr}
	ldr r2, _0809ECA4 @ =gStageData
	movs r5, #0
	ldr r0, _0809ECA8 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldrb r0, [r2, #6]
	cmp r0, #0
	bne _0809ECAC
	bl sub_80254CC
	b _0809ECB0
	.align 2, 0
_0809ECA4: .4byte gStageData
_0809ECA8: .4byte gCurTask
_0809ECAC:
	bl sub_8025AFC
_0809ECB0:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bge _0809ECCC
	ldr r0, _0809ECC4 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809ECC8 @ =sub_809F638
	b _0809ED9A
	.align 2, 0
_0809ECC4: .4byte gCurTask
_0809ECC8: .4byte sub_809F638
_0809ECCC:
	cmp r0, #0
	beq _0809ED9C
	ldrh r3, [r4, #0x10]
	ldr r6, _0809ED2C @ =gBldRegs
	cmp r3, #0
	bne _0809ED08
	ldr r0, _0809ED30 @ =0x00003FFF
	strh r0, [r6]
	ldr r2, _0809ED34 @ =gDispCnt
	ldrh r0, [r2]
	movs r7, #0xc0
	lsls r7, r7, #7
	adds r1, r7, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _0809ED38 @ =gWinRegs
	movs r0, #0xff
	strh r0, [r1]
	strh r0, [r1, #2]
	strh r0, [r1, #6]
	ldr r0, _0809ED3C @ =0x00003132
	strh r0, [r1, #8]
	strh r3, [r1, #0xa]
	movs r0, #0x10
	strh r0, [r6, #4]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r4, #0xe]
	movs r0, #1
	strh r0, [r4, #0x10]
_0809ED08:
	ldrh r0, [r6, #4]
	cmp r0, #0
	beq _0809ED48
	ldrh r0, [r4, #0xe]
	lsrs r0, r0, #8
	strh r0, [r6, #4]
	ldr r1, _0809ED40 @ =0xFFFFFE00
	adds r0, r1, #0
	ldrh r7, [r4, #0xe]
	adds r0, r0, r7
	strh r0, [r4, #0xe]
	lsls r0, r0, #0x10
	ldr r1, _0809ED44 @ =0x0FFF0000
	cmp r0, r1
	bls _0809ED4E
	movs r0, #0
	strh r0, [r4, #0xe]
	b _0809ED4E
	.align 2, 0
_0809ED2C: .4byte gBldRegs
_0809ED30: .4byte 0x00003FFF
_0809ED34: .4byte gDispCnt
_0809ED38: .4byte gWinRegs
_0809ED3C: .4byte 0x00003132
_0809ED40: .4byte 0xFFFFFE00
_0809ED44: .4byte 0x0FFF0000
_0809ED48:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_0809ED4E:
	adds r0, r4, #0
	bl sub_809F7D8
	cmp r0, #1
	bne _0809ED5E
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_0809ED5E:
	adds r0, r4, #0
	bl sub_809F810
	cmp r0, #1
	bne _0809ED6E
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_0809ED6E:
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r4, #0x1c]
	movs r1, #0xc0
	lsls r1, r1, #5
	str r1, [r4, #0x14]
	ldr r1, _0809EDA4 @ =gWinRegs
	adds r0, #0x90
	strh r0, [r1, #4]
	adds r0, r4, #0
	bl sub_809F550
	adds r0, r4, #0
	bl sub_809F7B8
	cmp r5, #3
	bne _0809ED9C
	movs r0, #0
	strh r0, [r4, #0x10]
	ldr r0, _0809EDA8 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809EDAC @ =sub_809EDB0
_0809ED9A:
	str r0, [r1, #8]
_0809ED9C:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809EDA4: .4byte gWinRegs
_0809EDA8: .4byte gCurTask
_0809EDAC: .4byte sub_809EDB0

	thumb_func_start sub_809EDB0
sub_809EDB0: @ 0x0809EDB0
	push {r4, r5, lr}
	ldr r0, _0809EDF0 @ =gStageData
	ldrb r2, [r0, #6]
	ldr r0, _0809EDF4 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldrb r1, [r4]
	ldr r0, _0809EDF8 @ =gUnknown_03001060
	adds r0, #0x50
	ldrh r0, [r0]
	adds r0, #2
	cmp r1, r0
	beq _0809EDE0
	ldrb r1, [r4, #3]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	ldrb r1, [r4, #4]
	adds r0, r0, r1
	adds r0, #2
	strb r0, [r4]
_0809EDE0:
	lsls r0, r2, #0x10
	adds r5, r0, #0
	cmp r5, #0
	bne _0809EDFC
	ldrb r0, [r4]
	bl sub_8025460
	b _0809EE00
	.align 2, 0
_0809EDF0: .4byte gStageData
_0809EDF4: .4byte gCurTask
_0809EDF8: .4byte gUnknown_03001060
_0809EDFC:
	bl sub_8025AA8
_0809EE00:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0809EE1C
	ldr r0, _0809EE14 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809EE18 @ =sub_809F638
	b _0809EE3E
	.align 2, 0
_0809EE14: .4byte gCurTask
_0809EE18: .4byte sub_809F638
_0809EE1C:
	cmp r5, #0
	beq _0809EE26
	adds r0, r4, #0
	bl sub_809F7A4
_0809EE26:
	adds r0, r4, #0
	bl sub_809F550
	adds r0, r4, #0
	bl sub_809F7B8
	adds r0, r4, #0
	bl sub_809F5E4
	ldr r0, _0809EE48 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809EE4C @ =sub_809EE50
_0809EE3E:
	str r0, [r1, #8]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809EE48: .4byte gCurTask
_0809EE4C: .4byte sub_809EE50

	thumb_func_start sub_809EE50
sub_809EE50: @ 0x0809EE50
	push {r4, r5, r6, lr}
	ldr r0, _0809EEA4 @ =gStageData
	ldrb r5, [r0, #6]
	ldr r0, _0809EEA8 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_809F550
	adds r0, r4, #0
	bl sub_809F7B8
	adds r0, r4, #0
	bl sub_809F5E4
	ldrb r1, [r4]
	ldr r0, _0809EEAC @ =gUnknown_03001060
	adds r0, #0x50
	ldrh r0, [r0]
	adds r0, #2
	cmp r1, r0
	beq _0809EE92
	ldrb r1, [r4, #3]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	ldrb r1, [r4, #4]
	adds r0, r0, r1
	adds r0, #2
	strb r0, [r4]
_0809EE92:
	lsls r0, r5, #0x10
	adds r5, r0, #0
	cmp r5, #0
	bne _0809EEB0
	ldrb r0, [r4]
	bl sub_8025460
	b _0809EEB4
	.align 2, 0
_0809EEA4: .4byte gStageData
_0809EEA8: .4byte gCurTask
_0809EEAC: .4byte gUnknown_03001060
_0809EEB0:
	bl sub_80255B0
_0809EEB4:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r0, r0, #0x10
	asrs r6, r0, #0x10
	cmp r6, #0
	bge _0809EED0
	ldr r0, _0809EEC8 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809EECC @ =sub_809F638
	b _0809EF56
	.align 2, 0
_0809EEC8: .4byte gCurTask
_0809EECC: .4byte sub_809F638
_0809EED0:
	asrs r5, r5, #0x10
	cmp r5, #0
	beq _0809EEDC
	adds r0, r4, #0
	bl sub_809F7A4
_0809EEDC:
	cmp r6, #1
	bne _0809EEF0
	ldr r0, _0809EEE8 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809EEEC @ =sub_809F170
	b _0809EF56
	.align 2, 0
_0809EEE8: .4byte gCurTask
_0809EEEC: .4byte sub_809F170
_0809EEF0:
	cmp r5, #0
	bne _0809EF3C
	ldr r0, _0809EF2C @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0809EF3C
	movs r0, #0x6a
	bl m4aSongNumStart
	ldr r0, _0809EF30 @ =gUnknown_03001060
	adds r0, #0x50
	ldrb r1, [r4]
	ldrh r0, [r0]
	cmp r1, r0
	beq _0809EF22
	ldrb r1, [r4, #3]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	ldrb r1, [r4, #4]
	adds r0, r0, r1
	adds r0, #2
	strb r0, [r4]
_0809EF22:
	ldr r0, _0809EF34 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809EF38 @ =sub_809F718
	b _0809EF56
	.align 2, 0
_0809EF2C: .4byte gPressedKeys
_0809EF30: .4byte gUnknown_03001060
_0809EF34: .4byte gCurTask
_0809EF38: .4byte sub_809F718
_0809EF3C:
	adds r0, r4, #0
	bl sub_809F310
	cmp r0, #1
	beq _0809EF50
	adds r0, r4, #0
	bl sub_809F460
	cmp r0, #1
	bne _0809EF58
_0809EF50:
	ldr r0, _0809EF60 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809EF64 @ =sub_809EF68
_0809EF56:
	str r0, [r1, #8]
_0809EF58:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809EF60: .4byte gCurTask
_0809EF64: .4byte sub_809EF68

	thumb_func_start sub_809EF68
sub_809EF68: @ 0x0809EF68
	push {r4, r5, lr}
	ldr r0, _0809EFBC @ =gStageData
	ldrb r4, [r0, #6]
	ldr r0, _0809EFC0 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	adds r0, r5, #0
	bl sub_809F550
	adds r0, r5, #0
	bl sub_809F7B8
	adds r0, r5, #0
	bl sub_809F5E4
	ldrb r1, [r5]
	ldr r0, _0809EFC4 @ =gUnknown_03001060
	adds r0, #0x50
	ldrh r0, [r0]
	adds r0, #2
	cmp r1, r0
	beq _0809EFAA
	ldrb r1, [r5, #3]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	ldrb r1, [r5, #4]
	adds r0, r0, r1
	adds r0, #2
	strb r0, [r5]
_0809EFAA:
	lsls r0, r4, #0x10
	adds r4, r0, #0
	cmp r4, #0
	bne _0809EFC8
	ldrb r0, [r5]
	bl sub_8025460
	b _0809EFCC
	.align 2, 0
_0809EFBC: .4byte gStageData
_0809EFC0: .4byte gCurTask
_0809EFC4: .4byte gUnknown_03001060
_0809EFC8:
	bl sub_8025614
_0809EFCC:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0809EFE8
	ldr r0, _0809EFE0 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809EFE4 @ =sub_809F638
	b _0809F058
	.align 2, 0
_0809EFE0: .4byte gCurTask
_0809EFE4: .4byte sub_809F638
_0809EFE8:
	cmp r4, #0
	beq _0809EFF2
	adds r0, r5, #0
	bl sub_809F7A4
_0809EFF2:
	ldrh r2, [r5, #0x10]
	ldr r3, _0809F028 @ =gBldRegs
	cmp r2, #0
	bne _0809F00C
	ldr r0, _0809F02C @ =0x00003F8F
	strh r0, [r3]
	ldr r1, _0809F030 @ =gWinRegs
	ldr r0, _0809F034 @ =0x00001132
	strh r0, [r1, #8]
	strh r2, [r3, #4]
	strh r2, [r5, #0xe]
	movs r0, #1
	strh r0, [r5, #0x10]
_0809F00C:
	ldrh r0, [r3, #4]
	cmp r0, #0xf
	bhi _0809F038
	ldrh r0, [r5, #0xe]
	lsrs r0, r0, #8
	strh r0, [r3, #4]
	movs r1, #0x80
	lsls r1, r1, #2
	adds r0, r1, #0
	ldrh r1, [r5, #0xe]
	adds r0, r0, r1
	strh r0, [r5, #0xe]
	b _0809F05A
	.align 2, 0
_0809F028: .4byte gBldRegs
_0809F02C: .4byte 0x00003F8F
_0809F030: .4byte gWinRegs
_0809F034: .4byte 0x00001132
_0809F038:
	movs r4, #0
	movs r0, #0x10
	strh r0, [r3, #4]
	ldr r3, _0809F060 @ =gBgScrollRegs
	ldr r2, _0809F064 @ =0x0000FF88
	strh r2, [r3, #6]
	ldrb r0, [r5, #3]
	lsls r1, r0, #3
	lsls r0, r0, #4
	adds r1, r1, r0
	adds r1, r1, r2
	strh r1, [r3, #6]
	strh r4, [r5, #0x10]
	ldr r0, _0809F068 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809F06C @ =sub_809F070
_0809F058:
	str r0, [r1, #8]
_0809F05A:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809F060: .4byte gBgScrollRegs
_0809F064: .4byte 0x0000FF88
_0809F068: .4byte gCurTask
_0809F06C: .4byte sub_809F070

	thumb_func_start sub_809F070
sub_809F070: @ 0x0809F070
	push {r4, r5, lr}
	ldr r0, _0809F0C4 @ =gStageData
	ldrb r5, [r0, #6]
	ldr r0, _0809F0C8 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_809F550
	adds r0, r4, #0
	bl sub_809F7B8
	adds r0, r4, #0
	bl sub_809F5E4
	ldrb r1, [r4]
	ldr r0, _0809F0CC @ =gUnknown_03001060
	adds r0, #0x50
	ldrh r0, [r0]
	adds r0, #2
	cmp r1, r0
	beq _0809F0B2
	ldrb r1, [r4, #3]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	ldrb r1, [r4, #4]
	adds r0, r0, r1
	adds r0, #2
	strb r0, [r4]
_0809F0B2:
	lsls r0, r5, #0x10
	adds r5, r0, #0
	cmp r5, #0
	bne _0809F0D0
	ldrb r0, [r4]
	bl sub_8025460
	b _0809F0D4
	.align 2, 0
_0809F0C4: .4byte gStageData
_0809F0C8: .4byte gCurTask
_0809F0CC: .4byte gUnknown_03001060
_0809F0D0:
	bl sub_80255B0
_0809F0D4:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bge _0809F0F0
	ldr r0, _0809F0E8 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809F0EC @ =sub_809F638
	b _0809F160
	.align 2, 0
_0809F0E8: .4byte gCurTask
_0809F0EC: .4byte sub_809F638
_0809F0F0:
	cmp r0, #1
	bne _0809F104
	ldr r0, _0809F0FC @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809F100 @ =sub_809F170
	b _0809F160
	.align 2, 0
_0809F0FC: .4byte gCurTask
_0809F100: .4byte sub_809F170
_0809F104:
	cmp r5, #0
	beq _0809F10E
	adds r0, r4, #0
	bl sub_809F7A4
_0809F10E:
	adds r0, r4, #0
	bl sub_809F310
	cmp r0, #1
	beq _0809F122
	adds r0, r4, #0
	bl sub_809F460
	cmp r0, #1
	bne _0809F134
_0809F122:
	ldr r0, _0809F12C @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809F130 @ =sub_809EF68
	b _0809F160
	.align 2, 0
_0809F12C: .4byte gCurTask
_0809F130: .4byte sub_809EF68
_0809F134:
	ldr r1, _0809F150 @ =gBldRegs
	ldrh r0, [r1, #4]
	cmp r0, #0
	beq _0809F158
	ldrh r0, [r4, #0xe]
	lsrs r0, r0, #8
	strh r0, [r1, #4]
	ldr r1, _0809F154 @ =0xFFFFFE00
	adds r0, r1, #0
	ldrh r1, [r4, #0xe]
	adds r0, r0, r1
	strh r0, [r4, #0xe]
	b _0809F162
	.align 2, 0
_0809F150: .4byte gBldRegs
_0809F154: .4byte 0xFFFFFE00
_0809F158:
	strh r0, [r1, #4]
	ldr r0, _0809F168 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809F16C @ =sub_809EE50
_0809F160:
	str r0, [r1, #8]
_0809F162:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809F168: .4byte gCurTask
_0809F16C: .4byte sub_809EE50

	thumb_func_start sub_809F170
sub_809F170: @ 0x0809F170
	push {r4, r5, r6, lr}
	ldr r0, _0809F1C0 @ =gStageData
	ldrb r5, [r0, #6]
	ldr r0, _0809F1C4 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_809F550
	adds r0, r4, #0
	bl sub_809F7B8
	adds r0, r4, #0
	bl sub_809F5E4
	ldrb r1, [r4]
	ldr r0, _0809F1C8 @ =gUnknown_03001060
	adds r0, #0x50
	ldrh r0, [r0]
	adds r0, #2
	cmp r1, r0
	beq _0809F1B2
	ldrb r1, [r4, #3]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	ldrb r1, [r4, #4]
	adds r0, r0, r1
	adds r0, #2
	strb r0, [r4]
_0809F1B2:
	lsls r0, r5, #0x10
	adds r6, r0, #0
	cmp r6, #0
	bne _0809F1CC
	bl sub_8025534
	b _0809F1D0
	.align 2, 0
_0809F1C0: .4byte gStageData
_0809F1C4: .4byte gCurTask
_0809F1C8: .4byte gUnknown_03001060
_0809F1CC:
	bl sub_8025614
_0809F1D0:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r0, r0, #0x10
	asrs r5, r0, #0x10
	cmp r5, #0
	bge _0809F1EC
	ldr r0, _0809F1E4 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809F1E8 @ =sub_809F638
	b _0809F200
	.align 2, 0
_0809F1E4: .4byte gCurTask
_0809F1E8: .4byte sub_809F638
_0809F1EC:
	cmp r6, #0
	beq _0809F1F6
	adds r0, r4, #0
	bl sub_809F7A4
_0809F1F6:
	cmp r5, #1
	bne _0809F202
	ldr r0, _0809F208 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809F20C @ =sub_809F210
_0809F200:
	str r0, [r1, #8]
_0809F202:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809F208: .4byte gCurTask
_0809F20C: .4byte sub_809F210

	thumb_func_start sub_809F210
sub_809F210: @ 0x0809F210
	push {r4, r5, r6, r7, lr}
	ldr r0, _0809F260 @ =gStageData
	ldrb r5, [r0, #6]
	ldr r0, _0809F264 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_809F550
	adds r0, r4, #0
	bl sub_809F7B8
	adds r0, r4, #0
	bl sub_809F5E4
	ldrb r1, [r4]
	ldr r0, _0809F268 @ =gUnknown_03001060
	adds r0, #0x50
	ldrh r0, [r0]
	adds r0, #2
	cmp r1, r0
	beq _0809F252
	ldrb r1, [r4, #3]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	ldrb r1, [r4, #4]
	adds r0, r0, r1
	adds r0, #2
	strb r0, [r4]
_0809F252:
	lsls r0, r5, #0x10
	adds r5, r0, #0
	cmp r5, #0
	bne _0809F26C
	bl sub_8025534
	b _0809F270
	.align 2, 0
_0809F260: .4byte gStageData
_0809F264: .4byte gCurTask
_0809F268: .4byte gUnknown_03001060
_0809F26C:
	bl sub_8025614
_0809F270:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r0, r0, #0x10
	asrs r6, r0, #0x10
	cmp r6, #0
	bge _0809F28C
	ldr r0, _0809F284 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809F288 @ =sub_809F638
	b _0809F2FE
	.align 2, 0
_0809F284: .4byte gCurTask
_0809F288: .4byte sub_809F638
_0809F28C:
	cmp r5, #0
	beq _0809F296
	adds r0, r4, #0
	bl sub_809F7A4
_0809F296:
	ldrh r3, [r4, #0x10]
	ldr r5, _0809F2E0 @ =gBldRegs
	cmp r3, #0
	bne _0809F2C6
	ldr r2, _0809F2E4 @ =gDispCnt
	ldrh r0, [r2]
	movs r7, #0x80
	lsls r7, r7, #6
	adds r1, r7, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _0809F2E8 @ =gWinRegs
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	orrs r0, r2
	strh r0, [r1, #0xa]
	ldr r0, _0809F2EC @ =0x00003132
	strh r0, [r1, #8]
	ldr r0, _0809F2F0 @ =0x00003FFF
	strh r0, [r5]
	strh r3, [r5, #4]
	strh r3, [r4, #0xe]
	movs r0, #1
	strh r0, [r4, #0x10]
_0809F2C6:
	ldrh r0, [r5, #4]
	cmp r0, #0xf
	bhi _0809F2F4
	ldrh r0, [r4, #0xe]
	lsrs r0, r0, #8
	strh r0, [r5, #4]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r1, #0
	ldrh r7, [r4, #0xe]
	adds r0, r0, r7
	strh r0, [r4, #0xe]
	b _0809F300
	.align 2, 0
_0809F2E0: .4byte gBldRegs
_0809F2E4: .4byte gDispCnt
_0809F2E8: .4byte gWinRegs
_0809F2EC: .4byte 0x00003132
_0809F2F0: .4byte 0x00003FFF
_0809F2F4:
	cmp r6, #1
	bne _0809F300
	ldr r0, _0809F308 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809F30C @ =sub_809F768
_0809F2FE:
	str r0, [r1, #8]
_0809F300:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809F308: .4byte gCurTask
_0809F30C: .4byte sub_809F768

	thumb_func_start sub_809F310
sub_809F310: @ 0x0809F310
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	ldr r0, _0809F398 @ =gStageData
	ldrb r2, [r0, #6]
	ldr r0, [r4, #0x38]
	subs r0, #0x20
	str r0, [r4, #0x38]
	ldr r1, _0809F39C @ =0x00007FFF
	cmp r0, r1
	bgt _0809F32A
	movs r0, #0x84
	lsls r0, r0, #8
	str r0, [r4, #0x38]
_0809F32A:
	ldr r0, [r4, #0x40]
	adds r0, #0x20
	str r0, [r4, #0x40]
	movs r1, #0x80
	lsls r1, r1, #8
	cmp r0, r1
	ble _0809F33E
	movs r0, #0xf8
	lsls r0, r0, #7
	str r0, [r4, #0x40]
_0809F33E:
	cmp r2, #0
	bne _0809F404
	ldr r5, _0809F3A0 @ =gRepeatedKeys
	ldrh r1, [r5]
	movs r0, #0x30
	ands r0, r1
	cmp r0, #0
	bne _0809F350
	b _0809F458
_0809F350:
	movs r0, #0x6c
	bl m4aSongNumStart
	ldrh r1, [r5]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0809F3A4
	ldrb r0, [r4, #4]
	subs r0, #1
	strb r0, [r4, #4]
	ldrb r1, [r4, #4]
	adds r0, r4, #7
	ldrb r3, [r4, #3]
	adds r2, r0, r3
	movs r0, #0
	ldrsb r0, [r2, r0]
	subs r0, #1
	cmp r1, r0
	ble _0809F3A4
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r4, #4]
	adds r0, r3, #0
	subs r0, #1
	strb r0, [r4, #3]
	ldrb r1, [r4, #3]
	movs r0, #6
	ldrsb r0, [r4, r0]
	subs r0, #1
	cmp r1, r0
	ble _0809F450
	ldrb r0, [r4, #6]
	subs r0, #1
	strb r0, [r4, #3]
	b _0809F450
	.align 2, 0
_0809F398: .4byte gStageData
_0809F39C: .4byte 0x00007FFF
_0809F3A0: .4byte gRepeatedKeys
_0809F3A4:
	ldr r0, _0809F3E4 @ =gRepeatedKeys
	ldrh r1, [r0]
	movs r0, #0x10
	ands r0, r1
	ldrb r1, [r4, #3]
	cmp r0, #0
	beq _0809F3E8
	ldrb r0, [r4, #4]
	adds r0, #1
	movs r3, #0
	strb r0, [r4, #4]
	ldrb r2, [r4, #4]
	adds r0, r4, #7
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, #1
	cmp r2, r0
	ble _0809F3E8
	strb r3, [r4, #4]
	ldrb r0, [r4, #3]
	adds r0, #1
	strb r0, [r4, #3]
	ldrb r1, [r4, #3]
	movs r0, #6
	ldrsb r0, [r4, r0]
	subs r0, #1
	cmp r1, r0
	ble _0809F450
	strb r3, [r4, #3]
	b _0809F450
	.align 2, 0
_0809F3E4: .4byte gRepeatedKeys
_0809F3E8:
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	ldrb r1, [r4, #4]
	adds r0, r0, r1
	adds r0, #2
	strb r0, [r4]
	ldr r0, _0809F400 @ =gUnknown_03001060
	ldrb r1, [r4]
	adds r0, #0x50
	strh r1, [r0]
	b _0809F458
	.align 2, 0
_0809F400: .4byte gUnknown_03001060
_0809F404:
	ldr r0, _0809F454 @ =gUnknown_03001060
	adds r1, r0, #0
	adds r1, #0x50
	ldrh r5, [r1]
	ldrb r0, [r4, #1]
	cmp r0, r5
	beq _0809F458
	ldrb r6, [r4, #4]
	ldrb r7, [r4, #3]
	ldrh r0, [r1]
	movs r1, #0xa
	bl __udivsi3
	adds r2, r0, #0
	strb r2, [r4, #3]
	ldrb r1, [r4, #3]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	subs r0, r5, r0
	subs r1, r0, #2
	strb r1, [r4, #4]
	strb r5, [r4, #1]
	cmp r6, #2
	bne _0809F43C
	lsls r0, r1, #0x18
	cmp r0, #0
	beq _0809F450
_0809F43C:
	cmp r6, #0
	bne _0809F448
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #2
	beq _0809F450
_0809F448:
	lsls r0, r2, #0x18
	lsrs r0, r0, #0x18
	cmp r0, r7
	beq _0809F458
_0809F450:
	movs r0, #1
	b _0809F45A
	.align 2, 0
_0809F454: .4byte gUnknown_03001060
_0809F458:
	movs r0, #0
_0809F45A:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_809F460
sub_809F460: @ 0x0809F460
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _0809F508 @ =gStageData
	ldrb r2, [r0, #6]
	ldr r0, [r4, #0x38]
	subs r0, #0x20
	str r0, [r4, #0x38]
	ldr r1, _0809F50C @ =0x00007FFF
	cmp r0, r1
	bgt _0809F47A
	movs r0, #0x84
	lsls r0, r0, #8
	str r0, [r4, #0x38]
_0809F47A:
	ldr r0, [r4, #0x40]
	adds r0, #0x20
	str r0, [r4, #0x40]
	movs r1, #0x80
	lsls r1, r1, #8
	cmp r0, r1
	ble _0809F48E
	movs r0, #0xf8
	lsls r0, r0, #7
	str r0, [r4, #0x40]
_0809F48E:
	cmp r2, #0
	bne _0809F518
	ldr r1, _0809F510 @ =gRepeatedKeys
	ldrh r2, [r1]
	movs r0, #0xc0
	ands r0, r2
	adds r5, r1, #0
	cmp r0, #0
	beq _0809F546
	ldrb r3, [r4, #3]
	movs r0, #0x80
	ands r0, r2
	cmp r0, #0
	beq _0809F4C0
	subs r0, r3, #1
	strb r0, [r4, #3]
	ldrb r1, [r4, #3]
	movs r0, #6
	ldrsb r0, [r4, r0]
	subs r0, #1
	cmp r1, r0
	ble _0809F4C0
	ldrb r0, [r4, #6]
	subs r0, #1
	strb r0, [r4, #3]
_0809F4C0:
	ldrh r1, [r5]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0809F4E0
	ldrb r0, [r4, #3]
	adds r0, #1
	strb r0, [r4, #3]
	ldrb r1, [r4, #3]
	movs r0, #6
	ldrsb r0, [r4, r0]
	subs r0, #1
	cmp r1, r0
	ble _0809F4E0
	movs r0, #0
	strb r0, [r4, #3]
_0809F4E0:
	ldrb r1, [r4, #3]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	ldrb r1, [r4, #4]
	adds r0, r0, r1
	adds r0, #2
	strb r0, [r4]
	ldr r0, _0809F514 @ =gUnknown_03001060
	ldrb r1, [r4]
	adds r0, #0x50
	strh r1, [r0]
	ldrb r4, [r4, #3]
	cmp r3, r4
	beq _0809F53C
	movs r0, #0x6c
	bl m4aSongNumStart
	b _0809F53C
	.align 2, 0
_0809F508: .4byte gStageData
_0809F50C: .4byte 0x00007FFF
_0809F510: .4byte gRepeatedKeys
_0809F514: .4byte gUnknown_03001060
_0809F518:
	ldr r0, _0809F540 @ =gUnknown_03001060
	adds r1, r0, #0
	adds r1, #0x50
	ldrb r0, [r4, #1]
	ldrh r2, [r1]
	cmp r0, r2
	beq _0809F546
	ldrh r5, [r1]
	adds r0, r5, #0
	movs r1, #0xa
	bl __udivsi3
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	ldrb r0, [r4, #3]
	cmp r0, r1
	beq _0809F544
	strb r1, [r4, #3]
_0809F53C:
	movs r0, #1
	b _0809F548
	.align 2, 0
_0809F540: .4byte gUnknown_03001060
_0809F544:
	strb r5, [r4, #1]
_0809F546:
	movs r0, #0
_0809F548:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_809F550
sub_809F550: @ 0x0809F550
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r0, #0x48
	ldr r1, [r6, #0x20]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r6, #0x24]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	bl DisplaySprite
	adds r4, r6, #0
	adds r4, #0x98
	ldr r5, _0809F5E0 @ =gUnknown_080D8ADC
	ldrh r0, [r5]
	strh r0, [r4, #0xc]
	ldrb r0, [r6, #3]
	ldrb r1, [r5, #2]
	adds r0, r0, r1
	strb r0, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	ldr r0, [r6, #0x20]
	asrs r0, r0, #8
	adds r0, #0x19
	strh r0, [r4, #0x10]
	ldr r0, [r6, #0x24]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r6, #0
	adds r0, #0x70
	ldr r1, [r6, #0x20]
	asrs r1, r1, #8
	adds r1, #0x2a
	strh r1, [r0, #0x10]
	ldr r1, [r6, #0x24]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	bl DisplaySprite
	adds r4, #0x28
	ldrh r0, [r5]
	strh r0, [r4, #0xc]
	ldrb r0, [r6, #4]
	ldrb r5, [r5, #2]
	adds r0, r0, r5
	strb r0, [r4, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r4, #0x1b]
	ldr r0, [r6, #0x20]
	asrs r0, r0, #8
	adds r0, #0x57
	strh r0, [r4, #0x10]
	ldr r0, [r6, #0x24]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809F5E0: .4byte gUnknown_080D8ADC

	thumb_func_start sub_809F5E4
sub_809F5E4: @ 0x0809F5E4
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r0, #0x9c
	lsls r0, r0, #1
	adds r4, r5, r0
	ldr r0, [r5, #0x38]
	asrs r0, r0, #8
	subs r0, #0x20
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x3c]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	ldr r0, [r4, #8]
	ldr r1, _0809F634 @ =0xFFFFFBFF
	ands r0, r1
	str r0, [r4, #8]
	adds r0, r4, #0
	bl DisplaySprite
	ldr r0, [r5, #0x40]
	asrs r0, r0, #8
	adds r0, #0x69
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x44]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	str r0, [r4, #8]
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809F634: .4byte 0xFFFFFBFF

	thumb_func_start sub_809F638
sub_809F638: @ 0x0809F638
	push {r4, r5, lr}
	sub sp, #4
	ldr r5, _0809F6A8 @ =gCurTask
	ldr r0, [r5]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	bl sub_80260F0
	ldr r2, _0809F6AC @ =gDispCnt
	ldrh r1, [r2]
	ldr r0, _0809F6B0 @ =0x00009FFF
	ands r0, r1
	strh r0, [r2]
	ldr r1, _0809F6B4 @ =gBldRegs
	movs r3, #0
	movs r0, #0
	strh r0, [r1]
	strh r0, [r1, #2]
	strh r0, [r1, #4]
	str r0, [sp]
	ldr r2, _0809F6B8 @ =0x040000D4
	mov r0, sp
	str r0, [r2]
	ldr r0, _0809F6BC @ =gBgCntRegs
	ldrh r1, [r0, #4]
	movs r0, #0xc
	ands r0, r1
	lsls r0, r0, #0xc
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r0, r0, r1
	str r0, [r2, #4]
	ldr r0, _0809F6C0 @ =0x85000010
	str r0, [r2, #8]
	ldr r0, [r2, #8]
	ldr r0, _0809F6C4 @ =gUnknown_03006230
	strb r3, [r0, #2]
	ldr r1, _0809F6C8 @ =gUnknown_03003590
	strb r3, [r1, #8]
	strb r3, [r1, #9]
	movs r0, #0xff
	strb r0, [r1, #0xa]
	movs r0, #0x40
	strb r0, [r1, #0xb]
	adds r0, #0xec
	strh r0, [r4, #0x12]
	ldr r1, [r5]
	ldr r0, _0809F6CC @ =sub_809F6D0
	str r0, [r1, #8]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809F6A8: .4byte gCurTask
_0809F6AC: .4byte gDispCnt
_0809F6B0: .4byte 0x00009FFF
_0809F6B4: .4byte gBldRegs
_0809F6B8: .4byte 0x040000D4
_0809F6BC: .4byte gBgCntRegs
_0809F6C0: .4byte 0x85000010
_0809F6C4: .4byte gUnknown_03006230
_0809F6C8: .4byte gUnknown_03003590
_0809F6CC: .4byte sub_809F6D0

	thumb_func_start sub_809F6D0
sub_809F6D0: @ 0x0809F6D0
	push {lr}
	sub sp, #0x20
	ldr r1, _0809F700 @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _0809F704 @ =gBackgroundsCopyQueueCursor
	ldr r0, _0809F708 @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _0809F70C @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _0809F710 @ =gVramGraphicsCopyCursor
	ldr r0, _0809F714 @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	movs r0, #3
	bl sub_80A1A4C
	add sp, #0x20
	pop {r0}
	bx r0
	.align 2, 0
_0809F700: .4byte 0x0000FFFF
_0809F704: .4byte gBackgroundsCopyQueueCursor
_0809F708: .4byte gBackgroundsCopyQueueIndex
_0809F70C: .4byte gUnknown_03006840
_0809F710: .4byte gVramGraphicsCopyCursor
_0809F714: .4byte gVramGraphicsCopyQueueIndex

	thumb_func_start sub_809F718
sub_809F718: @ 0x0809F718
	push {r4, r5, lr}
	ldr r5, _0809F74C @ =gCurTask
	ldr r0, [r5]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	adds r0, r4, #0
	bl sub_809F550
	adds r0, r4, #0
	bl sub_809F7B8
	adds r0, r4, #0
	bl sub_809F5E4
	bl sub_8025534
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bge _0809F754
	ldr r1, [r5]
	ldr r0, _0809F750 @ =sub_809F638
	b _0809F75C
	.align 2, 0
_0809F74C: .4byte gCurTask
_0809F750: .4byte sub_809F638
_0809F754:
	cmp r0, #1
	bne _0809F75E
	ldr r1, [r5]
	ldr r0, _0809F764 @ =sub_809F210
_0809F75C:
	str r0, [r1, #8]
_0809F75E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809F764: .4byte sub_809F210

	thumb_func_start sub_809F768
sub_809F768: @ 0x0809F768
	push {r4, lr}
	ldr r0, _0809F79C @ =gCurTask
	ldr r0, [r0]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	bl sub_800214C
	ldr r2, _0809F7A0 @ =gUnknown_03001060
	ldrb r1, [r4, #3]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	ldrb r4, [r4, #4]
	adds r0, r0, r4
	adds r0, #3
	adds r2, #0x50
	strh r0, [r2]
	ldrh r0, [r2]
	bl sub_80022E8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809F79C: .4byte gCurTask
_0809F7A0: .4byte gUnknown_03001060

	thumb_func_start sub_809F7A4
sub_809F7A4: @ 0x0809F7A4
	push {lr}
	adds r0, #0xe8
	movs r1, #0x78
	strh r1, [r0, #0x10]
	movs r1, #0x46
	strh r1, [r0, #0x12]
	bl DisplaySprite
	pop {r0}
	bx r0

	thumb_func_start sub_809F7B8
sub_809F7B8: @ 0x0809F7B8
	push {lr}
	movs r1, #0x88
	lsls r1, r1, #1
	adds r2, r0, r1
	ldr r1, [r0, #0x30]
	asrs r1, r1, #8
	strh r1, [r2, #0x10]
	ldr r0, [r0, #0x34]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	adds r0, r2, #0
	bl DisplaySprite
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_809F7D8
sub_809F7D8: @ 0x0809F7D8
	push {lr}
	adds r2, r0, #0
	movs r0, #0xa0
	lsls r0, r0, #5
	str r0, [r2, #0x34]
	ldr r1, [r2, #0x30]
	movs r3, #0xec
	lsls r3, r3, #7
	cmp r1, r3
	ble _0809F7F8
	ldr r0, _0809F800 @ =0xFFFFF000
	adds r1, r1, r0
	str r1, [r2, #0x30]
	ldr r0, _0809F804 @ =0x000075FF
	cmp r1, r0
	bgt _0809F808
_0809F7F8:
	str r3, [r2, #0x30]
	movs r0, #1
	b _0809F80A
	.align 2, 0
_0809F800: .4byte 0xFFFFF000
_0809F804: .4byte 0x000075FF
_0809F808:
	movs r0, #0
_0809F80A:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_809F810
sub_809F810: @ 0x0809F810
	push {lr}
	adds r1, r0, #0
	movs r0, #0x84
	lsls r0, r0, #8
	str r0, [r1, #0x24]
	ldr r2, [r1, #0x20]
	ldr r0, _0809F838 @ =0x00007CFF
	cmp r2, r0
	bgt _0809F83C
	movs r3, #0x80
	lsls r3, r3, #5
	adds r0, r2, r3
	str r0, [r1, #0x20]
	movs r2, #0xfa
	lsls r2, r2, #7
	cmp r0, r2
	ble _0809F846
	str r2, [r1, #0x20]
	movs r0, #1
	b _0809F848
	.align 2, 0
_0809F838: .4byte 0x00007CFF
_0809F83C:
	movs r0, #0xfa
	lsls r0, r0, #7
	str r0, [r1, #0x20]
	movs r0, #1
	b _0809F848
_0809F846:
	movs r0, #0
_0809F848:
	pop {r1}
	bx r1

	thumb_func_start sub_809F84C
sub_809F84C: @ 0x0809F84C
	bx lr
	.align 2, 0

	thumb_func_start sub_809F850
sub_809F850: @ 0x0809F850
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _0809F944 @ =gDispCnt
	ldr r2, _0809F948 @ =0x00001541
	adds r0, r2, #0
	strh r0, [r1]
	ldr r0, _0809F94C @ =sub_809FCFC
	movs r1, #0xad
	lsls r1, r1, #2
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r3, _0809F950 @ =sub_80A13B0
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, _0809F954 @ =gSaveGame
	ldr r2, _0809F958 @ =0x00000366
	adds r0, r0, r2
	ldrb r0, [r0]
	strb r0, [r4]
	movs r2, #0
	ldr r0, _0809F95C @ =0x0300001C
	adds r3, r1, r0
_0809F88A:
	lsls r0, r2, #2
	adds r0, r3, r0
	adds r1, r2, #0
	adds r1, #0xe
	adds r1, r5, r1
	str r1, [r0]
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #3
	bls _0809F88A
	adds r0, r5, #0
	adds r0, #0x12
	str r0, [r4, #0x30]
	adds r0, #2
	str r0, [r4, #0x2c]
	adds r0, #3
	str r0, [r4, #0x18]
	ldrb r0, [r5, #0x17]
	movs r1, #0
	strb r0, [r4, #3]
	adds r0, r5, #0
	adds r0, #0x16
	str r0, [r4, #0x14]
	movs r0, #1
	strb r0, [r5, #0x16]
	ldrb r0, [r5, #0x12]
	strb r0, [r4, #1]
	movs r0, #1
	strh r0, [r4, #6]
	strh r1, [r4, #8]
	strh r1, [r4, #4]
	strh r1, [r4, #0xa]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r4, #0xc]
	movs r2, #0xf0
	lsls r2, r2, #7
	str r2, [r4, #0x4c]
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [r4, #0x50]
	str r2, [r4, #0x54]
	str r0, [r4, #0x58]
	str r2, [r4, #0x34]
	movs r0, #0x88
	lsls r0, r0, #5
	str r0, [r4, #0x38]
	str r2, [r4, #0x3c]
	str r0, [r4, #0x40]
	str r1, [r4, #0x44]
	str r1, [r4, #0x48]
	str r1, [r4, #0x7c]
	adds r0, r4, #0
	adds r0, #0x80
	str r1, [r0]
	str r2, [r4, #0x6c]
	movs r0, #0xaa
	lsls r0, r0, #7
	str r0, [r4, #0x70]
	movs r0, #0xc9
	lsls r0, r0, #8
	str r0, [r4, #0x74]
	movs r0, #0xb0
	lsls r0, r0, #5
	str r0, [r4, #0x78]
	str r2, [r4, #0x5c]
	movs r1, #0x91
	lsls r1, r1, #8
	str r1, [r4, #0x60]
	movs r0, #0x96
	lsls r0, r0, #9
	str r0, [r4, #0x64]
	str r1, [r4, #0x68]
	adds r1, r4, #0
	adds r1, #0x84
	ldr r0, _0809F960 @ =0x06010000
	str r0, [r1]
	adds r0, r4, #0
	bl sub_809F964
	adds r0, r4, #0
	bl sub_809FBD0
	bl m4aMPlayAllStop
	movs r0, #3
	bl m4aSongNumStart
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809F944: .4byte gDispCnt
_0809F948: .4byte 0x00001541
_0809F94C: .4byte sub_809FCFC
_0809F950: .4byte sub_80A13B0
_0809F954: .4byte gSaveGame
_0809F958: .4byte 0x00000366
_0809F95C: .4byte 0x0300001C
_0809F960: .4byte 0x06010000

	thumb_func_start sub_809F964
sub_809F964: @ 0x0809F964
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r7, r0, #0
	ldr r5, _0809FBA8 @ =0x06010000
	adds r0, #0xdc
	str r5, [r0]
	movs r1, #0xb4
	lsls r1, r1, #3
	adds r5, r5, r1
	ldr r2, _0809FBAC @ =gUnknown_080D8D00
	ldrh r1, [r2]
	movs r3, #0
	mov r8, r3
	movs r4, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x3c]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x40]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r1, #0x40
	strh r1, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	movs r3, #0x10
	strb r3, [r0, #0x1c]
	mov r1, r8
	strb r1, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	adds r0, #0xb4
	str r5, [r0]
	movs r3, #0xc8
	lsls r3, r3, #3
	adds r5, r5, r3
	ldr r2, _0809FBB0 @ =gUnknown_080D8D08
	ldrb r1, [r7]
	lsls r1, r1, #6
	adds r1, r1, r2
	ldrh r1, [r1]
	strh r1, [r0, #0xc]
	ldrb r1, [r7]
	lsls r1, r1, #6
	adds r1, r1, r2
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x34]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x38]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	mov r3, r8
	strb r3, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	movs r1, #0xd2
	lsls r1, r1, #1
	adds r0, r7, r1
	str r5, [r0]
	adds r5, #0x80
	ldr r1, _0809FBB4 @ =0x00000574
	strh r1, [r0, #0xc]
	movs r1, #5
	strb r1, [r0, #0x1a]
	subs r1, #6
	strb r1, [r0, #0x1b]
	movs r1, #0x78
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x60]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	movs r3, #0x10
	strb r3, [r0, #0x1c]
	mov r1, r8
	strb r1, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	adds r0, #0x8c
	str r5, [r0]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r5, r5, r3
	ldr r2, _0809FBB8 @ =gUnknown_080D8F08
	ldrh r1, [r2]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x44]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x48]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	ldr r1, _0809FBBC @ =0x0000FFC0
	strh r1, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	mov r3, r8
	strb r3, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	movs r1, #0x82
	lsls r1, r1, #1
	adds r0, r7, r1
	ldrb r1, [r7]
	rsbs r2, r1, #0
	orrs r2, r1
	lsrs r2, r2, #0x1f
	ldr r3, _0809FBC0 @ =gUnknown_080D8F18
	mov sl, r3
	ldrb r1, [r7, #1]
	add r1, sl
	ldrb r1, [r1]
	str r5, [r0]
	movs r3, #0xe0
	lsls r3, r3, #1
	mov sb, r3
	add r5, sb
	ldr r6, _0809FBC4 @ =gUnknown_080D8E80
	lsls r2, r2, #3
	adds r1, r1, r2
	lsls r1, r1, #3
	adds r1, r1, r6
	ldrh r2, [r1]
	strh r2, [r0, #0xc]
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x5c]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x60]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	mov r3, r8
	strb r3, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	movs r1, #0xaa
	lsls r1, r1, #1
	adds r0, r7, r1
	ldrb r1, [r7]
	rsbs r2, r1, #0
	orrs r2, r1
	lsrs r2, r2, #0x1f
	ldrb r1, [r7, #1]
	add r1, sl
	ldrb r1, [r1]
	str r5, [r0]
	add r5, sb
	lsls r2, r2, #3
	adds r1, r1, r2
	lsls r1, r1, #3
	adds r1, r1, r6
	ldrh r2, [r1]
	strh r2, [r0, #0xc]
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x64]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x68]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	movs r3, #0x10
	strb r3, [r0, #0x1c]
	mov r1, r8
	strb r1, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	movs r3, #0x96
	lsls r3, r3, #1
	adds r0, r7, r3
	str r5, [r0]
	movs r1, #0xc0
	lsls r1, r1, #2
	adds r5, r5, r1
	ldr r2, _0809FBC8 @ =gUnknown_080D8EF8
	ldrh r1, [r2]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x5c]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x60]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r3, #0x40
	strh r3, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	mov r3, r8
	strb r3, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	movs r1, #0xe6
	lsls r1, r1, #1
	adds r0, r7, r1
	str r5, [r0]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r5, r5, r3
	ldr r2, _0809FBCC @ =gUnknown_080D8F10
	ldrh r1, [r2]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x4c]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x50]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	mov r3, r8
	strb r3, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	adds r0, #0x84
	str r5, [r0]
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809FBA8: .4byte 0x06010000
_0809FBAC: .4byte gUnknown_080D8D00
_0809FBB0: .4byte gUnknown_080D8D08
_0809FBB4: .4byte 0x00000574
_0809FBB8: .4byte gUnknown_080D8F08
_0809FBBC: .4byte 0x0000FFC0
_0809FBC0: .4byte gUnknown_080D8F18
_0809FBC4: .4byte gUnknown_080D8E80
_0809FBC8: .4byte gUnknown_080D8EF8
_0809FBCC: .4byte gUnknown_080D8F10

	thumb_func_start sub_809FBD0
sub_809FBD0: @ 0x0809FBD0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r5, r0, #0
	ldr r0, _0809FCC0 @ =gBgCntRegs
	mov sl, r0
	movs r7, #0
	movs r4, #0
	ldr r0, _0809FCC4 @ =0x00004E07
	mov r1, sl
	strh r0, [r1]
	ldr r2, _0809FCC8 @ =gBgScrollRegs
	mov r8, r2
	strh r4, [r2]
	strh r4, [r2, #2]
	movs r1, #0xfa
	lsls r1, r1, #1
	adds r0, r5, r1
	ldr r1, _0809FCCC @ =0x06004000
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _0809FCD0 @ =0x06007000
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	ldr r2, _0809FCD4 @ =gUnknown_080D8CDC
	mov sb, r2
	ldrh r1, [r2]
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	movs r1, #0x2d
	strh r1, [r0, #0x26]
	movs r1, #0x14
	strh r1, [r0, #0x28]
	ldr r2, _0809FCD8 @ =0x0000021E
	adds r1, r5, r2
	strb r7, [r1]
	strh r4, [r0, #0x2e]
	bl DrawBackground
	ldr r0, _0809FCDC @ =0x0000030E
	mov r1, sl
	strh r0, [r1, #2]
	mov r2, r8
	strh r4, [r2, #4]
	strh r4, [r2, #6]
	movs r1, #0x8d
	lsls r1, r1, #2
	adds r0, r5, r1
	ldr r1, _0809FCE0 @ =0x0600C000
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _0809FCE4 @ =0x06001800
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	mov r2, sb
	ldrh r1, [r2, #0x16]
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	movs r6, #0x10
	strh r6, [r0, #0x26]
	strh r6, [r0, #0x28]
	ldr r2, _0809FCE8 @ =0x0000025E
	adds r1, r5, r2
	strb r7, [r1]
	movs r1, #1
	strh r1, [r0, #0x2e]
	bl DrawBackground
	ldr r0, _0809FCEC @ =0x00001B89
	mov r1, sl
	strh r0, [r1, #4]
	mov r2, r8
	strh r4, [r2, #8]
	strh r4, [r2, #0xa]
	movs r1, #0x9d
	lsls r1, r1, #2
	adds r0, r5, r1
	ldr r1, _0809FCF0 @ =0x06008000
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _0809FCF4 @ =0x0600D800
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	ldrb r1, [r5, #1]
	adds r1, #5
	lsls r1, r1, #1
	add r1, sb
	ldrh r1, [r1]
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	strh r6, [r0, #0x26]
	strh r6, [r0, #0x28]
	ldr r2, _0809FCF8 @ =0x0000029E
	adds r5, r5, r2
	strb r7, [r5]
	movs r1, #6
	strh r1, [r0, #0x2e]
	bl DrawBackground
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809FCC0: .4byte gBgCntRegs
_0809FCC4: .4byte 0x00004E07
_0809FCC8: .4byte gBgScrollRegs
_0809FCCC: .4byte 0x06004000
_0809FCD0: .4byte 0x06007000
_0809FCD4: .4byte gUnknown_080D8CDC
_0809FCD8: .4byte 0x0000021E
_0809FCDC: .4byte 0x0000030E
_0809FCE0: .4byte 0x0600C000
_0809FCE4: .4byte 0x06001800
_0809FCE8: .4byte 0x0000025E
_0809FCEC: .4byte 0x00001B89
_0809FCF0: .4byte 0x06008000
_0809FCF4: .4byte 0x0600D800
_0809FCF8: .4byte 0x0000029E

	thumb_func_start sub_809FCFC
sub_809FCFC: @ 0x0809FCFC
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	ldr r0, _0809FDEC @ =gCurTask
	ldr r0, [r0]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r7, r5, r0
	adds r0, r7, #0
	bl sub_80A19C0
	adds r0, r7, #0
	bl sub_80A1030
	adds r0, r7, #0
	bl sub_80A10B0
	adds r0, r7, #0
	bl sub_80A1110
	adds r0, r7, #0
	bl sub_80A11B8
	ldr r1, _0809FDF0 @ =0x03000001
	adds r0, r5, r1
	ldr r2, _0809FDF4 @ =0x03000003
	adds r1, r5, r2
	ldr r3, _0809FDF8 @ =0x0300004C
	adds r2, r5, r3
	ldr r4, _0809FDFC @ =0x03000050
	adds r3, r5, r4
	ldr r6, _0809FE00 @ =0x03000084
	adds r4, r5, r6
	ldr r4, [r4]
	str r4, [sp]
	bl sub_809BF3C
	ldr r1, _0809FE04 @ =0x03000088
	adds r5, r5, r1
	str r0, [r5]
	ldr r5, _0809FE08 @ =gPlayers
	adds r3, r5, #0
	adds r3, #0x2a
	ldrb r1, [r3]
	movs r2, #0x10
	rsbs r2, r2, #0
	adds r0, r2, #0
	ands r0, r1
	strb r0, [r3]
	adds r4, r5, #0
	adds r4, #0x2b
	ldrb r1, [r4]
	movs r3, #4
	rsbs r3, r3, #0
	adds r0, r3, #0
	ands r0, r1
	movs r6, #2
	orrs r0, r6
	strb r0, [r4]
	movs r0, #0xbd
	lsls r0, r0, #1
	adds r4, r5, r0
	ldrb r1, [r4]
	adds r0, r2, #0
	ands r0, r1
	strb r0, [r4]
	ldr r1, _0809FE0C @ =0x0000017B
	adds r4, r5, r1
	ldrb r0, [r4]
	movs r1, #3
	orrs r0, r1
	strb r0, [r4]
	ldr r0, _0809FE10 @ =0x000002CA
	adds r4, r5, r0
	ldrb r1, [r4]
	adds r0, r2, #0
	ands r0, r1
	orrs r0, r6
	strb r0, [r4]
	ldr r1, _0809FE14 @ =0x000002CB
	adds r4, r5, r1
	ldrb r1, [r4]
	adds r0, r3, #0
	ands r0, r1
	strb r0, [r4]
	ldr r4, _0809FE18 @ =0x0000041A
	adds r1, r5, r4
	ldrb r0, [r1]
	ands r2, r0
	orrs r2, r6
	strb r2, [r1]
	ldr r6, _0809FE1C @ =0x0000041B
	adds r1, r5, r6
	ldrb r0, [r1]
	ands r3, r0
	movs r0, #1
	orrs r3, r0
	strb r3, [r1]
	movs r4, #0
	movs r6, #0x1d
	rsbs r6, r6, #0
_0809FDC6:
	ldr r0, _0809FE20 @ =gStageData
	ldrb r0, [r0, #6]
	cmp r0, r4
	bne _0809FE24
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #2
	adds r0, r0, r4
	lsls r0, r0, #4
	adds r0, r0, r5
	adds r0, #0x2b
	ldrb r2, [r0]
	adds r1, r6, #0
	ands r1, r2
	movs r2, #4
	orrs r1, r2
	strb r1, [r0]
	b _0809FE4E
	.align 2, 0
_0809FDEC: .4byte gCurTask
_0809FDF0: .4byte 0x03000001
_0809FDF4: .4byte 0x03000003
_0809FDF8: .4byte 0x0300004C
_0809FDFC: .4byte 0x03000050
_0809FE00: .4byte 0x03000084
_0809FE04: .4byte 0x03000088
_0809FE08: .4byte gPlayers
_0809FE0C: .4byte 0x0000017B
_0809FE10: .4byte 0x000002CA
_0809FE14: .4byte 0x000002CB
_0809FE18: .4byte 0x0000041A
_0809FE1C: .4byte 0x0000041B
_0809FE20: .4byte gStageData
_0809FE24:
	lsls r1, r4, #2
	adds r1, r1, r4
	lsls r1, r1, #2
	adds r1, r1, r4
	lsls r1, r1, #4
	adds r1, r1, r5
	adds r3, r1, #0
	adds r3, #0x2b
	ldrb r2, [r3]
	adds r0, r6, #0
	ands r0, r2
	movs r2, #0xc
	orrs r0, r2
	strb r0, [r3]
	adds r1, #0x2a
	lsls r3, r4, #4
	ldrb r2, [r1]
	movs r0, #0xf
	ands r0, r2
	orrs r0, r3
	strb r0, [r1]
_0809FE4E:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #3
	bls _0809FDC6
	ldr r1, [r7, #0x18]
	ldrb r0, [r1]
	cmp r0, #0x23
	bne _0809FE84
	movs r0, #0x1d
	strb r0, [r1]
	ldr r0, [r7, #0x18]
	ldrb r0, [r0]
	strb r0, [r7, #3]
	movs r0, #0x9b
	lsls r0, r0, #9
	str r0, [r7, #0x4c]
	str r0, [r7, #0x54]
	ldr r0, _0809FE7C @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809FE80 @ =sub_80A13F4
	b _0809FE9E
	.align 2, 0
_0809FE7C: .4byte gCurTask
_0809FE80: .4byte sub_80A13F4
_0809FE84:
	cmp r0, #0x22
	bne _0809FE98
	ldr r0, _0809FE90 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809FE94 @ =sub_80A14AC
	b _0809FE9E
	.align 2, 0
_0809FE90: .4byte gCurTask
_0809FE94: .4byte sub_80A14AC
_0809FE98:
	ldr r0, _0809FEA8 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809FEAC @ =sub_809FEB0
_0809FE9E:
	str r0, [r1, #8]
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809FEA8: .4byte gCurTask
_0809FEAC: .4byte sub_809FEB0

	thumb_func_start sub_809FEB0
sub_809FEB0: @ 0x0809FEB0
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	ldr r7, _0809FED8 @ =gCurTask
	ldr r2, [r7]
	ldrh r0, [r2, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r4, r0, r1
	ldr r0, _0809FEDC @ =gStageData
	ldrb r5, [r0, #6]
	movs r6, #0
	ldr r1, [r4, #0x18]
	ldrb r0, [r1]
	cmp r0, #0x22
	bne _0809FEE4
	ldr r0, _0809FEE0 @ =sub_80A14AC
	str r0, [r2, #8]
	b _080A006C
	.align 2, 0
_0809FED8: .4byte gCurTask
_0809FEDC: .4byte gStageData
_0809FEE0: .4byte sub_80A14AC
_0809FEE4:
	cmp r0, #0x23
	bne _0809FF1C
	movs r0, #0x1d
	strb r0, [r1]
	ldr r0, [r4, #0x18]
	ldrb r0, [r0]
	strb r0, [r4, #3]
	ldrb r0, [r4, #1]
	strb r0, [r4, #2]
	movs r0, #0x9b
	lsls r0, r0, #9
	str r0, [r4, #0x4c]
	str r0, [r4, #0x54]
	adds r0, r4, #0
	bl sub_80A19C0
	adds r0, r4, #0
	bl sub_80A10B0
	adds r0, r4, #0
	bl sub_80A1110
	ldr r1, [r7]
	ldr r0, _0809FF18 @ =sub_80A13F4
	b _080A006A
	.align 2, 0
_0809FF18: .4byte sub_80A13F4
_0809FF1C:
	adds r0, r4, #0
	bl sub_80A19C0
	adds r0, r4, #0
	bl sub_80A10B0
	adds r0, r4, #0
	bl sub_80A1110
	lsls r0, r5, #0x10
	lsrs r1, r0, #0x10
	adds r7, r0, #0
	cmp r1, #1
	bhi _0809FF7C
	ldrb r0, [r4, #1]
	ldr r1, [r4, #0x30]
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	cmp r0, r1
	bne _0809FF7C
	movs r5, #0
	ldr r0, _0809FF98 @ =gUnknown_030010AC
	mov sb, r0
	ldr r0, _0809FF9C @ =gUnknown_080D8F18
	mov r8, r0
_0809FF50:
	asrs r0, r7, #0x10
	cmp r0, r5
	beq _0809FF72
	mov r0, sb
	adds r1, r5, r0
	ldr r0, [r4, #0x30]
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	add r0, r8
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bne _0809FF72
	adds r0, r4, #0
	bl sub_80A1A28
_0809FF72:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #3
	bls _0809FF50
_0809FF7C:
	ldr r0, [r4, #0x18]
	ldrb r0, [r0]
	cmp r0, #0xb
	bls _0809FFA8
	ldr r1, [r4, #0x14]
	movs r0, #0
	strb r0, [r1]
	ldr r0, [r4, #0x18]
	ldrb r0, [r0]
	strb r0, [r4, #3]
	ldr r0, _0809FFA0 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _0809FFA4 @ =sub_80A021C
	b _080A006A
	.align 2, 0
_0809FF98: .4byte gUnknown_030010AC
_0809FF9C: .4byte gUnknown_080D8F18
_0809FFA0: .4byte gCurTask
_0809FFA4: .4byte sub_80A021C
_0809FFA8:
	ldrb r0, [r4, #1]
	ldr r1, [r4, #0x30]
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	cmp r0, r1
	beq _0809FFF6
	ldr r0, [r4, #0x14]
	movs r1, #0
	strb r1, [r0]
	ldrb r0, [r4, #1]
	cmp r0, #0
	bne _0809FFCE
	ldr r0, [r4, #0x30]
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #4
	beq _0809FFEC
_0809FFCE:
	ldrb r0, [r4, #1]
	ldr r2, [r4, #0x30]
	cmp r0, #4
	bne _0809FFE2
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r0, #0
	bne _0809FFE2
	movs r6, #2
	b _0809FFFA
_0809FFE2:
	ldrb r1, [r4, #1]
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r1, r0
	ble _0809FFF0
_0809FFEC:
	movs r6, #1
	b _0809FFFA
_0809FFF0:
	cmp r1, r0
	bge _0809FFF6
	movs r6, #2
_0809FFF6:
	cmp r6, #0
	beq _080A0002
_0809FFFA:
	adds r0, r4, #0
	bl sub_80A18B8
	b _080A000E
_080A0002:
	adds r0, r4, #0
	bl sub_80A18E0
	adds r0, r4, #0
	bl sub_80A1030
_080A000E:
	cmp r6, #1
	beq _080A0018
	cmp r6, #2
	beq _080A0048
	b _080A006C
_080A0018:
	adds r0, r4, #0
	bl sub_80A14E4
	cmp r0, #1
	bne _080A006C
	ldr r0, _080A003C @ =0xFFFFC400
	str r0, [r4, #0x4c]
	ldr r0, [r4, #0x30]
	ldrb r0, [r0]
	strb r0, [r4, #1]
	adds r0, r4, #0
	bl sub_80A0DC8
	ldr r0, _080A0040 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A0044 @ =sub_80A0080
	b _080A006A
	.align 2, 0
_080A003C: .4byte 0xFFFFC400
_080A0040: .4byte gCurTask
_080A0044: .4byte sub_80A0080
_080A0048:
	adds r0, r4, #0
	bl sub_80A1540
	cmp r0, #1
	bne _080A006C
	movs r0, #0x96
	lsls r0, r0, #9
	str r0, [r4, #0x4c]
	ldr r0, [r4, #0x30]
	ldrb r0, [r0]
	strb r0, [r4, #1]
	adds r0, r4, #0
	bl sub_80A0DC8
	ldr r0, _080A0078 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A007C @ =sub_80A010C
_080A006A:
	str r0, [r1, #8]
_080A006C:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A0078: .4byte gCurTask
_080A007C: .4byte sub_80A010C

	thumb_func_start sub_80A0080
sub_80A0080: @ 0x080A0080
	push {r4, r5, lr}
	ldr r5, _080A009C @ =gCurTask
	ldr r2, [r5]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, [r4, #0x18]
	ldrb r0, [r0]
	cmp r0, #0x22
	bne _080A00A4
	ldr r0, _080A00A0 @ =sub_80A14AC
	str r0, [r2, #8]
	b _080A00FE
	.align 2, 0
_080A009C: .4byte gCurTask
_080A00A0: .4byte sub_80A14AC
_080A00A4:
	adds r0, r4, #0
	bl sub_80A19C0
	adds r0, r4, #0
	bl sub_80A10B0
	adds r0, r4, #0
	bl sub_80A1110
	adds r0, r4, #0
	bl sub_80A15E8
	cmp r0, #1
	bne _080A00DC
	adds r0, r4, #0
	bl sub_80A1888
	adds r1, r0, #0
	cmp r1, #1
	bne _080A00DC
	ldr r0, [r4, #0x14]
	strb r1, [r0]
	ldr r1, [r5]
	ldr r0, _080A00D8 @ =sub_809FEB0
	b _080A00FC
	.align 2, 0
_080A00D8: .4byte sub_809FEB0
_080A00DC:
	ldr r1, [r4, #0x18]
	ldrb r0, [r1]
	cmp r0, #0x23
	bne _080A00FE
	movs r0, #0x1d
	strb r0, [r1]
	ldr r0, [r4, #0x18]
	ldrb r0, [r0]
	strb r0, [r4, #3]
	movs r0, #0x9b
	lsls r0, r0, #9
	str r0, [r4, #0x4c]
	str r0, [r4, #0x54]
	ldr r0, _080A0104 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A0108 @ =sub_80A13F4
_080A00FC:
	str r0, [r1, #8]
_080A00FE:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A0104: .4byte gCurTask
_080A0108: .4byte sub_80A13F4

	thumb_func_start sub_80A010C
sub_80A010C: @ 0x080A010C
	push {r4, r5, lr}
	ldr r5, _080A0128 @ =gCurTask
	ldr r2, [r5]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, [r4, #0x18]
	ldrb r0, [r0]
	cmp r0, #0x22
	bne _080A0130
	ldr r0, _080A012C @ =sub_80A14AC
	str r0, [r2, #8]
	b _080A018A
	.align 2, 0
_080A0128: .4byte gCurTask
_080A012C: .4byte sub_80A14AC
_080A0130:
	adds r0, r4, #0
	bl sub_80A19C0
	adds r0, r4, #0
	bl sub_80A10B0
	adds r0, r4, #0
	bl sub_80A1110
	adds r0, r4, #0
	bl sub_80A1598
	cmp r0, #1
	bne _080A0168
	adds r0, r4, #0
	bl sub_80A1888
	adds r1, r0, #0
	cmp r1, #1
	bne _080A0168
	ldr r0, [r4, #0x14]
	strb r1, [r0]
	ldr r1, [r5]
	ldr r0, _080A0164 @ =sub_809FEB0
	b _080A0188
	.align 2, 0
_080A0164: .4byte sub_809FEB0
_080A0168:
	ldr r1, [r4, #0x18]
	ldrb r0, [r1]
	cmp r0, #0x23
	bne _080A018A
	movs r0, #0x1d
	strb r0, [r1]
	ldr r0, [r4, #0x18]
	ldrb r0, [r0]
	strb r0, [r4, #3]
	movs r0, #0x9b
	lsls r0, r0, #9
	str r0, [r4, #0x4c]
	str r0, [r4, #0x54]
	ldr r0, _080A0190 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A0194 @ =sub_80A13F4
_080A0188:
	str r0, [r1, #8]
_080A018A:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A0190: .4byte gCurTask
_080A0194: .4byte sub_80A13F4

	thumb_func_start sub_80A0198
sub_80A0198: @ 0x080A0198
	push {r4, r5, r6, lr}
	ldr r6, _080A01B8 @ =gCurTask
	ldr r2, [r6]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	movs r5, #0
	ldr r0, [r4, #0x18]
	ldrb r0, [r0]
	cmp r0, #0x22
	bne _080A01C0
	ldr r0, _080A01BC @ =sub_80A14AC
	str r0, [r2, #8]
	b _080A0210
	.align 2, 0
_080A01B8: .4byte gCurTask
_080A01BC: .4byte sub_80A14AC
_080A01C0:
	adds r0, r4, #0
	bl sub_80A19C0
	adds r0, r4, #0
	bl sub_80A1A04
	adds r0, r4, #0
	bl sub_80A10B0
	adds r0, r4, #0
	bl sub_80A1110
	adds r0, r4, #0
	bl sub_80A11B8
	adds r0, r4, #0
	bl sub_80A1694
	cmp r0, #1
	bne _080A01EA
	movs r5, #1
_080A01EA:
	adds r0, r4, #0
	movs r1, #0x78
	bl sub_80A1740
	cmp r0, #1
	bne _080A01FC
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_080A01FC:
	cmp r5, #2
	bne _080A0210
	movs r0, #0x1d
	strb r0, [r4, #3]
	movs r0, #0x9b
	lsls r0, r0, #9
	str r0, [r4, #0x54]
	ldr r1, [r6]
	ldr r0, _080A0218 @ =sub_80A1430
	str r0, [r1, #8]
_080A0210:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A0218: .4byte sub_80A1430

	thumb_func_start sub_80A021C
sub_80A021C: @ 0x080A021C
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	ldr r6, _080A023C @ =gCurTask
	ldr r1, [r6]
	ldrh r4, [r1, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r4, r0
	ldr r0, [r5, #0x18]
	ldrb r0, [r0]
	cmp r0, #0x22
	bne _080A0244
	ldr r0, _080A0240 @ =sub_80A14AC
	str r0, [r1, #8]
	b _080A033C
	.align 2, 0
_080A023C: .4byte gCurTask
_080A0240: .4byte sub_80A14AC
_080A0244:
	cmp r0, #0xd
	bne _080A02EC
	ldr r1, _080A02D4 @ =0x030000B4
	adds r0, r4, r1
	ldr r2, _080A02D8 @ =gUnknown_080D8D08
	ldrb r1, [r5]
	lsls r1, r1, #3
	adds r1, #1
	lsls r1, r1, #3
	adds r1, r1, r2
	ldrh r1, [r1]
	strh r1, [r0, #0xc]
	ldrb r1, [r5]
	lsls r1, r1, #3
	adds r1, #1
	lsls r1, r1, #3
	adds r1, r1, r2
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	bl UpdateSpriteAnimation
	movs r0, #0x96
	lsls r0, r0, #9
	str r0, [r5, #0x6c]
	str r0, [r5, #0x4c]
	ldrb r0, [r5, #1]
	strb r0, [r5, #2]
	ldr r0, [r5, #0x30]
	ldrb r0, [r0]
	strb r0, [r5, #1]
	movs r0, #0xc9
	lsls r0, r0, #8
	str r0, [r5, #0x74]
	adds r0, r5, #0
	bl sub_80A0EA8
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r5, #0x54]
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [r5, #0x58]
	ldr r2, _080A02DC @ =0x03000002
	adds r0, r4, r2
	ldr r3, _080A02E0 @ =0x03000003
	adds r1, r4, r3
	ldr r7, _080A02E4 @ =0x03000054
	adds r2, r4, r7
	adds r7, #4
	adds r3, r4, r7
	adds r7, #0x30
	adds r4, r4, r7
	ldr r4, [r4]
	str r4, [sp]
	bl sub_809BF3C
	ldr r0, [r5, #0x18]
	ldrb r0, [r0]
	strb r0, [r5, #3]
	adds r0, r5, #0
	bl sub_80A19C0
	adds r0, r5, #0
	bl sub_80A1A04
	adds r0, r5, #0
	bl sub_80A10B0
	ldr r1, [r6]
	ldr r0, _080A02E8 @ =sub_80A0344
	str r0, [r1, #8]
	b _080A033C
	.align 2, 0
_080A02D4: .4byte 0x030000B4
_080A02D8: .4byte gUnknown_080D8D08
_080A02DC: .4byte 0x03000002
_080A02E0: .4byte 0x03000003
_080A02E4: .4byte 0x03000054
_080A02E8: .4byte sub_80A0344
_080A02EC:
	cmp r0, #2
	bne _080A0324
	adds r0, r5, #0
	bl sub_80A19C0
	adds r0, r5, #0
	bl sub_80A1A04
	adds r0, r5, #0
	bl sub_80A10B0
	adds r0, r5, #0
	bl sub_80A1110
	ldr r0, [r5, #0x14]
	movs r1, #1
	strb r1, [r0]
	ldr r0, [r5, #0x18]
	strb r1, [r0]
	ldr r0, [r5, #0x18]
	ldrb r0, [r0]
	strb r0, [r5, #3]
	ldr r1, [r6]
	ldr r0, _080A0320 @ =sub_809FEB0
	str r0, [r1, #8]
	b _080A033C
	.align 2, 0
_080A0320: .4byte sub_809FEB0
_080A0324:
	adds r0, r5, #0
	bl sub_80A19C0
	adds r0, r5, #0
	bl sub_80A1A04
	adds r0, r5, #0
	bl sub_80A10B0
	adds r0, r5, #0
	bl sub_80A1110
_080A033C:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80A0344
sub_80A0344: @ 0x080A0344
	push {r4, r5, r6, lr}
	ldr r6, _080A0364 @ =gCurTask
	ldr r2, [r6]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	movs r5, #0
	ldr r0, [r4, #0x18]
	ldrb r0, [r0]
	cmp r0, #0x22
	bne _080A036C
	ldr r0, _080A0368 @ =sub_80A14AC
	str r0, [r2, #8]
	b _080A03EE
	.align 2, 0
_080A0364: .4byte gCurTask
_080A0368: .4byte sub_80A14AC
_080A036C:
	adds r0, r4, #0
	bl sub_80A19C0
	adds r0, r4, #0
	bl sub_80A1A04
	adds r0, r4, #0
	bl sub_80A10B0
	adds r0, r4, #0
	bl sub_80A1110
	adds r0, r4, #0
	bl sub_80A11B8
	adds r0, r4, #0
	bl sub_80A1798
	cmp r0, #1
	bne _080A0396
	movs r5, #1
_080A0396:
	adds r0, r4, #0
	bl sub_80A17FC
	cmp r0, #1
	bne _080A03A6
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_080A03A6:
	adds r0, r4, #0
	bl sub_80A1668
	cmp r0, #1
	bne _080A03B6
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_080A03B6:
	adds r0, r4, #0
	bl sub_80A163C
	cmp r0, #1
	bne _080A03C6
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_080A03C6:
	ldr r0, [r4, #0x54]
	str r0, [r4, #0x5c]
	ldr r0, [r4, #0x4c]
	str r0, [r4, #0x64]
	cmp r5, #4
	bne _080A03EE
	adds r0, r4, #0
	bl sub_80A1908
	cmp r0, #1
	bne _080A03EE
	ldr r1, [r4, #0x18]
	movs r0, #0xe
	strb r0, [r1]
	ldr r0, [r4, #0x18]
	ldrb r0, [r0]
	strb r0, [r4, #3]
	ldr r1, [r6]
	ldr r0, _080A03F4 @ =sub_80A03F8
	str r0, [r1, #8]
_080A03EE:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A03F4: .4byte sub_80A03F8

	thumb_func_start sub_80A03F8
sub_80A03F8: @ 0x080A03F8
	push {r4, r5, r6, lr}
	ldr r6, _080A0418 @ =gCurTask
	ldr r2, [r6]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	movs r5, #0
	ldr r0, [r4, #0x18]
	ldrb r0, [r0]
	cmp r0, #0x22
	bne _080A0420
	ldr r0, _080A041C @ =sub_80A14AC
	str r0, [r2, #8]
	b _080A04C8
	.align 2, 0
_080A0418: .4byte gCurTask
_080A041C: .4byte sub_80A14AC
_080A0420:
	adds r0, r4, #0
	bl sub_80A19C0
	adds r0, r4, #0
	bl sub_80A1A04
	adds r0, r4, #0
	bl sub_80A10B0
	adds r0, r4, #0
	bl sub_80A1110
	adds r0, r4, #0
	bl sub_80A11B8
	ldr r1, [r4, #0x18]
	ldrb r0, [r4, #3]
	ldrb r1, [r1]
	cmp r0, r1
	bne _080A04C8
	adds r0, r4, #0
	bl sub_80A1798
	cmp r0, #1
	bne _080A0454
	movs r5, #1
_080A0454:
	adds r0, r4, #0
	bl sub_80A17FC
	cmp r0, #1
	bne _080A0464
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_080A0464:
	adds r0, r4, #0
	bl sub_80A1668
	cmp r0, #1
	bne _080A0474
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_080A0474:
	adds r0, r4, #0
	bl sub_80A163C
	cmp r0, #1
	bne _080A0484
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_080A0484:
	adds r0, r4, #0
	bl sub_80A1908
	cmp r0, #1
	bne _080A0494
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_080A0494:
	cmp r5, #5
	bne _080A04C8
	ldr r0, [r4, #0x18]
	ldrb r0, [r0]
	strb r0, [r4, #3]
	ldr r1, [r4, #0x14]
	movs r0, #1
	strb r0, [r1]
	ldr r0, _080A04D0 @ =0x00010500
	str r0, [r4, #0x74]
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r4, #0x7c]
	movs r1, #0xb4
	lsls r1, r1, #8
	str r1, [r4, #0x6c]
	movs r0, #0xf0
	lsls r0, r0, #6
	str r0, [r4, #0x54]
	str r1, [r4, #0x4c]
	movs r0, #0x91
	lsls r0, r0, #8
	str r0, [r4, #0x68]
	ldr r1, [r6]
	ldr r0, _080A04D4 @ =sub_80A0644
	str r0, [r1, #8]
_080A04C8:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A04D0: .4byte 0x00010500
_080A04D4: .4byte sub_80A0644

	thumb_func_start sub_80A04D8
sub_80A04D8: @ 0x080A04D8
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	ldr r0, _080A0504 @ =gCurTask
	ldr r2, [r0]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, _080A0508 @ =gStageData
	ldrb r7, [r0, #6]
	movs r0, #0
	mov r8, r0
	ldr r0, [r4, #0x18]
	ldrb r0, [r0]
	cmp r0, #0x22
	bne _080A0510
	ldr r0, _080A050C @ =sub_80A14AC
	str r0, [r2, #8]
	b _080A0638
	.align 2, 0
_080A0504: .4byte gCurTask
_080A0508: .4byte gStageData
_080A050C: .4byte sub_80A14AC
_080A0510:
	adds r0, r4, #0
	bl sub_80A19C0
	adds r0, r4, #0
	bl sub_80A1A04
	adds r0, r4, #0
	bl sub_80A10B0
	adds r0, r4, #0
	bl sub_80A1110
	adds r0, r4, #0
	bl sub_80A11B8
	lsls r0, r7, #0x10
	lsrs r1, r0, #0x10
	adds r6, r0, #0
	cmp r1, #1
	bhi _080A0540
	movs r1, #0x80
	lsls r1, r1, #0xa
	adds r0, r6, r1
	lsrs r7, r0, #0x10
_080A0540:
	ldr r0, [r4, #0x18]
	ldrb r0, [r0]
	cmp r0, #0x15
	bne _080A0550
	ldr r0, [r4, #0x14]
	mov r1, r8
	strb r1, [r0]
	b _080A0638
_080A0550:
	movs r5, #0
	lsls r6, r7, #0x10
	ldr r0, _080A05A4 @ =gUnknown_030010AC
	mov sb, r0
	ldr r7, _080A05A8 @ =gUnknown_080D8F18
_080A055A:
	asrs r0, r6, #0x10
	cmp r0, r5
	beq _080A057C
	mov r0, sb
	adds r1, r5, r0
	ldr r0, [r4, #0x30]
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r0, r0, r7
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bne _080A057C
	adds r0, r4, #0
	bl sub_80A1A28
_080A057C:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #3
	bls _080A055A
	ldr r1, [r4, #0x18]
	ldrb r0, [r1]
	cmp r0, #0x14
	bne _080A05B4
	ldr r0, [r4, #0x30]
	ldrb r0, [r0]
	strb r0, [r4, #1]
	ldrb r0, [r1]
	strb r0, [r4, #3]
	ldr r0, _080A05AC @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A05B0 @ =sub_80A06E8
	str r0, [r1, #8]
	b _080A0638
	.align 2, 0
_080A05A4: .4byte gUnknown_030010AC
_080A05A8: .4byte gUnknown_080D8F18
_080A05AC: .4byte gCurTask
_080A05B0: .4byte sub_80A06E8
_080A05B4:
	cmp r0, #0x13
	bne _080A05BE
	ldr r1, [r4, #0x14]
	movs r0, #1
	strb r0, [r1]
_080A05BE:
	ldrb r0, [r4, #1]
	ldr r1, [r4, #0x30]
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	cmp r0, r1
	beq _080A0624
	ldr r0, [r4, #0x14]
	movs r1, #0
	strb r1, [r0]
	adds r0, r4, #0
	bl sub_80A1694
	cmp r0, #1
	bne _080A05E6
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
_080A05E6:
	adds r0, r4, #0
	bl sub_80A1938
	cmp r0, #1
	bne _080A05FA
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
_080A05FA:
	mov r1, r8
	cmp r1, #2
	bne _080A0638
	movs r0, #0x96
	lsls r0, r0, #9
	str r0, [r4, #0x4c]
	ldr r0, [r4, #0x30]
	ldrb r0, [r0]
	strb r0, [r4, #1]
	adds r0, r4, #0
	bl sub_80A0DC8
	ldr r0, _080A061C @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A0620 @ =sub_80A0644
	str r0, [r1, #8]
	b _080A0638
	.align 2, 0
_080A061C: .4byte gCurTask
_080A0620: .4byte sub_80A0644
_080A0624:
	ldr r0, [r4, #0x18]
	ldrb r0, [r0]
	cmp r0, #0x13
	bhi _080A0638
	adds r0, r4, #0
	bl sub_80A18E0
	adds r0, r4, #0
	bl sub_80A1030
_080A0638:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80A0644
sub_80A0644: @ 0x080A0644
	push {r4, r5, lr}
	ldr r0, _080A0664 @ =gCurTask
	ldr r2, [r0]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	movs r5, #0
	ldr r0, [r4, #0x18]
	ldrb r0, [r0]
	cmp r0, #0x22
	bne _080A066C
	ldr r0, _080A0668 @ =sub_80A14AC
	str r0, [r2, #8]
	b _080A06DA
	.align 2, 0
_080A0664: .4byte gCurTask
_080A0668: .4byte sub_80A14AC
_080A066C:
	adds r0, r4, #0
	bl sub_80A19C0
	adds r0, r4, #0
	bl sub_80A1A04
	adds r0, r4, #0
	bl sub_80A10B0
	adds r0, r4, #0
	bl sub_80A1110
	adds r0, r4, #0
	bl sub_80A11B8
	adds r0, r4, #0
	bl sub_80A16EC
	cmp r0, #1
	bne _080A0696
	movs r5, #1
_080A0696:
	ldr r1, [r4, #0x68]
	movs r2, #0x91
	lsls r2, r2, #8
	cmp r1, r2
	ble _080A06AC
	ldr r0, _080A06B4 @ =0xFFFFFA00
	adds r1, r1, r0
	str r1, [r4, #0x68]
	ldr r0, _080A06B8 @ =0x000090FF
	cmp r1, r0
	bgt _080A06BC
_080A06AC:
	str r2, [r4, #0x68]
	movs r0, #1
	b _080A06BE
	.align 2, 0
_080A06B4: .4byte 0xFFFFFA00
_080A06B8: .4byte 0x000090FF
_080A06BC:
	movs r0, #0
_080A06BE:
	cmp r0, #1
	bne _080A06C8
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_080A06C8:
	cmp r5, #2
	bne _080A06DA
	ldr r1, [r4, #0x14]
	movs r0, #1
	strb r0, [r1]
	ldr r0, _080A06E0 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A06E4 @ =sub_80A04D8
	str r0, [r1, #8]
_080A06DA:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A06E0: .4byte gCurTask
_080A06E4: .4byte sub_80A04D8

	thumb_func_start sub_80A06E8
sub_80A06E8: @ 0x080A06E8
	push {r4, r5, r6, r7, lr}
	ldr r7, _080A0704 @ =gCurTask
	ldr r1, [r7]
	ldrh r6, [r1, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r6, r0
	ldr r0, [r5, #0x18]
	ldrb r0, [r0]
	cmp r0, #0x22
	bne _080A070C
	ldr r0, _080A0708 @ =sub_80A14AC
	b _080A07A0
	.align 2, 0
_080A0704: .4byte gCurTask
_080A0708: .4byte sub_80A14AC
_080A070C:
	ldr r0, _080A07A8 @ =gUnknown_03006230
	movs r3, #0
	strb r3, [r0, #2]
	ldr r1, _080A07AC @ =gUnknown_03003590
	strb r3, [r1, #8]
	strb r3, [r1, #9]
	movs r0, #0xff
	strb r0, [r1, #0xa]
	movs r0, #0x40
	strb r0, [r1, #0xb]
	movs r0, #0x8e
	lsls r0, r0, #8
	str r0, [r5, #0x6c]
	movs r0, #0xb0
	lsls r0, r0, #5
	str r0, [r5, #0x70]
	ldr r1, _080A07B0 @ =gBgScrollRegs
	movs r4, #0
	movs r0, #0x8e
	strh r0, [r1, #8]
	ldr r0, _080A07B4 @ =0x0000FFEA
	strh r0, [r1, #0xa]
	ldr r1, _080A07B8 @ =gDispCnt
	movs r2, #0xba
	lsls r2, r2, #5
	adds r0, r2, #0
	strh r0, [r1]
	ldr r1, _080A07BC @ =gBgCntRegs
	ldr r0, _080A07C0 @ =0x00001B09
	strh r0, [r1, #4]
	ldr r1, _080A07C4 @ =0x03000274
	adds r0, r6, r1
	ldr r2, _080A07C8 @ =gUnknown_080D8F18
	ldrb r1, [r5, #1]
	adds r1, r1, r2
	ldrb r1, [r1]
	ldr r2, _080A07CC @ =0x06008000
	str r2, [r0, #4]
	strh r3, [r0, #0xa]
	ldr r2, _080A07D0 @ =0x0600D800
	str r2, [r0, #0xc]
	strh r3, [r0, #0x18]
	strh r3, [r0, #0x1a]
	ldr r2, _080A07D4 @ =gUnknown_080D8CDC
	adds r1, #0xa
	lsls r1, r1, #1
	adds r1, r1, r2
	ldrh r1, [r1]
	strh r1, [r0, #0x1c]
	strh r3, [r0, #0x1e]
	strh r3, [r0, #0x20]
	strh r3, [r0, #0x22]
	strh r3, [r0, #0x24]
	movs r1, #0x10
	strh r1, [r0, #0x26]
	strh r1, [r0, #0x28]
	ldr r2, _080A07D8 @ =0x0300029E
	adds r1, r6, r2
	strb r4, [r1]
	movs r1, #2
	strh r1, [r0, #0x2e]
	bl DrawBackground
	adds r0, r5, #0
	bl sub_80A10B0
	adds r0, r5, #0
	bl sub_80A1110
	adds r0, r5, #0
	bl sub_80A11B8
	ldr r1, [r7]
	ldr r0, _080A07DC @ =sub_80A07E0
_080A07A0:
	str r0, [r1, #8]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A07A8: .4byte gUnknown_03006230
_080A07AC: .4byte gUnknown_03003590
_080A07B0: .4byte gBgScrollRegs
_080A07B4: .4byte 0x0000FFEA
_080A07B8: .4byte gDispCnt
_080A07BC: .4byte gBgCntRegs
_080A07C0: .4byte 0x00001B09
_080A07C4: .4byte 0x03000274
_080A07C8: .4byte gUnknown_080D8F18
_080A07CC: .4byte 0x06008000
_080A07D0: .4byte 0x0600D800
_080A07D4: .4byte gUnknown_080D8CDC
_080A07D8: .4byte 0x0300029E
_080A07DC: .4byte sub_80A07E0

	thumb_func_start sub_80A07E0
sub_80A07E0: @ 0x080A07E0
	push {r4, r5, r6, lr}
	ldr r6, _080A0800 @ =gCurTask
	ldr r2, [r6]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	movs r5, #0
	ldr r0, [r4, #0x18]
	ldrb r0, [r0]
	cmp r0, #0x22
	bne _080A0808
	ldr r0, _080A0804 @ =sub_80A14AC
	str r0, [r2, #8]
	b _080A0872
	.align 2, 0
_080A0800: .4byte gCurTask
_080A0804: .4byte sub_80A14AC
_080A0808:
	adds r0, r4, #0
	bl sub_80A137C
	adds r0, r4, #0
	bl sub_80A10B0
	adds r0, r4, #0
	bl sub_80A1110
	adds r0, r4, #0
	bl sub_80A11B8
	adds r0, r4, #0
	movs r1, #0x5a
	bl sub_80A1740
	cmp r0, #1
	bne _080A082E
	movs r5, #1
_080A082E:
	adds r0, r4, #0
	bl sub_80A1768
	cmp r0, #1
	bne _080A083E
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_080A083E:
	adds r0, r4, #0
	bl sub_80A185C
	cmp r0, #1
	bne _080A084E
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_080A084E:
	adds r0, r4, #0
	bl sub_80A182C
	cmp r0, #1
	bne _080A085E
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_080A085E:
	ldr r0, [r4, #0x54]
	str r0, [r4, #0x5c]
	ldr r0, [r4, #0x4c]
	adds r0, #5
	str r0, [r4, #0x64]
	cmp r5, #4
	bne _080A0872
	ldr r1, [r6]
	ldr r0, _080A0878 @ =sub_80A087C
	str r0, [r1, #8]
_080A0872:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A0878: .4byte sub_80A087C

	thumb_func_start sub_80A087C
sub_80A087C: @ 0x080A087C
	push {r4, r5, lr}
	ldr r5, _080A0898 @ =gCurTask
	ldr r2, [r5]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, [r4, #0x18]
	ldrb r0, [r0]
	cmp r0, #0x22
	bne _080A08A0
	ldr r0, _080A089C @ =sub_80A14AC
	str r0, [r2, #8]
	b _080A0942
	.align 2, 0
_080A0898: .4byte gCurTask
_080A089C: .4byte sub_80A14AC
_080A08A0:
	adds r0, r4, #0
	bl sub_80A19C0
	adds r0, r4, #0
	bl sub_80A1A04
	adds r0, r4, #0
	bl sub_80A10B0
	adds r0, r4, #0
	bl sub_80A1110
	adds r0, r4, #0
	bl sub_80A11B8
	ldrh r0, [r4, #6]
	cmp r0, #0
	beq _080A08FA
	ldr r2, _080A0918 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080A091C @ =gWinRegs
	movs r3, #0
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	ldrh r2, [r1, #8]
	movs r0, #0x3f
	orrs r0, r2
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	orrs r0, r2
	strh r0, [r1, #0xa]
	ldr r1, _080A0920 @ =gBldRegs
	ldr r0, _080A0924 @ =0x00003FBF
	strh r0, [r1]
	strh r3, [r1, #4]
	strh r3, [r4, #6]
	strh r3, [r4, #8]
_080A08FA:
	ldr r1, _080A0920 @ =gBldRegs
	ldrh r0, [r1, #4]
	cmp r0, #0xf
	bhi _080A0928
	ldrh r0, [r4, #8]
	lsrs r0, r0, #8
	strh r0, [r1, #4]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r1, #0
	ldrh r3, [r4, #8]
	adds r0, r0, r3
	strh r0, [r4, #8]
	b _080A0942
	.align 2, 0
_080A0918: .4byte gDispCnt
_080A091C: .4byte gWinRegs
_080A0920: .4byte gBldRegs
_080A0924: .4byte 0x00003FBF
_080A0928:
	movs r0, #0x10
	strh r0, [r1, #4]
	ldr r1, [r4, #0x18]
	movs r0, #0x16
	strb r0, [r1]
	ldr r0, [r4, #0x18]
	ldrb r0, [r0]
	strb r0, [r4, #3]
	movs r0, #1
	strh r0, [r4, #6]
	ldr r1, [r5]
	ldr r0, _080A0948 @ =sub_80A094C
	str r0, [r1, #8]
_080A0942:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A0948: .4byte sub_80A094C

	thumb_func_start sub_80A094C
sub_80A094C: @ 0x080A094C
	push {r4, r5, r6, lr}
	ldr r6, _080A0968 @ =gCurTask
	ldr r1, [r6]
	ldrh r5, [r1, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	ldr r0, [r4, #0x18]
	ldrb r0, [r0]
	cmp r0, #0x22
	bne _080A0970
	ldr r0, _080A096C @ =sub_80A14AC
	b _080A09D2
	.align 2, 0
_080A0968: .4byte gCurTask
_080A096C: .4byte sub_80A14AC
_080A0970:
	ldr r1, _080A09DC @ =gDispCnt
	ldr r2, _080A09E0 @ =0x00001541
	adds r0, r2, #0
	strh r0, [r1]
	ldr r1, _080A09E4 @ =gBgCntRegs
	movs r3, #0
	movs r2, #0
	ldr r0, _080A09E8 @ =0x00001B89
	strh r0, [r1, #4]
	ldr r0, _080A09EC @ =gBgScrollRegs
	strh r2, [r0, #8]
	strh r2, [r0, #0xa]
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r4, #0x6c]
	movs r0, #0xaa
	lsls r0, r0, #7
	str r0, [r4, #0x70]
	ldr r1, _080A09F0 @ =0x03000274
	adds r0, r5, r1
	ldr r1, _080A09F4 @ =0x06008000
	str r1, [r0, #4]
	strh r2, [r0, #0xa]
	ldr r1, _080A09F8 @ =0x0600D800
	str r1, [r0, #0xc]
	strh r2, [r0, #0x18]
	strh r2, [r0, #0x1a]
	ldr r1, _080A09FC @ =gUnknown_080D8CDC
	ldrh r1, [r1, #0x1e]
	strh r1, [r0, #0x1c]
	strh r2, [r0, #0x1e]
	strh r2, [r0, #0x20]
	strh r2, [r0, #0x22]
	strh r2, [r0, #0x24]
	movs r1, #0x10
	strh r1, [r0, #0x26]
	strh r1, [r0, #0x28]
	ldr r2, _080A0A00 @ =0x0300029E
	adds r1, r5, r2
	strb r3, [r1]
	movs r1, #6
	strh r1, [r0, #0x2e]
	bl DrawBackground
	adds r0, r4, #0
	bl sub_80A0A08
	ldr r1, [r6]
	ldr r0, _080A0A04 @ =sub_80A0ADC
_080A09D2:
	str r0, [r1, #8]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A09DC: .4byte gDispCnt
_080A09E0: .4byte 0x00001541
_080A09E4: .4byte gBgCntRegs
_080A09E8: .4byte 0x00001B89
_080A09EC: .4byte gBgScrollRegs
_080A09F0: .4byte 0x03000274
_080A09F4: .4byte 0x06008000
_080A09F8: .4byte 0x0600D800
_080A09FC: .4byte gUnknown_080D8CDC
_080A0A00: .4byte 0x0300029E
_080A0A04: .4byte sub_80A0ADC

	thumb_func_start sub_80A0A08
sub_80A0A08: @ 0x080A0A08
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	movs r4, #0
	movs r1, #0x96
	lsls r1, r1, #1
	adds r0, r6, r1
	ldr r2, _080A0A78 @ =gUnknown_080D8F00
	ldrh r1, [r2]
	movs r3, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r6, #0x5c]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r6, #0x60]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r1, #0x40
	strh r1, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	strb r3, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	adds r7, r6, #0
	adds r7, #0xb4
	ldr r1, _080A0A7C @ =gUnknown_080D8F18
	ldrb r0, [r6, #2]
	adds r0, r0, r1
	ldrb r4, [r0]
	ldrb r0, [r6, #1]
	adds r0, r0, r1
	ldrb r5, [r0]
	cmp r4, #4
	bhi _080A0A5E
	cmp r5, #4
	bls _080A0A62
_080A0A5E:
	bl sub_802613C
_080A0A62:
	cmp r4, #0
	beq _080A0A6A
	cmp r5, #0
	bne _080A0A98
_080A0A6A:
	cmp r4, #2
	beq _080A0A72
	cmp r5, #2
	bne _080A0A80
_080A0A72:
	movs r4, #4
	b _080A0AAE
	.align 2, 0
_080A0A78: .4byte gUnknown_080D8F00
_080A0A7C: .4byte gUnknown_080D8F18
_080A0A80:
	cmp r4, #3
	beq _080A0A88
	cmp r5, #3
	bne _080A0A8C
_080A0A88:
	movs r4, #6
	b _080A0AAE
_080A0A8C:
	cmp r4, #4
	beq _080A0A94
	cmp r5, #4
	bne _080A0AAC
_080A0A94:
	movs r4, #3
	b _080A0AAE
_080A0A98:
	cmp r4, #4
	bne _080A0AA0
	cmp r5, #1
	beq _080A0AA8
_080A0AA0:
	cmp r4, #1
	bne _080A0AAC
	cmp r5, #4
	bne _080A0AAC
_080A0AA8:
	movs r4, #5
	b _080A0AAE
_080A0AAC:
	movs r4, #2
_080A0AAE:
	ldr r1, _080A0AD8 @ =gUnknown_080D8D08
	ldrb r0, [r6]
	lsls r0, r0, #3
	adds r0, r4, r0
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r7, #0xc]
	ldrb r0, [r6]
	lsls r0, r0, #3
	adds r0, r4, r0
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrb r0, [r0, #2]
	strb r0, [r7, #0x1a]
	adds r0, r7, #0
	bl UpdateSpriteAnimation
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A0AD8: .4byte gUnknown_080D8D08

	thumb_func_start sub_80A0ADC
sub_80A0ADC: @ 0x080A0ADC
	push {r4, r5, lr}
	ldr r5, _080A0AF8 @ =gCurTask
	ldr r2, [r5]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, [r4, #0x18]
	ldrb r0, [r0]
	cmp r0, #0x22
	bne _080A0B00
	ldr r0, _080A0AFC @ =sub_80A14AC
	str r0, [r2, #8]
	b _080A0B90
	.align 2, 0
_080A0AF8: .4byte gCurTask
_080A0AFC: .4byte sub_80A14AC
_080A0B00:
	adds r0, r4, #0
	bl sub_80A19C0
	adds r0, r4, #0
	bl sub_80A10B0
	adds r0, r4, #0
	bl sub_80A124C
	ldrh r0, [r4, #6]
	cmp r0, #0
	beq _080A0B54
	ldr r2, _080A0B70 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080A0B74 @ =gWinRegs
	movs r3, #0
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	ldrh r2, [r1, #8]
	movs r0, #0x3f
	orrs r0, r2
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	orrs r0, r2
	strh r0, [r1, #0xa]
	ldr r1, _080A0B78 @ =gBldRegs
	ldr r0, _080A0B7C @ =0x00003FBF
	strh r0, [r1]
	movs r0, #0x10
	strh r0, [r1, #4]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r4, #8]
	strh r3, [r4, #6]
_080A0B54:
	ldr r2, _080A0B78 @ =gBldRegs
	ldrh r1, [r2, #4]
	cmp r1, #0
	beq _080A0B84
	ldrh r0, [r4, #8]
	lsrs r0, r0, #8
	strh r0, [r2, #4]
	ldr r1, _080A0B80 @ =0xFFFFFF00
	adds r0, r1, #0
	ldrh r3, [r4, #8]
	adds r0, r0, r3
	strh r0, [r4, #8]
	b _080A0B90
	.align 2, 0
_080A0B70: .4byte gDispCnt
_080A0B74: .4byte gWinRegs
_080A0B78: .4byte gBldRegs
_080A0B7C: .4byte 0x00003FBF
_080A0B80: .4byte 0xFFFFFF00
_080A0B84:
	movs r0, #1
	strh r0, [r4, #6]
	strh r1, [r2, #4]
	ldr r1, [r5]
	ldr r0, _080A0B98 @ =sub_80A0B9C
	str r0, [r1, #8]
_080A0B90:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A0B98: .4byte sub_80A0B9C

	thumb_func_start sub_80A0B9C
sub_80A0B9C: @ 0x080A0B9C
	push {r4, r5, r6, lr}
	ldr r0, _080A0BC8 @ =gCurTask
	ldr r2, [r0]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r1, _080A0BCC @ =gUnknown_080D8F18
	ldrb r0, [r4, #2]
	adds r0, r0, r1
	ldrb r5, [r0]
	ldrb r0, [r4, #1]
	adds r0, r0, r1
	ldrb r6, [r0]
	ldr r0, [r4, #0x18]
	ldrb r0, [r0]
	cmp r0, #0x22
	bne _080A0BD4
	ldr r0, _080A0BD0 @ =sub_80A14AC
	str r0, [r2, #8]
	b _080A0C44
	.align 2, 0
_080A0BC8: .4byte gCurTask
_080A0BCC: .4byte gUnknown_080D8F18
_080A0BD0: .4byte sub_80A14AC
_080A0BD4:
	adds r0, r4, #0
	bl sub_80A19C0
	adds r0, r4, #0
	bl sub_80A10B0
	adds r0, r4, #0
	bl sub_80A124C
	ldrh r0, [r4, #4]
	cmp r0, #0
	bne _080A0C08
	ldr r1, _080A0C00 @ =gUnknown_080D900E
	ldr r0, _080A0C04 @ =gUnknown_080D9B74
	adds r0, r5, r0
	ldrb r0, [r0]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	bl m4aSongNumStart
	b _080A0C2E
	.align 2, 0
_080A0C00: .4byte gUnknown_080D900E
_080A0C04: .4byte gUnknown_080D9B74
_080A0C08:
	cmp r0, #0x3c
	bne _080A0C18
	ldr r0, _080A0C14 @ =0x000001FF
	bl m4aSongNumStart
	b _080A0C2E
	.align 2, 0
_080A0C14: .4byte 0x000001FF
_080A0C18:
	cmp r0, #0x5a
	bne _080A0C2E
	ldr r1, _080A0C4C @ =gUnknown_080D9018
	ldr r0, _080A0C50 @ =gUnknown_080D9B74
	adds r0, r6, r0
	ldrb r0, [r0]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	bl m4aSongNumStart
_080A0C2E:
	ldrh r0, [r4, #4]
	adds r0, #1
	strh r0, [r4, #4]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x77
	bls _080A0C44
	ldr r0, _080A0C54 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A0C58 @ =sub_80A0C5C
	str r0, [r1, #8]
_080A0C44:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A0C4C: .4byte gUnknown_080D9018
_080A0C50: .4byte gUnknown_080D9B74
_080A0C54: .4byte gCurTask
_080A0C58: .4byte sub_80A0C5C

	thumb_func_start sub_80A0C5C
sub_80A0C5C: @ 0x080A0C5C
	push {r4, r5, lr}
	ldr r5, _080A0C78 @ =gCurTask
	ldr r2, [r5]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, [r4, #0x18]
	ldrb r0, [r0]
	cmp r0, #0x22
	bne _080A0C80
	ldr r0, _080A0C7C @ =sub_80A14AC
	str r0, [r2, #8]
	b _080A0D16
	.align 2, 0
_080A0C78: .4byte gCurTask
_080A0C7C: .4byte sub_80A14AC
_080A0C80:
	adds r0, r4, #0
	bl sub_80A19C0
	adds r0, r4, #0
	bl sub_80A10B0
	adds r0, r4, #0
	bl sub_80A124C
	ldrh r0, [r4, #6]
	cmp r0, #0
	beq _080A0CCC
	ldr r2, _080A0CE8 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080A0CEC @ =gWinRegs
	movs r3, #0
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	ldrh r2, [r1, #8]
	movs r0, #0x3f
	orrs r0, r2
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	orrs r0, r2
	strh r0, [r1, #0xa]
	ldr r1, _080A0CF0 @ =gBldRegs
	ldr r0, _080A0CF4 @ =0x00003FFF
	strh r0, [r1]
	strh r3, [r4, #6]
	strh r3, [r4, #8]
_080A0CCC:
	ldr r1, _080A0CF0 @ =gBldRegs
	ldrh r0, [r1, #4]
	cmp r0, #0xf
	bhi _080A0CF8
	ldrh r0, [r4, #8]
	lsrs r0, r0, #8
	strh r0, [r1, #4]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r1, #0
	ldrh r3, [r4, #8]
	adds r0, r0, r3
	strh r0, [r4, #8]
	b _080A0D16
	.align 2, 0
_080A0CE8: .4byte gDispCnt
_080A0CEC: .4byte gWinRegs
_080A0CF0: .4byte gBldRegs
_080A0CF4: .4byte 0x00003FFF
_080A0CF8:
	movs r2, #0
	movs r0, #0x10
	strh r0, [r1, #4]
	movs r0, #0x9b
	lsls r0, r0, #9
	str r0, [r4, #0x4c]
	str r0, [r4, #0x54]
	movs r1, #0x1d
	strb r1, [r4, #3]
	ldr r0, [r4, #0x18]
	strb r1, [r0]
	strh r2, [r4, #4]
	ldr r1, [r5]
	ldr r0, _080A0D1C @ =sub_80A13B4
	str r0, [r1, #8]
_080A0D16:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A0D1C: .4byte sub_80A13B4

	thumb_func_start sub_80A0D20
sub_80A0D20: @ 0x080A0D20
	push {r4, r5, r6, r7, lr}
	ldr r0, _080A0D3C @ =gCurTask
	ldr r2, [r0]
	ldrh r0, [r2, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	ldr r0, [r0, #0x18]
	ldrb r0, [r0]
	cmp r0, #0x22
	bne _080A0D44
	ldr r0, _080A0D40 @ =sub_80A14AC
	str r0, [r2, #8]
	b _080A0DA0
	.align 2, 0
_080A0D3C: .4byte gCurTask
_080A0D40: .4byte sub_80A14AC
_080A0D44:
	movs r4, #0
	ldr r0, _080A0DA8 @ =gPlayers
	mov ip, r0
	ldr r6, _080A0DAC @ =gUnknown_030010AC
	movs r7, #0x10
	rsbs r7, r7, #0
	movs r5, #0xf
_080A0D52:
	lsls r1, r4, #2
	adds r1, r1, r4
	lsls r1, r1, #2
	adds r1, r1, r4
	lsls r1, r1, #4
	add r1, ip
	adds r0, r4, r6
	ldrb r0, [r0]
	adds r1, #0x2a
	adds r2, r5, #0
	ands r2, r0
	ldrb r3, [r1]
	adds r0, r7, #0
	ands r0, r3
	orrs r0, r2
	strb r0, [r1]
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #3
	bls _080A0D52
	ldr r1, _080A0DB0 @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _080A0DB4 @ =gBackgroundsCopyQueueCursor
	ldr r0, _080A0DB8 @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _080A0DBC @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _080A0DC0 @ =gVramGraphicsCopyCursor
	ldr r0, _080A0DC4 @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	movs r0, #0
	bl sub_809BFE8
_080A0DA0:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A0DA8: .4byte gPlayers
_080A0DAC: .4byte gUnknown_030010AC
_080A0DB0: .4byte 0x0000FFFF
_080A0DB4: .4byte gBackgroundsCopyQueueCursor
_080A0DB8: .4byte gBackgroundsCopyQueueIndex
_080A0DBC: .4byte gUnknown_03006840
_080A0DC0: .4byte gVramGraphicsCopyCursor
_080A0DC4: .4byte gVramGraphicsCopyQueueIndex

	thumb_func_start sub_80A0DC8
sub_80A0DC8: @ 0x080A0DC8
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	movs r1, #0x9d
	lsls r1, r1, #2
	adds r0, r4, r1
	ldr r2, _080A0E48 @ =gUnknown_080D8F18
	ldrb r1, [r4, #1]
	adds r1, r1, r2
	ldrb r6, [r1]
	adds r7, r6, #0
	movs r5, #0
	ldr r1, _080A0E4C @ =0x06008000
	str r1, [r0, #4]
	movs r3, #0
	strh r5, [r0, #0xa]
	ldr r1, _080A0E50 @ =0x0600D800
	str r1, [r0, #0xc]
	strh r5, [r0, #0x18]
	strh r5, [r0, #0x1a]
	ldr r2, _080A0E54 @ =gUnknown_080D8CDC
	adds r1, r6, #5
	lsls r1, r1, #1
	adds r1, r1, r2
	ldrh r1, [r1]
	strh r1, [r0, #0x1c]
	strh r5, [r0, #0x1e]
	strh r5, [r0, #0x20]
	strh r5, [r0, #0x22]
	strh r5, [r0, #0x24]
	movs r1, #0x10
	strh r1, [r0, #0x26]
	strh r1, [r0, #0x28]
	ldr r2, _080A0E58 @ =0x0000029E
	adds r1, r4, r2
	strb r3, [r1]
	movs r1, #6
	strh r1, [r0, #0x2e]
	bl DrawBackground
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [r4, #0x50]
	ldr r0, [r4, #0x18]
	ldrb r0, [r0]
	movs r5, #7
	cmp r0, #0xb
	bhi _080A0E28
	movs r5, #6
_080A0E28:
	ldr r4, _080A0E5C @ =gFlags
	ldr r3, [r4]
	movs r0, #0x80
	lsls r0, r0, #0xa
	ands r0, r3
	cmp r0, #0
	beq _080A0E64
	lsls r0, r6, #5
	ldr r1, _080A0E60 @ =gUnknown_08E2EE50
	adds r0, r0, r1
	lsls r1, r5, #4
	movs r2, #0x10
	bl sub_80C4564
	b _080A0E82
	.align 2, 0
_080A0E48: .4byte gUnknown_080D8F18
_080A0E4C: .4byte 0x06008000
_080A0E50: .4byte 0x0600D800
_080A0E54: .4byte gUnknown_080D8CDC
_080A0E58: .4byte 0x0000029E
_080A0E5C: .4byte gFlags
_080A0E60: .4byte gUnknown_08E2EE50
_080A0E64:
	ldr r2, _080A0E94 @ =0x040000D4
	lsls r0, r7, #5
	ldr r1, _080A0E98 @ =gUnknown_08E2EE50
	adds r0, r0, r1
	str r0, [r2]
	lsls r0, r5, #5
	ldr r1, _080A0E9C @ =gObjPalette
	adds r0, r0, r1
	str r0, [r2, #4]
	ldr r0, _080A0EA0 @ =0x80000010
	str r0, [r2, #8]
	ldr r0, [r2, #8]
	movs r0, #2
	orrs r3, r0
	str r3, [r4]
_080A0E82:
	ldr r0, _080A0EA4 @ =gFlags
	ldr r1, [r0]
	movs r2, #2
	orrs r1, r2
	str r1, [r0]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A0E94: .4byte 0x040000D4
_080A0E98: .4byte gUnknown_08E2EE50
_080A0E9C: .4byte gObjPalette
_080A0EA0: .4byte 0x80000010
_080A0EA4: .4byte gFlags

	thumb_func_start sub_80A0EA8
sub_80A0EA8: @ 0x080A0EA8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r7, r0, #0
	ldr r0, _080A0EDC @ =gUnknown_080D8F18
	ldrb r1, [r7, #1]
	adds r1, r1, r0
	ldrb r1, [r1]
	ldr r4, _080A0EE0 @ =gFlags
	ldr r3, [r4]
	movs r0, #0x80
	lsls r0, r0, #0xa
	ands r0, r3
	cmp r0, #0
	beq _080A0EE8
	lsls r0, r1, #5
	ldr r1, _080A0EE4 @ =gUnknown_08E2EE50
	adds r0, r0, r1
	movs r1, #0x70
	movs r2, #0x10
	bl sub_80C4564
	b _080A0F02
	.align 2, 0
_080A0EDC: .4byte gUnknown_080D8F18
_080A0EE0: .4byte gFlags
_080A0EE4: .4byte gUnknown_08E2EE50
_080A0EE8:
	ldr r2, _080A0FDC @ =0x040000D4
	lsls r0, r1, #5
	ldr r1, _080A0FE0 @ =gUnknown_08E2EE50
	adds r0, r0, r1
	str r0, [r2]
	ldr r0, _080A0FE4 @ =gUnknown_03003450
	str r0, [r2, #4]
	ldr r0, _080A0FE8 @ =0x80000010
	str r0, [r2, #8]
	ldr r0, [r2, #8]
	movs r0, #2
	orrs r3, r0
	str r3, [r4]
_080A0F02:
	ldr r2, _080A0FEC @ =gFlags
	ldr r0, [r2]
	movs r1, #2
	orrs r0, r1
	str r0, [r2]
	ldr r1, _080A0FF0 @ =gDispCnt
	ldr r2, _080A0FF4 @ =0x00001741
	adds r0, r2, #0
	strh r0, [r1]
	ldr r0, _080A0FF8 @ =gUnknown_03006230
	movs r4, #0
	strb r4, [r0, #1]
	ldr r1, _080A0FFC @ =gUnknown_03003590
	strb r4, [r1, #4]
	strb r4, [r1, #5]
	movs r0, #0xff
	strb r0, [r1, #6]
	movs r0, #0x40
	strb r0, [r1, #7]
	ldr r0, _080A1000 @ =gBgCntRegs
	mov sl, r0
	ldr r0, _080A1004 @ =0x0000030E
	mov r1, sl
	strh r0, [r1, #2]
	ldr r6, _080A1008 @ =gBgScrollRegs
	strh r4, [r6, #4]
	strh r4, [r6, #6]
	movs r2, #0x8d
	lsls r2, r2, #2
	adds r0, r7, r2
	ldr r1, _080A100C @ =gUnknown_080D8F18
	mov r8, r1
	ldrb r1, [r7, #2]
	add r1, r8
	ldrb r1, [r1]
	ldr r2, _080A1010 @ =0x0600C000
	str r2, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r2, _080A1014 @ =0x06001800
	str r2, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	ldr r2, _080A1018 @ =gUnknown_080D8CDC
	mov sb, r2
	adds r1, #0xa
	lsls r1, r1, #1
	add r1, sb
	ldrh r1, [r1]
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	movs r5, #0x10
	strh r5, [r0, #0x26]
	strh r5, [r0, #0x28]
	ldr r2, _080A101C @ =0x0000025E
	adds r1, r7, r2
	movs r2, #0
	strb r2, [r1]
	movs r1, #1
	strh r1, [r0, #0x2e]
	bl DrawBackground
	ldr r0, _080A1020 @ =0x00001B89
	mov r1, sl
	strh r0, [r1, #4]
	strh r4, [r6, #8]
	strh r4, [r6, #0xa]
	movs r2, #0x9d
	lsls r2, r2, #2
	adds r0, r7, r2
	ldrb r1, [r7, #1]
	add r1, r8
	ldrb r1, [r1]
	ldr r2, _080A1024 @ =0x06008000
	str r2, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r2, _080A1028 @ =0x0600D800
	str r2, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	adds r1, #5
	lsls r1, r1, #1
	add r1, sb
	ldrh r1, [r1]
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	strh r5, [r0, #0x26]
	strh r5, [r0, #0x28]
	ldr r2, _080A102C @ =0x0000029E
	adds r1, r7, r2
	movs r2, #0
	strb r2, [r1]
	movs r1, #6
	strh r1, [r0, #0x2e]
	bl DrawBackground
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A0FDC: .4byte 0x040000D4
_080A0FE0: .4byte gUnknown_08E2EE50
_080A0FE4: .4byte gUnknown_03003450
_080A0FE8: .4byte 0x80000010
_080A0FEC: .4byte gFlags
_080A0FF0: .4byte gDispCnt
_080A0FF4: .4byte 0x00001741
_080A0FF8: .4byte gUnknown_03006230
_080A0FFC: .4byte gUnknown_03003590
_080A1000: .4byte gBgCntRegs
_080A1004: .4byte 0x0000030E
_080A1008: .4byte gBgScrollRegs
_080A100C: .4byte gUnknown_080D8F18
_080A1010: .4byte 0x0600C000
_080A1014: .4byte 0x06001800
_080A1018: .4byte gUnknown_080D8CDC
_080A101C: .4byte 0x0000025E
_080A1020: .4byte 0x00001B89
_080A1024: .4byte 0x06008000
_080A1028: .4byte 0x0600D800
_080A102C: .4byte 0x0000029E

	thumb_func_start sub_80A1030
sub_80A1030: @ 0x080A1030
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x8c
	movs r0, #2
	mov sb, r0
	ldr r0, [r5, #0x18]
	ldrb r0, [r0]
	movs r1, #0x78
	cmp r0, #0xd
	bls _080A104E
	movs r1, #0xb4
_080A104E:
	movs r6, #0
	movs r0, #0x28
	rsbs r0, r0, #0
	adds r0, r0, r1
	mov r8, r0
	adds r7, r1, #0
	adds r7, #0x28
_080A105C:
	cmp r6, #0
	beq _080A106A
	ldr r0, [r5, #0x44]
	asrs r0, r0, #8
	mov r1, r8
	subs r0, r1, r0
	b _080A1070
_080A106A:
	ldr r0, [r5, #0x44]
	asrs r0, r0, #8
	adds r0, r7, r0
_080A1070:
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x48]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	cmp r6, #0
	beq _080A1086
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	b _080A108C
_080A1086:
	ldr r0, [r4, #8]
	ldr r1, _080A10AC @ =0xFFFFFBFF
	ands r0, r1
_080A108C:
	str r0, [r4, #8]
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, sb
	blo _080A105C
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A10AC: .4byte 0xFFFFFBFF

	thumb_func_start sub_80A10B0
sub_80A10B0: @ 0x080A10B0
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	movs r6, #0
	adds r4, r5, #0
	adds r4, #0xdc
_080A10BA:
	ldr r0, [r5, #0x3c]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x40]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	cmp r6, #0
	beq _080A10D8
	ldr r0, [r4, #8]
	ldr r1, _080A10D4 @ =0xFFFFFBFF
	ands r0, r1
	b _080A10E0
	.align 2, 0
_080A10D4: .4byte 0xFFFFFBFF
_080A10D8:
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
_080A10E0:
	str r0, [r4, #8]
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #1
	bls _080A10BA
	adds r4, r5, #0
	adds r4, #0xb4
	ldr r0, [r5, #0x34]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x38]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl DisplaySprite
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80A1110
sub_80A1110: @ 0x080A1110
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	movs r6, #0
	movs r0, #0x96
	lsls r0, r0, #1
	adds r4, r5, r0
	movs r7, #0
_080A111E:
	ldr r0, [r5, #0x5c]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x60]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	strb r7, [r4, #0x1f]
	cmp r6, #0
	beq _080A113A
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	b _080A1140
_080A113A:
	ldr r0, [r4, #8]
	ldr r1, _080A1168 @ =0xFFFFFBFF
	ands r0, r1
_080A1140:
	str r0, [r4, #8]
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #1
	bls _080A111E
	ldrb r1, [r5]
	rsbs r0, r1, #0
	orrs r0, r1
	lsrs r3, r0, #0x1f
	ldr r0, [r5, #0x18]
	ldrb r0, [r0]
	cmp r0, #0xc
	bls _080A1170
	ldr r1, _080A116C @ =gUnknown_080D8F18
	ldrb r0, [r5, #2]
	b _080A1174
	.align 2, 0
_080A1168: .4byte 0xFFFFFBFF
_080A116C: .4byte gUnknown_080D8F18
_080A1170:
	ldr r1, _080A11B0 @ =gUnknown_080D8F18
	ldrb r0, [r5, #1]
_080A1174:
	adds r0, r0, r1
	ldrb r2, [r0]
	movs r0, #0x82
	lsls r0, r0, #1
	adds r4, r5, r0
	ldr r1, _080A11B4 @ =gUnknown_080D8E80
	lsls r0, r3, #3
	adds r0, r2, r0
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r1, [r0]
	strh r1, [r4, #0xc]
	ldrb r0, [r0, #2]
	strb r0, [r4, #0x1a]
	ldr r0, [r5, #0x5c]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x60]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A11B0: .4byte gUnknown_080D8F18
_080A11B4: .4byte gUnknown_080D8E80

	thumb_func_start sub_80A11B8
sub_80A11B8: @ 0x080A11B8
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	movs r6, #0
	movs r0, #0x96
	lsls r0, r0, #1
	adds r4, r5, r0
_080A11C4:
	ldr r0, [r5, #0x64]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x68]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	movs r0, #1
	strb r0, [r4, #0x1f]
	cmp r6, #0
	beq _080A11E2
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	b _080A11E8
_080A11E2:
	ldr r0, [r4, #8]
	ldr r1, _080A1240 @ =0xFFFFFBFF
	ands r0, r1
_080A11E8:
	str r0, [r4, #8]
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #1
	bls _080A11C4
	ldrb r1, [r5]
	rsbs r0, r1, #0
	orrs r0, r1
	lsrs r0, r0, #0x1f
	ldr r2, _080A1244 @ =gUnknown_080D8F18
	ldrb r1, [r5, #1]
	adds r1, r1, r2
	movs r2, #0xaa
	lsls r2, r2, #1
	adds r4, r5, r2
	ldr r2, _080A1248 @ =gUnknown_080D8E80
	lsls r0, r0, #3
	ldrb r1, [r1]
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r1, [r0]
	strh r1, [r4, #0xc]
	ldrb r0, [r0, #2]
	strb r0, [r4, #0x1a]
	ldr r0, [r5, #0x64]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x68]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A1240: .4byte 0xFFFFFBFF
_080A1244: .4byte gUnknown_080D8F18
_080A1248: .4byte gUnknown_080D8E80

	thumb_func_start sub_80A124C
sub_80A124C: @ 0x080A124C
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldrb r1, [r5, #1]
	ldrb r0, [r5, #2]
	cmp r0, #4
	bhi _080A125C
	cmp r1, #4
	bls _080A1298
_080A125C:
	ldr r3, _080A1278 @ =gStageData
	ldrb r2, [r3, #6]
	cmp r2, #1
	bls _080A1280
	ldr r1, _080A127C @ =gUnknown_03001060
	movs r0, #1
	ands r0, r2
	adds r1, #0x4c
	adds r0, r0, r1
	ldrb r0, [r0]
	strb r0, [r5, #2]
	ldrb r0, [r3, #6]
	b _080A1292
	.align 2, 0
_080A1278: .4byte gStageData
_080A127C: .4byte gUnknown_03001060
_080A1280:
	ldr r1, _080A12B0 @ =gUnknown_03001060
	ldrb r0, [r3, #6]
	adds r1, #0x4c
	adds r0, r0, r1
	ldrb r0, [r0]
	strb r0, [r5, #2]
	movs r0, #1
	ands r0, r2
	adds r0, #2
_080A1292:
	adds r0, r0, r1
	ldrb r0, [r0]
	strb r0, [r5, #1]
_080A1298:
	ldrb r0, [r5]
	cmp r0, #0
	beq _080A12B8
	ldrb r0, [r5, #2]
	lsls r0, r0, #3
	ldrb r1, [r5, #1]
	adds r0, r0, r1
	lsls r1, r0, #1
	adds r1, r1, r0
	ldr r0, _080A12B4 @ =gUnknown_080D8F95
	b _080A12C6
	.align 2, 0
_080A12B0: .4byte gUnknown_03001060
_080A12B4: .4byte gUnknown_080D8F95
_080A12B8:
	ldrb r0, [r5, #2]
	lsls r0, r0, #3
	ldrb r1, [r5, #1]
	adds r0, r0, r1
	lsls r1, r0, #1
	adds r1, r1, r0
	ldr r0, _080A1300 @ =gUnknown_080D8F1D
_080A12C6:
	adds r7, r1, r0
	ldrb r0, [r7]
	cmp r0, #0
	beq _080A12DA
	ldrb r0, [r7, #1]
	cmp r0, #0
	beq _080A12DA
	ldrb r0, [r7, #2]
	cmp r0, #0
	bne _080A12DE
_080A12DA:
	bl sub_802613C
_080A12DE:
	movs r6, #0
	movs r0, #0x96
	lsls r0, r0, #1
	adds r4, r5, r0
_080A12E6:
	movs r0, #0x78
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x60]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	cmp r6, #0
	beq _080A1304
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	b _080A130A
	.align 2, 0
_080A1300: .4byte gUnknown_080D8F1D
_080A1304:
	ldr r0, [r4, #8]
	ldr r1, _080A1378 @ =0xFFFFFBFF
	ands r0, r1
_080A130A:
	str r0, [r4, #8]
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #1
	bls _080A12E6
	movs r1, #0x82
	lsls r1, r1, #1
	adds r4, r5, r1
	ldrb r0, [r7]
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x60]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	movs r0, #0xd2
	lsls r0, r0, #1
	adds r4, r5, r0
	ldrb r0, [r7, #1]
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x60]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	movs r1, #0xaa
	lsls r1, r1, #1
	adds r4, r5, r1
	ldrb r0, [r7, #2]
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x68]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A1378: .4byte 0xFFFFFBFF

	thumb_func_start sub_80A137C
sub_80A137C: @ 0x080A137C
	ldr r2, _080A13AC @ =gBgScrollRegs
	ldr r1, [r0, #0x74]
	asrs r1, r1, #8
	strh r1, [r2, #4]
	ldr r1, [r0, #0x78]
	asrs r1, r1, #8
	rsbs r1, r1, #0
	strh r1, [r2, #6]
	ldr r1, [r0, #0x7c]
	asrs r1, r1, #8
	strh r1, [r2]
	adds r1, r0, #0
	adds r1, #0x80
	ldr r1, [r1]
	asrs r1, r1, #8
	strh r1, [r2, #2]
	ldr r1, [r0, #0x6c]
	asrs r1, r1, #8
	strh r1, [r2, #8]
	ldr r0, [r0, #0x70]
	asrs r0, r0, #8
	rsbs r0, r0, #0
	strh r0, [r2, #0xa]
	bx lr
	.align 2, 0
_080A13AC: .4byte gBgScrollRegs

	thumb_func_start sub_80A13B0
sub_80A13B0: @ 0x080A13B0
	bx lr
	.align 2, 0

	thumb_func_start sub_80A13B4
sub_80A13B4: @ 0x080A13B4
	push {r4, lr}
	ldr r4, _080A13D0 @ =gCurTask
	ldr r2, [r4]
	ldrh r0, [r2, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r1, r0, r1
	ldr r3, [r1, #0x18]
	ldrb r0, [r3]
	cmp r0, #0x22
	bne _080A13D8
	ldr r0, _080A13D4 @ =sub_80A14AC
	str r0, [r2, #8]
	b _080A13E8
	.align 2, 0
_080A13D0: .4byte gCurTask
_080A13D4: .4byte sub_80A14AC
_080A13D8:
	ldrb r0, [r1, #3]
	cmp r0, #0x25
	bne _080A13E8
	movs r0, #0x26
	strb r0, [r3]
	ldr r1, [r4]
	ldr r0, _080A13F0 @ =sub_80A0D20
	str r0, [r1, #8]
_080A13E8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A13F0: .4byte sub_80A0D20

	thumb_func_start sub_80A13F4
sub_80A13F4: @ 0x080A13F4
	push {r4, lr}
	ldr r4, _080A1410 @ =gCurTask
	ldr r2, [r4]
	ldrh r0, [r2, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r1, r0, r1
	ldr r3, [r1, #0x18]
	ldrb r0, [r3]
	cmp r0, #0x22
	bne _080A1418
	ldr r0, _080A1414 @ =sub_80A14AC
	str r0, [r2, #8]
	b _080A1428
	.align 2, 0
_080A1410: .4byte gCurTask
_080A1414: .4byte sub_80A14AC
_080A1418:
	ldrb r0, [r1, #3]
	cmp r0, #0x25
	bne _080A1428
	movs r0, #0x26
	strb r0, [r3]
	ldr r0, [r4]
	bl TaskDestroy
_080A1428:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80A1430
sub_80A1430: @ 0x080A1430
	push {r4, r5, lr}
	ldr r5, _080A144C @ =gCurTask
	ldr r2, [r5]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, [r4, #0x18]
	ldrb r0, [r0]
	cmp r0, #0x22
	bne _080A1454
	ldr r0, _080A1450 @ =sub_80A14AC
	str r0, [r2, #8]
	b _080A148E
	.align 2, 0
_080A144C: .4byte gCurTask
_080A1450: .4byte sub_80A14AC
_080A1454:
	adds r0, r4, #0
	bl sub_80A19C0
	adds r0, r4, #0
	bl sub_80A1A04
	adds r0, r4, #0
	bl sub_80A10B0
	adds r0, r4, #0
	bl sub_80A1110
	adds r0, r4, #0
	bl sub_80A11B8
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r4, #0x4c]
	ldr r0, [r4, #0x14]
	movs r1, #1
	strb r1, [r0]
	ldr r0, [r4, #0x18]
	strb r1, [r0]
	ldr r0, [r4, #0x18]
	ldrb r0, [r0]
	strb r0, [r4, #3]
	ldr r1, [r5]
	ldr r0, _080A1494 @ =sub_809FEB0
	str r0, [r1, #8]
_080A148E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A1494: .4byte sub_809FEB0

	thumb_func_start sub_80A1498
sub_80A1498: @ 0x080A1498
	push {lr}
	ldr r0, _080A14A8 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
	pop {r0}
	bx r0
	.align 2, 0
_080A14A8: .4byte gCurTask

	thumb_func_start sub_80A14AC
sub_80A14AC: @ 0x080A14AC
	push {r4, lr}
	ldr r4, _080A14DC @ =gCurTask
	ldr r0, [r4]
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	movs r1, #0x9b
	lsls r1, r1, #9
	str r1, [r0, #0x4c]
	str r1, [r0, #0x54]
	movs r3, #0
	movs r2, #0x1d
	strb r2, [r0, #3]
	ldr r1, [r0, #0x18]
	strb r2, [r1]
	strh r3, [r0, #4]
	ldr r1, [r4]
	ldr r0, _080A14E0 @ =sub_80A1498
	str r0, [r1, #8]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A14DC: .4byte gCurTask
_080A14E0: .4byte sub_80A1498

	thumb_func_start sub_80A14E4
sub_80A14E4: @ 0x080A14E4
	push {r4, lr}
	adds r1, r0, #0
	movs r2, #0
	ldr r0, [r1, #0x4c]
	ldr r3, _080A152C @ =0x00012BFF
	cmp r0, r3
	bgt _080A14FE
	movs r4, #0xe0
	lsls r4, r4, #4
	adds r0, r0, r4
	str r0, [r1, #0x4c]
	cmp r0, r3
	ble _080A1506
_080A14FE:
	movs r0, #0x96
	lsls r0, r0, #9
	str r0, [r1, #0x4c]
	movs r2, #1
_080A1506:
	ldr r0, [r1, #0x6c]
	ldr r3, _080A1530 @ =0x000149FF
	cmp r0, r3
	bgt _080A151A
	movs r4, #0xe0
	lsls r4, r4, #4
	adds r0, r0, r4
	str r0, [r1, #0x6c]
	cmp r0, r3
	ble _080A1524
_080A151A:
	ldr r0, _080A1534 @ =0xFFFFC400
	str r0, [r1, #0x6c]
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
_080A1524:
	cmp r2, #2
	beq _080A1538
	movs r0, #0
	b _080A153A
	.align 2, 0
_080A152C: .4byte 0x00012BFF
_080A1530: .4byte 0x000149FF
_080A1534: .4byte 0xFFFFC400
_080A1538:
	movs r0, #1
_080A153A:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_80A1540
sub_80A1540: @ 0x080A1540
	push {r4, lr}
	adds r1, r0, #0
	movs r3, #0
	ldr r0, [r1, #0x4c]
	ldr r2, _080A1584 @ =0xFFFFC400
	cmp r0, r2
	ble _080A1558
	ldr r4, _080A1588 @ =0xFFFFF200
	adds r0, r0, r4
	str r0, [r1, #0x4c]
	cmp r0, r2
	bgt _080A155C
_080A1558:
	str r2, [r1, #0x4c]
	movs r3, #1
_080A155C:
	ldr r0, [r1, #0x6c]
	ldr r2, _080A158C @ =0xFFFFA600
	cmp r0, r2
	ble _080A156E
	ldr r4, _080A1588 @ =0xFFFFF200
	adds r0, r0, r4
	str r0, [r1, #0x6c]
	cmp r0, r2
	bgt _080A157A
_080A156E:
	movs r0, #0x96
	lsls r0, r0, #9
	str r0, [r1, #0x6c]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
_080A157A:
	cmp r3, #2
	beq _080A1590
	movs r0, #0
	b _080A1592
	.align 2, 0
_080A1584: .4byte 0xFFFFC400
_080A1588: .4byte 0xFFFFF200
_080A158C: .4byte 0xFFFFA600
_080A1590:
	movs r0, #1
_080A1592:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_80A1598
sub_80A1598: @ 0x080A1598
	push {r4, lr}
	adds r1, r0, #0
	movs r3, #0
	ldr r0, [r1, #0x4c]
	movs r2, #0xf0
	lsls r2, r2, #7
	cmp r0, r2
	ble _080A15B2
	ldr r4, _080A15DC @ =0xFFFFF200
	adds r0, r0, r4
	str r0, [r1, #0x4c]
	cmp r0, r2
	bgt _080A15B6
_080A15B2:
	str r2, [r1, #0x4c]
	movs r3, #1
_080A15B6:
	movs r0, #0x78
	lsls r2, r0, #8
	ldr r0, [r1, #0x6c]
	cmp r0, r2
	ble _080A15CA
	ldr r4, _080A15DC @ =0xFFFFF200
	adds r0, r0, r4
	str r0, [r1, #0x6c]
	cmp r0, r2
	bgt _080A15D2
_080A15CA:
	str r2, [r1, #0x6c]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
_080A15D2:
	cmp r3, #2
	beq _080A15E0
	movs r0, #0
	b _080A15E2
	.align 2, 0
_080A15DC: .4byte 0xFFFFF200
_080A15E0:
	movs r0, #1
_080A15E2:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_80A15E8
sub_80A15E8: @ 0x080A15E8
	push {r4, lr}
	adds r2, r0, #0
	movs r3, #0
	ldr r0, [r2, #0x4c]
	ldr r1, _080A1630 @ =0x000077FF
	cmp r0, r1
	bgt _080A1602
	movs r4, #0xe0
	lsls r4, r4, #4
	adds r0, r0, r4
	str r0, [r2, #0x4c]
	cmp r0, r1
	ble _080A160A
_080A1602:
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r2, #0x4c]
	movs r3, #1
_080A160A:
	movs r0, #0x78
	lsls r1, r0, #8
	ldr r0, [r2, #0x6c]
	cmp r0, r1
	bge _080A1620
	movs r4, #0xe0
	lsls r4, r4, #4
	adds r0, r0, r4
	str r0, [r2, #0x6c]
	cmp r0, r1
	blt _080A1628
_080A1620:
	str r1, [r2, #0x6c]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
_080A1628:
	cmp r3, #2
	beq _080A1634
	movs r0, #0
	b _080A1636
	.align 2, 0
_080A1630: .4byte 0x000077FF
_080A1634:
	movs r0, #1
_080A1636:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_80A163C
sub_80A163C: @ 0x080A163C
	push {lr}
	adds r1, r0, #0
	ldr r0, [r1, #0x4c]
	movs r2, #0xb4
	lsls r2, r2, #8
	cmp r0, r2
	ble _080A1654
	ldr r3, _080A165C @ =0xFFFFF740
	adds r0, r0, r3
	str r0, [r1, #0x4c]
	cmp r0, #0xb3
	bgt _080A1660
_080A1654:
	str r2, [r1, #0x4c]
	movs r0, #1
	b _080A1662
	.align 2, 0
_080A165C: .4byte 0xFFFFF740
_080A1660:
	movs r0, #0
_080A1662:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80A1668
sub_80A1668: @ 0x080A1668
	push {lr}
	adds r1, r0, #0
	ldr r0, [r1, #0x54]
	movs r2, #0xf0
	lsls r2, r2, #6
	cmp r0, r2
	ble _080A1680
	ldr r3, _080A1688 @ =0xFFFFF740
	adds r0, r0, r3
	str r0, [r1, #0x54]
	cmp r0, #0x3b
	bgt _080A168C
_080A1680:
	str r2, [r1, #0x54]
	movs r0, #1
	b _080A168E
	.align 2, 0
_080A1688: .4byte 0xFFFFF740
_080A168C:
	movs r0, #0
_080A168E:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80A1694
sub_80A1694: @ 0x080A1694
	push {r4, lr}
	adds r1, r0, #0
	movs r2, #0
	ldr r0, [r1, #0x4c]
	ldr r3, _080A16E0 @ =0x00012BFF
	cmp r0, r3
	bgt _080A16AE
	movs r4, #0x8c
	lsls r4, r4, #4
	adds r0, r0, r4
	str r0, [r1, #0x4c]
	cmp r0, r3
	ble _080A16B6
_080A16AE:
	movs r0, #0x96
	lsls r0, r0, #9
	str r0, [r1, #0x4c]
	movs r2, #1
_080A16B6:
	ldr r0, [r1, #0x6c]
	ldr r3, _080A16E0 @ =0x00012BFF
	cmp r0, r3
	bgt _080A16CA
	movs r4, #0x84
	lsls r4, r4, #4
	adds r0, r0, r4
	str r0, [r1, #0x6c]
	cmp r0, r3
	ble _080A16D6
_080A16CA:
	movs r0, #0x96
	lsls r0, r0, #9
	str r0, [r1, #0x6c]
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
_080A16D6:
	cmp r2, #2
	beq _080A16E4
	movs r0, #0
	b _080A16E6
	.align 2, 0
_080A16E0: .4byte 0x00012BFF
_080A16E4:
	movs r0, #1
_080A16E6:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_80A16EC
sub_80A16EC: @ 0x080A16EC
	push {r4, lr}
	adds r1, r0, #0
	movs r3, #0
	ldr r0, [r1, #0x4c]
	movs r2, #0xb4
	lsls r2, r2, #8
	cmp r0, r2
	ble _080A1706
	ldr r4, _080A1730 @ =0xFFFFF740
	adds r0, r0, r4
	str r0, [r1, #0x4c]
	cmp r0, r2
	bgt _080A170A
_080A1706:
	str r2, [r1, #0x4c]
	movs r3, #1
_080A170A:
	ldr r0, [r1, #0x6c]
	movs r2, #0xb4
	lsls r2, r2, #8
	cmp r0, r2
	ble _080A171E
	ldr r4, _080A1734 @ =0xFFFFF7C0
	adds r0, r0, r4
	str r0, [r1, #0x6c]
	cmp r0, r2
	bgt _080A1726
_080A171E:
	str r2, [r1, #0x6c]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
_080A1726:
	cmp r3, #2
	beq _080A1738
	movs r0, #0
	b _080A173A
	.align 2, 0
_080A1730: .4byte 0xFFFFF740
_080A1734: .4byte 0xFFFFF7C0
_080A1738:
	movs r0, #1
_080A173A:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_80A1740
sub_80A1740: @ 0x080A1740
	push {lr}
	adds r2, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x10
	ldr r0, [r2, #0x54]
	cmp r0, r1
	bge _080A175A
	movs r3, #0xc0
	lsls r3, r3, #2
	adds r0, r0, r3
	str r0, [r2, #0x54]
	cmp r0, r1
	ble _080A1760
_080A175A:
	str r1, [r2, #0x54]
	movs r0, #1
	b _080A1762
_080A1760:
	movs r0, #0
_080A1762:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80A1768
sub_80A1768: @ 0x080A1768
	push {lr}
	adds r2, r0, #0
	ldr r1, [r2, #0x4c]
	movs r3, #0x96
	lsls r3, r3, #8
	cmp r1, r3
	ble _080A1782
	ldr r0, _080A1788 @ =0xFFFFFD00
	adds r1, r1, r0
	str r1, [r2, #0x4c]
	ldr r0, _080A178C @ =0x000095FF
	cmp r1, r0
	bgt _080A1790
_080A1782:
	str r3, [r2, #0x4c]
	movs r0, #1
	b _080A1792
	.align 2, 0
_080A1788: .4byte 0xFFFFFD00
_080A178C: .4byte 0x000095FF
_080A1790:
	movs r0, #0
_080A1792:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80A1798
sub_80A1798: @ 0x080A1798
	push {r4, lr}
	adds r1, r0, #0
	movs r3, #0
	ldr r0, [r1, #0x74]
	ldr r2, _080A17D4 @ =0x000104FF
	cmp r0, r2
	bgt _080A17B2
	movs r4, #0xc0
	lsls r4, r4, #3
	adds r0, r0, r4
	str r0, [r1, #0x74]
	cmp r0, r2
	ble _080A17B8
_080A17B2:
	ldr r0, _080A17D8 @ =0x00010500
	str r0, [r1, #0x74]
	movs r3, #1
_080A17B8:
	ldr r2, [r1, #0x7c]
	ldr r0, _080A17DC @ =0x000077FF
	cmp r2, r0
	bgt _080A17E0
	movs r4, #0xfc
	lsls r4, r4, #3
	adds r0, r2, r4
	str r0, [r1, #0x7c]
	movs r2, #0xf0
	lsls r2, r2, #7
	cmp r0, r2
	ble _080A17EC
	str r2, [r1, #0x7c]
	b _080A17E6
	.align 2, 0
_080A17D4: .4byte 0x000104FF
_080A17D8: .4byte 0x00010500
_080A17DC: .4byte 0x000077FF
_080A17E0:
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r1, #0x7c]
_080A17E6:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
_080A17EC:
	cmp r3, #2
	beq _080A17F4
	movs r0, #0
	b _080A17F6
_080A17F4:
	movs r0, #1
_080A17F6:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_80A17FC
sub_80A17FC: @ 0x080A17FC
	push {lr}
	adds r2, r0, #0
	ldr r1, [r2, #0x6c]
	movs r3, #0xb4
	lsls r3, r3, #8
	cmp r1, r3
	ble _080A1816
	ldr r0, _080A181C @ =0xFFFFF7C0
	adds r1, r1, r0
	str r1, [r2, #0x6c]
	ldr r0, _080A1820 @ =0x0000B3FF
	cmp r1, r0
	bgt _080A1824
_080A1816:
	str r3, [r2, #0x6c]
	movs r0, #1
	b _080A1826
	.align 2, 0
_080A181C: .4byte 0xFFFFF7C0
_080A1820: .4byte 0x0000B3FF
_080A1824:
	movs r0, #0
_080A1826:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80A182C
sub_80A182C: @ 0x080A182C
	push {lr}
	adds r1, r0, #0
	ldr r2, [r1, #0x6c]
	ldr r3, _080A1850 @ =0x0000C8FF
	cmp r2, r3
	bgt _080A1844
	movs r0, #3
	lsls r0, r0, #8
	adds r0, r2, r0
	str r0, [r1, #0x6c]
	cmp r0, r3
	ble _080A1854
_080A1844:
	movs r0, #0xc9
	lsls r0, r0, #8
	str r0, [r1, #0x6c]
	movs r0, #1
	b _080A1856
	.align 2, 0
_080A1850: .4byte 0x0000C8FF
_080A1854:
	movs r0, #0
_080A1856:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80A185C
sub_80A185C: @ 0x080A185C
	push {lr}
	adds r1, r0, #0
	ldr r0, [r1, #0x74]
	movs r2, #0xc9
	lsls r2, r2, #8
	cmp r0, r2
	ble _080A1874
	ldr r3, _080A187C @ =0xFFFFFD00
	adds r0, r0, r3
	str r0, [r1, #0x74]
	cmp r0, r2
	bgt _080A1880
_080A1874:
	str r2, [r1, #0x74]
	movs r0, #1
	b _080A1882
	.align 2, 0
_080A187C: .4byte 0xFFFFFD00
_080A1880:
	movs r0, #0
_080A1882:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80A1888
sub_80A1888: @ 0x080A1888
	push {lr}
	adds r2, r0, #0
	ldr r1, [r2, #0x60]
	movs r3, #0x91
	lsls r3, r3, #8
	cmp r1, r3
	bgt _080A189C
	str r3, [r2, #0x60]
	movs r0, #1
	b _080A18AC
_080A189C:
	ldr r0, _080A18B0 @ =0xFFFFFA00
	adds r1, r1, r0
	str r1, [r2, #0x60]
	ldr r0, _080A18B4 @ =0x000090FF
	cmp r1, r0
	bgt _080A18AA
	str r3, [r2, #0x60]
_080A18AA:
	movs r0, #0
_080A18AC:
	pop {r1}
	bx r1
	.align 2, 0
_080A18B0: .4byte 0xFFFFFA00
_080A18B4: .4byte 0x000090FF

	thumb_func_start sub_80A18B8
sub_80A18B8: @ 0x080A18B8
	push {lr}
	adds r1, r0, #0
	ldr r2, [r1, #0x60]
	ldr r0, _080A18CC @ =0x0000B3FF
	cmp r2, r0
	ble _080A18D0
	adds r0, #1
	str r0, [r1, #0x60]
	movs r0, #1
	b _080A18DA
	.align 2, 0
_080A18CC: .4byte 0x0000B3FF
_080A18D0:
	movs r3, #0xc0
	lsls r3, r3, #3
	adds r0, r2, r3
	str r0, [r1, #0x60]
	movs r0, #0
_080A18DA:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80A18E0
sub_80A18E0: @ 0x080A18E0
	push {lr}
	adds r1, r0, #0
	ldr r2, [r1, #0x44]
	ldr r0, _080A18F4 @ =0x000004FF
	cmp r2, r0
	bgt _080A18F8
	adds r0, r2, #0
	adds r0, #0x40
	b _080A18FA
	.align 2, 0
_080A18F4: .4byte 0x000004FF
_080A18F8:
	movs r0, #0
_080A18FA:
	str r0, [r1, #0x44]
	movs r0, #0xb4
	lsls r0, r0, #7
	str r0, [r1, #0x48]
	movs r0, #1
	pop {r1}
	bx r1

	thumb_func_start sub_80A1908
sub_80A1908: @ 0x080A1908
	push {lr}
	adds r2, r0, #0
	ldr r1, [r2, #0x68]
	movs r3, #0x91
	lsls r3, r3, #8
	cmp r1, r3
	ble _080A1922
	ldr r0, _080A1928 @ =0xFFFFFA00
	adds r1, r1, r0
	str r1, [r2, #0x68]
	ldr r0, _080A192C @ =0x000090FF
	cmp r1, r0
	bgt _080A1930
_080A1922:
	str r3, [r2, #0x68]
	movs r0, #1
	b _080A1932
	.align 2, 0
_080A1928: .4byte 0xFFFFFA00
_080A192C: .4byte 0x000090FF
_080A1930:
	movs r0, #0
_080A1932:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80A1938
sub_80A1938: @ 0x080A1938
	push {lr}
	adds r1, r0, #0
	ldr r0, [r1, #0x68]
	ldr r2, _080A195C @ =0x0000B3FF
	cmp r0, r2
	bgt _080A1950
	movs r3, #0xc0
	lsls r3, r3, #3
	adds r0, r0, r3
	str r0, [r1, #0x68]
	cmp r0, r2
	ble _080A1960
_080A1950:
	movs r0, #0xb4
	lsls r0, r0, #8
	str r0, [r1, #0x68]
	movs r0, #1
	b _080A1962
	.align 2, 0
_080A195C: .4byte 0x0000B3FF
_080A1960:
	movs r0, #0
_080A1962:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80A1968
sub_80A1968: @ 0x080A1968
	push {r4, lr}
	adds r1, r0, #0
	movs r3, #0
	ldr r0, [r1, #0x5c]
	ldr r2, _080A19B0 @ =0x000077FF
	cmp r0, r2
	bgt _080A1982
	movs r4, #0xc0
	lsls r4, r4, #2
	adds r0, r0, r4
	str r0, [r1, #0x5c]
	cmp r0, r2
	ble _080A198A
_080A1982:
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r1, #0x5c]
	movs r3, #1
_080A198A:
	ldr r0, [r1, #0x64]
	movs r2, #0xf0
	lsls r2, r2, #7
	cmp r0, r2
	ble _080A199E
	ldr r4, _080A19B4 @ =0xFFFFFD00
	adds r0, r0, r4
	str r0, [r1, #0x64]
	cmp r0, r2
	bgt _080A19A6
_080A199E:
	str r2, [r1, #0x64]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
_080A19A6:
	cmp r3, #2
	beq _080A19B8
	movs r0, #0
	b _080A19BA
	.align 2, 0
_080A19B0: .4byte 0x000077FF
_080A19B4: .4byte 0xFFFFFD00
_080A19B8:
	movs r0, #1
_080A19BA:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_80A19C0
sub_80A19C0: @ 0x080A19C0
	push {r4, lr}
	sub sp, #0x10
	adds r4, r0, #0
	ldrh r0, [r4, #0xa]
	adds r0, #0xc0
	strh r0, [r4, #0xa]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x16
	ldrh r1, [r4, #0xc]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x14
	movs r2, #0x80
	lsls r2, r2, #1
	movs r3, #0x40
	str r3, [sp]
	ldr r3, [r4, #0x6c]
	lsls r3, r3, #8
	asrs r3, r3, #0x10
	str r3, [sp, #4]
	ldr r3, [r4, #0x70]
	lsls r3, r3, #8
	asrs r3, r3, #0x10
	str r3, [sp, #8]
	ldr r3, _080A1A00 @ =gBgAffineRegs
	str r3, [sp, #0xc]
	movs r3, #0x40
	bl sa2__sub_8003EE4
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A1A00: .4byte gBgAffineRegs

	thumb_func_start sub_80A1A04
sub_80A1A04: @ 0x080A1A04
	ldr r2, _080A1A24 @ =gBgScrollRegs
	ldr r1, [r0, #0x74]
	asrs r1, r1, #8
	strh r1, [r2, #4]
	ldr r1, [r0, #0x78]
	asrs r1, r1, #8
	rsbs r1, r1, #0
	strh r1, [r2, #6]
	ldr r1, [r0, #0x7c]
	asrs r1, r1, #8
	strh r1, [r2]
	adds r0, #0x80
	ldr r0, [r0]
	asrs r0, r0, #8
	strh r0, [r2, #2]
	bx lr
	.align 2, 0
_080A1A24: .4byte gBgScrollRegs

	thumb_func_start sub_80A1A28
sub_80A1A28: @ 0x080A1A28
	push {lr}
	adds r1, r0, #0
	movs r0, #0xe6
	lsls r0, r0, #1
	adds r2, r1, r0
	ldr r0, [r1, #0x18]
	ldrb r0, [r0]
	ldr r0, [r1, #0x4c]
	asrs r0, r0, #8
	strh r0, [r2, #0x10]
	ldr r0, [r1, #0x50]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	adds r0, r2, #0
	bl DisplaySprite
	pop {r0}
	bx r0

	thumb_func_start sub_80A1A4C
sub_80A1A4C: @ 0x080A1A4C
	push {r4, r5, r6, lr}
	sub sp, #8
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	ldr r1, _080A1B14 @ =gDispCnt
	movs r2, #0x9a
	lsls r2, r2, #5
	adds r0, r2, #0
	strh r0, [r1]
	ldr r0, _080A1B18 @ =sub_80A1BEC
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r1, _080A1B1C @ =sub_80A2098
	str r1, [sp]
	movs r1, #0xbc
	movs r3, #0
	bl TaskCreate
	movs r3, #0
	str r3, [sp, #4]
	ldr r4, _080A1B20 @ =0x040000D4
	add r1, sp, #4
	str r1, [r4]
	ldr r1, _080A1B24 @ =gBgCntRegs
	ldrh r2, [r1, #4]
	movs r1, #0xc
	ands r1, r2
	lsls r1, r1, #0xc
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r1, r2
	str r1, [r4, #4]
	ldr r1, _080A1B28 @ =0x85000010
	str r1, [r4, #8]
	ldr r1, [r4, #8]
	ldr r5, _080A1B2C @ =gUnknown_03006230
	strb r3, [r5, #2]
	ldr r1, _080A1B30 @ =gUnknown_03003590
	strb r3, [r1, #8]
	strb r3, [r1, #9]
	movs r2, #0xff
	strb r2, [r1, #0xa]
	movs r4, #0x40
	strb r4, [r1, #0xb]
	strb r3, [r5, #1]
	strb r3, [r1, #4]
	strb r3, [r1, #5]
	movs r2, #1
	rsbs r2, r2, #0
	strb r2, [r1, #6]
	strb r4, [r1, #7]
	strb r3, [r5]
	strb r3, [r1]
	strb r3, [r1, #1]
	strb r2, [r1, #2]
	strb r4, [r1, #3]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, _080A1B34 @ =gSaveGame
	ldr r2, _080A1B38 @ =0x00000366
	adds r0, r0, r2
	ldrb r0, [r0]
	strb r0, [r4, #1]
	strb r6, [r4, #2]
	strb r3, [r4, #3]
	strb r3, [r4]
	str r3, [r4, #0xc]
	str r3, [r4, #0x10]
	movs r0, #1
	strh r0, [r4, #6]
	strh r3, [r4, #8]
	strh r3, [r4, #4]
	adds r0, r4, #0
	bl sub_80A1B68
	ldrb r0, [r4, #2]
	subs r0, #2
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _080A1B3C
	adds r0, r4, #0
	movs r1, #5
	bl sub_80A1FB0
	adds r0, r4, #0
	movs r1, #1
	bl sub_80A2024
	bl sub_80260F0
	bl m4aMPlayAllStop
	movs r0, #0x64
	bl m4aSongNumStart
	b _080A1B60
	.align 2, 0
_080A1B14: .4byte gDispCnt
_080A1B18: .4byte sub_80A1BEC
_080A1B1C: .4byte sub_80A2098
_080A1B20: .4byte 0x040000D4
_080A1B24: .4byte gBgCntRegs
_080A1B28: .4byte 0x85000010
_080A1B2C: .4byte gUnknown_03006230
_080A1B30: .4byte gUnknown_03003590
_080A1B34: .4byte gSaveGame
_080A1B38: .4byte 0x00000366
_080A1B3C:
	adds r0, r4, #0
	movs r1, #3
	bl sub_80A1FB0
	adds r0, r4, #0
	movs r1, #0
	bl sub_80A2024
	cmp r6, #0
	bne _080A1B56
	bl sub_8024040
	b _080A1B5A
_080A1B56:
	bl sub_80258D4
_080A1B5A:
	movs r0, #0x44
	bl m4aSongNumStart
_080A1B60:
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_80A1B68
sub_80A1B68: @ 0x080A1B68
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, _080A1BE4 @ =0x06010000
	mov r8, r0
	ldr r6, _080A1BE8 @ =gUnknown_080D6898
	ldrb r0, [r4, #1]
	lsls r0, r0, #3
	adds r1, r6, #4
	adds r0, r0, r1
	ldr r2, [r0]
	lsls r2, r2, #0x1d
	movs r5, #0
	str r5, [sp]
	lsrs r2, r2, #0x1a
	movs r0, #0x80
	lsls r0, r0, #0x11
	orrs r2, r0
	mov r0, sp
	mov r1, r8
	bl CpuFastSet
	adds r0, r4, #0
	adds r0, #0x94
	mov r1, r8
	str r1, [r0]
	ldrb r1, [r4, #1]
	lsls r1, r1, #3
	adds r1, r1, r6
	ldrh r1, [r1]
	movs r2, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r4, #1]
	lsls r1, r1, #3
	adds r1, r1, r6
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	movs r1, #0x78
	strh r1, [r0, #0x10]
	movs r1, #0x8c
	strh r1, [r0, #0x12]
	strh r5, [r0, #0x14]
	strh r5, [r0, #0xe]
	strh r5, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	strb r2, [r0, #0x1f]
	str r5, [r0, #8]
	subs r1, #0x11
	str r1, [r0, #0x20]
	bl UpdateSpriteAnimation
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A1BE4: .4byte 0x06010000
_080A1BE8: .4byte gUnknown_080D6898

	thumb_func_start sub_80A1BEC
sub_80A1BEC: @ 0x080A1BEC
	push {r4, lr}
	ldr r0, _080A1C54 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldrh r0, [r4, #6]
	cmp r0, #0
	beq _080A1C3C
	ldr r2, _080A1C58 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080A1C5C @ =gWinRegs
	movs r3, #0
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	ldrh r2, [r1, #8]
	movs r0, #0x3f
	orrs r0, r2
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	orrs r0, r2
	strh r0, [r1, #0xa]
	ldr r1, _080A1C60 @ =gBldRegs
	ldr r0, _080A1C64 @ =0x00003FFF
	strh r0, [r1]
	movs r0, #0x10
	strh r0, [r1, #4]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r4, #8]
	strh r3, [r4, #6]
_080A1C3C:
	ldrb r0, [r4, #2]
	cmp r0, #1
	bhi _080A1C92
	cmp r0, #0
	bne _080A1C72
	ldr r0, _080A1C68 @ =gStageData
	ldrb r0, [r0, #6]
	cmp r0, #0
	bne _080A1C6C
	bl sub_8023A88
	b _080A1C88
	.align 2, 0
_080A1C54: .4byte gCurTask
_080A1C58: .4byte gDispCnt
_080A1C5C: .4byte gWinRegs
_080A1C60: .4byte gBldRegs
_080A1C64: .4byte 0x00003FFF
_080A1C68: .4byte gStageData
_080A1C6C:
	bl sub_8023C5C
	b _080A1C88
_080A1C72:
	ldr r0, _080A1C80 @ =gStageData
	ldrb r0, [r0, #6]
	cmp r0, #0
	bne _080A1C84
	bl sub_802440C
	b _080A1C88
	.align 2, 0
_080A1C80: .4byte gStageData
_080A1C84:
	bl sub_8024584
_080A1C88:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r0, r0, #0x10
	cmp r0, #0
	blt _080A1CC6
_080A1C92:
	ldr r2, _080A1CAC @ =gBldRegs
	ldrh r1, [r2, #4]
	cmp r1, #0
	beq _080A1CB4
	ldrh r0, [r4, #8]
	lsrs r0, r0, #8
	strh r0, [r2, #4]
	ldr r1, _080A1CB0 @ =0xFFFFFF00
	adds r0, r1, #0
	ldrh r3, [r4, #8]
	adds r0, r0, r3
	strh r0, [r4, #8]
	b _080A1CD4
	.align 2, 0
_080A1CAC: .4byte gBldRegs
_080A1CB0: .4byte 0xFFFFFF00
_080A1CB4:
	movs r0, #1
	strh r0, [r4, #6]
	strh r1, [r2, #4]
	ldrb r0, [r4, #2]
	subs r0, #2
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _080A1CCC
_080A1CC6:
	bl sub_802613C
	b _080A1CD4
_080A1CCC:
	ldr r0, _080A1CDC @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A1CE0 @ =sub_80A1DC8
	str r0, [r1, #8]
_080A1CD4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A1CDC: .4byte gCurTask
_080A1CE0: .4byte sub_80A1DC8

	thumb_func_start sub_80A1CE4
sub_80A1CE4: @ 0x080A1CE4
	push {r4, lr}
	ldr r0, _080A1D40 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldrh r0, [r4, #6]
	cmp r0, #0
	beq _080A1D2C
	ldr r2, _080A1D44 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080A1D48 @ =gWinRegs
	movs r3, #0
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	ldrh r2, [r1, #8]
	movs r0, #0x3f
	orrs r0, r2
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	orrs r0, r2
	strh r0, [r1, #0xa]
	ldr r1, _080A1D4C @ =gBldRegs
	ldr r0, _080A1D50 @ =0x00003FFF
	strh r0, [r1]
	strh r3, [r4, #6]
	strh r3, [r4, #8]
_080A1D2C:
	ldrb r0, [r4, #3]
	cmp r0, #1
	beq _080A1D5C
	ldr r0, _080A1D54 @ =gStageData
	ldrb r0, [r0, #6]
	cmp r0, #0
	bne _080A1D58
	bl sub_8023BB0
	b _080A1D5C
	.align 2, 0
_080A1D40: .4byte gCurTask
_080A1D44: .4byte gDispCnt
_080A1D48: .4byte gWinRegs
_080A1D4C: .4byte gBldRegs
_080A1D50: .4byte 0x00003FFF
_080A1D54: .4byte gStageData
_080A1D58:
	bl sub_8023D60
_080A1D5C:
	ldr r1, _080A1D78 @ =gBldRegs
	ldrh r0, [r1, #4]
	cmp r0, #0xf
	bhi _080A1D7C
	ldrh r0, [r4, #8]
	lsrs r0, r0, #8
	strh r0, [r1, #4]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r1, #0
	ldrh r3, [r4, #8]
	adds r0, r0, r3
	strh r0, [r4, #8]
	b _080A1DBC
	.align 2, 0
_080A1D78: .4byte gBldRegs
_080A1D7C:
	movs r0, #0x10
	strh r0, [r1, #4]
	ldrb r0, [r4, #3]
	cmp r0, #2
	bne _080A1D8E
	movs r0, #1
	bl sub_8097C54
	b _080A1DB4
_080A1D8E:
	ldrb r1, [r4, #2]
	cmp r1, #2
	bne _080A1D9E
	movs r0, #1
	movs r1, #0
	bl sub_808723C
	b _080A1DB4
_080A1D9E:
	cmp r1, #3
	bne _080A1DAC
	movs r0, #0
	movs r1, #4
	bl sub_808723C
	b _080A1DB4
_080A1DAC:
	movs r0, #0
	movs r1, #0
	bl sub_808723C
_080A1DB4:
	ldr r0, _080A1DC4 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
_080A1DBC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A1DC4: .4byte gCurTask

	thumb_func_start sub_80A1DC8
sub_80A1DC8: @ 0x080A1DC8
	push {r4, r5, r6, lr}
	ldr r0, _080A1DF0 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	ldrb r0, [r5, #2]
	cmp r0, #0
	bne _080A1E04
	ldr r0, _080A1DF4 @ =gStageData
	ldrb r0, [r0, #6]
	cmp r0, #0
	bne _080A1DFE
	ldrb r0, [r5, #3]
	cmp r0, #2
	bne _080A1DF8
	bl sub_8023BB0
	b _080A1E26
	.align 2, 0
_080A1DF0: .4byte gCurTask
_080A1DF4: .4byte gStageData
_080A1DF8:
	bl sub_8023A88
	b _080A1E26
_080A1DFE:
	bl sub_8023C5C
	b _080A1E26
_080A1E04:
	ldr r0, _080A1E18 @ =gStageData
	ldrb r0, [r0, #6]
	cmp r0, #0
	bne _080A1E22
	ldrb r0, [r5, #3]
	cmp r0, #2
	bne _080A1E1C
	bl sub_80244E4
	b _080A1E26
	.align 2, 0
_080A1E18: .4byte gStageData
_080A1E1C:
	bl sub_802440C
	b _080A1E26
_080A1E22:
	bl sub_8024584
_080A1E26:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	adds r6, r0, #0
	cmp r1, #0
	bge _080A1E3A
	bl sub_802613C
	b _080A1EFE
_080A1E3A:
	ldrb r2, [r5, #2]
	cmp r2, #0
	bne _080A1E48
	movs r0, #0xf
	ands r0, r1
	cmp r0, #3
	beq _080A1E5C
_080A1E48:
	cmp r2, #1
	bne _080A1EDC
	movs r0, #0xf
	ands r0, r1
	cmp r0, #3
	beq _080A1E5C
	cmp r0, #7
	beq _080A1E5C
	cmp r0, #0xf
	bne _080A1EDC
_080A1E5C:
	ldr r0, _080A1E98 @ =gStageData
	ldrb r4, [r0, #6]
	cmp r4, #0
	bne _080A1EA8
	adds r0, r5, #0
	bl sub_80A208C
	ldr r0, _080A1E9C @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080A1EA8
	adds r0, r5, #0
	movs r1, #4
	bl sub_80A1FB0
	adds r0, r5, #0
	movs r1, #2
	bl sub_80A2024
	movs r0, #1
	strb r0, [r5]
	movs r0, #2
	strb r0, [r5, #3]
	strh r4, [r5, #4]
	ldr r0, _080A1EA0 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A1EA4 @ =sub_80A1F10
	b _080A1EFC
	.align 2, 0
_080A1E98: .4byte gStageData
_080A1E9C: .4byte gPressedKeys
_080A1EA0: .4byte gCurTask
_080A1EA4: .4byte sub_80A1F10
_080A1EA8:
	asrs r0, r6, #0x10
	movs r1, #0x10
	ands r0, r1
	cmp r0, #0
	beq _080A1EDC
	movs r4, #0
	movs r0, #2
	strb r0, [r5, #3]
	adds r0, r5, #0
	movs r1, #4
	bl sub_80A1FB0
	adds r0, r5, #0
	movs r1, #2
	bl sub_80A2024
	strh r4, [r5, #4]
	ldr r0, _080A1ED4 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A1ED8 @ =sub_80A1F10
	b _080A1EFC
	.align 2, 0
_080A1ED4: .4byte gCurTask
_080A1ED8: .4byte sub_80A1F10
_080A1EDC:
	ldr r0, _080A1F04 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080A1EFE
	bl sub_80260F0
	movs r0, #0x6b
	bl m4aSongNumStart
	movs r0, #1
	strb r0, [r5, #3]
	ldr r0, _080A1F08 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A1F0C @ =sub_80A1CE4
_080A1EFC:
	str r0, [r1, #8]
_080A1EFE:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A1F04: .4byte gPressedKeys
_080A1F08: .4byte gCurTask
_080A1F0C: .4byte sub_80A1CE4

	thumb_func_start sub_80A1F10
sub_80A1F10: @ 0x080A1F10
	push {r4, lr}
	ldr r0, _080A1F38 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldrb r0, [r4, #2]
	cmp r0, #0
	bne _080A1F4C
	ldr r0, _080A1F3C @ =gStageData
	ldrb r0, [r0, #6]
	cmp r0, #0
	bne _080A1F46
	ldrb r0, [r4, #3]
	cmp r0, #2
	bne _080A1F40
	bl sub_8023BB0
	b _080A1F6E
	.align 2, 0
_080A1F38: .4byte gCurTask
_080A1F3C: .4byte gStageData
_080A1F40:
	bl sub_8023A88
	b _080A1F6E
_080A1F46:
	bl sub_8023C5C
	b _080A1F6E
_080A1F4C:
	ldr r0, _080A1F60 @ =gStageData
	ldrb r0, [r0, #6]
	cmp r0, #0
	bne _080A1F6A
	ldrb r0, [r4, #3]
	cmp r0, #2
	bne _080A1F64
	bl sub_80244E4
	b _080A1F6E
	.align 2, 0
_080A1F60: .4byte gStageData
_080A1F64:
	bl sub_802440C
	b _080A1F6E
_080A1F6A:
	bl sub_8024584
_080A1F6E:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _080A1F7E
	bl sub_802613C
	b _080A1FA0
_080A1F7E:
	ldrh r0, [r4, #4]
	cmp r0, #0
	bne _080A1F8A
	movs r0, #0x63
	bl m4aSongNumStart
_080A1F8A:
	ldrh r0, [r4, #4]
	adds r0, #1
	strh r0, [r4, #4]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x77
	bls _080A1FA0
	ldr r0, _080A1FA8 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A1FAC @ =sub_80A1CE4
	str r0, [r1, #8]
_080A1FA0:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A1FA8: .4byte gCurTask
_080A1FAC: .4byte sub_80A1CE4

	thumb_func_start sub_80A1FB0
sub_80A1FB0: @ 0x080A1FB0
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	ldr r2, _080A200C @ =gBgCntRegs
	movs r6, #0
	movs r3, #0
	ldr r0, _080A2010 @ =0x00000E04
	strh r0, [r2, #2]
	ldr r0, _080A2014 @ =gBgScrollRegs
	strh r3, [r0, #4]
	strh r3, [r0, #6]
	adds r0, r5, #0
	adds r0, #0x54
	ldr r2, _080A2018 @ =0x06004000
	str r2, [r0, #4]
	strh r3, [r0, #0xa]
	ldr r2, _080A201C @ =0x06007000
	str r2, [r0, #0xc]
	strh r3, [r0, #0x18]
	strh r3, [r0, #0x1a]
	ldr r4, _080A2020 @ =gUnknown_080D9908
	ldrb r2, [r5, #1]
	lsls r2, r2, #2
	adds r1, r1, r2
	lsls r1, r1, #1
	adds r1, r1, r4
	ldrh r1, [r1]
	strh r1, [r0, #0x1c]
	strh r3, [r0, #0x1e]
	strh r3, [r0, #0x20]
	strh r3, [r0, #0x22]
	strh r3, [r0, #0x24]
	movs r1, #0x20
	strh r1, [r0, #0x26]
	strh r1, [r0, #0x28]
	adds r5, #0x7e
	strb r6, [r5]
	movs r1, #1
	strh r1, [r0, #0x2e]
	bl DrawBackground
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A200C: .4byte gBgCntRegs
_080A2010: .4byte 0x00000E04
_080A2014: .4byte gBgScrollRegs
_080A2018: .4byte 0x06004000
_080A201C: .4byte 0x06007000
_080A2020: .4byte gUnknown_080D9908

	thumb_func_start sub_80A2024
sub_80A2024: @ 0x080A2024
	push {r4, r5, lr}
	adds r4, r0, #0
	lsls r1, r1, #0x18
	ldr r2, _080A2078 @ =gBgCntRegs
	movs r5, #0
	movs r3, #0
	ldr r0, _080A207C @ =0x00000601
	strh r0, [r2]
	ldr r0, _080A2080 @ =gBgScrollRegs
	strh r3, [r0]
	strh r3, [r0, #2]
	adds r0, r4, #0
	adds r0, #0x14
	movs r2, #0xc0
	lsls r2, r2, #0x13
	str r2, [r0, #4]
	strh r3, [r0, #0xa]
	ldr r2, _080A2084 @ =0x06003000
	str r2, [r0, #0xc]
	strh r3, [r0, #0x18]
	strh r3, [r0, #0x1a]
	ldr r2, _080A2088 @ =gUnknown_080D9908
	lsrs r1, r1, #0x17
	adds r1, r1, r2
	ldrh r1, [r1]
	strh r1, [r0, #0x1c]
	strh r3, [r0, #0x1e]
	strh r3, [r0, #0x20]
	strh r3, [r0, #0x22]
	strh r3, [r0, #0x24]
	movs r1, #0x20
	strh r1, [r0, #0x26]
	strh r1, [r0, #0x28]
	adds r4, #0x3e
	strb r5, [r4]
	strh r3, [r0, #0x2e]
	bl DrawBackground
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A2078: .4byte gBgCntRegs
_080A207C: .4byte 0x00000601
_080A2080: .4byte gBgScrollRegs
_080A2084: .4byte 0x06003000
_080A2088: .4byte gUnknown_080D9908

	thumb_func_start sub_80A208C
sub_80A208C: @ 0x080A208C
	push {lr}
	adds r0, #0x94
	bl DisplaySprite
	pop {r0}
	bx r0

	thumb_func_start sub_80A2098
sub_80A2098: @ 0x080A2098
	bx lr
	.align 2, 0

	thumb_func_start sub_80A209C
sub_80A209C: @ 0x080A209C
	push {r4, lr}
	sub sp, #4
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	ldr r0, _080A20D4 @ =sub_80A2534
	movs r1, #0xb8
	lsls r1, r1, #1
	movs r2, #0x80
	lsls r2, r2, #5
	ldr r3, _080A20D8 @ =sub_80A2CFC
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r1, r1, r0
	mov ip, r1
	lsls r0, r4, #0x10
	ldr r1, _080A20DC @ =0xFFFF0000
	adds r0, r0, r1
	lsrs r0, r0, #0x10
	cmp r0, #1
	bhi _080A20E4
	ldr r1, _080A20E0 @ =gStageData
	movs r0, #0
	b _080A20E8
	.align 2, 0
_080A20D4: .4byte sub_80A2534
_080A20D8: .4byte sub_80A2CFC
_080A20DC: .4byte 0xFFFF0000
_080A20E0: .4byte gStageData
_080A20E4:
	ldr r1, _080A216C @ =gStageData
	movs r0, #1
_080A20E8:
	strb r0, [r1, #7]
	movs r1, #0x9a
	lsls r1, r1, #1
	add r1, ip
	movs r2, #0
	ldr r0, _080A2170 @ =0x0000FF10
	strh r0, [r1]
	movs r1, #0x9b
	lsls r1, r1, #1
	add r1, ip
	movs r0, #0x8c
	strh r0, [r1]
	adds r0, #0xac
	add r0, ip
	strh r2, [r0]
	movs r0, #0x9d
	lsls r0, r0, #1
	add r0, ip
	strh r2, [r0]
	movs r0, #0x9e
	lsls r0, r0, #1
	add r0, ip
	strh r2, [r0]
	movs r0, #0x9f
	lsls r0, r0, #1
	add r0, ip
	strh r2, [r0]
	movs r0, #0xa0
	lsls r0, r0, #1
	add r0, ip
	strh r2, [r0]
	movs r1, #0xa1
	lsls r1, r1, #1
	add r1, ip
	ldr r0, _080A2174 @ =0x0000FFD0
	strh r0, [r1]
	movs r0, #0xa2
	lsls r0, r0, #1
	add r0, ip
	movs r3, #0x10
	strh r3, [r0]
	movs r0, #0xa3
	lsls r0, r0, #1
	add r0, ip
	strh r3, [r0]
	movs r0, #0xa4
	lsls r0, r0, #1
	add r0, ip
	strh r2, [r0]
	movs r0, #0xa5
	lsls r0, r0, #1
	add r0, ip
	strh r2, [r0]
	movs r0, #0x94
	lsls r0, r0, #1
	add r0, ip
	strh r4, [r0]
	ldr r0, _080A2178 @ =gBldRegs
	movs r1, #0xff
	strh r1, [r0]
	strh r2, [r0, #2]
	strh r3, [r0, #4]
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A216C: .4byte gStageData
_080A2170: .4byte 0x0000FF10
_080A2174: .4byte 0x0000FFD0
_080A2178: .4byte gBldRegs

	thumb_func_start sub_80A217C
sub_80A217C: @ 0x080A217C
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	adds r0, #0x68
	ldr r2, _080A2274 @ =gDispCnt
	movs r1, #0x42
	strh r1, [r2]
	ldr r2, _080A2278 @ =gBgCntRegs
	movs r7, #0
	movs r4, #0
	ldr r1, _080A227C @ =0x00001F0C
	strh r1, [r2]
	ldr r1, _080A2280 @ =0x00001708
	strh r1, [r2, #2]
	ldr r1, _080A2284 @ =0x00006B81
	strh r1, [r2, #4]
	ldr r1, _080A2288 @ =gBgScrollRegs
	strh r4, [r1]
	strh r4, [r1, #2]
	movs r2, #0x10
	strh r2, [r1, #4]
	movs r2, #0x74
	strh r2, [r1, #6]
	strh r4, [r1, #8]
	strh r4, [r1, #0xa]
	strh r4, [r1, #0xc]
	strh r4, [r1, #0xe]
	movs r1, #0xc0
	lsls r1, r1, #0x13
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _080A228C @ =0x06005800
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	movs r1, #0xd4
	lsls r1, r1, #1
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	movs r6, #0x20
	strh r6, [r0, #0x26]
	strh r6, [r0, #0x28]
	adds r1, r5, #0
	adds r1, #0x92
	strb r7, [r1]
	adds r1, #1
	strb r7, [r1]
	adds r1, #1
	strb r7, [r1]
	movs r1, #6
	strh r1, [r0, #0x2e]
	strh r4, [r0, #0x30]
	strh r4, [r0, #0x32]
	bl DrawBackground
	movs r1, #0x94
	lsls r1, r1, #1
	adds r0, r5, r1
	movs r2, #0
	ldrsh r0, [r0, r2]
	cmp r0, #3
	beq _080A2200
	cmp r0, #5
	bne _080A2242
_080A2200:
	adds r0, r5, #0
	adds r0, #0xe8
	ldr r1, _080A2290 @ =0x06008000
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _080A2294 @ =0x0600B800
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	ldr r1, _080A2298 @ =0x000001A7
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	strh r6, [r0, #0x26]
	strh r6, [r0, #0x28]
	movs r2, #0x89
	lsls r2, r2, #1
	adds r1, r5, r2
	strb r7, [r1]
	adds r2, #1
	adds r1, r5, r2
	strb r7, [r1]
	adds r2, #1
	adds r1, r5, r2
	strb r7, [r1]
	movs r1, #0x11
	strh r1, [r0, #0x2e]
	strh r4, [r0, #0x30]
	strh r4, [r0, #0x32]
	bl DrawBackground
_080A2242:
	movs r0, #0x94
	lsls r0, r0, #1
	adds r2, r5, r0
	ldrh r0, [r2]
	subs r0, #1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #1
	bhi _080A22DA
	adds r3, r5, #0
	adds r3, #0xa8
	ldr r0, _080A229C @ =0x0600C000
	str r0, [r3, #4]
	movs r1, #0
	strh r1, [r3, #0xa]
	ldr r0, _080A22A0 @ =0x0600F800
	str r0, [r3, #0xc]
	strh r1, [r3, #0x18]
	strh r1, [r3, #0x1a]
	movs r1, #0
	ldrsh r0, [r2, r1]
	cmp r0, #1
	bne _080A22A8
	ldr r0, _080A22A4 @ =0x000001A9
	b _080A22AC
	.align 2, 0
_080A2274: .4byte gDispCnt
_080A2278: .4byte gBgCntRegs
_080A227C: .4byte 0x00001F0C
_080A2280: .4byte 0x00001708
_080A2284: .4byte 0x00006B81
_080A2288: .4byte gBgScrollRegs
_080A228C: .4byte 0x06005800
_080A2290: .4byte 0x06008000
_080A2294: .4byte 0x0600B800
_080A2298: .4byte 0x000001A7
_080A229C: .4byte 0x0600C000
_080A22A0: .4byte 0x0600F800
_080A22A4: .4byte 0x000001A9
_080A22A8:
	movs r0, #0xd5
	lsls r0, r0, #1
_080A22AC:
	strh r0, [r3, #0x1c]
	movs r2, #0
	movs r1, #0
	strh r1, [r3, #0x1e]
	strh r1, [r3, #0x20]
	strh r1, [r3, #0x22]
	strh r1, [r3, #0x24]
	movs r0, #0x20
	strh r0, [r3, #0x26]
	strh r0, [r3, #0x28]
	adds r0, r3, #0
	adds r0, #0x2a
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	strh r1, [r3, #0x2e]
	strh r1, [r3, #0x30]
	strh r1, [r3, #0x32]
	adds r0, r3, #0
	bl DrawBackground
_080A22DA:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80A22E0
sub_80A22E0: @ 0x080A22E0
	push {r4, r5, r6, r7, lr}
	mov ip, r0
	mov r6, ip
	adds r6, #0x50
	ldr r0, _080A238C @ =0x06010000
	mov r1, ip
	str r0, [r1]
	movs r0, #0x81
	lsls r0, r0, #5
	str r0, [r1, #8]
	movs r1, #0
	movs r2, #0
	movs r0, #0xa1
	mov r3, ip
	strh r0, [r3, #0xc]
	movs r0, #0x82
	strh r0, [r3, #0x10]
	movs r5, #0x8c
	strh r5, [r3, #0x12]
	movs r0, #0x88
	lsls r0, r0, #3
	strh r0, [r3, #0x14]
	strh r2, [r3, #0x16]
	ldr r0, _080A2390 @ =0x0000FFFF
	strh r0, [r3, #0x18]
	movs r0, #3
	strb r0, [r3, #0x1a]
	movs r0, #0xff
	strb r0, [r3, #0x1b]
	movs r3, #0x10
	mov r7, ip
	strb r3, [r7, #0x1c]
	strb r1, [r7, #0x1f]
	movs r4, #1
	rsbs r4, r4, #0
	str r4, [r7, #0x20]
	strh r2, [r6]
	ldr r0, _080A2394 @ =0x0000FF20
	strh r0, [r6, #2]
	movs r0, #0xe0
	strh r0, [r6, #4]
	ldrh r0, [r7, #0x10]
	strh r0, [r6, #6]
	ldrh r0, [r7, #0x12]
	strh r0, [r6, #8]
	mov r1, ip
	adds r1, #0x28
	adds r6, #0xc
	ldr r0, _080A2398 @ =0x06010800
	str r0, [r7, #0x28]
	ldr r0, _080A239C @ =0x00001021
	str r0, [r1, #8]
	ldr r0, _080A23A0 @ =0x000001E7
	strh r0, [r1, #0xc]
	movs r0, #0x64
	strh r0, [r1, #0x10]
	strh r5, [r1, #0x12]
	movs r0, #0x80
	lsls r0, r0, #3
	strh r0, [r1, #0x14]
	strh r2, [r1, #0x16]
	adds r0, r4, #0
	strh r0, [r1, #0x18]
	movs r0, #4
	strb r0, [r1, #0x1a]
	adds r0, r4, #0
	strb r0, [r1, #0x1b]
	strb r3, [r1, #0x1c]
	movs r0, #1
	strb r0, [r1, #0x1f]
	str r4, [r1, #0x20]
	strh r2, [r6]
	movs r0, #0xff
	lsls r0, r0, #8
	strh r0, [r6, #2]
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r6, #4]
	ldrh r0, [r1, #0x10]
	strh r0, [r6, #6]
	ldrh r0, [r1, #0x12]
	strh r0, [r6, #8]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A238C: .4byte 0x06010000
_080A2390: .4byte 0x0000FFFF
_080A2394: .4byte 0x0000FF20
_080A2398: .4byte 0x06010800
_080A239C: .4byte 0x00001021
_080A23A0: .4byte 0x000001E7

	thumb_func_start sub_80A23A4
sub_80A23A4: @ 0x080A23A4
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	ldr r0, _080A244C @ =gCurTask
	ldr r0, [r0]
	ldrh r2, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r0, r0, r2
	mov r8, r0
	ldr r1, _080A2450 @ =gUnknown_03003F30
	movs r0, #0x10
	strb r0, [r1]
	ldr r1, _080A2454 @ =gUnknown_03003C5C
	ldr r0, _080A2458 @ =0x04000020
	str r0, [r1]
	ldr r1, _080A245C @ =gBgOffsetsHBlank
	ldr r3, _080A2460 @ =0x0300012C
	adds r0, r2, r3
	ldr r4, [r0]
	str r4, [r1]
	ldr r3, _080A2464 @ =gFlags
	ldr r0, [r3]
	movs r1, #4
	orrs r0, r1
	str r0, [r3]
	ldr r5, _080A2468 @ =0x03000138
	adds r3, r2, r5
	ldr r1, _080A246C @ =0x03000140
	adds r0, r2, r1
	ldrh r0, [r0]
	ldrh r5, [r3]
	adds r0, r0, r5
	ldr r1, _080A2470 @ =0x00000FFF
	ands r0, r1
	strh r0, [r3]
	ldr r0, _080A2474 @ =0x0300013A
	adds r3, r2, r0
	ldr r1, _080A2478 @ =0x03000142
	adds r0, r2, r1
	ldrh r0, [r0]
	ldrh r5, [r3]
	adds r0, r0, r5
	ldr r1, _080A247C @ =0x000007FF
	ands r0, r1
	strh r0, [r3]
	ldr r0, _080A2480 @ =0x03000148
	adds r1, r2, r0
	ldr r3, _080A2484 @ =0x03000144
	adds r0, r2, r3
	ldrh r0, [r0]
	ldrh r5, [r1]
	adds r0, r0, r5
	strh r0, [r1]
	ldr r0, _080A2488 @ =0x0300014A
	adds r1, r2, r0
	adds r3, #2
	adds r0, r2, r3
	ldrh r0, [r0]
	ldrh r5, [r1]
	adds r0, r0, r5
	strh r0, [r1]
	movs r1, #0
	ldr r0, _080A248C @ =0x03000136
	adds r6, r2, r0
	subs r3, #0x16
	adds r3, r3, r2
	mov ip, r3
	ldr r5, _080A2474 @ =0x0300013A
	adds r5, r5, r2
	mov sb, r5
_080A2434:
	lsls r1, r1, #0x10
	asrs r2, r1, #0x10
	movs r3, #0
	ldrsh r0, [r6, r3]
	subs r0, r2, r0
	adds r7, r1, #0
	cmp r0, #0
	blt _080A2490
	ldrh r0, [r6]
	subs r0, r2, r0
	b _080A2494
	.align 2, 0
_080A244C: .4byte gCurTask
_080A2450: .4byte gUnknown_03003F30
_080A2454: .4byte gUnknown_03003C5C
_080A2458: .4byte 0x04000020
_080A245C: .4byte gBgOffsetsHBlank
_080A2460: .4byte 0x0300012C
_080A2464: .4byte gFlags
_080A2468: .4byte 0x03000138
_080A246C: .4byte 0x03000140
_080A2470: .4byte 0x00000FFF
_080A2474: .4byte 0x0300013A
_080A2478: .4byte 0x03000142
_080A247C: .4byte 0x000007FF
_080A2480: .4byte 0x03000148
_080A2484: .4byte 0x03000144
_080A2488: .4byte 0x0300014A
_080A248C: .4byte 0x03000136
_080A2490:
	ldrh r0, [r6]
	subs r0, r0, r2
_080A2494:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	adds r5, r0, #0
	lsls r1, r5, #0x10
	asrs r1, r1, #0x10
	mov r0, ip
	ldr r2, [r0]
	lsls r0, r1, #2
	adds r0, r0, r2
	ldr r0, [r0]
	muls r1, r0, r1
	lsls r1, r1, #1
	mov r2, sb
	ldrh r0, [r2]
	lsls r0, r0, #4
	adds r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r3, r1, #0x10
	asrs r1, r7, #0x10
	movs r2, #0
	ldrsh r0, [r6, r2]
	cmp r1, r0
	bge _080A24D4
	lsls r0, r3, #0x10
	cmp r0, #0
	bge _080A24E4
	ldr r1, _080A24D0 @ =0xFFFF8000
	adds r0, r3, r1
	b _080A24E0
	.align 2, 0
_080A24D0: .4byte 0xFFFF8000
_080A24D4:
	lsls r0, r3, #0x10
	cmp r0, #0
	blt _080A24E4
	movs r2, #0x80
	lsls r2, r2, #8
	adds r0, r3, r2
_080A24E0:
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
_080A24E4:
	lsls r2, r5, #0x10
	mov r5, ip
	ldr r0, [r5]
	asrs r2, r2, #0xe
	adds r0, r2, r0
	ldr r0, [r0]
	lsrs r0, r0, #2
	strh r0, [r4]
	ldr r0, [r5]
	adds r2, r2, r0
	movs r0, #0x9a
	lsls r0, r0, #1
	add r0, r8
	movs r5, #0
	ldrsh r1, [r0, r5]
	ldr r0, [r2]
	muls r1, r0, r1
	lsrs r1, r1, #2
	movs r0, #0x9c
	lsls r0, r0, #1
	add r0, r8
	ldrh r0, [r0]
	lsls r0, r0, #4
	adds r1, r1, r0
	strh r1, [r4, #8]
	strh r3, [r4, #0xc]
	movs r1, #0x80
	lsls r1, r1, #9
	adds r0, r7, r1
	adds r4, #0x10
	lsrs r1, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x9f
	ble _080A2434
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80A2534
sub_80A2534: @ 0x080A2534
	push {r4, r5, r6, lr}
	sub sp, #0x10
	ldr r0, _080A2654 @ =gCurTask
	ldr r0, [r0]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r4, r0
	mov r5, sp
	mov r0, sp
	movs r1, #0
	movs r2, #0x10
	bl memset
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r5]
	strh r0, [r5, #6]
	ldr r1, _080A2658 @ =gDispCnt
	movs r0, #0x42
	strh r0, [r1]
	adds r0, r6, #0
	bl sub_80A217C
	adds r0, r6, #0
	bl sub_80A22E0
	movs r0, #0xa0
	lsls r0, r0, #4
	bl EwramMalloc
	ldr r1, _080A265C @ =0x0300012C
	adds r4, r4, r1
	str r0, [r4]
	adds r4, r0, #0
	movs r5, #0
_080A257C:
	mov r0, sp
	adds r1, r4, #0
	movs r2, #8
	bl CpuSet
	lsls r0, r5, #0x10
	movs r2, #0x80
	lsls r2, r2, #9
	adds r0, r0, r2
	adds r4, #0x10
	lsrs r5, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x9f
	ble _080A257C
	movs r0, #0x80
	lsls r0, r0, #3
	bl EwramMalloc
	movs r2, #0x98
	lsls r2, r2, #1
	adds r1, r6, r2
	str r0, [r1]
	movs r5, #0
_080A25AA:
	lsls r4, r5, #0x10
	asrs r4, r4, #0x10
	movs r1, #0x98
	lsls r1, r1, #1
	adds r0, r6, r1
	ldr r0, [r0]
	lsls r5, r4, #2
	adds r5, r5, r0
	lsls r1, r4, #4
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r1, r2
	movs r0, #0x80
	lsls r0, r0, #0xd
	bl __divsi3
	str r0, [r5]
	adds r4, #1
	lsls r4, r4, #0x10
	lsrs r5, r4, #0x10
	asrs r4, r4, #0x10
	cmp r4, #0xff
	ble _080A25AA
	movs r5, #0
	ldr r4, _080A2660 @ =gBgPalette
_080A25DC:
	movs r0, #0
	bl sub_80C4C0C
	lsls r2, r5, #0x10
	asrs r2, r2, #0x10
	adds r1, r2, #0
	adds r1, #0x50
	lsls r1, r1, #1
	adds r1, r1, r4
	strh r0, [r1]
	adds r2, #1
	lsls r2, r2, #0x10
	lsrs r5, r2, #0x10
	asrs r2, r2, #0x10
	cmp r2, #0xf
	ble _080A25DC
	ldr r2, _080A2664 @ =gFlags
	ldr r0, [r2]
	movs r1, #1
	orrs r0, r1
	str r0, [r2]
	ldr r1, _080A2668 @ =gBldRegs
	movs r2, #0
	ldr r0, _080A266C @ =0x00001D42
	strh r0, [r1]
	ldr r0, _080A2670 @ =0x00001010
	strh r0, [r1, #2]
	strh r2, [r1, #4]
	movs r1, #0xa6
	lsls r1, r1, #1
	adds r0, r6, r1
	strh r2, [r0]
	movs r5, #0
	movs r0, #0xa7
	lsls r0, r0, #1
	adds r2, r6, r0
	movs r3, #0
_080A2626:
	lsls r1, r5, #0x10
	asrs r1, r1, #0x10
	lsls r0, r1, #1
	adds r0, r2, r0
	strh r3, [r0]
	adds r1, #1
	lsls r1, r1, #0x10
	lsrs r5, r1, #0x10
	asrs r1, r1, #0x10
	cmp r1, #0xf
	ble _080A2626
	movs r1, #0x94
	lsls r1, r1, #1
	adds r0, r6, r1
	movs r2, #0
	ldrsh r0, [r0, r2]
	cmp r0, #5
	bhi _080A26EE
	lsls r0, r0, #2
	ldr r1, _080A2674 @ =_080A2678
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080A2654: .4byte gCurTask
_080A2658: .4byte gDispCnt
_080A265C: .4byte 0x0300012C
_080A2660: .4byte gBgPalette
_080A2664: .4byte gFlags
_080A2668: .4byte gBldRegs
_080A266C: .4byte 0x00001D42
_080A2670: .4byte 0x00001010
_080A2674: .4byte _080A2678
_080A2678: @ jump table
	.4byte _080A2690 @ case 0
	.4byte _080A26A0 @ case 1
	.4byte _080A26AA @ case 2
	.4byte _080A26C4 @ case 3
	.4byte _080A26CC @ case 4
	.4byte _080A26DC @ case 5
_080A2690:
	ldr r0, _080A2698 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A269C @ =sub_80A2A9C
	b _080A26EC
	.align 2, 0
_080A2698: .4byte gCurTask
_080A269C: .4byte sub_80A2A9C
_080A26A0:
	bl m4aMPlayAllStop
	movs r0, #0
	bl m4aSongNumStart
_080A26AA:
	movs r0, #0x9e
	lsls r0, r0, #1
	adds r1, r6, r0
	movs r0, #0xa
	strh r0, [r1]
	ldr r0, _080A26BC @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A26C0 @ =sub_80A2A9C
	b _080A26EC
	.align 2, 0
_080A26BC: .4byte gCurTask
_080A26C0: .4byte sub_80A2A9C
_080A26C4:
	movs r2, #0x9e
	lsls r2, r2, #1
	adds r1, r6, r2
	b _080A26E2
_080A26CC:
	ldr r0, _080A26D4 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A26D8 @ =sub_80A2A9C
	b _080A26EC
	.align 2, 0
_080A26D4: .4byte gCurTask
_080A26D8: .4byte sub_80A2A9C
_080A26DC:
	movs r0, #0x9e
	lsls r0, r0, #1
	adds r1, r6, r0
_080A26E2:
	movs r0, #0
	strh r0, [r1]
	ldr r0, _080A26F8 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A26FC @ =sub_80A2700
_080A26EC:
	str r0, [r1, #8]
_080A26EE:
	add sp, #0x10
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A26F8: .4byte gCurTask
_080A26FC: .4byte sub_80A2700

	thumb_func_start sub_80A2700
sub_80A2700: @ 0x080A2700
	push {r4, r5, r6, lr}
	ldr r6, _080A274C @ =gCurTask
	ldr r0, [r6]
	ldrh r5, [r0, #6]
	ldr r1, _080A2750 @ =gDispCnt
	ldr r2, _080A2754 @ =0x00001641
	adds r0, r2, #0
	strh r0, [r1]
	bl sub_80A2DD8
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	cmp r4, #0
	bne _080A2768
	ldr r3, _080A2758 @ =0x0300013E
	adds r0, r5, r3
	movs r1, #0
	ldrsh r0, [r0, r1]
	bl sub_80A2978
	movs r0, #0
	bl sub_80A2A40
	bl sub_80A2D80
	bl sub_80A23A4
	ldr r2, _080A275C @ =0x0300013C
	adds r1, r5, r2
	ldrh r2, [r1]
	movs r3, #0
	ldrsh r0, [r1, r3]
	cmp r0, #0
	ble _080A2760
	subs r0, r2, #1
	strh r0, [r1]
	b _080A2768
	.align 2, 0
_080A274C: .4byte gCurTask
_080A2750: .4byte gDispCnt
_080A2754: .4byte 0x00001641
_080A2758: .4byte 0x0300013E
_080A275C: .4byte 0x0300013C
_080A2760:
	strh r4, [r1]
	ldr r1, [r6]
	ldr r0, _080A2770 @ =sub_80A2774
	str r0, [r1, #8]
_080A2768:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A2770: .4byte sub_80A2774

	thumb_func_start sub_80A2774
sub_80A2774: @ 0x080A2774
	push {r4, r5, r6, lr}
	ldr r6, _080A27C4 @ =gCurTask
	ldr r0, [r6]
	ldrh r4, [r0, #6]
	bl sub_80A2DD8
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _080A27E2
	ldr r0, _080A27C8 @ =0x0300013E
	adds r5, r4, r0
	ldrh r0, [r5]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x11
	bl sub_80A2978
	ldr r0, _080A27CC @ =0x0300013C
	adds r4, r4, r0
	ldrh r0, [r4]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x13
	bl sub_80A2A40
	bl sub_80A2D80
	bl sub_80A23A4
	ldrh r0, [r4]
	adds r0, #1
	strh r0, [r4]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x3f
	bgt _080A27D0
	cmp r0, #0x20
	ble _080A27E2
	ldrh r0, [r5]
	adds r0, #1
	strh r0, [r5]
	b _080A27E2
	.align 2, 0
_080A27C4: .4byte gCurTask
_080A27C8: .4byte 0x0300013E
_080A27CC: .4byte 0x0300013C
_080A27D0:
	ldrh r0, [r5]
	adds r0, #1
	strh r0, [r5]
	movs r0, #7
	bl sub_80A2A40
	ldr r1, [r6]
	ldr r0, _080A27E8 @ =sub_80A27EC
	str r0, [r1, #8]
_080A27E2:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A27E8: .4byte sub_80A27EC

	thumb_func_start sub_80A27EC
sub_80A27EC: @ 0x080A27EC
	push {r4, r5, r6, r7, lr}
	ldr r0, _080A2948 @ =gCurTask
	ldr r0, [r0]
	ldrh r6, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r7, r6, r0
	ldr r0, _080A294C @ =0x0300014C
	adds r5, r6, r0
	ldrh r0, [r5]
	adds r0, #1
	movs r1, #0xff
	ands r0, r1
	strh r0, [r5]
	bl sub_80A2DD8
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _080A2814
	b _080A2940
_080A2814:
	ldr r1, _080A2950 @ =0x0300013E
	adds r4, r6, r1
	ldrh r0, [r4]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x11
	bl sub_80A2978
	ldr r2, _080A2954 @ =0x0300013C
	adds r1, r6, r2
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	ldrh r0, [r4]
	adds r0, #1
	strh r0, [r4]
	movs r1, #0
	ldrsh r0, [r5, r1]
	cmp r0, #0
	bne _080A2858
	movs r5, #0
	adds r2, #0x12
	adds r4, r6, r2
	movs r2, #0
_080A2842:
	lsls r1, r5, #0x10
	asrs r1, r1, #0x10
	lsls r0, r1, #1
	adds r0, r4, r0
	strh r2, [r0]
	adds r1, #1
	lsls r1, r1, #0x10
	lsrs r5, r1, #0x10
	asrs r1, r1, #0x10
	cmp r1, #0xf
	ble _080A2842
_080A2858:
	movs r5, #0
	movs r0, #0xa6
	lsls r0, r0, #1
	adds r4, r7, r0
	movs r1, #0xa7
	lsls r1, r1, #1
	adds r6, r7, r1
_080A2866:
	movs r2, #0
	ldrsh r1, [r4, r2]
	lsls r0, r5, #0x10
	asrs r3, r0, #0x10
	lsls r2, r3, #2
	cmp r1, r2
	ble _080A288E
	ldrh r0, [r4]
	subs r0, r0, r2
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r1, r3, #1
	adds r1, r6, r1
	adds r2, r0, #0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x1f
	ble _080A288C
	movs r2, #0x1f
_080A288C:
	strh r2, [r1]
_080A288E:
	lsls r0, r5, #0x10
	movs r1, #0x80
	lsls r1, r1, #9
	adds r0, r0, r1
	lsrs r5, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xf
	ble _080A2866
	movs r5, #0
	ldr r6, _080A2958 @ =gBgPalette
_080A28A2:
	lsls r4, r5, #0x10
	asrs r4, r4, #0x10
	lsls r1, r4, #1
	movs r2, #0xa7
	lsls r2, r2, #1
	adds r0, r7, r2
	adds r0, r0, r1
	ldrh r0, [r0]
	movs r1, #0x1f
	ands r1, r0
	lsls r0, r1, #5
	orrs r0, r1
	lsls r1, r1, #0xa
	orrs r0, r1
	bl sub_80C4C0C
	adds r1, r4, #0
	adds r1, #0x50
	lsls r1, r1, #1
	adds r1, r1, r6
	strh r0, [r1]
	adds r4, #1
	lsls r4, r4, #0x10
	lsrs r5, r4, #0x10
	asrs r4, r4, #0x10
	cmp r4, #0xf
	ble _080A28A2
	ldr r5, _080A295C @ =gFlags
	ldr r0, [r5]
	movs r1, #1
	orrs r0, r1
	str r0, [r5]
	bl sub_80A2D80
	bl sub_80A23A4
	movs r0, #0xa6
	lsls r0, r0, #1
	adds r4, r7, r0
	movs r1, #0
	ldrsh r0, [r4, r1]
	cmp r0, #0x95
	bne _080A2918
	ldr r0, _080A2960 @ =gMPlayInfo_BGM
	movs r1, #5
	bl m4aMPlayFadeOut
	ldr r0, _080A2964 @ =gMPlayInfo_SE1
	movs r1, #5
	bl m4aMPlayFadeOut
	ldr r0, _080A2968 @ =gMPlayInfo_SE2
	movs r1, #5
	bl m4aMPlayFadeOut
	ldr r0, _080A296C @ =gMPlayInfo_SE3
	movs r1, #5
	bl m4aMPlayFadeOut
_080A2918:
	movs r2, #0
	ldrsh r0, [r4, r2]
	cmp r0, #0x9f
	ble _080A2940
	ldr r1, _080A2970 @ =gBldRegs
	movs r2, #0
	movs r0, #0xbf
	strh r0, [r1]
	strh r2, [r1, #2]
	movs r0, #0x10
	strh r0, [r1, #4]
	ldr r0, [r5]
	movs r1, #5
	rsbs r1, r1, #0
	ands r0, r1
	str r0, [r5]
	ldr r0, _080A2948 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A2974 @ =sub_80A2D34
	str r0, [r1, #8]
_080A2940:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A2948: .4byte gCurTask
_080A294C: .4byte 0x0300014C
_080A2950: .4byte 0x0300013E
_080A2954: .4byte 0x0300013C
_080A2958: .4byte gBgPalette
_080A295C: .4byte gFlags
_080A2960: .4byte gMPlayInfo_BGM
_080A2964: .4byte gMPlayInfo_SE1
_080A2968: .4byte gMPlayInfo_SE2
_080A296C: .4byte gMPlayInfo_SE3
_080A2970: .4byte gBldRegs
_080A2974: .4byte sub_80A2D34

	thumb_func_start sub_80A2978
sub_80A2978: @ 0x080A2978
	push {r4, r5, r6, r7, lr}
	ldr r1, _080A2A20 @ =gCurTask
	ldr r1, [r1]
	ldrh r3, [r1, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r6, r3, r1
	lsls r5, r0, #0x10
	asrs r4, r5, #0x10
	cmp r4, #0xff
	bgt _080A2A18
	ldr r0, _080A2A24 @ =0x03000136
	adds r2, r3, r0
	adds r0, r4, #0
	adds r0, #0x20
	asrs r0, r0, #4
	subs r0, #4
	ldrh r1, [r2]
	subs r1, r1, r0
	strh r1, [r6, #0x12]
	ldr r7, _080A2A28 @ =0x03000058
	adds r0, r3, r7
	strh r1, [r0]
	asrs r0, r5, #0x14
	subs r0, #4
	ldrh r1, [r2]
	subs r1, r1, r0
	strh r1, [r6, #0x3a]
	ldr r2, _080A2A2C @ =0x03000064
	adds r0, r3, r2
	strh r1, [r0]
	asrs r2, r5, #0x11
	adds r0, r2, #0
	adds r0, #0x82
	adds r0, r4, r0
	strh r0, [r6, #0x10]
	subs r7, #2
	adds r1, r3, r7
	strh r0, [r1]
	adds r2, r2, r4
	mov ip, r2
	movs r0, #0xe0
	subs r0, r0, r2
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	ble _080A29E6
	rsbs r0, r0, #0
	subs r7, #4
	adds r1, r3, r7
	strh r0, [r1]
	ldr r1, _080A2A30 @ =0x03000054
	adds r0, r3, r1
	strh r2, [r0]
_080A29E6:
	lsls r1, r4, #1
	asrs r0, r5, #0x12
	subs r0, #0x64
	subs r1, r1, r0
	strh r1, [r6, #0x38]
	ldr r2, _080A2A34 @ =0x03000062
	adds r0, r3, r2
	strh r1, [r0]
	movs r4, #0x80
	lsls r4, r4, #1
	adds r0, r4, #0
	mov r7, ip
	subs r0, r0, r7
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	ble _080A2A18
	rsbs r0, r0, #0
	ldr r4, _080A2A38 @ =0x0300005E
	adds r1, r3, r4
	strh r0, [r1]
	ldr r7, _080A2A3C @ =0x03000060
	adds r0, r3, r7
	strh r2, [r0]
_080A2A18:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A2A20: .4byte gCurTask
_080A2A24: .4byte 0x03000136
_080A2A28: .4byte 0x03000058
_080A2A2C: .4byte 0x03000064
_080A2A30: .4byte 0x03000054
_080A2A34: .4byte 0x03000062
_080A2A38: .4byte 0x0300005E
_080A2A3C: .4byte 0x03000060

	thumb_func_start sub_80A2A40
sub_80A2A40: @ 0x080A2A40
	push {r4, r5, r6, lr}
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bge _080A2A50
	movs r1, #0
	b _080A2A56
_080A2A50:
	cmp r0, #7
	ble _080A2A56
	movs r1, #7
_080A2A56:
	lsls r0, r1, #0x10
	asrs r0, r0, #0xa
	ldr r1, _080A2A90 @ =gUnknown_086EE0A8
	adds r6, r0, r1
	movs r0, #0
_080A2A60:
	lsls r4, r0, #0x10
	asrs r4, r4, #0x10
	lsls r5, r4, #1
	adds r0, r5, r6
	ldrh r0, [r0]
	bl sub_80C4C0C
	ldr r1, _080A2A94 @ =gBgPalette
	adds r5, r5, r1
	strh r0, [r5]
	adds r4, #1
	lsls r4, r4, #0x10
	lsrs r0, r4, #0x10
	asrs r4, r4, #0x10
	cmp r4, #0x1f
	ble _080A2A60
	ldr r0, _080A2A98 @ =gFlags
	ldr r1, [r0]
	movs r2, #1
	orrs r1, r2
	str r1, [r0]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A2A90: .4byte gUnknown_086EE0A8
_080A2A94: .4byte gBgPalette
_080A2A98: .4byte gFlags

	thumb_func_start sub_80A2A9C
sub_80A2A9C: @ 0x080A2A9C
	push {r4, r5, r6, r7, lr}
	ldr r0, _080A2B30 @ =gCurTask
	ldr r0, [r0]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r5, r0
	ldr r7, _080A2B34 @ =gDispCnt
	ldr r1, _080A2B38 @ =0x00001441
	adds r0, r1, #0
	strh r0, [r7]
	ldr r1, _080A2B3C @ =gBldRegs
	movs r0, #0
	strh r0, [r1]
	strh r0, [r1, #2]
	strh r0, [r1, #4]
	ldr r2, _080A2B40 @ =0x0300013C
	adds r4, r5, r2
	ldrh r0, [r4]
	subs r0, #1
	strh r0, [r4]
	bl sub_80A2DD8
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _080A2B28
	bl sub_80A2D80
	bl sub_80A23A4
	movs r1, #0
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bgt _080A2B28
	movs r0, #0x96
	strh r0, [r4]
	ldr r2, _080A2B44 @ =0x03000128
	adds r0, r5, r2
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _080A2AFA
	cmp r0, #3
	bgt _080A2AFA
	ldr r2, _080A2B48 @ =0x00001541
	adds r0, r2, #0
	strh r0, [r7]
_080A2AFA:
	movs r1, #0x94
	lsls r1, r1, #1
	adds r0, r6, r1
	movs r2, #0
	ldrsh r0, [r0, r2]
	cmp r0, #5
	bne _080A2B10
	ldr r1, _080A2B34 @ =gDispCnt
	ldr r2, _080A2B48 @ =0x00001541
	adds r0, r2, #0
	strh r0, [r1]
_080A2B10:
	ldr r1, _080A2B3C @ =gBldRegs
	movs r2, #0
	ldr r0, _080A2B4C @ =0x00003F41
	strh r0, [r1]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r1, #2]
	strh r2, [r1, #4]
	ldr r0, _080A2B30 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A2B50 @ =sub_80A2B54
	str r0, [r1, #8]
_080A2B28:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A2B30: .4byte gCurTask
_080A2B34: .4byte gDispCnt
_080A2B38: .4byte 0x00001441
_080A2B3C: .4byte gBldRegs
_080A2B40: .4byte 0x0300013C
_080A2B44: .4byte 0x03000128
_080A2B48: .4byte 0x00001541
_080A2B4C: .4byte 0x00003F41
_080A2B50: .4byte sub_80A2B54

	thumb_func_start sub_80A2B54
sub_80A2B54: @ 0x080A2B54
	push {r4, lr}
	ldr r0, _080A2B8C @ =gCurTask
	ldr r0, [r0]
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r4, r0, r1
	ldr r1, _080A2B90 @ =0x0300013C
	adds r0, r0, r1
	ldrh r1, [r0]
	subs r2, r1, #1
	strh r2, [r0]
	lsls r0, r2, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x8d
	ble _080A2B98
	movs r0, #0x96
	subs r0, r0, r2
	ldr r2, _080A2B94 @ =gBldRegs
	movs r1, #0x10
	lsls r0, r0, #0x11
	asrs r0, r0, #0x10
	subs r1, r1, r0
	lsls r1, r1, #8
	orrs r1, r0
	strh r1, [r2, #2]
	b _080A2BBA
	.align 2, 0
_080A2B8C: .4byte gCurTask
_080A2B90: .4byte 0x0300013C
_080A2B94: .4byte gBldRegs
_080A2B98:
	cmp r0, #8
	bgt _080A2BB4
	ldr r0, _080A2BB0 @ =gBldRegs
	movs r1, #0x10
	lsls r2, r2, #0x11
	asrs r2, r2, #0x10
	subs r1, r1, r2
	lsls r1, r1, #8
	orrs r1, r2
	strh r1, [r0, #2]
	b _080A2BBA
	.align 2, 0
_080A2BB0: .4byte gBldRegs
_080A2BB4:
	ldr r1, _080A2BF0 @ =gBldRegs
	movs r0, #0x10
	strh r0, [r1, #2]
_080A2BBA:
	bl sub_80A2DD8
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _080A2C4A
	bl sub_80A2D80
	bl sub_80A23A4
	movs r2, #0x9e
	lsls r2, r2, #1
	adds r0, r4, r2
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bgt _080A2C4A
	subs r2, #0x14
	adds r0, r4, r2
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #5
	bhi _080A2C30
	lsls r0, r0, #2
	ldr r1, _080A2BF4 @ =_080A2BF8
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080A2BF0: .4byte gBldRegs
_080A2BF4: .4byte _080A2BF8
_080A2BF8: @ jump table
	.4byte _080A2C3A @ case 0
	.4byte _080A2C10 @ case 1
	.4byte _080A2C1A @ case 2
	.4byte _080A2C30 @ case 3
	.4byte _080A2C30 @ case 4
	.4byte _080A2C30 @ case 5
_080A2C10:
	movs r2, #0x9e
	lsls r2, r2, #1
	adds r1, r4, r2
	movs r0, #0xa
	b _080A2C38
_080A2C1A:
	movs r0, #0x9e
	lsls r0, r0, #1
	adds r1, r4, r0
	movs r0, #0x78
	strh r0, [r1]
	ldr r1, _080A2C2C @ =gStageData
	movs r0, #1
	strb r0, [r1, #7]
	b _080A2C3A
	.align 2, 0
_080A2C2C: .4byte gStageData
_080A2C30:
	movs r2, #0x9e
	lsls r2, r2, #1
	adds r1, r4, r2
	movs r0, #1
_080A2C38:
	strh r0, [r1]
_080A2C3A:
	ldr r1, _080A2C50 @ =gDispCnt
	ldr r2, _080A2C54 @ =0x00001441
	adds r0, r2, #0
	strh r0, [r1]
	ldr r0, _080A2C58 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A2C5C @ =sub_80A2C60
	str r0, [r1, #8]
_080A2C4A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A2C50: .4byte gDispCnt
_080A2C54: .4byte 0x00001441
_080A2C58: .4byte gCurTask
_080A2C5C: .4byte sub_80A2C60

	thumb_func_start sub_80A2C60
sub_80A2C60: @ 0x080A2C60
	push {r4, r5, lr}
	ldr r0, _080A2C90 @ =gCurTask
	ldr r0, [r0]
	ldrh r5, [r0, #6]
	ldr r0, _080A2C94 @ =0x0300013C
	adds r4, r5, r0
	ldrh r0, [r4]
	subs r0, #1
	strh r0, [r4]
	bl sub_80A2DD8
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	bne _080A2CF2
	movs r1, #0
	ldrsh r0, [r4, r1]
	cmp r0, #0
	ble _080A2C98
	bl sub_80A2D80
	bl sub_80A23A4
	b _080A2CF2
	.align 2, 0
_080A2C90: .4byte gCurTask
_080A2C94: .4byte 0x0300013C
_080A2C98:
	ldr r1, _080A2CBC @ =gBldRegs
	movs r0, #0xff
	strh r0, [r1]
	strh r2, [r1, #2]
	movs r0, #0x10
	strh r0, [r1, #4]
	ldr r1, _080A2CC0 @ =0x03000128
	adds r0, r5, r1
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #1
	beq _080A2CD6
	cmp r0, #1
	bgt _080A2CC4
	cmp r0, #0
	beq _080A2CCE
	b _080A2CEA
	.align 2, 0
_080A2CBC: .4byte gBldRegs
_080A2CC0: .4byte 0x03000128
_080A2CC4:
	cmp r0, #2
	beq _080A2CDE
	cmp r0, #4
	beq _080A2CE4
	b _080A2CEA
_080A2CCE:
	movs r0, #1
	bl sub_80A2E38
	b _080A2CEA
_080A2CD6:
	movs r0, #0
	bl sub_80A2E38
	b _080A2CEA
_080A2CDE:
	bl sub_80A3F18
	b _080A2CEA
_080A2CE4:
	movs r0, #1
	bl sub_80A310C
_080A2CEA:
	ldr r0, _080A2CF8 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
_080A2CF2:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A2CF8: .4byte gCurTask

	thumb_func_start sub_80A2CFC
sub_80A2CFC: @ 0x080A2CFC
	push {r4, lr}
	ldrh r4, [r0, #6]
	ldr r1, _080A2D28 @ =0x0300012C
	adds r0, r4, r1
	ldr r0, [r0]
	bl EwramFree
	ldr r0, _080A2D2C @ =0x03000130
	adds r4, r4, r0
	ldr r0, [r4]
	bl EwramFree
	ldr r2, _080A2D30 @ =gFlags
	ldr r0, [r2]
	movs r1, #5
	rsbs r1, r1, #0
	ands r0, r1
	str r0, [r2]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A2D28: .4byte 0x0300012C
_080A2D2C: .4byte 0x03000130
_080A2D30: .4byte gFlags

	thumb_func_start sub_80A2D34
sub_80A2D34: @ 0x080A2D34
	push {lr}
	ldr r0, _080A2D50 @ =gCurTask
	ldr r0, [r0]
	ldrh r0, [r0, #6]
	ldr r1, _080A2D54 @ =0x03000128
	adds r0, r0, r1
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #3
	beq _080A2D58
	cmp r0, #5
	beq _080A2D60
	b _080A2D76
	.align 2, 0
_080A2D50: .4byte gCurTask
_080A2D54: .4byte 0x03000128
_080A2D58:
	movs r0, #2
	bl sub_808ADF0
	b _080A2D76
_080A2D60:
	ldr r2, _080A2D7C @ =gSaveGame
	ldrh r1, [r2, #0x34]
	movs r0, #1
	orrs r0, r1
	strh r0, [r2, #0x34]
	bl sub_8001E58
	movs r0, #2
	movs r1, #0
	bl sub_8002210
_080A2D76:
	pop {r0}
	bx r0
	.align 2, 0
_080A2D7C: .4byte gSaveGame

	thumb_func_start sub_80A2D80
sub_80A2D80: @ 0x080A2D80
	push {r4, r5, lr}
	ldr r0, _080A2DC8 @ =gCurTask
	ldr r0, [r0]
	ldrh r5, [r0, #6]
	movs r4, #0xc0
	lsls r4, r4, #0x12
	adds r4, r5, r4
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	ldr r0, _080A2DCC @ =0x03000050
	adds r1, r5, r0
	adds r0, r4, #0
	bl TransformSprite
	adds r0, r4, #0
	bl DisplaySprite
	ldr r0, _080A2DD0 @ =0x03000028
	adds r4, r5, r0
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	ldr r0, _080A2DD4 @ =0x0300005C
	adds r5, r5, r0
	adds r0, r4, #0
	adds r1, r5, #0
	bl TransformSprite
	adds r0, r4, #0
	bl DisplaySprite
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A2DC8: .4byte gCurTask
_080A2DCC: .4byte 0x03000050
_080A2DD0: .4byte 0x03000028
_080A2DD4: .4byte 0x0300005C

	thumb_func_start sub_80A2DD8
sub_80A2DD8: @ 0x080A2DD8
	push {lr}
	ldr r0, _080A2E1C @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	ldr r0, _080A2E20 @ =gStageData
	ldrb r0, [r0, #7]
	cmp r0, #0
	beq _080A2E30
	ldr r2, _080A2E24 @ =0x03000128
	adds r0, r1, r2
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _080A2E30
	cmp r0, #3
	bgt _080A2E30
	ldr r0, _080A2E28 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080A2E30
	ldr r0, _080A2E2C @ =gFlags
	ldr r1, [r0]
	movs r2, #5
	rsbs r2, r2, #0
	ands r1, r2
	str r1, [r0]
	movs r0, #2
	bl sub_808ADF0
	movs r0, #1
	b _080A2E32
	.align 2, 0
_080A2E1C: .4byte gCurTask
_080A2E20: .4byte gStageData
_080A2E24: .4byte 0x03000128
_080A2E28: .4byte gPressedKeys
_080A2E2C: .4byte gFlags
_080A2E30:
	movs r0, #0
_080A2E32:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80A2E38
sub_80A2E38: @ 0x080A2E38
	push {r4, r5, lr}
	sub sp, #8
	adds r5, r0, #0
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	ldr r1, _080A2EE4 @ =gDispCnt
	movs r2, #0x82
	lsls r2, r2, #5
	adds r0, r2, #0
	strh r0, [r1]
	ldr r0, _080A2EE8 @ =sub_80A2FF4
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r1, _080A2EEC @ =sub_80A3E34
	str r1, [sp]
	movs r1, #0xa0
	movs r3, #0
	bl TaskCreate
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	movs r1, #0xc0
	lsls r1, r1, #6
	str r1, [r0, #0x14]
	movs r1, #0x80
	lsls r1, r1, #7
	str r1, [r0, #0xc]
	movs r2, #0
	str r2, [r0, #0x18]
	str r2, [r0, #0x1c]
	movs r1, #2
	strb r1, [r0, #1]
	movs r4, #0
	strh r2, [r0, #4]
	strb r5, [r0]
	str r2, [sp, #4]
	ldr r3, _080A2EF0 @ =0x040000D4
	add r1, sp, #4
	str r1, [r3]
	ldr r1, _080A2EF4 @ =gBgCntRegs
	ldrh r2, [r1]
	movs r1, #0xc
	ands r1, r2
	lsls r1, r1, #0xc
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r1, r2
	str r1, [r3, #4]
	ldr r1, _080A2EF8 @ =0x85000010
	str r1, [r3, #8]
	ldr r1, [r3, #8]
	ldr r5, _080A2EFC @ =gUnknown_03006230
	strb r4, [r5, #1]
	ldr r1, _080A2F00 @ =gUnknown_03003590
	strb r4, [r1, #4]
	strb r4, [r1, #5]
	movs r2, #0xff
	strb r2, [r1, #6]
	movs r3, #0x40
	strb r3, [r1, #7]
	strb r4, [r5, #2]
	strb r4, [r1, #8]
	strb r4, [r1, #9]
	movs r2, #1
	rsbs r2, r2, #0
	strb r2, [r1, #0xa]
	strb r3, [r1, #0xb]
	bl sub_80A2F0C
	movs r0, #0
	bl sub_80C4C0C
	ldr r1, _080A2F04 @ =gBgPalette
	strh r0, [r1]
	ldr r2, _080A2F08 @ =gFlags
	ldr r0, [r2]
	movs r1, #1
	orrs r0, r1
	str r0, [r2]
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A2EE4: .4byte gDispCnt
_080A2EE8: .4byte sub_80A2FF4
_080A2EEC: .4byte sub_80A3E34
_080A2EF0: .4byte 0x040000D4
_080A2EF4: .4byte gBgCntRegs
_080A2EF8: .4byte 0x85000010
_080A2EFC: .4byte gUnknown_03006230
_080A2F00: .4byte gUnknown_03003590
_080A2F04: .4byte gBgPalette
_080A2F08: .4byte gFlags

	thumb_func_start sub_80A2F0C
sub_80A2F0C: @ 0x080A2F0C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r7, r0, #0
	ldr r2, _080A2FD0 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r0, _080A2FD4 @ =gBgCntRegs
	mov r8, r0
	movs r1, #0
	mov sb, r1
	movs r4, #0
	ldr r0, _080A2FD8 @ =0x00000C81
	mov r3, r8
	strh r0, [r3, #2]
	ldr r6, _080A2FDC @ =gBgScrollRegs
	strh r4, [r6, #4]
	strh r4, [r6, #6]
	adds r0, r7, #0
	adds r0, #0x60
	movs r1, #0xc0
	lsls r1, r1, #0x13
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _080A2FE0 @ =0x06006000
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	movs r1, #0x97
	lsls r1, r1, #1
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	movs r5, #0x20
	strh r5, [r0, #0x26]
	strh r5, [r0, #0x28]
	adds r1, r7, #0
	adds r1, #0x8a
	mov r3, sb
	strb r3, [r1]
	movs r1, #5
	strh r1, [r0, #0x2e]
	str r2, [sp]
	bl DrawBackground
	ldr r2, [sp]
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #3
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r0, _080A2FE4 @ =0x00005888
	mov r1, r8
	strh r0, [r1, #4]
	strh r4, [r6, #8]
	strh r4, [r6, #0xa]
	adds r0, r7, #0
	adds r0, #0x20
	ldr r1, _080A2FE8 @ =0x06008000
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _080A2FEC @ =0x0600C000
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	ldr r1, _080A2FF0 @ =0x0000012D
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	strh r5, [r0, #0x26]
	strh r5, [r0, #0x28]
	adds r1, r7, #0
	adds r1, #0x4a
	mov r2, sb
	strb r2, [r1]
	movs r1, #6
	strh r1, [r0, #0x2e]
	bl DrawBackground
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A2FD0: .4byte gDispCnt
_080A2FD4: .4byte gBgCntRegs
_080A2FD8: .4byte 0x00000C81
_080A2FDC: .4byte gBgScrollRegs
_080A2FE0: .4byte 0x06006000
_080A2FE4: .4byte 0x00005888
_080A2FE8: .4byte 0x06008000
_080A2FEC: .4byte 0x0600C000
_080A2FF0: .4byte 0x0000012D

	thumb_func_start sub_80A2FF4
sub_80A2FF4: @ 0x080A2FF4
	push {r4, r5, r6, r7, lr}
	ldr r0, _080A3058 @ =gCurTask
	ldr r6, [r0]
	ldrh r3, [r6, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r3, r3, r0
	ldr r4, _080A305C @ =gBldRegs
	movs r5, #0
	ldr r0, _080A3060 @ =0x00003FFF
	strh r0, [r4]
	ldr r2, _080A3064 @ =gDispCnt
	ldrh r0, [r2]
	movs r7, #0xc0
	lsls r7, r7, #7
	adds r1, r7, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r2, _080A3068 @ =gWinRegs
	movs r0, #0xff
	strh r0, [r2]
	strh r0, [r2, #2]
	strh r0, [r2, #6]
	ldr r0, _080A306C @ =0x00003117
	strh r0, [r2, #8]
	strh r5, [r2, #0xa]
	movs r5, #0x10
	strh r5, [r4, #4]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r3, #6]
	movs r0, #1
	strh r0, [r3, #8]
	ldr r0, [r3, #0x14]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r3, #0xc]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2, #4]
	movs r0, #0x1f
	strh r0, [r4, #2]
	strh r5, [r4, #4]
	ldr r0, _080A3070 @ =sub_80A3074
	str r0, [r6, #8]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A3058: .4byte gCurTask
_080A305C: .4byte gBldRegs
_080A3060: .4byte 0x00003FFF
_080A3064: .4byte gDispCnt
_080A3068: .4byte gWinRegs
_080A306C: .4byte 0x00003117
_080A3070: .4byte sub_80A3074

	thumb_func_start sub_80A3074
sub_80A3074: @ 0x080A3074
	push {r4, lr}
	ldr r0, _080A30E4 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r3, r1, r0
	movs r4, #0
	ldrh r0, [r3, #4]
	cmp r0, #4
	bhi _080A3096
	adds r0, #1
	strh r0, [r3, #4]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #4
	bls _080A30B2
_080A3096:
	ldr r1, [r3, #0x18]
	ldr r2, _080A30E8 @ =0x00004FFF
	cmp r1, r2
	bgt _080A30B2
	ldrb r0, [r3, #1]
	lsls r0, r0, #8
	adds r0, r1, r0
	str r0, [r3, #0x18]
	cmp r0, r2
	ble _080A30B2
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [r3, #0x18]
	movs r4, #1
_080A30B2:
	ldr r2, _080A30EC @ =gWinRegs
	ldr r0, [r3, #0x14]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r3, #0xc]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2, #4]
	ldr r1, _080A30F0 @ =gBgScrollRegs
	ldr r0, [r3, #0x18]
	asrs r0, r0, #8
	strh r0, [r1, #8]
	ldr r0, [r3, #0x1c]
	asrs r0, r0, #8
	strh r0, [r1, #0xa]
	cmp r4, #0
	beq _080A3102
	ldrb r0, [r3]
	cmp r0, #0
	bne _080A30F4
	movs r0, #2
	bl sub_80A209C
	b _080A30FA
	.align 2, 0
_080A30E4: .4byte gCurTask
_080A30E8: .4byte 0x00004FFF
_080A30EC: .4byte gWinRegs
_080A30F0: .4byte gBgScrollRegs
_080A30F4:
	movs r0, #4
	bl sub_80A209C
_080A30FA:
	ldr r0, _080A3108 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
_080A3102:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A3108: .4byte gCurTask

	thumb_func_start sub_80A310C
sub_80A310C: @ 0x080A310C
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r5, r0, #0
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	ldr r1, _080A31D4 @ =gDispCnt
	ldr r0, _080A31D8 @ =0x00007140
	strh r0, [r1]
	ldr r0, _080A31DC @ =sub_80A3444
	movs r1, #0xba
	lsls r1, r1, #1
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r3, _080A31E0 @ =sub_80A3E38
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	movs r1, #0
	strb r5, [r4]
	movs r0, #0x80
	lsls r0, r0, #7
	str r0, [r4, #0x10]
	movs r0, #0x80
	lsls r0, r0, #6
	str r0, [r4, #8]
	str r1, [r4, #0x14]
	ldr r0, _080A31E4 @ =0xFFFF9C00
	str r0, [r4, #0x18]
	movs r0, #0xe6
	lsls r0, r0, #8
	str r0, [r4, #0x24]
	movs r0, #0x82
	lsls r0, r0, #8
	str r0, [r4, #0x28]
	movs r0, #0xb4
	lsls r0, r0, #8
	str r0, [r4, #0x1c]
	movs r0, #0xa0
	lsls r0, r0, #8
	str r0, [r4, #0x20]
	movs r6, #1
	strb r6, [r4, #1]
	movs r3, #0
	strh r1, [r4, #6]
	strh r1, [r4, #4]
	strh r1, [r4, #2]
	str r1, [sp, #4]
	ldr r2, _080A31E8 @ =0x040000D4
	add r0, sp, #4
	str r0, [r2]
	ldr r0, _080A31EC @ =gBgCntRegs
	ldrh r1, [r0]
	movs r0, #0xc
	ands r0, r1
	lsls r0, r0, #0xc
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r0, r0, r1
	str r0, [r2, #4]
	ldr r0, _080A31F0 @ =0x85000010
	str r0, [r2, #8]
	ldr r0, [r2, #8]
	ldr r5, _080A31F4 @ =gUnknown_03006230
	strb r3, [r5, #1]
	ldr r0, _080A31F8 @ =gUnknown_03003590
	strb r3, [r0, #4]
	strb r3, [r0, #5]
	movs r1, #0xff
	strb r1, [r0, #6]
	movs r2, #0x40
	strb r2, [r0, #7]
	strb r3, [r5, #2]
	strb r3, [r0, #8]
	strb r3, [r0, #9]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0xa]
	strb r2, [r0, #0xb]
	adds r0, r4, #0
	bl sub_80A3354
	ldr r2, _080A31FC @ =gWinRegs
	ldr r0, [r4, #0x10]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r4, #8]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2, #4]
	ldrb r0, [r4]
	cmp r0, #0
	beq _080A3200
	movs r0, #0
	b _080A3202
	.align 2, 0
_080A31D4: .4byte gDispCnt
_080A31D8: .4byte 0x00007140
_080A31DC: .4byte sub_80A3444
_080A31E0: .4byte sub_80A3E38
_080A31E4: .4byte 0xFFFF9C00
_080A31E8: .4byte 0x040000D4
_080A31EC: .4byte gBgCntRegs
_080A31F0: .4byte 0x85000010
_080A31F4: .4byte gUnknown_03006230
_080A31F8: .4byte gUnknown_03003590
_080A31FC: .4byte gWinRegs
_080A3200:
	ldr r0, _080A321C @ =0x0000FFFF
_080A3202:
	bl sub_80C4C0C
	ldr r1, _080A3220 @ =gBgPalette
	strh r0, [r1]
	ldr r1, _080A3224 @ =gFlags
	ldr r0, [r1]
	orrs r0, r6
	str r0, [r1]
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A321C: .4byte 0x0000FFFF
_080A3220: .4byte gBgPalette
_080A3224: .4byte gFlags

	thumb_func_start sub_80A3228
sub_80A3228: @ 0x080A3228
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r6, r0, #0
	movs r5, #0
	ldr r7, _080A334C @ =0x06010000
	adds r0, #0xac
	str r7, [r0]
	ldr r4, _080A3350 @ =gUnknown_080D9980
	ldr r1, [r4, #4]
	lsls r1, r1, #5
	adds r7, r1, r7
	ldrh r1, [r4]
	movs r2, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r4, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r6, #0x24]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r6, #0x28]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r5, [r0, #0x14]
	strh r5, [r0, #0xe]
	strh r5, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	strb r2, [r0, #0x1f]
	str r5, [r0, #8]
	bl UpdateSpriteAnimation
	mov sb, r4
	movs r0, #0
	mov sl, r0
	movs r3, #0
_080A327A:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	adds r0, #0xd4
	adds r0, r6, r0
	str r7, [r0]
	adds r4, r5, #1
	lsls r2, r4, #3
	movs r1, #4
	add r1, sb
	mov r8, r1
	adds r1, r2, r1
	ldr r1, [r1]
	lsls r1, r1, #5
	adds r7, r7, r1
	add r2, sb
	ldrh r1, [r2]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r6, #0x1c]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r6, #0x20]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r1, #0x40
	strh r1, [r0, #0x14]
	strh r3, [r0, #0xe]
	strh r3, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	mov r5, sl
	strb r5, [r0, #0x1f]
	str r3, [r0, #8]
	str r3, [sp]
	bl UpdateSpriteAnimation
	lsls r4, r4, #0x18
	lsrs r5, r4, #0x18
	ldr r3, [sp]
	cmp r5, #1
	bls _080A327A
	movs r5, #0
	mov r3, r8
	subs r3, #4
	movs r0, #0
	mov r8, r0
	movs r4, #0
_080A32E0:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	movs r1, #0x92
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r0, r6, r0
	str r7, [r0]
	adds r2, r5, #3
	lsls r2, r2, #3
	adds r1, r3, #4
	adds r1, r2, r1
	ldr r1, [r1]
	lsls r1, r1, #5
	adds r7, r7, r1
	adds r2, r2, r3
	ldrh r1, [r2]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r6, #0x1c]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r6, #0x20]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r1, #0x40
	strh r1, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	mov r1, r8
	strb r1, [r0, #0x1f]
	str r4, [r0, #8]
	str r3, [sp]
	bl UpdateSpriteAnimation
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	ldr r3, [sp]
	cmp r5, #1
	bls _080A32E0
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A334C: .4byte 0x06010000
_080A3350: .4byte gUnknown_080D9980

	thumb_func_start sub_80A3354
sub_80A3354: @ 0x080A3354
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r7, r0, #0
	ldr r2, _080A3420 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #3
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r0, _080A3424 @ =gBgCntRegs
	mov r8, r0
	movs r1, #0
	mov sb, r1
	movs r4, #0
	ldr r0, _080A3428 @ =0x00005888
	mov r3, r8
	strh r0, [r3, #4]
	ldr r6, _080A342C @ =gBgScrollRegs
	ldr r0, [r7, #0x14]
	asrs r0, r0, #8
	strh r0, [r6, #8]
	ldr r0, [r7, #0x18]
	asrs r0, r0, #8
	strh r0, [r6, #0xa]
	adds r0, r7, #0
	adds r0, #0x2c
	ldr r1, _080A3430 @ =0x06008000
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _080A3434 @ =0x0600C000
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	movs r1, #0x96
	lsls r1, r1, #1
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	movs r5, #0x20
	strh r5, [r0, #0x26]
	strh r5, [r0, #0x28]
	adds r1, r7, #0
	adds r1, #0x56
	mov r3, sb
	strb r3, [r1]
	movs r1, #6
	strh r1, [r0, #0x2e]
	str r2, [sp]
	bl DrawBackground
	ldr r2, [sp]
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r0, _080A3438 @ =0x00000681
	mov r1, r8
	strh r0, [r1, #2]
	strh r4, [r6, #4]
	strh r4, [r6, #6]
	adds r0, r7, #0
	adds r0, #0x6c
	movs r1, #0xc0
	lsls r1, r1, #0x13
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _080A343C @ =0x06003000
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	ldr r1, _080A3440 @ =0x0000012B
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	strh r5, [r0, #0x26]
	strh r5, [r0, #0x28]
	adds r1, r7, #0
	adds r1, #0x96
	mov r2, sb
	strb r2, [r1]
	movs r1, #5
	strh r1, [r0, #0x2e]
	bl DrawBackground
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A3420: .4byte gDispCnt
_080A3424: .4byte gBgCntRegs
_080A3428: .4byte 0x00005888
_080A342C: .4byte gBgScrollRegs
_080A3430: .4byte 0x06008000
_080A3434: .4byte 0x0600C000
_080A3438: .4byte 0x00000681
_080A343C: .4byte 0x06003000
_080A3440: .4byte 0x0000012B

	thumb_func_start sub_80A3444
sub_80A3444: @ 0x080A3444
	push {r4, r5, r6, lr}
	ldr r0, _080A34F0 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	movs r6, #0
	ldrh r0, [r5, #6]
	cmp r0, #0
	bne _080A349A
	ldr r2, _080A34F4 @ =gBldRegs
	movs r0, #0xc2
	strh r0, [r2]
	ldr r4, _080A34F8 @ =gDispCnt
	ldrh r0, [r4]
	movs r3, #0xc0
	lsls r3, r3, #7
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r4]
	ldr r1, _080A34FC @ =gWinRegs
	movs r0, #0xff
	strh r0, [r1]
	strh r0, [r1, #2]
	strh r0, [r1, #6]
	ldr r0, _080A3500 @ =0x00001137
	strh r0, [r1, #8]
	strh r6, [r1, #0xa]
	movs r0, #0x10
	strh r0, [r2, #4]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r5, #4]
	movs r0, #1
	strh r0, [r5, #6]
	adds r0, r5, #0
	bl sub_80A3228
	ldrh r1, [r4]
	ldr r0, _080A3504 @ =0x0000FEFF
	ands r0, r1
	strh r0, [r4]
_080A349A:
	ldr r1, [r5, #0x10]
	ldr r0, _080A3508 @ =0x00002FFF
	cmp r1, r0
	ble _080A34B4
	ldr r2, _080A350C @ =0xFFFFFF00
	adds r0, r1, r2
	str r0, [r5, #0x10]
	movs r1, #0xc0
	lsls r1, r1, #6
	cmp r0, r1
	bgt _080A34B4
	str r1, [r5, #0x10]
	movs r6, #1
_080A34B4:
	ldr r1, [r5, #8]
	movs r2, #0x80
	lsls r2, r2, #7
	cmp r1, r2
	bgt _080A34D4
	movs r3, #0x80
	lsls r3, r3, #2
	adds r1, r1, r3
	str r1, [r5, #8]
	ldr r0, _080A3510 @ =0x00003FFF
	cmp r1, r0
	ble _080A34D4
	str r2, [r5, #8]
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
_080A34D4:
	ldr r0, _080A34F4 @ =gBldRegs
	ldrh r1, [r0, #4]
	adds r3, r0, #0
	cmp r1, #0
	beq _080A3514
	ldrh r0, [r5, #4]
	lsrs r0, r0, #8
	strh r0, [r3, #4]
	ldr r1, _080A350C @ =0xFFFFFF00
	adds r0, r1, #0
	ldrh r2, [r5, #4]
	adds r0, r0, r2
	strh r0, [r5, #4]
	b _080A351A
	.align 2, 0
_080A34F0: .4byte gCurTask
_080A34F4: .4byte gBldRegs
_080A34F8: .4byte gDispCnt
_080A34FC: .4byte gWinRegs
_080A3500: .4byte 0x00001137
_080A3504: .4byte 0x0000FEFF
_080A3508: .4byte 0x00002FFF
_080A350C: .4byte 0xFFFFFF00
_080A3510: .4byte 0x00003FFF
_080A3514:
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
_080A351A:
	ldr r4, _080A3554 @ =gWinRegs
	ldr r0, [r5, #0x10]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r5, #8]
	asrs r0, r0, #8
	adds r1, r1, r0
	movs r2, #0
	strh r1, [r4, #4]
	cmp r6, #3
	bne _080A354C
	movs r0, #0xf0
	strh r0, [r3]
	ldr r0, _080A3558 @ =0x00003017
	strh r0, [r4, #8]
	movs r0, #0x1f
	strh r0, [r3, #2]
	strh r2, [r3, #4]
	strh r2, [r5, #6]
	strh r2, [r5, #4]
	ldr r0, _080A355C @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A3560 @ =sub_80A3564
	str r0, [r1, #8]
_080A354C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A3554: .4byte gWinRegs
_080A3558: .4byte 0x00003017
_080A355C: .4byte gCurTask
_080A3560: .4byte sub_80A3564

	thumb_func_start sub_80A3564
sub_80A3564: @ 0x080A3564
	push {r4, r5, lr}
	ldr r0, _080A3590 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_80A3E3C
	ldr r1, _080A3594 @ =gBldRegs
	ldrh r0, [r1, #4]
	cmp r0, #0xf
	bhi _080A3598
	ldrh r0, [r4, #4]
	adds r0, #0x80
	strh r0, [r4, #4]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x18
	strh r0, [r1, #4]
	b _080A35AC
	.align 2, 0
_080A3590: .4byte gCurTask
_080A3594: .4byte gBldRegs
_080A3598:
	movs r0, #0
	bl sub_80C4C0C
	ldr r1, _080A35FC @ =gBgPalette
	strh r0, [r1]
	ldr r2, _080A3600 @ =gFlags
	ldr r0, [r2]
	movs r1, #1
	orrs r0, r1
	str r0, [r2]
_080A35AC:
	ldrh r0, [r4, #2]
	adds r0, #1
	movs r5, #0
	strh r0, [r4, #2]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x96
	bls _080A3618
	movs r3, #0x80
	lsls r3, r3, #5
	strh r3, [r4, #4]
	strh r5, [r4, #2]
	ldr r2, _080A3604 @ =gBldRegs
	movs r0, #0xd0
	strh r0, [r2]
	ldr r1, _080A3608 @ =gWinRegs
	ldr r0, _080A360C @ =0x00003017
	strh r0, [r1, #8]
	movs r0, #0x1f
	strh r0, [r2, #2]
	movs r0, #0x10
	strh r0, [r2, #4]
	strh r5, [r4, #6]
	strh r3, [r4, #4]
	movs r0, #0
	bl sub_80C4C0C
	ldr r1, _080A35FC @ =gBgPalette
	strh r0, [r1]
	ldr r2, _080A3600 @ =gFlags
	ldr r0, [r2]
	movs r1, #1
	orrs r0, r1
	str r0, [r2]
	ldr r0, _080A3610 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A3614 @ =sub_80A3664
	str r0, [r1, #8]
	b _080A3650
	.align 2, 0
_080A35FC: .4byte gBgPalette
_080A3600: .4byte gFlags
_080A3604: .4byte gBldRegs
_080A3608: .4byte gWinRegs
_080A360C: .4byte 0x00003017
_080A3610: .4byte gCurTask
_080A3614: .4byte sub_80A3664
_080A3618:
	ldr r2, _080A3658 @ =gWinRegs
	ldr r0, [r4, #0x10]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r4, #8]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2, #4]
	ldr r1, _080A365C @ =gBgScrollRegs
	ldr r0, [r4, #0x14]
	asrs r0, r0, #8
	strh r0, [r1, #8]
	ldr r0, [r4, #0x18]
	asrs r0, r0, #8
	strh r0, [r1, #0xa]
	ldrb r0, [r4]
	cmp r0, #0
	bne _080A3650
	ldr r0, _080A3660 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080A3650
	movs r0, #2
	bl sub_808ADF0
_080A3650:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A3658: .4byte gWinRegs
_080A365C: .4byte gBgScrollRegs
_080A3660: .4byte gPressedKeys

	thumb_func_start sub_80A3664
sub_80A3664: @ 0x080A3664
	push {r4, r5, lr}
	ldr r5, _080A36A4 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldrb r0, [r4]
	cmp r0, #0
	bne _080A367E
	adds r0, r4, #0
	bl sub_80A3E90
_080A367E:
	ldr r2, _080A36A8 @ =gBldRegs
	ldrh r1, [r2, #4]
	cmp r1, #0
	bne _080A36B0
	strh r1, [r2, #4]
	ldrh r0, [r4, #2]
	adds r0, #1
	strh r0, [r4, #2]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x3c
	bls _080A36C0
	strh r1, [r4, #2]
	strh r1, [r4, #4]
	ldr r1, [r5]
	ldr r0, _080A36AC @ =sub_80A3710
	str r0, [r1, #8]
	b _080A36F8
	.align 2, 0
_080A36A4: .4byte gCurTask
_080A36A8: .4byte gBldRegs
_080A36AC: .4byte sub_80A3710
_080A36B0:
	ldr r1, _080A3700 @ =0xFFFFFF00
	adds r0, r1, #0
	ldrh r1, [r4, #4]
	adds r0, r0, r1
	strh r0, [r4, #4]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x18
	strh r0, [r2, #4]
_080A36C0:
	ldr r2, _080A3704 @ =gWinRegs
	ldr r0, [r4, #0x10]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r4, #8]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2, #4]
	ldr r1, _080A3708 @ =gBgScrollRegs
	ldr r0, [r4, #0x14]
	asrs r0, r0, #8
	strh r0, [r1, #8]
	ldr r0, [r4, #0x18]
	asrs r0, r0, #8
	strh r0, [r1, #0xa]
	ldrb r0, [r4]
	cmp r0, #0
	bne _080A36F8
	ldr r0, _080A370C @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080A36F8
	movs r0, #2
	bl sub_808ADF0
_080A36F8:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A3700: .4byte 0xFFFFFF00
_080A3704: .4byte gWinRegs
_080A3708: .4byte gBgScrollRegs
_080A370C: .4byte gPressedKeys

	thumb_func_start sub_80A3710
sub_80A3710: @ 0x080A3710
	push {r4, r5, lr}
	ldr r5, _080A3748 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldrb r0, [r4]
	cmp r0, #0
	bne _080A372A
	adds r0, r4, #0
	bl sub_80A3E90
_080A372A:
	ldr r1, _080A374C @ =gBldRegs
	ldrh r0, [r1, #4]
	cmp r0, #0xf
	bls _080A375C
	movs r2, #0
	movs r0, #0x10
	strh r0, [r1, #4]
	ldr r1, _080A3750 @ =gWinRegs
	ldr r0, _080A3754 @ =0x00002017
	strh r0, [r1, #8]
	strh r2, [r4, #2]
	ldr r1, [r5]
	ldr r0, _080A3758 @ =sub_80A37B8
	str r0, [r1, #8]
	b _080A37A6
	.align 2, 0
_080A3748: .4byte gCurTask
_080A374C: .4byte gBldRegs
_080A3750: .4byte gWinRegs
_080A3754: .4byte 0x00002017
_080A3758: .4byte sub_80A37B8
_080A375C:
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r2, #0
	ldrh r2, [r4, #4]
	adds r0, r0, r2
	strh r0, [r4, #4]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x18
	strh r0, [r1, #4]
	ldr r2, _080A37AC @ =gWinRegs
	ldr r0, [r4, #0x10]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r4, #8]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2, #4]
	ldr r1, _080A37B0 @ =gBgScrollRegs
	ldr r0, [r4, #0x14]
	asrs r0, r0, #8
	strh r0, [r1, #8]
	ldr r0, [r4, #0x18]
	asrs r0, r0, #8
	strh r0, [r1, #0xa]
	ldrb r0, [r4]
	cmp r0, #0
	bne _080A37A6
	ldr r0, _080A37B4 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080A37A6
	movs r0, #2
	bl sub_808ADF0
_080A37A6:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A37AC: .4byte gWinRegs
_080A37B0: .4byte gBgScrollRegs
_080A37B4: .4byte gPressedKeys

	thumb_func_start sub_80A37B8
sub_80A37B8: @ 0x080A37B8
	push {r4, r5, lr}
	ldr r5, _080A37F0 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_80A3EAC
	adds r0, r4, #0
	bl sub_80A3E60
	cmp r0, #1
	bne _080A37F8
	ldrh r0, [r4, #2]
	adds r0, #1
	strh r0, [r4, #2]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x3c
	bls _080A37F8
	movs r0, #0
	strh r0, [r4, #2]
	ldr r1, [r5]
	ldr r0, _080A37F4 @ =sub_80A3844
	str r0, [r1, #8]
	b _080A3830
	.align 2, 0
_080A37F0: .4byte gCurTask
_080A37F4: .4byte sub_80A3844
_080A37F8:
	ldr r2, _080A3838 @ =gWinRegs
	ldr r0, [r4, #0x10]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r4, #8]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2, #4]
	ldr r1, _080A383C @ =gBgScrollRegs
	ldr r0, [r4, #0x14]
	asrs r0, r0, #8
	strh r0, [r1, #8]
	ldr r0, [r4, #0x18]
	asrs r0, r0, #8
	strh r0, [r1, #0xa]
	ldrb r0, [r4]
	cmp r0, #0
	bne _080A3830
	ldr r0, _080A3840 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080A3830
	movs r0, #2
	bl sub_808ADF0
_080A3830:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A3838: .4byte gWinRegs
_080A383C: .4byte gBgScrollRegs
_080A3840: .4byte gPressedKeys

	thumb_func_start sub_80A3844
sub_80A3844: @ 0x080A3844
	push {r4, r5, lr}
	ldr r5, _080A386C @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_80A3EDC
	ldrh r0, [r4, #2]
	cmp r0, #0x13
	bls _080A3870
	ldrb r0, [r4]
	bl sub_80A38C0
	ldr r0, [r5]
	bl TaskDestroy
	b _080A38AC
	.align 2, 0
_080A386C: .4byte gCurTask
_080A3870:
	adds r0, #1
	strh r0, [r4, #2]
	ldr r2, _080A38B4 @ =gWinRegs
	ldr r0, [r4, #0x10]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r4, #8]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2, #4]
	ldr r1, _080A38B8 @ =gBgScrollRegs
	ldr r0, [r4, #0x14]
	asrs r0, r0, #8
	strh r0, [r1, #8]
	ldr r0, [r4, #0x18]
	asrs r0, r0, #8
	strh r0, [r1, #0xa]
	ldrb r0, [r4]
	cmp r0, #0
	bne _080A38AC
	ldr r0, _080A38BC @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080A38AC
	movs r0, #2
	bl sub_808ADF0
_080A38AC:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A38B4: .4byte gWinRegs
_080A38B8: .4byte gBgScrollRegs
_080A38BC: .4byte gPressedKeys

	thumb_func_start sub_80A38C0
sub_80A38C0: @ 0x080A38C0
	push {r4, r5, lr}
	sub sp, #8
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r1, _080A3964 @ =gDispCnt
	movs r2, #0x82
	lsls r2, r2, #5
	adds r0, r2, #0
	strh r0, [r1]
	ldr r0, _080A3968 @ =sub_80A39FC
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r1, _080A396C @ =sub_80A3F10
	str r1, [sp]
	movs r1, #0x94
	movs r3, #0
	bl TaskCreate
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	movs r2, #0
	strb r4, [r0]
	movs r1, #0xc0
	lsls r1, r1, #6
	str r1, [r0, #0x10]
	movs r1, #0x80
	lsls r1, r1, #7
	str r1, [r0, #8]
	movs r4, #0
	strh r2, [r0, #2]
	str r2, [sp, #4]
	ldr r3, _080A3970 @ =0x040000D4
	add r1, sp, #4
	str r1, [r3]
	ldr r1, _080A3974 @ =gBgCntRegs
	ldrh r2, [r1]
	movs r1, #0xc
	ands r1, r2
	lsls r1, r1, #0xc
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r1, r2
	str r1, [r3, #4]
	ldr r1, _080A3978 @ =0x85000010
	str r1, [r3, #8]
	ldr r1, [r3, #8]
	ldr r5, _080A397C @ =gUnknown_03006230
	strb r4, [r5, #1]
	ldr r1, _080A3980 @ =gUnknown_03003590
	strb r4, [r1, #4]
	strb r4, [r1, #5]
	movs r2, #0xff
	strb r2, [r1, #6]
	movs r3, #0x40
	strb r3, [r1, #7]
	strb r4, [r5, #2]
	strb r4, [r1, #8]
	strb r4, [r1, #9]
	movs r2, #1
	rsbs r2, r2, #0
	strb r2, [r1, #0xa]
	strb r3, [r1, #0xb]
	bl sub_80A398C
	movs r0, #0
	bl sub_80C4C0C
	ldr r1, _080A3984 @ =gBgPalette
	strh r0, [r1]
	ldr r2, _080A3988 @ =gFlags
	ldr r0, [r2]
	movs r1, #1
	orrs r0, r1
	str r0, [r2]
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A3964: .4byte gDispCnt
_080A3968: .4byte sub_80A39FC
_080A396C: .4byte sub_80A3F10
_080A3970: .4byte 0x040000D4
_080A3974: .4byte gBgCntRegs
_080A3978: .4byte 0x85000010
_080A397C: .4byte gUnknown_03006230
_080A3980: .4byte gUnknown_03003590
_080A3984: .4byte gBgPalette
_080A3988: .4byte gFlags

	thumb_func_start sub_80A398C
sub_80A398C: @ 0x080A398C
	push {r4, lr}
	adds r3, r0, #0
	ldr r2, _080A39E8 @ =gDispCnt
	ldrh r0, [r2]
	movs r4, #0x80
	lsls r4, r4, #2
	adds r1, r4, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080A39EC @ =gBgCntRegs
	movs r4, #0
	movs r2, #0
	ldr r0, _080A39F0 @ =0x00000D81
	strh r0, [r1, #2]
	ldr r0, _080A39F4 @ =gBgScrollRegs
	strh r2, [r0, #4]
	strh r2, [r0, #6]
	adds r0, r3, #0
	adds r0, #0x54
	movs r1, #0xc0
	lsls r1, r1, #0x13
	str r1, [r0, #4]
	strh r2, [r0, #0xa]
	ldr r1, _080A39F8 @ =0x06006800
	str r1, [r0, #0xc]
	strh r2, [r0, #0x18]
	strh r2, [r0, #0x1a]
	movs r1, #0x97
	lsls r1, r1, #1
	strh r1, [r0, #0x1c]
	strh r2, [r0, #0x1e]
	strh r2, [r0, #0x20]
	strh r2, [r0, #0x22]
	strh r2, [r0, #0x24]
	movs r1, #0x20
	strh r1, [r0, #0x26]
	strh r1, [r0, #0x28]
	adds r3, #0x7e
	strb r4, [r3]
	movs r1, #5
	strh r1, [r0, #0x2e]
	bl DrawBackground
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A39E8: .4byte gDispCnt
_080A39EC: .4byte gBgCntRegs
_080A39F0: .4byte 0x00000D81
_080A39F4: .4byte gBgScrollRegs
_080A39F8: .4byte 0x06006800

	thumb_func_start sub_80A39FC
sub_80A39FC: @ 0x080A39FC
	push {r4, r5, r6, r7, lr}
	ldr r0, _080A3A60 @ =gCurTask
	ldr r6, [r0]
	ldrh r3, [r6, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r3, r3, r0
	ldr r4, _080A3A64 @ =gBldRegs
	movs r5, #0
	ldr r0, _080A3A68 @ =0x00003FFF
	strh r0, [r4]
	ldr r2, _080A3A6C @ =gDispCnt
	ldrh r0, [r2]
	movs r7, #0xc0
	lsls r7, r7, #7
	adds r1, r7, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r2, _080A3A70 @ =gWinRegs
	movs r0, #0xff
	strh r0, [r2]
	strh r0, [r2, #2]
	strh r0, [r2, #6]
	ldr r0, _080A3A74 @ =0x00003117
	strh r0, [r2, #8]
	strh r5, [r2, #0xa]
	movs r5, #0x10
	strh r5, [r4, #4]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r3, #4]
	movs r0, #1
	strh r0, [r3, #6]
	ldr r0, [r3, #0x10]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r3, #8]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2, #4]
	movs r0, #0x1f
	strh r0, [r4, #2]
	strh r5, [r4, #4]
	ldr r0, _080A3A78 @ =sub_80A3A7C
	str r0, [r6, #8]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A3A60: .4byte gCurTask
_080A3A64: .4byte gBldRegs
_080A3A68: .4byte 0x00003FFF
_080A3A6C: .4byte gDispCnt
_080A3A70: .4byte gWinRegs
_080A3A74: .4byte 0x00003117
_080A3A78: .4byte sub_80A3A7C

	thumb_func_start sub_80A3A7C
sub_80A3A7C: @ 0x080A3A7C
	push {r4, r5, r6, r7, lr}
	ldr r6, _080A3B14 @ =gCurTask
	ldr r0, [r6]
	ldrh r3, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r3, r0
	ldr r2, _080A3B18 @ =gWinRegs
	ldr r0, [r4, #0x10]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r4, #8]
	asrs r0, r0, #8
	adds r1, r1, r0
	movs r5, #0
	strh r1, [r2, #4]
	ldrh r0, [r4, #2]
	adds r0, #1
	strh r0, [r4, #2]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #4
	bne _080A3ABA
	ldr r0, _080A3B1C @ =gDispCnt
	ldrh r1, [r0]
	movs r7, #0x80
	lsls r7, r7, #3
	adds r2, r7, #0
	orrs r1, r2
	strh r1, [r0]
_080A3ABA:
	ldrh r0, [r4, #2]
	cmp r0, #5
	bne _080A3B02
	ldr r1, _080A3B20 @ =gBgCntRegs
	ldr r0, _080A3B24 @ =0x00005D88
	strh r0, [r1, #4]
	ldr r0, _080A3B28 @ =gBgScrollRegs
	strh r5, [r0, #8]
	strh r5, [r0, #0xa]
	ldr r1, _080A3B2C @ =0x03000014
	adds r0, r3, r1
	ldr r1, _080A3B30 @ =0x06008000
	str r1, [r0, #4]
	strh r5, [r0, #0xa]
	ldr r1, _080A3B34 @ =0x0600E800
	str r1, [r0, #0xc]
	strh r5, [r0, #0x18]
	strh r5, [r0, #0x1a]
	movs r1, #0x98
	lsls r1, r1, #1
	strh r1, [r0, #0x1c]
	strh r5, [r0, #0x1e]
	strh r5, [r0, #0x20]
	strh r5, [r0, #0x22]
	strh r5, [r0, #0x24]
	movs r1, #0x20
	strh r1, [r0, #0x26]
	strh r1, [r0, #0x28]
	ldr r7, _080A3B38 @ =0x0300003E
	adds r2, r3, r7
	movs r1, #0
	strb r1, [r2]
	movs r1, #6
	strh r1, [r0, #0x2e]
	bl DrawBackground
_080A3B02:
	ldrh r0, [r4, #2]
	cmp r0, #0xa
	bls _080A3B40
	strh r5, [r4, #6]
	ldr r1, [r6]
	ldr r0, _080A3B3C @ =sub_80A3B64
	str r0, [r1, #8]
	b _080A3B58
	.align 2, 0
_080A3B14: .4byte gCurTask
_080A3B18: .4byte gWinRegs
_080A3B1C: .4byte gDispCnt
_080A3B20: .4byte gBgCntRegs
_080A3B24: .4byte 0x00005D88
_080A3B28: .4byte gBgScrollRegs
_080A3B2C: .4byte 0x03000014
_080A3B30: .4byte 0x06008000
_080A3B34: .4byte 0x0600E800
_080A3B38: .4byte 0x0300003E
_080A3B3C: .4byte sub_80A3B64
_080A3B40:
	ldrb r0, [r4]
	cmp r0, #0
	bne _080A3B58
	ldr r0, _080A3B60 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080A3B58
	movs r0, #2
	bl sub_808ADF0
_080A3B58:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A3B60: .4byte gPressedKeys

	thumb_func_start sub_80A3B64
sub_80A3B64: @ 0x080A3B64
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r0, _080A3BD0 @ =gCurTask
	mov r8, r0
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r3, r1, r0
	ldr r5, _080A3BD4 @ =gWinRegs
	ldr r0, [r3, #0x10]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r3, #8]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r5, #4]
	ldrh r4, [r3, #6]
	ldr r6, _080A3BD8 @ =gBldRegs
	cmp r4, #0
	bne _080A3BBA
	ldr r0, _080A3BDC @ =0x00003FBF
	strh r0, [r6]
	ldr r2, _080A3BE0 @ =gDispCnt
	ldrh r0, [r2]
	movs r7, #0xc0
	lsls r7, r7, #7
	adds r1, r7, #0
	orrs r0, r1
	strh r0, [r2]
	movs r0, #0xff
	strh r0, [r5]
	strh r0, [r5, #2]
	strh r0, [r5, #6]
	movs r0, #0x24
	strh r0, [r5, #8]
	strh r4, [r5, #0xa]
	strh r4, [r3, #4]
	movs r0, #1
	strh r0, [r3, #6]
	strh r4, [r6, #4]
_080A3BBA:
	ldrh r0, [r6, #4]
	cmp r0, #0xe
	bhi _080A3BE4
	ldrh r0, [r3, #4]
	adds r0, #0x30
	strh r0, [r3, #4]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x18
	strh r0, [r6, #4]
	b _080A3BF2
	.align 2, 0
_080A3BD0: .4byte gCurTask
_080A3BD4: .4byte gWinRegs
_080A3BD8: .4byte gBldRegs
_080A3BDC: .4byte 0x00003FBF
_080A3BE0: .4byte gDispCnt
_080A3BE4:
	ldrb r0, [r3]
	bl sub_80A3BFC
	mov r1, r8
	ldr r0, [r1]
	bl TaskDestroy
_080A3BF2:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80A3BFC
sub_80A3BFC: @ 0x080A3BFC
	push {r4, r5, lr}
	sub sp, #8
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r1, _080A3C9C @ =gDispCnt
	ldr r2, _080A3CA0 @ =0x00007040
	adds r0, r2, #0
	strh r0, [r1]
	ldr r0, _080A3CA4 @ =sub_80A3D3C
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r1, _080A3CA8 @ =sub_80A3F14
	str r1, [sp]
	movs r1, #0x54
	movs r3, #0
	bl TaskCreate
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	movs r2, #0
	strb r4, [r0]
	movs r1, #0xc0
	lsls r1, r1, #6
	str r1, [r0, #0x10]
	movs r1, #0x80
	lsls r1, r1, #7
	str r1, [r0, #8]
	movs r4, #0
	strh r2, [r0, #2]
	str r2, [sp, #4]
	ldr r3, _080A3CAC @ =0x040000D4
	add r1, sp, #4
	str r1, [r3]
	ldr r1, _080A3CB0 @ =gBgCntRegs
	ldrh r2, [r1]
	movs r1, #0xc
	ands r1, r2
	lsls r1, r1, #0xc
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r1, r2
	str r1, [r3, #4]
	ldr r1, _080A3CB4 @ =0x85000010
	str r1, [r3, #8]
	ldr r1, [r3, #8]
	ldr r5, _080A3CB8 @ =gUnknown_03006230
	strb r4, [r5, #1]
	ldr r1, _080A3CBC @ =gUnknown_03003590
	strb r4, [r1, #4]
	strb r4, [r1, #5]
	movs r2, #0xff
	strb r2, [r1, #6]
	movs r3, #0x40
	strb r3, [r1, #7]
	strb r4, [r5, #2]
	strb r4, [r1, #8]
	strb r4, [r1, #9]
	movs r2, #1
	rsbs r2, r2, #0
	strb r2, [r1, #0xa]
	strb r3, [r1, #0xb]
	bl sub_80A3CC8
	movs r0, #0
	bl sub_80C4C0C
	ldr r1, _080A3CC0 @ =gBgPalette
	strh r0, [r1]
	ldr r2, _080A3CC4 @ =gFlags
	ldr r0, [r2]
	movs r1, #1
	orrs r0, r1
	str r0, [r2]
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A3C9C: .4byte gDispCnt
_080A3CA0: .4byte 0x00007040
_080A3CA4: .4byte sub_80A3D3C
_080A3CA8: .4byte sub_80A3F14
_080A3CAC: .4byte 0x040000D4
_080A3CB0: .4byte gBgCntRegs
_080A3CB4: .4byte 0x85000010
_080A3CB8: .4byte gUnknown_03006230
_080A3CBC: .4byte gUnknown_03003590
_080A3CC0: .4byte gBgPalette
_080A3CC4: .4byte gFlags

	thumb_func_start sub_80A3CC8
sub_80A3CC8: @ 0x080A3CC8
	push {r4, lr}
	adds r3, r0, #0
	ldr r2, _080A3D20 @ =gDispCnt
	ldrh r0, [r2]
	movs r4, #0x80
	lsls r4, r4, #1
	adds r1, r4, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080A3D24 @ =gBgCntRegs
	movs r4, #0
	movs r2, #0
	ldr r0, _080A3D28 @ =0x00005888
	strh r0, [r1]
	ldr r0, _080A3D2C @ =gBgScrollRegs
	strh r2, [r0]
	strh r2, [r0, #2]
	adds r0, r3, #0
	adds r0, #0x14
	ldr r1, _080A3D30 @ =0x06008000
	str r1, [r0, #4]
	strh r2, [r0, #0xa]
	ldr r1, _080A3D34 @ =0x0600C000
	str r1, [r0, #0xc]
	strh r2, [r0, #0x18]
	strh r2, [r0, #0x1a]
	ldr r1, _080A3D38 @ =0x0000012F
	strh r1, [r0, #0x1c]
	strh r2, [r0, #0x1e]
	strh r2, [r0, #0x20]
	strh r2, [r0, #0x22]
	strh r2, [r0, #0x24]
	movs r1, #0x20
	strh r1, [r0, #0x26]
	strh r1, [r0, #0x28]
	adds r3, #0x3e
	strb r4, [r3]
	movs r1, #4
	strh r1, [r0, #0x2e]
	bl DrawBackground
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A3D20: .4byte gDispCnt
_080A3D24: .4byte gBgCntRegs
_080A3D28: .4byte 0x00005888
_080A3D2C: .4byte gBgScrollRegs
_080A3D30: .4byte 0x06008000
_080A3D34: .4byte 0x0600C000
_080A3D38: .4byte 0x0000012F

	thumb_func_start sub_80A3D3C
sub_80A3D3C: @ 0x080A3D3C
	push {r4, r5, r6, r7, lr}
	ldr r0, _080A3D94 @ =gCurTask
	ldr r6, [r0]
	ldrh r3, [r6, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r3, r3, r0
	ldr r5, _080A3D98 @ =gBldRegs
	movs r4, #0
	ldr r0, _080A3D9C @ =0x00003FBF
	strh r0, [r5]
	ldr r2, _080A3DA0 @ =gDispCnt
	ldrh r0, [r2]
	movs r7, #0xc0
	lsls r7, r7, #7
	adds r1, r7, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r2, _080A3DA4 @ =gWinRegs
	movs r0, #0xff
	strh r0, [r2]
	strh r0, [r2, #2]
	strh r0, [r2, #6]
	movs r0, #0x21
	strh r0, [r2, #8]
	strh r4, [r2, #0xa]
	strh r4, [r5, #4]
	strh r4, [r3, #4]
	movs r0, #1
	strh r0, [r3, #6]
	ldr r0, [r3, #0x10]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r3, #8]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2, #4]
	ldr r0, _080A3DA8 @ =sub_80A3DAC
	str r0, [r6, #8]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A3D94: .4byte gCurTask
_080A3D98: .4byte gBldRegs
_080A3D9C: .4byte 0x00003FBF
_080A3DA0: .4byte gDispCnt
_080A3DA4: .4byte gWinRegs
_080A3DA8: .4byte sub_80A3DAC

	thumb_func_start sub_80A3DAC
sub_80A3DAC: @ 0x080A3DAC
	push {lr}
	ldr r0, _080A3DF4 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r3, r1, r0
	ldr r2, _080A3DF8 @ =gWinRegs
	ldr r0, [r3, #0x10]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r3, #8]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2, #4]
	ldr r1, _080A3DFC @ =gBldRegs
	ldrh r0, [r1, #4]
	cmp r0, #0xe
	bhi _080A3E04
	ldrh r0, [r3, #4]
	adds r0, #0x30
	strh r0, [r3, #4]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x18
	strh r0, [r1, #4]
	ldrb r0, [r3]
	cmp r0, #0
	bne _080A3E2E
	ldr r0, _080A3E00 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080A3E2E
	b _080A3E28
	.align 2, 0
_080A3DF4: .4byte gCurTask
_080A3DF8: .4byte gWinRegs
_080A3DFC: .4byte gBldRegs
_080A3E00: .4byte gPressedKeys
_080A3E04:
	ldrb r0, [r3]
	cmp r0, #0
	beq _080A3E12
	movs r0, #5
	bl sub_80A209C
	b _080A3E18
_080A3E12:
	movs r0, #3
	bl sub_80A209C
_080A3E18:
	ldr r0, _080A3E24 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
	b _080A3E2E
	.align 2, 0
_080A3E24: .4byte gCurTask
_080A3E28:
	movs r0, #2
	bl sub_808ADF0
_080A3E2E:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80A3E34
sub_80A3E34: @ 0x080A3E34
	bx lr
	.align 2, 0

	thumb_func_start sub_80A3E38
sub_80A3E38: @ 0x080A3E38
	bx lr
	.align 2, 0

	thumb_func_start sub_80A3E3C
sub_80A3E3C: @ 0x080A3E3C
	push {lr}
	adds r1, r0, #0
	ldr r2, [r1, #0x18]
	cmp r2, #0
	bge _080A3E5A
	ldrb r0, [r1, #1]
	lsls r0, r0, #8
	adds r0, r2, r0
	str r0, [r1, #0x18]
	cmp r0, #0
	blt _080A3E5A
	movs r0, #0
	str r0, [r1, #0x18]
	movs r0, #1
	b _080A3E5C
_080A3E5A:
	movs r0, #0
_080A3E5C:
	pop {r1}
	bx r1

	thumb_func_start sub_80A3E60
sub_80A3E60: @ 0x080A3E60
	push {lr}
	adds r2, r0, #0
	ldr r1, [r2, #0x20]
	ldr r0, _080A3E84 @ =0x00006FFF
	cmp r1, r0
	ble _080A3E88
	subs r1, #0x80
	ldrb r0, [r2, #1]
	lsls r0, r0, #7
	subs r1, r1, r0
	str r1, [r2, #0x20]
	movs r0, #0xe0
	lsls r0, r0, #7
	cmp r1, r0
	bgt _080A3E88
	str r0, [r2, #0x20]
	movs r0, #1
	b _080A3E8A
	.align 2, 0
_080A3E84: .4byte 0x00006FFF
_080A3E88:
	movs r0, #0
_080A3E8A:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80A3E90
sub_80A3E90: @ 0x080A3E90
	push {lr}
	adds r2, r0, #0
	adds r2, #0xac
	ldr r1, [r0, #0x24]
	asrs r1, r1, #8
	strh r1, [r2, #0x10]
	ldr r0, [r0, #0x28]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	adds r0, r2, #0
	bl DisplaySprite
	pop {r0}
	bx r0

	thumb_func_start sub_80A3EAC
sub_80A3EAC: @ 0x080A3EAC
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #0
_080A3EB2:
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #3
	adds r0, #0xd4
	adds r0, r5, r0
	ldr r1, [r5, #0x1c]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r5, #0x20]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	bl DisplaySprite
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #1
	bls _080A3EB2
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_80A3EDC
sub_80A3EDC: @ 0x080A3EDC
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #0
_080A3EE2:
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #3
	movs r1, #0x92
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r0, r5, r0
	ldr r1, [r5, #0x1c]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r5, #0x20]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	bl DisplaySprite
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #1
	bls _080A3EE2
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_80A3F10
sub_80A3F10: @ 0x080A3F10
	bx lr
	.align 2, 0

	thumb_func_start sub_80A3F14
sub_80A3F14: @ 0x080A3F14
	bx lr
	.align 2, 0

	thumb_func_start sub_80A3F18
sub_80A3F18: @ 0x080A3F18
	push {r4, r5, r6, lr}
	sub sp, #4
	ldr r1, _080A3FB4 @ =gDispCnt
	movs r2, #0x82
	lsls r2, r2, #5
	adds r0, r2, #0
	strh r0, [r1]
	ldr r0, _080A3FB8 @ =sub_80A40A0
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r1, _080A3FBC @ =sub_80A43DC
	str r1, [sp]
	movs r1, #0x94
	movs r3, #0
	bl TaskCreate
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	movs r1, #0xa0
	lsls r1, r1, #7
	str r1, [r4, #0x14]
	movs r2, #0
	str r2, [r4, #0xc]
	ldr r0, _080A3FC0 @ =0xFFFF8800
	str r0, [r4, #0x18]
	movs r0, #0x96
	lsls r0, r0, #9
	str r0, [r4, #0x20]
	str r1, [r4, #0x24]
	str r1, [r4, #0x1c]
	movs r0, #4
	strb r0, [r4]
	movs r6, #1
	strb r6, [r4, #3]
	strb r2, [r4, #2]
	movs r0, #0x19
	strb r0, [r4, #1]
	movs r5, #0
	strh r2, [r4, #8]
	strh r2, [r4, #6]
	strh r2, [r4, #4]
	adds r0, r4, #0
	bl sub_80A3FDC
	ldr r0, _080A3FC4 @ =0x0000FFFF
	bl sub_80C4C0C
	ldr r1, _080A3FC8 @ =gBgPalette
	strh r0, [r1]
	ldr r1, _080A3FCC @ =gFlags
	ldr r0, [r1]
	orrs r0, r6
	str r0, [r1]
	ldr r0, _080A3FD0 @ =gUnknown_03006230
	strb r5, [r0]
	ldr r1, _080A3FD4 @ =gUnknown_03003590
	strb r5, [r1]
	strb r5, [r1, #1]
	movs r0, #0xff
	strb r0, [r1, #2]
	movs r0, #0x40
	strb r0, [r1, #3]
	ldr r2, _080A3FD8 @ =gWinRegs
	ldr r0, [r4, #0x14]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r4, #0xc]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2, #4]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A3FB4: .4byte gDispCnt
_080A3FB8: .4byte sub_80A40A0
_080A3FBC: .4byte sub_80A43DC
_080A3FC0: .4byte 0xFFFF8800
_080A3FC4: .4byte 0x0000FFFF
_080A3FC8: .4byte gBgPalette
_080A3FCC: .4byte gFlags
_080A3FD0: .4byte gUnknown_03006230
_080A3FD4: .4byte gUnknown_03003590
_080A3FD8: .4byte gWinRegs

	thumb_func_start sub_80A3FDC
sub_80A3FDC: @ 0x080A3FDC
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldrb r3, [r6, #2]
	ldr r1, _080A407C @ =0x06010000
	adds r0, #0x2c
	str r1, [r6, #0x2c]
	movs r2, #0xd0
	lsls r2, r2, #3
	adds r1, r1, r2
	str r1, [r6, #0x28]
	ldr r1, _080A4080 @ =gUnknown_080D99A8
	lsls r3, r3, #3
	adds r3, r3, r1
	ldrh r1, [r3]
	movs r5, #0
	movs r4, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r3, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r6, #0x20]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r6, #0x24]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r1, #0xa0
	lsls r1, r1, #2
	strh r1, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	strb r5, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	ldr r2, _080A4084 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #1
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080A4088 @ =gBgCntRegs
	ldr r0, _080A408C @ =0x00005888
	strh r0, [r1]
	ldr r1, _080A4090 @ =gBgScrollRegs
	strh r4, [r1]
	movs r0, #0x6e
	strh r0, [r1, #2]
	adds r0, r6, #0
	adds r0, #0x54
	ldr r1, _080A4094 @ =0x06008000
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _080A4098 @ =0x0600C000
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	ldr r1, _080A409C @ =0x0000012F
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	movs r1, #0x20
	strh r1, [r0, #0x26]
	strh r1, [r0, #0x28]
	adds r1, r6, #0
	adds r1, #0x7e
	strb r5, [r1]
	movs r1, #4
	strh r1, [r0, #0x2e]
	bl DrawBackground
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A407C: .4byte 0x06010000
_080A4080: .4byte gUnknown_080D99A8
_080A4084: .4byte gDispCnt
_080A4088: .4byte gBgCntRegs
_080A408C: .4byte 0x00005888
_080A4090: .4byte gBgScrollRegs
_080A4094: .4byte 0x06008000
_080A4098: .4byte 0x0600C000
_080A409C: .4byte 0x0000012F

	thumb_func_start sub_80A40A0
sub_80A40A0: @ 0x080A40A0
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	ldr r0, _080A4178 @ =gCurTask
	ldr r0, [r0]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r4, r0
	movs r6, #0
	ldrh r0, [r5, #8]
	cmp r0, #0
	bne _080A4102
	ldr r3, _080A417C @ =gBldRegs
	ldr r0, _080A4180 @ =0x00003FFF
	strh r0, [r3]
	ldr r2, _080A4184 @ =gDispCnt
	ldrh r0, [r2]
	movs r7, #0xc0
	lsls r7, r7, #7
	adds r1, r7, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080A4188 @ =gWinRegs
	movs r0, #0xff
	strh r0, [r1]
	strh r0, [r1, #2]
	strh r0, [r1, #6]
	ldr r0, _080A418C @ =0x00001011
	strh r0, [r1, #8]
	strh r6, [r1, #0xa]
	movs r0, #0x10
	strh r0, [r3, #4]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r5, #6]
	movs r0, #1
	strh r0, [r5, #8]
	ldr r1, _080A4190 @ =0x03000002
	adds r0, r4, r1
	ldr r2, _080A4194 @ =0x03000001
	adds r1, r4, r2
	ldr r3, _080A4198 @ =0x03000018
	adds r2, r4, r3
	ldr r7, _080A419C @ =0x0300001C
	adds r3, r4, r7
	ldr r4, [r5, #0x28]
	str r4, [sp]
	bl sub_809BF3C
_080A4102:
	ldr r1, [r5, #0x14]
	ldr r0, _080A4180 @ =0x00003FFF
	cmp r1, r0
	ble _080A411C
	ldr r2, _080A41A0 @ =0xFFFFFF00
	adds r0, r1, r2
	str r0, [r5, #0x14]
	movs r1, #0x80
	lsls r1, r1, #7
	cmp r0, r1
	bgt _080A411C
	str r1, [r5, #0x14]
	movs r6, #1
_080A411C:
	ldr r1, [r5, #0xc]
	movs r2, #0x80
	lsls r2, r2, #6
	cmp r1, r2
	bgt _080A413C
	movs r3, #0x80
	lsls r3, r3, #2
	adds r1, r1, r3
	str r1, [r5, #0xc]
	ldr r0, _080A41A4 @ =0x00001FFF
	cmp r1, r0
	ble _080A413C
	str r2, [r5, #0xc]
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
_080A413C:
	ldr r3, _080A4188 @ =gWinRegs
	ldr r0, [r5, #0x14]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r5, #0xc]
	asrs r0, r0, #8
	adds r1, r1, r0
	movs r2, #0
	strh r1, [r3, #4]
	cmp r6, #2
	bne _080A416E
	ldr r1, _080A417C @ =gBldRegs
	ldr r0, _080A4180 @ =0x00003FFF
	strh r0, [r1]
	ldr r0, _080A418C @ =0x00001011
	strh r0, [r3, #8]
	strh r2, [r1, #2]
	movs r0, #0x10
	strh r0, [r1, #4]
	strh r2, [r5, #8]
	ldr r0, _080A4178 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A41A8 @ =sub_80A41AC
	str r0, [r1, #8]
_080A416E:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A4178: .4byte gCurTask
_080A417C: .4byte gBldRegs
_080A4180: .4byte 0x00003FFF
_080A4184: .4byte gDispCnt
_080A4188: .4byte gWinRegs
_080A418C: .4byte 0x00001011
_080A4190: .4byte 0x03000002
_080A4194: .4byte 0x03000001
_080A4198: .4byte 0x03000018
_080A419C: .4byte 0x0300001C
_080A41A0: .4byte 0xFFFFFF00
_080A41A4: .4byte 0x00001FFF
_080A41A8: .4byte sub_80A41AC

	thumb_func_start sub_80A41AC
sub_80A41AC: @ 0x080A41AC
	push {r4, r5, lr}
	ldr r5, _080A41EC @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_80A4598
	ldr r2, _080A41F0 @ =gWinRegs
	ldr r0, [r4, #0x14]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r4, #0xc]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2, #4]
	adds r0, r4, #0
	bl sub_80A43E0
	ldrh r2, [r4, #4]
	cmp r2, #0x2c
	bls _080A41F8
	movs r0, #0
	strh r0, [r4, #4]
	ldr r1, [r5]
	ldr r0, _080A41F4 @ =sub_80A4228
	str r0, [r1, #8]
	b _080A4220
	.align 2, 0
_080A41EC: .4byte gCurTask
_080A41F0: .4byte gWinRegs
_080A41F4: .4byte sub_80A4228
_080A41F8:
	ldr r0, _080A4218 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080A421C
	movs r0, #0x9b
	lsls r0, r0, #9
	str r0, [r4, #0x18]
	movs r0, #0x1d
	strb r0, [r4, #1]
	movs r0, #2
	bl sub_808ADF0
	b _080A4220
	.align 2, 0
_080A4218: .4byte gPressedKeys
_080A421C:
	adds r0, r2, #1
	strh r0, [r4, #4]
_080A4220:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80A4228
sub_80A4228: @ 0x080A4228
	push {r4, r5, lr}
	ldr r5, _080A4264 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_80A4598
	adds r0, r4, #0
	bl sub_80A453C
	cmp r0, #1
	bne _080A424A
	movs r0, #0x1b
	strb r0, [r4, #1]
_080A424A:
	adds r0, r4, #0
	bl sub_80A4440
	ldrh r2, [r4, #4]
	cmp r2, #0x77
	bls _080A426C
	movs r0, #0
	strh r0, [r4, #4]
	ldr r1, [r5]
	ldr r0, _080A4268 @ =sub_80A429C
	str r0, [r1, #8]
	b _080A4294
	.align 2, 0
_080A4264: .4byte gCurTask
_080A4268: .4byte sub_80A429C
_080A426C:
	ldr r0, _080A428C @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080A4290
	movs r0, #0x9b
	lsls r0, r0, #9
	str r0, [r4, #0x18]
	movs r0, #0x1d
	strb r0, [r4, #1]
	movs r0, #2
	bl sub_808ADF0
	b _080A4294
	.align 2, 0
_080A428C: .4byte gPressedKeys
_080A4290:
	adds r0, r2, #1
	strh r0, [r4, #4]
_080A4294:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80A429C
sub_80A429C: @ 0x080A429C
	push {r4, r5, lr}
	ldr r5, _080A42F4 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r3, r1, r0
	movs r2, #0x9b
	lsls r2, r2, #9
	str r2, [r3, #0x18]
	movs r4, #0
	movs r1, #0x1d
	strb r1, [r3, #1]
	ldrb r0, [r3, #2]
	adds r0, #1
	strb r0, [r3, #2]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #4
	bls _080A430C
	strh r4, [r3, #4]
	ldr r2, _080A42F8 @ =gBldRegs
	movs r0, #0xa0
	strh r0, [r2]
	ldr r1, _080A42FC @ =gWinRegs
	movs r0, #0xc0
	lsls r0, r0, #6
	strh r0, [r1, #8]
	strh r4, [r1, #0xa]
	movs r0, #0x10
	strh r0, [r2, #4]
	movs r0, #0
	bl sub_80C4C0C
	ldr r1, _080A4300 @ =gBgPalette
	strh r0, [r1]
	ldr r2, _080A4304 @ =gFlags
	ldr r0, [r2]
	movs r1, #1
	orrs r0, r1
	str r0, [r2]
	ldr r1, [r5]
	ldr r0, _080A4308 @ =sub_80A4384
	b _080A436A
	.align 2, 0
_080A42F4: .4byte gCurTask
_080A42F8: .4byte gBldRegs
_080A42FC: .4byte gWinRegs
_080A4300: .4byte gBgPalette
_080A4304: .4byte gFlags
_080A4308: .4byte sub_80A4384
_080A430C:
	movs r0, #0x19
	strb r0, [r3, #1]
	movs r0, #3
	ldrsb r0, [r3, r0]
	movs r1, #1
	cmp r0, #0
	ble _080A4320
	movs r0, #1
	rsbs r0, r0, #0
	adds r1, r0, #0
_080A4320:
	strb r1, [r3, #3]
	lsls r0, r1, #0x18
	cmp r0, #0
	ble _080A4338
	ldr r0, _080A4334 @ =0xFFFF8800
	str r0, [r3, #0x18]
	movs r0, #0x96
	lsls r0, r0, #9
	b _080A4340
	.align 2, 0
_080A4334: .4byte 0xFFFF8800
_080A4338:
	movs r0, #0xb4
	lsls r0, r0, #9
	str r0, [r3, #0x18]
	ldr r0, _080A4374 @ =0xFFFFC400
_080A4340:
	str r0, [r3, #0x20]
	adds r0, r3, #0
	adds r0, #0x2c
	ldr r2, _080A4378 @ =gUnknown_080D99A8
	ldrb r1, [r3, #2]
	lsls r1, r1, #3
	adds r1, r1, r2
	ldrh r1, [r1]
	strh r1, [r0, #0xc]
	ldrb r1, [r3, #2]
	lsls r1, r1, #3
	adds r1, r1, r2
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	bl UpdateSpriteAnimation
	ldr r0, _080A437C @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A4380 @ =sub_80A41AC
_080A436A:
	str r0, [r1, #8]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A4374: .4byte 0xFFFFC400
_080A4378: .4byte gUnknown_080D99A8
_080A437C: .4byte gCurTask
_080A4380: .4byte sub_80A41AC

	thumb_func_start sub_80A4384
sub_80A4384: @ 0x080A4384
	push {r4, r5, r6, lr}
	ldr r6, _080A43C4 @ =gCurTask
	ldr r0, [r6]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	movs r4, #0xa0
	lsls r4, r4, #0x13
	ldr r2, _080A43C8 @ =gBldRegs
	movs r3, #0
	movs r0, #0xa0
	strh r0, [r2]
	ldr r1, _080A43CC @ =gWinRegs
	movs r0, #0xc0
	lsls r0, r0, #6
	strh r0, [r1, #8]
	strh r3, [r1, #0xa]
	movs r0, #0x10
	strh r0, [r2, #4]
	str r3, [r4]
	ldrh r0, [r5, #4]
	cmp r0, #2
	bls _080A43D0
	movs r0, #0
	bl sub_80A310C
	ldr r0, [r6]
	bl TaskDestroy
	b _080A43D4
	.align 2, 0
_080A43C4: .4byte gCurTask
_080A43C8: .4byte gBldRegs
_080A43CC: .4byte gWinRegs
_080A43D0:
	adds r0, #1
	strh r0, [r5, #4]
_080A43D4:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80A43DC
sub_80A43DC: @ 0x080A43DC
	bx lr
	.align 2, 0

	thumb_func_start sub_80A43E0
sub_80A43E0: @ 0x080A43E0
	push {lr}
	adds r2, r0, #0
	ldrh r0, [r2, #4]
	cmp r0, #0xe
	bls _080A4438
	movs r0, #3
	ldrsb r0, [r2, r0]
	cmp r0, #0
	ble _080A4414
	ldr r1, [r2, #0x18]
	movs r3, #0x96
	lsls r3, r3, #8
	cmp r1, r3
	bgt _080A4438
	ldrb r0, [r2]
	lsls r0, r0, #9
	adds r0, r1, r0
	str r0, [r2, #0x18]
	ldr r1, _080A4410 @ =0x000095FF
	cmp r0, r1
	ble _080A4438
	str r3, [r2, #0x18]
	movs r0, #1
	b _080A443A
	.align 2, 0
_080A4410: .4byte 0x000095FF
_080A4414:
	ldr r1, [r2, #0x18]
	ldr r0, _080A4434 @ =0x000059FF
	cmp r1, r0
	ble _080A4438
	ldrb r0, [r2]
	lsls r0, r0, #9
	subs r0, r1, r0
	str r0, [r2, #0x18]
	movs r1, #0xb4
	lsls r1, r1, #7
	cmp r0, r1
	bgt _080A4438
	str r1, [r2, #0x18]
	movs r0, #1
	b _080A443A
	.align 2, 0
_080A4434: .4byte 0x000059FF
_080A4438:
	movs r0, #0
_080A443A:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80A4440
sub_80A4440: @ 0x080A4440
	push {lr}
	adds r2, r0, #0
	movs r0, #3
	ldrsb r0, [r2, r0]
	cmp r0, #0
	ble _080A4470
	ldr r1, [r2, #0x18]
	movs r3, #0xf0
	lsls r3, r3, #8
	cmp r1, r3
	bgt _080A448C
	ldrb r0, [r2]
	lsls r0, r0, #5
	adds r0, r1, r0
	str r0, [r2, #0x18]
	ldr r1, _080A446C @ =0x0000EFFF
	cmp r0, r1
	ble _080A448C
	str r3, [r2, #0x18]
	movs r0, #1
	b _080A448E
	.align 2, 0
_080A446C: .4byte 0x0000EFFF
_080A4470:
	ldr r1, [r2, #0x18]
	cmp r1, #0xff
	ble _080A448C
	ldrb r0, [r2]
	lsls r0, r0, #5
	subs r0, r1, r0
	str r0, [r2, #0x18]
	movs r1, #0x80
	lsls r1, r1, #1
	cmp r0, r1
	bgt _080A448C
	str r1, [r2, #0x18]
	movs r0, #1
	b _080A448E
_080A448C:
	movs r0, #0
_080A448E:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80A4494
sub_80A4494: @ 0x080A4494
	push {lr}
	adds r2, r0, #0
	movs r0, #3
	ldrsb r0, [r2, r0]
	cmp r0, #0
	ble _080A44C0
	ldr r1, [r2, #0x18]
	movs r3, #0x9b
	lsls r3, r3, #9
	cmp r1, r3
	bgt _080A44E0
	ldrb r0, [r2]
	lsls r0, r0, #0xa
	adds r0, r1, r0
	str r0, [r2, #0x18]
	ldr r1, _080A44BC @ =0x000135FF
	cmp r0, r1
	ble _080A44E0
	b _080A44D4
	.align 2, 0
_080A44BC: .4byte 0x000135FF
_080A44C0:
	ldr r1, [r2, #0x18]
	ldr r3, _080A44DC @ =0xFFFFBA00
	cmp r1, r3
	blt _080A44E0
	ldrb r0, [r2]
	lsls r0, r0, #0xa
	subs r0, r1, r0
	str r0, [r2, #0x18]
	cmp r0, r3
	bgt _080A44E0
_080A44D4:
	str r3, [r2, #0x18]
	movs r0, #1
	b _080A44E2
	.align 2, 0
_080A44DC: .4byte 0xFFFFBA00
_080A44E0:
	movs r0, #0
_080A44E2:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80A44E8
sub_80A44E8: @ 0x080A44E8
	push {lr}
	adds r2, r0, #0
	movs r0, #3
	ldrsb r0, [r2, r0]
	cmp r0, #0
	ble _080A4510
	ldr r1, [r2, #0x20]
	ldr r3, _080A450C @ =0xFFFF3800
	cmp r1, r3
	blt _080A4534
	ldrb r0, [r2]
	lsls r0, r0, #0xb
	subs r0, r1, r0
	str r0, [r2, #0x20]
	cmp r0, r3
	bgt _080A4534
	b _080A4528
	.align 2, 0
_080A450C: .4byte 0xFFFF3800
_080A4510:
	ldr r1, [r2, #0x20]
	movs r3, #0xdc
	lsls r3, r3, #9
	cmp r1, r3
	bgt _080A4534
	ldrb r0, [r2]
	lsls r0, r0, #0xb
	adds r0, r1, r0
	str r0, [r2, #0x20]
	ldr r1, _080A4530 @ =0x0001B7FF
	cmp r0, r1
	ble _080A4534
_080A4528:
	str r3, [r2, #0x20]
	movs r0, #1
	b _080A4536
	.align 2, 0
_080A4530: .4byte 0x0001B7FF
_080A4534:
	movs r0, #0
_080A4536:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80A453C
sub_80A453C: @ 0x080A453C
	push {lr}
	adds r2, r0, #0
	movs r0, #3
	ldrsb r0, [r2, r0]
	cmp r0, #0
	ble _080A456C
	ldr r1, [r2, #0x20]
	ldr r0, _080A4568 @ =0x000009FF
	cmp r1, r0
	ble _080A4590
	ldrb r0, [r2]
	lsls r0, r0, #0xb
	subs r0, r1, r0
	str r0, [r2, #0x20]
	movs r1, #0xa0
	lsls r1, r1, #4
	cmp r0, r1
	bgt _080A4590
	str r1, [r2, #0x20]
	movs r0, #1
	b _080A4592
	.align 2, 0
_080A4568: .4byte 0x000009FF
_080A456C:
	ldr r1, [r2, #0x20]
	movs r3, #0xe6
	lsls r3, r3, #8
	cmp r1, r3
	bgt _080A4590
	ldrb r0, [r2]
	lsls r0, r0, #0xb
	adds r0, r1, r0
	str r0, [r2, #0x20]
	ldr r1, _080A458C @ =0x0000E5FF
	cmp r0, r1
	ble _080A4590
	str r3, [r2, #0x20]
	movs r0, #1
	b _080A4592
	.align 2, 0
_080A458C: .4byte 0x0000E5FF
_080A4590:
	movs r0, #0
_080A4592:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80A4598
sub_80A4598: @ 0x080A4598
	push {lr}
	adds r2, r0, #0
	adds r2, #0x2c
	ldr r1, [r0, #0x20]
	asrs r1, r1, #8
	strh r1, [r2, #0x10]
	ldr r0, [r0, #0x24]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	adds r0, r2, #0
	bl DisplaySprite
	pop {r0}
	bx r0

	thumb_func_start sub_80A45B4
sub_80A45B4: @ 0x080A45B4
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r7, r1, #0
	ldrb r0, [r4]
	cmp r0, #0x10
	bne _080A45E0
	ldr r0, _080A45D8 @ =sub_80A7E24
	movs r1, #0x92
	lsls r1, r1, #2
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r3, _080A45DC @ =sub_80A7BFC
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	b _080A45F4
	.align 2, 0
_080A45D8: .4byte sub_80A7E24
_080A45DC: .4byte sub_80A7BFC
_080A45E0:
	ldr r0, _080A4664 @ =sub_80A4DDC
	movs r1, #0x92
	lsls r1, r1, #2
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r3, _080A4668 @ =sub_80A7BFC
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
_080A45F4:
	ldrh r2, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r2, r0
	str r4, [r5]
	movs r1, #0
	movs r0, #0
	strh r0, [r5, #0x16]
	strb r1, [r5, #0x18]
	strh r0, [r5, #0x1a]
	str r0, [r5, #0x40]
	str r0, [r5, #0x44]
	movs r3, #0
	ldr r0, _080A466C @ =0x03000028
	adds r6, r2, r0
	movs r4, #0
	adds r0, #4
	adds r2, r2, r0
_080A4618:
	lsls r1, r3, #3
	adds r0, r6, r1
	str r4, [r0]
	adds r1, r2, r1
	str r4, [r1]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #2
	bls _080A4618
	movs r0, #0xf0
	lsls r0, r0, #8
	str r0, [r5, #0x20]
	movs r4, #0
	str r4, [r5, #0x24]
	str r7, [r5, #0x1c]
	adds r0, r5, #0
	bl sub_80A4678
	adds r0, r5, #0
	bl sub_80A4D6C
	ldr r1, _080A4670 @ =gUnknown_03006230
	movs r0, #0x12
	strb r0, [r1, #1]
	ldr r1, _080A4674 @ =gUnknown_03003590
	strb r4, [r1, #4]
	strb r4, [r1, #5]
	movs r0, #0xff
	strb r0, [r1, #6]
	movs r0, #0x40
	strb r0, [r1, #7]
	ldr r0, [r5, #0x1c]
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080A4664: .4byte sub_80A4DDC
_080A4668: .4byte sub_80A7BFC
_080A466C: .4byte 0x03000028
_080A4670: .4byte gUnknown_03006230
_080A4674: .4byte gUnknown_03003590

	thumb_func_start sub_80A4678
sub_80A4678: @ 0x080A4678
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	adds r5, r0, #0
	ldr r3, _080A46A0 @ =gPlayers
	adds r0, r3, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r2, r0, #0x1c
	lsrs r0, r2, #0x1c
	cmp r0, #5
	bls _080A46A8
	ldr r0, _080A46A4 @ =gUnknown_080D9B74
	ldrb r1, [r0]
	str r1, [sp, #0xc]
	ldrb r0, [r0, #2]
	b _080A46C2
	.align 2, 0
_080A46A0: .4byte gPlayers
_080A46A4: .4byte gUnknown_080D9B74
_080A46A8:
	ldr r1, _080A4758 @ =gUnknown_080D9B74
	lsrs r0, r2, #0x1c
	adds r0, r0, r1
	ldrb r0, [r0]
	str r0, [sp, #0xc]
	movs r2, #0xbd
	lsls r2, r2, #1
	adds r0, r3, r2
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	adds r0, r0, r1
	ldrb r0, [r0]
_080A46C2:
	str r0, [sp, #0x10]
	movs r3, #0xac
	lsls r3, r3, #1
	adds r0, r5, r3
	str r0, [sp]
	movs r6, #0xc0
	lsls r6, r6, #1
	adds r0, r5, r6
	str r0, [sp, #4]
	movs r1, #0xd4
	lsls r1, r1, #1
	adds r0, r5, r1
	str r0, [sp, #8]
	movs r2, #0
	mov r8, r2
	movs r7, #0
	adds r6, r5, #0
	adds r6, #0x48
_080A46E6:
	ldr r3, [sp, #0xc]
	cmp r7, r3
	bne _080A46EE
	b _080A4818
_080A46EE:
	ldr r0, [sp, #0x10]
	cmp r7, r0
	bne _080A46F6
	b _080A4818
_080A46F6:
	mov r1, r8
	lsls r0, r1, #2
	add r0, sp
	ldr r4, [r0]
	adds r0, r5, #6
	add r0, r8
	strb r7, [r0]
	ldr r0, [r5, #0x1c]
	str r0, [r4]
	ldr r0, _080A475C @ =gUnknown_080D99D0
	lsls r2, r7, #1
	mov ip, r2
	add r0, ip
	ldrh r1, [r0]
	lsls r1, r1, #5
	ldr r0, [r5, #0x1c]
	adds r0, r0, r1
	str r0, [r5, #0x1c]
	ldr r0, _080A4760 @ =gUnknown_080D9B5C
	lsls r1, r7, #2
	adds r1, r1, r0
	ldr r0, [r1]
	ldrh r0, [r0]
	strh r0, [r4, #0xc]
	ldr r0, [r1]
	ldrb r0, [r0, #2]
	strb r0, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	ldr r0, [r5]
	ldrb r0, [r0]
	cmp r0, #0x10
	bne _080A4768
	mov r3, r8
	lsls r2, r3, #3
	adds r3, r5, #0
	adds r3, #0x28
	adds r0, r3, r2
	mov sb, r0
	ldr r0, _080A4764 @ =gUnknown_080D9B7E
	add r0, ip
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #8
	mov r1, sb
	str r0, [r1]
	adds r1, r2, #0
	adds r2, r3, #0
	b _080A4786
	.align 2, 0
_080A4758: .4byte gUnknown_080D9B74
_080A475C: .4byte gUnknown_080D99D0
_080A4760: .4byte gUnknown_080D9B5C
_080A4764: .4byte gUnknown_080D9B7E
_080A4768:
	mov r2, r8
	lsls r1, r2, #3
	adds r2, r5, #0
	adds r2, #0x28
	adds r3, r2, r1
	mov sb, r3
	ldr r0, _080A4900 @ =gUnknown_080D9B79
	adds r0, r7, r0
	ldrb r0, [r0]
	lsls r0, r0, #8
	movs r3, #0x80
	lsls r3, r3, #3
	adds r0, r0, r3
	mov r3, sb
	str r0, [r3]
_080A4786:
	adds r3, r2, r1
	ldr r0, [r3]
	asrs r0, r0, #8
	movs r2, #0
	strh r0, [r4, #0x10]
	strh r2, [r4, #0x12]
	movs r0, #0x90
	lsls r0, r0, #2
	strh r0, [r4, #0x14]
	strh r2, [r4, #0xe]
	strh r2, [r4, #0x16]
	movs r0, #0x10
	mov sl, r0
	mov r1, sl
	strb r1, [r4, #0x1c]
	strb r7, [r4, #0x1f]
	cmp r7, #4
	bne _080A47AE
	movs r0, #5
	strb r0, [r4, #0x1f]
_080A47AE:
	movs r0, #0x80
	lsls r0, r0, #3
	mov sb, r0
	str r0, [r4, #8]
	adds r0, r4, #0
	str r2, [sp, #0x14]
	str r3, [sp, #0x18]
	bl UpdateSpriteAnimation
	ldr r2, [sp, #0x14]
	ldr r3, [sp, #0x18]
	cmp r7, #3
	bne _080A480E
	mov r1, r8
	strb r1, [r5, #5]
	ldr r0, [r5, #0x1c]
	str r0, [r5, #0x48]
	movs r1, #0x90
	lsls r1, r1, #1
	adds r0, r0, r1
	str r0, [r5, #0x1c]
	ldr r0, _080A4904 @ =gUnknown_080D9B5C
	ldr r1, [r0, #0x14]
	ldrh r0, [r1]
	strh r0, [r6, #0xc]
	ldrb r0, [r1, #2]
	strb r0, [r6, #0x1a]
	movs r0, #0xff
	strb r0, [r6, #0x1b]
	ldr r0, [r3]
	asrs r0, r0, #8
	subs r0, #0x12
	strh r0, [r6, #0x10]
	strh r2, [r6, #0x12]
	movs r0, #0xa0
	lsls r0, r0, #2
	strh r0, [r6, #0x14]
	strh r2, [r6, #0xe]
	strh r2, [r6, #0x16]
	mov r2, sl
	strb r2, [r6, #0x1c]
	movs r3, #0
	strb r3, [r6, #0x1f]
	mov r0, sb
	str r0, [r6, #8]
	adds r0, r6, #0
	bl UpdateSpriteAnimation
_080A480E:
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
_080A4818:
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #4
	bhi _080A4824
	b _080A46E6
_080A4824:
	movs r1, #0xe8
	lsls r1, r1, #1
	adds r0, r5, r1
	str r0, [sp]
	movs r2, #0xfc
	lsls r2, r2, #1
	adds r0, r5, r2
	str r0, [sp, #4]
	movs r3, #0x88
	lsls r3, r3, #2
	adds r0, r5, r3
	str r0, [sp, #8]
	movs r6, #0
	mov r8, r6
	movs r7, #0
	adds r4, r5, #0
	adds r4, #0x70
_080A4846:
	ldr r0, [sp, #0xc]
	cmp r7, r0
	beq _080A48E4
	ldr r1, [sp, #0x10]
	cmp r7, r1
	beq _080A48E4
	mov r2, r8
	lsls r0, r2, #2
	add r0, sp
	ldr r2, [r0]
	adds r0, r5, #0
	adds r0, #9
	add r0, r8
	movs r3, #0
	strb r7, [r0]
	ldr r0, [r5, #0x1c]
	str r0, [r2]
	ldr r1, _080A4908 @ =gUnknown_080D99D0
	mov r6, r8
	lsls r0, r6, #1
	adds r0, r0, r1
	ldrh r1, [r0]
	lsls r1, r1, #5
	ldr r0, [r5, #0x1c]
	adds r0, r0, r1
	str r0, [r5, #0x1c]
	movs r0, #0
	mov sb, r0
	movs r0, #0x90
	lsls r0, r0, #2
	strh r0, [r2, #0x14]
	strh r3, [r2, #0xe]
	strh r3, [r2, #0x16]
	movs r1, #0x10
	mov ip, r1
	mov r6, ip
	strb r6, [r2, #0x1c]
	strb r7, [r2, #0x1f]
	cmp r7, #4
	bne _080A489A
	movs r0, #5
	strb r0, [r2, #0x1f]
_080A489A:
	movs r6, #0x80
	lsls r6, r6, #3
	str r6, [r2, #8]
	cmp r7, #3
	bne _080A48DA
	ldr r0, [r5, #0x1c]
	str r0, [r5, #0x70]
	movs r1, #0x90
	lsls r1, r1, #1
	adds r0, r0, r1
	str r0, [r5, #0x1c]
	ldr r0, _080A4904 @ =gUnknown_080D9B5C
	ldr r1, [r0, #0x14]
	ldrh r0, [r1]
	strh r0, [r4, #0xc]
	ldrb r0, [r1, #2]
	strb r0, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	movs r0, #0xa0
	lsls r0, r0, #2
	strh r0, [r4, #0x14]
	strh r3, [r4, #0xe]
	strh r3, [r4, #0x16]
	mov r2, ip
	strb r2, [r4, #0x1c]
	mov r3, sb
	strb r3, [r4, #0x1f]
	str r6, [r4, #8]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
_080A48DA:
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
_080A48E4:
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #4
	bls _080A4846
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A4900: .4byte gUnknown_080D9B79
_080A4904: .4byte gUnknown_080D9B5C
_080A4908: .4byte gUnknown_080D99D0

	thumb_func_start sub_80A490C
sub_80A490C: @ 0x080A490C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	adds r6, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	mov sl, r1
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	str r2, [sp, #0xc]
	ldr r3, _080A4940 @ =gPlayers
	adds r0, r3, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r2, r0, #0x1c
	lsrs r0, r2, #0x1c
	cmp r0, #5
	bls _080A4948
	ldr r0, _080A4944 @ =gUnknown_080D9B74
	ldrb r1, [r0]
	str r1, [sp, #0x10]
	ldrb r0, [r0, #2]
	b _080A4962
	.align 2, 0
_080A4940: .4byte gPlayers
_080A4944: .4byte gUnknown_080D9B74
_080A4948:
	ldr r1, _080A4980 @ =gUnknown_080D9B74
	lsrs r0, r2, #0x1c
	adds r0, r0, r1
	ldrb r0, [r0]
	str r0, [sp, #0x10]
	movs r2, #0xbd
	lsls r2, r2, #1
	adds r0, r3, r2
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	adds r0, r0, r1
	ldrb r0, [r0]
_080A4962:
	str r0, [sp, #0x14]
	ldr r3, [sp, #0xc]
	cmp r3, #0
	beq _080A4984
	movs r1, #0xe8
	lsls r1, r1, #1
	adds r0, r6, r1
	str r0, [sp]
	movs r2, #0xfc
	lsls r2, r2, #1
	adds r0, r6, r2
	str r0, [sp, #4]
	movs r3, #0x88
	lsls r3, r3, #2
	b _080A4998
	.align 2, 0
_080A4980: .4byte gUnknown_080D9B74
_080A4984:
	movs r1, #0xac
	lsls r1, r1, #1
	adds r0, r6, r1
	str r0, [sp]
	movs r2, #0xc0
	lsls r2, r2, #1
	adds r0, r6, r2
	str r0, [sp, #4]
	movs r3, #0xd4
	lsls r3, r3, #1
_080A4998:
	adds r0, r6, r3
	str r0, [sp, #8]
	movs r0, #0
	mov r8, r0
	movs r5, #0
	ldr r1, _080A4A18 @ =gUnknown_080D9B5C
	mov sb, r1
	movs r7, #0
_080A49A8:
	ldr r2, [sp, #0x10]
	cmp r5, r2
	beq _080A4A6E
	ldr r3, [sp, #0x14]
	cmp r5, r3
	beq _080A4A6E
	mov r1, r8
	lsls r0, r1, #2
	add r0, sp
	ldr r4, [r0]
	lsls r1, r5, #2
	add r1, sb
	ldr r0, [r1]
	mov r3, sl
	lsls r2, r3, #3
	adds r0, r2, r0
	ldrh r0, [r0]
	strh r0, [r4, #0xc]
	ldr r0, [r1]
	adds r0, r2, r0
	ldrb r0, [r0, #2]
	strb r0, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	movs r0, #0x90
	lsls r0, r0, #2
	strh r0, [r4, #0x14]
	strh r7, [r4, #0xe]
	strh r7, [r4, #0x16]
	movs r0, #0x10
	strb r0, [r4, #0x1c]
	movs r0, #0
	strb r0, [r4, #0x1f]
	movs r1, #0x80
	lsls r1, r1, #5
	str r1, [r4, #8]
	ldr r0, [r6]
	ldrb r0, [r0]
	cmp r0, #0x13
	bhi _080A4A1C
	mov r0, sl
	subs r0, #3
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bls _080A4A1E
	subs r0, r5, #2
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _080A4A1C
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r0, r1
	str r0, [r4, #8]
	b _080A4A1E
	.align 2, 0
_080A4A18: .4byte gUnknown_080D9B5C
_080A4A1C:
	str r1, [r4, #8]
_080A4A1E:
	cmp r5, #3
	bne _080A4A5E
	adds r1, r6, #0
	adds r1, #0x48
	ldr r3, [sp, #0xc]
	cmp r3, #0
	beq _080A4A2E
	adds r1, #0x28
_080A4A2E:
	mov r3, sb
	ldr r0, [r3, #0x14]
	adds r0, r2, r0
	ldrh r0, [r0]
	strh r0, [r1, #0xc]
	ldr r0, [r3, #0x14]
	adds r0, r2, r0
	ldrb r0, [r0, #2]
	strb r0, [r1, #0x1a]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	movs r0, #0xa0
	lsls r0, r0, #2
	strh r0, [r1, #0x14]
	strh r7, [r1, #0xe]
	strh r7, [r1, #0x16]
	movs r0, #0x10
	strb r0, [r1, #0x1c]
	movs r0, #0
	strb r0, [r1, #0x1f]
	str r7, [r1, #8]
	adds r0, r1, #0
	bl UpdateSpriteAnimation
_080A4A5E:
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
_080A4A6E:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #4
	bls _080A49A8
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80A4A88
sub_80A4A88: @ 0x080A4A88
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	adds r6, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	str r1, [sp, #0xc]
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	str r2, [sp, #0x10]
	ldr r3, _080A4ABC @ =gPlayers
	adds r0, r3, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r2, r0, #0x1c
	lsrs r0, r2, #0x1c
	cmp r0, #5
	bls _080A4AC4
	ldr r0, _080A4AC0 @ =gUnknown_080D9B74
	ldrb r1, [r0]
	str r1, [sp, #0x14]
	ldrb r0, [r0, #2]
	b _080A4ADE
	.align 2, 0
_080A4ABC: .4byte gPlayers
_080A4AC0: .4byte gUnknown_080D9B74
_080A4AC4:
	ldr r1, _080A4AFC @ =gUnknown_080D9B74
	lsrs r0, r2, #0x1c
	adds r0, r0, r1
	ldrb r0, [r0]
	str r0, [sp, #0x14]
	movs r2, #0xbd
	lsls r2, r2, #1
	adds r0, r3, r2
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	adds r0, r0, r1
	ldrb r0, [r0]
_080A4ADE:
	mov sl, r0
	ldr r3, [sp, #0x10]
	cmp r3, #0
	beq _080A4B00
	movs r1, #0xe8
	lsls r1, r1, #1
	adds r0, r6, r1
	str r0, [sp]
	movs r2, #0xfc
	lsls r2, r2, #1
	adds r0, r6, r2
	str r0, [sp, #4]
	movs r3, #0x88
	lsls r3, r3, #2
	b _080A4B14
	.align 2, 0
_080A4AFC: .4byte gUnknown_080D9B74
_080A4B00:
	movs r1, #0xac
	lsls r1, r1, #1
	adds r0, r6, r1
	str r0, [sp]
	movs r2, #0xc0
	lsls r2, r2, #1
	adds r0, r6, r2
	str r0, [sp, #4]
	movs r3, #0xd4
	lsls r3, r3, #1
_080A4B14:
	adds r0, r6, r3
	str r0, [sp, #8]
	movs r0, #0
	mov r8, r0
	movs r5, #0
	ldr r1, _080A4B88 @ =gUnknown_080D9B5C
	mov sb, r1
	movs r7, #0
_080A4B24:
	ldr r2, [sp, #0x14]
	cmp r5, r2
	beq _080A4BDC
	cmp r5, sl
	beq _080A4BDC
	mov r3, r8
	lsls r0, r3, #2
	add r0, sp
	ldr r4, [r0]
	lsls r1, r5, #2
	add r1, sb
	ldr r0, [r1]
	ldr r3, [sp, #0xc]
	lsls r2, r3, #3
	adds r0, r2, r0
	ldrh r0, [r0]
	strh r0, [r4, #0xc]
	ldr r0, [r1]
	adds r0, r2, r0
	ldrb r0, [r0, #2]
	strb r0, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	movs r0, #0x90
	lsls r0, r0, #2
	strh r0, [r4, #0x14]
	strh r7, [r4, #0xe]
	strh r7, [r4, #0x16]
	movs r0, #0x10
	strb r0, [r4, #0x1c]
	strb r5, [r4, #0x1f]
	cmp r5, #4
	bne _080A4B6A
	movs r0, #5
	strb r0, [r4, #0x1f]
_080A4B6A:
	movs r1, #0x80
	lsls r1, r1, #5
	str r1, [r4, #8]
	ldr r0, [r6]
	ldrb r0, [r0]
	cmp r0, #0x13
	bhi _080A4B8C
	cmp r5, #1
	bhi _080A4B8C
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r0, r1
	str r0, [r4, #8]
	b _080A4B8E
	.align 2, 0
_080A4B88: .4byte gUnknown_080D9B5C
_080A4B8C:
	str r1, [r4, #8]
_080A4B8E:
	cmp r5, #3
	bne _080A4BCC
	adds r1, r6, #0
	adds r1, #0x48
	ldr r0, [sp, #0x10]
	cmp r0, #0
	beq _080A4B9E
	adds r1, #0x28
_080A4B9E:
	mov r3, sb
	ldr r0, [r3, #0x14]
	adds r0, r2, r0
	ldrh r0, [r0]
	strh r0, [r1, #0xc]
	ldr r0, [r3, #0x14]
	adds r0, r2, r0
	ldrb r0, [r0, #2]
	strb r0, [r1, #0x1a]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	movs r0, #0xa0
	lsls r0, r0, #2
	strh r0, [r1, #0x14]
	strh r7, [r1, #0xe]
	strh r7, [r1, #0x16]
	movs r0, #0x10
	strb r0, [r1, #0x1c]
	strb r7, [r1, #0x1f]
	str r7, [r1, #8]
	adds r0, r1, #0
	bl UpdateSpriteAnimation
_080A4BCC:
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
_080A4BDC:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #4
	bls _080A4B24
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80A4BF8
sub_80A4BF8: @ 0x080A4BF8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0xc
	mov ip, r0
	lsls r1, r1, #0x18
	lsrs r7, r1, #0x18
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	mov r8, r2
	lsls r3, r3, #0x18
	lsrs r6, r3, #0x18
	movs r4, #0xff
	ldr r3, _080A4C2C @ =gPlayers
	adds r0, r3, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r2, r0, #0x1c
	lsrs r0, r2, #0x1c
	cmp r0, #5
	bls _080A4C34
	ldr r0, _080A4C30 @ =gUnknown_080D9B74
	ldrb r5, [r0]
	ldrb r3, [r0, #2]
	b _080A4C4C
	.align 2, 0
_080A4C2C: .4byte gPlayers
_080A4C30: .4byte gUnknown_080D9B74
_080A4C34:
	ldr r1, _080A4C70 @ =gUnknown_080D9B74
	lsrs r0, r2, #0x1c
	adds r0, r0, r1
	ldrb r5, [r0]
	movs r2, #0xbd
	lsls r2, r2, #1
	adds r0, r3, r2
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	adds r0, r0, r1
	ldrb r3, [r0]
_080A4C4C:
	cmp r6, r3
	bne _080A4C52
	b _080A4D60
_080A4C52:
	mov r0, r8
	cmp r0, #0
	beq _080A4C74
	movs r0, #0xe8
	lsls r0, r0, #1
	add r0, ip
	str r0, [sp]
	movs r0, #0xfc
	lsls r0, r0, #1
	add r0, ip
	str r0, [sp, #4]
	movs r0, #0x88
	lsls r0, r0, #2
	b _080A4C88
	.align 2, 0
_080A4C70: .4byte gUnknown_080D9B74
_080A4C74:
	movs r0, #0xac
	lsls r0, r0, #1
	add r0, ip
	str r0, [sp]
	movs r0, #0xc0
	lsls r0, r0, #1
	add r0, ip
	str r0, [sp, #4]
	movs r0, #0xd4
	lsls r0, r0, #1
_080A4C88:
	add r0, ip
	str r0, [sp, #8]
	movs r1, #0
	mov r2, ip
	adds r2, #9
_080A4C92:
	adds r0, r2, r1
	ldrb r0, [r0]
	cmp r0, r6
	bne _080A4C9C
	adds r4, r1, #0
_080A4C9C:
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #2
	bls _080A4C92
	lsls r0, r4, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	blt _080A4D60
	cmp r6, r5
	beq _080A4D60
	cmp r6, r3
	beq _080A4D60
	lsls r0, r0, #2
	add r0, sp
	ldr r5, [r0]
	ldr r4, _080A4D14 @ =gUnknown_080D9B5C
	lsls r1, r6, #2
	adds r1, r1, r4
	ldr r0, [r1]
	lsls r2, r7, #3
	adds r0, r2, r0
	ldrh r0, [r0]
	movs r3, #0
	strh r0, [r5, #0xc]
	ldr r0, [r1]
	adds r0, r2, r0
	ldrb r0, [r0, #2]
	strb r0, [r5, #0x1a]
	movs r0, #0xff
	strb r0, [r5, #0x1b]
	movs r0, #0x90
	lsls r0, r0, #2
	strh r0, [r5, #0x14]
	strh r3, [r5, #0xe]
	strh r3, [r5, #0x16]
	movs r0, #0x10
	strb r0, [r5, #0x1c]
	strb r6, [r5, #0x1f]
	adds r7, r4, #0
	adds r4, r2, #0
	cmp r6, #4
	bne _080A4CF6
	movs r0, #5
	strb r0, [r5, #0x1f]
_080A4CF6:
	movs r1, #0x80
	lsls r1, r1, #5
	str r1, [r5, #8]
	mov r2, ip
	ldr r0, [r2]
	ldrb r0, [r0]
	cmp r0, #0x13
	bhi _080A4D18
	cmp r6, #1
	bhi _080A4D18
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r0, r1
	str r0, [r5, #8]
	b _080A4D1A
	.align 2, 0
_080A4D14: .4byte gUnknown_080D9B5C
_080A4D18:
	str r1, [r5, #8]
_080A4D1A:
	cmp r6, #3
	bne _080A4D5A
	mov r3, ip
	adds r3, #0x48
	mov r0, r8
	cmp r0, #0
	beq _080A4D2A
	adds r3, #0x28
_080A4D2A:
	ldr r0, [r7, #0x14]
	adds r0, r4, r0
	ldrh r0, [r0]
	movs r2, #0
	movs r1, #0
	strh r0, [r3, #0xc]
	ldr r0, [r7, #0x14]
	adds r0, r4, r0
	ldrb r0, [r0, #2]
	strb r0, [r3, #0x1a]
	movs r0, #0xff
	strb r0, [r3, #0x1b]
	movs r0, #0xa0
	lsls r0, r0, #2
	strh r0, [r3, #0x14]
	strh r1, [r3, #0xe]
	strh r1, [r3, #0x16]
	movs r0, #0x10
	strb r0, [r3, #0x1c]
	strb r2, [r3, #0x1f]
	str r1, [r3, #8]
	adds r0, r3, #0
	bl UpdateSpriteAnimation
_080A4D5A:
	adds r0, r5, #0
	bl UpdateSpriteAnimation
_080A4D60:
	add sp, #0xc
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80A4D6C
sub_80A4D6C: @ 0x080A4D6C
	push {r4, lr}
	mov ip, r0
	ldr r1, _080A4DC8 @ =gBgCntRegs
	movs r3, #0
	movs r2, #0
	ldr r0, _080A4DCC @ =0x00004501
	strh r0, [r1, #2]
	ldr r1, _080A4DD0 @ =gBgScrollRegs
	mov r4, ip
	ldr r0, [r4, #0x20]
	asrs r0, r0, #8
	strh r0, [r1, #4]
	ldr r0, [r4, #0x24]
	asrs r0, r0, #8
	adds r0, #0x50
	strh r0, [r1, #6]
	mov r0, ip
	adds r0, #0xd8
	movs r1, #0xc0
	lsls r1, r1, #0x13
	str r1, [r0, #4]
	strh r2, [r0, #0xa]
	ldr r1, _080A4DD4 @ =0x06002800
	str r1, [r0, #0xc]
	strh r2, [r0, #0x18]
	strh r2, [r0, #0x1a]
	ldr r1, _080A4DD8 @ =0x00000131
	strh r1, [r0, #0x1c]
	strh r2, [r0, #0x1e]
	strh r2, [r0, #0x20]
	strh r2, [r0, #0x22]
	strh r2, [r0, #0x24]
	movs r1, #0x20
	strh r1, [r0, #0x26]
	strh r1, [r0, #0x28]
	adds r1, #0xe2
	add r1, ip
	strb r3, [r1]
	movs r1, #1
	strh r1, [r0, #0x2e]
	bl DrawBackground
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A4DC8: .4byte gBgCntRegs
_080A4DCC: .4byte 0x00004501
_080A4DD0: .4byte gBgScrollRegs
_080A4DD4: .4byte 0x06002800
_080A4DD8: .4byte 0x00000131

	thumb_func_start sub_80A4DDC
sub_80A4DDC: @ 0x080A4DDC
	push {r4, lr}
	ldr r4, _080A4E20 @ =gDispCnt
	ldrh r2, [r4]
	movs r1, #0x80
	lsls r1, r1, #6
	adds r0, r1, #0
	orrs r2, r0
	ldr r1, _080A4E24 @ =gWinRegs
	movs r3, #0
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	movs r0, #0x3f
	strh r0, [r1, #8]
	movs r0, #0x1f
	strh r0, [r1, #0xa]
	ldr r1, _080A4E28 @ =gBldRegs
	ldr r0, _080A4E2C @ =0x00003FFF
	strh r0, [r1]
	strh r3, [r1, #4]
	movs r1, #0x80
	lsls r1, r1, #2
	adds r0, r1, #0
	orrs r2, r0
	strh r2, [r4]
	ldr r0, _080A4E30 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A4E34 @ =sub_80A4E38
	str r0, [r1, #8]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A4E20: .4byte gDispCnt
_080A4E24: .4byte gWinRegs
_080A4E28: .4byte gBldRegs
_080A4E2C: .4byte 0x00003FFF
_080A4E30: .4byte gCurTask
_080A4E34: .4byte sub_80A4E38

	thumb_func_start sub_80A4E38
sub_80A4E38: @ 0x080A4E38
	push {r4, lr}
	ldr r0, _080A4E6C @ =gCurTask
	ldr r0, [r0]
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r4, r0, r1
	adds r1, #0xd8
	adds r0, r0, r1
	bl UpdateBgAnimationTiles
	adds r0, r4, #0
	bl sub_80A5698
	ldr r1, [r4, #0x20]
	movs r0, #0x80
	lsls r0, r0, #3
	cmp r1, r0
	ble _080A4E96
	ldr r0, [r4]
	ldrb r0, [r0]
	cmp r0, #6
	bne _080A4E74
	ldr r2, _080A4E70 @ =0xFFFFFE00
	b _080A4E86
	.align 2, 0
_080A4E6C: .4byte gCurTask
_080A4E70: .4byte 0xFFFFFE00
_080A4E74:
	cmp r0, #7
	bne _080A4E80
	ldr r2, _080A4E7C @ =0xFFFFFF00
	b _080A4E86
	.align 2, 0
_080A4E7C: .4byte 0xFFFFFF00
_080A4E80:
	cmp r0, #5
	bhi _080A4E8A
	ldr r2, _080A4EC8 @ =0xFFFFFDF0
_080A4E86:
	adds r0, r1, r2
	str r0, [r4, #0x20]
_080A4E8A:
	ldr r1, [r4, #0x20]
	ldr r0, _080A4ECC @ =0x000003FF
	cmp r1, r0
	bgt _080A4E96
	adds r0, #1
	str r0, [r4, #0x20]
_080A4E96:
	ldr r1, _080A4ED0 @ =gBgScrollRegs
	ldr r0, [r4, #0x20]
	asrs r0, r0, #8
	strh r0, [r1, #4]
	ldr r0, [r4, #0x24]
	asrs r0, r0, #8
	adds r0, #0x50
	strh r0, [r1, #6]
	ldr r0, [r4]
	ldrb r0, [r0]
	cmp r0, #9
	bne _080A4EC0
	adds r0, r4, #0
	movs r1, #1
	movs r2, #1
	bl sub_80A490C
	ldr r0, _080A4ED4 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A4ED8 @ =sub_80A7C00
	str r0, [r1, #8]
_080A4EC0:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A4EC8: .4byte 0xFFFFFDF0
_080A4ECC: .4byte 0x000003FF
_080A4ED0: .4byte gBgScrollRegs
_080A4ED4: .4byte gCurTask
_080A4ED8: .4byte sub_80A7C00

	thumb_func_start sub_80A4EDC
sub_80A4EDC: @ 0x080A4EDC
	push {r4, r5, r6, lr}
	ldr r5, _080A4F58 @ =gCurTask
	ldr r0, [r5]
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r4, r0, r1
	adds r1, #0xd8
	adds r0, r0, r1
	bl UpdateBgAnimationTiles
	ldrb r3, [r4, #0x18]
	cmp r3, #0
	bne _080A4F3A
	ldr r2, _080A4F5C @ =gDispCnt
	ldrh r0, [r2]
	movs r6, #0x80
	lsls r6, r6, #6
	adds r1, r6, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080A4F60 @ =gWinRegs
	ldr r0, _080A4F64 @ =0x00008A5F
	strh r0, [r1]
	movs r0, #0x9f
	strh r0, [r1, #4]
	ldr r0, _080A4F68 @ =0x00005F8B
	strh r0, [r1, #2]
	ldr r0, _080A4F6C @ =0x0000D1A0
	strh r0, [r1, #6]
	ldr r0, _080A4F70 @ =0x00001E3F
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	orrs r0, r2
	strh r0, [r1, #0xa]
	ldr r1, _080A4F74 @ =gBldRegs
	ldr r0, _080A4F78 @ =0x00003FBF
	strh r0, [r1]
	strh r3, [r1, #4]
	strh r3, [r4, #0x1a]
	movs r0, #1
	strb r0, [r4, #0x18]
	movs r0, #0xa7
	lsls r0, r0, #2
	bl m4aSongNumStart
_080A4F3A:
	ldr r2, _080A4F74 @ =gBldRegs
	ldrh r0, [r2, #4]
	cmp r0, #0xf
	bhi _080A4F7C
	ldrh r0, [r4, #0x1a]
	lsrs r0, r0, #8
	strh r0, [r2, #4]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r1, #0
	ldrh r6, [r4, #0x1a]
	adds r0, r0, r6
	strh r0, [r4, #0x1a]
	b _080A4F8A
	.align 2, 0
_080A4F58: .4byte gCurTask
_080A4F5C: .4byte gDispCnt
_080A4F60: .4byte gWinRegs
_080A4F64: .4byte 0x00008A5F
_080A4F68: .4byte 0x00005F8B
_080A4F6C: .4byte 0x0000D1A0
_080A4F70: .4byte 0x00001E3F
_080A4F74: .4byte gBldRegs
_080A4F78: .4byte 0x00003FBF
_080A4F7C:
	movs r1, #0
	movs r0, #0x10
	strh r0, [r2, #4]
	strb r1, [r4, #4]
	ldr r1, [r5]
	ldr r0, _080A4F90 @ =sub_80A4F94
	str r0, [r1, #8]
_080A4F8A:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A4F90: .4byte sub_80A4F94

	thumb_func_start sub_80A4F94
sub_80A4F94: @ 0x080A4F94
	push {r4, r5, r6, lr}
	ldr r6, _080A5014 @ =gCurTask
	ldr r0, [r6]
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r5, r0, r1
	adds r1, #0xd8
	adds r0, r0, r1
	bl UpdateBgAnimationTiles
	ldrb r0, [r5, #0x18]
	cmp r0, #0
	beq _080A4FEE
	ldr r2, _080A5018 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #7
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080A501C @ =gWinRegs
	movs r4, #0
	ldr r0, _080A5020 @ =0x00008A5F
	strh r0, [r1]
	movs r0, #0x9f
	strh r0, [r1, #4]
	ldr r0, _080A5024 @ =0x00005F8B
	strh r0, [r1, #2]
	ldr r0, _080A5028 @ =0x0000D1A0
	strh r0, [r1, #6]
	movs r0, #0xf8
	lsls r0, r0, #6
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	movs r3, #0
	orrs r0, r2
	strh r0, [r1, #0xa]
	ldr r1, _080A502C @ =gBldRegs
	ldr r0, _080A5030 @ =0x00002042
	strh r0, [r1]
	strh r4, [r1, #4]
	strh r4, [r5, #0x1a]
	strb r3, [r5, #0x18]
_080A4FEE:
	ldrh r0, [r5, #0x1a]
	lsrs r0, r0, #8
	cmp r0, #0x10
	bhi _080A5038
	strb r0, [r5, #4]
	ldr r2, _080A502C @ =gBldRegs
	ldr r1, _080A5034 @ =gUnknown_080D9B88
	ldrb r0, [r5, #4]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2, #2]
	movs r1, #0x80
	lsls r1, r1, #2
	adds r0, r1, #0
	ldrh r3, [r5, #0x1a]
	adds r0, r0, r3
	strh r0, [r5, #0x1a]
	b _080A5044
	.align 2, 0
_080A5014: .4byte gCurTask
_080A5018: .4byte gDispCnt
_080A501C: .4byte gWinRegs
_080A5020: .4byte 0x00008A5F
_080A5024: .4byte 0x00005F8B
_080A5028: .4byte 0x0000D1A0
_080A502C: .4byte gBldRegs
_080A5030: .4byte 0x00002042
_080A5034: .4byte gUnknown_080D9B88
_080A5038:
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r5, #0x1a]
	ldr r1, [r6]
	ldr r0, _080A504C @ =sub_80A5050
	str r0, [r1, #8]
_080A5044:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A504C: .4byte sub_80A5050

	thumb_func_start sub_80A5050
sub_80A5050: @ 0x080A5050
	push {r4, lr}
	ldr r0, _080A507C @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r3, _080A5080 @ =gFlags
	ldr r2, [r3]
	movs r0, #0x80
	lsls r0, r0, #9
	ands r0, r2
	cmp r0, #0
	beq _080A5088
	ldr r0, _080A5084 @ =gUnknown_080DA084
	movs r2, #0x80
	lsls r2, r2, #1
	movs r1, #0
	bl sub_80C460C
	b _080A509E
	.align 2, 0
_080A507C: .4byte gCurTask
_080A5080: .4byte gFlags
_080A5084: .4byte gUnknown_080DA084
_080A5088:
	ldr r1, _080A50C8 @ =0x040000D4
	ldr r0, _080A50CC @ =gUnknown_080DA084
	str r0, [r1]
	ldr r0, _080A50D0 @ =gBgPalette
	str r0, [r1, #4]
	ldr r0, _080A50D4 @ =0x80000100
	str r0, [r1, #8]
	ldr r0, [r1, #8]
	movs r0, #1
	orrs r2, r0
	str r2, [r3]
_080A509E:
	ldr r1, [r4]
	ldrb r0, [r1]
	cmp r0, #0x10
	bne _080A50E0
	movs r0, #1
	strb r0, [r4, #0x18]
	ldr r0, [r4, #0x2c]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r0, r1
	str r0, [r4, #0x2c]
	ldr r0, [r4, #0x34]
	adds r0, r0, r1
	str r0, [r4, #0x34]
	ldr r0, [r4, #0x3c]
	adds r0, r0, r1
	str r0, [r4, #0x3c]
	ldr r0, _080A50D8 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A50DC @ =sub_80A51B4
	b _080A50EA
	.align 2, 0
_080A50C8: .4byte 0x040000D4
_080A50CC: .4byte gUnknown_080DA084
_080A50D0: .4byte gBgPalette
_080A50D4: .4byte 0x80000100
_080A50D8: .4byte gCurTask
_080A50DC: .4byte sub_80A51B4
_080A50E0:
	movs r0, #0xd
	strb r0, [r1]
	ldr r0, _080A50F4 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A50F8 @ =sub_80A50FC
_080A50EA:
	str r0, [r1, #8]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A50F4: .4byte gCurTask
_080A50F8: .4byte sub_80A50FC

	thumb_func_start sub_80A50FC
sub_80A50FC: @ 0x080A50FC
	push {r4, r5, r6, lr}
	ldr r5, _080A5178 @ =gCurTask
	ldr r0, [r5]
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r4, r0, r1
	adds r1, #0xd8
	adds r0, r0, r1
	bl UpdateBgAnimationTiles
	ldrb r3, [r4, #0x18]
	cmp r3, #0
	bne _080A5152
	ldr r2, _080A517C @ =gDispCnt
	ldrh r0, [r2]
	movs r6, #0x80
	lsls r6, r6, #7
	adds r1, r6, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080A5180 @ =gWinRegs
	ldr r0, _080A5184 @ =0x00008A5F
	strh r0, [r1]
	movs r0, #0x9f
	strh r0, [r1, #4]
	ldr r0, _080A5188 @ =0x00005F8B
	strh r0, [r1, #2]
	ldr r0, _080A518C @ =0x0000D1A0
	strh r0, [r1, #6]
	movs r0, #0xf8
	lsls r0, r0, #6
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	orrs r0, r2
	strh r0, [r1, #0xa]
	ldr r1, _080A5190 @ =gBldRegs
	ldr r0, _080A5194 @ =0x00002042
	strh r0, [r1]
	strh r3, [r1, #4]
	movs r0, #1
	strb r0, [r4, #0x18]
_080A5152:
	ldrh r0, [r4, #0x1a]
	lsrs r0, r0, #8
	adds r1, r0, #0
	cmp r1, #0
	beq _080A51A0
	strb r0, [r4, #4]
	ldr r2, _080A5190 @ =gBldRegs
	ldr r1, _080A5198 @ =gUnknown_080D9B88
	ldrb r0, [r4, #4]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2, #2]
	ldr r1, _080A519C @ =0xFFFFFE00
	adds r0, r1, #0
	ldrh r6, [r4, #0x1a]
	adds r0, r0, r6
	strh r0, [r4, #0x1a]
	b _080A51A8
	.align 2, 0
_080A5178: .4byte gCurTask
_080A517C: .4byte gDispCnt
_080A5180: .4byte gWinRegs
_080A5184: .4byte 0x00008A5F
_080A5188: .4byte 0x00005F8B
_080A518C: .4byte 0x0000D1A0
_080A5190: .4byte gBldRegs
_080A5194: .4byte 0x00002042
_080A5198: .4byte gUnknown_080D9B88
_080A519C: .4byte 0xFFFFFE00
_080A51A0:
	strh r1, [r4, #0x1a]
	ldr r1, [r5]
	ldr r0, _080A51B0 @ =sub_80A51B4
	str r0, [r1, #8]
_080A51A8:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A51B0: .4byte sub_80A51B4

	thumb_func_start sub_80A51B4
sub_80A51B4: @ 0x080A51B4
	push {r4, lr}
	ldr r0, _080A5208 @ =gCurTask
	ldr r0, [r0]
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r4, r0, r1
	adds r1, #0xd8
	adds r0, r0, r1
	bl UpdateBgAnimationTiles
	ldr r0, [r4]
	ldrb r0, [r0]
	cmp r0, #0x10
	bne _080A51D8
	adds r0, r4, #0
	bl sub_80A5698
_080A51D8:
	ldrb r0, [r4, #0x18]
	ldr r1, _080A520C @ =gBldRegs
	cmp r0, #0
	beq _080A524C
	ldr r2, _080A5210 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r0, [r4]
	ldrb r0, [r0]
	cmp r0, #0x10
	bne _080A5218
	ldr r1, _080A5214 @ =gWinRegs
	movs r2, #0
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	strh r2, [r1, #2]
	strh r2, [r1, #6]
	b _080A522A
	.align 2, 0
_080A5208: .4byte gCurTask
_080A520C: .4byte gBldRegs
_080A5210: .4byte gDispCnt
_080A5214: .4byte gWinRegs
_080A5218:
	ldr r1, _080A5260 @ =gWinRegs
	ldr r0, _080A5264 @ =0x00008A5F
	strh r0, [r1]
	movs r0, #0x9f
	strh r0, [r1, #4]
	ldr r0, _080A5268 @ =0x00005F8B
	strh r0, [r1, #2]
	ldr r0, _080A526C @ =0x0000D1A0
	strh r0, [r1, #6]
_080A522A:
	adds r3, r1, #0
	ldr r0, _080A5270 @ =0x00001E3F
	strh r0, [r3, #8]
	ldrh r1, [r3, #0xa]
	movs r0, #0x1f
	movs r2, #0
	orrs r0, r1
	strh r0, [r3, #0xa]
	ldr r1, _080A5274 @ =gBldRegs
	ldr r0, _080A5278 @ =0x00003FBF
	strh r0, [r1]
	movs r0, #0x10
	strh r0, [r1, #4]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r4, #0x1a]
	strb r2, [r4, #0x18]
_080A524C:
	ldrh r0, [r1, #4]
	cmp r0, #0
	beq _080A5298
	ldr r0, [r4]
	ldrb r0, [r0]
	cmp r0, #0x10
	bne _080A5280
	ldr r2, _080A527C @ =0xFFFFFF00
	b _080A5282
	.align 2, 0
_080A5260: .4byte gWinRegs
_080A5264: .4byte 0x00008A5F
_080A5268: .4byte 0x00005F8B
_080A526C: .4byte 0x0000D1A0
_080A5270: .4byte 0x00001E3F
_080A5274: .4byte gBldRegs
_080A5278: .4byte 0x00003FBF
_080A527C: .4byte 0xFFFFFF00
_080A5280:
	ldr r2, _080A5294 @ =0xFFFFFE00
_080A5282:
	adds r0, r2, #0
	ldrh r3, [r4, #0x1a]
	adds r0, r0, r3
	strh r0, [r4, #0x1a]
	ldrh r0, [r4, #0x1a]
	lsrs r0, r0, #8
	strh r0, [r1, #4]
	b _080A52CC
	.align 2, 0
_080A5294: .4byte 0xFFFFFE00
_080A5298:
	strh r0, [r4, #0x16]
	ldr r0, [r4]
	ldrb r0, [r0]
	cmp r0, #0x10
	bne _080A52B4
	ldr r0, _080A52AC @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A52B0 @ =sub_80A7D7C
	b _080A52CA
	.align 2, 0
_080A52AC: .4byte gCurTask
_080A52B0: .4byte sub_80A7D7C
_080A52B4:
	adds r0, r4, #0
	movs r1, #3
	movs r2, #0
	bl sub_80A490C
	ldr r1, [r4]
	movs r0, #0xe
	strb r0, [r1]
	ldr r0, _080A52D4 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A52D8 @ =sub_80A7D00
_080A52CA:
	str r0, [r1, #8]
_080A52CC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A52D4: .4byte gCurTask
_080A52D8: .4byte sub_80A7D00

	thumb_func_start sub_80A52DC
sub_80A52DC: @ 0x080A52DC
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0xc
	ldr r0, _080A537C @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	movs r7, #0
	movs r5, #0xff
	mov r8, r5
	mov sb, r5
	movs r2, #0
	adds r0, #9
	adds r1, r1, r0
_080A5300:
	adds r0, r1, r2
	ldrb r0, [r0]
	cmp r0, #1
	bne _080A530A
	adds r5, r2, #0
_080A530A:
	cmp r0, #4
	bne _080A5310
	mov r8, r2
_080A5310:
	cmp r0, #3
	bne _080A5316
	mov sb, r2
_080A5316:
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #2
	bls _080A5300
	adds r0, r4, #0
	bl sub_80A5824
	adds r0, r4, #0
	adds r0, #0xd8
	bl UpdateBgAnimationTiles
	ldrh r0, [r4, #0x16]
	cmp r0, #0x59
	bhi _080A5338
	adds r0, #1
	strh r0, [r4, #0x16]
_080A5338:
	movs r1, #0xe8
	lsls r1, r1, #1
	adds r0, r4, r1
	str r0, [sp]
	adds r1, #0x28
	adds r0, r4, r1
	str r0, [sp, #4]
	adds r1, #0x28
	adds r0, r4, r1
	str r0, [sp, #8]
	ldrh r0, [r4, #0x16]
	cmp r0, #9
	bne _080A5380
	lsls r1, r5, #0x18
	cmp r1, #0
	blt _080A53DE
	lsrs r1, r1, #0x18
	adds r0, r4, #0
	adds r0, #0xc
	adds r0, r0, r1
	movs r2, #0
	strb r2, [r0]
	lsls r1, r1, #1
	adds r0, r4, #0
	adds r0, #0x10
	adds r0, r0, r1
	strh r2, [r0]
	adds r0, r4, #0
	movs r1, #5
	movs r2, #1
	movs r3, #1
	bl sub_80A4BF8
	b _080A53DE
	.align 2, 0
_080A537C: .4byte gCurTask
_080A5380:
	cmp r0, #0x3b
	bne _080A53B0
	mov r0, r8
	lsls r1, r0, #0x18
	cmp r1, #0
	blt _080A53DE
	lsrs r1, r1, #0x18
	adds r0, r4, #0
	adds r0, #0xc
	adds r0, r0, r1
	movs r2, #0
	strb r2, [r0]
	lsls r1, r1, #1
	adds r0, r4, #0
	adds r0, #0x10
	adds r0, r0, r1
	strh r2, [r0]
	adds r0, r4, #0
	movs r1, #5
	movs r2, #1
	movs r3, #4
	bl sub_80A4BF8
	b _080A53DE
_080A53B0:
	cmp r0, #0x59
	bne _080A53DE
	mov r0, sb
	lsls r1, r0, #0x18
	cmp r1, #0
	blt _080A53DE
	lsrs r1, r1, #0x18
	adds r0, r4, #0
	adds r0, #0xc
	adds r0, r0, r1
	movs r2, #0
	strb r2, [r0]
	lsls r1, r1, #1
	adds r0, r4, #0
	adds r0, #0x10
	adds r0, r0, r1
	strh r2, [r0]
	adds r0, r4, #0
	movs r1, #5
	movs r2, #1
	movs r3, #3
	bl sub_80A4BF8
_080A53DE:
	ldrh r0, [r4, #0x16]
	cmp r0, #9
	bls _080A544C
	lsls r0, r5, #0x18
	adds r5, r0, #0
	cmp r5, #0
	blt _080A53F8
	lsrs r1, r5, #0x18
	adds r0, r4, #0
	bl sub_80A555C
	cmp r0, #1
	bne _080A53FE
_080A53F8:
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
_080A53FE:
	lsrs r2, r5, #0x18
	adds r0, r4, #0
	adds r0, #0xc
	adds r1, r0, r2
	ldrb r1, [r1]
	adds r6, r0, #0
	cmp r1, #3
	bne _080A5428
	lsls r0, r2, #1
	adds r1, r4, #0
	adds r1, #0x10
	adds r1, r1, r0
	ldrh r0, [r1]
	cmp r0, #0
	bne _080A5428
	adds r0, r4, #0
	movs r1, #6
	movs r2, #1
	movs r3, #1
	bl sub_80A4BF8
_080A5428:
	lsrs r1, r5, #0x18
	adds r0, r6, r1
	ldrb r0, [r0]
	cmp r0, #6
	bne _080A544C
	lsls r0, r1, #1
	adds r1, r4, #0
	adds r1, #0x10
	adds r1, r1, r0
	ldrh r0, [r1]
	cmp r0, #0
	bne _080A544C
	adds r0, r4, #0
	movs r1, #7
	movs r2, #1
	movs r3, #1
	bl sub_80A4BF8
_080A544C:
	ldrh r0, [r4, #0x16]
	cmp r0, #0x3b
	bls _080A54BC
	mov r1, r8
	lsls r0, r1, #0x18
	adds r5, r0, #0
	cmp r5, #0
	blt _080A5468
	lsrs r1, r5, #0x18
	adds r0, r4, #0
	bl sub_80A555C
	cmp r0, #1
	bne _080A546E
_080A5468:
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
_080A546E:
	lsrs r2, r5, #0x18
	adds r0, r4, #0
	adds r0, #0xc
	adds r1, r0, r2
	ldrb r1, [r1]
	adds r6, r0, #0
	cmp r1, #3
	bne _080A5498
	lsls r0, r2, #1
	adds r1, r4, #0
	adds r1, #0x10
	adds r1, r1, r0
	ldrh r0, [r1]
	cmp r0, #0
	bne _080A5498
	adds r0, r4, #0
	movs r1, #6
	movs r2, #1
	movs r3, #4
	bl sub_80A4BF8
_080A5498:
	lsrs r1, r5, #0x18
	adds r0, r6, r1
	ldrb r0, [r0]
	cmp r0, #6
	bne _080A54BC
	lsls r0, r1, #1
	adds r1, r4, #0
	adds r1, #0x10
	adds r1, r1, r0
	ldrh r0, [r1]
	cmp r0, #0
	bne _080A54BC
	adds r0, r4, #0
	movs r1, #7
	movs r2, #1
	movs r3, #4
	bl sub_80A4BF8
_080A54BC:
	ldrh r0, [r4, #0x16]
	cmp r0, #0x59
	bls _080A552C
	mov r1, sb
	lsls r0, r1, #0x18
	adds r5, r0, #0
	cmp r5, #0
	blt _080A54D8
	lsrs r1, r5, #0x18
	adds r0, r4, #0
	bl sub_80A555C
	cmp r0, #1
	bne _080A54DE
_080A54D8:
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
_080A54DE:
	lsrs r2, r5, #0x18
	adds r0, r4, #0
	adds r0, #0xc
	adds r1, r0, r2
	ldrb r1, [r1]
	adds r6, r0, #0
	cmp r1, #3
	bne _080A5508
	lsls r0, r2, #1
	adds r1, r4, #0
	adds r1, #0x10
	adds r1, r1, r0
	ldrh r0, [r1]
	cmp r0, #0
	bne _080A5508
	adds r0, r4, #0
	movs r1, #6
	movs r2, #1
	movs r3, #3
	bl sub_80A4BF8
_080A5508:
	lsrs r1, r5, #0x18
	adds r0, r6, r1
	ldrb r0, [r0]
	cmp r0, #6
	bne _080A552C
	lsls r0, r1, #1
	adds r1, r4, #0
	adds r1, #0x10
	adds r1, r1, r0
	ldrh r0, [r1]
	cmp r0, #0
	bne _080A552C
	adds r0, r4, #0
	movs r1, #7
	movs r2, #1
	movs r3, #3
	bl sub_80A4BF8
_080A552C:
	cmp r7, #3
	bne _080A5536
	ldr r1, [r4]
	movs r0, #0x16
	strb r0, [r1]
_080A5536:
	ldr r0, _080A5554 @ =gBldRegs
	ldrh r0, [r0, #4]
	cmp r0, #0x10
	bne _080A5546
	ldr r0, _080A5558 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
_080A5546:
	add sp, #0xc
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A5554: .4byte gBldRegs
_080A5558: .4byte gCurTask

	thumb_func_start sub_80A555C
sub_80A555C: @ 0x080A555C
	push {r4, r5, lr}
	mov ip, r0
	lsls r1, r1, #0x18
	lsrs r5, r1, #0x18
	lsls r1, r5, #1
	adds r0, #0x10
	adds r4, r0, r1
	ldrh r0, [r4]
	adds r0, #1
	strh r0, [r4]
	ldr r2, _080A55B4 @ =gUnknown_080D9BB2
	mov r1, ip
	adds r1, #0xc
	adds r3, r1, r5
	ldrb r1, [r3]
	lsls r1, r1, #1
	adds r1, r1, r2
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r1, [r1]
	cmp r0, r1
	bls _080A559E
	movs r0, #0
	strh r0, [r4]
	ldrb r0, [r3]
	adds r0, #1
	strb r0, [r3]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #6
	bls _080A559E
	movs r0, #6
	strb r0, [r3]
_080A559E:
	lsls r0, r5, #3
	mov r1, ip
	adds r1, #0x28
	adds r3, r1, r0
	ldr r2, [r3]
	ldr r0, _080A55B8 @ =0xFFFFD800
	cmp r2, r0
	bgt _080A55BC
	movs r0, #1
	b _080A55D2
	.align 2, 0
_080A55B4: .4byte gUnknown_080D9BB2
_080A55B8: .4byte 0xFFFFD800
_080A55BC:
	ldr r1, _080A55D8 @ =gUnknown_080D9BAA
	mov r0, ip
	adds r0, #0xc
	adds r0, r0, r5
	ldrb r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #8
	subs r0, r2, r0
	str r0, [r3]
	movs r0, #0
_080A55D2:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080A55D8: .4byte gUnknown_080D9BAA

	thumb_func_start sub_80A55DC
sub_80A55DC: @ 0x080A55DC
	push {r4, r5, r6, lr}
	adds r3, r0, #0
	movs r6, #0
	ldr r0, [r3, #0x24]
	cmp r0, #0
	bgt _080A55F0
	adds r0, #0x40
	str r0, [r3, #0x24]
	cmp r0, #0
	blt _080A55F4
_080A55F0:
	str r6, [r3, #0x24]
	movs r6, #1
_080A55F4:
	ldr r1, _080A5638 @ =gBgScrollRegs
	ldr r0, [r3, #0x20]
	asrs r0, r0, #8
	strh r0, [r1, #4]
	ldr r0, [r3, #0x24]
	asrs r0, r0, #8
	adds r0, #0x50
	strh r0, [r1, #6]
	ldr r0, [r3, #0x44]
	subs r0, #0x40
	str r0, [r3, #0x44]
	cmp r0, #0
	bgt _080A5612
	movs r0, #0
	str r0, [r3, #0x44]
_080A5612:
	movs r4, #0
	adds r5, r3, #0
	adds r5, #0x2c
_080A5618:
	lsls r1, r4, #3
	adds r1, r5, r1
	ldr r2, [r3, #0x24]
	ldr r0, [r3, #0x44]
	subs r0, r0, r2
	str r0, [r1]
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #2
	bls _080A5618
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_080A5638: .4byte gBgScrollRegs

	thumb_func_start sub_80A563C
sub_80A563C: @ 0x080A563C
	push {r4, r5, r6, lr}
	adds r3, r0, #0
	movs r6, #0
	ldr r0, [r3, #0x24]
	ldr r1, _080A5690 @ =0xFFFFCC00
	cmp r0, r1
	blt _080A5652
	subs r0, #0x40
	str r0, [r3, #0x24]
	cmp r0, r1
	bgt _080A5656
_080A5652:
	str r1, [r3, #0x24]
	movs r6, #1
_080A5656:
	ldr r1, _080A5694 @ =gBgScrollRegs
	ldr r0, [r3, #0x20]
	asrs r0, r0, #8
	strh r0, [r1, #4]
	ldr r0, [r3, #0x24]
	asrs r0, r0, #8
	adds r0, #0x50
	strh r0, [r1, #6]
	ldr r0, [r3, #0x44]
	adds r0, #0x20
	str r0, [r3, #0x44]
	movs r4, #0
	adds r5, r3, #0
	adds r5, #0x2c
_080A5672:
	lsls r1, r4, #3
	adds r1, r5, r1
	ldr r2, [r3, #0x24]
	ldr r0, [r3, #0x44]
	subs r0, r0, r2
	str r0, [r1]
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #2
	bls _080A5672
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_080A5690: .4byte 0xFFFFCC00
_080A5694: .4byte gBgScrollRegs

	thumb_func_start sub_80A5698
sub_80A5698: @ 0x080A5698
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0xc
	adds r6, r0, #0
	ldr r3, _080A56BC @ =gPlayers
	adds r0, r3, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r2, r0, #0x1c
	lsrs r0, r2, #0x1c
	cmp r0, #5
	bls _080A56C4
	ldr r0, _080A56C0 @ =gUnknown_080D9B74
	ldrb r2, [r0]
	ldrb r1, [r0, #2]
	b _080A56DC
	.align 2, 0
_080A56BC: .4byte gPlayers
_080A56C0: .4byte gUnknown_080D9B74
_080A56C4:
	ldr r1, _080A580C @ =gUnknown_080D9B74
	lsrs r0, r2, #0x1c
	adds r0, r0, r1
	ldrb r2, [r0]
	movs r4, #0xbd
	lsls r4, r4, #1
	adds r0, r3, r4
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	adds r0, r0, r1
	ldrb r1, [r0]
_080A56DC:
	movs r3, #0xac
	lsls r3, r3, #1
	adds r0, r6, r3
	str r0, [sp]
	movs r4, #0xc0
	lsls r4, r4, #1
	adds r0, r6, r4
	str r0, [sp, #4]
	adds r3, #0x50
	adds r0, r6, r3
	str r0, [sp, #8]
	movs r4, #0x28
	adds r4, r4, r6
	mov sb, r4
	movs r0, #0x2c
	adds r0, r0, r6
	mov r8, r0
	cmp r2, #3
	beq _080A5764
	cmp r1, #3
	beq _080A5764
	adds r4, r6, #0
	adds r4, #0x48
	ldrb r0, [r6, #5]
	lsls r0, r0, #3
	add r0, sb
	ldr r1, [r0]
	asrs r1, r1, #8
	ldr r0, [r6, #0x20]
	asrs r0, r0, #8
	subs r1, r1, r0
	strh r1, [r4, #0x10]
	ldrb r0, [r6, #5]
	lsls r0, r0, #3
	add r0, r8
	ldr r0, [r0]
	asrs r0, r0, #8
	adds r0, #0x78
	strh r0, [r4, #0x12]
	ldr r1, _080A5810 @ =gUnknown_080D9B1C
	ldrh r2, [r4, #0xc]
	ldrh r3, [r1]
	cmp r2, r3
	bne _080A573C
	ldrb r0, [r4, #0x1a]
	ldrb r3, [r1, #2]
	cmp r0, r3
	beq _080A574C
_080A573C:
	ldrh r0, [r1, #0x28]
	cmp r2, r0
	bne _080A5758
	adds r1, #0x2a
	ldrb r0, [r4, #0x1a]
	ldrb r1, [r1]
	cmp r0, r1
	bne _080A5758
_080A574C:
	ldrh r0, [r4, #0x10]
	adds r0, #0x12
	strh r0, [r4, #0x10]
	ldrh r0, [r4, #0x12]
	subs r0, #0xf
	strh r0, [r4, #0x12]
_080A5758:
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
_080A5764:
	movs r7, #0
_080A5766:
	lsls r0, r7, #2
	add r0, sp
	ldr r4, [r0]
	ldr r0, [r6]
	ldrb r1, [r0]
	adds r3, r0, #0
	cmp r1, #8
	bhi _080A57B6
	ldr r2, _080A5814 @ =gUnknown_080D9A1C
	ldrh r1, [r4, #0xc]
	ldrh r0, [r2]
	cmp r1, r0
	bne _080A5788
	ldrb r0, [r4, #0x1a]
	ldrb r2, [r2, #2]
	cmp r0, r2
	beq _080A57A8
_080A5788:
	ldr r2, _080A5818 @ =gUnknown_080D9ADC
	ldrh r0, [r2]
	cmp r1, r0
	bne _080A5798
	ldrb r0, [r4, #0x1a]
	ldrb r2, [r2, #2]
	cmp r0, r2
	beq _080A57A8
_080A5798:
	ldr r2, _080A581C @ =gUnknown_080D99DC
	ldrh r0, [r2]
	cmp r1, r0
	bne _080A57B6
	ldrb r0, [r4, #0x1a]
	ldrb r2, [r2, #2]
	cmp r0, r2
	bne _080A57B6
_080A57A8:
	ldrb r0, [r3]
	cmp r0, #5
	bls _080A57B6
	ldr r0, [r4, #8]
	ldr r1, _080A5820 @ =0xFFFFFBFF
	ands r0, r1
	str r0, [r4, #8]
_080A57B6:
	lsls r2, r7, #3
	mov r1, sb
	adds r0, r1, r2
	ldr r1, [r0]
	asrs r1, r1, #8
	ldr r0, [r6, #0x20]
	asrs r0, r0, #8
	subs r1, r1, r0
	strh r1, [r4, #0x10]
	add r2, r8
	ldr r0, [r2]
	asrs r0, r0, #8
	adds r0, #0x78
	strh r0, [r4, #0x12]
	ldr r0, [r6]
	ldrb r0, [r0]
	cmp r0, #0xc
	bls _080A57DE
	movs r0, #0x40
	strh r0, [r4, #0x14]
_080A57DE:
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	rsbs r1, r0, #0
	orrs r1, r0
	lsrs r5, r1, #0x1f
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #2
	bls _080A5766
	adds r0, r5, #0
	add sp, #0xc
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080A580C: .4byte gUnknown_080D9B74
_080A5810: .4byte gUnknown_080D9B1C
_080A5814: .4byte gUnknown_080D9A1C
_080A5818: .4byte gUnknown_080D9ADC
_080A581C: .4byte gUnknown_080D99DC
_080A5820: .4byte 0xFFFFFBFF

	thumb_func_start sub_80A5824
sub_80A5824: @ 0x080A5824
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0xc
	adds r7, r0, #0
	ldr r3, _080A5848 @ =gPlayers
	adds r0, r3, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r2, r0, #0x1c
	lsrs r0, r2, #0x1c
	cmp r0, #5
	bls _080A5850
	ldr r0, _080A584C @ =gUnknown_080D9B74
	ldrb r2, [r0]
	ldrb r1, [r0, #2]
	b _080A5868
	.align 2, 0
_080A5848: .4byte gPlayers
_080A584C: .4byte gUnknown_080D9B74
_080A5850:
	ldr r1, _080A594C @ =gUnknown_080D9B74
	lsrs r0, r2, #0x1c
	adds r0, r0, r1
	ldrb r2, [r0]
	movs r4, #0xbd
	lsls r4, r4, #1
	adds r0, r3, r4
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	adds r0, r0, r1
	ldrb r1, [r0]
_080A5868:
	movs r3, #0xe8
	lsls r3, r3, #1
	adds r0, r7, r3
	str r0, [sp]
	movs r4, #0xfc
	lsls r4, r4, #1
	adds r0, r7, r4
	str r0, [sp, #4]
	adds r3, #0x50
	adds r0, r7, r3
	str r0, [sp, #8]
	movs r4, #0x28
	adds r4, r4, r7
	mov sb, r4
	movs r0, #0x2c
	adds r0, r0, r7
	mov r8, r0
	cmp r2, #3
	beq _080A58F0
	cmp r1, #3
	beq _080A58F0
	adds r4, r7, #0
	adds r4, #0x70
	ldrb r0, [r7, #5]
	lsls r0, r0, #3
	add r0, sb
	ldr r1, [r0]
	asrs r1, r1, #8
	ldr r0, [r7, #0x20]
	asrs r0, r0, #8
	subs r1, r1, r0
	strh r1, [r4, #0x10]
	ldrb r0, [r7, #5]
	lsls r0, r0, #3
	add r0, r8
	ldr r0, [r0]
	asrs r0, r0, #8
	adds r0, #0x78
	strh r0, [r4, #0x12]
	ldr r1, _080A5950 @ =gUnknown_080D9B1C
	ldrh r2, [r4, #0xc]
	ldrh r3, [r1]
	cmp r2, r3
	bne _080A58C8
	ldrb r0, [r4, #0x1a]
	ldrb r3, [r1, #2]
	cmp r0, r3
	beq _080A58D8
_080A58C8:
	ldrh r0, [r1, #0x28]
	cmp r2, r0
	bne _080A58E4
	adds r1, #0x2a
	ldrb r0, [r4, #0x1a]
	ldrb r1, [r1]
	cmp r0, r1
	bne _080A58E4
_080A58D8:
	ldrh r0, [r4, #0x10]
	adds r0, #0x12
	strh r0, [r4, #0x10]
	ldrh r0, [r4, #0x12]
	subs r0, #0xf
	strh r0, [r4, #0x12]
_080A58E4:
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
_080A58F0:
	movs r5, #0
_080A58F2:
	lsls r0, r5, #2
	add r0, sp
	ldr r4, [r0]
	lsls r2, r5, #3
	mov r1, sb
	adds r0, r1, r2
	ldr r1, [r0]
	asrs r1, r1, #8
	ldr r0, [r7, #0x20]
	asrs r0, r0, #8
	subs r1, r1, r0
	strh r1, [r4, #0x10]
	add r2, r8
	ldr r0, [r2]
	asrs r0, r0, #8
	adds r0, #0x78
	strh r0, [r4, #0x12]
	ldr r0, [r7]
	ldrb r0, [r0]
	cmp r0, #0xc
	bls _080A5920
	movs r0, #0x40
	strh r0, [r4, #0x14]
_080A5920:
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	rsbs r1, r0, #0
	orrs r1, r0
	lsrs r6, r1, #0x1f
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #2
	bls _080A58F2
	adds r0, r6, #0
	add sp, #0xc
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080A594C: .4byte gUnknown_080D9B74
_080A5950: .4byte gUnknown_080D9B1C

	thumb_func_start sub_80A5954
sub_80A5954: @ 0x080A5954
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	ldr r2, _080A597C @ =gPlayers
	adds r0, r2, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r1, r0, #0x1c
	lsrs r0, r1, #0x1c
	cmp r0, #5
	bls _080A5980
	movs r5, #0
	movs r6, #2
	b _080A598E
	.align 2, 0
_080A597C: .4byte gPlayers
_080A5980:
	lsrs r5, r1, #0x1c
	movs r1, #0xbd
	lsls r1, r1, #1
	adds r0, r2, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r6, r0, #0x1c
_080A598E:
	ldr r1, _080A59EC @ =gDispCnt
	movs r2, #0x82
	lsls r2, r2, #5
	adds r0, r2, #0
	strh r0, [r1]
	cmp r7, #0
	beq _080A59FC
	movs r7, #0x10
	ldr r0, _080A59F0 @ =sub_80A6480
	movs r1, #0xa8
	lsls r1, r1, #1
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r3, _080A59F4 @ =sub_80A7E78
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	mov r8, r0
	ldr r4, _080A59F8 @ =gPlayers
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #2
	adds r0, r0, r5
	lsls r0, r0, #4
	adds r0, r0, r4
	adds r0, #0x2a
	ldrb r3, [r0]
	movs r2, #0x10
	rsbs r2, r2, #0
	adds r1, r2, #0
	ands r1, r3
	strb r1, [r0]
	lsls r0, r6, #2
	adds r0, r0, r6
	lsls r0, r0, #2
	adds r0, r0, r6
	lsls r0, r0, #4
	adds r0, r0, r4
	adds r0, #0x2a
	ldrb r1, [r0]
	ands r2, r1
	movs r1, #2
	orrs r2, r1
	strb r2, [r0]
	b _080A5A1C
	.align 2, 0
_080A59EC: .4byte gDispCnt
_080A59F0: .4byte sub_80A6480
_080A59F4: .4byte sub_80A7E78
_080A59F8: .4byte gPlayers
_080A59FC:
	ldr r0, _080A5AE0 @ =sub_80A7E90
	movs r1, #0xa8
	lsls r1, r1, #1
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r3, _080A5AE4 @ =sub_80A7E78
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	mov r8, r0
	bl m4aMPlayAllStop
	movs r0, #0x4e
	bl m4aSongNumStart
_080A5A1C:
	mov r0, r8
	ldrh r6, [r0, #6]
	movs r4, #0xc0
	lsls r4, r4, #0x12
	adds r4, r6, r4
	movs r1, #0
	mov sb, r1
	strb r7, [r4, #4]
	str r1, [r4]
	movs r5, #0
	mov r2, sb
	strh r2, [r4, #8]
	strb r5, [r4, #6]
	movs r0, #0xc8
	lsls r0, r0, #7
	str r0, [r4, #0x14]
	movs r1, #0xf0
	lsls r1, r1, #7
	str r1, [r4, #0x18]
	movs r0, #0x84
	lsls r0, r0, #8
	str r0, [r4, #0x1c]
	str r1, [r4, #0x20]
	mov r0, sb
	str r0, [r4, #0x2c]
	str r0, [r4, #0x30]
	strb r5, [r4, #5]
	ldr r0, _080A5AE8 @ =0x00000CAC
	bl EwramMalloc
	ldr r1, _080A5AEC @ =0x0300014C
	adds r6, r6, r1
	str r0, [r6]
	mov r2, sb
	str r2, [sp, #4]
	ldr r3, _080A5AF0 @ =0x040000D4
	add r0, sp, #4
	str r0, [r3]
	ldr r7, _080A5AF4 @ =gBgCntRegs
	ldrh r1, [r7, #4]
	movs r2, #0xc
	adds r0, r2, #0
	ands r0, r1
	lsls r0, r0, #0xc
	movs r1, #0xc0
	lsls r1, r1, #0x13
	mov ip, r1
	add r0, ip
	str r0, [r3, #4]
	ldr r0, _080A5AF8 @ =0x85000010
	mov sl, r0
	str r0, [r3, #8]
	ldr r0, [r3, #8]
	ldr r1, _080A5AFC @ =gUnknown_03006230
	mov r8, r1
	strb r5, [r1, #2]
	ldr r1, _080A5B00 @ =gUnknown_03003590
	strb r5, [r1, #8]
	strb r5, [r1, #9]
	movs r0, #0xff
	strb r0, [r1, #0xa]
	movs r6, #0x40
	strb r6, [r1, #0xb]
	mov r0, sb
	str r0, [sp, #4]
	add r0, sp, #4
	str r0, [r3]
	ldrh r0, [r7, #2]
	ands r2, r0
	lsls r2, r2, #0xc
	add r2, ip
	str r2, [r3, #4]
	mov r2, sl
	str r2, [r3, #8]
	ldr r0, [r3, #8]
	movs r0, #0x12
	mov r2, r8
	strb r0, [r2, #1]
	strb r5, [r1, #4]
	strb r5, [r1, #5]
	subs r0, #0x13
	strb r0, [r1, #6]
	strb r6, [r1, #7]
	strb r5, [r2]
	strb r5, [r1]
	strb r5, [r1, #1]
	strb r0, [r1, #2]
	strb r6, [r1, #3]
	ldr r0, _080A5B04 @ =0x06010000
	str r0, [r4, #0xc]
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A5AE0: .4byte sub_80A7E90
_080A5AE4: .4byte sub_80A7E78
_080A5AE8: .4byte 0x00000CAC
_080A5AEC: .4byte 0x0300014C
_080A5AF0: .4byte 0x040000D4
_080A5AF4: .4byte gBgCntRegs
_080A5AF8: .4byte 0x85000010
_080A5AFC: .4byte gUnknown_03006230
_080A5B00: .4byte gUnknown_03003590
_080A5B04: .4byte 0x06010000

	thumb_func_start sub_80A5B08
sub_80A5B08: @ 0x080A5B08
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r4, r0, #0
	ldr r3, _080A5B30 @ =gPlayers
	adds r0, r3, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r2, r0, #0x1c
	lsrs r0, r2, #0x1c
	cmp r0, #5
	bls _080A5B38
	ldr r0, _080A5B34 @ =gUnknown_080D9B74
	ldrb r6, [r0]
	ldrb r5, [r0, #2]
	b _080A5B50
	.align 2, 0
_080A5B30: .4byte gPlayers
_080A5B34: .4byte gUnknown_080D9B74
_080A5B38:
	ldr r1, _080A5CA4 @ =gUnknown_080D9B74
	lsrs r0, r2, #0x1c
	adds r0, r0, r1
	ldrb r6, [r0]
	movs r2, #0xbd
	lsls r2, r2, #1
	adds r0, r3, r2
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	adds r0, r0, r1
	ldrb r5, [r0]
_080A5B50:
	adds r2, r4, #0
	adds r2, #0xd4
	ldr r0, [r4, #0xc]
	str r0, [r2]
	ldr r3, _080A5CA8 @ =gUnknown_080D9E68
	mov r8, r3
	lsls r1, r6, #2
	adds r0, r1, r3
	ldr r0, [r0]
	lsls r0, r0, #5
	str r0, [sp]
	ldr r0, [r4, #0xc]
	ldr r3, [sp]
	adds r0, r0, r3
	str r0, [r4, #0xc]
	ldr r0, _080A5CAC @ =gUnknown_080D9E40
	mov sl, r0
	add r1, sl
	ldr r0, [r1]
	ldrh r0, [r0]
	movs r7, #0
	strh r0, [r2, #0xc]
	ldr r0, [r1]
	ldrb r0, [r0, #2]
	strb r0, [r2, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	mov sb, r1
	movs r0, #0xff
	strb r0, [r2, #0x1b]
	ldr r0, [r4, #0x14]
	asrs r0, r0, #8
	strh r0, [r2, #0x10]
	ldr r0, [r4, #0x18]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	movs r0, #0x40
	strh r0, [r2, #0x14]
	strh r7, [r2, #0xe]
	strh r7, [r2, #0x16]
	movs r3, #0x10
	strb r3, [r2, #0x1c]
	strb r6, [r2, #0x1f]
	cmp r6, #4
	bne _080A5BAE
	movs r0, #5
	strb r0, [r2, #0x1f]
_080A5BAE:
	str r7, [r2, #8]
	adds r0, r2, #0
	bl UpdateSpriteAnimation
	movs r0, #0x92
	lsls r0, r0, #1
	adds r2, r4, r0
	ldr r0, [r4, #0xc]
	str r0, [r2]
	lsls r1, r5, #2
	mov r3, r8
	adds r0, r1, r3
	ldr r0, [r0]
	lsls r0, r0, #5
	mov r8, r0
	ldr r0, [r4, #0xc]
	add r0, r8
	str r0, [r4, #0xc]
	add r1, sl
	ldr r0, [r1]
	ldrh r0, [r0]
	strh r0, [r2, #0xc]
	ldr r0, [r1]
	ldrb r0, [r0, #2]
	strb r0, [r2, #0x1a]
	ldrb r0, [r2, #0x1b]
	mov r1, sb
	orrs r0, r1
	strb r0, [r2, #0x1b]
	ldr r0, [r4, #0x1c]
	asrs r0, r0, #8
	strh r0, [r2, #0x10]
	ldr r0, [r4, #0x20]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	movs r0, #0x80
	strh r0, [r2, #0x14]
	strh r7, [r2, #0xe]
	strh r7, [r2, #0x16]
	movs r3, #0x10
	strb r3, [r2, #0x1c]
	strb r5, [r2, #0x1f]
	cmp r5, #4
	bne _080A5C0A
	movs r0, #5
	strb r0, [r2, #0x1f]
_080A5C0A:
	str r7, [r2, #8]
	adds r0, r2, #0
	bl UpdateSpriteAnimation
	adds r1, r4, #0
	adds r1, #0xac
	ldr r0, [r4, #0xc]
	str r0, [r1]
	ldr r0, [r4, #0xc]
	ldr r1, [sp]
	adds r0, r0, r1
	str r0, [r4, #0xc]
	adds r1, r4, #0
	adds r1, #0xfc
	str r0, [r1]
	ldr r0, [r4, #0xc]
	add r0, r8
	str r0, [r4, #0xc]
	cmp r6, #3
	beq _080A5C36
	cmp r5, #3
	bne _080A5C92
_080A5C36:
	movs r5, #0
	movs r2, #0x5c
	adds r2, r2, r4
	mov r8, r2
	mov r7, sl
	movs r3, #0
	mov sb, r3
	movs r6, #0
_080A5C46:
	mov r1, r8
	cmp r5, #0
	beq _080A5C50
	adds r1, r4, #0
	adds r1, #0x84
_080A5C50:
	ldr r0, [r4, #0xc]
	str r0, [r1]
	ldr r0, [r4, #0xc]
	movs r2, #0x90
	lsls r2, r2, #1
	adds r0, r0, r2
	str r0, [r4, #0xc]
	ldr r0, [r7, #0x14]
	ldrh r0, [r0]
	strh r0, [r1, #0xc]
	ldr r0, [r7, #0x14]
	ldrb r0, [r0, #2]
	strb r0, [r1, #0x1a]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	movs r0, #0xa0
	lsls r0, r0, #2
	strh r0, [r1, #0x14]
	strh r6, [r1, #0xe]
	strh r6, [r1, #0x16]
	movs r0, #0x10
	strb r0, [r1, #0x1c]
	mov r3, sb
	strb r3, [r1, #0x1f]
	str r6, [r1, #8]
	adds r0, r1, #0
	bl UpdateSpriteAnimation
	adds r0, r5, #1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #1
	bls _080A5C46
_080A5C92:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A5CA4: .4byte gUnknown_080D9B74
_080A5CA8: .4byte gUnknown_080D9E68
_080A5CAC: .4byte gUnknown_080D9E40

	thumb_func_start sub_80A5CB0
sub_80A5CB0: @ 0x080A5CB0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r5, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	mov sb, r1
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	mov sl, r2
	ldr r3, _080A5CE4 @ =gPlayers
	adds r0, r3, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r2, r0, #0x1c
	lsrs r0, r2, #0x1c
	cmp r0, #5
	bls _080A5CEC
	ldr r0, _080A5CE8 @ =gUnknown_080D9B74
	ldrb r1, [r0]
	mov r8, r1
	ldrb r6, [r0, #2]
	b _080A5D06
	.align 2, 0
_080A5CE4: .4byte gPlayers
_080A5CE8: .4byte gUnknown_080D9B74
_080A5CEC:
	ldr r1, _080A5D4C @ =gUnknown_080D9B74
	lsrs r0, r2, #0x1c
	adds r0, r0, r1
	ldrb r0, [r0]
	mov r8, r0
	movs r2, #0xbd
	lsls r2, r2, #1
	adds r0, r3, r2
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	adds r0, r0, r1
	ldrb r6, [r0]
_080A5D06:
	adds r4, r5, #0
	adds r4, #0xd4
	mov r3, sl
	cmp r3, #0
	beq _080A5D12
	subs r4, #0x28
_080A5D12:
	ldr r0, _080A5D50 @ =gUnknown_080D9E40
	mov r2, r8
	lsls r1, r2, #2
	adds r1, r1, r0
	ldr r0, [r1]
	mov r3, sb
	lsls r2, r3, #3
	adds r0, r2, r0
	ldrh r0, [r0]
	movs r3, #0
	strh r0, [r4, #0xc]
	ldr r0, [r1]
	adds r0, r2, r0
	ldrb r0, [r0, #2]
	strb r0, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	movs r0, #0x40
	strh r0, [r4, #0x14]
	strh r3, [r4, #0xe]
	strh r3, [r4, #0x16]
	movs r0, #0x10
	strb r0, [r4, #0x1c]
	ldrb r0, [r5, #4]
	adds r7, r2, #0
	cmp r0, #8
	bhi _080A5D54
	mov r0, r8
	b _080A5D56
	.align 2, 0
_080A5D4C: .4byte gUnknown_080D9B74
_080A5D50: .4byte gUnknown_080D9E40
_080A5D54:
	movs r0, #0
_080A5D56:
	strb r0, [r4, #0x1f]
	movs r0, #0
	str r0, [r4, #8]
	mov r1, sb
	cmp r1, #5
	bhi _080A5D80
	mov r0, r8
	subs r0, #2
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _080A5D7A
	ldrb r0, [r5, #4]
	cmp r0, #7
	bls _080A5D7A
	movs r0, #0x80
	lsls r0, r0, #3
	b _080A5D80
_080A5D7A:
	ldr r0, [r4, #8]
	ldr r1, _080A5D94 @ =0xFFFFFBFF
	ands r0, r1
_080A5D80:
	str r0, [r4, #8]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	mov r2, sl
	cmp r2, #0
	beq _080A5D98
	adds r3, r5, #0
	adds r3, #0xfc
	b _080A5D9E
	.align 2, 0
_080A5D94: .4byte 0xFFFFFBFF
_080A5D98:
	movs r0, #0x92
	lsls r0, r0, #1
	adds r3, r5, r0
_080A5D9E:
	ldr r0, _080A5DD0 @ =gUnknown_080D9E40
	lsls r1, r6, #2
	adds r1, r1, r0
	ldr r0, [r1]
	adds r0, r7, r0
	ldrh r0, [r0]
	movs r2, #0
	strh r0, [r3, #0xc]
	ldr r0, [r1]
	adds r0, r7, r0
	ldrb r0, [r0, #2]
	strb r0, [r3, #0x1a]
	movs r0, #0xff
	strb r0, [r3, #0x1b]
	movs r0, #0x80
	strh r0, [r3, #0x14]
	strh r2, [r3, #0xe]
	strh r2, [r3, #0x16]
	movs r0, #0x10
	strb r0, [r3, #0x1c]
	ldrb r0, [r5, #4]
	cmp r0, #8
	bhi _080A5DD4
	strb r6, [r3, #0x1f]
	b _080A5DD8
	.align 2, 0
_080A5DD0: .4byte gUnknown_080D9E40
_080A5DD4:
	movs r0, #0
	strb r0, [r3, #0x1f]
_080A5DD8:
	movs r0, #0
	str r0, [r3, #8]
	mov r1, sb
	cmp r1, #5
	bhi _080A5DF8
	subs r0, r6, #2
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _080A5E08
	ldrb r0, [r5, #4]
	cmp r0, #7
	bls _080A5E08
	movs r0, #0x80
	lsls r0, r0, #3
	b _080A5E0E
_080A5DF8:
	cmp r6, #3
	bne _080A5E08
	mov r2, sb
	cmp r2, #7
	bne _080A5E08
	movs r0, #0x80
	lsls r0, r0, #3
	b _080A5E0E
_080A5E08:
	ldr r0, [r3, #8]
	ldr r1, _080A5E6C @ =0xFFFFFBFF
	ands r0, r1
_080A5E0E:
	str r0, [r3, #8]
	adds r0, r3, #0
	bl UpdateSpriteAnimation
	mov r3, r8
	cmp r3, #3
	beq _080A5E20
	cmp r6, #3
	bne _080A5E7C
_080A5E20:
	adds r3, r5, #0
	adds r3, #0x5c
	mov r0, sl
	cmp r0, #0
	beq _080A5E2C
	adds r3, #0x28
_080A5E2C:
	ldr r1, _080A5E70 @ =gUnknown_080D9E40
	ldr r0, [r1, #0x14]
	adds r0, r7, r0
	ldrh r0, [r0]
	movs r2, #0
	movs r4, #0
	strh r0, [r3, #0xc]
	ldr r0, [r1, #0x14]
	adds r0, r7, r0
	ldrb r0, [r0, #2]
	strb r0, [r3, #0x1a]
	movs r0, #0xff
	strb r0, [r3, #0x1b]
	movs r0, #0xa0
	lsls r0, r0, #2
	strh r0, [r3, #0x14]
	strh r4, [r3, #0xe]
	strh r4, [r3, #0x16]
	movs r0, #0x10
	strb r0, [r3, #0x1c]
	strb r2, [r3, #0x1f]
	str r4, [r3, #8]
	mov r1, sb
	cmp r1, #3
	bhi _080A5E74
	ldrb r0, [r5, #4]
	cmp r0, #7
	bls _080A5E74
	movs r0, #0x80
	lsls r0, r0, #3
	str r0, [r3, #8]
	b _080A5E76
	.align 2, 0
_080A5E6C: .4byte 0xFFFFFBFF
_080A5E70: .4byte gUnknown_080D9E40
_080A5E74:
	str r4, [r3, #8]
_080A5E76:
	adds r0, r3, #0
	bl UpdateSpriteAnimation
_080A5E7C:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80A5E8C
sub_80A5E8C: @ 0x080A5E8C
	push {r4, r5, lr}
	adds r3, r0, #0
	lsls r1, r1, #0x18
	lsrs r5, r1, #0x18
	lsls r2, r2, #0x18
	adds r4, r3, #0
	adds r4, #0xd4
	cmp r2, #0
	beq _080A5EA0
	subs r4, #0x28
_080A5EA0:
	ldr r0, [r3, #0xc]
	str r0, [r4]
	ldr r0, _080A5EE8 @ =gUnknown_080D9E68
	ldr r1, [r0, #8]
	lsls r1, r1, #5
	ldr r0, [r3, #0xc]
	adds r0, r0, r1
	str r0, [r3, #0xc]
	ldr r3, _080A5EEC @ =gUnknown_080D9E40
	ldr r0, [r3, #8]
	lsls r1, r5, #3
	adds r0, r1, r0
	ldrh r0, [r0]
	movs r2, #0
	strh r0, [r4, #0xc]
	ldr r0, [r3, #8]
	adds r1, r1, r0
	ldrb r0, [r1, #2]
	strb r0, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	strh r2, [r4, #0x14]
	strh r2, [r4, #0xe]
	strh r2, [r4, #0x16]
	movs r0, #0x10
	strb r0, [r4, #0x1c]
	movs r0, #2
	strb r0, [r4, #0x1f]
	str r2, [r4, #8]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A5EE8: .4byte gUnknown_080D9E68
_080A5EEC: .4byte gUnknown_080D9E40

	thumb_func_start sub_80A5EF0
sub_80A5EF0: @ 0x080A5EF0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r6, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	mov sb, r1
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	mov sl, r2
	ldr r3, _080A5F20 @ =gPlayers
	adds r0, r3, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r2, r0, #0x1c
	lsrs r0, r2, #0x1c
	cmp r0, #5
	bls _080A5F28
	ldr r0, _080A5F24 @ =gUnknown_080D9B74
	ldrb r5, [r0]
	ldrb r7, [r0, #2]
	b _080A5F40
	.align 2, 0
_080A5F20: .4byte gPlayers
_080A5F24: .4byte gUnknown_080D9B74
_080A5F28:
	ldr r1, _080A5F84 @ =gUnknown_080D9B74
	lsrs r0, r2, #0x1c
	adds r0, r0, r1
	ldrb r5, [r0]
	movs r2, #0xbd
	lsls r2, r2, #1
	adds r0, r3, r2
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	adds r0, r0, r1
	ldrb r7, [r0]
_080A5F40:
	adds r4, r6, #0
	adds r4, #0xd4
	mov r0, sl
	cmp r0, #0
	beq _080A5F4C
	subs r4, #0x28
_080A5F4C:
	ldr r0, _080A5F88 @ =gUnknown_080D9E40
	lsls r1, r5, #2
	adds r1, r1, r0
	ldr r0, [r1]
	mov r2, sb
	lsls r3, r2, #3
	adds r0, r3, r0
	ldrh r0, [r0]
	movs r2, #0
	strh r0, [r4, #0xc]
	ldr r0, [r1]
	adds r0, r3, r0
	ldrb r0, [r0, #2]
	strb r0, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	strh r2, [r4, #0x14]
	strh r2, [r4, #0xe]
	strh r2, [r4, #0x16]
	mov r8, r3
	cmp r5, #0
	bne _080A5F8C
	mov r0, sb
	cmp r0, #0xa
	bne _080A5F8C
	movs r0, #0x20
	b _080A5F8E
	.align 2, 0
_080A5F84: .4byte gUnknown_080D9B74
_080A5F88: .4byte gUnknown_080D9E40
_080A5F8C:
	movs r0, #0x10
_080A5F8E:
	strb r0, [r4, #0x1c]
	movs r1, #0
	strb r5, [r4, #0x1f]
	cmp r5, #4
	bne _080A5F9C
	movs r0, #5
	strb r0, [r4, #0x1f]
_080A5F9C:
	str r1, [r4, #8]
	cmp r5, #0
	bne _080A5FAC
	ldrb r0, [r6, #4]
	cmp r0, #0x12
	bls _080A5FB6
	str r5, [r4, #8]
	b _080A5FC0
_080A5FAC:
	cmp r5, #1
	bne _080A5FBE
	ldrb r0, [r6, #4]
	cmp r0, #0x13
	bhi _080A5FBE
_080A5FB6:
	movs r0, #0x80
	lsls r0, r0, #3
	str r0, [r4, #8]
	b _080A5FC0
_080A5FBE:
	str r1, [r4, #8]
_080A5FC0:
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	ldrb r0, [r6, #4]
	cmp r0, #0x14
	bhi _080A5FD2
	mov r2, sb
	cmp r2, #0xa
	beq _080A607E
_080A5FD2:
	mov r0, sl
	cmp r0, #0
	beq _080A5FDE
	adds r2, r6, #0
	adds r2, #0xfc
	b _080A5FE4
_080A5FDE:
	movs r0, #0x92
	lsls r0, r0, #1
	adds r2, r6, r0
_080A5FE4:
	ldr r0, _080A602C @ =gUnknown_080D9E40
	lsls r1, r7, #2
	adds r1, r1, r0
	ldr r0, [r1]
	add r0, r8
	ldrh r0, [r0]
	movs r3, #0
	strh r0, [r2, #0xc]
	ldr r0, [r1]
	add r0, r8
	ldrb r0, [r0, #2]
	strb r0, [r2, #0x1a]
	movs r0, #0xff
	strb r0, [r2, #0x1b]
	movs r0, #0x40
	strh r0, [r2, #0x14]
	strh r3, [r2, #0xe]
	strh r3, [r2, #0x16]
	movs r0, #0x10
	strb r0, [r2, #0x1c]
	strb r7, [r2, #0x1f]
	cmp r7, #4
	bne _080A6016
	movs r0, #5
	strb r0, [r2, #0x1f]
_080A6016:
	str r3, [r2, #8]
	ldrb r0, [r6, #4]
	cmp r0, #0x13
	bhi _080A6030
	cmp r7, #1
	bhi _080A6030
	movs r0, #0x80
	lsls r0, r0, #3
	str r0, [r2, #8]
	b _080A6032
	.align 2, 0
_080A602C: .4byte gUnknown_080D9E40
_080A6030:
	str r3, [r2, #8]
_080A6032:
	adds r0, r2, #0
	bl UpdateSpriteAnimation
	cmp r5, #3
	beq _080A6040
	cmp r7, #3
	bne _080A607E
_080A6040:
	adds r4, r6, #0
	adds r4, #0x5c
	mov r2, sl
	cmp r2, #0
	beq _080A604C
	adds r4, #0x28
_080A604C:
	ldr r2, _080A608C @ =gUnknown_080D9E40
	ldr r0, [r2, #0x14]
	add r0, r8
	ldrh r0, [r0]
	movs r3, #0
	movs r1, #0
	strh r0, [r4, #0xc]
	ldr r0, [r2, #0x14]
	add r0, r8
	ldrb r0, [r0, #2]
	strb r0, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	movs r0, #0xa0
	lsls r0, r0, #2
	strh r0, [r4, #0x14]
	strh r1, [r4, #0xe]
	strh r1, [r4, #0x16]
	movs r0, #0x10
	strb r0, [r4, #0x1c]
	strb r3, [r4, #0x1f]
	str r1, [r4, #8]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
_080A607E:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A608C: .4byte gUnknown_080D9E40

	thumb_func_start sub_80A6090
sub_80A6090: @ 0x080A6090
	push {r4, lr}
	ldr r4, _080A60D8 @ =gCurTask
	ldr r0, [r4]
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	bl sub_80A6A5C
	ldr r2, _080A60DC @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080A60E0 @ =gWinRegs
	movs r2, #0
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	movs r0, #0x3f
	strh r0, [r1, #8]
	movs r0, #0x1f
	strh r0, [r1, #0xa]
	ldr r1, _080A60E4 @ =gBldRegs
	ldr r0, _080A60E8 @ =0x00003FFF
	strh r0, [r1]
	strh r2, [r1, #4]
	ldr r1, [r4]
	ldr r0, _080A60EC @ =sub_80A60F0
	str r0, [r1, #8]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A60D8: .4byte gCurTask
_080A60DC: .4byte gDispCnt
_080A60E0: .4byte gWinRegs
_080A60E4: .4byte gBldRegs
_080A60E8: .4byte 0x00003FFF
_080A60EC: .4byte sub_80A60F0

	thumb_func_start sub_80A60F0
sub_80A60F0: @ 0x080A60F0
	push {r4, r5, r6, lr}
	ldr r6, _080A616C @ =gCurTask
	ldr r0, [r6]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	ldr r0, _080A6170 @ =gPlayers
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	adds r0, r5, #0
	bl sub_80A6A5C
	ldrb r0, [r5, #4]
	cmp r0, #6
	bne _080A6124
	ldr r0, [r5, #0x14]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r0, r1
	str r0, [r5, #0x14]
	ldr r0, [r5, #0x1c]
	adds r0, r0, r1
	str r0, [r5, #0x1c]
_080A6124:
	ldrh r0, [r5, #8]
	adds r0, #1
	strh r0, [r5, #8]
	ldr r2, _080A6174 @ =gUnknown_080D9E58
	ldrb r1, [r5, #5]
	lsls r1, r1, #1
	adds r1, r1, r2
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r1, [r1]
	cmp r0, r1
	blo _080A6190
	movs r0, #0
	strh r0, [r5, #8]
	ldrb r0, [r5, #4]
	adds r0, #1
	strb r0, [r5, #5]
	ldr r1, _080A6178 @ =gUnknown_080DA054
	ldrb r0, [r5, #5]
	adds r0, r0, r1
	ldrb r0, [r0]
	strb r0, [r5, #4]
	ldr r1, _080A617C @ =gUnknown_080D9BC0
	ldrb r0, [r5, #5]
	adds r0, r0, r1
	ldrb r4, [r0]
	adds r0, r5, #0
	adds r1, r4, #0
	movs r2, #0
	bl sub_80A5CB0
	cmp r4, #3
	bne _080A6184
	ldr r1, [r6]
	ldr r0, _080A6180 @ =sub_80A619C
	b _080A618E
	.align 2, 0
_080A616C: .4byte gCurTask
_080A6170: .4byte gPlayers
_080A6174: .4byte gUnknown_080D9E58
_080A6178: .4byte gUnknown_080DA054
_080A617C: .4byte gUnknown_080D9BC0
_080A6180: .4byte sub_80A619C
_080A6184:
	ldrb r0, [r5, #4]
	cmp r0, #7
	bne _080A6190
	ldr r1, [r6]
	ldr r0, _080A6198 @ =sub_80A6208
_080A618E:
	str r0, [r1, #8]
_080A6190:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A6198: .4byte sub_80A6208

	thumb_func_start sub_80A619C
sub_80A619C: @ 0x080A619C
	push {r4, r5, r6, lr}
	ldr r6, _080A61F8 @ =gCurTask
	ldr r0, [r6]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	ldr r0, _080A61FC @ =gPlayers
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	adds r0, r4, #0
	bl sub_80A6A5C
	ldrb r0, [r4, #4]
	cmp r0, #4
	bne _080A61D0
	ldr r1, _080A6200 @ =0x03000004
	adds r0, r5, r1
	ldr r1, [r4, #0xc]
	bl sub_80A45B4
	str r0, [r4, #0xc]
	movs r0, #5
	strb r0, [r4, #4]
_080A61D0:
	ldrb r0, [r4, #4]
	cmp r0, #6
	bne _080A61F0
	movs r0, #0
	strh r0, [r4, #8]
	ldrb r0, [r4, #5]
	adds r0, #1
	strb r0, [r4, #5]
	adds r0, r4, #0
	movs r1, #2
	movs r2, #0
	bl sub_80A5CB0
	ldr r1, [r6]
	ldr r0, _080A6204 @ =sub_80A60F0
	str r0, [r1, #8]
_080A61F0:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A61F8: .4byte gCurTask
_080A61FC: .4byte gPlayers
_080A6200: .4byte 0x03000004
_080A6204: .4byte sub_80A60F0

	thumb_func_start sub_80A6208
sub_80A6208: @ 0x080A6208
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r0, _080A6238 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	movs r0, #0
	mov r8, r0
	ldr r3, _080A623C @ =gPlayers
	adds r0, r3, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r2, r0, #0x1c
	lsrs r0, r2, #0x1c
	cmp r0, #5
	bls _080A6244
	ldr r0, _080A6240 @ =gUnknown_080D9B74
	ldrb r6, [r0]
	ldrb r7, [r0, #2]
	b _080A625C
	.align 2, 0
_080A6238: .4byte gCurTask
_080A623C: .4byte gPlayers
_080A6240: .4byte gUnknown_080D9B74
_080A6244:
	ldr r1, _080A62AC @ =gUnknown_080D9B74
	lsrs r0, r2, #0x1c
	adds r0, r0, r1
	ldrb r6, [r0]
	movs r2, #0xbd
	lsls r2, r2, #1
	adds r0, r3, r2
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	adds r0, r0, r1
	ldrb r7, [r0]
_080A625C:
	ldrh r0, [r4, #8]
	adds r0, #1
	strh r0, [r4, #8]
	adds r0, r4, #0
	bl sub_80A6370
	cmp r0, #1
	bne _080A62CA
	adds r2, r4, #0
	adds r2, #0xd4
	ldr r0, _080A62B0 @ =gUnknown_080D9BC0
	ldrb r3, [r0]
	ldr r1, _080A62B4 @ =gUnknown_080D9E40
	lsls r0, r6, #2
	adds r5, r0, r1
	ldr r0, [r5]
	lsls r3, r3, #3
	adds r0, r3, r0
	ldrh r1, [r0]
	ldrh r0, [r2, #0xc]
	cmp r0, r1
	beq _080A62C0
	strh r1, [r2, #0xc]
	ldr r0, [r5]
	adds r0, r3, r0
	ldrb r0, [r0, #2]
	strb r0, [r2, #0x1a]
	movs r0, #0xff
	strb r0, [r2, #0x1b]
	subs r0, r6, #2
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _080A62B8
	ldr r0, [r2, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	b _080A62BE
	.align 2, 0
_080A62AC: .4byte gUnknown_080D9B74
_080A62B0: .4byte gUnknown_080D9BC0
_080A62B4: .4byte gUnknown_080D9E40
_080A62B8:
	ldr r0, [r2, #8]
	ldr r1, _080A6314 @ =0xFFFFFBFF
	ands r0, r1
_080A62BE:
	str r0, [r2, #8]
_080A62C0:
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
_080A62CA:
	adds r0, r4, #0
	bl sub_80A63FC
	cmp r0, #1
	bne _080A6332
	movs r0, #0x92
	lsls r0, r0, #1
	adds r2, r4, r0
	ldr r0, _080A6318 @ =gUnknown_080D9BC0
	ldrb r3, [r0]
	ldr r1, _080A631C @ =gUnknown_080D9E40
	lsls r0, r7, #2
	adds r5, r0, r1
	ldr r0, [r5]
	lsls r3, r3, #3
	adds r0, r3, r0
	ldrh r1, [r0]
	ldrh r0, [r2, #0xc]
	cmp r0, r1
	beq _080A6328
	strh r1, [r2, #0xc]
	ldr r0, [r5]
	adds r0, r3, r0
	ldrb r0, [r0, #2]
	strb r0, [r2, #0x1a]
	movs r0, #0xff
	strb r0, [r2, #0x1b]
	subs r0, r7, #2
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _080A6320
	ldr r0, [r2, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	b _080A6326
	.align 2, 0
_080A6314: .4byte 0xFFFFFBFF
_080A6318: .4byte gUnknown_080D9BC0
_080A631C: .4byte gUnknown_080D9E40
_080A6320:
	ldr r0, [r2, #8]
	ldr r1, _080A6354 @ =0xFFFFFBFF
	ands r0, r1
_080A6326:
	str r0, [r2, #8]
_080A6328:
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
_080A6332:
	mov r2, r8
	cmp r2, #2
	bne _080A6360
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0
	bl sub_80A5CB0
	ldrb r0, [r4, #5]
	adds r0, #1
	strb r0, [r4, #5]
	ldr r0, _080A6358 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A635C @ =sub_80A7F58
	str r0, [r1, #8]
	b _080A6366
	.align 2, 0
_080A6354: .4byte 0xFFFFFBFF
_080A6358: .4byte gCurTask
_080A635C: .4byte sub_80A7F58
_080A6360:
	adds r0, r4, #0
	bl sub_80A6A5C
_080A6366:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80A6370
sub_80A6370: @ 0x080A6370
	push {r4, lr}
	adds r3, r0, #0
	adds r4, r3, #0
	adds r4, #0xd4
	ldr r0, _080A638C @ =gPlayers
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r2, r0, #0x1c
	lsrs r0, r2, #0x1c
	cmp r0, #5
	bls _080A6394
	ldr r0, _080A6390 @ =gUnknown_080D9B74
	b _080A639A
	.align 2, 0
_080A638C: .4byte gPlayers
_080A6390: .4byte gUnknown_080D9B74
_080A6394:
	ldr r1, _080A63C4 @ =gUnknown_080D9B74
	lsrs r0, r2, #0x1c
	adds r0, r0, r1
_080A639A:
	ldrb r1, [r0]
	ldr r0, _080A63C8 @ =gUnknown_080D9B79
	adds r0, r1, r0
	ldrb r0, [r0]
	lsls r2, r0, #8
	ldr r0, [r3, #0x14]
	cmp r0, r2
	bge _080A63CC
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	str r0, [r4, #8]
	ldr r0, [r3, #0x14]
	movs r1, #0x80
	lsls r1, r1, #2
	adds r0, r0, r1
	str r0, [r3, #0x14]
	cmp r0, r2
	blt _080A63F4
	b _080A63E4
	.align 2, 0
_080A63C4: .4byte gUnknown_080D9B74
_080A63C8: .4byte gUnknown_080D9B79
_080A63CC:
	cmp r0, r2
	ble _080A63E4
	ldr r0, [r4, #8]
	ldr r1, _080A63EC @ =0xFFFFFBFF
	ands r0, r1
	str r0, [r4, #8]
	ldr r0, [r3, #0x14]
	ldr r1, _080A63F0 @ =0xFFFFFE00
	adds r0, r0, r1
	str r0, [r3, #0x14]
	cmp r0, r2
	bgt _080A63F4
_080A63E4:
	str r2, [r3, #0x14]
	movs r0, #1
	b _080A63F6
	.align 2, 0
_080A63EC: .4byte 0xFFFFFBFF
_080A63F0: .4byte 0xFFFFFE00
_080A63F4:
	movs r0, #0
_080A63F6:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_80A63FC
sub_80A63FC: @ 0x080A63FC
	push {r4, lr}
	adds r3, r0, #0
	movs r0, #0x92
	lsls r0, r0, #1
	adds r4, r3, r0
	ldr r1, _080A6444 @ =gUnknown_080D9B74
	ldr r0, _080A6448 @ =gPlayers
	movs r2, #0xbd
	lsls r2, r2, #1
	adds r0, r0, r2
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	adds r0, r0, r1
	ldrb r0, [r0]
	ldr r1, _080A644C @ =gUnknown_080D9B79
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r2, r0, #8
	ldr r0, [r3, #0x1c]
	cmp r0, r2
	bge _080A6450
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	str r0, [r4, #8]
	ldr r0, [r3, #0x1c]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r0, r1
	str r0, [r3, #0x1c]
	cmp r0, r2
	blt _080A6478
	b _080A6468
	.align 2, 0
_080A6444: .4byte gUnknown_080D9B74
_080A6448: .4byte gPlayers
_080A644C: .4byte gUnknown_080D9B79
_080A6450:
	cmp r0, r2
	ble _080A6468
	ldr r0, [r4, #8]
	ldr r1, _080A6470 @ =0xFFFFFBFF
	ands r0, r1
	str r0, [r4, #8]
	ldr r0, [r3, #0x1c]
	ldr r1, _080A6474 @ =0xFFFFFF00
	adds r0, r0, r1
	str r0, [r3, #0x1c]
	cmp r0, r2
	bgt _080A6478
_080A6468:
	str r2, [r3, #0x1c]
	movs r0, #1
	b _080A647A
	.align 2, 0
_080A6470: .4byte 0xFFFFFBFF
_080A6474: .4byte 0xFFFFFF00
_080A6478:
	movs r0, #0
_080A647A:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_80A6480
sub_80A6480: @ 0x080A6480
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	ldr r0, _080A64B8 @ =gCurTask
	mov r8, r0
	ldr r0, [r0]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	movs r6, #0
	ldrb r0, [r4, #6]
	cmp r0, #0
	bne _080A6560
	ldr r3, _080A64BC @ =gPlayers
	adds r0, r3, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r2, r0, #0x1c
	lsrs r0, r2, #0x1c
	cmp r0, #5
	bls _080A64C4
	ldr r0, _080A64C0 @ =gUnknown_080D9B74
	ldrb r6, [r0]
	ldrb r3, [r0, #2]
	b _080A64DC
	.align 2, 0
_080A64B8: .4byte gCurTask
_080A64BC: .4byte gPlayers
_080A64C0: .4byte gUnknown_080D9B74
_080A64C4:
	ldr r1, _080A6554 @ =gUnknown_080D9B74
	lsrs r0, r2, #0x1c
	adds r0, r0, r1
	ldrb r6, [r0]
	movs r2, #0xbd
	lsls r2, r2, #1
	adds r0, r3, r2
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	adds r0, r0, r1
	ldrb r3, [r0]
_080A64DC:
	ldr r2, _080A6558 @ =gUnknown_080D9B7E
	lsls r0, r6, #1
	adds r0, r0, r2
	movs r7, #0
	ldrsh r0, [r0, r7]
	lsls r0, r0, #8
	str r0, [r4, #0x14]
	movs r1, #0xf2
	lsls r1, r1, #7
	str r1, [r4, #0x18]
	lsls r0, r3, #1
	adds r0, r0, r2
	movs r2, #0
	ldrsh r0, [r0, r2]
	lsls r0, r0, #8
	str r0, [r4, #0x1c]
	str r1, [r4, #0x20]
	adds r0, r4, #0
	bl sub_80A5B08
	adds r0, r4, #0
	adds r0, #0x34
	ldr r1, [r4, #0xc]
	str r1, [r4, #0x34]
	movs r7, #0xa0
	lsls r7, r7, #2
	adds r1, r1, r7
	str r1, [r4, #0xc]
	movs r3, #0
	movs r2, #0
	ldr r1, _080A655C @ =0x00000533
	strh r1, [r0, #0xc]
	strb r3, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r4, #0x14]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r4, #0x18]
	asrs r1, r1, #8
	adds r1, #0xa
	strh r1, [r0, #0x12]
	strh r2, [r0, #0x14]
	strh r2, [r0, #0xe]
	strh r2, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	strb r3, [r0, #0x1f]
	str r2, [r0, #8]
	bl UpdateSpriteAnimation
	adds r0, r4, #4
	ldr r1, [r4, #0xc]
	adds r2, r4, #0
	adds r2, #0x14
	bl sub_80A828C
	str r0, [r4, #0xc]
	b _080A65B4
	.align 2, 0
_080A6554: .4byte gUnknown_080D9B74
_080A6558: .4byte gUnknown_080D9B7E
_080A655C: .4byte 0x00000533
_080A6560:
	cmp r0, #1
	bne _080A6580
	adds r0, r4, #0
	movs r1, #0
	movs r2, #1
	bl sub_80A5EF0
	ldr r1, _080A657C @ =0x03000004
	adds r0, r5, r1
	ldr r1, [r4, #0xc]
	bl sub_80A45B4
	str r0, [r4, #0xc]
	b _080A65B4
	.align 2, 0
_080A657C: .4byte 0x03000004
_080A6580:
	cmp r0, #2
	bne _080A65B4
	ldr r0, [r4, #0xc]
	movs r1, #0x14
	rsbs r1, r1, #0
	movs r2, #0x5a
	rsbs r2, r2, #0
	ldr r7, _080A65AC @ =0x03000004
	adds r3, r5, r7
	str r3, [sp]
	movs r3, #0
	bl sub_80A9BD8
	str r0, [r4, #0xc]
	movs r0, #0
	strh r6, [r4, #8]
	strb r0, [r4, #6]
	mov r0, r8
	ldr r1, [r0]
	ldr r0, _080A65B0 @ =sub_80A65C8
	str r0, [r1, #8]
	b _080A65BA
	.align 2, 0
_080A65AC: .4byte 0x03000004
_080A65B0: .4byte sub_80A65C8
_080A65B4:
	ldrb r0, [r4, #6]
	adds r0, #1
	strb r0, [r4, #6]
_080A65BA:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80A65C8
sub_80A65C8: @ 0x080A65C8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	ldr r0, _080A6638 @ =gCurTask
	mov r8, r0
	ldr r0, [r0]
	ldrh r6, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r6, r0
	adds r0, r5, #0
	bl sub_80A6DD0
	ldrh r0, [r5, #8]
	adds r0, #1
	strh r0, [r5, #8]
	ldr r1, _080A663C @ =gUnknown_080D9E80
	ldrb r2, [r5, #6]
	adds r1, r2, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrb r1, [r1]
	cmp r0, r1
	bls _080A662A
	adds r0, r2, #1
	strb r0, [r5, #6]
	ldr r0, [r5, #0xc]
	ldr r4, _080A6640 @ =gUnknown_080D9E90
	ldrb r3, [r5, #6]
	lsls r2, r3, #3
	adds r1, r2, r4
	ldr r1, [r1]
	adds r4, #4
	adds r2, r2, r4
	ldr r2, [r2]
	ldr r7, _080A6644 @ =0x03000004
	adds r4, r6, r7
	str r4, [sp]
	bl sub_80A9BD8
	str r0, [r5, #0xc]
	ldrb r0, [r5, #6]
	cmp r0, #0xc
	bls _080A662A
	mov r0, r8
	ldr r1, [r0]
	ldr r0, _080A6648 @ =sub_80A6768
	str r0, [r1, #8]
_080A662A:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A6638: .4byte gCurTask
_080A663C: .4byte gUnknown_080D9E80
_080A6640: .4byte gUnknown_080D9E90
_080A6644: .4byte 0x03000004
_080A6648: .4byte sub_80A6768

	thumb_func_start sub_80A664C
sub_80A664C: @ 0x080A664C
	push {r4, r5, lr}
	sub sp, #4
	ldr r0, _080A66EC @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	ldr r0, [r5, #0x18]
	str r0, [r5, #0x20]
	adds r0, r5, #0
	bl sub_80A6A5C
	ldrb r0, [r5, #4]
	cmp r0, #0xe
	bne _080A6690
	ldr r0, [r5, #0x30]
	subs r0, #0x40
	str r0, [r5, #0x30]
	cmp r0, #0
	bgt _080A667A
	movs r0, #0
	str r0, [r5, #0x30]
_080A667A:
	ldr r1, [r5, #0x30]
	movs r0, #0xf0
	lsls r0, r0, #7
	adds r1, r1, r0
	ldr r0, _080A66F0 @ =gBgScrollRegs
	movs r2, #6
	ldrsh r0, [r0, r2]
	subs r0, #0x50
	lsls r0, r0, #8
	subs r1, r1, r0
	str r1, [r5, #0x18]
_080A6690:
	ldr r0, [r5, #0x18]
	str r0, [r5, #0x20]
	ldrh r0, [r5, #8]
	adds r0, #1
	strh r0, [r5, #8]
	ldr r1, _080A66F4 @ =gUnknown_080D9E80
	ldrb r2, [r5, #6]
	adds r1, r2, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrb r1, [r1]
	cmp r0, r1
	bls _080A66E2
	adds r0, r2, #1
	strb r0, [r5, #6]
	ldr r0, [r5, #0xc]
	ldr r4, _080A66F8 @ =gUnknown_080D9E90
	ldrb r3, [r5, #6]
	lsls r2, r3, #3
	adds r1, r2, r4
	ldr r1, [r1]
	adds r4, #4
	adds r2, r2, r4
	ldr r2, [r2]
	adds r4, r5, #4
	str r4, [sp]
	bl sub_80A9BD8
	str r0, [r5, #0xc]
	ldrb r0, [r5, #6]
	cmp r0, #0xd
	bls _080A66E2
	adds r0, r5, #0
	movs r1, #6
	movs r2, #1
	bl sub_80A5CB0
	ldr r0, _080A66EC @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A66FC @ =sub_80A808C
	str r0, [r1, #8]
_080A66E2:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A66EC: .4byte gCurTask
_080A66F0: .4byte gBgScrollRegs
_080A66F4: .4byte gUnknown_080D9E80
_080A66F8: .4byte gUnknown_080D9E90
_080A66FC: .4byte sub_80A808C

	thumb_func_start sub_80A6700
sub_80A6700: @ 0x080A6700
	push {r4, r5, r6, lr}
	ldr r6, _080A6758 @ =gCurTask
	ldr r0, [r6]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	adds r0, r4, #0
	bl sub_80A6BDC
	ldrh r1, [r4, #8]
	ldr r0, _080A675C @ =0x000001DF
	cmp r1, r0
	bhi _080A6720
	adds r0, r1, #1
	strh r0, [r4, #8]
_080A6720:
	ldrh r1, [r4, #8]
	movs r0, #0xf0
	lsls r0, r0, #1
	cmp r1, r0
	bne _080A673A
	adds r0, r1, #1
	strh r0, [r4, #8]
	ldr r1, _080A6760 @ =0x03000004
	adds r0, r5, r1
	ldr r1, [r4, #0xc]
	bl sub_80A9E24
	str r0, [r4, #0xc]
_080A673A:
	ldrb r0, [r4, #4]
	cmp r0, #0x12
	bne _080A6750
	adds r0, r4, #0
	movs r1, #7
	movs r2, #0
	bl sub_80A5CB0
	ldr r1, [r6]
	ldr r0, _080A6764 @ =sub_80A805C
	str r0, [r1, #8]
_080A6750:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A6758: .4byte gCurTask
_080A675C: .4byte 0x000001DF
_080A6760: .4byte 0x03000004
_080A6764: .4byte sub_80A805C

	thumb_func_start sub_80A6768
sub_80A6768: @ 0x080A6768
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	ldr r0, _080A679C @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	add r0, sp, #4
	movs r1, #0
	movs r2, #6
	bl memset
	ldr r3, _080A67A0 @ =gPlayers
	adds r0, r3, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r2, r0, #0x1c
	lsrs r0, r2, #0x1c
	cmp r0, #5
	bls _080A67A8
	ldr r0, _080A67A4 @ =gUnknown_080D9B74
	ldrb r7, [r0]
	ldrb r6, [r0, #2]
	b _080A67C0
	.align 2, 0
_080A679C: .4byte gCurTask
_080A67A0: .4byte gPlayers
_080A67A4: .4byte gUnknown_080D9B74
_080A67A8:
	ldr r1, _080A6844 @ =gUnknown_080D9B74
	lsrs r0, r2, #0x1c
	adds r0, r0, r1
	ldrb r7, [r0]
	movs r2, #0xbd
	lsls r2, r2, #1
	adds r0, r3, r2
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	adds r0, r0, r1
	ldrb r6, [r0]
_080A67C0:
	add r1, sp, #4
	movs r0, #0xf0
	lsls r0, r0, #1
	strh r0, [r1]
	adds r0, #0x78
	strh r0, [r1, #2]
	adds r0, #0xb4
	strh r0, [r1, #4]
	adds r0, r5, #0
	bl sub_80A6DD0
	add r1, sp, #4
	ldrh r0, [r5, #8]
	ldrh r1, [r1]
	cmp r0, r1
	blo _080A67FE
	adds r4, r5, #0
	adds r4, #0x34
	ldr r0, [r5, #0x14]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x18]
	asrs r0, r0, #8
	adds r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
_080A67FE:
	add r0, sp, #4
	ldrh r1, [r5, #8]
	ldrh r0, [r0, #4]
	cmp r1, r0
	bhi _080A680C
	adds r0, r1, #1
	strh r0, [r5, #8]
_080A680C:
	add r0, sp, #4
	ldrh r1, [r5, #8]
	ldrh r0, [r0]
	cmp r1, r0
	bne _080A6856
	adds r0, r1, #1
	strh r0, [r5, #8]
	movs r0, #0x13
	strb r0, [r5, #4]
	adds r0, r5, #0
	movs r1, #8
	movs r2, #1
	bl sub_80A5EF0
	adds r0, r5, #4
	ldr r1, [r5, #0xc]
	bl sub_80AA06C
	str r0, [r5, #0xc]
	cmp r7, #0
	bne _080A6848
	ldr r0, [r5, #0x18]
	movs r1, #0xc0
	lsls r1, r1, #3
	adds r0, r0, r1
	str r0, [r5, #0x18]
	b _080A6856
	.align 2, 0
_080A6844: .4byte gUnknown_080D9B74
_080A6848:
	cmp r6, #0
	bne _080A6856
	ldr r0, [r5, #0x20]
	movs r2, #0xc0
	lsls r2, r2, #3
	adds r0, r0, r2
	str r0, [r5, #0x20]
_080A6856:
	add r0, sp, #4
	ldrh r1, [r0, #2]
	ldrh r0, [r5, #8]
	cmp r0, r1
	bne _080A6882
	movs r1, #0xa6
	lsls r1, r1, #1
	adds r0, r5, r1
	ldr r0, [r0]
	ldr r1, [r5, #0xc]
	str r1, [sp]
	movs r1, #0x2b
	movs r2, #0x64
	movs r3, #0x28
	bl sub_80AD7B4
	movs r0, #0xc8
	lsls r0, r0, #7
	str r0, [r5, #0x24]
	movs r0, #0xa0
	lsls r0, r0, #6
	str r0, [r5, #0x28]
_080A6882:
	add r0, sp, #4
	ldrh r1, [r0, #2]
	ldrh r0, [r5, #8]
	cmp r0, r1
	bls _080A68A0
	movs r2, #0xa6
	lsls r2, r2, #1
	adds r4, r5, r2
	ldr r0, [r4]
	bl sub_8023734
	str r0, [r5]
	ldr r0, [r4]
	bl sub_80239A8
_080A68A0:
	ldr r0, [r5]
	cmp r0, #1
	bne _080A68F8
	movs r1, #0xa6
	lsls r1, r1, #1
	adds r0, r5, r1
	ldr r0, [r0]
	bl sub_80239A8
	add r1, sp, #4
	ldrh r0, [r5, #8]
	ldrh r1, [r1, #4]
	cmp r0, r1
	blo _080A68F8
	cmp r7, #0
	bne _080A68D0
	ldr r0, [r5, #0x18]
	ldr r2, _080A68CC @ =0xFFFFF800
	adds r0, r0, r2
	str r0, [r5, #0x18]
	b _080A68DC
	.align 2, 0
_080A68CC: .4byte 0xFFFFF800
_080A68D0:
	cmp r6, #0
	bne _080A68DC
	ldr r0, [r5, #0x20]
	ldr r1, _080A6900 @ =0xFFFFF800
	adds r0, r0, r1
	str r0, [r5, #0x20]
_080A68DC:
	movs r0, #0x14
	strb r0, [r5, #4]
	adds r0, r5, #0
	bl sub_80A825C
	adds r0, r5, #0
	movs r1, #0xa
	movs r2, #1
	bl sub_80A5EF0
	ldr r0, _080A6904 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A6908 @ =sub_80A80EC
	str r0, [r1, #8]
_080A68F8:
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A6900: .4byte 0xFFFFF800
_080A6904: .4byte gCurTask
_080A6908: .4byte sub_80A80EC

	thumb_func_start sub_80A690C
sub_80A690C: @ 0x080A690C
	push {r4, r5, lr}
	ldr r0, _080A6990 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	movs r5, #0
	ldrb r3, [r4, #6]
	cmp r3, #5
	bhi _080A694C
	ldrh r0, [r4, #8]
	adds r0, #1
	strh r0, [r4, #8]
	ldr r2, _080A6994 @ =gUnknown_080D9BB2
	ldrb r1, [r4, #6]
	lsls r1, r1, #1
	adds r1, r1, r2
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r1, [r1]
	cmp r0, r1
	bls _080A694C
	strh r5, [r4, #8]
	adds r0, r3, #1
	strb r0, [r4, #6]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #6
	bls _080A694C
	movs r0, #6
	strb r0, [r4, #6]
_080A694C:
	ldrb r0, [r4, #6]
	cmp r0, #3
	bne _080A6962
	ldrh r0, [r4, #8]
	cmp r0, #0
	bne _080A6962
	adds r0, r4, #0
	movs r1, #0xb
	movs r2, #1
	bl sub_80A5EF0
_080A6962:
	ldrb r0, [r4, #6]
	cmp r0, #6
	bne _080A6978
	ldrh r0, [r4, #8]
	cmp r0, #0
	bne _080A6978
	adds r0, r4, #0
	movs r1, #0xc
	movs r2, #1
	bl sub_80A5EF0
_080A6978:
	ldr r2, [r4, #0x1c]
	ldr r0, _080A6998 @ =0xFFFFD800
	cmp r2, r0
	ble _080A69A0
	ldr r0, _080A699C @ =gUnknown_080D9BAA
	ldrb r1, [r4, #6]
	adds r1, r1, r0
	ldrb r0, [r1]
	lsls r0, r0, #8
	subs r0, r2, r0
	str r0, [r4, #0x1c]
	b _080A69A2
	.align 2, 0
_080A6990: .4byte gCurTask
_080A6994: .4byte gUnknown_080D9BB2
_080A6998: .4byte 0xFFFFD800
_080A699C: .4byte gUnknown_080D9BAA
_080A69A0:
	movs r5, #1
_080A69A2:
	adds r0, r4, #0
	bl sub_80A6DD0
	ldrb r0, [r4, #4]
	cmp r0, #0x16
	bne _080A69D2
	cmp r5, #0
	beq _080A69D2
	movs r0, #0x82
	lsls r0, r0, #8
	str r0, [r4, #0x14]
	ldr r0, _080A69D8 @ =0xFFFFE200
	str r0, [r4, #0x18]
	movs r0, #0
	strh r0, [r4, #8]
	adds r0, r4, #0
	movs r1, #0xd
	movs r2, #0
	bl sub_80A5E8C
	ldr r0, _080A69DC @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A69E0 @ =sub_80A814C
	str r0, [r1, #8]
_080A69D2:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A69D8: .4byte 0xFFFFE200
_080A69DC: .4byte gCurTask
_080A69E0: .4byte sub_80A814C

	thumb_func_start sub_80A69E4
sub_80A69E4: @ 0x080A69E4
	push {r4, r5, r6, lr}
	ldr r6, _080A6A44 @ =gCurTask
	ldr r0, [r6]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_80A8234
	ldrh r0, [r4, #8]
	adds r0, #1
	movs r5, #0
	strh r0, [r4, #8]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0xb4
	bne _080A6A3C
	ldr r2, _080A6A48 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r2, _080A6A4C @ =gWinRegs
	movs r0, #0xf0
	strh r0, [r2]
	movs r0, #0xa0
	strh r0, [r2, #4]
	ldr r3, _080A6A50 @ =0x00003FFF
	strh r3, [r2, #8]
	ldrh r0, [r2, #0xa]
	movs r1, #0x1f
	orrs r0, r1
	strh r0, [r2, #0xa]
	ldr r0, _080A6A54 @ =gBldRegs
	strh r3, [r0]
	strh r5, [r0, #4]
	str r5, [r4, #0x10]
	strh r5, [r4, #8]
	ldr r1, [r6]
	ldr r0, _080A6A58 @ =sub_80A8198
	str r0, [r1, #8]
_080A6A3C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A6A44: .4byte gCurTask
_080A6A48: .4byte gDispCnt
_080A6A4C: .4byte gWinRegs
_080A6A50: .4byte 0x00003FFF
_080A6A54: .4byte gBldRegs
_080A6A58: .4byte sub_80A8198

	thumb_func_start sub_80A6A5C
sub_80A6A5C: @ 0x080A6A5C
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	movs r7, #0
	ldr r3, _080A6A7C @ =gPlayers
	adds r0, r3, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r2, r0, #0x1c
	lsrs r0, r2, #0x1c
	cmp r0, #5
	bls _080A6A84
	ldr r0, _080A6A80 @ =gUnknown_080D9B74
	ldrb r2, [r0]
	ldrb r6, [r0, #2]
	b _080A6A9C
	.align 2, 0
_080A6A7C: .4byte gPlayers
_080A6A80: .4byte gUnknown_080D9B74
_080A6A84:
	ldr r1, _080A6BC8 @ =gUnknown_080D9B74
	lsrs r0, r2, #0x1c
	adds r0, r0, r1
	ldrb r2, [r0]
	movs r4, #0xbd
	lsls r4, r4, #1
	adds r0, r3, r4
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	adds r0, r0, r1
	ldrb r6, [r0]
_080A6A9C:
	cmp r2, #3
	bne _080A6ACE
	adds r4, r5, #0
	adds r4, #0x5c
	ldr r0, [r5, #0x14]
	asrs r2, r0, #8
	strh r2, [r4, #0x10]
	ldr r0, [r5, #0x18]
	asrs r1, r0, #8
	strh r1, [r4, #0x12]
	ldrb r0, [r5, #4]
	cmp r0, #8
	bhi _080A6AC2
	adds r0, r2, #0
	adds r0, #0x12
	strh r0, [r4, #0x10]
	adds r0, r1, #0
	subs r0, #0xf
	strh r0, [r4, #0x12]
_080A6AC2:
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
_080A6ACE:
	cmp r6, #3
	bne _080A6B00
	adds r4, r5, #0
	adds r4, #0x5c
	ldr r0, [r5, #0x1c]
	asrs r2, r0, #8
	strh r2, [r4, #0x10]
	ldr r0, [r5, #0x20]
	asrs r1, r0, #8
	strh r1, [r4, #0x12]
	ldrb r0, [r5, #4]
	cmp r0, #8
	bhi _080A6AF4
	adds r0, r2, #0
	adds r0, #0x12
	strh r0, [r4, #0x10]
	adds r0, r1, #0
	subs r0, #0xf
	strh r0, [r4, #0x12]
_080A6AF4:
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
_080A6B00:
	adds r4, r5, #0
	adds r4, #0xd4
	ldrb r0, [r5, #4]
	adds r3, r0, #0
	cmp r3, #8
	bhi _080A6B3C
	ldr r1, _080A6BCC @ =gUnknown_080D9D08
	ldrh r2, [r4, #0xc]
	ldrh r0, [r1]
	cmp r2, r0
	bne _080A6B1E
	ldrb r0, [r4, #0x1a]
	ldrb r1, [r1, #2]
	cmp r0, r1
	beq _080A6B2E
_080A6B1E:
	ldr r1, _080A6BD0 @ =gUnknown_080D9C90
	ldrh r0, [r1]
	cmp r2, r0
	bne _080A6B3C
	ldrb r0, [r4, #0x1a]
	ldrb r1, [r1, #2]
	cmp r0, r1
	bne _080A6B3C
_080A6B2E:
	cmp r3, #5
	bls _080A6B3C
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	str r0, [r4, #8]
_080A6B3C:
	ldr r0, [r5, #0x14]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x18]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	cmp r0, #0
	bne _080A6B58
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
_080A6B58:
	adds r0, r4, #0
	bl DisplaySprite
	movs r0, #0x92
	lsls r0, r0, #1
	adds r4, r5, r0
	ldrb r0, [r5, #4]
	cmp r0, #8
	bhi _080A6B9C
	ldr r1, _080A6BCC @ =gUnknown_080D9D08
	ldrh r2, [r4, #0xc]
	ldrh r0, [r1]
	cmp r2, r0
	bne _080A6B7C
	ldrb r0, [r4, #0x1a]
	ldrb r1, [r1, #2]
	cmp r0, r1
	beq _080A6B8C
_080A6B7C:
	ldr r1, _080A6BD0 @ =gUnknown_080D9C90
	ldrh r0, [r1]
	cmp r2, r0
	bne _080A6B9C
	ldrb r0, [r4, #0x1a]
	ldrb r1, [r1, #2]
	cmp r0, r1
	bne _080A6B9C
_080A6B8C:
	ldrb r0, [r5, #4]
	cmp r0, #5
	bls _080A6B9C
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	str r0, [r4, #8]
_080A6B9C:
	ldr r0, [r5, #0x1c]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x20]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	cmp r0, #0
	bne _080A6BB8
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
_080A6BB8:
	adds r0, r4, #0
	bl DisplaySprite
	cmp r7, #2
	beq _080A6BD4
	movs r0, #1
	b _080A6BD6
	.align 2, 0
_080A6BC8: .4byte gUnknown_080D9B74
_080A6BCC: .4byte gUnknown_080D9D08
_080A6BD0: .4byte gUnknown_080D9C90
_080A6BD4:
	movs r0, #0
_080A6BD6:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_80A6BDC
sub_80A6BDC: @ 0x080A6BDC
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	movs r7, #0
	ldr r3, _080A6BFC @ =gPlayers
	adds r0, r3, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r2, r0, #0x1c
	lsrs r0, r2, #0x1c
	cmp r0, #5
	bls _080A6C04
	ldr r0, _080A6C00 @ =gUnknown_080D9B74
	ldrb r2, [r0]
	ldrb r6, [r0, #2]
	b _080A6C1C
	.align 2, 0
_080A6BFC: .4byte gPlayers
_080A6C00: .4byte gUnknown_080D9B74
_080A6C04:
	ldr r1, _080A6CD4 @ =gUnknown_080D9B74
	lsrs r0, r2, #0x1c
	adds r0, r0, r1
	ldrb r2, [r0]
	movs r4, #0xbd
	lsls r4, r4, #1
	adds r0, r3, r4
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	adds r0, r0, r1
	ldrb r6, [r0]
_080A6C1C:
	cmp r2, #3
	bne _080A6C4E
	adds r4, r5, #0
	adds r4, #0x84
	ldr r0, [r5, #0x14]
	asrs r2, r0, #8
	strh r2, [r4, #0x10]
	ldr r0, [r5, #0x18]
	asrs r1, r0, #8
	strh r1, [r4, #0x12]
	ldrb r0, [r5, #4]
	cmp r0, #8
	bhi _080A6C42
	adds r0, r2, #0
	adds r0, #0x12
	strh r0, [r4, #0x10]
	adds r0, r1, #0
	subs r0, #0xf
	strh r0, [r4, #0x12]
_080A6C42:
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
_080A6C4E:
	cmp r6, #3
	bne _080A6C80
	adds r4, r5, #0
	adds r4, #0x84
	ldr r0, [r5, #0x1c]
	asrs r2, r0, #8
	strh r2, [r4, #0x10]
	ldr r0, [r5, #0x20]
	asrs r1, r0, #8
	strh r1, [r4, #0x12]
	ldrb r0, [r5, #4]
	cmp r0, #8
	bhi _080A6C74
	adds r0, r2, #0
	adds r0, #0x12
	strh r0, [r4, #0x10]
	adds r0, r1, #0
	subs r0, #0xf
	strh r0, [r4, #0x12]
_080A6C74:
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
_080A6C80:
	adds r4, r5, #0
	adds r4, #0xac
	ldr r0, [r5, #0x14]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x18]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	cmp r0, #0
	bne _080A6CA0
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
_080A6CA0:
	adds r0, r4, #0
	bl DisplaySprite
	adds r4, r5, #0
	adds r4, #0xfc
	ldr r0, [r5, #0x1c]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x20]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	cmp r0, #0
	bne _080A6CC6
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
_080A6CC6:
	adds r0, r4, #0
	bl DisplaySprite
	cmp r7, #2
	beq _080A6CD8
	movs r0, #1
	b _080A6CDA
	.align 2, 0
_080A6CD4: .4byte gUnknown_080D9B74
_080A6CD8:
	movs r0, #0
_080A6CDA:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_80A6CE0
sub_80A6CE0: @ 0x080A6CE0
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	movs r7, #0
	ldr r3, _080A6D00 @ =gPlayers
	adds r0, r3, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r2, r0, #0x1c
	lsrs r0, r2, #0x1c
	cmp r0, #5
	bls _080A6D08
	ldr r0, _080A6D04 @ =gUnknown_080D9B74
	ldrb r2, [r0]
	ldrb r6, [r0, #2]
	b _080A6D20
	.align 2, 0
_080A6D00: .4byte gPlayers
_080A6D04: .4byte gUnknown_080D9B74
_080A6D08:
	ldr r1, _080A6DC4 @ =gUnknown_080D9B74
	lsrs r0, r2, #0x1c
	adds r0, r0, r1
	ldrb r2, [r0]
	movs r4, #0xbd
	lsls r4, r4, #1
	adds r0, r3, r4
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	adds r0, r0, r1
	ldrb r6, [r0]
_080A6D20:
	cmp r2, #3
	bne _080A6D46
	adds r4, r5, #0
	adds r4, #0x5c
	ldr r1, [r5, #0x14]
	asrs r1, r1, #8
	strh r1, [r4, #0x10]
	ldr r0, [r5, #0x18]
	asrs r0, r0, #8
	adds r1, #0x12
	strh r1, [r4, #0x10]
	subs r0, #0xf
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
_080A6D46:
	cmp r6, #3
	bne _080A6D6C
	adds r4, r5, #0
	adds r4, #0x5c
	ldr r1, [r5, #0x1c]
	asrs r1, r1, #8
	strh r1, [r4, #0x10]
	ldr r0, [r5, #0x20]
	asrs r0, r0, #8
	adds r1, #0x12
	strh r1, [r4, #0x10]
	subs r0, #0xf
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
_080A6D6C:
	adds r4, r5, #0
	adds r4, #0xd4
	ldr r0, [r5, #0x14]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x18]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	cmp r0, #0
	bne _080A6D8C
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
_080A6D8C:
	adds r0, r4, #0
	bl DisplaySprite
	movs r0, #0x92
	lsls r0, r0, #1
	adds r4, r5, r0
	ldr r0, [r5, #0x1c]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x20]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	cmp r0, #0
	bne _080A6DB4
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
_080A6DB4:
	adds r0, r4, #0
	bl DisplaySprite
	cmp r7, #2
	beq _080A6DC8
	movs r0, #1
	b _080A6DCA
	.align 2, 0
_080A6DC4: .4byte gUnknown_080D9B74
_080A6DC8:
	movs r0, #0
_080A6DCA:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_80A6DD0
sub_80A6DD0: @ 0x080A6DD0
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	movs r7, #0
	ldr r3, _080A6DF0 @ =gPlayers
	adds r0, r3, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r2, r0, #0x1c
	lsrs r0, r2, #0x1c
	cmp r0, #5
	bls _080A6DF8
	ldr r0, _080A6DF4 @ =gUnknown_080D9B74
	ldrb r2, [r0]
	ldrb r6, [r0, #2]
	b _080A6E10
	.align 2, 0
_080A6DF0: .4byte gPlayers
_080A6DF4: .4byte gUnknown_080D9B74
_080A6DF8:
	ldr r1, _080A6EB0 @ =gUnknown_080D9B74
	lsrs r0, r2, #0x1c
	adds r0, r0, r1
	ldrb r2, [r0]
	movs r4, #0xbd
	lsls r4, r4, #1
	adds r0, r3, r4
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	adds r0, r0, r1
	ldrb r6, [r0]
_080A6E10:
	cmp r2, #3
	bne _080A6E36
	adds r4, r5, #0
	adds r4, #0x84
	ldr r1, [r5, #0x14]
	asrs r1, r1, #8
	strh r1, [r4, #0x10]
	ldr r0, [r5, #0x18]
	asrs r0, r0, #8
	adds r1, #0x12
	strh r1, [r4, #0x10]
	subs r0, #0xf
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
_080A6E36:
	cmp r6, #3
	bne _080A6E5C
	adds r4, r5, #0
	adds r4, #0x84
	ldr r1, [r5, #0x1c]
	asrs r1, r1, #8
	strh r1, [r4, #0x10]
	ldr r0, [r5, #0x20]
	asrs r0, r0, #8
	adds r1, #0x12
	strh r1, [r4, #0x10]
	subs r0, #0xf
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
_080A6E5C:
	adds r4, r5, #0
	adds r4, #0xac
	ldr r0, [r5, #0x14]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x18]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	cmp r0, #0
	bne _080A6E7C
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
_080A6E7C:
	adds r0, r4, #0
	bl DisplaySprite
	adds r4, r5, #0
	adds r4, #0xfc
	ldr r0, [r5, #0x1c]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x20]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	cmp r0, #0
	bne _080A6EA2
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
_080A6EA2:
	adds r0, r4, #0
	bl DisplaySprite
	cmp r7, #2
	beq _080A6EB4
	movs r0, #1
	b _080A6EB6
	.align 2, 0
_080A6EB0: .4byte gUnknown_080D9B74
_080A6EB4:
	movs r0, #0
_080A6EB6:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_80A6EBC
sub_80A6EBC: @ 0x080A6EBC
	push {lr}
	mov ip, r0
	ldr r2, _080A6F1C @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #1
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080A6F20 @ =gBgCntRegs
	movs r3, #0
	movs r2, #0
	ldr r0, _080A6F24 @ =0x00008D07
	strh r0, [r1]
	ldr r1, _080A6F28 @ =gBgScrollRegs
	movs r0, #8
	strh r0, [r1]
	movs r0, #0x30
	strh r0, [r1, #2]
	mov r0, ip
	adds r0, #0xec
	ldr r1, _080A6F2C @ =0x06004000
	str r1, [r0, #4]
	strh r2, [r0, #0xa]
	ldr r1, _080A6F30 @ =0x06006800
	str r1, [r0, #0xc]
	strh r2, [r0, #0x18]
	strh r2, [r0, #0x1a]
	movs r1, #0x99
	lsls r1, r1, #1
	strh r1, [r0, #0x1c]
	strh r2, [r0, #0x1e]
	strh r2, [r0, #0x20]
	strh r2, [r0, #0x22]
	strh r2, [r0, #0x24]
	movs r1, #0x20
	strh r1, [r0, #0x26]
	movs r1, #0x40
	strh r1, [r0, #0x28]
	adds r1, #0xd6
	add r1, ip
	strb r3, [r1]
	strh r2, [r0, #0x2e]
	bl DrawBackground
	pop {r0}
	bx r0
	.align 2, 0
_080A6F1C: .4byte gDispCnt
_080A6F20: .4byte gBgCntRegs
_080A6F24: .4byte 0x00008D07
_080A6F28: .4byte gBgScrollRegs
_080A6F2C: .4byte 0x06004000
_080A6F30: .4byte 0x06006800

	thumb_func_start sub_80A6F34
sub_80A6F34: @ 0x080A6F34
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	adds r0, #0x74
	ldr r2, [r7, #8]
	str r2, [r7, #0x74]
	ldr r3, _080A70B4 @ =gUnknown_080D9F08
	ldr r1, [r3, #0xc]
	lsls r1, r1, #5
	adds r2, r2, r1
	str r2, [r7, #8]
	ldrh r1, [r3, #8]
	movs r2, #0
	mov r8, r2
	movs r4, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r3, #0xa]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0xc]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x10]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r3, #0xa0
	lsls r3, r3, #3
	mov sl, r3
	mov r1, sl
	strh r1, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	movs r2, #0x10
	mov sb, r2
	mov r3, sb
	strb r3, [r0, #0x1c]
	mov r1, r8
	strb r1, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	adds r0, #0x4c
	ldr r1, [r7, #8]
	str r1, [r7, #0x4c]
	ldr r2, _080A70B4 @ =gUnknown_080D9F08
	ldr r6, [r2, #0x24]
	lsls r6, r6, #5
	adds r1, r1, r6
	str r1, [r7, #8]
	ldrh r1, [r2, #0x20]
	mov r3, sp
	strh r1, [r3]
	strh r1, [r0, #0xc]
	adds r1, r2, #0
	adds r1, #0x22
	ldrb r5, [r1]
	strb r5, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0xc]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x10]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	mov r2, sl
	strh r2, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	mov r3, sb
	strb r3, [r0, #0x1c]
	mov r1, r8
	strb r1, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	adds r0, #0xc4
	ldr r1, [r7, #8]
	str r1, [r0]
	ldr r3, _080A70B4 @ =gUnknown_080D9F08
	ldr r2, [r3, #0x1c]
	lsls r2, r2, #5
	ldr r1, [r7, #8]
	adds r1, r1, r2
	str r1, [r7, #8]
	ldrh r1, [r3, #0x18]
	strh r1, [r0, #0xc]
	ldrb r1, [r3, #0x1a]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0xc]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x10]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	mov r1, sl
	strh r1, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	mov r2, sb
	strb r2, [r0, #0x1c]
	movs r3, #1
	mov r8, r3
	mov r1, r8
	strb r1, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	adds r0, #0x9c
	ldr r1, [r7, #8]
	str r1, [r0]
	ldr r1, [r7, #8]
	adds r1, r1, r6
	str r1, [r7, #8]
	mov r2, sp
	ldrh r2, [r2]
	strh r2, [r0, #0xc]
	strb r5, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0xc]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x10]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	mov r3, sl
	strh r3, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	mov r1, sb
	strb r1, [r0, #0x1c]
	mov r2, r8
	strb r2, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	adds r0, #0x24
	ldr r1, [r7, #8]
	str r1, [r7, #0x24]
	movs r3, #0xa8
	lsls r3, r3, #2
	adds r1, r1, r3
	str r1, [r7, #8]
	ldr r2, _080A70B4 @ =gUnknown_080D9F08
	ldrh r1, [r2]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0xc]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x10]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	mov r3, sl
	strh r3, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	mov r1, sb
	strb r1, [r0, #0x1c]
	movs r1, #4
	strb r1, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A70B4: .4byte gUnknown_080D9F08

	thumb_func_start sub_80A70B8
sub_80A70B8: @ 0x080A70B8
	push {r4, r5, r6, lr}
	sub sp, #4
	ldr r6, _080A7120 @ =gCurTask
	ldr r0, [r6]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	ldr r1, _080A7124 @ =gUnknown_080D9F58
	mov r0, sp
	movs r2, #4
	bl memcpy
	ldr r0, [r4]
	ldrb r0, [r0]
	cmp r0, #0xb
	bhi _080A70F4
	ldr r1, [r4, #0x18]
	adds r0, r1, #0
	adds r0, #0x20
	str r0, [r4, #0x18]
	ldr r0, _080A7128 @ =0x00009620
	adds r1, r1, r0
	ldr r0, _080A712C @ =gBgScrollRegs
	movs r2, #6
	ldrsh r0, [r0, r2]
	subs r0, #0x50
	lsls r0, r0, #8
	subs r1, r1, r0
	str r1, [r4, #0x10]
_080A70F4:
	ldr r0, [r4]
	ldrb r0, [r0]
	cmp r0, #0xc
	bls _080A713C
	ldr r1, _080A7130 @ =0x03000024
	adds r0, r5, r1
	ldr r1, _080A7134 @ =gUnknown_080D9F08
	ldrh r2, [r1, #0x28]
	movs r3, #0
	strh r2, [r0, #0xc]
	adds r1, #0x2a
	ldrb r1, [r1]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	strb r3, [r0, #0x1f]
	bl UpdateSpriteAnimation
	ldr r1, [r6]
	ldr r0, _080A7138 @ =sub_80A714C
	str r0, [r1, #8]
	b _080A7144
	.align 2, 0
_080A7120: .4byte gCurTask
_080A7124: .4byte gUnknown_080D9F58
_080A7128: .4byte 0x00009620
_080A712C: .4byte gBgScrollRegs
_080A7130: .4byte 0x03000024
_080A7134: .4byte gUnknown_080D9F08
_080A7138: .4byte sub_80A714C
_080A713C:
	adds r0, r4, #0
	mov r1, sp
	bl sub_80A72F4
_080A7144:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_80A714C
sub_80A714C: @ 0x080A714C
	push {r4, lr}
	sub sp, #4
	ldr r0, _080A7194 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r1, _080A7198 @ =gUnknown_080D9F58
	mov r0, sp
	movs r2, #4
	bl memcpy
	ldr r0, [r4]
	ldrb r0, [r0]
	cmp r0, #0xe
	bne _080A71A0
	ldr r0, [r4, #0x18]
	subs r0, #0x40
	str r0, [r4, #0x18]
	cmp r0, #0
	bgt _080A717C
	movs r0, #0
	str r0, [r4, #0x18]
_080A717C:
	ldr r1, [r4, #0x18]
	ldr r0, _080A719C @ =gBgScrollRegs
	movs r2, #6
	ldrsh r0, [r0, r2]
	subs r0, #0x50
	lsls r0, r0, #8
	subs r1, r1, r0
	movs r0, #0x98
	lsls r0, r0, #8
	adds r1, r1, r0
	str r1, [r4, #0x10]
	b _080A71B2
	.align 2, 0
_080A7194: .4byte gCurTask
_080A7198: .4byte gUnknown_080D9F58
_080A719C: .4byte gBgScrollRegs
_080A71A0:
	ldr r0, _080A71DC @ =gBgScrollRegs
	movs r2, #6
	ldrsh r1, [r0, r2]
	subs r1, #0x50
	lsls r1, r1, #8
	movs r0, #0x98
	lsls r0, r0, #8
	subs r0, r0, r1
	str r0, [r4, #0x10]
_080A71B2:
	adds r0, r4, #0
	mov r1, sp
	bl sub_80A72F4
	ldr r0, [r4]
	ldrb r0, [r0]
	cmp r0, #0x11
	bls _080A71D2
	ldr r0, _080A71E0 @ =gBldRegs
	ldrh r0, [r0, #4]
	cmp r0, #0x10
	bne _080A71D2
	ldr r0, _080A71E4 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
_080A71D2:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A71DC: .4byte gBgScrollRegs
_080A71E0: .4byte gBldRegs
_080A71E4: .4byte gCurTask

	thumb_func_start sub_80A71E8
sub_80A71E8: @ 0x080A71E8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x10
	adds r4, r0, #0
	adds r5, r1, #0
	adds r0, #0x74
	str r0, [sp]
	subs r0, #0x28
	str r0, [sp, #4]
	adds r0, #0x78
	str r0, [sp, #8]
	subs r0, #0x28
	str r0, [sp, #0xc]
	movs r0, #0
	mov r8, r0
	movs r0, #8
	strh r0, [r5]
	movs r6, #0
_080A720E:
	movs r3, #0
	movs r0, #0xf0
	lsls r0, r0, #8
	ldr r2, [r4, #0xc]
	cmp r2, r0
	ble _080A722C
	ldr r1, _080A7228 @ =0xFFFF1000
	adds r0, r2, r1
	asrs r0, r0, #8
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	b _080A722E
	.align 2, 0
_080A7228: .4byte 0xFFFF1000
_080A722C:
	movs r1, #0
_080A722E:
	cmp r1, #0xf
	bls _080A7248
	movs r1, #0
	ldr r7, _080A7244 @ =0xFFFFF000
	adds r0, r2, r7
	str r0, [r4, #0xc]
	ldrb r0, [r4, #4]
	adds r0, #1
	strb r0, [r4, #4]
	b _080A724A
	.align 2, 0
_080A7244: .4byte 0xFFFFF000
_080A7248:
	movs r1, #0
_080A724A:
	ldrb r0, [r4, #4]
	cmp r0, #0
	beq _080A7256
	adds r0, r1, r0
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
_080A7256:
	adds r1, r1, r6
	cmp r1, #0x20
	ble _080A7286
	movs r0, #2
	mov r8, r0
	cmp r6, #0
	beq _080A7274
	movs r1, #1
	mov r8, r1
	ldr r1, [r4]
	ldrb r0, [r1]
	cmp r0, #3
	bhi _080A7274
	movs r0, #4
	strb r0, [r1]
_080A7274:
	cmp r6, #5
	bne _080A72E2
	ldr r1, [r4]
	ldrb r0, [r1]
	cmp r0, #5
	bhi _080A72E2
	movs r0, #6
	strb r0, [r1]
	b _080A72E2
_080A7286:
	ldr r0, _080A72C0 @ =gUnknown_080D9F5C
	adds r0, r1, r0
	ldrb r0, [r0]
	cmp r0, #3
	bls _080A7298
	subs r0, #4
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r3, #1
_080A7298:
	lsls r0, r0, #2
	add r0, sp
	ldr r2, [r0]
	ldr r1, [r4, #0xc]
	asrs r1, r1, #8
	strh r1, [r2, #0x10]
	ldr r0, [r4, #0x10]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	ldrh r0, [r5]
	subs r1, r1, r0
	strh r1, [r2, #0x10]
	cmp r3, #0
	beq _080A72C4
	ldr r0, [r2, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	b _080A72CA
	.align 2, 0
_080A72C0: .4byte gUnknown_080D9F5C
_080A72C4:
	ldr r0, [r2, #8]
	ldr r1, _080A72F0 @ =0xFFFFFBFF
	ands r0, r1
_080A72CA:
	str r0, [r2, #8]
	adds r0, r2, #0
	bl DisplaySprite
	ldrh r0, [r5]
	adds r0, #0x10
	strh r0, [r5]
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #0xf
	bls _080A720E
_080A72E2:
	mov r0, r8
	add sp, #0x10
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080A72F0: .4byte 0xFFFFFBFF

	thumb_func_start sub_80A72F4
sub_80A72F4: @ 0x080A72F4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r6, r0, #0
	mov r8, r1
	mov r0, sp
	movs r1, #0
	movs r2, #4
	bl memset
	mov r1, sp
	movs r0, #0x18
	strh r0, [r1]
	movs r0, #3
	strh r0, [r1, #2]
	movs r7, #0
	adds r5, r6, #0
	adds r5, #0x24
	mov r4, sp
_080A731C:
	ldr r0, [r6, #0xc]
	asrs r0, r0, #8
	mov r2, r8
	ldrh r1, [r2]
	subs r0, r0, r1
	strh r0, [r5, #0x10]
	ldr r2, [r6, #0x10]
	asrs r2, r2, #8
	ldrh r1, [r4]
	subs r0, r0, r1
	strh r0, [r5, #0x10]
	ldrh r0, [r4, #2]
	subs r2, r2, r0
	strh r2, [r5, #0x12]
	adds r0, r5, #0
	bl DisplaySprite
	ldrh r0, [r4]
	adds r0, #0x3c
	strh r0, [r4]
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #3
	bls _080A731C
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80A735C
sub_80A735C: @ 0x080A735C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	mov r8, r0
	adds r7, r1, #0
	lsls r2, r2, #0x18
	lsrs r4, r2, #0x18
	lsls r3, r3, #0x18
	lsrs r6, r3, #0x18
	cmp r4, #0
	bne _080A7390
	ldr r0, _080A7388 @ =sub_80A74F8
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r1, _080A738C @ =sub_80A84D8
	str r1, [sp]
	movs r1, #0x28
	movs r3, #0
	bl TaskCreate
	b _080A73A2
	.align 2, 0
_080A7388: .4byte sub_80A74F8
_080A738C: .4byte sub_80A84D8
_080A7390:
	ldr r0, _080A73E8 @ =sub_80A7578
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r1, _080A73EC @ =sub_80A84D8
	str r1, [sp]
	movs r1, #0x28
	movs r3, #0
	bl TaskCreate
_080A73A2:
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	movs r3, #0
	strb r4, [r5, #9]
	strb r6, [r5, #0xa]
	str r7, [r5, #4]
	movs r6, #0
	strh r3, [r5, #0x14]
	strb r6, [r5, #8]
	strb r6, [r5, #0xb]
	mov r0, r8
	str r0, [r5]
	cmp r4, #0
	bne _080A7474
	ldr r2, _080A73F0 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080A73F4 @ =gWinRegs
	str r1, [r5, #0x10]
	adds r0, r1, #4
	str r0, [r5, #0xc]
	ldrb r0, [r5, #0xa]
	adds r2, r1, #0
	cmp r0, #0
	beq _080A73F8
	ldrh r0, [r2, #8]
	movs r1, #0x3c
	b _080A73FC
	.align 2, 0
_080A73E8: .4byte sub_80A7578
_080A73EC: .4byte sub_80A84D8
_080A73F0: .4byte gDispCnt
_080A73F4: .4byte gWinRegs
_080A73F8:
	ldrh r0, [r2, #8]
	movs r1, #0x3e
_080A73FC:
	orrs r0, r1
	strh r0, [r2, #8]
	ldrh r1, [r2, #0xa]
	movs r0, #0x1f
	orrs r0, r1
	strh r0, [r2, #0xa]
	movs r0, #0x80
	lsls r0, r0, #1
	str r0, [r5, #0x1c]
	movs r0, #0xa8
	lsls r0, r0, #6
	str r0, [r5, #0x18]
	movs r7, #0xe6
	lsls r7, r7, #7
	str r7, [r5, #0x20]
	ldr r4, _080A7448 @ =gPseudoRandom
	ldr r0, [r4]
	ldr r3, _080A744C @ =0x00196225
	adds r1, r0, #0
	muls r1, r3, r1
	ldr r2, _080A7450 @ =0x3C6EF35F
	adds r1, r1, r2
	lsrs r6, r1, #8
	movs r0, #0xf
	ands r6, r0
	adds r0, r1, #0
	muls r0, r3, r0
	adds r0, r0, r2
	str r0, [r4]
	movs r1, #2
	ands r0, r1
	cmp r0, #0
	beq _080A7454
	lsls r0, r6, #8
	adds r4, r7, #0
	adds r0, r0, r4
	b _080A7458
	.align 2, 0
_080A7448: .4byte gPseudoRandom
_080A744C: .4byte 0x00196225
_080A7450: .4byte 0x3C6EF35F
_080A7454:
	lsls r0, r6, #8
	subs r0, r7, r0
_080A7458:
	str r0, [r5, #0x20]
	ldr r0, _080A7470 @ =gBgScrollRegs
	movs r2, #6
	ldrsh r1, [r0, r2]
	subs r1, #0x50
	lsls r1, r1, #8
	movs r0, #0xd8
	lsls r0, r0, #5
	subs r0, r0, r1
	str r0, [r5, #0x24]
	b _080A74B2
	.align 2, 0
_080A7470: .4byte gBgScrollRegs
_080A7474:
	ldr r2, _080A74EC @ =gDispCnt
	ldrh r0, [r2]
	movs r4, #0x80
	lsls r4, r4, #7
	adds r1, r4, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080A74F0 @ =gUnknown_03003582
	str r1, [r5, #0x10]
	adds r0, r1, #4
	str r0, [r5, #0xc]
	subs r1, #2
	movs r0, #0xfc
	lsls r0, r0, #6
	strh r0, [r1, #8]
	ldrh r0, [r1, #0xa]
	movs r2, #0x1f
	orrs r0, r2
	strh r0, [r1, #0xa]
	movs r0, #0xf0
	lsls r0, r0, #8
	str r0, [r5, #0x1c]
	movs r0, #0xa0
	lsls r0, r0, #8
	str r0, [r5, #0x18]
	str r3, [r5, #0x20]
	str r3, [r5, #0x24]
	ldr r1, _080A74F4 @ =gBldRegs
	movs r0, #0xbf
	strh r0, [r1]
	strh r3, [r1, #4]
_080A74B2:
	ldr r2, [r5, #0xc]
	movs r0, #0xf0
	strh r0, [r2]
	ldr r3, [r5, #0x10]
	movs r0, #0xa0
	strh r0, [r3]
	ldr r0, [r5, #0x24]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r5, #0x18]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2]
	ldr r0, [r5, #0x20]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r5, #0x1c]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r3]
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A74EC: .4byte gDispCnt
_080A74F0: .4byte gUnknown_03003582
_080A74F4: .4byte gBldRegs

	thumb_func_start sub_80A74F8
sub_80A74F8: @ 0x080A74F8
	push {r4, r5, lr}
	ldr r5, _080A7548 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_80A84DC
	cmp r0, #1
	bne _080A754C
	ldr r2, [r4, #0xc]
	ldr r0, [r4, #0x24]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r4, #0x18]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2]
	ldr r2, [r4, #0x10]
	ldr r0, [r4, #0x20]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r4, #0x1c]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2]
	ldr r1, [r4, #4]
	cmp r1, #0
	beq _080A753E
	movs r0, #0
	strb r0, [r1]
_080A753E:
	ldr r0, [r5]
	bl TaskDestroy
	b _080A7570
	.align 2, 0
_080A7548: .4byte gCurTask
_080A754C:
	ldr r2, [r4, #0xc]
	ldr r0, [r4, #0x24]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r4, #0x18]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2]
	ldr r2, [r4, #0x10]
	ldr r0, [r4, #0x20]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r4, #0x1c]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2]
_080A7570:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80A7578
sub_80A7578: @ 0x080A7578
	push {r4, lr}
	ldr r4, _080A75CC @ =gCurTask
	ldr r0, [r4]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r3, r1, r0
	ldrb r0, [r3, #0xb]
	cmp r0, #4
	bls _080A75EC
	movs r0, #0xa0
	lsls r0, r0, #3
	str r0, [r3, #0x1c]
	movs r2, #0
	str r2, [r3, #0x18]
	movs r0, #0xe2
	lsls r0, r0, #7
	str r0, [r3, #0x20]
	movs r0, #0xb4
	lsls r0, r0, #7
	str r0, [r3, #0x24]
	ldr r1, _080A75D0 @ =gBldRegs
	ldr r0, _080A75D4 @ =0x00003F7F
	strh r0, [r1]
	strh r2, [r1, #4]
	ldr r0, _080A75D8 @ =0x0000081F
	strh r0, [r1, #2]
	ldr r1, _080A75DC @ =gWinRegs
	ldr r0, _080A75E0 @ =0x00003F3E
	strh r0, [r1, #8]
	ldr r1, [r3]
	movs r0, #0xb
	strb r0, [r1]
	str r2, [r3, #0x24]
	ldr r0, _080A75E4 @ =0x0000029B
	bl m4aSongNumStart
	ldr r1, [r4]
	ldr r0, _080A75E8 @ =sub_80A7674
	str r0, [r1, #8]
	b _080A766E
	.align 2, 0
_080A75CC: .4byte gCurTask
_080A75D0: .4byte gBldRegs
_080A75D4: .4byte 0x00003F7F
_080A75D8: .4byte 0x0000081F
_080A75DC: .4byte gWinRegs
_080A75E0: .4byte 0x00003F3E
_080A75E4: .4byte 0x0000029B
_080A75E8: .4byte sub_80A7674
_080A75EC:
	ldrh r0, [r3, #0x14]
	adds r0, #1
	movs r4, #0
	strh r0, [r3, #0x14]
	ldr r1, _080A7614 @ =gUnknown_080D9F7D
	ldrb r2, [r3, #0xb]
	adds r1, r2, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrb r1, [r1]
	cmp r0, r1
	blo _080A761C
	adds r0, r2, #1
	strb r0, [r3, #0xb]
	strh r4, [r3, #0x14]
	ldr r1, _080A7618 @ =gBldRegs
	movs r0, #0xf
	strh r0, [r1, #4]
	b _080A7620
	.align 2, 0
_080A7614: .4byte gUnknown_080D9F7D
_080A7618: .4byte gBldRegs
_080A761C:
	ldr r0, _080A7650 @ =gBldRegs
	strh r4, [r0, #4]
_080A7620:
	ldrb r0, [r3, #8]
	cmp r0, #0
	bne _080A766E
	movs r0, #1
	strb r0, [r3, #8]
	ldr r2, _080A7654 @ =gPseudoRandom
	ldr r1, [r2]
	ldr r0, _080A7658 @ =0x00196225
	muls r0, r1, r0
	ldr r1, _080A765C @ =0x3C6EF35F
	adds r0, r0, r1
	str r0, [r2]
	movs r1, #2
	ands r0, r1
	cmp r0, #0
	beq _080A7660
	ldr r0, [r3]
	adds r1, r3, #0
	adds r1, #8
	movs r2, #0
	movs r3, #1
	bl sub_80A735C
	b _080A766E
	.align 2, 0
_080A7650: .4byte gBldRegs
_080A7654: .4byte gPseudoRandom
_080A7658: .4byte 0x00196225
_080A765C: .4byte 0x3C6EF35F
_080A7660:
	ldr r0, [r3]
	adds r1, r3, #0
	adds r1, #8
	movs r2, #0
	movs r3, #0
	bl sub_80A735C
_080A766E:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_80A7674
sub_80A7674: @ 0x080A7674
	push {r4, r5, r6, lr}
	ldr r6, _080A7698 @ =gCurTask
	ldr r0, [r6]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	adds r0, r4, #0
	bl sub_80A8524
	cmp r0, #1
	bne _080A76A0
	movs r0, #0
	strh r0, [r4, #0x14]
	ldr r1, [r6]
	ldr r0, _080A769C @ =sub_80A7738
	str r0, [r1, #8]
	b _080A772E
	.align 2, 0
_080A7698: .4byte gCurTask
_080A769C: .4byte sub_80A7738
_080A76A0:
	ldr r0, [r4, #0x24]
	movs r1, #0xb4
	lsls r1, r1, #7
	subs r1, r1, r0
	ldr r0, _080A76E8 @ =gBgScrollRegs
	movs r2, #6
	ldrsh r0, [r0, r2]
	subs r0, #0x50
	lsls r0, r0, #8
	subs r1, r1, r0
	str r1, [r4, #0x18]
	ldrb r0, [r4, #8]
	cmp r0, #0
	bne _080A770A
	movs r0, #1
	strb r0, [r4, #8]
	ldr r2, _080A76EC @ =gPseudoRandom
	ldr r1, [r2]
	ldr r0, _080A76F0 @ =0x00196225
	muls r0, r1, r0
	ldr r1, _080A76F4 @ =0x3C6EF35F
	adds r0, r0, r1
	str r0, [r2]
	movs r1, #2
	ands r0, r1
	cmp r0, #0
	beq _080A76FC
	ldr r0, [r4]
	ldr r2, _080A76F8 @ =0x03000008
	adds r1, r5, r2
	movs r2, #0
	movs r3, #1
	bl sub_80A735C
	b _080A770A
	.align 2, 0
_080A76E8: .4byte gBgScrollRegs
_080A76EC: .4byte gPseudoRandom
_080A76F0: .4byte 0x00196225
_080A76F4: .4byte 0x3C6EF35F
_080A76F8: .4byte 0x03000008
_080A76FC:
	ldr r0, [r4]
	ldr r2, _080A7734 @ =0x03000008
	adds r1, r5, r2
	movs r2, #0
	movs r3, #0
	bl sub_80A735C
_080A770A:
	ldr r2, [r4, #0xc]
	ldr r0, [r4, #0x24]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r4, #0x18]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2]
	ldr r2, [r4, #0x10]
	ldr r0, [r4, #0x20]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r4, #0x1c]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2]
_080A772E:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A7734: .4byte 0x03000008

	thumb_func_start sub_80A7738
sub_80A7738: @ 0x080A7738
	push {r4, r5, lr}
	ldr r2, _080A77A8 @ =gCurTask
	ldr r0, [r2]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldrh r0, [r4, #0x14]
	adds r5, r2, #0
	cmp r0, #0x78
	bhi _080A7794
	adds r0, #1
	strh r0, [r4, #0x14]
	ldr r2, [r4, #0x24]
	movs r1, #0xb4
	lsls r1, r1, #7
	subs r1, r1, r2
	ldr r0, _080A77AC @ =gBgScrollRegs
	movs r3, #6
	ldrsh r0, [r0, r3]
	subs r0, #0x50
	lsls r0, r0, #8
	subs r1, r1, r0
	str r1, [r4, #0x18]
	ldr r3, [r4, #0xc]
	asrs r2, r2, #8
	lsls r0, r2, #8
	adds r0, r0, r2
	asrs r1, r1, #8
	adds r0, r0, r1
	strh r0, [r3]
	ldr r2, [r4, #0x10]
	ldr r0, [r4, #0x20]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r4, #0x1c]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2]
	ldrh r0, [r4, #0x14]
	cmp r0, #0x78
	bne _080A7794
	ldr r1, [r4]
	movs r0, #0xc
	strb r0, [r1]
_080A7794:
	ldr r0, [r4]
	ldrb r0, [r0]
	cmp r0, #0xe
	bne _080A77A2
	ldr r1, [r5]
	ldr r0, _080A77B0 @ =sub_80A77B4
	str r0, [r1, #8]
_080A77A2:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A77A8: .4byte gCurTask
_080A77AC: .4byte gBgScrollRegs
_080A77B0: .4byte sub_80A77B4

	thumb_func_start sub_80A77B4
sub_80A77B4: @ 0x080A77B4
	push {r4, r5, lr}
	ldr r5, _080A7844 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldrb r0, [r4, #0xb]
	cmp r0, #4
	bls _080A7800
	ldr r2, _080A7848 @ =gDispCnt
	ldrh r1, [r2]
	ldr r0, _080A784C @ =0x0000DFFF
	ands r0, r1
	strh r0, [r2]
	movs r1, #0xbc
	lsls r1, r1, #7
	str r1, [r4, #0x20]
	movs r2, #0
	str r2, [r4, #0x24]
	movs r0, #0xe6
	lsls r0, r0, #7
	subs r0, r0, r1
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #2
	adds r0, r0, r1
	str r0, [r4, #0x1c]
	str r2, [r4, #0x18]
	ldr r1, _080A7850 @ =gBldRegs
	ldr r0, _080A7854 @ =0x00003F7F
	strh r0, [r1]
	strh r2, [r1, #4]
	ldr r0, _080A7858 @ =0x0000081F
	strh r0, [r1, #2]
	ldr r1, _080A785C @ =gWinRegs
	ldr r0, _080A7860 @ =0x00003F3E
	strh r0, [r1, #8]
_080A7800:
	ldr r2, [r4, #0x24]
	movs r1, #0xb4
	lsls r1, r1, #7
	subs r1, r1, r2
	ldr r0, _080A7864 @ =gBgScrollRegs
	movs r3, #6
	ldrsh r0, [r0, r3]
	subs r0, #0x50
	lsls r0, r0, #8
	subs r1, r1, r0
	str r1, [r4, #0x18]
	ldr r3, [r4, #0xc]
	asrs r2, r2, #8
	lsls r0, r2, #8
	adds r0, r0, r2
	asrs r1, r1, #8
	adds r0, r0, r1
	strh r0, [r3]
	ldr r2, [r4, #0x10]
	ldr r0, [r4, #0x20]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r4, #0x1c]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2]
	ldr r1, [r5]
	ldr r0, _080A7868 @ =sub_80A786C
	str r0, [r1, #8]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A7844: .4byte gCurTask
_080A7848: .4byte gDispCnt
_080A784C: .4byte 0x0000DFFF
_080A7850: .4byte gBldRegs
_080A7854: .4byte 0x00003F7F
_080A7858: .4byte 0x0000081F
_080A785C: .4byte gWinRegs
_080A7860: .4byte 0x00003F3E
_080A7864: .4byte gBgScrollRegs
_080A7868: .4byte sub_80A786C

	thumb_func_start sub_80A786C
sub_80A786C: @ 0x080A786C
	push {r4, r5, lr}
	ldr r5, _080A78CC @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r2, [r4, #0x24]
	movs r1, #0xb4
	lsls r1, r1, #7
	subs r1, r1, r2
	ldr r0, _080A78D0 @ =gBgScrollRegs
	movs r3, #6
	ldrsh r0, [r0, r3]
	subs r0, #0x50
	lsls r0, r0, #8
	subs r1, r1, r0
	str r1, [r4, #0x18]
	ldr r3, [r4, #0xc]
	asrs r2, r2, #8
	lsls r0, r2, #8
	adds r0, r0, r2
	asrs r1, r1, #8
	adds r0, r0, r1
	strh r0, [r3]
	ldr r2, [r4, #0x10]
	ldr r0, [r4, #0x20]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r4, #0x1c]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2]
	ldr r0, [r4]
	ldrb r0, [r0]
	cmp r0, #0xf
	bne _080A78C4
	movs r0, #0
	strb r0, [r4, #0xb]
	strh r0, [r4, #0x14]
	ldr r1, [r5]
	ldr r0, _080A78D4 @ =sub_80A78D8
	str r0, [r1, #8]
_080A78C4:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A78CC: .4byte gCurTask
_080A78D0: .4byte gBgScrollRegs
_080A78D4: .4byte sub_80A78D8

	thumb_func_start sub_80A78D8
sub_80A78D8: @ 0x080A78D8
	push {r4, r5, lr}
	ldr r0, _080A7934 @ =gCurTask
	ldr r0, [r0]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	adds r0, r4, #0
	bl sub_80A85B0
	ldrh r0, [r4, #0x14]
	adds r0, #1
	strh r0, [r4, #0x14]
	ldr r2, _080A7938 @ =gUnknown_080D9F83
	ldrb r1, [r4, #0xb]
	adds r1, r1, r2
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrb r1, [r1]
	cmp r0, r1
	blo _080A7984
	ldrb r0, [r4, #8]
	cmp r0, #0
	bne _080A7984
	movs r0, #1
	strb r0, [r4, #8]
	ldr r2, _080A793C @ =gPseudoRandom
	ldr r1, [r2]
	ldr r0, _080A7940 @ =0x00196225
	muls r0, r1, r0
	ldr r1, _080A7944 @ =0x3C6EF35F
	adds r0, r0, r1
	str r0, [r2]
	movs r1, #2
	ands r0, r1
	cmp r0, #0
	beq _080A794C
	ldr r0, [r4]
	ldr r2, _080A7948 @ =0x03000008
	adds r1, r5, r2
	movs r2, #0
	movs r3, #1
	bl sub_80A735C
	b _080A795A
	.align 2, 0
_080A7934: .4byte gCurTask
_080A7938: .4byte gUnknown_080D9F83
_080A793C: .4byte gPseudoRandom
_080A7940: .4byte 0x00196225
_080A7944: .4byte 0x3C6EF35F
_080A7948: .4byte 0x03000008
_080A794C:
	ldr r0, [r4]
	ldr r3, _080A797C @ =0x03000008
	adds r1, r5, r3
	movs r2, #0
	movs r3, #0
	bl sub_80A735C
_080A795A:
	movs r0, #0
	strh r0, [r4, #0x14]
	ldrb r0, [r4, #0xb]
	adds r0, #1
	strb r0, [r4, #0xb]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #8
	bne _080A7984
	ldr r1, [r4]
	movs r0, #0x10
	strb r0, [r1]
	ldr r0, _080A7980 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
	b _080A79BA
	.align 2, 0
_080A797C: .4byte 0x03000008
_080A7980: .4byte gCurTask
_080A7984:
	ldr r2, [r4, #0x24]
	movs r1, #0xb4
	lsls r1, r1, #7
	subs r1, r1, r2
	ldr r0, _080A79C0 @ =gBgScrollRegs
	movs r3, #6
	ldrsh r0, [r0, r3]
	subs r0, #0x50
	lsls r0, r0, #8
	subs r1, r1, r0
	str r1, [r4, #0x18]
	ldr r3, [r4, #0xc]
	asrs r2, r2, #8
	lsls r0, r2, #8
	adds r0, r0, r2
	asrs r1, r1, #8
	adds r0, r0, r1
	strh r0, [r3]
	ldr r2, [r4, #0x10]
	ldr r0, [r4, #0x20]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r4, #0x1c]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2]
_080A79BA:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A79C0: .4byte gBgScrollRegs

	thumb_func_start sub_80A79C4
sub_80A79C4: @ 0x080A79C4
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r4, r0, #0
	adds r7, r1, #0
	ldr r0, _080A7AB4 @ =sub_80A7ACC
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r1, _080A7AB8 @ =sub_80A85F0
	str r1, [sp]
	movs r1, #0x8c
	movs r3, #0
	bl TaskCreate
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r6, r0, r1
	str r4, [r6]
	movs r1, #0xe6
	lsls r1, r1, #7
	str r1, [r6, #0xc]
	movs r1, #0xa0
	lsls r1, r1, #5
	str r1, [r6, #0x10]
	movs r3, #0
	movs r2, #0
	strh r2, [r6, #6]
	strb r3, [r6, #4]
	ldr r1, _080A7ABC @ =0x03000014
	adds r0, r0, r1
	str r7, [r0]
	ldr r4, _080A7AC0 @ =gUnknown_080D9F8C
	ldr r1, [r4, #4]
	lsls r1, r1, #5
	adds r7, r7, r1
	ldrh r1, [r4]
	strh r1, [r0, #0xc]
	ldrb r1, [r4, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r6, #0xc]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r6, #0x10]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r1, #0xa0
	lsls r1, r1, #2
	strh r1, [r0, #0x14]
	strh r2, [r0, #0xe]
	strh r2, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	strb r3, [r0, #0x1f]
	str r2, [r0, #8]
	bl UpdateSpriteAnimation
	movs r1, #0
	adds r3, r4, #0
	movs r5, #0
_080A7A3E:
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, #0x3c
	adds r0, r6, r0
	str r7, [r0]
	adds r4, r1, #1
	lsls r2, r4, #3
	adds r1, r3, #4
	adds r1, r2, r1
	ldr r1, [r1]
	lsls r1, r1, #5
	adds r7, r7, r1
	adds r2, r2, r3
	ldrh r1, [r2]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	strh r5, [r0, #0x10]
	strh r5, [r0, #0x12]
	movs r1, #0xa0
	lsls r1, r1, #2
	strh r1, [r0, #0x14]
	strh r5, [r0, #0xe]
	strh r5, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	movs r1, #2
	strb r1, [r0, #0x1f]
	str r5, [r0, #8]
	str r3, [sp, #4]
	bl UpdateSpriteAnimation
	lsls r4, r4, #0x18
	lsrs r1, r4, #0x18
	ldr r3, [sp, #4]
	cmp r1, #1
	bls _080A7A3E
	ldr r0, _080A7AC4 @ =0x0000029A
	bl m4aSongNumStart
	ldr r1, _080A7AC8 @ =gStageData
	ldrb r0, [r1, #6]
	cmp r0, #0
	beq _080A7AA2
	adds r1, #0xc5
	movs r0, #1
	strb r0, [r1]
_080A7AA2:
	bl sub_80260F0
	bl sub_8001E84
	adds r0, r7, #0
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080A7AB4: .4byte sub_80A7ACC
_080A7AB8: .4byte sub_80A85F0
_080A7ABC: .4byte 0x03000014
_080A7AC0: .4byte gUnknown_080D9F8C
_080A7AC4: .4byte 0x0000029A
_080A7AC8: .4byte gStageData

	thumb_func_start sub_80A7ACC
sub_80A7ACC: @ 0x080A7ACC
	push {r4, r5, r6, r7, lr}
	ldr r7, _080A7B5C @ =gCurTask
	ldr r0, [r7]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r5, r0
	ldr r0, _080A7B60 @ =gBgScrollRegs
	movs r2, #6
	ldrsh r1, [r0, r2]
	subs r1, #0x50
	lsls r1, r1, #8
	movs r0, #0xba
	lsls r0, r0, #7
	subs r0, r0, r1
	str r0, [r6, #0x10]
	ldr r0, _080A7B64 @ =0x03000014
	adds r4, r5, r0
	ldr r0, [r6, #0xc]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r6, #0x10]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	ldrh r1, [r6, #6]
	movs r0, #3
	ands r0, r1
	cmp r0, #0
	beq _080A7B12
	adds r0, r4, #0
	bl DisplaySprite
_080A7B12:
	ldr r1, _080A7B68 @ =0x0300003C
	adds r0, r5, r1
	bl UpdateSpriteAnimation
	adds r1, r0, #0
	cmp r1, #0
	bne _080A7B2E
	ldr r2, _080A7B6C @ =0x03000052
	adds r0, r5, r2
	strh r1, [r0]
	ldr r0, _080A7B70 @ =0x03000057
	adds r1, r5, r0
	movs r0, #0xff
	strb r0, [r1]
_080A7B2E:
	ldr r1, _080A7B74 @ =0x03000064
	adds r0, r5, r1
	bl UpdateSpriteAnimation
	adds r1, r0, #0
	cmp r1, #0
	bne _080A7B4A
	ldr r2, _080A7B78 @ =0x0300007A
	adds r0, r5, r2
	strh r1, [r0]
	ldr r0, _080A7B7C @ =0x0300007F
	adds r1, r5, r0
	movs r0, #0xff
	strb r0, [r1]
_080A7B4A:
	ldr r2, [r6]
	ldrb r0, [r2]
	cmp r0, #0x10
	bne _080A7B84
	ldr r1, [r7]
	ldr r0, _080A7B80 @ =sub_80A85F4
	str r0, [r1, #8]
	b _080A7BE6
	.align 2, 0
_080A7B5C: .4byte gCurTask
_080A7B60: .4byte gBgScrollRegs
_080A7B64: .4byte 0x03000014
_080A7B68: .4byte 0x0300003C
_080A7B6C: .4byte 0x03000052
_080A7B70: .4byte 0x03000057
_080A7B74: .4byte 0x03000064
_080A7B78: .4byte 0x0300007A
_080A7B7C: .4byte 0x0300007F
_080A7B80: .4byte sub_80A85F4
_080A7B84:
	ldrh r0, [r6, #6]
	adds r0, #1
	strh r0, [r6, #6]
	ldr r0, [r6, #4]
	ldr r1, _080A7BEC @ =0xFFFF00FF
	ands r0, r1
	movs r1, #0xb4
	lsls r1, r1, #0x10
	cmp r0, r1
	bne _080A7BA8
	movs r0, #1
	strb r0, [r6, #4]
	adds r0, r2, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl sub_80A735C
_080A7BA8:
	ldr r4, _080A7BF0 @ =gPseudoRandom
	ldr r0, [r4]
	ldr r5, _080A7BF4 @ =0x00196225
	muls r0, r5, r0
	ldr r1, _080A7BF8 @ =0x3C6EF35F
	adds r3, r0, r1
	str r3, [r4]
	ldrh r2, [r6, #6]
	lsrs r0, r3, #8
	movs r1, #0x1f
	ands r0, r1
	adds r0, #0xc4
	cmp r2, r0
	blo _080A7BE6
	adds r1, r3, #0
	muls r1, r5, r1
	ldr r2, _080A7BF8 @ =0x3C6EF35F
	adds r1, r1, r2
	str r1, [r4]
	lsrs r1, r1, #8
	movs r0, #1
	ands r1, r0
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, #0x3c
	adds r0, r6, r0
	movs r1, #0xb5
	strh r1, [r6, #6]
	bl sub_80A866C
_080A7BE6:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A7BEC: .4byte 0xFFFF00FF
_080A7BF0: .4byte gPseudoRandom
_080A7BF4: .4byte 0x00196225
_080A7BF8: .4byte 0x3C6EF35F

	thumb_func_start sub_80A7BFC
sub_80A7BFC: @ 0x080A7BFC
	bx lr
	.align 2, 0

	thumb_func_start sub_80A7C00
sub_80A7C00: @ 0x080A7C00
	push {r4, r5, lr}
	ldr r5, _080A7C34 @ =gCurTask
	ldr r0, [r5]
	ldrh r0, [r0, #6]
	movs r4, #0xc0
	lsls r4, r4, #0x12
	adds r4, r0, r4
	ldr r1, _080A7C38 @ =0x030000D8
	adds r0, r0, r1
	bl UpdateBgAnimationTiles
	adds r0, r4, #0
	bl sub_80A5824
	adds r0, r4, #0
	movs r1, #2
	movs r2, #1
	bl sub_80A490C
	ldr r1, [r5]
	ldr r0, _080A7C3C @ =sub_80A7C40
	str r0, [r1, #8]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A7C34: .4byte gCurTask
_080A7C38: .4byte 0x030000D8
_080A7C3C: .4byte sub_80A7C40

	thumb_func_start sub_80A7C40
sub_80A7C40: @ 0x080A7C40
	push {r4, r5, lr}
	ldr r5, _080A7C74 @ =gCurTask
	ldr r0, [r5]
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r4, r0, r1
	adds r1, #0xd8
	adds r0, r0, r1
	bl UpdateBgAnimationTiles
	adds r0, r4, #0
	bl sub_80A5824
	cmp r0, #0
	bne _080A7C6E
	ldr r0, [r4]
	ldrb r0, [r0]
	cmp r0, #0xa
	bne _080A7C6E
	ldr r1, [r5]
	ldr r0, _080A7C78 @ =sub_80A7C7C
	str r0, [r1, #8]
_080A7C6E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A7C74: .4byte gCurTask
_080A7C78: .4byte sub_80A7C7C

	thumb_func_start sub_80A7C7C
sub_80A7C7C: @ 0x080A7C7C
	push {r4, r5, lr}
	ldr r5, _080A7CB0 @ =gCurTask
	ldr r0, [r5]
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r4, r0, r1
	adds r1, #0xd8
	adds r0, r0, r1
	bl UpdateBgAnimationTiles
	adds r0, r4, #0
	bl sub_80A5824
	ldr r0, [r4]
	ldrb r0, [r0]
	cmp r0, #0xb
	bne _080A7CAA
	movs r0, #0
	strh r0, [r4, #0x16]
	ldr r1, [r5]
	ldr r0, _080A7CB4 @ =sub_80A7CB8
	str r0, [r1, #8]
_080A7CAA:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A7CB0: .4byte gCurTask
_080A7CB4: .4byte sub_80A7CB8

	thumb_func_start sub_80A7CB8
sub_80A7CB8: @ 0x080A7CB8
	push {r4, r5, lr}
	ldr r5, _080A7CF8 @ =gCurTask
	ldr r0, [r5]
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r4, r0, r1
	adds r1, #0xd8
	adds r0, r0, r1
	bl UpdateBgAnimationTiles
	adds r0, r4, #0
	bl sub_80A5824
	adds r0, r4, #0
	bl sub_80A563C
	cmp r0, #1
	bne _080A7CF0
	ldr r0, [r4]
	ldrb r0, [r0]
	cmp r0, #0xc
	bne _080A7CF0
	movs r0, #0
	strb r0, [r4, #0x18]
	ldr r1, [r5]
	ldr r0, _080A7CFC @ =sub_80A4EDC
	str r0, [r1, #8]
_080A7CF0:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A7CF8: .4byte gCurTask
_080A7CFC: .4byte sub_80A4EDC

	thumb_func_start sub_80A7D00
sub_80A7D00: @ 0x080A7D00
	push {r4, r5, lr}
	ldr r5, _080A7D38 @ =gCurTask
	ldr r0, [r5]
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r4, r0, r1
	adds r1, #0xd8
	adds r0, r0, r1
	bl UpdateBgAnimationTiles
	adds r0, r4, #0
	bl sub_80A5698
	adds r0, r4, #0
	bl sub_80A55DC
	cmp r0, #1
	bne _080A7D32
	ldr r1, [r4]
	movs r0, #0xf
	strb r0, [r1]
	ldr r1, [r5]
	ldr r0, _080A7D3C @ =sub_80A7D40
	str r0, [r1, #8]
_080A7D32:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A7D38: .4byte gCurTask
_080A7D3C: .4byte sub_80A7D40

	thumb_func_start sub_80A7D40
sub_80A7D40: @ 0x080A7D40
	push {r4, r5, lr}
	ldr r5, _080A7D70 @ =gCurTask
	ldr r0, [r5]
	ldrh r0, [r0, #6]
	movs r4, #0xc0
	lsls r4, r4, #0x12
	adds r4, r0, r4
	ldr r1, _080A7D74 @ =0x030000D8
	adds r0, r0, r1
	bl UpdateBgAnimationTiles
	adds r0, r4, #0
	bl sub_80A5698
	ldr r0, [r4]
	ldrb r0, [r0]
	cmp r0, #0x10
	bne _080A7D6A
	ldr r1, [r5]
	ldr r0, _080A7D78 @ =sub_80A7D7C
	str r0, [r1, #8]
_080A7D6A:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A7D70: .4byte gCurTask
_080A7D74: .4byte 0x030000D8
_080A7D78: .4byte sub_80A7D7C

	thumb_func_start sub_80A7D7C
sub_80A7D7C: @ 0x080A7D7C
	push {r4, r5, lr}
	ldr r5, _080A7DAC @ =gCurTask
	ldr r0, [r5]
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r4, r0, r1
	adds r1, #0xd8
	adds r0, r0, r1
	bl UpdateBgAnimationTiles
	adds r0, r4, #0
	bl sub_80A5698
	ldr r0, [r4]
	ldrb r0, [r0]
	cmp r0, #0x12
	bne _080A7DB0
	adds r0, r4, #0
	movs r1, #4
	movs r2, #1
	bl sub_80A490C
	b _080A7DBE
	.align 2, 0
_080A7DAC: .4byte gCurTask
_080A7DB0:
	cmp r0, #0x14
	bne _080A7DC4
	adds r0, r4, #0
	movs r1, #0
	movs r2, #1
	bl sub_80A4A88
_080A7DBE:
	ldr r1, [r5]
	ldr r0, _080A7DCC @ =sub_80A7DD0
	str r0, [r1, #8]
_080A7DC4:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A7DCC: .4byte sub_80A7DD0

	thumb_func_start sub_80A7DD0
sub_80A7DD0: @ 0x080A7DD0
	push {r4, r5, r6, lr}
	ldr r6, _080A7E00 @ =gCurTask
	ldr r0, [r6]
	ldrh r4, [r0, #6]
	movs r5, #0xc0
	lsls r5, r5, #0x12
	adds r5, r4, r5
	adds r0, r5, #0
	bl sub_80A5824
	ldr r0, _080A7E04 @ =0x030000D8
	adds r4, r4, r0
	adds r0, r4, #0
	bl UpdateBgAnimationTiles
	ldr r0, [r5]
	ldrb r0, [r0]
	cmp r0, #0x15
	bne _080A7E0C
	ldr r1, [r6]
	ldr r0, _080A7E08 @ =sub_80A52DC
	str r0, [r1, #8]
	b _080A7E1A
	.align 2, 0
_080A7E00: .4byte gCurTask
_080A7E04: .4byte 0x030000D8
_080A7E08: .4byte sub_80A52DC
_080A7E0C:
	ldr r0, _080A7E20 @ =gBldRegs
	ldrh r0, [r0, #4]
	cmp r0, #0x10
	bne _080A7E1A
	ldr r0, [r6]
	bl TaskDestroy
_080A7E1A:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A7E20: .4byte gBldRegs

	thumb_func_start sub_80A7E24
sub_80A7E24: @ 0x080A7E24
	push {r4, r5, lr}
	ldr r4, _080A7E68 @ =gCurTask
	ldr r0, [r4]
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	ldr r3, _080A7E6C @ =gDispCnt
	ldrh r1, [r3]
	movs r5, #0x80
	lsls r5, r5, #2
	adds r2, r5, #0
	orrs r1, r2
	strh r1, [r3]
	movs r1, #0x80
	lsls r1, r1, #3
	str r1, [r0, #0x20]
	ldr r2, _080A7E70 @ =gBgScrollRegs
	movs r1, #4
	strh r1, [r2, #4]
	ldr r1, [r0, #0x24]
	asrs r1, r1, #8
	adds r1, #0x50
	strh r1, [r2, #6]
	movs r1, #0
	movs r2, #0
	bl sub_80A4A88
	ldr r1, [r4]
	ldr r0, _080A7E74 @ =sub_80A5050
	str r0, [r1, #8]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A7E68: .4byte gCurTask
_080A7E6C: .4byte gDispCnt
_080A7E70: .4byte gBgScrollRegs
_080A7E74: .4byte sub_80A5050

	thumb_func_start sub_80A7E78
sub_80A7E78: @ 0x080A7E78
	push {lr}
	ldrh r0, [r0, #6]
	ldr r1, _080A7E8C @ =0x0300014C
	adds r0, r0, r1
	ldr r0, [r0]
	bl EwramFree
	pop {r0}
	bx r0
	.align 2, 0
_080A7E8C: .4byte 0x0300014C

	thumb_func_start sub_80A7E90
sub_80A7E90: @ 0x080A7E90
	push {r4, r5, lr}
	ldr r5, _080A7EB4 @ =gCurTask
	ldr r0, [r5]
	ldrh r2, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r2, r0
	ldrb r0, [r4, #6]
	cmp r0, #0
	bne _080A7EB8
	adds r0, r4, #0
	bl sub_80A5B08
	ldrb r0, [r4, #6]
	adds r0, #1
	strb r0, [r4, #6]
	b _080A7ED2
	.align 2, 0
_080A7EB4: .4byte gCurTask
_080A7EB8:
	ldr r1, _080A7ED8 @ =0x03000004
	adds r0, r2, r1
	ldr r1, [r4, #0xc]
	ldr r3, _080A7EDC @ =0x03000014
	adds r2, r2, r3
	bl sub_80A828C
	str r0, [r4, #0xc]
	movs r0, #0
	strb r0, [r4, #6]
	ldr r1, [r5]
	ldr r0, _080A7EE0 @ =sub_80A6090
	str r0, [r1, #8]
_080A7ED2:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A7ED8: .4byte 0x03000004
_080A7EDC: .4byte 0x03000014
_080A7EE0: .4byte sub_80A6090

	thumb_func_start sub_80A7EE4
sub_80A7EE4: @ 0x080A7EE4
	push {r4, r5, lr}
	ldr r5, _080A7F10 @ =gCurTask
	ldr r0, [r5]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	adds r0, r4, #0
	bl sub_80A6BDC
	adds r0, r4, #0
	movs r1, #5
	movs r2, #0
	bl sub_80A5CB0
	ldr r1, [r5]
	ldr r0, _080A7F14 @ =sub_80A7F18
	str r0, [r1, #8]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A7F10: .4byte gCurTask
_080A7F14: .4byte sub_80A7F18

	thumb_func_start sub_80A7F18
sub_80A7F18: @ 0x080A7F18
	push {r4, r5, r6, lr}
	ldr r6, _080A7F4C @ =gCurTask
	ldr r0, [r6]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	adds r0, r4, #0
	bl sub_80A6A5C
	cmp r0, #0
	bne _080A7F46
	movs r0, #0xa
	strb r0, [r4, #4]
	ldr r1, _080A7F50 @ =0x03000004
	adds r0, r5, r1
	ldr r1, [r4, #0xc]
	bl sub_80A79C4
	str r0, [r4, #0xc]
	ldr r1, [r6]
	ldr r0, _080A7F54 @ =sub_80A7FAC
	str r0, [r1, #8]
_080A7F46:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A7F4C: .4byte gCurTask
_080A7F50: .4byte 0x03000004
_080A7F54: .4byte sub_80A7FAC

	thumb_func_start sub_80A7F58
sub_80A7F58: @ 0x080A7F58
	push {r4, lr}
	ldr r0, _080A7FA4 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_80A6A5C
	ldrh r0, [r4, #8]
	cmp r0, #0xb3
	bhi _080A7F82
	adds r0, #1
	strh r0, [r4, #8]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0xb4
	bne _080A7F82
	movs r0, #8
	strb r0, [r4, #4]
_080A7F82:
	ldrb r0, [r4, #4]
	cmp r0, #9
	bne _080A7F9E
	movs r0, #0
	strh r0, [r4, #8]
	adds r0, r4, #0
	movs r1, #4
	movs r2, #1
	bl sub_80A5CB0
	ldr r0, _080A7FA4 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A7FA8 @ =sub_80A7EE4
	str r0, [r1, #8]
_080A7F9E:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A7FA4: .4byte gCurTask
_080A7FA8: .4byte sub_80A7EE4

	thumb_func_start sub_80A7FAC
sub_80A7FAC: @ 0x080A7FAC
	push {r4, r5, lr}
	ldr r5, _080A7FD4 @ =gCurTask
	ldr r0, [r5]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	adds r0, r4, #0
	bl sub_80A6A5C
	ldrb r0, [r4, #4]
	cmp r0, #0xb
	bne _080A7FCC
	ldr r1, [r5]
	ldr r0, _080A7FD8 @ =sub_80A7FDC
	str r0, [r1, #8]
_080A7FCC:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A7FD4: .4byte gCurTask
_080A7FD8: .4byte sub_80A7FDC

	thumb_func_start sub_80A7FDC
sub_80A7FDC: @ 0x080A7FDC
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	ldr r6, _080A8048 @ =gCurTask
	ldr r0, [r6]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	adds r0, r4, #0
	bl sub_80A6A5C
	ldrb r0, [r4, #4]
	cmp r0, #0xb
	bne _080A8014
	ldr r1, [r4, #0x30]
	adds r0, r1, #0
	adds r0, #0x20
	str r0, [r4, #0x30]
	ldr r0, _080A804C @ =0x00007820
	adds r1, r1, r0
	ldr r0, _080A8050 @ =gBgScrollRegs
	movs r2, #6
	ldrsh r0, [r0, r2]
	subs r0, #0x50
	lsls r0, r0, #8
	subs r1, r1, r0
	str r1, [r4, #0x18]
	str r1, [r4, #0x20]
_080A8014:
	ldrb r0, [r4, #4]
	cmp r0, #0xd
	bne _080A8040
	movs r1, #0
	movs r0, #0
	strh r0, [r4, #8]
	strb r1, [r4, #6]
	ldr r0, [r4, #0xc]
	movs r1, #0x14
	rsbs r1, r1, #0
	movs r2, #0x5a
	rsbs r2, r2, #0
	ldr r7, _080A8054 @ =0x03000004
	adds r3, r5, r7
	str r3, [sp]
	movs r3, #0
	bl sub_80A9BD8
	str r0, [r4, #0xc]
	ldr r1, [r6]
	ldr r0, _080A8058 @ =sub_80A664C
	str r0, [r1, #8]
_080A8040:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A8048: .4byte gCurTask
_080A804C: .4byte 0x00007820
_080A8050: .4byte gBgScrollRegs
_080A8054: .4byte 0x03000004
_080A8058: .4byte sub_80A664C

	thumb_func_start sub_80A805C
sub_80A805C: @ 0x080A805C
	push {r4, r5, lr}
	ldr r5, _080A8088 @ =gCurTask
	ldr r0, [r5]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	adds r0, r4, #0
	bl sub_80A6A5C
	ldrb r0, [r4, #4]
	cmp r0, #0x16
	bne _080A8080
	bl sub_80A8C80
	ldr r0, [r5]
	bl TaskDestroy
_080A8080:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A8088: .4byte gCurTask

	thumb_func_start sub_80A808C
sub_80A808C: @ 0x080A808C
	push {r4, lr}
	ldr r0, _080A80E0 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_80A6BDC
	ldrb r0, [r4, #4]
	cmp r0, #0xe
	bne _080A80CC
	ldr r0, [r4, #0x30]
	subs r0, #0x40
	str r0, [r4, #0x30]
	cmp r0, #0
	bgt _080A80B4
	movs r0, #0
	str r0, [r4, #0x30]
_080A80B4:
	ldr r1, [r4, #0x30]
	movs r0, #0xf0
	lsls r0, r0, #7
	adds r1, r1, r0
	ldr r0, _080A80E4 @ =gBgScrollRegs
	movs r2, #6
	ldrsh r0, [r0, r2]
	subs r0, #0x50
	lsls r0, r0, #8
	subs r1, r1, r0
	str r1, [r4, #0x18]
	str r1, [r4, #0x20]
_080A80CC:
	ldrb r0, [r4, #4]
	cmp r0, #0x10
	bne _080A80DA
	ldr r0, _080A80E0 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A80E8 @ =sub_80A6700
	str r0, [r1, #8]
_080A80DA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A80E0: .4byte gCurTask
_080A80E4: .4byte gBgScrollRegs
_080A80E8: .4byte sub_80A6700

	thumb_func_start sub_80A80EC
sub_80A80EC: @ 0x080A80EC
	push {r4, r5, lr}
	ldr r5, _080A8134 @ =gCurTask
	ldr r0, [r5]
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r4, r0, r1
	ldr r1, _080A8138 @ =0x0300014C
	adds r0, r0, r1
	ldr r0, [r0]
	bl sub_80239A8
	adds r0, r4, #0
	bl sub_80A825C
	adds r0, r4, #0
	bl sub_80A81E8
	cmp r0, #1
	bne _080A8140
	movs r1, #0
	movs r0, #0
	strh r0, [r4, #8]
	strb r1, [r4, #6]
	movs r0, #0x15
	strb r0, [r4, #4]
	adds r0, r4, #0
	movs r1, #0xa
	movs r2, #1
	bl sub_80A5EF0
	ldr r1, [r5]
	ldr r0, _080A813C @ =sub_80A690C
	str r0, [r1, #8]
	b _080A8146
	.align 2, 0
_080A8134: .4byte gCurTask
_080A8138: .4byte 0x0300014C
_080A813C: .4byte sub_80A690C
_080A8140:
	adds r0, r4, #0
	bl sub_80A6DD0
_080A8146:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_80A814C
sub_80A814C: @ 0x080A814C
	push {r4, r5, lr}
	ldr r5, _080A816C @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_80A8234
	ldrh r0, [r4, #8]
	cmp r0, #0x77
	bhi _080A8170
	adds r0, #1
	strh r0, [r4, #8]
	b _080A818E
	.align 2, 0
_080A816C: .4byte gCurTask
_080A8170:
	adds r0, r4, #0
	bl sub_80A820C
	cmp r0, #1
	bne _080A818E
	movs r0, #0
	strh r0, [r4, #8]
	adds r0, r4, #0
	movs r1, #0xe
	movs r2, #0
	bl sub_80A5E8C
	ldr r1, [r5]
	ldr r0, _080A8194 @ =sub_80A69E4
	str r0, [r1, #8]
_080A818E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A8194: .4byte sub_80A69E4

	thumb_func_start sub_80A8198
sub_80A8198: @ 0x080A8198
	push {r4, r5, lr}
	ldr r5, _080A81C0 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_80A8234
	ldr r1, _080A81C4 @ =gBldRegs
	ldrh r0, [r1, #4]
	cmp r0, #0xf
	bhi _080A81C8
	ldr r0, [r4, #0x10]
	adds r0, #0x20
	str r0, [r4, #0x10]
	asrs r0, r0, #8
	strh r0, [r1, #4]
	b _080A81E2
	.align 2, 0
_080A81C0: .4byte gCurTask
_080A81C4: .4byte gBldRegs
_080A81C8:
	ldrh r0, [r4, #8]
	adds r0, #1
	strh r0, [r4, #8]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0xb4
	bls _080A81E2
	movs r0, #1
	bl sub_80A872C
	ldr r0, [r5]
	bl TaskDestroy
_080A81E2:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_80A81E8
sub_80A81E8: @ 0x080A81E8
	push {lr}
	adds r2, r0, #0
	ldr r1, [r2, #0x14]
	ldr r0, _080A81F8 @ =0xFFFFD800
	cmp r1, r0
	bgt _080A81FC
	movs r0, #1
	b _080A8204
	.align 2, 0
_080A81F8: .4byte 0xFFFFD800
_080A81FC:
	ldr r3, _080A8208 @ =0xFFFFFB00
	adds r0, r1, r3
	str r0, [r2, #0x14]
	movs r0, #0
_080A8204:
	pop {r1}
	bx r1
	.align 2, 0
_080A8208: .4byte 0xFFFFFB00

	thumb_func_start sub_80A820C
sub_80A820C: @ 0x080A820C
	push {lr}
	adds r1, r0, #0
	ldr r2, [r1, #0x18]
	ldr r0, _080A8220 @ =0x000078FF
	cmp r2, r0
	ble _080A8224
	adds r0, #1
	str r0, [r1, #0x18]
	movs r0, #1
	b _080A822E
	.align 2, 0
_080A8220: .4byte 0x000078FF
_080A8224:
	movs r3, #0xc0
	lsls r3, r3, #2
	adds r0, r2, r3
	str r0, [r1, #0x18]
	movs r0, #0
_080A822E:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80A8234
sub_80A8234: @ 0x080A8234
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r4, #0xd4
	ldr r1, [r0, #0x14]
	asrs r1, r1, #8
	strh r1, [r4, #0x10]
	ldr r0, [r0, #0x18]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r5, r0, #0
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r5, #0
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_80A825C
sub_80A825C: @ 0x080A825C
	push {lr}
	adds r1, r0, #0
	movs r3, #0
	ldr r2, [r1, #0x24]
	ldr r0, _080A8280 @ =0xFFFF2E00
	cmp r2, r0
	ble _080A8272
	ldr r3, _080A8284 @ =0xFFFFFB00
	adds r0, r2, r3
	str r0, [r1, #0x24]
	ldr r3, _080A8288 @ =0x0000FFFB
_080A8272:
	movs r2, #0xa6
	lsls r2, r2, #1
	adds r0, r1, r2
	ldr r0, [r0]
	strb r3, [r0, #0xd]
	pop {r0}
	bx r0
	.align 2, 0
_080A8280: .4byte 0xFFFF2E00
_080A8284: .4byte 0xFFFFFB00
_080A8288: .4byte 0x0000FFFB

	thumb_func_start sub_80A828C
sub_80A828C: @ 0x080A828C
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r5, r0, #0
	adds r7, r1, #0
	adds r6, r2, #0
	ldrb r0, [r5]
	cmp r0, #0x10
	bne _080A82BC
	ldr r0, _080A82B4 @ =sub_80A70B8
	movs r1, #0x96
	lsls r1, r1, #1
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r3, _080A82B8 @ =sub_80A8324
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	b _080A82D0
	.align 2, 0
_080A82B4: .4byte sub_80A70B8
_080A82B8: .4byte sub_80A8324
_080A82BC:
	ldr r0, _080A82F8 @ =sub_80A8328
	movs r1, #0x96
	lsls r1, r1, #1
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r3, _080A82FC @ =sub_80A8324
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
_080A82D0:
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	str r5, [r4]
	str r7, [r4, #8]
	movs r0, #0
	strb r0, [r4, #4]
	strh r0, [r4, #6]
	str r0, [r4, #0x14]
	str r0, [r4, #0x18]
	str r6, [r4, #0x1c]
	adds r0, r6, #4
	str r0, [r4, #0x20]
	ldrb r0, [r5]
	cmp r0, #0x10
	bne _080A8300
	movs r0, #0xf0
	lsls r0, r0, #8
	b _080A8304
	.align 2, 0
_080A82F8: .4byte sub_80A8328
_080A82FC: .4byte sub_80A8324
_080A8300:
	movs r0, #0xa0
	lsls r0, r0, #8
_080A8304:
	str r0, [r4, #0xc]
	movs r0, #0x96
	lsls r0, r0, #8
	str r0, [r4, #0x10]
	adds r0, r4, #0
	bl sub_80A6F34
	adds r0, r4, #0
	bl sub_80A6EBC
	ldr r0, [r4, #8]
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80A8324
sub_80A8324: @ 0x080A8324
	bx lr
	.align 2, 0

	thumb_func_start sub_80A8328
sub_80A8328: @ 0x080A8328
	push {r4, r5, lr}
	sub sp, #4
	ldr r5, _080A8358 @ =gCurTask
	ldr r0, [r5]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	mov r0, sp
	movs r1, #0
	movs r2, #4
	bl memset
	adds r0, r4, #0
	mov r1, sp
	bl sub_80A71E8
	ldr r1, [r5]
	ldr r0, _080A835C @ =sub_80A8360
	str r0, [r1, #8]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A8358: .4byte gCurTask
_080A835C: .4byte sub_80A8360

	thumb_func_start sub_80A8360
sub_80A8360: @ 0x080A8360
	push {r4, r5, r6, lr}
	sub sp, #4
	ldr r6, _080A83A4 @ =gCurTask
	ldr r0, [r6]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	mov r0, sp
	movs r1, #0
	movs r2, #4
	bl memset
	adds r0, r4, #0
	mov r1, sp
	bl sub_80A71E8
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #0
	beq _080A83AC
	adds r0, r4, #0
	mov r1, sp
	bl sub_80A72F4
	cmp r5, #2
	bne _080A83AC
	movs r0, #0
	strh r0, [r4, #6]
	ldr r1, [r6]
	ldr r0, _080A83A8 @ =sub_80A83C8
	str r0, [r1, #8]
	b _080A83C0
	.align 2, 0
_080A83A4: .4byte gCurTask
_080A83A8: .4byte sub_80A83C8
_080A83AC:
	ldr r0, [r4]
	ldrb r0, [r0]
	subs r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #6
	bhi _080A83C0
	adds r0, r4, #0
	bl sub_80A8468
_080A83C0:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_80A83C8
sub_80A83C8: @ 0x080A83C8
	push {r4, r5, lr}
	sub sp, #4
	ldr r5, _080A8418 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r1, _080A841C @ =gUnknown_080D9F58
	mov r0, sp
	movs r2, #4
	bl memcpy
	adds r0, r4, #0
	mov r1, sp
	bl sub_80A72F4
	ldr r1, [r4]
	ldrb r0, [r1]
	cmp r0, #7
	bls _080A840E
	ldrh r0, [r4, #6]
	adds r0, #1
	strh r0, [r4, #6]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x77
	bls _080A840E
	movs r0, #0
	strh r0, [r4, #6]
	movs r0, #9
	strb r0, [r1]
	ldr r1, [r5]
	ldr r0, _080A8420 @ =sub_80A8424
	str r0, [r1, #8]
_080A840E:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A8418: .4byte gCurTask
_080A841C: .4byte gUnknown_080D9F58
_080A8420: .4byte sub_80A8424

	thumb_func_start sub_80A8424
sub_80A8424: @ 0x080A8424
	push {r4, r5, lr}
	sub sp, #4
	ldr r5, _080A845C @ =gCurTask
	ldr r0, [r5]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	ldr r1, _080A8460 @ =gUnknown_080D9F58
	mov r0, sp
	movs r2, #4
	bl memcpy
	adds r0, r4, #0
	mov r1, sp
	bl sub_80A72F4
	ldr r0, [r4]
	ldrb r0, [r0]
	cmp r0, #0xb
	bne _080A8454
	ldr r1, [r5]
	ldr r0, _080A8464 @ =sub_80A70B8
	str r0, [r1, #8]
_080A8454:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A845C: .4byte gCurTask
_080A8460: .4byte gUnknown_080D9F58
_080A8464: .4byte sub_80A70B8

	thumb_func_start sub_80A8468
sub_80A8468: @ 0x080A8468
	push {lr}
	adds r2, r0, #0
	ldr r0, [r2]
	ldrb r0, [r0]
	subs r0, #1
	cmp r0, #6
	bhi _080A84D2
	lsls r0, r0, #2
	ldr r1, _080A8480 @ =_080A8484
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080A8480: .4byte _080A8484
_080A8484: @ jump table
	.4byte _080A84C8 @ case 0
	.4byte _080A84A0 @ case 1
	.4byte _080A84A8 @ case 2
	.4byte _080A84B0 @ case 3
	.4byte _080A84B8 @ case 4
	.4byte _080A84C0 @ case 5
	.4byte _080A84C8 @ case 6
_080A84A0:
	ldr r0, [r2, #0xc]
	movs r1, #0x80
	lsls r1, r1, #2
	b _080A84CE
_080A84A8:
	ldr r0, [r2, #0xc]
	movs r1, #0x84
	lsls r1, r1, #2
	b _080A84CE
_080A84B0:
	ldr r0, [r2, #0xc]
	movs r1, #0x84
	lsls r1, r1, #2
	b _080A84CE
_080A84B8:
	ldr r0, [r2, #0xc]
	movs r1, #0x84
	lsls r1, r1, #2
	b _080A84CE
_080A84C0:
	ldr r0, [r2, #0xc]
	movs r1, #0x80
	lsls r1, r1, #2
	b _080A84CE
_080A84C8:
	ldr r0, [r2, #0xc]
	movs r1, #0x80
	lsls r1, r1, #1
_080A84CE:
	adds r0, r0, r1
	str r0, [r2, #0xc]
_080A84D2:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80A84D8
sub_80A84D8: @ 0x080A84D8
	bx lr
	.align 2, 0

	thumb_func_start sub_80A84DC
sub_80A84DC: @ 0x080A84DC
	push {lr}
	adds r1, r0, #0
	ldr r0, [r1, #0x24]
	cmp r0, #0
	beq _080A84F4
	ldr r2, _080A84F0 @ =0xFFFFFB00
	adds r0, r0, r2
	str r0, [r1, #0x24]
	b _080A84FC
	.align 2, 0
_080A84F0: .4byte 0xFFFFFB00
_080A84F4:
	ldr r0, [r1, #0x18]
	ldr r2, _080A8518 @ =0xFFFFFB00
	adds r0, r0, r2
	str r0, [r1, #0x18]
_080A84FC:
	ldr r0, [r1, #0x24]
	cmp r0, #0
	bge _080A8506
	movs r0, #0
	str r0, [r1, #0x24]
_080A8506:
	ldr r0, [r1, #0x24]
	ldr r1, [r1, #0x18]
	adds r0, r0, r1
	asrs r0, r0, #8
	cmp r0, #0
	ble _080A851C
	movs r0, #0
	b _080A851E
	.align 2, 0
_080A8518: .4byte 0xFFFFFB00
_080A851C:
	movs r0, #1
_080A851E:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80A8524
sub_80A8524: @ 0x080A8524
	push {lr}
	adds r2, r0, #0
	ldr r0, [r2, #0x20]
	movs r3, #0xbc
	lsls r3, r3, #7
	cmp r0, r3
	ble _080A853E
	adds r1, r0, #0
	subs r1, #0x10
	str r1, [r2, #0x20]
	ldr r0, _080A8544 @ =0x00005DFF
	cmp r1, r0
	bgt _080A8548
_080A853E:
	str r3, [r2, #0x20]
	movs r0, #1
	b _080A855A
	.align 2, 0
_080A8544: .4byte 0x00005DFF
_080A8548:
	movs r0, #0xe6
	lsls r0, r0, #7
	subs r0, r0, r1
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #2
	adds r0, r0, r1
	str r0, [r2, #0x1c]
	movs r0, #0
_080A855A:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80A8560
sub_80A8560: @ 0x080A8560
	push {r4, lr}
	adds r3, r0, #0
	ldr r2, [r3, #0x24]
	cmp r2, #0
	ble _080A85A0
	ldr r4, _080A8590 @ =gBgScrollRegs
	movs r1, #6
	ldrsh r0, [r4, r1]
	subs r0, #0x50
	lsls r0, r0, #8
	movs r1, #0x5a
	rsbs r1, r1, #0
	cmp r0, r1
	ble _080A8594
	adds r1, r2, #0
	subs r1, #0x10
	movs r2, #6
	ldrsh r0, [r4, r2]
	subs r0, #0x50
	lsls r0, r0, #8
	subs r1, r1, r0
	str r1, [r3, #0x24]
	b _080A859A
	.align 2, 0
_080A8590: .4byte gBgScrollRegs
_080A8594:
	adds r0, r2, #0
	subs r0, #0x40
	str r0, [r3, #0x24]
_080A859A:
	ldr r0, [r3, #0x24]
	cmp r0, #0
	bge _080A85A8
_080A85A0:
	movs r0, #0
	str r0, [r3, #0x24]
	movs r0, #1
	b _080A85AA
_080A85A8:
	movs r0, #0
_080A85AA:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_80A85B0
sub_80A85B0: @ 0x080A85B0
	push {lr}
	adds r2, r0, #0
	ldr r0, [r2, #0x20]
	ldr r3, _080A85D4 @ =0x000072FF
	cmp r0, r3
	bgt _080A85C6
	adds r1, r0, #0
	adds r1, #0x10
	str r1, [r2, #0x20]
	cmp r1, r3
	ble _080A85D8
_080A85C6:
	movs r0, #0xe6
	lsls r0, r0, #7
	str r0, [r2, #0x20]
	movs r0, #0
	str r0, [r2, #0x1c]
	movs r0, #1
	b _080A85EA
	.align 2, 0
_080A85D4: .4byte 0x000072FF
_080A85D8:
	movs r0, #0xe6
	lsls r0, r0, #7
	subs r0, r0, r1
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #2
	adds r0, r0, r1
	str r0, [r2, #0x1c]
	movs r0, #0
_080A85EA:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80A85F0
sub_80A85F0: @ 0x080A85F0
	bx lr
	.align 2, 0

	thumb_func_start sub_80A85F4
sub_80A85F4: @ 0x080A85F4
	push {r4, r5, r6, lr}
	ldr r6, _080A8650 @ =gCurTask
	ldr r0, [r6]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r4, r0
	ldr r1, _080A8654 @ =0x0300003C
	adds r0, r4, r1
	bl UpdateSpriteAnimation
	adds r1, r0, #0
	cmp r1, #0
	bne _080A861E
	ldr r2, _080A8658 @ =0x03000052
	adds r0, r4, r2
	strh r1, [r0]
	ldr r0, _080A865C @ =0x03000057
	adds r1, r4, r0
	movs r0, #0xff
	strb r0, [r1]
_080A861E:
	ldr r1, _080A8660 @ =0x03000064
	adds r0, r4, r1
	bl UpdateSpriteAnimation
	adds r1, r0, #0
	cmp r1, #0
	bne _080A863A
	ldr r2, _080A8664 @ =0x0300007A
	adds r0, r4, r2
	strh r1, [r0]
	ldr r0, _080A8668 @ =0x0300007F
	adds r1, r4, r0
	movs r0, #0xff
	strb r0, [r1]
_080A863A:
	ldr r0, [r5]
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _080A8648
	ldr r0, [r6]
	bl TaskDestroy
_080A8648:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A8650: .4byte gCurTask
_080A8654: .4byte 0x0300003C
_080A8658: .4byte 0x03000052
_080A865C: .4byte 0x03000057
_080A8660: .4byte 0x03000064
_080A8664: .4byte 0x0300007A
_080A8668: .4byte 0x0300007F

	thumb_func_start sub_80A866C
sub_80A866C: @ 0x080A866C
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, _080A86C0 @ =sub_80A86D8
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r1, _080A86C4 @ =sub_80A86D4
	str r1, [sp]
	movs r1, #0x14
	movs r3, #0
	bl TaskCreate
	ldrh r2, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r2, r2, r0
	movs r0, #0
	strh r0, [r2]
	str r0, [r2, #4]
	str r4, [r2, #0x10]
	ldr r3, _080A86C8 @ =gPseudoRandom
	ldr r1, [r3]
	ldr r0, _080A86CC @ =0x00196225
	muls r0, r1, r0
	ldr r1, _080A86D0 @ =0x3C6EF35F
	adds r0, r0, r1
	str r0, [r3]
	lsrs r0, r0, #8
	movs r1, #0x1f
	ands r0, r1
	lsls r0, r0, #8
	movs r1, #0xbe
	lsls r1, r1, #7
	adds r0, r0, r1
	str r0, [r2, #8]
	movs r0, #0x8c
	lsls r0, r0, #7
	str r0, [r2, #0xc]
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A86C0: .4byte sub_80A86D8
_080A86C4: .4byte sub_80A86D4
_080A86C8: .4byte gPseudoRandom
_080A86CC: .4byte 0x00196225
_080A86D0: .4byte 0x3C6EF35F

	thumb_func_start sub_80A86D4
sub_80A86D4: @ 0x080A86D4
	bx lr
	.align 2, 0

	thumb_func_start sub_80A86D8
sub_80A86D8: @ 0x080A86D8
	push {r4, r5, lr}
	ldr r5, _080A871C @ =gCurTask
	ldr r0, [r5]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	ldr r0, [r4, #0x10]
	ldr r1, [r4, #8]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r4, #0xc]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	adds r1, #0x50
	ldr r2, _080A8720 @ =gBgScrollRegs
	ldrh r2, [r2, #6]
	subs r1, r1, r2
	strh r1, [r0, #0x12]
	bl DisplaySprite
	ldr r0, [r4, #0xc]
	ldr r1, _080A8724 @ =0xFFFFFF00
	adds r0, r0, r1
	str r0, [r4, #0xc]
	ldr r1, _080A8728 @ =0xFFFFEC00
	cmp r0, r1
	bge _080A8716
	ldr r0, [r5]
	bl TaskDestroy
_080A8716:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A871C: .4byte gCurTask
_080A8720: .4byte gBgScrollRegs
_080A8724: .4byte 0xFFFFFF00
_080A8728: .4byte 0xFFFFEC00

	thumb_func_start sub_80A872C
sub_80A872C: @ 0x080A872C
	push {r4, r5, r6, lr}
	sub sp, #4
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	ldr r1, _080A875C @ =gDispCnt
	movs r2, #0x82
	lsls r2, r2, #5
	adds r0, r2, #0
	strh r0, [r1]
	cmp r6, #0
	bne _080A8768
	ldr r0, _080A8760 @ =sub_80A8858
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r1, _080A8764 @ =sub_80A98AC
	str r1, [sp]
	movs r1, #0x90
	movs r3, #0
	bl TaskCreate
	adds r4, r0, #0
	bl m4aMPlayAllStop
	b _080A877C
	.align 2, 0
_080A875C: .4byte gDispCnt
_080A8760: .4byte sub_80A8858
_080A8764: .4byte sub_80A98AC
_080A8768:
	ldr r0, _080A87A0 @ =sub_80A8AC4
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r1, _080A87A4 @ =sub_80A98AC
	str r1, [sp]
	movs r1, #0x90
	movs r3, #0
	bl TaskCreate
	adds r4, r0, #0
_080A877C:
	ldrh r0, [r4, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r4, r0, r1
	movs r0, #0
	strb r0, [r4, #2]
	strb r0, [r4, #3]
	movs r1, #0
	strh r0, [r4, #4]
	strh r0, [r4, #6]
	strb r1, [r4, #1]
	cmp r6, #0
	beq _080A87B6
	cmp r6, #0xa
	bls _080A87A8
	movs r0, #0xb
	b _080A87B4
	.align 2, 0
_080A87A0: .4byte sub_80A8AC4
_080A87A4: .4byte sub_80A98AC
_080A87A8:
	subs r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #5
	bhi _080A87B6
	movs r0, #0xa
_080A87B4:
	strb r0, [r4, #1]
_080A87B6:
	movs r5, #0
	strb r6, [r4]
	str r5, [r4, #8]
	str r5, [r4, #0xc]
	ldr r0, _080A8838 @ =gUnknown_03006230
	strb r5, [r0]
	ldr r1, _080A883C @ =gUnknown_03003590
	strb r5, [r1]
	strb r5, [r1, #1]
	movs r0, #0xff
	strb r0, [r1, #2]
	movs r6, #0x40
	strb r6, [r1, #3]
	ldr r1, _080A8840 @ =gBgCntRegs
	ldr r0, _080A8844 @ =0x00005C81
	strh r0, [r1]
	ldr r0, _080A8848 @ =gBgScrollRegs
	strh r5, [r0]
	strh r5, [r0, #2]
	adds r3, r4, #0
	adds r3, #0x10
	ldr r2, _080A884C @ =gUnknown_080D9FC3
	ldrb r0, [r4]
	ldrb r1, [r4, #2]
	adds r0, r0, r1
	adds r0, r0, r2
	ldrb r2, [r0]
	ldrb r0, [r4, #1]
	cmp r0, #0xb
	bne _080A87F4
	movs r2, #0xb
_080A87F4:
	movs r0, #0xc0
	lsls r0, r0, #0x13
	str r0, [r3, #4]
	strh r5, [r3, #0xa]
	ldr r0, _080A8850 @ =0x0600E000
	str r0, [r3, #0xc]
	strh r5, [r3, #0x18]
	strh r5, [r3, #0x1a]
	ldr r1, _080A8854 @ =gUnknown_080D9FA4
	lsls r0, r2, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r3, #0x1c]
	strh r5, [r3, #0x1e]
	strh r5, [r3, #0x20]
	strh r5, [r3, #0x22]
	strh r5, [r3, #0x24]
	strh r6, [r3, #0x26]
	movs r0, #0x20
	strh r0, [r3, #0x28]
	adds r1, r4, #0
	adds r1, #0x3a
	movs r0, #0
	strb r0, [r1]
	movs r0, #4
	strh r0, [r3, #0x2e]
	adds r0, r3, #0
	bl DrawBackground
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A8838: .4byte gUnknown_03006230
_080A883C: .4byte gUnknown_03003590
_080A8840: .4byte gBgCntRegs
_080A8844: .4byte 0x00005C81
_080A8848: .4byte gBgScrollRegs
_080A884C: .4byte gUnknown_080D9FC3
_080A8850: .4byte 0x0600E000
_080A8854: .4byte gUnknown_080D9FA4

	thumb_func_start sub_80A8858
sub_80A8858: @ 0x080A8858
	push {r4, r5, lr}
	ldr r2, _080A8898 @ =gCurTask
	ldr r0, [r2]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r3, r1, r0
	ldrb r0, [r3, #3]
	adds r4, r2, #0
	ldr r1, _080A889C @ =gBldRegs
	cmp r0, #0
	bne _080A88C8
	ldr r2, _080A88A0 @ =gDispCnt
	ldrh r0, [r2]
	movs r5, #0x80
	lsls r5, r5, #7
	adds r1, r5, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080A88A4 @ =gWinRegs
	movs r0, #0xf0
	strh r0, [r1, #2]
	movs r0, #0xa0
	strh r0, [r1, #6]
	ldrb r0, [r3, #1]
	adds r2, r1, #0
	cmp r0, #2
	bhi _080A88A8
	movs r0, #0x84
	lsls r0, r0, #6
	b _080A88AA
	.align 2, 0
_080A8898: .4byte gCurTask
_080A889C: .4byte gBldRegs
_080A88A0: .4byte gDispCnt
_080A88A4: .4byte gWinRegs
_080A88A8:
	ldr r0, _080A88E4 @ =0x00003FFF
_080A88AA:
	strh r0, [r2, #8]
	ldrh r1, [r2, #0xa]
	movs r0, #0x1f
	orrs r0, r1
	strh r0, [r2, #0xa]
	ldr r1, _080A88E8 @ =gBldRegs
	ldr r0, _080A88EC @ =0x00003FBF
	strh r0, [r1]
	movs r0, #0x10
	strh r0, [r1, #4]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r3, #4]
	movs r0, #1
	strb r0, [r3, #3]
_080A88C8:
	ldrh r0, [r1, #4]
	cmp r0, #0
	beq _080A8900
	ldrh r0, [r3, #4]
	lsrs r0, r0, #8
	strh r0, [r1, #4]
	ldrb r0, [r3, #1]
	cmp r0, #0
	bne _080A88F0
	ldrh r0, [r3, #4]
	subs r0, #0x40
	strh r0, [r3, #4]
	b _080A890E
	.align 2, 0
_080A88E4: .4byte 0x00003FFF
_080A88E8: .4byte gBldRegs
_080A88EC: .4byte 0x00003FBF
_080A88F0:
	ldr r1, _080A88FC @ =0xFFFFFF00
	adds r0, r1, #0
	ldrh r5, [r3, #4]
	adds r0, r0, r5
	strh r0, [r3, #4]
	b _080A890E
	.align 2, 0
_080A88FC: .4byte 0xFFFFFF00
_080A8900:
	strh r0, [r1, #4]
	ldrb r0, [r3, #1]
	adds r0, #1
	strb r0, [r3, #1]
	ldr r1, [r4]
	ldr r0, _080A8914 @ =sub_80A8918
	str r0, [r1, #8]
_080A890E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A8914: .4byte sub_80A8918

	thumb_func_start sub_80A8918
sub_80A8918: @ 0x080A8918
	push {r4, r5, r6, lr}
	ldr r0, _080A8954 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r1, r0
	ldrb r0, [r6, #3]
	ldr r1, _080A8958 @ =gBldRegs
	cmp r0, #0
	beq _080A897E
	ldr r2, _080A895C @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #7
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080A8960 @ =gWinRegs
	movs r0, #0xf0
	strh r0, [r1, #2]
	movs r0, #0xa0
	strh r0, [r1, #6]
	ldrb r0, [r6, #1]
	adds r4, r1, #0
	cmp r0, #2
	bhi _080A8964
	movs r0, #0x84
	lsls r0, r0, #6
	b _080A8966
	.align 2, 0
_080A8954: .4byte gCurTask
_080A8958: .4byte gBldRegs
_080A895C: .4byte gDispCnt
_080A8960: .4byte gWinRegs
_080A8964:
	ldr r0, _080A8998 @ =0x00003FFF
_080A8966:
	strh r0, [r4, #8]
	ldrh r1, [r4, #0xa]
	movs r0, #0x1f
	movs r3, #0
	movs r2, #0
	orrs r0, r1
	strh r0, [r4, #0xa]
	ldr r1, _080A899C @ =gBldRegs
	ldr r0, _080A8998 @ =0x00003FFF
	strh r0, [r1]
	strh r2, [r6, #4]
	strb r3, [r6, #3]
_080A897E:
	ldrh r0, [r1, #4]
	cmp r0, #0xf
	bhi _080A89AE
	ldrh r0, [r6, #4]
	lsrs r0, r0, #8
	strh r0, [r1, #4]
	ldrb r0, [r6]
	cmp r0, #0
	bne _080A89A0
	ldrh r0, [r6, #4]
	adds r0, #0x40
	strh r0, [r6, #4]
	b _080A8ABA
	.align 2, 0
_080A8998: .4byte 0x00003FFF
_080A899C: .4byte gBldRegs
_080A89A0:
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r1, #0
	ldrh r3, [r6, #4]
	adds r0, r0, r3
	strh r0, [r6, #4]
	b _080A8ABA
_080A89AE:
	ldrb r0, [r6]
	adds r1, r0, #0
	cmp r1, #0
	bne _080A89F4
	ldrb r2, [r6, #1]
	movs r3, #0x3c
	cmp r2, #1
	bne _080A89C0
	movs r3, #0x78
_080A89C0:
	ldrh r0, [r6, #6]
	cmp r0, r3
	bhs _080A89CC
	adds r0, #1
	strh r0, [r6, #6]
	b _080A8ABA
_080A89CC:
	cmp r2, #1
	bne _080A89F4
	ldr r2, _080A89F0 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #1
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldrb r0, [r6, #1]
	adds r0, #1
	strb r0, [r6, #1]
	movs r0, #0x4f
	bl m4aSongNumStart
	bl sub_80A8E54
	b _080A8A64
	.align 2, 0
_080A89F0: .4byte gDispCnt
_080A89F4:
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xb
	bls _080A8A06
	adds r0, r1, #0
	subs r0, #0xb
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	b _080A8A08
_080A8A06:
	ldrb r1, [r6]
_080A8A08:
	ldr r0, _080A8A70 @ =gUnknown_080D9FBC
	adds r0, r1, r0
	ldrb r2, [r6, #2]
	ldrb r0, [r0]
	cmp r2, r0
	bhs _080A8A84
	adds r0, r6, #0
	adds r0, #0x10
	ldrb r1, [r6, #1]
	adds r1, #1
	movs r4, #0
	strb r1, [r6, #1]
	adds r1, r2, #1
	strb r1, [r6, #2]
	movs r1, #0xc0
	lsls r1, r1, #0x13
	str r1, [r0, #4]
	movs r5, #0
	strh r4, [r0, #0xa]
	ldr r1, _080A8A74 @ =0x0600E000
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	ldr r3, _080A8A78 @ =gUnknown_080D9FA4
	ldrb r1, [r6]
	ldrb r2, [r6, #2]
	adds r1, r1, r2
	lsls r1, r1, #1
	adds r1, r1, r3
	ldrh r1, [r1]
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	movs r1, #0x20
	strh r1, [r0, #0x26]
	strh r1, [r0, #0x28]
	adds r1, r6, #0
	adds r1, #0x3a
	strb r5, [r1]
	movs r1, #4
	strh r1, [r0, #0x2e]
	bl DrawBackground
	strh r4, [r6, #6]
_080A8A64:
	ldr r0, _080A8A7C @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080A8A80 @ =sub_80A8AC4
	str r0, [r1, #8]
	b _080A8ABA
	.align 2, 0
_080A8A70: .4byte gUnknown_080D9FBC
_080A8A74: .4byte 0x0600E000
_080A8A78: .4byte gUnknown_080D9FA4
_080A8A7C: .4byte gCurTask
_080A8A80: .4byte sub_80A8AC4
_080A8A84:
	ldrb r0, [r6]
	cmp r0, #0xb
	bls _080A8A8E
	subs r0, #0xb
	strb r0, [r6]
_080A8A8E:
	ldrb r1, [r6]
	cmp r1, #0
	bne _080A8A9C
	movs r0, #1
	bl sub_80A5954
	b _080A8AB2
_080A8A9C:
	subs r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #4
	bhi _080A8AB2
	adds r0, r1, #0
	adds r0, #0xb
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bl sub_80A9920
_080A8AB2:
	ldr r0, _080A8AC0 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
_080A8ABA:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A8AC0: .4byte gCurTask

	thumb_func_start sub_80A8AC4
sub_80A8AC4: @ 0x080A8AC4
	push {r4, r5, r6, lr}
	ldr r2, _080A8B0C @ =gCurTask
	ldr r0, [r2]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r3, r1, r0
	ldrb r0, [r3, #3]
	adds r5, r2, #0
	ldr r1, _080A8B10 @ =gBldRegs
	cmp r0, #0
	bne _080A8B48
	ldr r2, _080A8B14 @ =gDispCnt
	ldrh r0, [r2]
	movs r4, #0x80
	lsls r4, r4, #7
	adds r1, r4, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080A8B18 @ =gWinRegs
	movs r0, #0xf0
	strh r0, [r1, #2]
	movs r0, #0xa0
	strh r0, [r1, #6]
	ldrb r0, [r3]
	adds r4, r2, #0
	adds r2, r1, #0
	cmp r0, #0
	bne _080A8B1C
	ldrb r0, [r3, #1]
	cmp r0, #2
	bhi _080A8B1C
	movs r0, #0x84
	lsls r0, r0, #6
	b _080A8B2A
	.align 2, 0
_080A8B0C: .4byte gCurTask
_080A8B10: .4byte gBldRegs
_080A8B14: .4byte gDispCnt
_080A8B18: .4byte gWinRegs
_080A8B1C:
	ldrh r0, [r4]
	movs r6, #0x80
	lsls r6, r6, #1
	adds r1, r6, #0
	orrs r0, r1
	strh r0, [r4]
	ldr r0, _080A8B64 @ =0x00003FFF
_080A8B2A:
	strh r0, [r2, #8]
	ldrh r1, [r2, #0xa]
	movs r0, #0x1f
	orrs r0, r1
	strh r0, [r2, #0xa]
	ldr r1, _080A8B68 @ =gBldRegs
	ldr r0, _080A8B64 @ =0x00003FFF
	strh r0, [r1]
	movs r0, #0x10
	strh r0, [r1, #4]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r3, #4]
	movs r0, #1
	strb r0, [r3, #3]
_080A8B48:
	ldrh r0, [r1, #4]
	cmp r0, #0
	beq _080A8B8C
	ldrh r0, [r3, #4]
	lsrs r0, r0, #8
	strh r0, [r1, #4]
	ldrh r0, [r3]
	cmp r0, #0
	bne _080A8B6C
	ldrh r0, [r3, #4]
	subs r0, #0x10
	strh r0, [r3, #4]
	b _080A8BA0
	.align 2, 0
_080A8B64: .4byte 0x00003FFF
_080A8B68: .4byte gBldRegs
_080A8B6C:
	ldrb r0, [r3]
	cmp r0, #0
	bne _080A8B7A
	ldrh r0, [r3, #4]
	subs r0, #0x40
	strh r0, [r3, #4]
	b _080A8BA0
_080A8B7A:
	ldr r1, _080A8B88 @ =0xFFFFFF00
	adds r0, r1, #0
	ldrh r4, [r3, #4]
	adds r0, r0, r4
	strh r0, [r3, #4]
	b _080A8BA0
	.align 2, 0
_080A8B88: .4byte 0xFFFFFF00
_080A8B8C:
	strh r0, [r1, #4]
	ldrb r0, [r3]
	cmp r0, #6
	bne _080A8B9A
	movs r0, #0x96
	lsls r0, r0, #1
	strh r0, [r3, #6]
_080A8B9A:
	ldr r1, [r5]
	ldr r0, _080A8BA8 @ =sub_80A8BAC
	str r0, [r1, #8]
_080A8BA0:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A8BA8: .4byte sub_80A8BAC

	thumb_func_start sub_80A8BAC
sub_80A8BAC: @ 0x080A8BAC
	push {r4, lr}
	ldr r2, _080A8BCC @ =gCurTask
	ldr r0, [r2]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r1, r1, r0
	ldrb r0, [r1, #1]
	adds r4, r2, #0
	cmp r0, #0xa
	beq _080A8BDC
	cmp r0, #0xa
	bgt _080A8BD0
	cmp r0, #2
	beq _080A8BD6
	b _080A8BE8
	.align 2, 0
_080A8BCC: .4byte gCurTask
_080A8BD0:
	cmp r0, #0xb
	beq _080A8BE2
	b _080A8BE8
_080A8BD6:
	movs r3, #0xb4
	lsls r3, r3, #1
	b _080A8BEA
_080A8BDC:
	movs r3, #0x96
	lsls r3, r3, #1
	b _080A8BEA
_080A8BE2:
	movs r3, #0x96
	lsls r3, r3, #2
	b _080A8BEA
_080A8BE8:
	movs r3, #0xb4
_080A8BEA:
	ldrh r0, [r1, #6]
	adds r0, #1
	movs r2, #0
	strh r0, [r1, #6]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, r3
	blo _080A8C14
	strh r2, [r1, #6]
	ldrb r0, [r1]
	cmp r0, #6
	bne _080A8C0C
	ldr r1, [r4]
	ldr r0, _080A8C08 @ =sub_80A8C20
	b _080A8C12
	.align 2, 0
_080A8C08: .4byte sub_80A8C20
_080A8C0C:
	strh r2, [r1, #6]
	ldr r1, [r4]
	ldr r0, _080A8C1C @ =sub_80A8918
_080A8C12:
	str r0, [r1, #8]
_080A8C14:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A8C1C: .4byte sub_80A8918

	thumb_func_start sub_80A8C20
sub_80A8C20: @ 0x080A8C20
	push {r4, lr}
	ldr r4, _080A8C78 @ =gCurTask
	ldr r0, [r4]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r1, r1, r0
	ldrh r0, [r1, #6]
	adds r0, #1
	strh r0, [r1, #6]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x3b
	bls _080A8C72
	ldr r0, [r1, #8]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r0, r2
	str r0, [r1, #8]
	ldr r2, _080A8C7C @ =gBgScrollRegs
	asrs r0, r0, #8
	strh r0, [r2]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x77
	ble _080A8C72
	movs r0, #0x78
	strh r0, [r2]
	ldrh r0, [r1, #6]
	adds r0, #1
	strh r0, [r1, #6]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x77
	bls _080A8C72
	movs r0, #1
	bl sub_80A98B0
	ldr r0, [r4]
	bl TaskDestroy
_080A8C72:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A8C78: .4byte gCurTask
_080A8C7C: .4byte gBgScrollRegs

	thumb_func_start sub_80A8C80
sub_80A8C80: @ 0x080A8C80
	push {r4, lr}
	sub sp, #4
	ldr r1, _080A8CFC @ =gDispCnt
	movs r2, #0x8a
	lsls r2, r2, #5
	adds r0, r2, #0
	strh r0, [r1]
	ldr r0, _080A8D00 @ =sub_80A8D24
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r1, _080A8D04 @ =sub_80A9964
	str r1, [sp]
	movs r1, #0x48
	movs r3, #0
	bl TaskCreate
	ldrh r3, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r0, r3, r0
	movs r2, #0
	strb r2, [r0, #2]
	movs r4, #0
	strh r2, [r0, #4]
	strh r2, [r0]
	ldr r1, _080A8D08 @ =gBgCntRegs
	ldr r0, _080A8D0C @ =0x00001681
	strh r0, [r1]
	ldr r0, _080A8D10 @ =gBgScrollRegs
	strh r2, [r0]
	strh r2, [r0, #2]
	ldr r1, _080A8D14 @ =0x03000008
	adds r0, r3, r1
	movs r1, #0xc0
	lsls r1, r1, #0x13
	str r1, [r0, #4]
	strh r2, [r0, #0xa]
	ldr r1, _080A8D18 @ =0x0600B000
	str r1, [r0, #0xc]
	strh r2, [r0, #0x18]
	strh r2, [r0, #0x1a]
	ldr r1, _080A8D1C @ =0x00000133
	strh r1, [r0, #0x1c]
	strh r2, [r0, #0x1e]
	strh r2, [r0, #0x20]
	strh r2, [r0, #0x22]
	strh r2, [r0, #0x24]
	movs r1, #0x20
	strh r1, [r0, #0x26]
	strh r1, [r0, #0x28]
	ldr r2, _080A8D20 @ =0x03000032
	adds r3, r3, r2
	strb r4, [r3]
	movs r1, #4
	strh r1, [r0, #0x2e]
	bl DrawBackground
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A8CFC: .4byte gDispCnt
_080A8D00: .4byte sub_80A8D24
_080A8D04: .4byte sub_80A9964
_080A8D08: .4byte gBgCntRegs
_080A8D0C: .4byte 0x00001681
_080A8D10: .4byte gBgScrollRegs
_080A8D14: .4byte 0x03000008
_080A8D18: .4byte 0x0600B000
_080A8D1C: .4byte 0x00000133
_080A8D20: .4byte 0x03000032

	thumb_func_start sub_80A8D24
sub_80A8D24: @ 0x080A8D24
	push {r4, r5, lr}
	ldr r4, _080A8D80 @ =gCurTask
	ldr r0, [r4]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r3, r1, r0
	ldrb r0, [r3, #2]
	cmp r0, #0
	bne _080A8D74
	ldr r2, _080A8D84 @ =gDispCnt
	ldrh r0, [r2]
	movs r5, #0x80
	lsls r5, r5, #6
	adds r1, r5, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080A8D88 @ =gWinRegs
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	ldrh r2, [r1, #8]
	movs r0, #0x3f
	orrs r0, r2
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	orrs r0, r2
	strh r0, [r1, #0xa]
	ldr r1, _080A8D8C @ =gBldRegs
	ldr r0, _080A8D90 @ =0x00003FBF
	strh r0, [r1]
	movs r0, #0x10
	strh r0, [r1, #4]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r3, #4]
	movs r0, #1
	strb r0, [r3, #2]
_080A8D74:
	ldrh r0, [r3]
	cmp r0, #0x77
	bhi _080A8D94
	adds r0, #1
	strh r0, [r3]
	b _080A8DBA
	.align 2, 0
_080A8D80: .4byte gCurTask
_080A8D84: .4byte gDispCnt
_080A8D88: .4byte gWinRegs
_080A8D8C: .4byte gBldRegs
_080A8D90: .4byte 0x00003FBF
_080A8D94:
	ldr r1, _080A8DAC @ =gBldRegs
	ldrh r0, [r1, #4]
	cmp r0, #0
	beq _080A8DB0
	ldrh r0, [r3, #4]
	lsrs r0, r0, #8
	strh r0, [r1, #4]
	ldrh r0, [r3, #4]
	subs r0, #0x20
	strh r0, [r3, #4]
	b _080A8DBA
	.align 2, 0
_080A8DAC: .4byte gBldRegs
_080A8DB0:
	strh r0, [r3]
	strh r0, [r1, #4]
	ldr r1, [r4]
	ldr r0, _080A8DC0 @ =sub_80A9968
	str r0, [r1, #8]
_080A8DBA:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A8DC0: .4byte sub_80A9968

	thumb_func_start sub_80A8DC4
sub_80A8DC4: @ 0x080A8DC4
	push {r4, r5, r6, r7, lr}
	ldr r7, _080A8E28 @ =gCurTask
	ldr r0, [r7]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	ldrb r0, [r5, #2]
	ldr r6, _080A8E2C @ =gBldRegs
	cmp r0, #0
	beq _080A8E0E
	ldr r2, _080A8E30 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080A8E34 @ =gWinRegs
	movs r4, #0
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	ldrh r2, [r1, #8]
	movs r0, #0x3f
	orrs r0, r2
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	movs r3, #0
	orrs r0, r2
	strh r0, [r1, #0xa]
	ldr r0, _080A8E38 @ =0x00003FFF
	strh r0, [r6]
	strh r4, [r5, #4]
	strb r3, [r5, #2]
_080A8E0E:
	ldrh r0, [r6, #4]
	cmp r0, #0xf
	bhi _080A8E3C
	ldrh r0, [r5, #4]
	lsrs r0, r0, #8
	strh r0, [r6, #4]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r1, #0
	ldrh r3, [r5, #4]
	adds r0, r0, r3
	strh r0, [r5, #4]
	b _080A8E4C
	.align 2, 0
_080A8E28: .4byte gCurTask
_080A8E2C: .4byte gBldRegs
_080A8E30: .4byte gDispCnt
_080A8E34: .4byte gWinRegs
_080A8E38: .4byte 0x00003FFF
_080A8E3C:
	movs r0, #0x10
	strh r0, [r6, #4]
	movs r0, #1
	bl sub_808A25C
	ldr r0, [r7]
	bl TaskDestroy
_080A8E4C:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80A8E54
sub_80A8E54: @ 0x080A8E54
	push {r4, lr}
	sub sp, #4
	ldr r0, _080A8EC0 @ =sub_80A8ED0
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r1, _080A8EC4 @ =sub_80A99CC
	str r1, [sp]
	movs r1, #0xc
	movs r3, #0
	bl TaskCreate
	ldrh r2, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r2, r2, r0
	movs r0, #0
	strb r0, [r2]
	strh r0, [r2, #2]
	str r0, [r2, #4]
	movs r0, #0xa0
	lsls r0, r0, #8
	str r0, [r2, #8]
	ldr r3, _080A8EC8 @ =gDispCnt
	ldrh r0, [r3]
	movs r4, #0x80
	lsls r4, r4, #6
	adds r1, r4, #0
	orrs r0, r1
	strh r0, [r3]
	ldr r3, _080A8ECC @ =gWinRegs
	movs r0, #0xf0
	strh r0, [r3]
	movs r0, #0xa0
	strh r0, [r3, #4]
	movs r0, #0x84
	lsls r0, r0, #6
	strh r0, [r3, #8]
	ldrh r1, [r3, #0xa]
	movs r0, #0x1f
	orrs r0, r1
	strh r0, [r3, #0xa]
	ldr r0, [r2, #4]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r2, #8]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r3, #4]
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A8EC0: .4byte sub_80A8ED0
_080A8EC4: .4byte sub_80A99CC
_080A8EC8: .4byte gDispCnt
_080A8ECC: .4byte gWinRegs

	thumb_func_start sub_80A8ED0
sub_80A8ED0: @ 0x080A8ED0
	push {r4, r5, r6, lr}
	ldr r6, _080A8F34 @ =gCurTask
	ldr r0, [r6]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r3, r1, r0
	ldr r5, _080A8F38 @ =gUnknown_080D9FCA
	ldrb r2, [r3]
	adds r0, r2, r5
	ldrb r0, [r0]
	lsls r0, r0, #8
	ldr r4, [r3, #8]
	cmp r4, r0
	ble _080A8F48
	ldr r1, _080A8F3C @ =gUnknown_080D9FD0
	lsls r0, r2, #2
	adds r0, r0, r1
	ldr r0, [r0]
	subs r1, r4, r0
	str r1, [r3, #8]
	adds r0, r2, r5
	ldrb r0, [r0]
	lsls r0, r0, #8
	cmp r1, r0
	bgt _080A8F64
	adds r0, r2, #1
	strb r0, [r3]
	subs r1, #1
	ldr r0, _080A8F40 @ =0x00009FFE
	cmp r1, r0
	bls _080A8F64
	movs r0, #0
	str r0, [r3, #8]
	ldr r1, _080A8F44 @ =gStageData
	ldrb r0, [r1, #6]
	cmp r0, #0
	beq _080A8F22
	adds r1, #0xc5
	movs r0, #1
	strb r0, [r1]
_080A8F22:
	bl sub_80260F0
	bl sub_8001E84
	ldr r0, [r6]
	bl TaskDestroy
	b _080A8F80
	.align 2, 0
_080A8F34: .4byte gCurTask
_080A8F38: .4byte gUnknown_080D9FCA
_080A8F3C: .4byte gUnknown_080D9FD0
_080A8F40: .4byte 0x00009FFE
_080A8F44: .4byte gStageData
_080A8F48:
	ldr r1, _080A8F88 @ =gUnknown_080D9FD0
	lsls r0, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r1, r4, r1
	str r1, [r3, #8]
	ldrb r2, [r3]
	adds r0, r2, r5
	ldrb r0, [r0]
	lsls r0, r0, #8
	cmp r1, r0
	blt _080A8F64
	adds r0, r2, #1
	strb r0, [r3]
_080A8F64:
	ldrb r0, [r3]
	cmp r0, #6
	bls _080A8F6E
	movs r0, #6
	strb r0, [r3]
_080A8F6E:
	ldr r2, _080A8F8C @ =gWinRegs
	ldr r0, [r3, #4]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r3, #8]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2, #4]
_080A8F80:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A8F88: .4byte gUnknown_080D9FD0
_080A8F8C: .4byte gWinRegs

	thumb_func_start sub_80A8F90
sub_80A8F90: @ 0x080A8F90
	push {r4, r5, lr}
	sub sp, #8
	ldr r0, _080A9038 @ =sub_80A9118
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r1, _080A903C @ =sub_80A9B68
	str r1, [sp]
	movs r1, #0x6c
	movs r3, #0
	bl TaskCreate
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	ldr r0, _080A9040 @ =0x06010000
	str r0, [r4, #0x18]
	movs r2, #0
	strb r2, [r4]
	movs r3, #0
	strh r2, [r4, #2]
	ldr r0, _080A9044 @ =0xFFFF9C00
	str r0, [r4, #0x10]
	movs r1, #0xdc
	lsls r1, r1, #7
	str r1, [r4, #0x14]
	ldr r0, _080A9048 @ =0xFFFFCE00
	str r0, [r4, #8]
	str r1, [r4, #0xc]
	str r2, [sp, #4]
	ldr r2, _080A904C @ =0x040000D4
	add r0, sp, #4
	str r0, [r2]
	ldr r0, _080A9050 @ =gBgCntRegs
	ldrh r1, [r0, #4]
	movs r0, #0xc
	ands r0, r1
	lsls r0, r0, #0xc
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r0, r0, r1
	str r0, [r2, #4]
	ldr r0, _080A9054 @ =0x85000010
	str r0, [r2, #8]
	ldr r0, [r2, #8]
	ldr r5, _080A9058 @ =gUnknown_03006230
	strb r3, [r5]
	ldr r0, _080A905C @ =gUnknown_03003590
	strb r3, [r0]
	strb r3, [r0, #1]
	movs r1, #0xff
	strb r1, [r0, #2]
	movs r2, #0x40
	strb r2, [r0, #3]
	strb r3, [r5, #1]
	strb r3, [r0, #4]
	strb r3, [r0, #5]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #6]
	strb r2, [r0, #7]
	strb r3, [r5, #2]
	strb r3, [r0, #8]
	strb r3, [r0, #9]
	strb r1, [r0, #0xa]
	strb r2, [r0, #0xb]
	movs r0, #0
	bl sub_80C4C0C
	ldr r1, _080A9060 @ =gBgPalette
	strh r0, [r1]
	ldr r2, _080A9064 @ =gFlags
	ldr r0, [r2]
	movs r1, #1
	orrs r0, r1
	str r0, [r2]
	adds r0, r4, #0
	bl sub_80A9068
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A9038: .4byte sub_80A9118
_080A903C: .4byte sub_80A9B68
_080A9040: .4byte 0x06010000
_080A9044: .4byte 0xFFFF9C00
_080A9048: .4byte 0xFFFFCE00
_080A904C: .4byte 0x040000D4
_080A9050: .4byte gBgCntRegs
_080A9054: .4byte 0x85000010
_080A9058: .4byte gUnknown_03006230
_080A905C: .4byte gUnknown_03003590
_080A9060: .4byte gBgPalette
_080A9064: .4byte gFlags

	thumb_func_start sub_80A9068
sub_80A9068: @ 0x080A9068
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r7, r0, #0
	adds r0, #0x1c
	ldr r1, [r7, #0x18]
	str r1, [r7, #0x1c]
	movs r2, #0xf0
	lsls r2, r2, #2
	adds r1, r1, r2
	str r1, [r7, #0x18]
	ldr r2, _080A9110 @ =gUnknown_080D9FE4
	ldrh r1, [r2]
	movs r3, #0
	mov sb, r3
	movs r4, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #8]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0xc]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	movs r1, #0x10
	mov r8, r1
	mov r2, r8
	strb r2, [r0, #0x1c]
	mov r3, sb
	strb r3, [r0, #0x1f]
	movs r6, #0xa0
	lsls r6, r6, #5
	str r6, [r0, #8]
	movs r5, #1
	rsbs r5, r5, #0
	str r5, [r0, #0x20]
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	adds r0, #0x44
	ldr r1, [r7, #0x18]
	str r1, [r7, #0x44]
	movs r2, #0xc8
	lsls r2, r2, #2
	adds r1, r1, r2
	str r1, [r7, #0x18]
	ldr r2, _080A9114 @ =gUnknown_080DA00C
	ldrh r1, [r2]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	adds r1, r5, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #8]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0xc]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	mov r3, r8
	strb r3, [r0, #0x1c]
	mov r1, sb
	strb r1, [r0, #0x1f]
	str r6, [r0, #8]
	str r5, [r0, #0x20]
	bl UpdateSpriteAnimation
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A9110: .4byte gUnknown_080D9FE4
_080A9114: .4byte gUnknown_080DA00C

	thumb_func_start sub_80A9118
sub_80A9118: @ 0x080A9118
	push {r4, r5, lr}
	ldr r5, _080A9134 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldrh r0, [r4, #2]
	cmp r0, #0xef
	bhi _080A9138
	adds r0, #1
	strh r0, [r4, #2]
	b _080A91BA
	.align 2, 0
_080A9134: .4byte gCurTask
_080A9138:
	ldrh r0, [r4, #4]
	cmp r0, #0
	beq _080A917A
	ldr r2, _080A919C @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080A91A0 @ =gWinRegs
	movs r3, #0
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	ldrh r2, [r1, #8]
	movs r0, #0x3f
	orrs r0, r2
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	orrs r0, r2
	strh r0, [r1, #0xa]
	ldr r1, _080A91A4 @ =gBldRegs
	ldr r0, _080A91A8 @ =0x00003FFF
	strh r0, [r1]
	movs r0, #0x10
	strh r0, [r1, #4]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r4, #6]
	strh r3, [r4, #4]
_080A917A:
	adds r0, r4, #0
	bl sub_80A9B24
	ldr r1, _080A91A4 @ =gBldRegs
	ldrh r0, [r1, #4]
	cmp r0, #0
	beq _080A91B0
	ldrh r0, [r4, #6]
	lsrs r0, r0, #8
	strh r0, [r1, #4]
	ldr r1, _080A91AC @ =0xFFFFFF00
	adds r0, r1, #0
	ldrh r3, [r4, #6]
	adds r0, r0, r3
	strh r0, [r4, #6]
	b _080A91BA
	.align 2, 0
_080A919C: .4byte gDispCnt
_080A91A0: .4byte gWinRegs
_080A91A4: .4byte gBldRegs
_080A91A8: .4byte 0x00003FFF
_080A91AC: .4byte 0xFFFFFF00
_080A91B0:
	strh r0, [r4, #2]
	strh r0, [r1, #4]
	ldr r1, [r5]
	ldr r0, _080A91C0 @ =sub_80A91C4
	str r0, [r1, #8]
_080A91BA:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A91C0: .4byte sub_80A91C4

	thumb_func_start sub_80A91C4
sub_80A91C4: @ 0x080A91C4
	push {r4, r5, r6, r7, lr}
	movs r4, #0
	ldr r7, _080A9234 @ =gCurTask
	ldr r0, [r7]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r5, r0
	adds r0, r6, #0
	bl sub_80A9A44
	cmp r0, #1
	bne _080A91E0
	movs r4, #1
_080A91E0:
	adds r0, r6, #0
	bl sub_80A9A74
	cmp r0, #1
	bne _080A91F0
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
_080A91F0:
	cmp r4, #2
	bne _080A9250
	ldr r1, _080A9238 @ =0x0300001C
	adds r0, r5, r1
	ldr r2, _080A923C @ =gUnknown_080D9FE4
	ldrh r1, [r2, #8]
	movs r4, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #0xa]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	bl UpdateSpriteAnimation
	ldr r1, _080A9240 @ =0x03000044
	adds r0, r5, r1
	ldr r2, _080A9244 @ =gUnknown_080DA00C
	ldrh r1, [r2, #8]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #0xa]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	bl UpdateSpriteAnimation
	strh r4, [r6, #2]
	ldr r0, _080A9248 @ =0x0000029E
	bl m4aSongNumStart
	ldr r1, [r7]
	ldr r0, _080A924C @ =sub_80A925C
	str r0, [r1, #8]
	b _080A9256
	.align 2, 0
_080A9234: .4byte gCurTask
_080A9238: .4byte 0x0300001C
_080A923C: .4byte gUnknown_080D9FE4
_080A9240: .4byte 0x03000044
_080A9244: .4byte gUnknown_080DA00C
_080A9248: .4byte 0x0000029E
_080A924C: .4byte sub_80A925C
_080A9250:
	adds r0, r6, #0
	bl sub_80A9B24
_080A9256:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80A925C
sub_80A925C: @ 0x080A925C
	push {r4, r5, r6, lr}
	ldr r6, _080A92BC @ =gCurTask
	ldr r0, [r6]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	ldrh r0, [r4, #2]
	adds r0, #1
	strh r0, [r4, #2]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0xf0
	bls _080A92D4
	adds r0, r4, #0
	bl sub_80A9AA4
	cmp r0, #1
	bne _080A92D4
	ldr r1, _080A92C0 @ =0x0300001C
	adds r0, r5, r1
	ldr r2, _080A92C4 @ =gUnknown_080D9FE4
	ldrh r1, [r2, #0x10]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #0x12]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	bl UpdateSpriteAnimation
	ldr r1, _080A92C8 @ =0x03000044
	adds r0, r5, r1
	ldr r2, _080A92CC @ =gUnknown_080DA00C
	ldrh r1, [r2, #0x10]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #0x12]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	bl UpdateSpriteAnimation
	movs r0, #0
	strh r0, [r4, #2]
	ldr r1, [r6]
	ldr r0, _080A92D0 @ =sub_80A92E0
	str r0, [r1, #8]
	b _080A92DA
	.align 2, 0
_080A92BC: .4byte gCurTask
_080A92C0: .4byte 0x0300001C
_080A92C4: .4byte gUnknown_080D9FE4
_080A92C8: .4byte 0x03000044
_080A92CC: .4byte gUnknown_080DA00C
_080A92D0: .4byte sub_80A92E0
_080A92D4:
	adds r0, r4, #0
	bl sub_80A9B24
_080A92DA:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_80A92E0
sub_80A92E0: @ 0x080A92E0
	push {r4, r5, r6, lr}
	ldr r6, _080A933C @ =gCurTask
	ldr r0, [r6]
	ldrh r5, [r0, #6]
	movs r4, #0xc0
	lsls r4, r4, #0x12
	adds r4, r5, r4
	adds r0, r4, #0
	bl sub_80A9B24
	ldrh r0, [r4, #2]
	adds r0, #1
	strh r0, [r4, #2]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0xb4
	bls _080A9336
	ldr r1, _080A9340 @ =0x0300001C
	adds r0, r5, r1
	ldr r2, _080A9344 @ =gUnknown_080D9FE4
	ldrh r1, [r2, #0x18]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #0x1a]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	bl UpdateSpriteAnimation
	ldr r1, _080A9348 @ =0x03000044
	adds r0, r5, r1
	ldr r2, _080A934C @ =gUnknown_080DA00C
	ldrh r1, [r2, #0x18]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #0x1a]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	bl UpdateSpriteAnimation
	ldr r1, [r6]
	ldr r0, _080A9350 @ =sub_80A9354
	str r0, [r1, #8]
_080A9336:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A933C: .4byte gCurTask
_080A9340: .4byte 0x0300001C
_080A9344: .4byte gUnknown_080D9FE4
_080A9348: .4byte 0x03000044
_080A934C: .4byte gUnknown_080DA00C
_080A9350: .4byte sub_80A9354

	thumb_func_start sub_80A9354
sub_80A9354: @ 0x080A9354
	push {r4, r5, r6, r7, lr}
	ldr r7, _080A93B0 @ =gCurTask
	ldr r0, [r7]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r4, r0
	adds r0, r6, #0
	bl sub_80A9B24
	adds r5, r0, #0
	cmp r5, #0
	bne _080A93A8
	ldr r1, _080A93B4 @ =0x0300001C
	adds r0, r4, r1
	ldr r1, _080A93B8 @ =gUnknown_080D9FE4
	ldrh r2, [r1, #0x20]
	strh r2, [r0, #0xc]
	adds r1, #0x22
	ldrb r1, [r1]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	bl UpdateSpriteAnimation
	ldr r1, _080A93BC @ =0x03000044
	adds r0, r4, r1
	ldr r1, _080A93C0 @ =gUnknown_080DA00C
	ldrh r2, [r1, #0x20]
	strh r2, [r0, #0xc]
	adds r1, #0x22
	ldrb r1, [r1]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	bl UpdateSpriteAnimation
	strh r5, [r6, #2]
	ldr r1, [r7]
	ldr r0, _080A93C4 @ =sub_80A99D0
	str r0, [r1, #8]
_080A93A8:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A93B0: .4byte gCurTask
_080A93B4: .4byte 0x0300001C
_080A93B8: .4byte gUnknown_080D9FE4
_080A93BC: .4byte 0x03000044
_080A93C0: .4byte gUnknown_080DA00C
_080A93C4: .4byte sub_80A99D0

	thumb_func_start sub_80A93C8
sub_80A93C8: @ 0x080A93C8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	ldr r4, _080A9400 @ =0xFFFFFBF8
	add sp, r4
	ldr r0, _080A9404 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldrb r0, [r4]
	cmp r0, #0
	beq _080A9410
	ldr r0, _080A9408 @ =gUnknown_08712E34
	mov r1, sp
	movs r2, #0x80
	bl CpuFastSet
	ldr r0, _080A940C @ =gUnknown_0871A7D8
	add r1, sp, #0x200
	movs r2, #0x80
	bl CpuFastSet
	b _080A9424
	.align 2, 0
_080A9400: .4byte 0xFFFFFBF8
_080A9404: .4byte gCurTask
_080A9408: .4byte gUnknown_08712E34
_080A940C: .4byte gUnknown_0871A7D8
_080A9410:
	ldr r0, _080A94D8 @ =gUnknown_0872217C
	mov r1, sp
	movs r2, #0x80
	bl CpuFastSet
	ldr r0, _080A94DC @ =gUnknown_0872A018
	add r1, sp, #0x200
	movs r2, #0x80
	bl CpuFastSet
_080A9424:
	movs r7, #0
	movs r0, #0x81
	lsls r0, r0, #2
	adds r0, r4, r0
	movs r1, #0x80
	lsls r1, r1, #3
	add r1, sp
	str r0, [r1]
	movs r2, #0x80
	lsls r2, r2, #2
	add r2, sp
	ldr r6, _080A94E0 @ =0x00000404
	add r6, sp
	str r2, [r6]
	movs r0, #0x1f
	mov ip, r0
	movs r1, #0x1f
	mov r8, r1
	movs r2, #0x82
	lsls r2, r2, #2
	adds r2, r2, r4
	mov sl, r2
	movs r6, #0x83
	lsls r6, r6, #2
	adds r6, r6, r4
	mov sb, r6
_080A9458:
	lsls r2, r7, #1
	adds r3, r2, r7
	lsls r3, r3, #2
	movs r0, #0x80
	lsls r0, r0, #3
	add r0, sp
	ldr r0, [r0]
	adds r6, r0, r3
	ldr r1, _080A94E0 @ =0x00000404
	add r1, sp
	ldr r1, [r1]
	adds r5, r1, r2
	ldrh r0, [r5]
	mov r1, r8
	ands r1, r0
	mov r0, sp
	adds r4, r0, r2
	ldrh r2, [r4]
	mov r0, r8
	ands r0, r2
	subs r1, r1, r0
	lsls r1, r1, #4
	str r1, [r6]
	mov r1, sl
	adds r2, r1, r3
	ldrh r1, [r5]
	lsrs r1, r1, #5
	mov r6, ip
	ands r1, r6
	ldrh r0, [r4]
	lsrs r0, r0, #5
	ands r0, r6
	subs r1, r1, r0
	lsls r1, r1, #4
	str r1, [r2]
	add r3, sb
	ldrh r1, [r5]
	lsrs r1, r1, #0xa
	ands r1, r6
	ldrh r0, [r4]
	lsrs r0, r0, #0xa
	ands r0, r6
	subs r1, r1, r0
	lsls r1, r1, #4
	str r1, [r3]
	adds r0, r7, #1
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	cmp r7, #0xff
	bls _080A9458
	ldr r1, _080A94E4 @ =gCurTask
	ldr r0, [r1]
	ldr r2, _080A94E8 @ =sub_80A94EC
	str r2, [r0, #8]
	movs r3, #0x81
	lsls r3, r3, #3
	add sp, r3
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A94D8: .4byte gUnknown_0872217C
_080A94DC: .4byte gUnknown_0872A018
_080A94E0: .4byte 0x00000404
_080A94E4: .4byte gCurTask
_080A94E8: .4byte sub_80A94EC

	thumb_func_start sub_80A94EC
sub_80A94EC: @ 0x080A94EC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	ldr r4, _080A9524 @ =0xFFFFFBFC
	add sp, r4
	ldr r0, _080A9528 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r7, r1, r0
	ldrb r0, [r7]
	cmp r0, #0
	beq _080A9534
	ldr r0, _080A952C @ =gUnknown_08712E34
	mov r1, sp
	movs r2, #0x80
	bl CpuFastSet
	ldr r0, _080A9530 @ =gUnknown_0871A7D8
	add r1, sp, #0x200
	movs r2, #0x80
	bl CpuFastSet
	b _080A9548
	.align 2, 0
_080A9524: .4byte 0xFFFFFBFC
_080A9528: .4byte gCurTask
_080A952C: .4byte gUnknown_08712E34
_080A9530: .4byte gUnknown_0871A7D8
_080A9534:
	ldr r0, _080A9584 @ =gUnknown_0872217C
	mov r1, sp
	movs r2, #0x80
	bl CpuFastSet
	ldr r0, _080A9588 @ =gUnknown_0872A018
	add r1, sp, #0x200
	movs r2, #0x80
	bl CpuFastSet
_080A9548:
	ldrh r0, [r7, #2]
	adds r0, #1
	strh r0, [r7, #2]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xa
	bgt _080A9558
	b _080A9664
_080A9558:
	ldrb r0, [r7, #1]
	cmp r0, #0x10
	bne _080A95A4
	ldr r1, _080A958C @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _080A9590 @ =gBackgroundsCopyQueueCursor
	ldr r0, _080A9594 @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _080A9598 @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _080A959C @ =gVramGraphicsCopyCursor
	ldr r0, _080A95A0 @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldrb r0, [r7]
	bl sub_80ABD44
	b _080A9664
	.align 2, 0
_080A9584: .4byte gUnknown_0872217C
_080A9588: .4byte gUnknown_0872A018
_080A958C: .4byte 0x0000FFFF
_080A9590: .4byte gBackgroundsCopyQueueCursor
_080A9594: .4byte gBackgroundsCopyQueueIndex
_080A9598: .4byte gUnknown_03006840
_080A959C: .4byte gVramGraphicsCopyCursor
_080A95A0: .4byte gVramGraphicsCopyQueueIndex
_080A95A4:
	movs r0, #0
	mov r8, r0
	adds r1, r7, #4
	mov sl, r1
	movs r6, #0x80
	lsls r6, r6, #3
	add r6, sp
	movs r2, #0x1f
	mov sb, r2
_080A95B6:
	adds r0, r6, #0
	movs r1, #0
	movs r2, #3
	bl memset
	mov r0, r8
	lsls r5, r0, #1
	mov r1, sl
	adds r4, r1, r5
	ldrh r0, [r4]
	movs r1, #0x1f
	ands r1, r0
	lsls r1, r1, #8
	mov r2, r8
	adds r3, r5, r2
	lsls r3, r3, #2
	movs r2, #0x81
	lsls r2, r2, #2
	adds r0, r7, r2
	adds r0, r0, r3
	ldrb r2, [r7, #1]
	ldr r0, [r0]
	muls r0, r2, r0
	adds r1, r1, r0
	asrs r1, r1, #8
	strb r1, [r6]
	ldrh r0, [r4]
	lsrs r0, r0, #5
	mov r1, sb
	ands r0, r1
	lsls r0, r0, #8
	movs r2, #0x82
	lsls r2, r2, #2
	adds r1, r7, r2
	adds r1, r1, r3
	ldrb r2, [r7, #1]
	ldr r1, [r1]
	muls r1, r2, r1
	adds r0, r0, r1
	asrs r0, r0, #8
	strb r0, [r6, #1]
	ldrh r0, [r4]
	lsrs r0, r0, #0xa
	mov r1, sb
	ands r0, r1
	lsls r0, r0, #8
	movs r2, #0x83
	lsls r2, r2, #2
	adds r1, r7, r2
	adds r1, r1, r3
	ldrb r2, [r7, #1]
	ldr r1, [r1]
	muls r1, r2, r1
	adds r0, r0, r1
	asrs r0, r0, #8
	strb r0, [r6, #2]
	ldrb r0, [r6]
	ldrb r1, [r6, #1]
	lsls r1, r1, #5
	orrs r0, r1
	ldrb r1, [r6, #2]
	lsls r1, r1, #0xa
	orrs r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl sub_80C4C0C
	ldr r1, _080A9678 @ =gBgPalette
	adds r5, r5, r1
	strh r0, [r5]
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r8, r0
	cmp r0, #0xff
	bls _080A95B6
	ldr r2, _080A967C @ =gFlags
	ldr r0, [r2]
	movs r1, #1
	orrs r0, r1
	str r0, [r2]
	movs r0, #0
	strh r0, [r7, #2]
	ldrb r0, [r7, #1]
	adds r0, #1
	strb r0, [r7, #1]
_080A9664:
	ldr r3, _080A9680 @ =0x00000404
	add sp, r3
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A9678: .4byte gBgPalette
_080A967C: .4byte gFlags
_080A9680: .4byte 0x00000404

	thumb_func_start sub_80A9684
sub_80A9684: @ 0x080A9684
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	ldr r0, _080A977C @ =gCurTask
	ldr r0, [r0]
	ldrh r0, [r0, #6]
	mov r8, r0
	movs r0, #0xc0
	lsls r0, r0, #0x12
	add r8, r0
	ldr r5, _080A9780 @ =gStageData
	movs r0, #0
	strb r0, [r5, #6]
	movs r0, #2
	strb r0, [r5, #3]
	ldr r6, _080A9784 @ =gUnknown_080DA034
	mov r0, r8
	ldrb r1, [r0, #1]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r1, r6, #2
	adds r0, r0, r1
	ldrh r0, [r0]
	strb r0, [r5, #0xa]
	mov r0, r8
	ldrb r1, [r0, #1]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r6
	ldrh r0, [r0]
	strh r0, [r5, #0xe]
	mov r0, r8
	ldrb r1, [r0, #1]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r6
	ldrh r0, [r0]
	movs r1, #0xa
	bl __udivsi3
	strb r0, [r5, #9]
	movs r4, #1
	movs r0, #1
	strb r0, [r5, #0xb]
	bl sub_800214C
	ldr r1, _080A9788 @ =gPlayers
	mov ip, r1
	movs r0, #0x2b
	add r0, ip
	mov sb, r0
	ldrb r0, [r0]
	movs r2, #4
	rsbs r2, r2, #0
	adds r1, r2, #0
	ands r1, r0
	orrs r1, r4
	mov r7, ip
	adds r7, #0x2a
	ldrb r4, [r7]
	movs r3, #0x10
	rsbs r3, r3, #0
	adds r0, r3, #0
	ands r0, r4
	strb r0, [r7]
	movs r4, #0x1d
	rsbs r4, r4, #0
	ands r1, r4
	movs r0, #0x10
	orrs r1, r0
	mov r0, sb
	strb r1, [r0]
	ldr r7, _080A978C @ =0x0000017B
	add r7, ip
	ldrb r0, [r7]
	ands r2, r0
	strb r2, [r7]
	mov r0, r8
	ldrb r1, [r0, #1]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r6, #4
	adds r0, r0, r6
	ldrb r1, [r0]
	movs r6, #0xbd
	lsls r6, r6, #1
	add r6, ip
	movs r0, #0xf
	ands r0, r1
	ldrb r1, [r6]
	ands r3, r1
	orrs r3, r0
	strb r3, [r6]
	ands r2, r4
	movs r0, #8
	orrs r2, r0
	strb r2, [r7]
	ldr r2, _080A9790 @ =0x000002CB
	add r2, ip
	ldrb r1, [r2]
	adds r0, r4, #0
	ands r0, r1
	strb r0, [r2]
	ldr r1, _080A9794 @ =0x0000041B
	add r1, ip
	ldrb r0, [r1]
	ands r4, r0
	strb r4, [r1]
	movs r1, #0xe
	ldrsh r0, [r5, r1]
	movs r1, #1
	bl sub_8002210
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A977C: .4byte gCurTask
_080A9780: .4byte gStageData
_080A9784: .4byte gUnknown_080DA034
_080A9788: .4byte gPlayers
_080A978C: .4byte 0x0000017B
_080A9790: .4byte 0x000002CB
_080A9794: .4byte 0x0000041B

	thumb_func_start sub_80A9798
sub_80A9798: @ 0x080A9798
	push {r4, r5, r6, lr}
	ldr r6, _080A97FC @ =gCurTask
	ldr r0, [r6]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldrb r0, [r4]
	ldr r5, _080A9800 @ =gBldRegs
	cmp r0, #0
	bne _080A97E2
	ldr r2, _080A9804 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #7
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080A9808 @ =gWinRegs
	movs r0, #0xf0
	strh r0, [r1, #2]
	movs r0, #0xa0
	strh r0, [r1, #6]
	subs r3, #1
	strh r3, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	orrs r0, r2
	strh r0, [r1, #0xa]
	strh r3, [r5]
	movs r0, #0x10
	strh r0, [r5, #4]
	movs r0, #1
	strb r0, [r4]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r4, #6]
_080A97E2:
	ldrh r0, [r5, #4]
	cmp r0, #0
	beq _080A9810
	ldrh r0, [r4, #6]
	lsrs r0, r0, #8
	strh r0, [r5, #4]
	ldr r1, _080A980C @ =0xFFFFFF00
	adds r0, r1, #0
	ldrh r3, [r4, #6]
	adds r0, r0, r3
	strh r0, [r4, #6]
	b _080A9818
	.align 2, 0
_080A97FC: .4byte gCurTask
_080A9800: .4byte gBldRegs
_080A9804: .4byte gDispCnt
_080A9808: .4byte gWinRegs
_080A980C: .4byte 0xFFFFFF00
_080A9810:
	strh r0, [r5, #4]
	ldr r1, [r6]
	ldr r0, _080A9820 @ =sub_80A9B74
	str r0, [r1, #8]
_080A9818:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A9820: .4byte sub_80A9B74

	thumb_func_start sub_80A9824
sub_80A9824: @ 0x080A9824
	push {r4, r5, r6, r7, lr}
	ldr r0, _080A9884 @ =gCurTask
	mov ip, r0
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r1, r0
	ldrb r0, [r6]
	ldr r7, _080A9888 @ =gBldRegs
	cmp r0, #0
	beq _080A986A
	ldr r2, _080A988C @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #7
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080A9890 @ =gWinRegs
	movs r5, #0
	movs r0, #0xf0
	strh r0, [r1, #2]
	movs r0, #0xa0
	strh r0, [r1, #6]
	ldr r4, _080A9894 @ =0x00003FFF
	strh r4, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	movs r3, #0
	orrs r0, r2
	strh r0, [r1, #0xa]
	strh r4, [r7]
	strb r3, [r6]
	strh r5, [r6, #6]
_080A986A:
	ldrh r0, [r7, #4]
	cmp r0, #0xf
	bhi _080A9898
	ldrh r0, [r6, #6]
	lsrs r0, r0, #8
	strh r0, [r7, #4]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r1, #0
	ldrh r3, [r6, #6]
	adds r0, r0, r3
	strh r0, [r6, #6]
	b _080A98A0
	.align 2, 0
_080A9884: .4byte gCurTask
_080A9888: .4byte gBldRegs
_080A988C: .4byte gDispCnt
_080A9890: .4byte gWinRegs
_080A9894: .4byte 0x00003FFF
_080A9898:
	mov r0, ip
	ldr r1, [r0]
	ldr r0, _080A98A8 @ =sub_80A9BA8
	str r0, [r1, #8]
_080A98A0:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A98A8: .4byte sub_80A9BA8

	thumb_func_start sub_80A98AC
sub_80A98AC: @ 0x080A98AC
	bx lr
	.align 2, 0

	thumb_func_start sub_80A98B0
sub_80A98B0: @ 0x080A98B0
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _080A98F0 @ =sub_80A93C8
	ldr r1, _080A98F4 @ =0x00000E04
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r3, _080A98F8 @ =sub_80A9B6C
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	ldrh r2, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r0, r2, r0
	movs r1, #0
	strb r4, [r0]
	strb r1, [r0, #1]
	strh r1, [r0, #2]
	cmp r4, #0
	beq _080A9904
	ldr r0, _080A98FC @ =gUnknown_08712E34
	ldr r3, _080A9900 @ =0x03000004
	adds r1, r2, r3
	movs r2, #0x80
	bl CpuFastSet
	b _080A9910
	.align 2, 0
_080A98F0: .4byte sub_80A93C8
_080A98F4: .4byte 0x00000E04
_080A98F8: .4byte sub_80A9B6C
_080A98FC: .4byte gUnknown_08712E34
_080A9900: .4byte 0x03000004
_080A9904:
	ldr r0, _080A9918 @ =gUnknown_0872217C
	ldr r3, _080A991C @ =0x03000004
	adds r1, r2, r3
	movs r2, #0x80
	bl CpuFastSet
_080A9910:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A9918: .4byte gUnknown_0872217C
_080A991C: .4byte 0x03000004

	thumb_func_start sub_80A9920
sub_80A9920: @ 0x080A9920
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _080A995C @ =sub_80A9684
	movs r2, #0x84
	lsls r2, r2, #6
	ldr r1, _080A9960 @ =sub_80A9B70
	str r1, [sp]
	movs r1, #0x48
	movs r3, #0
	bl TaskCreate
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	movs r2, #0
	strb r4, [r0, #2]
	subs r4, #0xc
	strb r4, [r0, #1]
	movs r1, #0
	strh r2, [r0, #4]
	strb r1, [r0]
	strh r2, [r0, #6]
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A995C: .4byte sub_80A9684
_080A9960: .4byte sub_80A9B70

	thumb_func_start sub_80A9964
sub_80A9964: @ 0x080A9964
	bx lr
	.align 2, 0

	thumb_func_start sub_80A9968
sub_80A9968: @ 0x080A9968
	push {r4, lr}
	ldr r4, _080A9998 @ =gCurTask
	ldr r0, [r4]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r1, r1, r0
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0xb3
	bls _080A9990
	movs r0, #0
	bl sub_80A98B0
	ldr r0, [r4]
	bl TaskDestroy
_080A9990:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A9998: .4byte gCurTask

	thumb_func_start sub_80A999C
sub_80A999C: @ 0x080A999C
	push {r4, lr}
	ldr r4, _080A99C4 @ =gCurTask
	ldr r0, [r4]
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	bl sub_80A99C8
	cmp r0, #1
	bne _080A99BE
	movs r0, #0
	bl sub_80ABD44
	ldr r0, [r4]
	bl TaskDestroy
_080A99BE:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A99C4: .4byte gCurTask

	thumb_func_start sub_80A99C8
sub_80A99C8: @ 0x080A99C8
	movs r0, #1
	bx lr

	thumb_func_start sub_80A99CC
sub_80A99CC: @ 0x080A99CC
	bx lr
	.align 2, 0

	thumb_func_start sub_80A99D0
sub_80A99D0: @ 0x080A99D0
	push {r4, r5, lr}
	ldr r5, _080A9A14 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_80A9B24
	adds r0, r4, #0
	bl sub_80A9AD8
	cmp r0, #1
	bne _080A9A0C
	ldrh r0, [r4, #2]
	cmp r0, #0x77
	bhi _080A99F8
	adds r0, #1
	strh r0, [r4, #2]
_080A99F8:
	ldrh r0, [r4, #2]
	cmp r0, #0x78
	bne _080A9A0C
	ldr r1, [r4, #0x18]
	movs r0, #0
	bl sub_80AA270
	ldr r1, [r5]
	ldr r0, _080A9A18 @ =sub_80A9A1C
	str r0, [r1, #8]
_080A9A0C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A9A14: .4byte gCurTask
_080A9A18: .4byte sub_80A9A1C

	thumb_func_start sub_80A9A1C
sub_80A9A1C: @ 0x080A9A1C
	push {r4, lr}
	ldr r4, _080A9A40 @ =gCurTask
	ldr r0, [r4]
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	bl sub_80A9AD8
	cmp r0, #1
	bne _080A9A38
	ldr r0, [r4]
	bl TaskDestroy
_080A9A38:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A9A40: .4byte gCurTask

	thumb_func_start sub_80A9A44
sub_80A9A44: @ 0x080A9A44
	push {lr}
	adds r1, r0, #0
	ldr r0, [r1, #0x10]
	ldr r2, _080A9A68 @ =0x000077FF
	cmp r0, r2
	bgt _080A9A5C
	movs r3, #0xc0
	lsls r3, r3, #1
	adds r0, r0, r3
	str r0, [r1, #0x10]
	cmp r0, r2
	ble _080A9A6C
_080A9A5C:
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r1, #0x10]
	movs r0, #1
	b _080A9A6E
	.align 2, 0
_080A9A68: .4byte 0x000077FF
_080A9A6C:
	movs r0, #0
_080A9A6E:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80A9A74
sub_80A9A74: @ 0x080A9A74
	push {lr}
	adds r1, r0, #0
	ldr r0, [r1, #8]
	ldr r2, _080A9A98 @ =0x000121FF
	cmp r0, r2
	bgt _080A9A8C
	movs r3, #0xa0
	lsls r3, r3, #2
	adds r0, r0, r3
	str r0, [r1, #8]
	cmp r0, r2
	ble _080A9A9C
_080A9A8C:
	movs r0, #0x91
	lsls r0, r0, #9
	str r0, [r1, #8]
	movs r0, #1
	b _080A9A9E
	.align 2, 0
_080A9A98: .4byte 0x000121FF
_080A9A9C:
	movs r0, #0
_080A9A9E:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80A9AA4
sub_80A9AA4: @ 0x080A9AA4
	push {lr}
	adds r1, r0, #0
	ldr r0, [r1, #8]
	cmp r0, #0
	ble _080A9AC8
	ldr r2, _080A9AC4 @ =0xFFFFFF00
	adds r0, r0, r2
	str r0, [r1, #8]
	movs r2, #0x8f
	lsls r2, r2, #8
	cmp r0, r2
	bgt _080A9AD2
	str r2, [r1, #8]
	movs r0, #1
	b _080A9AD4
	.align 2, 0
_080A9AC4: .4byte 0xFFFFFF00
_080A9AC8:
	movs r0, #0x8f
	lsls r0, r0, #8
	str r0, [r1, #8]
	movs r0, #1
	b _080A9AD4
_080A9AD2:
	movs r0, #0
_080A9AD4:
	pop {r1}
	bx r1

	thumb_func_start sub_80A9AD8
sub_80A9AD8: @ 0x080A9AD8
	push {r4, lr}
	adds r1, r0, #0
	movs r2, #0
	ldr r0, [r1, #8]
	ldr r3, _080A9B18 @ =0x000121FF
	cmp r0, r3
	bgt _080A9AF2
	movs r4, #0xa0
	lsls r4, r4, #1
	adds r0, r0, r4
	str r0, [r1, #8]
	cmp r0, r3
	ble _080A9AF4
_080A9AF2:
	movs r2, #1
_080A9AF4:
	ldr r0, [r1, #0x10]
	ldr r3, _080A9B18 @ =0x000121FF
	cmp r0, r3
	bgt _080A9B0A
	movs r4, #0xa0
	lsls r4, r4, #1
	adds r0, r0, r4
	str r0, [r1, #0x10]
	ldr r0, [r1, #8]
	cmp r0, r3
	ble _080A9B10
_080A9B0A:
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
_080A9B10:
	cmp r2, #2
	beq _080A9B1C
	movs r0, #0
	b _080A9B1E
	.align 2, 0
_080A9B18: .4byte 0x000121FF
_080A9B1C:
	movs r0, #1
_080A9B1E:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_80A9B24
sub_80A9B24: @ 0x080A9B24
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x1c
	ldr r0, [r5, #8]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0xc]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	adds r4, #0x28
	ldr r0, [r5, #0x10]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x14]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r5, r0, #0
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r5, #0
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_80A9B68
sub_80A9B68: @ 0x080A9B68
	bx lr
	.align 2, 0

	thumb_func_start sub_80A9B6C
sub_80A9B6C: @ 0x080A9B6C
	bx lr
	.align 2, 0

	thumb_func_start sub_80A9B70
sub_80A9B70: @ 0x080A9B70
	bx lr
	.align 2, 0

	thumb_func_start sub_80A9B74
sub_80A9B74: @ 0x080A9B74
	push {lr}
	ldr r0, _080A9B9C @ =gCurTask
	ldr r3, [r0]
	ldrh r1, [r3, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r2, r1, r0
	ldrh r0, [r2, #4]
	adds r0, #1
	strh r0, [r2, #4]
	lsls r0, r0, #0x10
	ldr r1, _080A9BA0 @ =0x02570000
	cmp r0, r1
	ble _080A9B98
	movs r0, #0
	strh r0, [r2, #4]
	ldr r0, _080A9BA4 @ =sub_80A9824
	str r0, [r3, #8]
_080A9B98:
	pop {r0}
	bx r0
	.align 2, 0
_080A9B9C: .4byte gCurTask
_080A9BA0: .4byte 0x02570000
_080A9BA4: .4byte sub_80A9824

	thumb_func_start sub_80A9BA8
sub_80A9BA8: @ 0x080A9BA8
	push {r4, lr}
	ldr r4, _080A9BD4 @ =gCurTask
	ldr r0, [r4]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r1, r1, r0
	ldrb r0, [r1, #2]
	adds r2, r0, #1
	strb r2, [r1, #2]
	subs r0, #0xa
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bl sub_80A872C
	ldr r0, [r4]
	bl TaskDestroy
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A9BD4: .4byte gCurTask

	thumb_func_start sub_80A9BD8
sub_80A9BD8: @ 0x080A9BD8
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r6, r0, #0
	mov sb, r1
	mov r8, r2
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	adds r5, r3, #0
	ldr r0, _080A9C78 @ =sub_80AB818
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r1, _080A9C7C @ =sub_80AB814
	str r1, [sp]
	movs r1, #0x40
	movs r3, #0
	bl TaskCreate
	ldrh r2, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r2, r0
	movs r3, #0
	strh r3, [r4, #6]
	movs r0, #1
	ands r0, r5
	movs r7, #1
	rsbs r7, r7, #0
	adds r1, r7, #0
	cmp r0, #0
	beq _080A9C1C
	movs r1, #1
_080A9C1C:
	strb r1, [r4, #5]
	strb r5, [r4, #4]
	str r6, [r4, #0xc]
	strh r3, [r4, #8]
	mov r1, sb
	lsls r0, r1, #8
	str r0, [r4, #0x10]
	mov r7, r8
	lsls r0, r7, #8
	str r0, [r4, #0x14]
	ldr r0, [sp, #0x20]
	str r0, [r4]
	ldr r0, _080A9C80 @ =0x03000018
	adds r2, r2, r0
	str r6, [r2]
	ldr r0, [r4, #0xc]
	adds r0, #0x80
	str r0, [r4, #0xc]
	ldr r1, _080A9C84 @ =gUnknown_080DA284
	ldrh r0, [r1]
	strh r0, [r2, #0xc]
	ldrb r0, [r1, #2]
	strb r0, [r2, #0x1a]
	movs r0, #0xff
	strb r0, [r2, #0x1b]
	strh r3, [r2, #0x10]
	strh r3, [r2, #0x12]
	movs r0, #0x80
	lsls r0, r0, #2
	strh r0, [r2, #0x14]
	strh r3, [r2, #0xe]
	strh r3, [r2, #0x16]
	movs r0, #0x10
	strb r0, [r2, #0x1c]
	movs r0, #0
	strb r0, [r2, #0x1f]
	str r3, [r2, #8]
	movs r0, #5
	ldrsb r0, [r4, r0]
	cmp r0, #1
	bne _080A9C88
	movs r0, #0x80
	lsls r0, r0, #3
	str r0, [r2, #8]
	b _080A9C8A
	.align 2, 0
_080A9C78: .4byte sub_80AB818
_080A9C7C: .4byte sub_80AB814
_080A9C80: .4byte 0x03000018
_080A9C84: .4byte gUnknown_080DA284
_080A9C88:
	str r3, [r2, #8]
_080A9C8A:
	adds r0, r2, #0
	bl UpdateSpriteAnimation
	ldr r0, [r4, #0xc]
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_80A9CA0
sub_80A9CA0: @ 0x080A9CA0
	push {r4, r5, r6, r7, lr}
	adds r2, r0, #0
	movs r7, #0
	adds r4, r2, #0
	adds r4, #0x18
	ldr r3, [r2, #0x10]
	asrs r5, r3, #8
	ldr r1, _080A9CE4 @ =gUnknown_080DA28C
	ldrb r0, [r2, #4]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrb r0, [r0]
	adds r6, r1, #0
	cmp r5, r0
	bge _080A9CE8
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r3, r1
	str r0, [r2, #0x10]
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	str r0, [r4, #8]
	ldr r1, [r2, #0x10]
	asrs r1, r1, #8
	ldrb r0, [r2, #4]
	lsls r0, r0, #1
	adds r0, r0, r6
	ldrb r0, [r0]
	cmp r1, r0
	blt _080A9D1E
	b _080A9D0A
	.align 2, 0
_080A9CE4: .4byte gUnknown_080DA28C
_080A9CE8:
	cmp r5, r0
	ble _080A9D18
	ldr r1, _080A9D10 @ =0xFFFFFF00
	adds r0, r3, r1
	str r0, [r2, #0x10]
	ldr r0, [r4, #8]
	ldr r1, _080A9D14 @ =0xFFFFFBFF
	ands r0, r1
	str r0, [r4, #8]
	ldr r1, [r2, #0x10]
	asrs r1, r1, #8
	ldrb r0, [r2, #4]
	lsls r0, r0, #1
	adds r0, r0, r6
	ldrb r0, [r0]
	cmp r1, r0
	bgt _080A9D1E
_080A9D0A:
	lsls r0, r0, #8
	str r0, [r2, #0x10]
	b _080A9D1E
	.align 2, 0
_080A9D10: .4byte 0xFFFFFF00
_080A9D14: .4byte 0xFFFFFBFF
_080A9D18:
	lsls r0, r0, #8
	str r0, [r2, #0x10]
	movs r7, #1
_080A9D1E:
	ldr r3, [r2, #0x14]
	asrs r4, r3, #8
	ldrb r0, [r2, #4]
	lsls r0, r0, #1
	adds r1, r6, #1
	adds r0, r0, r1
	ldrb r1, [r0]
	cmp r4, r1
	bge _080A9D40
	movs r4, #0x80
	lsls r4, r4, #1
	adds r0, r3, r4
	str r0, [r2, #0x14]
	asrs r0, r0, #8
	cmp r0, r1
	blt _080A9D66
	b _080A9D50
_080A9D40:
	cmp r4, r1
	ble _080A9D5C
	ldr r4, _080A9D58 @ =0xFFFFFF00
	adds r0, r3, r4
	str r0, [r2, #0x14]
	asrs r0, r0, #8
	cmp r0, r1
	bgt _080A9D66
_080A9D50:
	lsls r0, r1, #8
	str r0, [r2, #0x14]
	b _080A9D66
	.align 2, 0
_080A9D58: .4byte 0xFFFFFF00
_080A9D5C:
	lsls r0, r1, #8
	str r0, [r2, #0x14]
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
_080A9D66:
	cmp r7, #2
	beq _080A9D6E
	movs r0, #0
	b _080A9D70
_080A9D6E:
	movs r0, #1
_080A9D70:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80A9D78
sub_80A9D78: @ 0x080A9D78
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x18
	ldr r3, _080A9DA4 @ =gUnknown_080DA28C
	ldrb r1, [r5, #4]
	lsls r0, r1, #1
	adds r0, r0, r3
	ldrb r2, [r0]
	lsls r2, r2, #8
	ldr r0, _080A9DA8 @ =gUnknown_080DA2AA
	adds r1, r1, r0
	ldrb r0, [r1]
	lsls r0, r0, #8
	subs r1, r2, r0
	adds r2, r2, r0
	ldr r0, [r5, #0x10]
	cmp r0, r1
	bgt _080A9DAC
	movs r0, #1
	b _080A9DB2
	.align 2, 0
_080A9DA4: .4byte gUnknown_080DA28C
_080A9DA8: .4byte gUnknown_080DA2AA
_080A9DAC:
	cmp r0, r2
	blt _080A9DB4
	movs r0, #0xff
_080A9DB2:
	strb r0, [r5, #5]
_080A9DB4:
	movs r0, #5
	ldrsb r0, [r5, r0]
	cmp r0, #0
	ble _080A9DC6
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	b _080A9DCC
_080A9DC6:
	ldr r0, [r4, #8]
	ldr r1, _080A9E18 @ =0xFFFFFBFF
	ands r0, r1
_080A9DCC:
	str r0, [r4, #8]
	movs r1, #5
	ldrsb r1, [r5, r1]
	lsls r1, r1, #8
	ldr r0, [r5, #0x10]
	adds r0, r0, r1
	str r0, [r5, #0x10]
	ldrb r0, [r5, #4]
	lsls r0, r0, #1
	adds r1, r3, #1
	adds r0, r0, r1
	ldrb r2, [r0]
	lsls r2, r2, #8
	str r2, [r5, #0x14]
	ldr r4, _080A9E1C @ =gSineTable
	ldrh r3, [r5, #8]
	lsls r0, r3, #0x10
	asrs r0, r0, #0x14
	movs r1, #0xff
	ands r0, r1
	lsls r0, r0, #3
	adds r0, r0, r4
	ldrh r0, [r0]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x16
	lsls r0, r0, #4
	adds r2, r2, r0
	str r2, [r5, #0x14]
	ldr r1, _080A9E20 @ =gUnknown_080DA2B9
	ldrb r0, [r5, #4]
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #4
	adds r3, r3, r0
	strh r3, [r5, #8]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A9E18: .4byte 0xFFFFFBFF
_080A9E1C: .4byte gSineTable
_080A9E20: .4byte gUnknown_080DA2B9

	thumb_func_start sub_80A9E24
sub_80A9E24: @ 0x080A9E24
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	adds r6, r1, #0
	ldr r0, _080A9EA0 @ =sub_80A9EB4
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r1, _080A9EA4 @ =sub_80AB8F8
	str r1, [sp]
	movs r1, #0x40
	movs r3, #0
	bl TaskCreate
	ldrh r0, [r0, #6]
	movs r4, #0xc0
	lsls r4, r4, #0x12
	adds r4, r0, r4
	str r5, [r4]
	movs r3, #0
	strb r3, [r4, #4]
	movs r5, #0
	strh r3, [r4, #6]
	strh r3, [r4, #8]
	str r6, [r4, #0xc]
	ldr r1, _080A9EA8 @ =0xFFFFCE00
	str r1, [r4, #0x10]
	movs r1, #0xf0
	lsls r1, r1, #6
	str r1, [r4, #0x14]
	ldr r1, _080A9EAC @ =0x03000018
	adds r0, r0, r1
	str r6, [r0]
	ldr r1, [r4, #0xc]
	movs r2, #0xa0
	lsls r2, r2, #2
	adds r1, r1, r2
	str r1, [r4, #0xc]
	ldr r2, _080A9EB0 @ =gUnknown_080DA06C
	ldrh r1, [r2]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	strh r3, [r0, #0x10]
	strh r3, [r0, #0x12]
	movs r1, #0x40
	strh r1, [r0, #0x14]
	strh r3, [r0, #0xe]
	strh r3, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	strb r5, [r0, #0x1f]
	str r3, [r0, #8]
	bl UpdateSpriteAnimation
	ldr r0, [r4, #0xc]
	add sp, #4
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_080A9EA0: .4byte sub_80A9EB4
_080A9EA4: .4byte sub_80AB8F8
_080A9EA8: .4byte 0xFFFFCE00
_080A9EAC: .4byte 0x03000018
_080A9EB0: .4byte gUnknown_080DA06C

	thumb_func_start sub_80A9EB4
sub_80A9EB4: @ 0x080A9EB4
	push {r4, r5, r6, r7, lr}
	ldr r7, _080A9F28 @ =gCurTask
	ldr r0, [r7]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r4, r0
	adds r0, r5, #0
	bl sub_80AB8B0
	ldr r0, _080A9F2C @ =0x03000018
	adds r4, r4, r0
	ldr r0, [r5, #0x10]
	asrs r0, r0, #8
	movs r6, #0
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0x14]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	ldrh r0, [r5, #8]
	adds r0, #1
	strh r0, [r5, #8]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x78
	bne _080A9EFA
	ldr r1, [r5]
	movs r0, #0x12
	strb r0, [r1]
_080A9EFA:
	ldrh r0, [r5, #8]
	cmp r0, #0xb3
	bls _080A9F20
	ldr r1, _080A9F30 @ =gUnknown_080DA06C
	ldrh r0, [r1, #8]
	strh r0, [r4, #0xc]
	ldrb r0, [r1, #0xa]
	strb r0, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	strh r6, [r4, #0x10]
	strh r6, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	strh r6, [r5, #8]
	ldr r1, [r7]
	ldr r0, _080A9F34 @ =sub_80A9F38
	str r0, [r1, #8]
_080A9F20:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A9F28: .4byte gCurTask
_080A9F2C: .4byte 0x03000018
_080A9F30: .4byte gUnknown_080DA06C
_080A9F34: .4byte sub_80A9F38

	thumb_func_start sub_80A9F38
sub_80A9F38: @ 0x080A9F38
	push {r4, r5, r6, r7, lr}
	ldr r7, _080A9F9C @ =gCurTask
	ldr r0, [r7]
	ldrh r5, [r0, #6]
	movs r4, #0xc0
	lsls r4, r4, #0x12
	adds r4, r5, r4
	adds r0, r4, #0
	bl sub_80AB8B0
	ldr r0, _080A9FA0 @ =0x03000018
	adds r5, r5, r0
	ldr r0, [r4, #0x10]
	asrs r0, r0, #8
	movs r6, #0
	strh r0, [r5, #0x10]
	ldr r0, [r4, #0x14]
	asrs r0, r0, #8
	strh r0, [r5, #0x12]
	adds r0, r5, #0
	bl UpdateSpriteAnimation
	adds r0, r5, #0
	bl DisplaySprite
	ldrh r0, [r4, #8]
	adds r0, #1
	strh r0, [r4, #8]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x1d
	bls _080A9F96
	ldr r1, _080A9FA4 @ =gUnknown_080DA06C
	ldrh r0, [r1, #0x10]
	strh r0, [r5, #0xc]
	ldrb r0, [r1, #0x12]
	strb r0, [r5, #0x1a]
	movs r0, #0xff
	strb r0, [r5, #0x1b]
	strh r6, [r5, #0x10]
	strh r6, [r5, #0x12]
	adds r0, r5, #0
	bl UpdateSpriteAnimation
	ldr r1, [r7]
	ldr r0, _080A9FA8 @ =sub_80A9FAC
	str r0, [r1, #8]
_080A9F96:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A9F9C: .4byte gCurTask
_080A9FA0: .4byte 0x03000018
_080A9FA4: .4byte gUnknown_080DA06C
_080A9FA8: .4byte sub_80A9FAC

	thumb_func_start sub_80A9FAC
sub_80A9FAC: @ 0x080A9FAC
	push {r4, r5, r6, r7, lr}
	ldr r7, _080AA038 @ =gCurTask
	ldr r0, [r7]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r4, r0
	adds r0, #0x18
	adds r4, r4, r0
	ldr r0, [r6, #0x10]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r6, #0x14]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r5, r0, #0
	adds r0, r4, #0
	bl DisplaySprite
	cmp r5, #1
	beq _080AA064
	ldrb r3, [r6, #4]
	cmp r3, #0
	bne _080AA01A
	ldr r2, _080AA03C @ =gDispCnt
	ldrh r0, [r2]
	movs r4, #0x80
	lsls r4, r4, #6
	adds r1, r4, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r2, _080AA040 @ =gWinRegs
	movs r0, #0xf0
	strh r0, [r2]
	movs r0, #0xa0
	strh r0, [r2, #4]
	ldr r0, _080AA044 @ =0x00003FFF
	strh r0, [r2, #8]
	ldrh r0, [r2, #0xa]
	movs r1, #0x1f
	orrs r0, r1
	strh r0, [r2, #0xa]
	ldr r1, _080AA048 @ =gBldRegs
	ldr r0, _080AA04C @ =0x00003FBF
	strh r0, [r1]
	strh r3, [r1, #4]
	strh r3, [r6, #6]
	movs r0, #1
	strb r0, [r6, #4]
	ldr r0, _080AA050 @ =0x0000029D
	bl m4aSongNumStart
_080AA01A:
	ldr r1, _080AA048 @ =gBldRegs
	ldrh r0, [r1, #4]
	cmp r0, #0xf
	bhi _080AA054
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r2, #0
	ldrh r4, [r6, #6]
	adds r0, r0, r4
	strh r0, [r6, #6]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x18
	strh r0, [r1, #4]
	b _080AA064
	.align 2, 0
_080AA038: .4byte gCurTask
_080AA03C: .4byte gDispCnt
_080AA040: .4byte gWinRegs
_080AA044: .4byte 0x00003FFF
_080AA048: .4byte gBldRegs
_080AA04C: .4byte 0x00003FBF
_080AA050: .4byte 0x0000029D
_080AA054:
	movs r0, #0x10
	strh r0, [r1, #4]
	ldr r1, [r6]
	movs r0, #0x16
	strb r0, [r1]
	ldr r0, [r7]
	bl TaskDestroy
_080AA064:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80AA06C
sub_80AA06C: @ 0x080AA06C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	adds r5, r0, #0
	adds r6, r1, #0
	ldr r0, _080AA1A0 @ =sub_80AB8FC
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r1, _080AA1A4 @ =sub_80AB98C
	str r1, [sp]
	adds r1, r2, #0
	movs r3, #0
	bl TaskCreate
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r7, r4, r0
	str r5, [r7]
	movs r0, #0
	mov sl, r0
	movs r5, #0
	strh r5, [r7, #4]
	ldr r0, _080AA1A8 @ =0xFFFF2E00
	str r0, [r7, #8]
	movs r0, #0xe0
	lsls r0, r0, #5
	str r0, [r7, #0xc]
	ldr r1, _080AA1AC @ =0x030000B0
	adds r0, r4, r1
	str r6, [r0]
	ldr r2, _080AA1B0 @ =gUnknown_080DBA94
	ldr r1, [r2, #0xc]
	lsls r1, r1, #5
	adds r6, r6, r1
	ldrh r1, [r2, #8]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #0xa]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #8]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0xc]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r1, #0xa0
	lsls r1, r1, #1
	mov sb, r1
	mov r1, sb
	strh r1, [r0, #0x14]
	strh r5, [r0, #0xe]
	strh r5, [r0, #0x16]
	movs r1, #0x10
	mov r8, r1
	mov r1, r8
	strb r1, [r0, #0x1c]
	mov r1, sl
	strb r1, [r0, #0x1f]
	str r5, [r0, #8]
	str r2, [sp, #4]
	bl UpdateSpriteAnimation
	ldr r0, _080AA1B4 @ =0x030000D8
	adds r4, r4, r0
	str r6, [r4]
	ldr r2, [sp, #4]
	ldr r0, [r2, #4]
	lsls r0, r0, #5
	adds r6, r6, r0
	ldrh r0, [r2]
	strh r0, [r4, #0xc]
	ldrb r0, [r2, #2]
	strb r0, [r4, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r4, #0x1b]
	ldr r0, [r7, #8]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r7, #0xc]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	mov r1, sb
	strh r1, [r4, #0x14]
	strh r5, [r4, #0xe]
	strh r5, [r4, #0x16]
	mov r0, r8
	strb r0, [r4, #0x1c]
	mov r1, sl
	strb r1, [r4, #0x1f]
	str r5, [r4, #8]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	movs r4, #0
	ldr r3, _080AA1B8 @ =gUnknown_080DA2C8
	movs r0, #0
	mov r8, r0
_080AA13A:
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #3
	adds r0, #0x10
	adds r0, r7, r0
	str r6, [r0]
	lsls r2, r4, #3
	adds r1, r3, #4
	adds r1, r2, r1
	ldr r1, [r1]
	lsls r1, r1, #5
	adds r6, r6, r1
	adds r2, r2, r3
	ldrh r1, [r2]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #8]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0xc]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r5, [r0, #0x14]
	strh r5, [r0, #0xe]
	strh r5, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	mov r1, r8
	strb r1, [r0, #0x1f]
	str r5, [r0, #8]
	str r3, [sp, #8]
	bl UpdateSpriteAnimation
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldr r3, [sp, #8]
	cmp r4, #3
	bls _080AA13A
	adds r0, r6, #0
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080AA1A0: .4byte sub_80AB8FC
_080AA1A4: .4byte sub_80AB98C
_080AA1A8: .4byte 0xFFFF2E00
_080AA1AC: .4byte 0x030000B0
_080AA1B0: .4byte gUnknown_080DBA94
_080AA1B4: .4byte 0x030000D8
_080AA1B8: .4byte gUnknown_080DA2C8

	thumb_func_start sub_80AA1BC
sub_80AA1BC: @ 0x080AA1BC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r6, r0, #0
	movs r7, #0
	movs r5, #0
	adds r4, r6, #0
	adds r4, #0xd8
	movs r0, #0
	mov r8, r0
_080AA1D2:
	ldr r1, [r6, #8]
	asrs r1, r1, #8
	strh r1, [r4, #0x10]
	ldr r0, [r6, #0xc]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r1, r7, r1
	strh r1, [r4, #0x10]
	ldr r0, [r4, #8]
	ldr r3, _080AA26C @ =0xFFFFFBFF
	ands r0, r3
	str r0, [r4, #8]
	mov r0, r8
	strb r0, [r4, #0x1f]
	adds r0, r4, #0
	str r3, [sp]
	bl DisplaySprite
	adds r0, r7, #0
	adds r0, #0x40
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	ldr r3, [sp]
	cmp r5, #2
	bls _080AA1D2
	adds r0, r6, #0
	adds r0, #0xb0
	ldr r2, [r6, #8]
	asrs r2, r2, #8
	movs r4, #0
	strh r2, [r0, #0x10]
	ldr r1, [r6, #0xc]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	adds r2, r7, r2
	strh r2, [r0, #0x10]
	ldr r1, [r0, #8]
	ands r1, r3
	str r1, [r0, #8]
	strb r4, [r0, #0x1f]
	bl DisplaySprite
	movs r5, #0
_080AA22E:
	lsls r4, r5, #2
	adds r4, r4, r5
	lsls r4, r4, #3
	adds r4, #0x10
	adds r4, r6, r4
	ldr r1, [r6, #8]
	asrs r1, r1, #8
	strh r1, [r4, #0x10]
	ldr r0, [r6, #0xc]
	asrs r0, r0, #8
	adds r1, #0x3a
	strh r1, [r4, #0x10]
	adds r0, #0x28
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #3
	bls _080AA22E
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AA26C: .4byte 0xFFFFFBFF

	thumb_func_start sub_80AA270
sub_80AA270: @ 0x080AA270
	push {r4, r5, r6, lr}
	mov r6, sb
	mov r5, r8
	push {r5, r6}
	sub sp, #8
	adds r4, r0, #0
	mov sb, r1
	ldr r1, _080AA348 @ =gDispCnt
	ldr r2, _080AA34C @ =0x00001041
	adds r0, r2, #0
	strh r0, [r1]
	ldr r0, _080AA350 @ =sub_80AA384
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r1, _080AA354 @ =sub_80AB990
	str r1, [sp]
	movs r1, #0x54
	movs r3, #0
	bl TaskCreate
	ldrh r6, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r0, r6, r0
	str r4, [r0]
	movs r5, #0
	movs r2, #0
	strh r2, [r0, #8]
	strh r2, [r0, #4]
	strh r2, [r0, #6]
	str r2, [r0, #0xc]
	str r2, [r0, #0x10]
	str r2, [sp, #4]
	ldr r3, _080AA358 @ =0x040000D4
	add r0, sp, #4
	str r0, [r3]
	ldr r1, _080AA35C @ =gBgCntRegs
	mov r8, r1
	ldrh r1, [r1, #4]
	movs r0, #0xc
	ands r0, r1
	lsls r0, r0, #0xc
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r0, r0, r1
	str r0, [r3, #4]
	ldr r0, _080AA360 @ =0x85000010
	str r0, [r3, #8]
	ldr r0, [r3, #8]
	ldr r4, _080AA364 @ =gUnknown_03006230
	strb r5, [r4, #3]
	ldr r0, _080AA368 @ =gUnknown_03003590
	strb r5, [r0, #0xc]
	strb r5, [r0, #0xd]
	movs r1, #0xff
	strb r1, [r0, #0xe]
	movs r3, #0x40
	strb r3, [r0, #0xf]
	strb r5, [r4, #2]
	strb r5, [r0, #8]
	strb r5, [r0, #9]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0xa]
	strb r3, [r0, #0xb]
	strb r5, [r4, #1]
	strb r5, [r0, #4]
	strb r5, [r0, #5]
	strb r1, [r0, #6]
	strb r3, [r0, #7]
	ldr r0, _080AA36C @ =0x00004E07
	mov r1, r8
	strh r0, [r1]
	ldr r0, _080AA370 @ =gBgScrollRegs
	strh r2, [r0]
	ldr r1, _080AA374 @ =0x03000014
	adds r0, r6, r1
	ldr r1, _080AA378 @ =0x06004000
	str r1, [r0, #4]
	strh r2, [r0, #0xa]
	ldr r1, _080AA37C @ =0x06007000
	str r1, [r0, #0xc]
	strh r2, [r0, #0x18]
	strh r2, [r0, #0x1a]
	movs r1, #0xa0
	lsls r1, r1, #1
	strh r1, [r0, #0x1c]
	strh r2, [r0, #0x1e]
	strh r2, [r0, #0x20]
	strh r2, [r0, #0x22]
	strh r2, [r0, #0x24]
	movs r1, #0x20
	strh r1, [r0, #0x26]
	strh r1, [r0, #0x28]
	ldr r1, _080AA380 @ =0x0300003E
	adds r6, r6, r1
	strb r5, [r6]
	strh r2, [r0, #0x2e]
	bl DrawBackground
	mov r0, sb
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_080AA348: .4byte gDispCnt
_080AA34C: .4byte 0x00001041
_080AA350: .4byte sub_80AA384
_080AA354: .4byte sub_80AB990
_080AA358: .4byte 0x040000D4
_080AA35C: .4byte gBgCntRegs
_080AA360: .4byte 0x85000010
_080AA364: .4byte gUnknown_03006230
_080AA368: .4byte gUnknown_03003590
_080AA36C: .4byte 0x00004E07
_080AA370: .4byte gBgScrollRegs
_080AA374: .4byte 0x03000014
_080AA378: .4byte 0x06004000
_080AA37C: .4byte 0x06007000
_080AA380: .4byte 0x0300003E

	thumb_func_start sub_80AA384
sub_80AA384: @ 0x080AA384
	push {r4, r5, r6, r7, lr}
	ldr r6, _080AA3E4 @ =gCurTask
	ldr r0, [r6]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r3, r1, r0
	ldrh r4, [r3, #4]
	ldr r5, _080AA3E8 @ =gBldRegs
	cmp r4, #0
	bne _080AA3D0
	ldr r2, _080AA3EC @ =gDispCnt
	ldrh r0, [r2]
	movs r7, #0x80
	lsls r7, r7, #6
	adds r1, r7, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080AA3F0 @ =gWinRegs
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	movs r0, #0x31
	strh r0, [r1, #8]
	strh r4, [r1, #0xa]
	ldr r0, _080AA3F4 @ =0x000001C1
	strh r0, [r5]
	movs r0, #0x10
	strh r0, [r5, #4]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r3, #6]
	movs r0, #1
	strh r0, [r3, #4]
	ldr r1, _080AA3F8 @ =0x00001141
	adds r0, r1, #0
	strh r0, [r2]
_080AA3D0:
	ldrh r0, [r5, #4]
	cmp r0, #0
	beq _080AA3FC
	ldrh r0, [r3, #6]
	lsrs r0, r0, #8
	strh r0, [r5, #4]
	ldrh r0, [r3, #6]
	subs r0, #0x40
	strh r0, [r3, #6]
	b _080AA404
	.align 2, 0
_080AA3E4: .4byte gCurTask
_080AA3E8: .4byte gBldRegs
_080AA3EC: .4byte gDispCnt
_080AA3F0: .4byte gWinRegs
_080AA3F4: .4byte 0x000001C1
_080AA3F8: .4byte 0x00001141
_080AA3FC:
	strh r0, [r5, #4]
	ldr r1, [r6]
	ldr r0, _080AA40C @ =sub_80AB994
	str r0, [r1, #8]
_080AA404:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AA40C: .4byte sub_80AB994

	thumb_func_start sub_80AA410
sub_80AA410: @ 0x080AA410
	push {r4, r5, r6, lr}
	ldr r5, _080AA464 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r3, r1, r0
	ldrh r0, [r3, #4]
	ldr r4, _080AA468 @ =gBldRegs
	cmp r0, #0
	beq _080AA450
	ldr r2, _080AA46C @ =gDispCnt
	ldrh r0, [r2]
	movs r6, #0x80
	lsls r6, r6, #6
	adds r1, r6, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080AA470 @ =gWinRegs
	movs r2, #0
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	movs r0, #0x31
	strh r0, [r1, #8]
	strh r2, [r1, #0xa]
	ldr r0, _080AA474 @ =0x000001C1
	strh r0, [r4]
	strh r2, [r3, #6]
	strh r2, [r3, #4]
	strh r2, [r4, #4]
_080AA450:
	ldrh r0, [r4, #4]
	cmp r0, #0xf
	bhi _080AA478
	ldrh r0, [r3, #6]
	lsrs r0, r0, #8
	strh r0, [r4, #4]
	ldrh r0, [r3, #6]
	adds r0, #0x40
	strh r0, [r3, #6]
	b _080AA490
	.align 2, 0
_080AA464: .4byte gCurTask
_080AA468: .4byte gBldRegs
_080AA46C: .4byte gDispCnt
_080AA470: .4byte gWinRegs
_080AA474: .4byte 0x000001C1
_080AA478:
	movs r0, #0x10
	strh r0, [r4, #4]
	ldrh r0, [r3, #8]
	adds r0, #1
	strh r0, [r3, #8]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0xb4
	bls _080AA490
	ldr r1, [r5]
	ldr r0, _080AA498 @ =sub_80AA49C
	str r0, [r1, #8]
_080AA490:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080AA498: .4byte sub_80AA49C

	thumb_func_start sub_80AA49C
sub_80AA49C: @ 0x080AA49C
	push {r4, r5, r6, r7, lr}
	movs r5, #0
	movs r0, #0
	ldr r1, _080AA508 @ =gSaveGame
	mov ip, r1
	mov r6, ip
	adds r6, #0x37
	movs r7, #4
_080AA4AC:
	movs r2, #0
	adds r4, r0, #1
	lsls r3, r0, #2
_080AA4B2:
	adds r0, r2, r3
	adds r0, r0, r6
	ldrb r1, [r0]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _080AA4C6
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_080AA4C6:
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #3
	bls _080AA4B2
	lsls r0, r4, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #6
	bls _080AA4AC
	mov r0, ip
	adds r0, #0x33
	ldrb r2, [r0]
	movs r0, #3
	ands r0, r2
	cmp r0, #3
	beq _080AA502
	ldr r1, _080AA50C @ =gStageData
	ldrb r0, [r1, #3]
	cmp r0, #5
	bne _080AA4F8
	adds r0, r1, #0
	adds r0, #0xc5
	ldrb r0, [r0]
	cmp r0, #1
	beq _080AA502
_080AA4F8:
	adds r0, r1, #0
	adds r0, #0xc5
	ldrb r0, [r0]
	cmp r0, #1
	bne _080AA510
_080AA502:
	bl LaunchGameIntro
	b _080AA52E
	.align 2, 0
_080AA508: .4byte gSaveGame
_080AA50C: .4byte gStageData
_080AA510:
	movs r0, #1
	ands r0, r2
	cmp r0, #0
	bne _080AA51C
	movs r0, #1
	b _080AA52A
_080AA51C:
	cmp r5, #0x1c
	bne _080AA53C
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	bne _080AA53C
	movs r0, #2
_080AA52A:
	bl sub_80AB120
_080AA52E:
	ldr r0, _080AA538 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
	b _080AA548
	.align 2, 0
_080AA538: .4byte gCurTask
_080AA53C:
	bl LaunchGameIntro
	ldr r0, _080AA550 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
_080AA548:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AA550: .4byte gCurTask

	thumb_func_start sub_80AA554
sub_80AA554: @ 0x080AA554
	push {r4, lr}
	sub sp, #8
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _080AA600 @ =sub_80AB9CC
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r1, _080AA604 @ =sub_80AB9C8
	str r1, [sp]
	movs r1, #0x48
	movs r3, #0
	bl TaskCreate
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r1, r1, r0
	ldr r0, _080AA608 @ =gSaveGame
	ldr r2, _080AA60C @ =0x00000366
	adds r0, r0, r2
	ldrb r2, [r0]
	movs r0, #0
	strb r2, [r1]
	strb r4, [r1, #1]
	movs r2, #0
	strh r0, [r1, #6]
	strh r0, [r1, #2]
	strh r0, [r1, #4]
	str r0, [sp, #4]
	ldr r3, _080AA610 @ =0x040000D4
	add r0, sp, #4
	str r0, [r3]
	ldr r0, _080AA614 @ =gBgCntRegs
	ldrh r1, [r0, #4]
	movs r0, #0xc
	ands r0, r1
	lsls r0, r0, #0xc
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r0, r0, r1
	str r0, [r3, #4]
	ldr r0, _080AA618 @ =0x85000010
	str r0, [r3, #8]
	ldr r0, [r3, #8]
	ldr r4, _080AA61C @ =gUnknown_03006230
	strb r2, [r4, #3]
	ldr r0, _080AA620 @ =gUnknown_03003590
	strb r2, [r0, #0xc]
	strb r2, [r0, #0xd]
	movs r1, #0xff
	strb r1, [r0, #0xe]
	movs r3, #0x40
	strb r3, [r0, #0xf]
	strb r2, [r4, #2]
	strb r2, [r0, #8]
	strb r2, [r0, #9]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0xa]
	strb r3, [r0, #0xb]
	strb r2, [r4, #1]
	strb r2, [r0, #4]
	strb r2, [r0, #5]
	strb r1, [r0, #6]
	strb r3, [r0, #7]
	strb r2, [r4]
	strb r2, [r0]
	strb r2, [r0, #1]
	strb r1, [r0, #2]
	strb r3, [r0, #3]
	movs r0, #0
	bl sub_80C4C0C
	ldr r1, _080AA624 @ =gBgPalette
	strh r0, [r1]
	ldr r2, _080AA628 @ =gFlags
	ldr r0, [r2]
	movs r1, #1
	orrs r0, r1
	str r0, [r2]
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AA600: .4byte sub_80AB9CC
_080AA604: .4byte sub_80AB9C8
_080AA608: .4byte gSaveGame
_080AA60C: .4byte 0x00000366
_080AA610: .4byte 0x040000D4
_080AA614: .4byte gBgCntRegs
_080AA618: .4byte 0x85000010
_080AA61C: .4byte gUnknown_03006230
_080AA620: .4byte gUnknown_03003590
_080AA624: .4byte gBgPalette
_080AA628: .4byte gFlags

	thumb_func_start sub_80AA62C
sub_80AA62C: @ 0x080AA62C
	push {r4, lr}
	adds r3, r0, #0
	ldr r2, _080AA684 @ =gDispCnt
	ldrh r0, [r2]
	movs r4, #0x80
	lsls r4, r4, #1
	adds r1, r4, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080AA688 @ =gBgCntRegs
	movs r4, #0
	movs r2, #0
	ldr r0, _080AA68C @ =0x00005687
	strh r0, [r1]
	ldr r0, _080AA690 @ =gBgScrollRegs
	strh r2, [r0]
	strh r2, [r0, #2]
	adds r0, r3, #0
	adds r0, #8
	ldr r1, _080AA694 @ =0x06004000
	str r1, [r0, #4]
	strh r2, [r0, #0xa]
	ldr r1, _080AA698 @ =0x0600B000
	str r1, [r0, #0xc]
	strh r2, [r0, #0x18]
	strh r2, [r0, #0x1a]
	ldr r1, _080AA69C @ =0x00000141
	strh r1, [r0, #0x1c]
	strh r2, [r0, #0x1e]
	strh r2, [r0, #0x20]
	strh r2, [r0, #0x22]
	strh r2, [r0, #0x24]
	movs r1, #0x20
	strh r1, [r0, #0x26]
	strh r1, [r0, #0x28]
	adds r3, #0x32
	strb r4, [r3]
	movs r1, #4
	strh r1, [r0, #0x2e]
	bl DrawBackground
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AA684: .4byte gDispCnt
_080AA688: .4byte gBgCntRegs
_080AA68C: .4byte 0x00005687
_080AA690: .4byte gBgScrollRegs
_080AA694: .4byte 0x06004000
_080AA698: .4byte 0x0600B000
_080AA69C: .4byte 0x00000141

	thumb_func_start sub_80AA6A0
sub_80AA6A0: @ 0x080AA6A0
	push {r4, r5, r6, lr}
	ldr r5, _080AA72C @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldrb r0, [r4, #1]
	cmp r0, #1
	bls _080AA6D4
	ldr r0, _080AA730 @ =gMPlayInfo_BGM
	movs r1, #4
	bl m4aMPlayFadeOut
	ldr r0, _080AA734 @ =gMPlayInfo_SE1
	movs r1, #4
	bl m4aMPlayFadeOut
	ldr r0, _080AA738 @ =gMPlayInfo_SE2
	movs r1, #4
	bl m4aMPlayFadeOut
	ldr r0, _080AA73C @ =gMPlayInfo_SE3
	movs r1, #4
	bl m4aMPlayFadeOut
_080AA6D4:
	ldrh r0, [r4, #2]
	ldr r3, _080AA740 @ =gBldRegs
	cmp r0, #0
	bne _080AA716
	ldr r2, _080AA744 @ =gDispCnt
	ldrh r0, [r2]
	movs r6, #0x80
	lsls r6, r6, #6
	adds r1, r6, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080AA748 @ =gWinRegs
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	ldrh r2, [r1, #8]
	movs r0, #0x3f
	orrs r0, r2
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	orrs r0, r2
	strh r0, [r1, #0xa]
	ldr r0, _080AA74C @ =0x00003FFF
	strh r0, [r3]
	movs r0, #0x10
	strh r0, [r3, #4]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r4, #4]
	movs r0, #1
	strh r0, [r4, #2]
_080AA716:
	ldrh r0, [r3, #4]
	cmp r0, #0
	beq _080AA750
	ldrh r0, [r4, #4]
	lsrs r0, r0, #8
	strh r0, [r3, #4]
	ldrh r0, [r4, #4]
	subs r0, #0x40
	strh r0, [r4, #4]
	b _080AA762
	.align 2, 0
_080AA72C: .4byte gCurTask
_080AA730: .4byte gMPlayInfo_BGM
_080AA734: .4byte gMPlayInfo_SE1
_080AA738: .4byte gMPlayInfo_SE2
_080AA73C: .4byte gMPlayInfo_SE3
_080AA740: .4byte gBldRegs
_080AA744: .4byte gDispCnt
_080AA748: .4byte gWinRegs
_080AA74C: .4byte 0x00003FFF
_080AA750:
	strh r0, [r3, #4]
	ldrb r0, [r4, #1]
	cmp r0, #1
	bls _080AA75C
	subs r0, #2
	strb r0, [r4, #1]
_080AA75C:
	ldr r1, [r5]
	ldr r0, _080AA768 @ =sub_80AB9F4
	str r0, [r1, #8]
_080AA762:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080AA768: .4byte sub_80AB9F4

	thumb_func_start sub_80AA76C
sub_80AA76C: @ 0x080AA76C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r5, _080AA7CC @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r1, r0
	ldrh r0, [r6, #2]
	ldr r4, _080AA7D0 @ =gBldRegs
	cmp r0, #0
	beq _080AA7B8
	ldr r2, _080AA7D4 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080AA7D8 @ =gWinRegs
	movs r3, #0
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	ldrh r2, [r1, #8]
	movs r0, #0x3f
	orrs r0, r2
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	orrs r0, r2
	strh r0, [r1, #0xa]
	ldr r0, _080AA7DC @ =0x00003FFF
	strh r0, [r4]
	strh r3, [r6, #4]
	strh r3, [r6, #2]
_080AA7B8:
	ldrh r0, [r4, #4]
	cmp r0, #0xf
	bhi _080AA7E0
	ldrh r0, [r6, #4]
	lsrs r0, r0, #8
	strh r0, [r4, #4]
	ldrh r0, [r6, #4]
	adds r0, #0x40
	strh r0, [r6, #4]
	b _080AA90C
	.align 2, 0
_080AA7CC: .4byte gCurTask
_080AA7D0: .4byte gBldRegs
_080AA7D4: .4byte gDispCnt
_080AA7D8: .4byte gWinRegs
_080AA7DC: .4byte 0x00003FFF
_080AA7E0:
	movs r3, #0
	movs r2, #0x10
	strh r2, [r4, #4]
	ldrb r0, [r6, #1]
	cmp r0, #0
	beq _080AA7EE
	b _080AA8EC
_080AA7EE:
	movs r0, #0
	mov r8, r0
	ldr r4, _080AA854 @ =gSaveGame
	ldrh r1, [r4, #0x34]
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	bne _080AA808
	movs r0, #0x10
	orrs r0, r1
	strh r0, [r4, #0x34]
	bl sub_8001E58
_080AA808:
	movs r0, #0
	adds r5, r4, #0
	adds r7, r5, #0
	adds r7, #0x37
	movs r1, #4
	mov ip, r1
_080AA814:
	movs r2, #0
	adds r4, r0, #1
	lsls r3, r0, #2
_080AA81A:
	adds r0, r2, r3
	adds r0, r0, r7
	ldrb r1, [r0]
	mov r0, ip
	ands r0, r1
	cmp r0, #0
	beq _080AA832
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
_080AA832:
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #3
	bls _080AA81A
	lsls r0, r4, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #6
	bls _080AA814
	adds r0, r5, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0x7f
	beq _080AA858
	bl sub_80AA91C
	b _080AA8AA
	.align 2, 0
_080AA854: .4byte gSaveGame
_080AA858:
	adds r0, r5, #0
	adds r0, #0x33
	ldrb r2, [r0]
	movs r0, #3
	ands r0, r2
	cmp r0, #3
	beq _080AA882
	ldr r1, _080AA890 @ =gStageData
	ldrb r0, [r1, #3]
	cmp r0, #5
	bne _080AA878
	adds r0, r1, #0
	adds r0, #0xc5
	ldrb r0, [r0]
	cmp r0, #1
	beq _080AA882
_080AA878:
	adds r0, r1, #0
	adds r0, #0xc5
	ldrb r0, [r0]
	cmp r0, #1
	bne _080AA89C
_080AA882:
	movs r0, #0
	strh r0, [r6, #6]
	ldr r0, _080AA894 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080AA898 @ =sub_80ABA20
	str r0, [r1, #8]
	b _080AA90C
	.align 2, 0
_080AA890: .4byte gStageData
_080AA894: .4byte gCurTask
_080AA898: .4byte sub_80ABA20
_080AA89C:
	movs r0, #1
	ands r0, r2
	cmp r0, #0
	bne _080AA8B8
	movs r0, #1
	bl sub_80AB120
_080AA8AA:
	ldr r0, _080AA8B4 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
	b _080AA90C
	.align 2, 0
_080AA8B4: .4byte gCurTask
_080AA8B8:
	mov r3, r8
	cmp r3, #0x1c
	bne _080AA8D8
	movs r0, #2
	bl sub_80AB120
	ldr r0, _080AA8D0 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080AA8D4 @ =sub_80ABA80
	str r0, [r1, #8]
	b _080AA90C
	.align 2, 0
_080AA8D0: .4byte gCurTask
_080AA8D4: .4byte sub_80ABA80
_080AA8D8:
	ldr r0, _080AA8E4 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080AA8E8 @ =sub_80ABA94
	str r0, [r1, #8]
	b _080AA90C
	.align 2, 0
_080AA8E4: .4byte gCurTask
_080AA8E8: .4byte sub_80ABA94
_080AA8EC:
	ldr r2, _080AA918 @ =gSaveGame
	ldrh r1, [r2, #0x34]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	bne _080AA902
	movs r0, #0x20
	orrs r0, r1
	strh r0, [r2, #0x34]
	bl sub_8001E58
_080AA902:
	bl sub_80A8F90
	ldr r0, [r5]
	bl TaskDestroy
_080AA90C:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AA918: .4byte gSaveGame

	thumb_func_start sub_80AA91C
sub_80AA91C: @ 0x080AA91C
	push {r4, r5, lr}
	sub sp, #8
	ldr r1, _080AAA10 @ =gDispCnt
	movs r5, #0x40
	ldr r0, _080AAA14 @ =0x00006040
	strh r0, [r1]
	ldr r0, _080AAA18 @ =sub_80AAC38
	movs r1, #0xa6
	lsls r1, r1, #1
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r3, _080AAA1C @ =sub_80ABAF4
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	ldr r0, _080AAA20 @ =gSaveGame
	ldr r1, _080AAA24 @ =0x00000366
	adds r0, r0, r1
	ldrb r0, [r0]
	movs r1, #0
	strb r0, [r4]
	movs r3, #0
	strh r1, [r4, #2]
	movs r0, #2
	strb r0, [r4, #1]
	str r1, [r4, #0xc]
	movs r0, #0x80
	lsls r0, r0, #7
	str r0, [r4, #0x10]
	movs r0, #0x80
	lsls r0, r0, #6
	str r0, [r4, #8]
	str r1, [r4, #0x14]
	ldr r0, _080AAA28 @ =0xFFFF9C00
	str r0, [r4, #0x18]
	movs r0, #0xb4
	lsls r0, r0, #8
	str r0, [r4, #0x1c]
	movs r0, #0xa0
	lsls r0, r0, #8
	str r0, [r4, #0x20]
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r4, #0x24]
	movs r0, #0x82
	lsls r0, r0, #8
	str r0, [r4, #0x28]
	strh r1, [r4, #6]
	strh r1, [r4, #4]
	str r1, [sp, #4]
	ldr r2, _080AAA2C @ =0x040000D4
	add r0, sp, #4
	str r0, [r2]
	ldr r0, _080AAA30 @ =gBgCntRegs
	ldrh r1, [r0]
	movs r0, #0xc
	ands r0, r1
	lsls r0, r0, #0xc
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r0, r0, r1
	str r0, [r2, #4]
	ldr r0, _080AAA34 @ =0x85000010
	str r0, [r2, #8]
	ldr r0, [r2, #8]
	ldr r2, _080AAA38 @ =gUnknown_03006230
	strb r3, [r2]
	ldr r0, _080AAA3C @ =gUnknown_03003590
	strb r3, [r0]
	strb r3, [r0, #1]
	movs r1, #0xff
	strb r1, [r0, #2]
	strb r5, [r0, #3]
	strb r3, [r2, #1]
	strb r3, [r0, #4]
	strb r3, [r0, #5]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #6]
	strb r5, [r0, #7]
	strb r3, [r2, #2]
	strb r3, [r0, #8]
	strb r3, [r0, #9]
	strb r1, [r0, #0xa]
	strb r5, [r0, #0xb]
	strb r3, [r2, #3]
	strb r3, [r0, #0xc]
	strb r3, [r0, #0xd]
	strb r1, [r0, #0xe]
	strb r5, [r0, #0xf]
	adds r0, r4, #0
	bl sub_80AAB6C
	ldr r2, _080AAA40 @ =gWinRegs
	ldr r0, [r4, #0x10]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r4, #8]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2, #4]
	movs r0, #0
	bl sub_80C4C0C
	ldr r1, _080AAA44 @ =gBgPalette
	strh r0, [r1]
	ldr r2, _080AAA48 @ =gFlags
	ldr r0, [r2]
	movs r1, #1
	orrs r0, r1
	str r0, [r2]
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AAA10: .4byte gDispCnt
_080AAA14: .4byte 0x00006040
_080AAA18: .4byte sub_80AAC38
_080AAA1C: .4byte sub_80ABAF4
_080AAA20: .4byte gSaveGame
_080AAA24: .4byte 0x00000366
_080AAA28: .4byte 0xFFFF9C00
_080AAA2C: .4byte 0x040000D4
_080AAA30: .4byte gBgCntRegs
_080AAA34: .4byte 0x85000010
_080AAA38: .4byte gUnknown_03006230
_080AAA3C: .4byte gUnknown_03003590
_080AAA40: .4byte gWinRegs
_080AAA44: .4byte gBgPalette
_080AAA48: .4byte gFlags

	thumb_func_start sub_80AAA4C
sub_80AAA4C: @ 0x080AAA4C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r6, r0, #0
	movs r4, #0
	ldr r7, _080AAB5C @ =0x06010000
	ldr r3, _080AAB60 @ =gUnknown_080DA2E8
	movs r0, #0
	mov sl, r0
	movs r5, #0
_080AAA66:
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #3
	adds r0, #0x2c
	adds r0, r6, r0
	str r7, [r0]
	lsls r2, r4, #3
	adds r1, r3, #4
	adds r1, r2, r1
	ldr r1, [r1]
	lsls r1, r1, #5
	adds r7, r7, r1
	adds r2, r2, r3
	ldrh r1, [r2]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	mov r8, r1
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r6, #0x1c]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r6, #0x20]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r1, #0x40
	strh r1, [r0, #0x14]
	strh r5, [r0, #0xe]
	strh r5, [r0, #0x16]
	movs r2, #0x10
	mov sb, r2
	mov r1, sb
	strb r1, [r0, #0x1c]
	mov r2, sl
	strb r2, [r0, #0x1f]
	str r5, [r0, #8]
	str r3, [sp]
	bl UpdateSpriteAnimation
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldr r3, [sp]
	cmp r4, #1
	bls _080AAA66
	adds r0, r6, #0
	adds r0, #0x7c
	str r7, [r6, #0x7c]
	ldr r3, _080AAB64 @ =gUnknown_080DA2F8
	ldrb r2, [r6]
	lsls r2, r2, #3
	adds r1, r3, #4
	adds r1, r2, r1
	ldr r1, [r1]
	lsls r1, r1, #5
	adds r7, r7, r1
	adds r2, r2, r3
	ldrh r1, [r2]
	movs r5, #0
	movs r4, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r6]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrb r1, [r1, #2]
	strb r1, [r0, #0x1a]
	ldrb r1, [r0, #0x1b]
	mov r2, r8
	orrs r1, r2
	strb r1, [r0, #0x1b]
	ldr r1, [r6, #0x24]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r6, #0x28]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	mov r1, sb
	strb r1, [r0, #0x1c]
	strb r5, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	adds r0, r6, #0
	adds r0, #0xa4
	str r7, [r0]
	ldr r2, _080AAB68 @ =gUnknown_080DA328
	ldrh r1, [r2]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	ldrb r1, [r0, #0x1b]
	mov r2, r8
	orrs r1, r2
	strb r1, [r0, #0x1b]
	ldr r1, [r6, #0x24]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r6, #0x28]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	mov r1, sb
	strb r1, [r0, #0x1c]
	strb r5, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AAB5C: .4byte 0x06010000
_080AAB60: .4byte gUnknown_080DA2E8
_080AAB64: .4byte gUnknown_080DA2F8
_080AAB68: .4byte gUnknown_080DA328

	thumb_func_start sub_80AAB6C
sub_80AAB6C: @ 0x080AAB6C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r7, r0, #0
	ldr r0, _080AAC18 @ =gBgCntRegs
	mov r8, r0
	movs r1, #0
	mov sb, r1
	movs r4, #0
	ldr r0, _080AAC1C @ =0x00005888
	mov r2, r8
	strh r0, [r2, #4]
	ldr r6, _080AAC20 @ =gBgScrollRegs
	ldr r0, [r7, #0x14]
	asrs r0, r0, #8
	strh r0, [r6, #8]
	ldr r0, [r7, #0x18]
	asrs r0, r0, #8
	strh r0, [r6, #0xa]
	adds r0, r7, #0
	adds r0, #0xcc
	ldr r1, _080AAC24 @ =0x06008000
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _080AAC28 @ =0x0600C000
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	movs r1, #0x96
	lsls r1, r1, #1
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	movs r5, #0x20
	strh r5, [r0, #0x26]
	strh r5, [r0, #0x28]
	adds r1, r7, #0
	adds r1, #0xf6
	mov r2, sb
	strb r2, [r1]
	movs r1, #6
	strh r1, [r0, #0x2e]
	bl DrawBackground
	ldr r0, _080AAC2C @ =0x00000681
	mov r1, r8
	strh r0, [r1, #2]
	strh r4, [r6, #4]
	strh r4, [r6, #6]
	movs r2, #0x86
	lsls r2, r2, #1
	adds r0, r7, r2
	movs r1, #0xc0
	lsls r1, r1, #0x13
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _080AAC30 @ =0x06003000
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	ldr r1, _080AAC34 @ =0x0000012B
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	strh r5, [r0, #0x26]
	strh r5, [r0, #0x28]
	adds r2, #0x2a
	adds r1, r7, r2
	mov r2, sb
	strb r2, [r1]
	movs r1, #5
	strh r1, [r0, #0x2e]
	bl DrawBackground
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AAC18: .4byte gBgCntRegs
_080AAC1C: .4byte 0x00005888
_080AAC20: .4byte gBgScrollRegs
_080AAC24: .4byte 0x06008000
_080AAC28: .4byte 0x0600C000
_080AAC2C: .4byte 0x00000681
_080AAC30: .4byte 0x06003000
_080AAC34: .4byte 0x0000012B

	thumb_func_start sub_80AAC38
sub_80AAC38: @ 0x080AAC38
	push {r4, r5, r6, r7, lr}
	ldr r0, _080AACFC @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r1, r0
	movs r7, #0
	ldrh r0, [r6, #6]
	cmp r0, #0
	bne _080AACA6
	ldr r2, _080AAD00 @ =gBldRegs
	movs r0, #0xc2
	strh r0, [r2]
	ldr r4, _080AAD04 @ =gDispCnt
	ldrh r0, [r4]
	movs r3, #0xc0
	lsls r3, r3, #7
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r4]
	ldr r1, _080AAD08 @ =gWinRegs
	movs r0, #0xff
	strh r0, [r1]
	strh r0, [r1, #2]
	strh r0, [r1, #6]
	ldr r0, _080AAD0C @ =0x00001137
	strh r0, [r1, #8]
	strh r7, [r1, #0xa]
	movs r0, #0x10
	strh r0, [r2, #4]
	movs r5, #0x80
	lsls r5, r5, #5
	strh r5, [r6, #4]
	movs r0, #1
	strh r0, [r6, #6]
	adds r0, r6, #0
	bl sub_80AAA4C
	ldrh r0, [r4]
	movs r2, #0x80
	lsls r2, r2, #2
	adds r1, r2, #0
	orrs r0, r1
	movs r3, #0x80
	lsls r3, r3, #3
	adds r1, r3, #0
	orrs r0, r1
	orrs r0, r5
	strh r0, [r4]
	bl m4aMPlayAllStop
	movs r0, #0x5b
	bl m4aSongNumStart
_080AACA6:
	ldr r1, [r6, #0x10]
	ldr r0, _080AAD10 @ =0x00002FFF
	cmp r1, r0
	ble _080AACC0
	ldr r2, _080AAD14 @ =0xFFFFFF00
	adds r0, r1, r2
	str r0, [r6, #0x10]
	movs r1, #0xc0
	lsls r1, r1, #6
	cmp r0, r1
	bgt _080AACC0
	str r1, [r6, #0x10]
	movs r7, #1
_080AACC0:
	ldr r1, [r6, #8]
	movs r2, #0x80
	lsls r2, r2, #7
	cmp r1, r2
	bgt _080AACE0
	movs r3, #0x80
	lsls r3, r3, #2
	adds r1, r1, r3
	str r1, [r6, #8]
	ldr r0, _080AAD18 @ =0x00003FFF
	cmp r1, r0
	ble _080AACE0
	str r2, [r6, #8]
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
_080AACE0:
	ldr r0, _080AAD00 @ =gBldRegs
	ldrh r1, [r0, #4]
	adds r3, r0, #0
	cmp r1, #0
	beq _080AAD1C
	ldrh r0, [r6, #4]
	lsrs r0, r0, #8
	strh r0, [r3, #4]
	ldr r1, _080AAD14 @ =0xFFFFFF00
	adds r0, r1, #0
	ldrh r2, [r6, #4]
	adds r0, r0, r2
	strh r0, [r6, #4]
	b _080AAD22
	.align 2, 0
_080AACFC: .4byte gCurTask
_080AAD00: .4byte gBldRegs
_080AAD04: .4byte gDispCnt
_080AAD08: .4byte gWinRegs
_080AAD0C: .4byte 0x00001137
_080AAD10: .4byte 0x00002FFF
_080AAD14: .4byte 0xFFFFFF00
_080AAD18: .4byte 0x00003FFF
_080AAD1C:
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
_080AAD22:
	ldr r4, _080AAD5C @ =gWinRegs
	ldr r0, [r6, #0x10]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r6, #8]
	asrs r0, r0, #8
	adds r1, r1, r0
	movs r2, #0
	strh r1, [r4, #4]
	cmp r7, #3
	bne _080AAD56
	movs r0, #0xf0
	strh r0, [r3]
	ldr r0, _080AAD60 @ =0x00003017
	strh r0, [r4, #8]
	movs r0, #0x1f
	strh r0, [r3, #2]
	strh r2, [r3, #4]
	strh r2, [r6, #6]
	strh r2, [r6, #4]
	strh r2, [r6, #2]
	ldr r0, _080AAD64 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080AAD68 @ =sub_80AAD6C
	str r0, [r1, #8]
_080AAD56:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AAD5C: .4byte gWinRegs
_080AAD60: .4byte 0x00003017
_080AAD64: .4byte gCurTask
_080AAD68: .4byte sub_80AAD6C

	thumb_func_start sub_80AAD6C
sub_80AAD6C: @ 0x080AAD6C
	push {r4, r5, lr}
	ldr r0, _080AAD98 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_80ABBC8
	ldr r1, _080AAD9C @ =gBldRegs
	ldrh r0, [r1, #4]
	cmp r0, #0xf
	bhi _080AADA0
	ldrh r0, [r4, #4]
	adds r0, #0x80
	strh r0, [r4, #4]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x18
	strh r0, [r1, #4]
	b _080AADB4
	.align 2, 0
_080AAD98: .4byte gCurTask
_080AAD9C: .4byte gBldRegs
_080AADA0:
	movs r0, #0
	bl sub_80C4C0C
	ldr r1, _080AAE04 @ =gBgPalette
	strh r0, [r1]
	ldr r2, _080AAE08 @ =gFlags
	ldr r0, [r2]
	movs r1, #1
	orrs r0, r1
	str r0, [r2]
_080AADB4:
	ldrh r0, [r4, #2]
	adds r0, #1
	movs r5, #0
	strh r0, [r4, #2]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x96
	ble _080AAE20
	movs r3, #0x80
	lsls r3, r3, #5
	strh r3, [r4, #4]
	strh r5, [r4, #2]
	ldr r2, _080AAE0C @ =gBldRegs
	movs r0, #0xd0
	strh r0, [r2]
	ldr r1, _080AAE10 @ =gWinRegs
	ldr r0, _080AAE14 @ =0x00003017
	strh r0, [r1, #8]
	movs r0, #0x1f
	strh r0, [r2, #2]
	movs r0, #0x10
	strh r0, [r2, #4]
	strh r5, [r4, #6]
	strh r3, [r4, #4]
	movs r0, #0
	bl sub_80C4C0C
	ldr r1, _080AAE04 @ =gBgPalette
	strh r0, [r1]
	ldr r2, _080AAE08 @ =gFlags
	ldr r0, [r2]
	movs r1, #1
	orrs r0, r1
	str r0, [r2]
	ldr r0, _080AAE18 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080AAE1C @ =sub_80AAE50
	str r0, [r1, #8]
	b _080AAE40
	.align 2, 0
_080AAE04: .4byte gBgPalette
_080AAE08: .4byte gFlags
_080AAE0C: .4byte gBldRegs
_080AAE10: .4byte gWinRegs
_080AAE14: .4byte 0x00003017
_080AAE18: .4byte gCurTask
_080AAE1C: .4byte sub_80AAE50
_080AAE20:
	ldr r2, _080AAE48 @ =gWinRegs
	ldr r0, [r4, #0x10]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r4, #8]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2, #4]
	ldr r1, _080AAE4C @ =gBgScrollRegs
	ldr r0, [r4, #0x14]
	asrs r0, r0, #8
	strh r0, [r1, #8]
	ldr r0, [r4, #0x18]
	asrs r0, r0, #8
	strh r0, [r1, #0xa]
_080AAE40:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AAE48: .4byte gWinRegs
_080AAE4C: .4byte gBgScrollRegs

	thumb_func_start sub_80AAE50
sub_80AAE50: @ 0x080AAE50
	push {r4, r5, lr}
	ldr r5, _080AAE88 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_80ABB98
	adds r0, r4, #0
	bl sub_80ABBEC
	cmp r0, #1
	bne _080AAE90
	ldrh r0, [r4, #2]
	adds r0, #1
	strh r0, [r4, #2]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x3c
	ble _080AAE90
	movs r0, #0
	strh r0, [r4, #2]
	ldr r1, [r5]
	ldr r0, _080AAE8C @ =sub_80AAEC0
	str r0, [r1, #8]
	b _080AAEB0
	.align 2, 0
_080AAE88: .4byte gCurTask
_080AAE8C: .4byte sub_80AAEC0
_080AAE90:
	ldr r2, _080AAEB8 @ =gWinRegs
	ldr r0, [r4, #0x10]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r4, #8]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2, #4]
	ldr r1, _080AAEBC @ =gBgScrollRegs
	ldr r0, [r4, #0x14]
	asrs r0, r0, #8
	strh r0, [r1, #8]
	ldr r0, [r4, #0x18]
	asrs r0, r0, #8
	strh r0, [r1, #0xa]
_080AAEB0:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AAEB8: .4byte gWinRegs
_080AAEBC: .4byte gBgScrollRegs

	thumb_func_start sub_80AAEC0
sub_80AAEC0: @ 0x080AAEC0
	push {r4, r5, lr}
	ldr r5, _080AAEF4 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_80ABB98
	adds r0, r4, #0
	bl sub_80AB0D8
	ldr r2, _080AAEF8 @ =gBldRegs
	ldrh r1, [r2, #4]
	cmp r1, #0
	beq _080AAF00
	ldr r1, _080AAEFC @ =0xFFFFFF00
	adds r0, r1, #0
	ldrh r1, [r4, #4]
	adds r0, r0, r1
	strh r0, [r4, #4]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x18
	strh r0, [r2, #4]
	b _080AAF20
	.align 2, 0
_080AAEF4: .4byte gCurTask
_080AAEF8: .4byte gBldRegs
_080AAEFC: .4byte 0xFFFFFF00
_080AAF00:
	strh r1, [r2, #4]
	ldrh r0, [r4, #2]
	adds r0, #1
	strh r0, [r4, #2]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x3c
	ble _080AAF20
	strh r1, [r4, #2]
	strh r1, [r4, #4]
	ldr r1, [r5]
	ldr r0, _080AAF1C @ =sub_80ABAF8
	str r0, [r1, #8]
	b _080AAF40
	.align 2, 0
_080AAF1C: .4byte sub_80ABAF8
_080AAF20:
	ldr r2, _080AAF48 @ =gWinRegs
	ldr r0, [r4, #0x10]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r4, #8]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2, #4]
	ldr r1, _080AAF4C @ =gBgScrollRegs
	ldr r0, [r4, #0x14]
	asrs r0, r0, #8
	strh r0, [r1, #8]
	ldr r0, [r4, #0x18]
	asrs r0, r0, #8
	strh r0, [r1, #0xa]
_080AAF40:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AAF48: .4byte gWinRegs
_080AAF4C: .4byte gBgScrollRegs

	thumb_func_start sub_80AAF50
sub_80AAF50: @ 0x080AAF50
	push {r4, r5, lr}
	ldr r5, _080AAF88 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_80ABB98
	adds r0, r4, #0
	bl sub_80AB0D8
	ldr r2, _080AAF8C @ =gBldRegs
	ldrh r0, [r2, #4]
	cmp r0, #0xf
	bhi _080AAF90
	ldrh r0, [r4, #4]
	lsrs r0, r0, #8
	strh r0, [r2, #4]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r1, #0
	ldrh r1, [r4, #4]
	adds r0, r0, r1
	strh r0, [r4, #4]
	b _080AAFA0
	.align 2, 0
_080AAF88: .4byte gCurTask
_080AAF8C: .4byte gBldRegs
_080AAF90:
	ldr r1, _080AAFA8 @ =gWinRegs
	movs r0, #0x17
	strh r0, [r1, #8]
	movs r0, #0x10
	strh r0, [r2, #4]
	ldr r1, [r5]
	ldr r0, _080AAFAC @ =sub_80AAFB0
	str r0, [r1, #8]
_080AAFA0:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AAFA8: .4byte gWinRegs
_080AAFAC: .4byte sub_80AAFB0

	thumb_func_start sub_80AAFB0
sub_80AAFB0: @ 0x080AAFB0
	push {r4, r5, r6, r7, lr}
	ldr r0, _080AB090 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	movs r5, #0
	movs r7, #0
	adds r0, r4, #0
	bl sub_80ABB98
	adds r0, r4, #0
	bl sub_80AB0D8
	ldr r0, [r4, #0x10]
	ldr r1, _080AB094 @ =0x00004FFF
	cmp r0, r1
	bgt _080AAFE8
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r0, r2
	str r0, [r4, #0x10]
	cmp r0, r1
	ble _080AAFEA
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [r4, #0x10]
_080AAFE8:
	movs r5, #1
_080AAFEA:
	ldr r0, [r4, #8]
	cmp r0, #0
	ble _080AAFFE
	ldr r1, _080AB098 @ =0xFFFFFE00
	adds r0, r0, r1
	str r0, [r4, #8]
	cmp r0, #0
	bgt _080AB004
	movs r0, #0
	str r0, [r4, #8]
_080AAFFE:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_080AB004:
	ldr r2, _080AB09C @ =gWinRegs
	ldr r0, [r4, #0x10]
	asrs r0, r0, #8
	lsls r1, r0, #8
	adds r1, r1, r0
	ldr r0, [r4, #8]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2, #4]
	cmp r5, #2
	bne _080AB0C8
	ldr r2, _080AB0A0 @ =gSaveGame
	adds r0, r2, #0
	adds r0, #0x33
	ldrb r1, [r0]
	movs r0, #3
	ands r0, r1
	mov ip, r2
	cmp r0, #3
	beq _080AB0C0
	ldr r1, _080AB0A4 @ =gStageData
	ldrb r0, [r1, #3]
	cmp r0, #5
	bne _080AB03E
	adds r0, r1, #0
	adds r0, #0xc5
	ldrb r0, [r0]
	cmp r0, #1
	beq _080AB0C0
_080AB03E:
	adds r0, r1, #0
	adds r0, #0xc5
	ldrb r0, [r0]
	cmp r0, #1
	beq _080AB0C0
	movs r0, #0
	mov r5, ip
	adds r5, #0x37
	movs r6, #4
_080AB050:
	movs r3, #0
	adds r2, r0, #1
	lsls r4, r0, #2
_080AB056:
	adds r0, r3, r4
	adds r0, r0, r5
	ldrb r1, [r0]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _080AB06A
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
_080AB06A:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #3
	bls _080AB056
	lsls r0, r2, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #6
	bls _080AB050
	mov r0, ip
	adds r0, #0x33
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _080AB0A8
	movs r0, #1
	b _080AB0AE
	.align 2, 0
_080AB090: .4byte gCurTask
_080AB094: .4byte 0x00004FFF
_080AB098: .4byte 0xFFFFFE00
_080AB09C: .4byte gWinRegs
_080AB0A0: .4byte gSaveGame
_080AB0A4: .4byte gStageData
_080AB0A8:
	cmp r7, #0x1c
	bne _080AB0C0
	movs r0, #2
_080AB0AE:
	bl sub_80AB120
	ldr r0, _080AB0BC @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
	b _080AB0C8
	.align 2, 0
_080AB0BC: .4byte gCurTask
_080AB0C0:
	ldr r0, _080AB0D0 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080AB0D4 @ =sub_80ABB38
	str r0, [r1, #8]
_080AB0C8:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AB0D0: .4byte gCurTask
_080AB0D4: .4byte sub_80ABB38

	thumb_func_start sub_80AB0D8
sub_80AB0D8: @ 0x080AB0D8
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x7c
	ldr r0, [r4, #0x24]
	asrs r0, r0, #8
	strh r0, [r1, #0x10]
	ldr r0, [r4, #0x28]
	asrs r2, r0, #8
	strh r2, [r1, #0x12]
	ldrb r0, [r4]
	cmp r0, #0
	beq _080AB0F6
	subs r0, r2, #4
	strh r0, [r1, #0x12]
_080AB0F6:
	adds r0, r1, #0
	bl DisplaySprite
	ldrb r0, [r4]
	cmp r0, #0
	beq _080AB118
	adds r0, r4, #0
	adds r0, #0xa4
	ldr r1, [r4, #0x24]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r4, #0x28]
	asrs r1, r1, #8
	adds r1, #0xa
	strh r1, [r0, #0x12]
	bl DisplaySprite
_080AB118:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80AB120
sub_80AB120: @ 0x080AB120
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r5, _080AB1AC @ =gDispCnt
	movs r1, #0x82
	lsls r1, r1, #5
	adds r0, r1, #0
	strh r0, [r5]
	ldr r0, _080AB1B0 @ =sub_80AB1C4
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r1, _080AB1B4 @ =sub_80ABC1C
	str r1, [sp]
	movs r1, #0xd4
	movs r3, #0
	bl TaskCreate
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	movs r2, #0
	strb r4, [r0]
	movs r3, #0
	strh r2, [r0, #4]
	movs r1, #0xf0
	lsls r1, r1, #7
	str r1, [r0, #8]
	movs r1, #0xa0
	lsls r1, r1, #7
	str r1, [r0, #0xc]
	str r2, [r0, #0x10]
	str r2, [r0, #0x14]
	str r2, [r0, #0x18]
	str r2, [r0, #0x1c]
	str r2, [r0, #0x20]
	strb r3, [r0, #1]
	strh r2, [r0, #2]
	str r2, [r0, #0x24]
	ldrh r0, [r5]
	movs r2, #0x80
	lsls r2, r2, #6
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r5]
	ldr r2, _080AB1B8 @ =gWinRegs
	movs r0, #0xf0
	strh r0, [r2]
	movs r0, #0xa0
	strh r0, [r2, #4]
	ldrh r0, [r2, #8]
	movs r1, #0x3f
	orrs r0, r1
	strh r0, [r2, #8]
	ldrh r0, [r2, #0xa]
	movs r1, #0x1f
	orrs r0, r1
	strh r0, [r2, #0xa]
	ldr r1, _080AB1BC @ =gBldRegs
	ldr r0, _080AB1C0 @ =0x00003FFF
	strh r0, [r1]
	movs r0, #0x10
	strh r0, [r1, #4]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AB1AC: .4byte gDispCnt
_080AB1B0: .4byte sub_80AB1C4
_080AB1B4: .4byte sub_80ABC1C
_080AB1B8: .4byte gWinRegs
_080AB1BC: .4byte gBldRegs
_080AB1C0: .4byte 0x00003FFF

	thumb_func_start sub_80AB1C4
sub_80AB1C4: @ 0x080AB1C4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r0, _080AB270 @ =gCurTask
	ldr r0, [r0]
	ldrh r6, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r7, r6, r0
	ldr r0, _080AB274 @ =gSaveGame
	ldr r1, _080AB278 @ =0x00000366
	adds r0, r0, r1
	ldrb r0, [r0]
	mov ip, r0
	movs r2, #4
	ldrsh r5, [r7, r2]
	cmp r5, #0
	bne _080AB2A4
	ldr r1, _080AB27C @ =0x06010000
	ldr r3, _080AB280 @ =0x0300002C
	adds r0, r6, r3
	str r1, [r0]
	ldr r2, _080AB284 @ =gUnknown_080DA358
	ldrh r1, [r2]
	movs r4, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #8]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0xc]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r5, [r0, #0x14]
	strh r5, [r0, #0xe]
	strh r5, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	strb r4, [r0, #0x1f]
	str r5, [r0, #8]
	subs r1, #0x11
	str r1, [r0, #0x20]
	bl UpdateSpriteAnimation
	ldr r2, _080AB288 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080AB28C @ =gBgCntRegs
	ldr r0, _080AB290 @ =0x00000602
	strh r0, [r1, #2]
	ldr r0, _080AB294 @ =gBgScrollRegs
	strh r5, [r0, #4]
	strh r5, [r0, #6]
	ldr r1, _080AB298 @ =0x03000094
	adds r0, r6, r1
	movs r1, #0xc0
	lsls r1, r1, #0x13
	str r1, [r0, #4]
	strh r5, [r0, #0xa]
	ldr r1, _080AB29C @ =0x06003000
	str r1, [r0, #0xc]
	strh r5, [r0, #0x18]
	strh r5, [r0, #0x1a]
	movs r1, #0xab
	lsls r1, r1, #1
	strh r1, [r0, #0x1c]
	strh r5, [r0, #0x1e]
	strh r5, [r0, #0x20]
	strh r5, [r0, #0x22]
	strh r5, [r0, #0x24]
	movs r1, #0x20
	strh r1, [r0, #0x26]
	strh r1, [r0, #0x28]
	ldr r2, _080AB2A0 @ =0x030000BE
	adds r1, r6, r2
	strb r4, [r1]
	movs r1, #1
	b _080AB380
	.align 2, 0
_080AB270: .4byte gCurTask
_080AB274: .4byte gSaveGame
_080AB278: .4byte 0x00000366
_080AB27C: .4byte 0x06010000
_080AB280: .4byte 0x0300002C
_080AB284: .4byte gUnknown_080DA358
_080AB288: .4byte gDispCnt
_080AB28C: .4byte gBgCntRegs
_080AB290: .4byte 0x00000602
_080AB294: .4byte gBgScrollRegs
_080AB298: .4byte 0x03000094
_080AB29C: .4byte 0x06003000
_080AB2A0: .4byte 0x030000BE
_080AB2A4:
	cmp r5, #1
	beq _080AB2AA
	b _080AB3AC
_080AB2AA:
	ldr r1, _080AB2DC @ =gBgCntRegs
	movs r3, #0
	ldr r0, _080AB2E0 @ =0x00000E04
	strh r0, [r1]
	ldr r2, _080AB2E4 @ =gDispCnt
	ldrh r0, [r2]
	movs r4, #0x80
	lsls r4, r4, #1
	adds r1, r4, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r0, _080AB2E8 @ =gBgScrollRegs
	strh r3, [r0]
	strh r3, [r0, #2]
	ldr r0, _080AB2EC @ =0x03000054
	adds r1, r6, r0
	movs r2, #0
	ldrb r0, [r7]
	cmp r0, #0
	beq _080AB2D6
	cmp r0, #3
	bne _080AB2F0
_080AB2D6:
	movs r2, #0xc
	b _080AB2FA
	.align 2, 0
_080AB2DC: .4byte gBgCntRegs
_080AB2E0: .4byte 0x00000E04
_080AB2E4: .4byte gDispCnt
_080AB2E8: .4byte gBgScrollRegs
_080AB2EC: .4byte 0x03000054
_080AB2F0:
	cmp r0, #1
	beq _080AB2FA
	cmp r0, #2
	bne _080AB2FA
	movs r2, #6
_080AB2FA:
	ldr r0, _080AB388 @ =0x06004000
	str r0, [r1, #4]
	movs r3, #0
	mov r8, r3
	movs r4, #0
	strh r4, [r1, #0xa]
	ldr r0, _080AB38C @ =0x06007000
	str r0, [r1, #0xc]
	strh r4, [r1, #0x18]
	strh r4, [r1, #0x1a]
	ldr r6, _080AB390 @ =gUnknown_080DA330
	mov r3, ip
	adds r0, r2, r3
	lsls r0, r0, #1
	adds r0, r0, r6
	ldrh r0, [r0]
	strh r0, [r1, #0x1c]
	strh r4, [r1, #0x1e]
	strh r4, [r1, #0x20]
	strh r4, [r1, #0x22]
	strh r4, [r1, #0x24]
	movs r5, #0x20
	strh r5, [r1, #0x26]
	strh r5, [r1, #0x28]
	adds r0, r1, #0
	adds r0, #0x2a
	mov r2, r8
	strb r2, [r0]
	strh r4, [r1, #0x2e]
	adds r0, r1, #0
	bl DrawBackground
	ldr r2, _080AB394 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #3
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080AB398 @ =gBgCntRegs
	ldr r0, _080AB39C @ =0x00001D0D
	strh r0, [r1, #4]
	ldr r0, _080AB3A0 @ =gBgScrollRegs
	strh r4, [r0, #8]
	strh r4, [r0, #0xa]
	adds r0, r7, #0
	adds r0, #0x94
	ldr r1, _080AB3A4 @ =0x0600C000
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _080AB3A8 @ =0x0600E800
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	ldrh r1, [r6, #0x26]
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	strh r5, [r0, #0x26]
	strh r5, [r0, #0x28]
	adds r1, r7, #0
	adds r1, #0xbe
	mov r4, r8
	strb r4, [r1]
	movs r1, #2
_080AB380:
	strh r1, [r0, #0x2e]
	bl DrawBackground
	b _080AB494
	.align 2, 0
_080AB388: .4byte 0x06004000
_080AB38C: .4byte 0x06007000
_080AB390: .4byte gUnknown_080DA330
_080AB394: .4byte gDispCnt
_080AB398: .4byte gBgCntRegs
_080AB39C: .4byte 0x00001D0D
_080AB3A0: .4byte gBgScrollRegs
_080AB3A4: .4byte 0x0600C000
_080AB3A8: .4byte 0x0600E800
_080AB3AC:
	cmp r5, #2
	bne _080AB494
	ldrb r0, [r7]
	cmp r0, #0
	beq _080AB3BA
	cmp r0, #3
	bne _080AB40C
_080AB3BA:
	ldr r2, _080AB434 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #4
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080AB438 @ =gBgCntRegs
	movs r3, #0
	movs r2, #0
	ldr r0, _080AB43C @ =0x00001608
	strh r0, [r1, #6]
	ldr r0, _080AB440 @ =gBgScrollRegs
	strh r2, [r0, #0xc]
	strh r2, [r0, #0xe]
	ldr r4, _080AB444 @ =0x03000094
	adds r0, r6, r4
	ldr r1, _080AB448 @ =0x06008000
	str r1, [r0, #4]
	strh r2, [r0, #0xa]
	ldr r1, _080AB44C @ =0x0600B000
	str r1, [r0, #0xc]
	strh r2, [r0, #0x18]
	strh r2, [r0, #0x1a]
	ldr r1, _080AB450 @ =gUnknown_080DA330
	ldrh r1, [r1, #0x24]
	strh r1, [r0, #0x1c]
	strh r2, [r0, #0x1e]
	strh r2, [r0, #0x20]
	strh r2, [r0, #0x22]
	strh r2, [r0, #0x24]
	movs r1, #0x20
	strh r1, [r0, #0x26]
	strh r1, [r0, #0x28]
	ldr r2, _080AB454 @ =0x030000BE
	adds r1, r6, r2
	strb r3, [r1]
	movs r1, #3
	strh r1, [r0, #0x2e]
	bl DrawBackground
_080AB40C:
	ldr r5, _080AB458 @ =gBgPalette
	movs r0, #0
	strh r0, [r5]
	ldr r3, _080AB45C @ =gFlags
	ldr r2, [r3]
	movs r4, #1
	orrs r2, r4
	str r2, [r3]
	strh r0, [r7, #4]
	movs r0, #0x80
	lsls r0, r0, #9
	ands r0, r2
	cmp r0, #0
	beq _080AB464
	ldr r0, _080AB460 @ =gUnknown_080DA360
	movs r1, #0
	movs r2, #0x50
	bl sub_80C460C
	b _080AB476
	.align 2, 0
_080AB434: .4byte gDispCnt
_080AB438: .4byte gBgCntRegs
_080AB43C: .4byte 0x00001608
_080AB440: .4byte gBgScrollRegs
_080AB444: .4byte 0x03000094
_080AB448: .4byte 0x06008000
_080AB44C: .4byte 0x0600B000
_080AB450: .4byte gUnknown_080DA330
_080AB454: .4byte 0x030000BE
_080AB458: .4byte gBgPalette
_080AB45C: .4byte gFlags
_080AB460: .4byte gUnknown_080DA360
_080AB464:
	ldr r1, _080AB480 @ =0x040000D4
	ldr r0, _080AB484 @ =gUnknown_080DA360
	str r0, [r1]
	str r5, [r1, #4]
	ldr r0, _080AB488 @ =0x80000050
	str r0, [r1, #8]
	ldr r0, [r1, #8]
	orrs r2, r4
	str r2, [r3]
_080AB476:
	ldr r0, _080AB48C @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080AB490 @ =sub_80AB4A4
	str r0, [r1, #8]
	b _080AB49A
	.align 2, 0
_080AB480: .4byte 0x040000D4
_080AB484: .4byte gUnknown_080DA360
_080AB488: .4byte 0x80000050
_080AB48C: .4byte gCurTask
_080AB490: .4byte sub_80AB4A4
_080AB494:
	ldrh r0, [r7, #4]
	adds r0, #1
	strh r0, [r7, #4]
_080AB49A:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80AB4A4
sub_80AB4A4: @ 0x080AB4A4
	push {r4, r5, r6, lr}
	ldr r0, _080AB550 @ =gCurTask
	ldr r0, [r0]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r4, r0
	ldrb r3, [r5, #1]
	cmp r3, #0
	bne _080AB506
	ldr r2, _080AB554 @ =gDispCnt
	ldrh r0, [r2]
	movs r6, #0x80
	lsls r6, r6, #6
	adds r1, r6, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080AB558 @ =gWinRegs
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	ldrh r2, [r1, #8]
	movs r0, #0x3f
	orrs r0, r2
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	orrs r0, r2
	strh r0, [r1, #0xa]
	ldr r1, _080AB55C @ =gBldRegs
	ldr r0, _080AB560 @ =0x00003FFF
	strh r0, [r1]
	movs r0, #0x10
	strh r0, [r1, #4]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r5, #2]
	movs r0, #1
	strb r0, [r5, #1]
	ldr r0, _080AB564 @ =gBgScrollRegs
	strh r3, [r0]
	strh r3, [r0, #2]
	strh r3, [r0, #4]
	strh r3, [r0, #6]
	strh r3, [r0, #8]
	strh r3, [r0, #0xa]
	strh r3, [r0, #0xc]
	strh r3, [r0, #0xe]
_080AB506:
	adds r0, r5, #0
	bl sub_80ABD10
	adds r0, r5, #0
	bl sub_80ABC80
	adds r0, r5, #0
	bl sub_80ABCF4
	ldr r0, _080AB568 @ =0x0300002C
	adds r4, r4, r0
	ldr r0, [r5, #8]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0xc]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	ldr r1, _080AB55C @ =gBldRegs
	ldrh r0, [r1, #4]
	cmp r0, #0
	beq _080AB570
	ldrh r0, [r5, #2]
	lsrs r0, r0, #8
	strh r0, [r1, #4]
	ldr r1, _080AB56C @ =0xFFFFFF00
	adds r0, r1, #0
	ldrh r6, [r5, #2]
	adds r0, r0, r6
	strh r0, [r5, #2]
	b _080AB596
	.align 2, 0
_080AB550: .4byte gCurTask
_080AB554: .4byte gDispCnt
_080AB558: .4byte gWinRegs
_080AB55C: .4byte gBldRegs
_080AB560: .4byte 0x00003FFF
_080AB564: .4byte gBgScrollRegs
_080AB568: .4byte 0x0300002C
_080AB56C: .4byte 0xFFFFFF00
_080AB570:
	strh r0, [r1, #4]
	bl m4aMPlayAllStop
	ldrb r0, [r5]
	cmp r0, #3
	bne _080AB588
	ldr r0, _080AB584 @ =0x0000029F
	bl m4aSongNumStart
	b _080AB58E
	.align 2, 0
_080AB584: .4byte 0x0000029F
_080AB588:
	ldr r0, _080AB59C @ =0x000002A1
	bl m4aSongNumStart
_080AB58E:
	ldr r0, _080AB5A0 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080AB5A4 @ =sub_80AB770
	str r0, [r1, #8]
_080AB596:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080AB59C: .4byte 0x000002A1
_080AB5A0: .4byte gCurTask
_080AB5A4: .4byte sub_80AB770

	thumb_func_start sub_80AB5A8
sub_80AB5A8: @ 0x080AB5A8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r7, _080AB640 @ =gCurTask
	ldr r0, [r7]
	ldrh r6, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r6, r0
	ldrb r0, [r5, #1]
	cmp r0, #0
	beq _080AB5F6
	ldr r2, _080AB644 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080AB648 @ =gWinRegs
	movs r4, #0
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	ldrh r2, [r1, #8]
	movs r0, #0x3f
	orrs r0, r2
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	movs r3, #0
	orrs r0, r2
	strh r0, [r1, #0xa]
	ldr r1, _080AB64C @ =gBldRegs
	ldr r0, _080AB650 @ =0x00003FFF
	strh r0, [r1]
	strh r4, [r5, #2]
	strb r3, [r5, #1]
_080AB5F6:
	adds r0, r5, #0
	bl sub_80ABD10
	adds r0, r5, #0
	bl sub_80ABC80
	adds r0, r5, #0
	bl sub_80ABCF4
	ldr r0, _080AB654 @ =0x0300002C
	adds r4, r6, r0
	ldr r0, [r5, #8]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0xc]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	ldr r1, _080AB64C @ =gBldRegs
	ldrh r0, [r1, #4]
	cmp r0, #0xf
	bhi _080AB658
	ldrh r0, [r5, #2]
	lsrs r0, r0, #8
	strh r0, [r1, #4]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r1, #0
	ldrh r3, [r5, #2]
	adds r0, r0, r3
	strh r0, [r5, #2]
	b _080AB760
	.align 2, 0
_080AB640: .4byte gCurTask
_080AB644: .4byte gDispCnt
_080AB648: .4byte gWinRegs
_080AB64C: .4byte gBldRegs
_080AB650: .4byte 0x00003FFF
_080AB654: .4byte 0x0300002C
_080AB658:
	movs r0, #0x10
	strh r0, [r1, #4]
	ldrb r0, [r5]
	cmp r0, #1
	bne _080AB6D0
	movs r6, #0
	movs r0, #0
	ldr r1, _080AB6BC @ =gSaveGame
	mov r8, r1
	mov r7, r8
	adds r7, #0x37
	movs r3, #4
	mov ip, r3
_080AB672:
	movs r3, #0
	adds r2, r0, #1
	lsls r4, r0, #2
_080AB678:
	adds r0, r3, r4
	adds r0, r0, r7
	ldrb r1, [r0]
	mov r0, ip
	ands r0, r1
	cmp r0, #0
	beq _080AB68C
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
_080AB68C:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #3
	bls _080AB678
	lsls r0, r2, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #6
	bls _080AB672
	mov r2, r8
	adds r2, #0x33
	ldrb r1, [r2]
	movs r0, #1
	orrs r0, r1
	strb r0, [r2]
	bl sub_8001E58
	cmp r6, #0x1c
	bne _080AB6C0
	movs r0, #2
	bl sub_80AB120
	b _080AB758
	.align 2, 0
_080AB6BC: .4byte gSaveGame
_080AB6C0:
	movs r0, #0
	strh r0, [r5, #4]
	ldr r0, _080AB6CC @ =gCurTask
	ldr r1, [r0]
	b _080AB6EA
	.align 2, 0
_080AB6CC: .4byte gCurTask
_080AB6D0:
	cmp r0, #2
	bne _080AB6F8
	ldr r1, _080AB6F0 @ =gSaveGame
	adds r1, #0x33
	ldrb r2, [r1]
	movs r0, #2
	orrs r0, r2
	strb r0, [r1]
	bl sub_8001E58
	movs r0, #0
	strh r0, [r5, #4]
	ldr r1, [r7]
_080AB6EA:
	ldr r0, _080AB6F4 @ =sub_80ABC20
	str r0, [r1, #8]
	b _080AB760
	.align 2, 0
_080AB6F0: .4byte gSaveGame
_080AB6F4: .4byte sub_80ABC20
_080AB6F8:
	cmp r0, #0
	bne _080AB750
	ldr r1, _080AB734 @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _080AB738 @ =gBackgroundsCopyQueueCursor
	ldr r0, _080AB73C @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _080AB740 @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _080AB744 @ =gVramGraphicsCopyCursor
	ldr r0, _080AB748 @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r0, _080AB74C @ =gStageData
	ldrb r1, [r0, #9]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #0x11
	movs r1, #0x80
	lsls r1, r1, #0xa
	adds r0, r0, r1
	asrs r0, r0, #0x10
	movs r1, #4
	bl sub_8002210
	b _080AB760
	.align 2, 0
_080AB734: .4byte 0x0000FFFF
_080AB738: .4byte gBackgroundsCopyQueueCursor
_080AB73C: .4byte gBackgroundsCopyQueueIndex
_080AB740: .4byte gUnknown_03006840
_080AB744: .4byte gVramGraphicsCopyCursor
_080AB748: .4byte gVramGraphicsCopyQueueIndex
_080AB74C: .4byte gStageData
_080AB750:
	movs r0, #3
	movs r1, #1
	bl sub_808723C
_080AB758:
	ldr r0, _080AB76C @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
_080AB760:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AB76C: .4byte gCurTask

	thumb_func_start sub_80AB770
sub_80AB770: @ 0x080AB770
	push {r4, r5, r6, lr}
	ldr r6, _080AB7C0 @ =gCurTask
	ldr r0, [r6]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r4, r0
	adds r0, r5, #0
	bl sub_80ABD10
	adds r0, r5, #0
	bl sub_80ABC80
	adds r0, r5, #0
	bl sub_80ABCF4
	ldr r0, _080AB7C4 @ =0x0300002C
	adds r4, r4, r0
	ldr r0, [r5, #8]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #0xc]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	ldrb r0, [r5]
	cmp r0, #0
	bne _080AB7C8
	ldrh r1, [r5, #4]
	movs r2, #4
	ldrsh r0, [r5, r2]
	cmp r0, #0x77
	bgt _080AB7CC
	adds r0, r1, #1
	b _080AB7CE
	.align 2, 0
_080AB7C0: .4byte gCurTask
_080AB7C4: .4byte 0x0300002C
_080AB7C8:
	cmp r0, #3
	bne _080AB7F4
_080AB7CC:
	movs r0, #0x78
_080AB7CE:
	strh r0, [r5, #4]
	movs r1, #4
	ldrsh r0, [r5, r1]
	cmp r0, #0x77
	ble _080AB80A
	ldr r0, _080AB7EC @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080AB80A
	ldr r0, _080AB7F0 @ =gCurTask
	ldr r1, [r0]
	b _080AB806
	.align 2, 0
_080AB7EC: .4byte gPressedKeys
_080AB7F0: .4byte gCurTask
_080AB7F4:
	ldrh r0, [r5, #4]
	adds r0, #1
	strh r0, [r5, #4]
	lsls r0, r0, #0x10
	movs r1, #0x96
	lsls r1, r1, #0x11
	cmp r0, r1
	ble _080AB80A
	ldr r1, [r6]
_080AB806:
	ldr r0, _080AB810 @ =sub_80AB5A8
	str r0, [r1, #8]
_080AB80A:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080AB810: .4byte sub_80AB5A8

	thumb_func_start sub_80AB814
sub_80AB814: @ 0x080AB814
	bx lr
	.align 2, 0

	thumb_func_start sub_80AB818
sub_80AB818: @ 0x080AB818
	push {r4, r5, lr}
	ldr r5, _080AB844 @ =gCurTask
	ldr r0, [r5]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	adds r0, r4, #0
	bl sub_80AB88C
	adds r0, r4, #0
	bl sub_80A9CA0
	cmp r0, #1
	bne _080AB83C
	ldr r1, [r5]
	ldr r0, _080AB848 @ =sub_80AB84C
	str r0, [r1, #8]
_080AB83C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AB844: .4byte gCurTask
_080AB848: .4byte sub_80AB84C

	thumb_func_start sub_80AB84C
sub_80AB84C: @ 0x080AB84C
	push {r4, r5, lr}
	ldr r5, _080AB884 @ =gCurTask
	ldr r0, [r5]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	adds r0, r4, #0
	bl sub_80A9D78
	adds r0, r4, #0
	bl sub_80AB88C
	ldr r0, [r4]
	ldrb r0, [r0]
	cmp r0, #0xe
	bls _080AB87C
	ldr r0, _080AB888 @ =gBldRegs
	ldrh r0, [r0, #4]
	cmp r0, #0x10
	bne _080AB87C
	ldr r0, [r5]
	bl TaskDestroy
_080AB87C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AB884: .4byte gCurTask
_080AB888: .4byte gBldRegs

	thumb_func_start sub_80AB88C
sub_80AB88C: @ 0x080AB88C
	push {r4, lr}
	adds r4, r0, #0
	adds r4, #0x18
	ldr r1, [r0, #0x10]
	asrs r1, r1, #8
	strh r1, [r4, #0x10]
	ldr r0, [r0, #0x14]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_80AB8B0
sub_80AB8B0: @ 0x080AB8B0
	push {lr}
	adds r1, r0, #0
	ldr r0, [r1, #0x10]
	ldr r2, _080AB8D4 @ =0x00001DFF
	cmp r0, r2
	bgt _080AB8C8
	movs r3, #0x80
	lsls r3, r3, #1
	adds r0, r0, r3
	str r0, [r1, #0x10]
	cmp r0, r2
	ble _080AB8D8
_080AB8C8:
	movs r0, #0xf0
	lsls r0, r0, #5
	str r0, [r1, #0x10]
	movs r0, #1
	b _080AB8F2
	.align 2, 0
_080AB8D4: .4byte 0x00001DFF
_080AB8D8:
	ldr r0, [r1, #0x14]
	movs r2, #0xa0
	lsls r2, r2, #6
	cmp r0, r2
	ble _080AB8EA
	subs r0, #0x40
	str r0, [r1, #0x14]
	cmp r0, r2
	bgt _080AB8F0
_080AB8EA:
	str r2, [r1, #0x14]
	movs r0, #1
	b _080AB8F2
_080AB8F0:
	movs r0, #0
_080AB8F2:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80AB8F8
sub_80AB8F8: @ 0x080AB8F8
	bx lr
	.align 2, 0

	thumb_func_start sub_80AB8FC
sub_80AB8FC: @ 0x080AB8FC
	push {r4, r5, lr}
	ldr r5, _080AB920 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_80AA1BC
	ldr r0, [r4]
	ldrb r0, [r0]
	cmp r0, #0x13
	bhi _080AB924
	adds r0, r4, #0
	bl sub_80AB93C
	b _080AB934
	.align 2, 0
_080AB920: .4byte gCurTask
_080AB924:
	adds r0, r4, #0
	bl sub_80AB960
	cmp r0, #1
	bne _080AB934
	ldr r0, [r5]
	bl TaskDestroy
_080AB934:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80AB93C
sub_80AB93C: @ 0x080AB93C
	push {lr}
	adds r1, r0, #0
	ldr r0, [r1, #8]
	cmp r0, #0
	bge _080AB952
	movs r2, #0xe0
	lsls r2, r2, #3
	adds r0, r0, r2
	str r0, [r1, #8]
	cmp r0, #0
	ble _080AB95A
_080AB952:
	movs r0, #0
	str r0, [r1, #8]
	movs r0, #1
	b _080AB95C
_080AB95A:
	movs r0, #0
_080AB95C:
	pop {r1}
	bx r1

	thumb_func_start sub_80AB960
sub_80AB960: @ 0x080AB960
	push {lr}
	adds r1, r0, #0
	ldr r0, [r1, #8]
	ldr r2, _080AB97C @ =0xFFFF2E00
	cmp r0, r2
	ble _080AB976
	ldr r3, _080AB980 @ =0xFFFFFB00
	adds r0, r0, r3
	str r0, [r1, #8]
	cmp r0, r2
	bge _080AB984
_080AB976:
	str r2, [r1, #8]
	movs r0, #1
	b _080AB986
	.align 2, 0
_080AB97C: .4byte 0xFFFF2E00
_080AB980: .4byte 0xFFFFFB00
_080AB984:
	movs r0, #0
_080AB986:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80AB98C
sub_80AB98C: @ 0x080AB98C
	bx lr
	.align 2, 0

	thumb_func_start sub_80AB990
sub_80AB990: @ 0x080AB990
	bx lr
	.align 2, 0

	thumb_func_start sub_80AB994
sub_80AB994: @ 0x080AB994
	push {lr}
	ldr r0, _080AB9C0 @ =gCurTask
	ldr r3, [r0]
	ldrh r1, [r3, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r2, r1, r0
	ldrh r0, [r2, #8]
	adds r0, #1
	strh r0, [r2, #8]
	lsls r0, r0, #0x10
	movs r1, #0x96
	lsls r1, r1, #0x11
	cmp r0, r1
	bls _080AB9BA
	movs r0, #0
	strh r0, [r2, #8]
	ldr r0, _080AB9C4 @ =sub_80AA410
	str r0, [r3, #8]
_080AB9BA:
	pop {r0}
	bx r0
	.align 2, 0
_080AB9C0: .4byte gCurTask
_080AB9C4: .4byte sub_80AA410

	thumb_func_start sub_80AB9C8
sub_80AB9C8: @ 0x080AB9C8
	bx lr
	.align 2, 0

	thumb_func_start sub_80AB9CC
sub_80AB9CC: @ 0x080AB9CC
	push {r4, lr}
	ldr r4, _080AB9EC @ =gCurTask
	ldr r0, [r4]
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	bl sub_80AA62C
	ldr r1, [r4]
	ldr r0, _080AB9F0 @ =sub_80AA6A0
	str r0, [r1, #8]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AB9EC: .4byte gCurTask
_080AB9F0: .4byte sub_80AA6A0

	thumb_func_start sub_80AB9F4
sub_80AB9F4: @ 0x080AB9F4
	push {lr}
	ldr r0, _080ABA18 @ =gCurTask
	ldr r2, [r0]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r1, r1, r0
	ldrh r0, [r1, #6]
	adds r0, #2
	strh r0, [r1, #6]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xb4
	ble _080ABA14
	ldr r0, _080ABA1C @ =sub_80AA76C
	str r0, [r2, #8]
_080ABA14:
	pop {r0}
	bx r0
	.align 2, 0
_080ABA18: .4byte gCurTask
_080ABA1C: .4byte sub_80AA76C

	thumb_func_start sub_80ABA20
sub_80ABA20: @ 0x080ABA20
	push {lr}
	ldr r0, _080ABA64 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r1, r1, r0
	ldrh r0, [r1, #6]
	adds r0, #1
	strh r0, [r1, #6]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xb3
	ble _080ABA5E
	ldr r1, _080ABA68 @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _080ABA6C @ =gBackgroundsCopyQueueCursor
	ldr r0, _080ABA70 @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _080ABA74 @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _080ABA78 @ =gVramGraphicsCopyCursor
	ldr r0, _080ABA7C @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	bl LaunchGameIntro
_080ABA5E:
	pop {r0}
	bx r0
	.align 2, 0
_080ABA64: .4byte gCurTask
_080ABA68: .4byte 0x0000FFFF
_080ABA6C: .4byte gBackgroundsCopyQueueCursor
_080ABA70: .4byte gBackgroundsCopyQueueIndex
_080ABA74: .4byte gUnknown_03006840
_080ABA78: .4byte gVramGraphicsCopyCursor
_080ABA7C: .4byte gVramGraphicsCopyQueueIndex

	thumb_func_start sub_80ABA80
sub_80ABA80: @ 0x080ABA80
	push {lr}
	ldr r0, _080ABA90 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
	pop {r0}
	bx r0
	.align 2, 0
_080ABA90: .4byte gCurTask

	thumb_func_start sub_80ABA94
sub_80ABA94: @ 0x080ABA94
	push {lr}
	ldr r0, _080ABAD8 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r1, r1, r0
	ldrh r0, [r1, #6]
	adds r0, #1
	strh r0, [r1, #6]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xb3
	ble _080ABAD2
	ldr r1, _080ABADC @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _080ABAE0 @ =gBackgroundsCopyQueueCursor
	ldr r0, _080ABAE4 @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _080ABAE8 @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _080ABAEC @ =gVramGraphicsCopyCursor
	ldr r0, _080ABAF0 @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	bl LaunchGameIntro
_080ABAD2:
	pop {r0}
	bx r0
	.align 2, 0
_080ABAD8: .4byte gCurTask
_080ABADC: .4byte 0x0000FFFF
_080ABAE0: .4byte gBackgroundsCopyQueueCursor
_080ABAE4: .4byte gBackgroundsCopyQueueIndex
_080ABAE8: .4byte gUnknown_03006840
_080ABAEC: .4byte gVramGraphicsCopyCursor
_080ABAF0: .4byte gVramGraphicsCopyQueueIndex

	thumb_func_start sub_80ABAF4
sub_80ABAF4: @ 0x080ABAF4
	bx lr
	.align 2, 0

	thumb_func_start sub_80ABAF8
sub_80ABAF8: @ 0x080ABAF8
	push {r4, r5, lr}
	ldr r5, _080ABB30 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_80ABB98
	adds r0, r4, #0
	bl sub_80AB0D8
	ldrh r0, [r4, #2]
	adds r0, #1
	strh r0, [r4, #2]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xb4
	ble _080ABB2A
	movs r0, #0
	strh r0, [r4, #2]
	ldr r1, [r5]
	ldr r0, _080ABB34 @ =sub_80AAF50
	str r0, [r1, #8]
_080ABB2A:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080ABB30: .4byte gCurTask
_080ABB34: .4byte sub_80AAF50

	thumb_func_start sub_80ABB38
sub_80ABB38: @ 0x080ABB38
	push {lr}
	ldr r0, _080ABB7C @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r1, r1, r0
	ldrh r0, [r1, #2]
	adds r0, #1
	strh r0, [r1, #2]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xb3
	ble _080ABB76
	ldr r1, _080ABB80 @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _080ABB84 @ =gBackgroundsCopyQueueCursor
	ldr r0, _080ABB88 @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _080ABB8C @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _080ABB90 @ =gVramGraphicsCopyCursor
	ldr r0, _080ABB94 @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	bl LaunchGameIntro
_080ABB76:
	pop {r0}
	bx r0
	.align 2, 0
_080ABB7C: .4byte gCurTask
_080ABB80: .4byte 0x0000FFFF
_080ABB84: .4byte gBackgroundsCopyQueueCursor
_080ABB88: .4byte gBackgroundsCopyQueueIndex
_080ABB8C: .4byte gUnknown_03006840
_080ABB90: .4byte gVramGraphicsCopyCursor
_080ABB94: .4byte gVramGraphicsCopyQueueIndex

	thumb_func_start sub_80ABB98
sub_80ABB98: @ 0x080ABB98
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #0
_080ABB9E:
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #3
	adds r0, #0x2c
	adds r0, r5, r0
	ldr r1, [r5, #0x1c]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r5, #0x20]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	bl DisplaySprite
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #1
	bls _080ABB9E
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_80ABBC8
sub_80ABBC8: @ 0x080ABBC8
	push {lr}
	adds r1, r0, #0
	ldr r2, [r1, #0x18]
	cmp r2, #0
	bge _080ABBE6
	ldrb r0, [r1, #1]
	lsls r0, r0, #8
	adds r0, r2, r0
	str r0, [r1, #0x18]
	cmp r0, #0
	blt _080ABBE6
	movs r0, #0
	str r0, [r1, #0x18]
	movs r0, #1
	b _080ABBE8
_080ABBE6:
	movs r0, #0
_080ABBE8:
	pop {r1}
	bx r1

	thumb_func_start sub_80ABBEC
sub_80ABBEC: @ 0x080ABBEC
	push {lr}
	adds r2, r0, #0
	ldr r1, [r2, #0x20]
	ldr r0, _080ABC10 @ =0x00006FFF
	cmp r1, r0
	ble _080ABC14
	subs r1, #0x80
	ldrb r0, [r2, #1]
	lsls r0, r0, #7
	subs r1, r1, r0
	str r1, [r2, #0x20]
	movs r0, #0xe0
	lsls r0, r0, #7
	cmp r1, r0
	bgt _080ABC14
	str r0, [r2, #0x20]
	movs r0, #1
	b _080ABC16
	.align 2, 0
_080ABC10: .4byte 0x00006FFF
_080ABC14:
	movs r0, #0
_080ABC16:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80ABC1C
sub_80ABC1C: @ 0x080ABC1C
	bx lr
	.align 2, 0

	thumb_func_start sub_80ABC20
sub_80ABC20: @ 0x080ABC20
	push {lr}
	ldr r0, _080ABC64 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r1, r1, r0
	ldrh r0, [r1, #4]
	adds r0, #1
	strh r0, [r1, #4]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xb3
	ble _080ABC5E
	ldr r1, _080ABC68 @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _080ABC6C @ =gBackgroundsCopyQueueCursor
	ldr r0, _080ABC70 @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _080ABC74 @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _080ABC78 @ =gVramGraphicsCopyCursor
	ldr r0, _080ABC7C @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	bl LaunchGameIntro
_080ABC5E:
	pop {r0}
	bx r0
	.align 2, 0
_080ABC64: .4byte gCurTask
_080ABC68: .4byte 0x0000FFFF
_080ABC6C: .4byte gBackgroundsCopyQueueCursor
_080ABC70: .4byte gBackgroundsCopyQueueIndex
_080ABC74: .4byte gUnknown_03006840
_080ABC78: .4byte gVramGraphicsCopyCursor
_080ABC7C: .4byte gVramGraphicsCopyQueueIndex

	thumb_func_start sub_80ABC80
sub_80ABC80: @ 0x080ABC80
	push {r4, lr}
	movs r3, #0
	ldr r1, [r0, #0x24]
	adds r1, #0x90
	str r1, [r0, #0x24]
	ldr r2, _080ABCC8 @ =gSineTable
	asrs r1, r1, #8
	movs r0, #0xff
	ands r1, r0
	lsls r1, r1, #3
	adds r1, r1, r2
	ldrh r0, [r1]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x1c
	subs r0, #5
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	ldr r2, _080ABCCC @ =gFlags
	ldr r0, [r2]
	movs r1, #4
	orrs r0, r1
	str r0, [r2]
	ldr r1, _080ABCD0 @ =gUnknown_03003C5C
	ldr r0, _080ABCD4 @ =0x0400001A
	str r0, [r1]
	ldr r1, _080ABCD8 @ =gUnknown_03003F30
	movs r0, #2
	strb r0, [r1]
	ldr r0, _080ABCDC @ =gBgOffsetsHBlank
	ldr r1, [r0]
	movs r2, #0
_080ABCBE:
	cmp r3, #0x63
	bls _080ABCE0
	strh r4, [r1]
	b _080ABCE2
	.align 2, 0
_080ABCC8: .4byte gSineTable
_080ABCCC: .4byte gFlags
_080ABCD0: .4byte gUnknown_03003C5C
_080ABCD4: .4byte 0x0400001A
_080ABCD8: .4byte gUnknown_03003F30
_080ABCDC: .4byte gBgOffsetsHBlank
_080ABCE0:
	strh r2, [r1]
_080ABCE2:
	adds r1, #2
	adds r0, r3, #1
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	cmp r3, #0x9f
	bls _080ABCBE
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_80ABCF4
sub_80ABCF4: @ 0x080ABCF4
	ldr r2, [r0, #0x18]
	adds r2, #0xc0
	str r2, [r0, #0x18]
	ldr r1, [r0, #0x1c]
	subs r1, #0xc0
	str r1, [r0, #0x1c]
	ldr r0, _080ABD0C @ =gBgScrollRegs
	asrs r2, r2, #8
	strh r2, [r0, #4]
	asrs r1, r1, #8
	strh r1, [r0, #6]
	bx lr
	.align 2, 0
_080ABD0C: .4byte gBgScrollRegs

	thumb_func_start sub_80ABD10
sub_80ABD10: @ 0x080ABD10
	ldr r1, [r0, #0x20]
	movs r2, #0x88
	lsls r2, r2, #2
	adds r1, r1, r2
	str r1, [r0, #0x20]
	movs r2, #0xf0
	lsls r2, r2, #7
	str r2, [r0, #8]
	ldr r3, _080ABD40 @ =gSineTable
	asrs r1, r1, #8
	movs r2, #0xff
	ands r1, r2
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrh r1, [r1]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x16
	lsls r1, r1, #3
	movs r2, #0xf4
	lsls r2, r2, #7
	adds r1, r1, r2
	str r1, [r0, #0xc]
	bx lr
	.align 2, 0
_080ABD40: .4byte gSineTable

	thumb_func_start sub_80ABD44
sub_80ABD44: @ 0x080ABD44
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _080ABD98 @ =sub_80ABE28
	ldr r1, _080ABD9C @ =0x0000062C
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r3, _080ABDA0 @ =sub_80AC9E4
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	movs r2, #0
	strb r2, [r0, #1]
	movs r3, #0
	strh r2, [r0, #4]
	ldr r1, _080ABDA4 @ =0x06010000
	str r1, [r0, #0x10]
	str r2, [r0, #8]
	str r2, [r0, #0xc]
	strb r3, [r0, #2]
	strb r4, [r0]
	ldr r3, _080ABDA8 @ =gFlags
	ldr r2, [r3]
	movs r0, #0x80
	lsls r0, r0, #0xa
	ands r0, r2
	cmp r0, #0
	beq _080ABDB0
	ldr r0, _080ABDAC @ =gUnknown_080DB824
	movs r1, #0x70
	movs r2, #0x10
	bl sub_80C4564
	b _080ABDC6
	.align 2, 0
_080ABD98: .4byte sub_80ABE28
_080ABD9C: .4byte 0x0000062C
_080ABDA0: .4byte sub_80AC9E4
_080ABDA4: .4byte 0x06010000
_080ABDA8: .4byte gFlags
_080ABDAC: .4byte gUnknown_080DB824
_080ABDB0:
	ldr r1, _080ABDE0 @ =0x040000D4
	ldr r0, _080ABDE4 @ =gUnknown_080DB824
	str r0, [r1]
	ldr r0, _080ABDE8 @ =gUnknown_03003450
	str r0, [r1, #4]
	ldr r0, _080ABDEC @ =0x80000010
	str r0, [r1, #8]
	ldr r0, [r1, #8]
	movs r0, #2
	orrs r2, r0
	str r2, [r3]
_080ABDC6:
	ldr r3, _080ABDF0 @ =gFlags
	ldr r2, [r3]
	movs r0, #0x80
	lsls r0, r0, #0xa
	ands r0, r2
	cmp r0, #0
	beq _080ABDF8
	ldr r0, _080ABDF4 @ =gUnknown_080DB804
	movs r1, #0xe0
	movs r2, #0x10
	bl sub_80C4564
	b _080ABE0E
	.align 2, 0
_080ABDE0: .4byte 0x040000D4
_080ABDE4: .4byte gUnknown_080DB824
_080ABDE8: .4byte gUnknown_03003450
_080ABDEC: .4byte 0x80000010
_080ABDF0: .4byte gFlags
_080ABDF4: .4byte gUnknown_080DB804
_080ABDF8:
	ldr r1, _080ABE18 @ =0x040000D4
	ldr r0, _080ABE1C @ =gUnknown_080DB804
	str r0, [r1]
	ldr r0, _080ABE20 @ =gUnknown_03003530
	str r0, [r1, #4]
	ldr r0, _080ABE24 @ =0x80000010
	str r0, [r1, #8]
	ldr r0, [r1, #8]
	movs r0, #2
	orrs r2, r0
	str r2, [r3]
_080ABE0E:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080ABE18: .4byte 0x040000D4
_080ABE1C: .4byte gUnknown_080DB804
_080ABE20: .4byte gUnknown_03003530
_080ABE24: .4byte 0x80000010

	thumb_func_start sub_80ABE28
sub_80ABE28: @ 0x080ABE28
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	ldr r0, _080AC020 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r7, r1, r0
	ldrb r4, [r7, #1]
	adds r0, r4, #0
	adds r0, #0xa
	cmp r4, r0
	bge _080ABEA4
	ldr r6, _080AC024 @ =gUnknown_080DA420
	ldr r0, [r6, #4]
	lsls r0, r0, #5
	mov r8, r0
	movs r0, #0
	mov sb, r0
	movs r5, #0
_080ABE56:
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #3
	adds r0, #0x14
	adds r0, r7, r0
	ldr r1, [r7, #0x10]
	str r1, [r0]
	ldr r1, [r7, #0x10]
	add r1, r8
	str r1, [r7, #0x10]
	ldrh r1, [r6]
	strh r1, [r0, #0xc]
	ldrb r2, [r6, #2]
	adds r1, r4, r2
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	strh r5, [r0, #0x10]
	strh r5, [r0, #0x12]
	movs r1, #0x80
	lsls r1, r1, #2
	strh r1, [r0, #0x14]
	strh r5, [r0, #0xe]
	strh r5, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	mov r1, sb
	strb r1, [r0, #0x1f]
	movs r1, #0x80
	str r1, [r0, #8]
	bl UpdateSpriteAnimation
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldrb r0, [r7, #1]
	adds r0, #0xa
	cmp r4, r0
	blt _080ABE56
_080ABEA4:
	ldrb r0, [r7, #1]
	adds r0, #0xa
	movs r2, #0
	strb r0, [r7, #1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x1d
	bhi _080ABEB6
	b _080AC010
_080ABEB6:
	ldrb r1, [r7, #1]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, #0x14
	adds r0, r7, r0
	ldr r1, [r7, #0x10]
	str r1, [r0]
	ldr r1, [r7, #0x10]
	adds r1, #0x20
	str r1, [r7, #0x10]
	movs r4, #0
	ldr r1, _080AC028 @ =0x00000462
	mov sb, r1
	mov r1, sb
	strh r1, [r0, #0xc]
	movs r1, #0xe
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	strh r2, [r0, #0x10]
	strh r2, [r0, #0x12]
	movs r1, #0x80
	lsls r1, r1, #2
	mov r8, r1
	mov r1, r8
	strh r1, [r0, #0x14]
	strh r2, [r0, #0xe]
	strh r2, [r0, #0x16]
	movs r6, #0x10
	strb r6, [r0, #0x1c]
	strb r4, [r0, #0x1f]
	movs r5, #0x80
	str r5, [r0, #8]
	str r2, [sp]
	bl UpdateSpriteAnimation
	ldrb r0, [r7, #1]
	adds r0, #1
	strb r0, [r7, #1]
	ldrb r1, [r7, #1]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, #0x14
	adds r0, r7, r0
	ldr r1, [r7, #0x10]
	str r1, [r0]
	ldr r1, [r7, #0x10]
	adds r1, #0x40
	str r1, [r7, #0x10]
	mov r1, sb
	strh r1, [r0, #0xc]
	movs r1, #6
	strb r1, [r0, #0x1a]
	subs r1, #7
	strb r1, [r0, #0x1b]
	ldr r2, [sp]
	strh r2, [r0, #0x10]
	strh r2, [r0, #0x12]
	mov r1, r8
	strh r1, [r0, #0x14]
	strh r2, [r0, #0xe]
	strh r2, [r0, #0x16]
	strb r6, [r0, #0x1c]
	strb r4, [r0, #0x1f]
	str r5, [r0, #8]
	str r2, [sp]
	bl UpdateSpriteAnimation
	ldrb r0, [r7, #1]
	adds r0, #1
	strb r0, [r7, #1]
	ldrb r1, [r7, #1]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, #0x14
	adds r0, r7, r0
	ldr r1, [r7, #0x10]
	str r1, [r0]
	ldr r1, [r7, #0x10]
	adds r1, #0x40
	str r1, [r7, #0x10]
	mov r1, sb
	strh r1, [r0, #0xc]
	movs r1, #8
	strb r1, [r0, #0x1a]
	subs r1, #9
	strb r1, [r0, #0x1b]
	ldr r2, [sp]
	strh r2, [r0, #0x10]
	strh r2, [r0, #0x12]
	mov r1, r8
	strh r1, [r0, #0x14]
	strh r2, [r0, #0xe]
	strh r2, [r0, #0x16]
	strb r6, [r0, #0x1c]
	strb r4, [r0, #0x1f]
	str r5, [r0, #8]
	str r2, [sp]
	bl UpdateSpriteAnimation
	ldrb r0, [r7, #1]
	adds r0, #1
	strb r0, [r7, #1]
	ldrb r1, [r7, #1]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, #0x14
	adds r0, r7, r0
	ldr r1, [r7, #0x10]
	str r1, [r0]
	ldr r1, [r7, #0x10]
	adds r1, #0x40
	str r1, [r7, #0x10]
	mov r1, sb
	strh r1, [r0, #0xc]
	movs r1, #9
	strb r1, [r0, #0x1a]
	subs r1, #0xa
	strb r1, [r0, #0x1b]
	ldr r2, [sp]
	strh r2, [r0, #0x10]
	strh r2, [r0, #0x12]
	mov r1, r8
	strh r1, [r0, #0x14]
	strh r2, [r0, #0xe]
	strh r2, [r0, #0x16]
	strb r6, [r0, #0x1c]
	strb r4, [r0, #0x1f]
	str r5, [r0, #8]
	str r2, [sp]
	bl UpdateSpriteAnimation
	ldrb r0, [r7, #1]
	adds r0, #1
	strb r0, [r7, #1]
	ldrb r1, [r7, #1]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, #0x14
	adds r0, r7, r0
	ldr r1, [r7, #0x10]
	str r1, [r0]
	ldr r1, [r7, #0x10]
	adds r1, #0x40
	str r1, [r7, #0x10]
	mov r1, sb
	strh r1, [r0, #0xc]
	movs r1, #0xd
	strb r1, [r0, #0x1a]
	subs r1, #0xe
	strb r1, [r0, #0x1b]
	ldr r2, [sp]
	strh r2, [r0, #0x10]
	strh r2, [r0, #0x12]
	mov r1, r8
	strh r1, [r0, #0x14]
	strh r2, [r0, #0xe]
	strh r2, [r0, #0x16]
	strb r6, [r0, #0x1c]
	strb r4, [r0, #0x1f]
	str r5, [r0, #8]
	bl UpdateSpriteAnimation
	strb r4, [r7, #1]
	ldr r0, _080AC020 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080AC02C @ =sub_80AC030
	str r0, [r1, #8]
_080AC010:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AC020: .4byte gCurTask
_080AC024: .4byte gUnknown_080DA420
_080AC028: .4byte 0x00000462
_080AC02C: .4byte sub_80AC030

	thumb_func_start sub_80AC030
sub_80AC030: @ 0x080AC030
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r0, _080AC0B4 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	movs r5, #0
	ldr r7, _080AC0B8 @ =gUnknown_080DB844
	movs r0, #0
	mov r8, r0
	movs r6, #0
_080AC04C:
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	ldr r1, _080AC0BC @ =0x0000058C
	adds r0, r0, r1
	adds r0, r4, r0
	ldr r1, [r4, #0x10]
	str r1, [r0]
	lsls r3, r5, #3
	adds r1, r7, #4
	adds r1, r3, r1
	ldr r2, [r1]
	lsls r2, r2, #5
	ldr r1, [r4, #0x10]
	adds r1, r1, r2
	str r1, [r4, #0x10]
	adds r3, r3, r7
	ldrh r1, [r3]
	strh r1, [r0, #0xc]
	ldrb r1, [r3, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	strh r6, [r0, #0x10]
	strh r6, [r0, #0x12]
	movs r1, #0x80
	lsls r1, r1, #2
	strh r1, [r0, #0x14]
	strh r6, [r0, #0xe]
	strh r6, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	mov r1, r8
	strb r1, [r0, #0x1f]
	movs r1, #0x80
	str r1, [r0, #8]
	bl UpdateSpriteAnimation
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #3
	bls _080AC04C
	ldr r0, _080AC0B4 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080AC0C0 @ =sub_80AC0C4
	str r0, [r1, #8]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AC0B4: .4byte gCurTask
_080AC0B8: .4byte gUnknown_080DB844
_080AC0BC: .4byte 0x0000058C
_080AC0C0: .4byte sub_80AC0C4

	thumb_func_start sub_80AC0C4
sub_80AC0C4: @ 0x080AC0C4
	push {r4, r5, lr}
	sub sp, #4
	ldr r0, _080AC0F0 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_80AC2B4
	ldrb r0, [r4]
	cmp r0, #0
	bne _080AC0F8
	ldr r0, _080AC0F4 @ =gSaveGame
	ldrh r1, [r0, #0x34]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	bne _080AC104
	b _080AC15C
	.align 2, 0
_080AC0F0: .4byte gCurTask
_080AC0F4: .4byte gSaveGame
_080AC0F8:
	ldr r0, _080AC13C @ =gSaveGame
	ldrh r1, [r0, #0x34]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _080AC15C
_080AC104:
	ldr r0, _080AC140 @ =gInput
	ldrh r1, [r0]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080AC15C
	ldr r1, _080AC144 @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _080AC148 @ =gBackgroundsCopyQueueCursor
	ldr r0, _080AC14C @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _080AC150 @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _080AC154 @ =gVramGraphicsCopyCursor
	ldr r0, _080AC158 @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldrb r0, [r4]
	adds r0, #2
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bl sub_80AA554
	b _080AC1D8
	.align 2, 0
_080AC13C: .4byte gSaveGame
_080AC140: .4byte gInput
_080AC144: .4byte 0x0000FFFF
_080AC148: .4byte gBackgroundsCopyQueueCursor
_080AC14C: .4byte gBackgroundsCopyQueueIndex
_080AC150: .4byte gUnknown_03006840
_080AC154: .4byte gVramGraphicsCopyCursor
_080AC158: .4byte gVramGraphicsCopyQueueIndex
_080AC15C:
	ldr r1, [r4, #0xc]
	adds r1, #0x80
	str r1, [r4, #0xc]
	lsrs r1, r1, #8
	subs r1, #0xa
	ldr r2, _080AC1A8 @ =strCredits_CreatedBy
	ldrb r5, [r4, #1]
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #3
	adds r2, r0, r2
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	movs r3, #0x24
	ldrsh r0, [r2, r3]
	cmp r1, r0
	blt _080AC1D8
	adds r0, r2, #0
	adds r0, #0x26
	ldrb r0, [r0]
	cmp r0, #2
	bne _080AC1B0
	ldrb r1, [r4, #2]
	ldr r0, _080AC1AC @ =0x0000058C
	adds r2, r4, r0
	adds r3, r4, #0
	adds r3, #8
	adds r0, r4, #0
	adds r0, #0xc
	str r0, [sp]
	adds r0, r5, #0
	bl sub_80ACA80
	ldrb r0, [r4, #2]
	adds r0, #1
	strb r0, [r4, #2]
	b _080AC1C2
	.align 2, 0
_080AC1A8: .4byte strCredits_CreatedBy
_080AC1AC: .4byte 0x0000058C
_080AC1B0:
	adds r1, r4, #0
	adds r1, #0x14
	adds r2, r4, #0
	adds r2, #8
	adds r3, r4, #0
	adds r3, #0xc
	adds r0, r5, #0
	bl sub_80AC9E8
_080AC1C2:
	ldrb r0, [r4, #1]
	adds r0, #1
	strb r0, [r4, #1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x7e
	bls _080AC1D8
	ldr r0, _080AC1E0 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080AC1E4 @ =sub_80AC1E8
	str r0, [r1, #8]
_080AC1D8:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AC1E0: .4byte gCurTask
_080AC1E4: .4byte sub_80AC1E8

	thumb_func_start sub_80AC1E8
sub_80AC1E8: @ 0x080AC1E8
	push {r4, lr}
	ldr r0, _080AC210 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_80AC2B4
	ldrb r0, [r4]
	cmp r0, #0
	bne _080AC218
	ldr r0, _080AC214 @ =gSaveGame
	ldrh r1, [r0, #0x34]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	bne _080AC224
	b _080AC27C
	.align 2, 0
_080AC210: .4byte gCurTask
_080AC214: .4byte gSaveGame
_080AC218:
	ldr r0, _080AC25C @ =gSaveGame
	ldrh r1, [r0, #0x34]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _080AC27C
_080AC224:
	ldr r0, _080AC260 @ =gInput
	ldrh r1, [r0]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080AC27C
	ldr r1, _080AC264 @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _080AC268 @ =gBackgroundsCopyQueueCursor
	ldr r0, _080AC26C @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _080AC270 @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _080AC274 @ =gVramGraphicsCopyCursor
	ldr r0, _080AC278 @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldrb r0, [r4]
	adds r0, #2
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bl sub_80AA554
	b _080AC2A0
	.align 2, 0
_080AC25C: .4byte gSaveGame
_080AC260: .4byte gInput
_080AC264: .4byte 0x0000FFFF
_080AC268: .4byte gBackgroundsCopyQueueCursor
_080AC26C: .4byte gBackgroundsCopyQueueIndex
_080AC270: .4byte gUnknown_03006840
_080AC274: .4byte gVramGraphicsCopyCursor
_080AC278: .4byte gVramGraphicsCopyQueueIndex
_080AC27C:
	ldr r0, [r4, #0xc]
	adds r0, #0x80
	str r0, [r4, #0xc]
	lsrs r0, r0, #8
	ldr r1, _080AC2A8 @ =strCredits_CreatedBy
	ldr r2, _080AC2AC @ =0x000013D4
	adds r1, r1, r2
	ldrh r1, [r1]
	adds r1, #0x82
	cmp r0, r1
	blo _080AC2A0
	ldrb r0, [r4]
	bl sub_80ACAF0
	ldr r0, _080AC2B0 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
_080AC2A0:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AC2A8: .4byte strCredits_CreatedBy
_080AC2AC: .4byte 0x000013D4
_080AC2B0: .4byte gCurTask

	thumb_func_start sub_80AC2B4
sub_80AC2B4: @ 0x080AC2B4
	push {r4, lr}
	movs r3, #0
	ldr r2, _080AC380 @ =gFlags
	ldr r0, [r2]
	movs r1, #4
	orrs r0, r1
	str r0, [r2]
	ldr r1, _080AC384 @ =gUnknown_03003C5C
	ldr r0, _080AC388 @ =0x04000052
	str r0, [r1]
	ldr r1, _080AC38C @ =gUnknown_03003F30
	movs r0, #2
	strb r0, [r1]
	ldr r0, _080AC390 @ =gBgOffsetsHBlank
	ldr r1, [r0]
	movs r2, #0
	movs r0, #0xff
	lsls r0, r0, #8
	adds r4, r0, #0
_080AC2DA:
	strh r4, [r1]
	adds r1, #2
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0x27
	bls _080AC2DA
	movs r2, #0x28
	movs r0, #0xf0
	lsls r0, r0, #4
	adds r4, r0, #0
_080AC2F0:
	strh r4, [r1]
	adds r1, #2
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0x31
	bls _080AC2F0
	movs r2, #0x32
	ldr r4, _080AC394 @ =gUnknown_080DB930
_080AC302:
	lsls r0, r3, #1
	adds r0, r0, r4
	ldrh r0, [r0]
	strh r0, [r1]
	adds r1, #2
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0x40
	bls _080AC302
	movs r2, #0x41
	movs r3, #0xf
_080AC320:
	strh r3, [r1]
	adds r1, #2
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0x68
	bls _080AC320
	movs r3, #0xe
	movs r2, #0x69
	ldr r4, _080AC394 @ =gUnknown_080DB930
_080AC334:
	lsls r0, r3, #1
	adds r0, r0, r4
	ldrh r0, [r0]
	strh r0, [r1]
	adds r1, #2
	subs r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0x77
	bls _080AC334
	movs r2, #0x73
	movs r0, #0xf0
	lsls r0, r0, #4
	adds r3, r0, #0
_080AC356:
	strh r3, [r1]
	adds r1, #2
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0x82
	bls _080AC356
	movs r2, #0x82
	movs r0, #0xff
	lsls r0, r0, #8
	adds r3, r0, #0
_080AC36C:
	strh r3, [r1]
	adds r1, #2
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0xa0
	bls _080AC36C
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AC380: .4byte gFlags
_080AC384: .4byte gUnknown_03003C5C
_080AC388: .4byte 0x04000052
_080AC38C: .4byte gUnknown_03003F30
_080AC390: .4byte gBgOffsetsHBlank
_080AC394: .4byte gUnknown_080DB930

	thumb_func_start sub_80AC398
sub_80AC398: @ 0x080AC398
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	movs r0, #0x80
	mov sb, r0
	ldr r0, _080AC408 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r1, r0
	movs r4, #0
	ldr r2, _080AC40C @ =strCredits_CreatedBy
	ldrb r3, [r6]
	lsls r0, r3, #2
	adds r0, r0, r3
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrb r0, [r0]
	cmp r4, r0
	blt _080AC3C6
	b _080AC4F4
_080AC3C6:
	lsls r0, r4, #0x18
	asrs r4, r0, #0x18
	lsls r1, r3, #2
	adds r1, r1, r3
	lsls r1, r1, #3
	adds r1, r4, r1
	adds r2, #1
	adds r1, r1, r2
	ldrb r1, [r1]
	adds r3, r1, #0
	mov r8, r0
	cmp r3, #0x30
	bne _080AC410
	adds r1, r4, #1
	lsls r1, r1, #3
	adds r0, r6, #0
	adds r0, #0x14
	adds r1, r0, r1
	lsls r2, r4, #3
	adds r0, r0, r2
	ldr r0, [r0]
	movs r3, #0x80
	lsls r3, r3, #4
	adds r0, r0, r3
	str r0, [r1]
	adds r1, r6, #0
	adds r1, #0x18
	adds r1, r1, r2
	ldr r0, [r1]
	mov r2, sb
	subs r0, r0, r2
	str r0, [r1]
	b _080AC4D6
	.align 2, 0
_080AC408: .4byte gCurTask
_080AC40C: .4byte strCredits_CreatedBy
_080AC410:
	cmp r3, #0x2e
	bne _080AC418
	movs r1, #0x1e
	b _080AC440
_080AC418:
	cmp r3, #0x26
	bne _080AC420
	movs r1, #0x1f
	b _080AC440
_080AC420:
	cmp r3, #0x28
	bne _080AC428
	movs r1, #0x20
	b _080AC440
_080AC428:
	cmp r3, #0x29
	bne _080AC430
	movs r1, #0x21
	b _080AC440
_080AC430:
	cmp r3, #0x2d
	bne _080AC438
	movs r1, #0x22
	b _080AC440
_080AC438:
	adds r0, r1, #0
	subs r0, #0x41
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
_080AC440:
	movs r3, #0x96
	lsls r3, r3, #1
	adds r0, r6, r3
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	lsls r7, r1, #2
	adds r1, r7, r1
	lsls r1, r1, #3
	ldr r0, [r0]
	adds r5, r0, r1
	ldr r1, [r6, #0xc]
	movs r0, #0
	mov ip, r0
	strh r1, [r5, #0x10]
	mov r2, r8
	asrs r4, r2, #0x18
	adds r3, r6, #0
	adds r3, #0x14
	cmp r4, #0
	beq _080AC474
	lsls r0, r4, #3
	adds r0, r3, r0
	ldr r0, [r0]
	asrs r0, r0, #8
	adds r0, r1, r0
	strh r0, [r5, #0x10]
_080AC474:
	adds r2, r4, #1
	lsls r2, r2, #3
	adds r2, r3, r2
	lsls r4, r4, #3
	adds r3, r3, r4
	ldr r0, _080AC4BC @ =gUnknown_080DB868
	adds r0, r7, r0
	ldr r1, [r0]
	lsls r1, r1, #8
	ldr r0, [r3]
	adds r0, r0, r1
	str r0, [r2]
	ldr r2, [r6, #0x10]
	adds r1, r6, #0
	adds r1, #0x18
	adds r1, r1, r4
	ldr r0, [r1]
	asrs r0, r0, #8
	adds r2, r2, r0
	strh r2, [r5, #0x12]
	ldr r0, [r1]
	mov r3, sb
	subs r0, r0, r3
	str r0, [r1]
	ldr r2, _080AC4C0 @ =strCredits_CreatedBy
	ldrb r1, [r6]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x26
	ldrb r0, [r0]
	cmp r0, #1
	bne _080AC4C4
	movs r0, #8
	b _080AC4CE
	.align 2, 0
_080AC4BC: .4byte gUnknown_080DB868
_080AC4C0: .4byte strCredits_CreatedBy
_080AC4C4:
	cmp r0, #3
	bne _080AC4CC
	mov r0, ip
	b _080AC4CE
_080AC4CC:
	movs r0, #1
_080AC4CE:
	strb r0, [r5, #0x1f]
	adds r0, r5, #0
	bl DisplaySprite
_080AC4D6:
	movs r1, #0x80
	lsls r1, r1, #0x11
	add r1, r8
	lsrs r4, r1, #0x18
	asrs r1, r1, #0x18
	ldr r2, _080AC510 @ =strCredits_CreatedBy
	ldrb r3, [r6]
	lsls r0, r3, #2
	adds r0, r0, r3
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrb r0, [r0]
	cmp r1, r0
	bge _080AC4F4
	b _080AC3C6
_080AC4F4:
	ldr r1, [r6, #0x18]
	ldr r0, _080AC514 @ =0x00002CFF
	cmp r1, r0
	bgt _080AC504
	ldr r0, _080AC518 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
_080AC504:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AC510: .4byte strCredits_CreatedBy
_080AC514: .4byte 0x00002CFF
_080AC518: .4byte gCurTask

	thumb_func_start sub_80AC51C
sub_80AC51C: @ 0x080AC51C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	ldr r6, _080AC5B4 @ =gCurTask
	ldr r0, [r6]
	ldrh r2, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r2, r0
	ldrb r0, [r5, #1]
	adds r1, r0, #0
	cmp r1, #0xe
	bhi _080AC5C0
	adds r0, #5
	strb r0, [r5, #1]
	adds r4, r1, #0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r4, r0
	bhs _080AC606
	ldr r7, _080AC5B8 @ =gUnknown_080DB950
	movs r0, #0
	mov sl, r0
	movs r6, #0
	ldr r1, _080AC5BC @ =gUnknown_080DB958
	mov r8, r1
	movs r2, #1
	add r2, r8
	mov sb, r2
_080AC55A:
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #3
	adds r0, #0x3c
	adds r0, r5, r0
	ldr r1, [r5, #8]
	str r1, [r0]
	ldr r1, [r5, #8]
	adds r1, #0x80
	str r1, [r5, #8]
	ldrh r1, [r7]
	strh r1, [r0, #0xc]
	ldrb r3, [r7, #2]
	adds r1, r4, r3
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	lsls r2, r4, #1
	mov r3, r8
	adds r1, r2, r3
	ldrb r1, [r1]
	adds r1, #0x38
	strh r1, [r0, #0x10]
	add r2, sb
	ldrb r1, [r2]
	adds r1, #0x84
	strh r1, [r0, #0x12]
	strh r6, [r0, #0x14]
	strh r6, [r0, #0xe]
	strh r6, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	mov r1, sl
	strb r1, [r0, #0x1f]
	str r6, [r0, #8]
	bl UpdateSpriteAnimation
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldrb r2, [r5, #1]
	cmp r4, r2
	blo _080AC55A
	b _080AC606
	.align 2, 0
_080AC5B4: .4byte gCurTask
_080AC5B8: .4byte gUnknown_080DB950
_080AC5BC: .4byte gUnknown_080DB958
_080AC5C0:
	ldr r3, _080AC614 @ =0x03000014
	adds r0, r2, r3
	ldr r1, [r5, #8]
	str r1, [r0]
	ldr r1, [r5, #8]
	movs r2, #0xb0
	lsls r2, r2, #3
	adds r1, r1, r2
	str r1, [r5, #8]
	movs r4, #0
	movs r2, #0
	ldr r1, _080AC618 @ =0x000005F1
	strh r1, [r0, #0xc]
	strb r4, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r5, #0xc]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r5, #0x10]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r2, [r0, #0x14]
	strh r2, [r0, #0xe]
	strh r2, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	strb r4, [r0, #0x1f]
	str r2, [r0, #8]
	bl UpdateSpriteAnimation
	strb r4, [r5, #1]
	ldr r1, [r6]
	ldr r0, _080AC61C @ =sub_80AC620
	str r0, [r1, #8]
_080AC606:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AC614: .4byte 0x03000014
_080AC618: .4byte 0x000005F1
_080AC61C: .4byte sub_80AC620

	thumb_func_start sub_80AC620
sub_80AC620: @ 0x080AC620
	push {r4, lr}
	ldr r0, _080AC648 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_80ACBD4
	ldrb r0, [r4]
	cmp r0, #0
	bne _080AC650
	ldr r0, _080AC64C @ =gSaveGame
	ldrh r1, [r0, #0x34]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	bne _080AC65C
	b _080AC6B4
	.align 2, 0
_080AC648: .4byte gCurTask
_080AC64C: .4byte gSaveGame
_080AC650:
	ldr r0, _080AC694 @ =gSaveGame
	ldrh r1, [r0, #0x34]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _080AC6B4
_080AC65C:
	ldr r0, _080AC698 @ =gInput
	ldrh r1, [r0]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080AC6B4
	ldr r1, _080AC69C @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _080AC6A0 @ =gBackgroundsCopyQueueCursor
	ldr r0, _080AC6A4 @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _080AC6A8 @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _080AC6AC @ =gVramGraphicsCopyCursor
	ldr r0, _080AC6B0 @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldrb r0, [r4]
	adds r0, #2
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bl sub_80AA554
	b _080AC6CE
	.align 2, 0
_080AC694: .4byte gSaveGame
_080AC698: .4byte gInput
_080AC69C: .4byte 0x0000FFFF
_080AC6A0: .4byte gBackgroundsCopyQueueCursor
_080AC6A4: .4byte gBackgroundsCopyQueueIndex
_080AC6A8: .4byte gUnknown_03006840
_080AC6AC: .4byte gVramGraphicsCopyCursor
_080AC6B0: .4byte gVramGraphicsCopyQueueIndex
_080AC6B4:
	adds r0, r4, #0
	bl sub_80ACBA8
	cmp r0, #1
	bne _080AC6CE
	movs r0, #0x80
	lsls r0, r0, #2
	bl m4aSongNumStart
	ldr r0, _080AC6D4 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080AC6D8 @ =sub_80AC6DC
	str r0, [r1, #8]
_080AC6CE:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AC6D4: .4byte gCurTask
_080AC6D8: .4byte sub_80AC6DC

	thumb_func_start sub_80AC6DC
sub_80AC6DC: @ 0x080AC6DC
	push {r4, lr}
	ldr r0, _080AC724 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldrb r0, [r4, #2]
	subs r0, #1
	strb r0, [r4, #2]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0x1d
	bgt _080AC70A
	adds r0, r4, #0
	bl sub_80ACBD4
	movs r0, #2
	ldrsb r0, [r4, r0]
	cmp r0, #0
	bge _080AC70A
	movs r0, #0x32
	strb r0, [r4, #2]
_080AC70A:
	adds r0, r4, #0
	bl sub_80ACBF0
	ldrb r0, [r4]
	cmp r0, #0
	bne _080AC72C
	ldr r0, _080AC728 @ =gSaveGame
	ldrh r1, [r0, #0x34]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	bne _080AC738
	b _080AC790
	.align 2, 0
_080AC724: .4byte gCurTask
_080AC728: .4byte gSaveGame
_080AC72C:
	ldr r0, _080AC770 @ =gSaveGame
	ldrh r1, [r0, #0x34]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _080AC790
_080AC738:
	ldr r0, _080AC774 @ =gInput
	ldrh r1, [r0]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080AC790
	ldr r1, _080AC778 @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _080AC77C @ =gBackgroundsCopyQueueCursor
	ldr r0, _080AC780 @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _080AC784 @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _080AC788 @ =gVramGraphicsCopyCursor
	ldr r0, _080AC78C @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldrb r0, [r4]
	adds r0, #2
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bl sub_80AA554
	b _080AC7C2
	.align 2, 0
_080AC770: .4byte gSaveGame
_080AC774: .4byte gInput
_080AC778: .4byte 0x0000FFFF
_080AC77C: .4byte gBackgroundsCopyQueueCursor
_080AC780: .4byte gBackgroundsCopyQueueIndex
_080AC784: .4byte gUnknown_03006840
_080AC788: .4byte gVramGraphicsCopyCursor
_080AC78C: .4byte gVramGraphicsCopyQueueIndex
_080AC790:
	ldrb r1, [r4, #1]
	cmp r1, #0x12
	bhi _080AC7BA
	ldrh r0, [r4, #4]
	adds r0, #1
	strh r0, [r4, #4]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xa
	bne _080AC7C2
	movs r0, #0
	strh r0, [r4, #4]
	adds r0, r1, #1
	strb r0, [r4, #1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x13
	bls _080AC7C2
	movs r0, #0x13
	strb r0, [r4, #1]
	b _080AC7C2
_080AC7BA:
	ldr r0, _080AC7C8 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080AC7CC @ =sub_80AC7D0
	str r0, [r1, #8]
_080AC7C2:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AC7C8: .4byte gCurTask
_080AC7CC: .4byte sub_80AC7D0

	thumb_func_start sub_80AC7D0
sub_80AC7D0: @ 0x080AC7D0
	push {r4, lr}
	ldr r0, _080AC7F8 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_80ACBF0
	ldrb r0, [r4]
	cmp r0, #0
	bne _080AC800
	ldr r0, _080AC7FC @ =gSaveGame
	ldrh r1, [r0, #0x34]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	bne _080AC80C
	b _080AC864
	.align 2, 0
_080AC7F8: .4byte gCurTask
_080AC7FC: .4byte gSaveGame
_080AC800:
	ldr r0, _080AC844 @ =gSaveGame
	ldrh r1, [r0, #0x34]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _080AC864
_080AC80C:
	ldr r0, _080AC848 @ =gInput
	ldrh r1, [r0]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080AC864
	ldr r1, _080AC84C @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _080AC850 @ =gBackgroundsCopyQueueCursor
	ldr r0, _080AC854 @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _080AC858 @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _080AC85C @ =gVramGraphicsCopyCursor
	ldr r0, _080AC860 @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldrb r0, [r4]
	adds r0, #2
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bl sub_80AA554
	b _080AC8E8
	.align 2, 0
_080AC844: .4byte gSaveGame
_080AC848: .4byte gInput
_080AC84C: .4byte 0x0000FFFF
_080AC850: .4byte gBackgroundsCopyQueueCursor
_080AC854: .4byte gBackgroundsCopyQueueIndex
_080AC858: .4byte gUnknown_03006840
_080AC85C: .4byte gVramGraphicsCopyCursor
_080AC860: .4byte gVramGraphicsCopyQueueIndex
_080AC864:
	ldrh r0, [r4, #4]
	adds r0, #1
	strh r0, [r4, #4]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x78
	ble _080AC8C8
	ldr r2, _080AC8B0 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r2, _080AC8B4 @ =gWinRegs
	movs r0, #0xf0
	strh r0, [r2]
	movs r0, #0xa0
	strh r0, [r2, #4]
	ldrh r0, [r2, #8]
	movs r1, #0x3f
	orrs r0, r1
	strh r0, [r2, #8]
	ldrh r0, [r2, #0xa]
	movs r1, #0x1f
	orrs r0, r1
	strh r0, [r2, #0xa]
	ldr r1, _080AC8B8 @ =gBldRegs
	ldr r0, _080AC8BC @ =0x00003FFF
	strh r0, [r1]
	movs r0, #0
	strh r0, [r4, #6]
	ldr r0, _080AC8C0 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080AC8C4 @ =sub_80AC8F0
	str r0, [r1, #8]
	b _080AC8E8
	.align 2, 0
_080AC8B0: .4byte gDispCnt
_080AC8B4: .4byte gWinRegs
_080AC8B8: .4byte gBldRegs
_080AC8BC: .4byte 0x00003FFF
_080AC8C0: .4byte gCurTask
_080AC8C4: .4byte sub_80AC8F0
_080AC8C8:
	ldrb r0, [r4, #2]
	subs r0, #1
	strb r0, [r4, #2]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0x1d
	bgt _080AC8E8
	adds r0, r4, #0
	bl sub_80ACBD4
	movs r0, #2
	ldrsb r0, [r4, r0]
	cmp r0, #0
	bge _080AC8E8
	movs r0, #0x32
	strb r0, [r4, #2]
_080AC8E8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80AC8F0
sub_80AC8F0: @ 0x080AC8F0
	push {r4, lr}
	ldr r0, _080AC914 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldrb r0, [r4]
	cmp r0, #0
	bne _080AC91C
	ldr r0, _080AC918 @ =gSaveGame
	ldrh r1, [r0, #0x34]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	bne _080AC928
	b _080AC980
	.align 2, 0
_080AC914: .4byte gCurTask
_080AC918: .4byte gSaveGame
_080AC91C:
	ldr r0, _080AC960 @ =gSaveGame
	ldrh r1, [r0, #0x34]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _080AC980
_080AC928:
	ldr r0, _080AC964 @ =gInput
	ldrh r1, [r0]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080AC980
	ldr r1, _080AC968 @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _080AC96C @ =gBackgroundsCopyQueueCursor
	ldr r0, _080AC970 @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _080AC974 @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _080AC978 @ =gVramGraphicsCopyCursor
	ldr r0, _080AC97C @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldrb r0, [r4]
	adds r0, #2
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bl sub_80AA554
	b _080AC9DC
	.align 2, 0
_080AC960: .4byte gSaveGame
_080AC964: .4byte gInput
_080AC968: .4byte 0x0000FFFF
_080AC96C: .4byte gBackgroundsCopyQueueCursor
_080AC970: .4byte gBackgroundsCopyQueueIndex
_080AC974: .4byte gUnknown_03006840
_080AC978: .4byte gVramGraphicsCopyCursor
_080AC97C: .4byte gVramGraphicsCopyQueueIndex
_080AC980:
	ldr r1, _080AC99C @ =gBldRegs
	ldrh r0, [r1, #4]
	cmp r0, #0xf
	bls _080AC9A4
	movs r0, #0x10
	strh r0, [r1, #4]
	ldrb r0, [r4]
	bl sub_80AA554
	ldr r0, _080AC9A0 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
	b _080AC9DC
	.align 2, 0
_080AC99C: .4byte gBldRegs
_080AC9A0: .4byte gCurTask
_080AC9A4:
	ldrh r0, [r4, #6]
	lsrs r0, r0, #8
	strh r0, [r1, #4]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r1, #0
	ldrh r1, [r4, #6]
	adds r0, r0, r1
	strh r0, [r4, #6]
	ldrb r0, [r4, #2]
	subs r0, #1
	strb r0, [r4, #2]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0x1d
	bgt _080AC9D6
	adds r0, r4, #0
	bl sub_80ACBD4
	movs r0, #2
	ldrsb r0, [r4, r0]
	cmp r0, #0
	bge _080AC9D6
	movs r0, #0x32
	strb r0, [r4, #2]
_080AC9D6:
	adds r0, r4, #0
	bl sub_80ACBF0
_080AC9DC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80AC9E4
sub_80AC9E4: @ 0x080AC9E4
	bx lr
	.align 2, 0

	thumb_func_start sub_80AC9E8
sub_80AC9E8: @ 0x080AC9E8
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #4
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	mov r8, r3
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _080ACA6C @ =sub_80AC398
	movs r1, #0x98
	lsls r1, r1, #1
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r3, _080ACA70 @ =sub_80ACB48
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	ldrh r3, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r1, r3, r1
	ldr r2, _080ACA74 @ =0x0300012C
	adds r0, r3, r2
	str r5, [r0]
	movs r5, #0
	strb r4, [r1]
	str r6, [r1, #4]
	mov r0, r8
	str r0, [r1, #8]
	ldr r4, _080ACA78 @ =strCredits_CreatedBy
	ldrb r2, [r1]
	lsls r0, r2, #2
	adds r0, r0, r2
	lsls r0, r0, #3
	adds r0, r0, r4
	ldrh r0, [r0, #0x22]
	str r0, [r1, #0xc]
	str r5, [r1, #0x10]
	movs r2, #0
	ldr r0, _080ACA7C @ =0x03000014
	adds r4, r3, r0
	movs r6, #0
	adds r0, #4
	adds r3, r3, r0
	movs r5, #0x82
	lsls r5, r5, #8
_080ACA4A:
	lsls r1, r2, #3
	adds r0, r4, r1
	str r6, [r0]
	adds r1, r3, r1
	str r5, [r1]
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0x22
	bls _080ACA4A
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080ACA6C: .4byte sub_80AC398
_080ACA70: .4byte sub_80ACB48
_080ACA74: .4byte 0x0300012C
_080ACA78: .4byte strCredits_CreatedBy
_080ACA7C: .4byte 0x03000014

	thumb_func_start sub_80ACA80
sub_80ACA80: @ 0x080ACA80
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r5, r0, #0
	adds r4, r1, #0
	mov r8, r2
	adds r6, r3, #0
	ldr r7, [sp, #0x1c]
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _080ACAE4 @ =sub_80ACB50
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r1, _080ACAE8 @ =sub_80ACB4C
	str r1, [sp]
	movs r1, #0x18
	movs r3, #0
	bl TaskCreate
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r1, r1, r0
	strb r4, [r1, #1]
	strb r5, [r1]
	str r6, [r1, #4]
	str r7, [r1, #8]
	ldr r3, _080ACAEC @ =strCredits_CreatedBy
	ldrb r2, [r1]
	lsls r0, r2, #2
	adds r0, r0, r2
	lsls r0, r0, #3
	adds r0, r0, r3
	ldrh r0, [r0, #0x22]
	lsls r0, r0, #8
	str r0, [r1, #0xc]
	movs r0, #0x82
	lsls r0, r0, #8
	str r0, [r1, #0x10]
	mov r0, r8
	str r0, [r1, #0x14]
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080ACAE4: .4byte sub_80ACB50
_080ACAE8: .4byte sub_80ACB4C
_080ACAEC: .4byte strCredits_CreatedBy

	thumb_func_start sub_80ACAF0
sub_80ACAF0: @ 0x080ACAF0
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _080ACB3C @ =sub_80AC51C
	movs r1, #0xa5
	lsls r1, r1, #2
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r3, _080ACB40 @ =sub_80ACBA4
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	movs r2, #0
	strb r4, [r0]
	strb r2, [r0, #1]
	strh r2, [r0, #4]
	movs r1, #0x1e
	strb r1, [r0, #2]
	movs r1, #0xf0
	lsls r1, r1, #7
	str r1, [r0, #0xc]
	movs r1, #0x8c
	lsls r1, r1, #8
	str r1, [r0, #0x10]
	strh r2, [r0, #6]
	ldr r1, _080ACB44 @ =0x06010000
	str r1, [r0, #8]
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080ACB3C: .4byte sub_80AC51C
_080ACB40: .4byte sub_80ACBA4
_080ACB44: .4byte 0x06010000

	thumb_func_start sub_80ACB48
sub_80ACB48: @ 0x080ACB48
	bx lr
	.align 2, 0

	thumb_func_start sub_80ACB4C
sub_80ACB4C: @ 0x080ACB4C
	bx lr
	.align 2, 0

	thumb_func_start sub_80ACB50
sub_80ACB50: @ 0x080ACB50
	push {r4, r5, lr}
	ldr r5, _080ACB98 @ =gCurTask
	ldr r0, [r5]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	ldr r1, _080ACB9C @ =gUnknown_080DB864
	ldrb r0, [r4, #1]
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r1, r0, #2
	adds r1, r1, r0
	lsls r1, r1, #3
	ldr r0, [r4, #0x14]
	adds r0, r0, r1
	ldr r1, [r4, #0xc]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r4, #0x10]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	bl DisplaySprite
	ldr r0, [r4, #0x10]
	subs r0, #0x80
	str r0, [r4, #0x10]
	ldr r1, _080ACBA0 @ =0x00001DFF
	cmp r0, r1
	bgt _080ACB92
	ldr r0, [r5]
	bl TaskDestroy
_080ACB92:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080ACB98: .4byte gCurTask
_080ACB9C: .4byte gUnknown_080DB864
_080ACBA0: .4byte 0x00001DFF
    
	thumb_func_start sub_80ACBA4
sub_80ACBA4: @ 0x080ACBA4
	bx lr
	.align 2, 0

	thumb_func_start sub_80ACBA8
sub_80ACBA8: @ 0x080ACBA8
	push {lr}
	adds r1, r0, #0
	ldr r0, [r1, #0x10]
	movs r2, #0xa0
	lsls r2, r2, #5
	cmp r0, r2
	ble _080ACBC0
	ldr r3, _080ACBC8 @ =0xFFFFFE00
	adds r0, r0, r3
	str r0, [r1, #0x10]
	cmp r0, r2
	bgt _080ACBCC
_080ACBC0:
	str r2, [r1, #0x10]
	movs r0, #1
	b _080ACBCE
	.align 2, 0
_080ACBC8: .4byte 0xFFFFFE00
_080ACBCC:
	movs r0, #0
_080ACBCE:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80ACBD4
sub_80ACBD4: @ 0x080ACBD4
	push {lr}
	adds r2, r0, #0
	adds r2, #0x14
	ldr r1, [r0, #0xc]
	asrs r1, r1, #8
	strh r1, [r2, #0x10]
	ldr r0, [r0, #0x10]
	asrs r0, r0, #8
	strh r0, [r2, #0x12]
	adds r0, r2, #0
	bl DisplaySprite
	pop {r0}
	bx r0

	thumb_func_start sub_80ACBF0
sub_80ACBF0: @ 0x080ACBF0
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	movs r4, #0
	ldrb r0, [r5, #1]
	cmp r4, r0
	bhs _080ACC32
	ldr r6, _080ACC38 @ =gUnknown_080DB958
	adds r7, r6, #1
_080ACC00:
	ldr r0, _080ACC3C @ =gUnknown_080DB97E
	adds r0, r4, r0
	ldrb r1, [r0]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, #0x3c
	adds r0, r5, r0
	lsls r2, r4, #1
	adds r1, r2, r6
	ldrb r1, [r1]
	adds r1, #0x38
	strh r1, [r0, #0x10]
	adds r2, r2, r7
	ldrb r1, [r2]
	adds r1, #0x84
	strh r1, [r0, #0x12]
	bl DisplaySprite
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldrb r0, [r5, #1]
	cmp r4, r0
	blo _080ACC00
_080ACC32:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080ACC38: .4byte gUnknown_080DB958
_080ACC3C: .4byte gUnknown_080DB97E

	thumb_func_start sub_80ACC40
sub_80ACC40: @ 0x080ACC40
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	adds r6, r0, #0
	lsls r6, r6, #0x18
	lsrs r6, r6, #0x18
	movs r7, #0
	ldr r0, _080ACCF4 @ =sub_80AE248
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r1, _080ACCF8 @ =sub_80AE224
	str r1, [sp]
	movs r1, #0xb8
	movs r3, #0
	bl TaskCreate
	ldrh r5, [r0, #6]
	movs r4, #0xc0
	lsls r4, r4, #0x12
	adds r4, r5, r4
	movs r0, #0
	mov sb, r0
	strb r7, [r4, #0x1b]
	movs r1, #0
	mov r8, r1
	strh r7, [r4, #0x1c]
	mov r0, r8
	strb r0, [r4, #0x10]
	strh r7, [r4, #0x1e]
	str r7, [r4, #0x14]
	strb r6, [r4, #0x18]
	strb r0, [r4, #0x1a]
	movs r0, #1
	str r0, [r4]
	str r7, [r4, #8]
	str r7, [r4, #0xc]
	movs r0, #0x12
	strb r0, [r4, #0x19]
	ldr r1, _080ACCFC @ =0xFFFF2E00
	str r1, [r4, #0x20]
	movs r0, #0xe0
	lsls r0, r0, #5
	str r0, [r4, #0x24]
	str r1, [r4, #0x28]
	movs r0, #0x98
	lsls r0, r0, #7
	str r0, [r4, #0x2c]
	ldr r7, _080ACD00 @ =0x00000CAC
	adds r0, r7, #0
	bl EwramMalloc
	ldr r1, _080ACD04 @ =0x030000B4
	adds r5, r5, r1
	str r0, [r5]
	mov r1, r8
	strb r1, [r0, #6]
	ldr r0, [r5]
	mov r1, sb
	str r1, [r0]
	ldr r1, [r5]
	ldr r0, _080ACD08 @ =0x06012000
	str r0, [r1, #0x28]
	mov r0, sb
	str r0, [sp, #4]
	ldr r0, [r5]
	ldr r1, [r0, #0x28]
	ldr r2, _080ACD0C @ =0x010003C0
	add r0, sp, #4
	bl CpuFastSet
	ldr r1, [r5]
	ldr r0, [r1, #0x28]
	str r0, [r1, #0x24]
	adds r0, r4, #0
	bl sub_80ACD10
	bl m4aMPlayAllStop
	movs r0, #0x3b
	bl m4aSongNumStart
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080ACCF4: .4byte sub_80AE248
_080ACCF8: .4byte sub_80AE224
_080ACCFC: .4byte 0xFFFF2E00
_080ACD00: .4byte 0x00000CAC
_080ACD04: .4byte 0x030000B4
_080ACD08: .4byte 0x06012000
_080ACD0C: .4byte 0x010003C0

	thumb_func_start sub_80ACD10
sub_80ACD10: @ 0x080ACD10
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r7, r0, #0
	movs r0, #0x36
	bl VramMalloc
	adds r6, r0, #0
	adds r0, r7, #0
	adds r0, #0x5c
	str r6, [r7, #0x5c]
	ldr r4, _080ACDB4 @ =gUnknown_080DBA94
	ldr r1, [r4, #0xc]
	lsls r1, r1, #5
	adds r6, r6, r1
	ldrh r1, [r4, #8]
	movs r2, #0
	mov sl, r2
	movs r5, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r4, #0xa]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x20]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x24]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r1, #0xa0
	lsls r1, r1, #1
	mov sb, r1
	mov r2, sb
	strh r2, [r0, #0x14]
	strh r5, [r0, #0xe]
	strh r5, [r0, #0x16]
	movs r1, #0x10
	mov r8, r1
	mov r2, r8
	strb r2, [r0, #0x1c]
	mov r1, sl
	strb r1, [r0, #0x1f]
	str r5, [r0, #8]
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	adds r0, #0x84
	str r6, [r0]
	ldrh r1, [r4]
	strh r1, [r0, #0xc]
	ldrb r1, [r4, #2]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x20]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x24]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	mov r2, sb
	strh r2, [r0, #0x14]
	strh r5, [r0, #0xe]
	strh r5, [r0, #0x16]
	mov r1, r8
	strb r1, [r0, #0x1c]
	mov r2, sl
	strb r2, [r0, #0x1f]
	str r5, [r0, #8]
	bl UpdateSpriteAnimation
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080ACDB4: .4byte gUnknown_080DBA94

	thumb_func_start sub_80ACDB8
sub_80ACDB8: @ 0x080ACDB8
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	ldr r0, _080ACDE0 @ =gCurTask
	ldr r0, [r0]
	ldrh r7, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r7, r0
	adds r0, r5, #0
	bl sub_80AD030
	adds r0, r5, #0
	bl sub_80AE2C4
	cmp r0, #0
	bne _080ACDE4
	adds r0, r5, #0
	bl sub_80AE2E8
	b _080ACE92
	.align 2, 0
_080ACDE0: .4byte gCurTask
_080ACDE4:
	ldr r2, _080ACE40 @ =gUnknown_080DBC93
	ldrb r1, [r5, #0x18]
	lsls r0, r1, #3
	adds r0, r0, r1
	ldrb r1, [r5, #0x10]
	adds r0, r0, r1
	adds r0, r0, r2
	ldrb r0, [r0]
	strb r0, [r5, #0x1a]
	ldr r4, [r5, #8]
	ldrb r6, [r5, #0x10]
	ldrb r2, [r5, #0x18]
	cmp r4, #0
	bne _080ACE54
	ldr r3, [r5]
	cmp r3, #1
	bne _080ACE54
	ldr r1, _080ACE44 @ =gUnknown_080DBC78
	lsls r0, r2, #3
	adds r0, r0, r2
	adds r0, r6, r0
	adds r0, r0, r1
	ldrb r0, [r0]
	adds r1, r0, #0
	cmp r1, #0
	beq _080ACE4C
	cmp r1, #0xfe
	beq _080ACE4E
	strb r0, [r5, #0x19]
	ldr r0, _080ACE48 @ =0x030000B4
	adds r2, r7, r0
	ldr r1, [r2]
	ldr r0, [r1, #0x28]
	str r0, [r1, #0x24]
	ldr r0, [r2]
	ldrb r1, [r5, #0x19]
	ldr r2, [r0, #0x28]
	str r2, [sp]
	movs r2, #0x48
	movs r3, #0x28
	bl sub_80AD7B4
	str r4, [r5]
	str r4, [r5, #8]
	b _080ACE4E
	.align 2, 0
_080ACE40: .4byte gUnknown_080DBC93
_080ACE44: .4byte gUnknown_080DBC78
_080ACE48: .4byte 0x030000B4
_080ACE4C:
	str r3, [r5, #8]
_080ACE4E:
	ldrb r0, [r5, #0x10]
	adds r0, #1
	strb r0, [r5, #0x10]
_080ACE54:
	ldr r0, [r5]
	cmp r0, #0
	bne _080ACE6C
	adds r4, r5, #0
	adds r4, #0xb4
	ldr r0, [r4]
	bl sub_8023734
	str r0, [r5]
	ldr r0, [r4]
	bl sub_80239A8
_080ACE6C:
	ldr r4, [r5]
	cmp r4, #1
	bne _080ACE92
	adds r0, r5, #0
	adds r0, #0xb4
	ldr r1, [r0]
	ldrb r0, [r1, #6]
	cmp r0, #0
	beq _080ACE84
	adds r0, r1, #0
	bl sub_80239A8
_080ACE84:
	movs r0, #0
	strh r0, [r5, #0x1e]
	str r4, [r5, #8]
	ldr r0, _080ACE9C @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080ACEA0 @ =sub_80ACEA4
	str r0, [r1, #8]
_080ACE92:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080ACE9C: .4byte gCurTask
_080ACEA0: .4byte sub_80ACEA4

	thumb_func_start sub_80ACEA4
sub_80ACEA4: @ 0x080ACEA4
	push {r4, r5, lr}
	ldr r0, _080ACEE0 @ =gCurTask
	ldr r0, [r0]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	ldrh r0, [r4, #0x1e]
	adds r0, #1
	strh r0, [r4, #0x1e]
	adds r0, r4, #0
	bl sub_80AD030
	ldr r2, _080ACEE4 @ =gUnknown_080DBC78
	ldrb r1, [r4, #0x18]
	lsls r0, r1, #3
	adds r0, r0, r1
	ldrb r1, [r4, #0x10]
	adds r0, r0, r1
	adds r0, r0, r2
	ldrb r0, [r0]
	cmp r0, #0xfe
	beq _080ACEEC
	ldr r1, _080ACEE8 @ =0x030000B4
	adds r0, r5, r1
	ldr r0, [r0]
	bl sub_80239A8
	b _080ACEF6
	.align 2, 0
_080ACEE0: .4byte gCurTask
_080ACEE4: .4byte gUnknown_080DBC78
_080ACEE8: .4byte 0x030000B4
_080ACEEC:
	ldr r1, _080ACF20 @ =0x030000B4
	adds r0, r5, r1
	ldr r1, [r0]
	movs r0, #0
	strb r0, [r1, #6]
_080ACEF6:
	ldr r0, [r4, #8]
	cmp r0, #0
	bne _080ACF38
	movs r3, #1
	str r3, [r4]
	ldr r2, _080ACF24 @ =gUnknown_080DBC78
	ldrb r1, [r4, #0x18]
	lsls r0, r1, #3
	adds r0, r0, r1
	ldrb r1, [r4, #0x10]
	adds r0, r0, r1
	adds r0, r0, r2
	ldrb r0, [r0]
	cmp r0, #0xff
	bne _080ACF30
	str r3, [r4, #8]
	ldr r0, _080ACF28 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080ACF2C @ =sub_80ACF48
	b _080ACF36
	.align 2, 0
_080ACF20: .4byte 0x030000B4
_080ACF24: .4byte gUnknown_080DBC78
_080ACF28: .4byte gCurTask
_080ACF2C: .4byte sub_80ACF48
_080ACF30:
	ldr r0, _080ACF40 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080ACF44 @ =sub_80ACDB8
_080ACF36:
	str r0, [r1, #8]
_080ACF38:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080ACF40: .4byte gCurTask
_080ACF44: .4byte sub_80ACDB8

	thumb_func_start sub_80ACF48
sub_80ACF48: @ 0x080ACF48
	push {r4, r5, r6, lr}
	ldr r0, _080ACFC8 @ =gCurTask
	ldr r0, [r0]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r4, r0
	movs r0, #1
	str r0, [r5, #8]
	adds r0, r5, #0
	bl sub_80AD030
	ldr r0, _080ACFCC @ =0x030000B4
	adds r4, r4, r0
	ldr r0, [r4]
	bl sub_80239A8
	ldr r0, _080ACFD0 @ =gStageData
	ldrb r4, [r0, #6]
	cmp r4, #0
	bne _080AD010
	ldrb r0, [r5, #0x1b]
	ldr r6, _080ACFD4 @ =gBldRegs
	cmp r0, #0
	beq _080ACFAC
	ldr r2, _080ACFD8 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080ACFDC @ =gWinRegs
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	ldrh r2, [r1, #8]
	movs r0, #0x3f
	orrs r0, r2
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	movs r3, #0
	orrs r0, r2
	strh r0, [r1, #0xa]
	ldr r0, _080ACFE0 @ =0x00003FFF
	strh r0, [r6]
	strh r4, [r5, #0x1c]
	strb r3, [r5, #0x1b]
_080ACFAC:
	ldrh r0, [r6, #4]
	cmp r0, #0xf
	bhi _080ACFE4
	ldrh r0, [r5, #0x1c]
	lsrs r0, r0, #8
	strh r0, [r6, #4]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r1, #0
	ldrh r3, [r5, #0x1c]
	adds r0, r0, r3
	strh r0, [r5, #0x1c]
	b _080AD010
	.align 2, 0
_080ACFC8: .4byte gCurTask
_080ACFCC: .4byte 0x030000B4
_080ACFD0: .4byte gStageData
_080ACFD4: .4byte gBldRegs
_080ACFD8: .4byte gDispCnt
_080ACFDC: .4byte gWinRegs
_080ACFE0: .4byte 0x00003FFF
_080ACFE4:
	movs r4, #0
	movs r0, #0x10
	strh r0, [r6, #4]
	bl sub_8003D2C
	ldr r1, _080AD018 @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _080AD01C @ =gBackgroundsCopyQueueCursor
	ldr r0, _080AD020 @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r0, _080AD024 @ =gUnknown_03006840
	strb r4, [r0]
	ldr r1, _080AD028 @ =gVramGraphicsCopyCursor
	ldr r0, _080AD02C @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldrb r0, [r5, #0x18]
	bl sub_80AE95C
_080AD010:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080AD018: .4byte 0x0000FFFF
_080AD01C: .4byte gBackgroundsCopyQueueCursor
_080AD020: .4byte gBackgroundsCopyQueueIndex
_080AD024: .4byte gUnknown_03006840
_080AD028: .4byte gVramGraphicsCopyCursor
_080AD02C: .4byte gVramGraphicsCopyQueueIndex

	thumb_func_start sub_80AD030
sub_80AD030: @ 0x080AD030
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r5, r0, #0
	movs r6, #0
	movs r7, #0
	adds r4, r5, #0
	adds r4, #0x84
	movs r0, #0
	mov r8, r0
_080AD046:
	ldr r1, [r5, #0x20]
	asrs r1, r1, #8
	strh r1, [r4, #0x10]
	ldr r0, [r5, #0x24]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	adds r1, r6, r1
	strh r1, [r4, #0x10]
	ldr r0, [r4, #8]
	ldr r3, _080AD0AC @ =0xFFFFFBFF
	ands r0, r3
	str r0, [r4, #8]
	mov r0, r8
	strb r0, [r4, #0x1f]
	adds r0, r4, #0
	str r3, [sp]
	bl DisplaySprite
	adds r0, r6, #0
	adds r0, #0x40
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	ldr r3, [sp]
	cmp r7, #2
	bls _080AD046
	adds r0, r5, #0
	adds r0, #0x5c
	ldr r2, [r5, #0x20]
	asrs r2, r2, #8
	movs r4, #0
	strh r2, [r0, #0x10]
	ldr r1, [r5, #0x24]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	adds r2, r6, r2
	strh r2, [r0, #0x10]
	ldr r1, [r0, #8]
	ands r1, r3
	str r1, [r0, #8]
	strb r4, [r0, #0x1f]
	bl DisplaySprite
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AD0AC: .4byte 0xFFFFFBFF

	thumb_func_start sub_80AD0B0
sub_80AD0B0: @ 0x080AD0B0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r5, r0, #0
	adds r4, r1, #0
	movs r7, #0
	ldr r0, _080AD180 @ =sub_80AE3E8
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r1, _080AD184 @ =sub_80AE3D4
	str r1, [sp]
	movs r1, #0xb4
	movs r3, #0
	bl TaskCreate
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r6, r1, r0
	str r5, [r6]
	str r4, [r6, #4]
	adds r4, #4
	str r4, [r6, #8]
	str r7, [r6, #0xc]
	str r7, [r6, #0x10]
	movs r0, #0x49
	bl VramMalloc
	adds r7, r0, #0
	movs r0, #1
	mov sl, r0
	movs r4, #0
	ldr r0, _080AD188 @ =gUnknown_080DBCAE
	ldrb r0, [r0, #1]
	cmp r4, r0
	bhs _080AD16E
	ldr r0, _080AD18C @ =gUnknown_080DBAA4
	adds r0, #4
	mov r8, r0
	movs r1, #0
	mov sb, r1
	movs r5, #0
_080AD10A:
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #3
	adds r0, #0x14
	adds r0, r6, r0
	str r7, [r0]
	mov r1, r8
	ldr r2, [r1]
	lsls r3, r4, #3
	adds r2, r3, r2
	ldr r1, [r2, #4]
	lsls r1, r1, #5
	adds r7, r7, r1
	ldrh r1, [r2]
	strh r1, [r0, #0xc]
	mov r2, r8
	ldr r1, [r2]
	adds r3, r3, r1
	ldrb r1, [r3, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r6, #4]
	ldr r1, [r1]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r6, #8]
	ldr r1, [r1]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r5, [r0, #0x14]
	strh r5, [r0, #0xe]
	strh r5, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	mov r1, sb
	strb r1, [r0, #0x1f]
	movs r1, #0x80
	lsls r1, r1, #3
	str r1, [r0, #8]
	bl UpdateSpriteAnimation
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldr r0, _080AD188 @ =gUnknown_080DBCAE
	add r0, sl
	ldrb r0, [r0]
	cmp r4, r0
	blo _080AD10A
_080AD16E:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AD180: .4byte sub_80AE3E8
_080AD184: .4byte sub_80AE3D4
_080AD188: .4byte gUnknown_080DBCAE
_080AD18C: .4byte gUnknown_080DBAA4

	thumb_func_start sub_80AD190
sub_80AD190: @ 0x080AD190
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r5, r0, #0
	ldr r1, [r5]
	ldrb r0, [r1]
	movs r3, #0
	cmp r0, #0xff
	beq _080AD1A6
	adds r3, r0, #0
_080AD1A6:
	ldr r7, [r5, #0x14]
	movs r6, #0
	ldr r0, _080AD22C @ =gUnknown_080DBCAE
	adds r0, r3, r0
	ldrb r2, [r0]
	cmp r6, r2
	bhs _080AD220
	ldr r1, _080AD230 @ =gUnknown_080DBAA4
	lsls r0, r3, #2
	adds r0, r0, r1
	mov r8, r0
	mov sb, r2
_080AD1BE:
	lsls r4, r6, #2
	adds r4, r4, r6
	lsls r4, r4, #3
	adds r4, #0x14
	adds r4, r5, r4
	str r7, [r4]
	mov r0, r8
	ldr r1, [r0]
	lsls r2, r6, #3
	adds r1, r2, r1
	ldr r0, [r1, #4]
	lsls r0, r0, #5
	adds r7, r7, r0
	ldrh r0, [r1]
	strh r0, [r4, #0xc]
	mov r1, r8
	ldr r0, [r1]
	adds r2, r2, r0
	ldrb r0, [r2, #2]
	strb r0, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	ldr r0, [r5, #4]
	ldr r1, [r0]
	asrs r1, r1, #8
	strh r1, [r4, #0x10]
	ldr r0, [r5, #8]
	ldr r2, [r0]
	asrs r2, r2, #8
	strh r2, [r4, #0x12]
	ldr r0, [r5, #0xc]
	asrs r0, r0, #8
	adds r1, r1, r0
	strh r1, [r4, #0x10]
	ldr r0, [r5, #0x10]
	asrs r0, r0, #8
	adds r2, r2, r0
	strh r2, [r4, #0x12]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, sb
	blo _080AD1BE
_080AD220:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AD22C: .4byte gUnknown_080DBCAE
_080AD230: .4byte gUnknown_080DBAA4

	thumb_func_start sub_80AD234
sub_80AD234: @ 0x080AD234
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r6, r0, #0
	adds r5, r1, #0
	lsls r4, r2, #0x18
	lsrs r4, r4, #0x18
	movs r0, #0
	mov sb, r0
	ldr r0, _080AD3E8 @ =sub_80AE45C
	movs r1, #0x9a
	lsls r1, r1, #1
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r3, _080AD3EC @ =sub_80AE448
	str r3, [sp]
	movs r3, #0
	bl TaskCreate
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r7, r1, r0
	strb r4, [r7]
	str r6, [r7, #4]
	str r5, [r7, #0xc]
	adds r5, #4
	str r5, [r7, #0x10]
	movs r0, #0xa0
	lsls r0, r0, #5
	str r0, [r7, #0x14]
	ldr r0, _080AD3F0 @ =0xFFFFD800
	str r0, [r7, #0x18]
	mov r1, sb
	strh r1, [r7, #8]
	ldrb r4, [r7]
	ldr r1, _080AD3F4 @ =gUnknown_080DB994
	lsls r0, r4, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	bl VramMalloc
	mov sb, r0
	ldr r0, _080AD3F8 @ =gUnknown_080DBCBB
	adds r0, r4, r0
	ldrb r0, [r0]
	str r0, [sp, #4]
	movs r6, #0
	ldr r0, _080AD3FC @ =gUnknown_08E2EF44
	lsls r4, r4, #2
	mov r8, r4
	add r0, r8
	ldr r0, [r0]
	ldr r1, [sp, #4]
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r6, r0
	bhs _080AD32A
	lsls r1, r1, #2
	mov sl, r1
_080AD2B2:
	lsls r0, r6, #2
	adds r0, r0, r6
	lsls r0, r0, #3
	adds r0, #0x1c
	adds r0, r7, r0
	mov r1, sb
	str r1, [r0]
	ldr r4, _080AD400 @ =gUnknown_08E2EF54
	mov r5, r8
	add r4, r8
	ldr r1, [r4]
	add r1, sl
	ldr r2, [r1]
	lsls r3, r6, #3
	adds r2, r3, r2
	ldr r1, [r2, #4]
	lsls r1, r1, #5
	add sb, r1
	ldrh r1, [r2]
	strh r1, [r0, #0xc]
	ldr r1, [r4]
	add r1, sl
	ldr r1, [r1]
	adds r3, r3, r1
	ldrb r1, [r3, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0xc]
	ldr r1, [r1]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x10]
	ldr r1, [r1]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r1, #0x40
	strh r1, [r0, #0x14]
	movs r1, #0
	strh r1, [r0, #0xe]
	strh r1, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	movs r1, #0
	strb r1, [r0, #0x1f]
	movs r1, #0
	str r1, [r0, #8]
	bl UpdateSpriteAnimation
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	ldr r0, _080AD3FC @ =gUnknown_08E2EF44
	adds r5, r5, r0
	ldr r0, [r5]
	ldr r1, [sp, #4]
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r6, r0
	blo _080AD2B2
_080AD32A:
	ldrb r0, [r7]
	cmp r0, #1
	bne _080AD396
	movs r6, #0
	ldr r5, _080AD400 @ =gUnknown_08E2EF54
	movs r0, #0
	mov r8, r0
	movs r4, #0
_080AD33A:
	lsls r0, r6, #2
	adds r0, r0, r6
	lsls r0, r0, #3
	adds r0, #0xbc
	adds r0, r7, r0
	mov r1, sb
	str r1, [r0]
	ldr r1, [r5, #0xc]
	ldr r2, [r1]
	lsls r3, r6, #3
	adds r2, r3, r2
	ldr r1, [r2, #4]
	lsls r1, r1, #5
	add sb, r1
	ldrh r1, [r2]
	strh r1, [r0, #0xc]
	ldr r1, [r5, #0xc]
	ldr r1, [r1]
	adds r3, r3, r1
	ldrb r1, [r3, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0xc]
	ldr r1, [r1]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x10]
	ldr r1, [r1]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	mov r1, r8
	strb r1, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #1
	bls _080AD33A
_080AD396:
	ldrb r4, [r7]
	cmp r4, #0
	bne _080AD3D8
	movs r1, #0x86
	lsls r1, r1, #1
	adds r0, r7, r1
	mov r1, sb
	str r1, [r0]
	ldr r2, _080AD404 @ =gUnknown_080DBA8C
	ldrh r1, [r2]
	movs r3, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0xc]
	ldr r1, [r1]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x10]
	ldr r1, [r1]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	strh r4, [r0, #0x14]
	strh r4, [r0, #0xe]
	strh r4, [r0, #0x16]
	movs r1, #0x10
	strb r1, [r0, #0x1c]
	strb r3, [r0, #0x1f]
	str r4, [r0, #8]
	bl UpdateSpriteAnimation
_080AD3D8:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AD3E8: .4byte sub_80AE45C
_080AD3EC: .4byte sub_80AE448
_080AD3F0: .4byte 0xFFFFD800
_080AD3F4: .4byte gUnknown_080DB994
_080AD3F8: .4byte gUnknown_080DBCBB
_080AD3FC: .4byte gUnknown_08E2EF44
_080AD400: .4byte gUnknown_08E2EF54
_080AD404: .4byte gUnknown_080DBA8C

	thumb_func_start sub_80AD408
sub_80AD408: @ 0x080AD408
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r6, r0, #0
	ldrb r1, [r6]
	ldr r0, [r6, #0x1c]
	mov sb, r0
	movs r0, #0
	mov r8, r0
	ldr r0, _080AD578 @ =gUnknown_08E2EF44
	lsls r7, r1, #2
	adds r0, r7, r0
	ldr r2, [r6, #4]
	ldrb r1, [r2]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r8, r0
	bhs _080AD4CA
	movs r0, #0
	mov sl, r0
_080AD436:
	mov r0, r8
	lsls r4, r0, #2
	add r4, r8
	lsls r4, r4, #3
	adds r4, #0x1c
	adds r4, r6, r4
	mov r0, sb
	str r0, [r4]
	ldr r3, _080AD57C @ =gUnknown_08E2EF54
	adds r5, r7, #0
	adds r3, r7, r3
	ldrb r0, [r2]
	ldr r1, [r3]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	mov r0, r8
	lsls r2, r0, #3
	adds r1, r2, r1
	ldr r0, [r1, #4]
	lsls r0, r0, #5
	add sb, r0
	ldrh r0, [r1]
	strh r0, [r4, #0xc]
	ldr r0, [r6, #4]
	ldrb r0, [r0]
	ldr r1, [r3]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	adds r2, r2, r0
	ldrb r0, [r2, #2]
	strb r0, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	ldr r0, [r6, #0xc]
	ldr r0, [r0]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r6, #0x10]
	ldr r0, [r0]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	movs r0, #0x40
	strh r0, [r4, #0x14]
	mov r0, sl
	strh r0, [r4, #0xe]
	strh r0, [r4, #0x16]
	movs r0, #0x10
	strb r0, [r4, #0x1c]
	movs r0, #0
	strb r0, [r4, #0x1f]
	mov r0, sl
	str r0, [r4, #8]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	ldr r0, _080AD578 @ =gUnknown_08E2EF44
	adds r5, r5, r0
	ldr r2, [r6, #4]
	ldrb r1, [r2]
	ldr r0, [r5]
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r8, r0
	blo _080AD436
_080AD4CA:
	ldrb r0, [r6]
	cmp r0, #1
	bne _080AD568
	movs r0, #0
	mov r8, r0
	ldr r1, _080AD580 @ =gUnknown_080DBCB9
	ldr r2, [r6, #4]
	ldrb r0, [r2]
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r8, r0
	bhs _080AD568
	movs r7, #0
	movs r5, #0
_080AD4E6:
	mov r0, r8
	lsls r4, r0, #2
	add r4, r8
	lsls r4, r4, #3
	adds r4, #0xbc
	adds r4, r6, r4
	mov r0, sb
	str r0, [r4]
	ldr r1, _080AD57C @ =gUnknown_08E2EF54
	ldrb r0, [r2]
	ldr r3, [r1, #0xc]
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r1, [r0]
	mov r0, r8
	lsls r2, r0, #3
	adds r1, r2, r1
	ldr r0, [r1, #4]
	lsls r0, r0, #5
	add sb, r0
	ldrh r0, [r1]
	strh r0, [r4, #0xc]
	ldr r0, [r6, #4]
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r0, [r0]
	adds r2, r2, r0
	ldrb r0, [r2, #2]
	strb r0, [r4, #0x1a]
	movs r0, #0xff
	strb r0, [r4, #0x1b]
	ldr r0, [r6, #0xc]
	ldr r0, [r0]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r6, #0x10]
	ldr r0, [r0]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	strh r5, [r4, #0x14]
	strh r5, [r4, #0xe]
	strh r5, [r4, #0x16]
	movs r0, #0x10
	strb r0, [r4, #0x1c]
	strb r7, [r4, #0x1f]
	str r5, [r4, #8]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	ldr r1, _080AD580 @ =gUnknown_080DBCB9
	ldr r2, [r6, #4]
	ldrb r0, [r2]
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r8, r0
	blo _080AD4E6
_080AD568:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AD578: .4byte gUnknown_08E2EF44
_080AD57C: .4byte gUnknown_08E2EF54
_080AD580: .4byte gUnknown_080DBCB9

	thumb_func_start sub_80AD584
sub_80AD584: @ 0x080AD584
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r7, r0, #0
	movs r0, #0x36
	bl VramMalloc
	adds r5, r0, #0
	adds r0, r7, #0
	adds r0, #0x5c
	str r5, [r7, #0x5c]
	ldr r4, _080AD630 @ =gUnknown_080DBA94
	ldr r1, [r4, #0x1c]
	lsls r1, r1, #5
	adds r5, r5, r1
	ldrh r1, [r4, #0x18]
	movs r6, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r4, #0x1a]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x20]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x24]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r1, #0xa0
	lsls r1, r1, #1
	strh r1, [r0, #0x14]
	strh r6, [r0, #0xe]
	strh r6, [r0, #0x16]
	movs r1, #0x10
	mov sl, r1
	mov r1, sl
	strb r1, [r0, #0x1c]
	movs r1, #1
	mov sb, r1
	mov r1, sb
	strb r1, [r0, #0x1f]
	movs r1, #0x80
	lsls r1, r1, #0xb
	mov r8, r1
	str r1, [r0, #8]
	bl UpdateSpriteAnimation
	adds r0, r7, #0
	adds r0, #0x84
	str r5, [r0]
	ldrh r1, [r4, #0x10]
	strh r1, [r0, #0xc]
	ldrb r1, [r4, #0x12]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r7, #0x20]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r7, #0x24]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r1, #0xa0
	lsls r1, r1, #1
	strh r1, [r0, #0x14]
	strh r6, [r0, #0xe]
	strh r6, [r0, #0x16]
	mov r1, sl
	strb r1, [r0, #0x1c]
	mov r1, sb
	strb r1, [r0, #0x1f]
	mov r1, r8
	str r1, [r0, #8]
	bl UpdateSpriteAnimation
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AD630: .4byte gUnknown_080DBA94

	thumb_func_start sub_80AD634
sub_80AD634: @ 0x080AD634
	push {r4, r5, r6, lr}
	sub sp, #4
	ldr r0, _080AD65C @ =gCurTask
	ldr r0, [r0]
	ldrh r6, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r6, r0
	adds r0, r5, #0
	bl sub_80AD72C
	adds r0, r5, #0
	bl sub_80AE63C
	cmp r0, #0
	bne _080AD660
	adds r0, r5, #0
	bl sub_80AE66C
	b _080AD71A
	.align 2, 0
_080AD65C: .4byte gCurTask
_080AD660:
	ldr r2, _080AD6B8 @ =gUnknown_080DBCD9
	ldrb r1, [r5, #0x18]
	lsls r0, r1, #3
	adds r0, r0, r1
	ldrb r1, [r5, #0x10]
	adds r0, r0, r1
	adds r0, r0, r2
	ldrb r0, [r0]
	strb r0, [r5, #0x1a]
	ldr r4, [r5, #0xc]
	ldr r0, [r4]
	ldrb r3, [r5, #0x10]
	ldrb r2, [r5, #0x18]
	cmp r0, #1
	bne _080AD71A
	ldr r0, [r5]
	cmp r0, #1
	bne _080AD6CC
	ldr r1, _080AD6BC @ =gUnknown_080DBCBE
	lsls r0, r2, #3
	adds r0, r0, r2
	adds r0, r3, r0
	adds r0, r0, r1
	ldrb r0, [r0]
	adds r1, r0, #0
	cmp r1, #0
	beq _080AD6C4
	strb r0, [r5, #0x19]
	ldr r0, _080AD6C0 @ =0x030000B4
	adds r2, r6, r0
	ldr r1, [r2]
	ldr r0, [r1, #0x28]
	str r0, [r1, #0x24]
	ldr r0, [r2]
	ldrb r1, [r5, #0x19]
	ldr r2, [r0, #0x28]
	str r2, [sp]
	movs r2, #0x30
	movs r3, #0x6e
	bl sub_80AD7B4
	movs r0, #0
	str r0, [r5]
	b _080AD6C6
	.align 2, 0
_080AD6B8: .4byte gUnknown_080DBCD9
_080AD6BC: .4byte gUnknown_080DBCBE
_080AD6C0: .4byte 0x030000B4
_080AD6C4:
	str r1, [r4]
_080AD6C6:
	ldrb r0, [r5, #0x10]
	adds r0, #1
	strb r0, [r5, #0x10]
_080AD6CC:
	ldr r0, [r5]
	cmp r0, #0
	bne _080AD6E4
	adds r4, r5, #0
	adds r4, #0xb4
	ldr r0, [r4]
	bl sub_8023734
	str r0, [r5]
	ldr r0, [r4]
	bl sub_80239A8
_080AD6E4:
	ldr r0, [r5]
	cmp r0, #1
	bne _080AD71A
	adds r0, r5, #0
	adds r0, #0xb4
	ldr r1, [r0]
	ldrb r0, [r1, #6]
	cmp r0, #0
	beq _080AD6FC
	adds r0, r1, #0
	bl sub_80239A8
_080AD6FC:
	ldrb r0, [r5, #0x10]
	cmp r0, #5
	bne _080AD706
	movs r0, #0x78
	b _080AD708
_080AD706:
	movs r0, #0
_080AD708:
	strh r0, [r5, #0x1e]
	ldr r1, [r5, #0xc]
	movs r0, #0
	str r0, [r1]
	str r0, [r5]
	ldr r0, _080AD724 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080AD728 @ =sub_80AE5C4
	str r0, [r1, #8]
_080AD71A:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080AD724: .4byte gCurTask
_080AD728: .4byte sub_80AE5C4

	thumb_func_start sub_80AD72C
sub_80AD72C: @ 0x080AD72C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	movs r2, #0
	movs r7, #0
_080AD738:
	adds r0, r6, #0
	adds r0, #0xb0
	ldr r5, [r0]
	ldr r1, [r6, #0x20]
	asrs r1, r1, #8
	strh r1, [r5, #0x10]
	ldr r0, [r6, #0x24]
	asrs r0, r0, #8
	strh r0, [r5, #0x12]
	lsls r4, r2, #0x10
	asrs r4, r4, #0x10
	adds r1, r4, r1
	strh r1, [r5, #0x10]
	ldr r0, [r5, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	mov r8, r1
	orrs r0, r1
	str r0, [r5, #8]
	adds r0, r5, #0
	bl UpdateSpriteAnimation
	adds r0, r5, #0
	bl DisplaySprite
	subs r4, #0x40
	lsls r4, r4, #0x10
	lsrs r2, r4, #0x10
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #2
	bls _080AD738
	adds r0, r6, #0
	adds r0, #0xac
	ldr r4, [r0]
	ldr r1, [r6, #0x20]
	asrs r1, r1, #8
	strh r1, [r4, #0x10]
	ldr r0, [r6, #0x24]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	lsls r0, r2, #0x10
	asrs r0, r0, #0x10
	adds r0, r0, r1
	strh r0, [r4, #0x10]
	ldr r0, [r4, #8]
	mov r1, r8
	orrs r0, r1
	str r0, [r4, #8]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	adds r0, r4, #0
	bl DisplaySprite
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80AD7B4
sub_80AD7B4: @ 0x080AD7B4
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	ldr r5, [sp, #0x14]
	lsls r1, r1, #0x18
	lsrs r7, r1, #0x18
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	movs r4, #0
	str r4, [r6]
	movs r1, #0
	movs r0, #8
	strh r0, [r6, #0xa]
	strh r2, [r6, #0x12]
	strh r3, [r6, #0x14]
	strb r2, [r6, #0xf]
	strb r3, [r6, #0x10]
	strb r1, [r6, #0xd]
	strb r1, [r6, #0xe]
	strb r1, [r6, #5]
	strb r1, [r6, #6]
	strh r4, [r6, #8]
	strb r1, [r6, #0xc]
	strb r1, [r6, #0x1c]
	strh r4, [r6, #0x1a]
	strb r1, [r6, #0x1d]
	strb r1, [r6, #0x1e]
	str r5, [r6, #0x24]
	movs r0, #1
	strb r0, [r6, #0x1f]
	ldr r0, _080AD818 @ =gSaveGame
	ldr r1, _080AD81C @ =0x00000366
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r0, #5
	bls _080AD800
	movs r0, #5
_080AD800:
	ldr r1, _080AD820 @ =gUnknown_08E7EA78
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	lsls r0, r7, #2
	adds r0, r0, r1
	ldr r0, [r0]
	str r0, [r6, #0x20]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AD818: .4byte gSaveGame
_080AD81C: .4byte 0x00000366
_080AD820: .4byte gUnknown_08E7EA78

	thumb_func_start sub_80AD824
sub_80AD824: @ 0x080AD824
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0xc
	movs r7, #0
	ldr r0, _080AD928 @ =sub_80AD968
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r1, _080AD92C @ =sub_80AE688
	str r1, [sp]
	movs r1, #0x14
	movs r3, #0
	bl TaskCreate
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	movs r5, #0
	movs r6, #0
	strh r7, [r4, #0xc]
	strb r5, [r4, #8]
	movs r0, #1
	mov sb, r0
	str r0, [r4]
	str r7, [r4, #4]
	movs r1, #0x12
	mov r8, r1
	mov r2, r8
	strb r2, [r4, #0xa]
	ldr r7, _080AD930 @ =0x00000CAC
	adds r0, r7, #0
	bl EwramMalloc
	str r0, [r4, #0x10]
	strb r5, [r0, #6]
	ldr r0, [r4, #0x10]
	str r6, [r0]
	ldr r1, _080AD934 @ =0x06012000
	str r1, [r0, #0x28]
	str r6, [sp, #4]
	ldr r2, _080AD938 @ =0x010003C0
	add r0, sp, #4
	bl CpuFastSet
	ldr r1, [r4, #0x10]
	ldr r0, [r1, #0x28]
	str r0, [r1, #0x24]
	ldr r1, _080AD93C @ =gDispCnt
	movs r0, #0xc1
	lsls r0, r0, #6
	strh r0, [r1]
	ldr r2, _080AD940 @ =gWinRegs
	movs r0, #0xf0
	strh r0, [r2]
	movs r0, #0xa0
	strh r0, [r2, #4]
	ldrh r0, [r2, #8]
	movs r1, #0x3f
	orrs r0, r1
	strh r0, [r2, #8]
	ldrh r0, [r2, #0xa]
	movs r1, #0x1f
	orrs r0, r1
	strh r0, [r2, #0xa]
	ldr r1, _080AD944 @ =gBldRegs
	ldr r0, _080AD948 @ =0x00003FFF
	strh r0, [r1]
	strh r6, [r1, #4]
	str r6, [sp, #8]
	ldr r2, _080AD94C @ =0x040000D4
	add r0, sp, #8
	str r0, [r2]
	ldr r0, _080AD950 @ =gBgCntRegs
	ldrh r1, [r0, #4]
	movs r0, #0xc
	ands r0, r1
	lsls r0, r0, #0xc
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r0, r0, r1
	str r0, [r2, #4]
	ldr r0, _080AD954 @ =0x85000010
	str r0, [r2, #8]
	ldr r0, [r2, #8]
	ldr r3, _080AD958 @ =gUnknown_03006230
	strb r5, [r3, #2]
	ldr r0, _080AD95C @ =gUnknown_03003590
	strb r5, [r0, #8]
	strb r5, [r0, #9]
	movs r1, #0xff
	strb r1, [r0, #0xa]
	movs r2, #0x40
	strb r2, [r0, #0xb]
	mov r1, r8
	strb r1, [r3, #1]
	movs r1, #0x20
	strb r1, [r0, #4]
	strb r5, [r0, #5]
	strb r2, [r0, #6]
	strb r1, [r0, #7]
	strb r5, [r3]
	strb r5, [r0]
	strb r5, [r0, #1]
	subs r1, #0x21
	strb r1, [r0, #2]
	strb r2, [r0, #3]
	movs r0, #0
	bl sub_80C4C0C
	ldr r1, _080AD960 @ =gBgPalette
	strh r0, [r1]
	ldr r1, _080AD964 @ =gFlags
	ldr r0, [r1]
	mov r2, sb
	orrs r0, r2
	str r0, [r1]
	bl m4aMPlayAllStop
	movs r0, #8
	bl m4aSongNumStart
	add sp, #0xc
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AD928: .4byte sub_80AD968
_080AD92C: .4byte sub_80AE688
_080AD930: .4byte 0x00000CAC
_080AD934: .4byte 0x06012000
_080AD938: .4byte 0x010003C0
_080AD93C: .4byte gDispCnt
_080AD940: .4byte gWinRegs
_080AD944: .4byte gBldRegs
_080AD948: .4byte 0x00003FFF
_080AD94C: .4byte 0x040000D4
_080AD950: .4byte gBgCntRegs
_080AD954: .4byte 0x85000010
_080AD958: .4byte gUnknown_03006230
_080AD95C: .4byte gUnknown_03003590
_080AD960: .4byte gBgPalette
_080AD964: .4byte gFlags

	thumb_func_start sub_80AD968
sub_80AD968: @ 0x080AD968
	push {r4, r5, r6, lr}
	sub sp, #4
	ldr r6, _080AD9D4 @ =gCurTask
	ldr r0, [r6]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	ldr r0, [r5]
	cmp r0, #1
	bne _080AD9A6
	ldr r1, _080AD9D8 @ =gUnknown_080DBCF4
	ldrb r0, [r5, #8]
	adds r0, r0, r1
	ldrb r0, [r0]
	movs r4, #0
	strb r0, [r5, #0xa]
	ldr r0, [r5, #0x10]
	ldr r2, _080AD9DC @ =0x06012000
	str r2, [r0, #0x28]
	str r2, [r0, #0x24]
	ldrb r1, [r5, #0xa]
	str r2, [sp]
	movs r2, #0xa
	movs r3, #0x41
	bl sub_80AD7B4
	str r4, [r5]
	ldrb r0, [r5, #8]
	adds r0, #1
	strb r0, [r5, #8]
_080AD9A6:
	ldr r0, [r5]
	cmp r0, #0
	bne _080AD9BA
	ldr r0, [r5, #0x10]
	bl sub_8023734
	str r0, [r5]
	ldr r0, [r5, #0x10]
	bl sub_80239A8
_080AD9BA:
	ldr r0, [r5]
	cmp r0, #1
	bne _080AD9CA
	movs r0, #0
	str r0, [r5]
	ldr r1, [r6]
	ldr r0, _080AD9E0 @ =sub_80AE69C
	str r0, [r1, #8]
_080AD9CA:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080AD9D4: .4byte gCurTask
_080AD9D8: .4byte gUnknown_080DBCF4
_080AD9DC: .4byte 0x06012000
_080AD9E0: .4byte sub_80AE69C

	thumb_func_start sub_80AD9E4
sub_80AD9E4: @ 0x080AD9E4
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0xc
	movs r7, #0
	ldr r0, _080ADAE0 @ =sub_80ADB20
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r1, _080ADAE4 @ =sub_80AE71C
	str r1, [sp]
	movs r1, #0x14
	movs r3, #0
	bl TaskCreate
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	movs r5, #0
	movs r6, #0
	strh r7, [r4, #0xc]
	strb r5, [r4, #8]
	movs r0, #1
	mov sb, r0
	str r0, [r4]
	str r7, [r4, #4]
	movs r1, #0x12
	mov r8, r1
	mov r2, r8
	strb r2, [r4, #0xa]
	ldr r7, _080ADAE8 @ =0x00000CAC
	adds r0, r7, #0
	bl EwramMalloc
	str r0, [r4, #0x10]
	strb r5, [r0, #6]
	ldr r0, [r4, #0x10]
	str r6, [r0]
	ldr r1, _080ADAEC @ =0x06012000
	str r1, [r0, #0x28]
	str r6, [sp, #4]
	ldr r2, _080ADAF0 @ =0x010003C0
	add r0, sp, #4
	bl CpuFastSet
	ldr r1, [r4, #0x10]
	ldr r0, [r1, #0x28]
	str r0, [r1, #0x24]
	ldr r1, _080ADAF4 @ =gDispCnt
	movs r0, #0xc1
	lsls r0, r0, #6
	strh r0, [r1]
	ldr r2, _080ADAF8 @ =gWinRegs
	movs r0, #0xf0
	strh r0, [r2]
	movs r0, #0xa0
	strh r0, [r2, #4]
	ldrh r0, [r2, #8]
	movs r1, #0x3f
	orrs r0, r1
	strh r0, [r2, #8]
	ldrh r0, [r2, #0xa]
	movs r1, #0x1f
	orrs r0, r1
	strh r0, [r2, #0xa]
	ldr r1, _080ADAFC @ =gBldRegs
	ldr r0, _080ADB00 @ =0x00003FFF
	strh r0, [r1]
	str r6, [sp, #8]
	ldr r2, _080ADB04 @ =0x040000D4
	add r0, sp, #8
	str r0, [r2]
	ldr r0, _080ADB08 @ =gBgCntRegs
	ldrh r1, [r0, #4]
	movs r0, #0xc
	ands r0, r1
	lsls r0, r0, #0xc
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r0, r0, r1
	str r0, [r2, #4]
	ldr r0, _080ADB0C @ =0x85000010
	str r0, [r2, #8]
	ldr r0, [r2, #8]
	ldr r3, _080ADB10 @ =gUnknown_03006230
	strb r5, [r3, #2]
	ldr r0, _080ADB14 @ =gUnknown_03003590
	strb r5, [r0, #8]
	strb r5, [r0, #9]
	movs r1, #0xff
	strb r1, [r0, #0xa]
	movs r2, #0x40
	strb r2, [r0, #0xb]
	mov r1, r8
	strb r1, [r3, #1]
	movs r1, #0x20
	strb r1, [r0, #4]
	strb r5, [r0, #5]
	strb r2, [r0, #6]
	strb r1, [r0, #7]
	strb r5, [r3]
	strb r5, [r0]
	strb r5, [r0, #1]
	subs r1, #0x21
	strb r1, [r0, #2]
	strb r2, [r0, #3]
	movs r0, #0
	bl sub_80C4C0C
	ldr r1, _080ADB18 @ =gBgPalette
	strh r0, [r1]
	ldr r1, _080ADB1C @ =gFlags
	ldr r0, [r1]
	mov r2, sb
	orrs r0, r2
	str r0, [r1]
	bl m4aMPlayAllStop
	add sp, #0xc
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080ADAE0: .4byte sub_80ADB20
_080ADAE4: .4byte sub_80AE71C
_080ADAE8: .4byte 0x00000CAC
_080ADAEC: .4byte 0x06012000
_080ADAF0: .4byte 0x010003C0
_080ADAF4: .4byte gDispCnt
_080ADAF8: .4byte gWinRegs
_080ADAFC: .4byte gBldRegs
_080ADB00: .4byte 0x00003FFF
_080ADB04: .4byte 0x040000D4
_080ADB08: .4byte gBgCntRegs
_080ADB0C: .4byte 0x85000010
_080ADB10: .4byte gUnknown_03006230
_080ADB14: .4byte gUnknown_03003590
_080ADB18: .4byte gBgPalette
_080ADB1C: .4byte gFlags

	thumb_func_start sub_80ADB20
sub_80ADB20: @ 0x080ADB20
	push {r4, r5, r6, lr}
	sub sp, #4
	ldr r6, _080ADB8C @ =gCurTask
	ldr r0, [r6]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldr r0, _080ADB90 @ =gBldRegs
	movs r5, #0
	strh r5, [r0, #4]
	ldr r0, [r4]
	cmp r0, #1
	bne _080ADB62
	ldr r1, _080ADB94 @ =gUnknown_080DBCF9
	ldrb r0, [r4, #8]
	adds r0, r0, r1
	ldrb r0, [r0]
	strb r0, [r4, #0xa]
	ldr r0, [r4, #0x10]
	ldr r2, _080ADB98 @ =0x06012000
	str r2, [r0, #0x28]
	str r2, [r0, #0x24]
	ldrb r1, [r4, #0xa]
	str r2, [sp]
	movs r2, #0xa
	movs r3, #0x41
	bl sub_80AD7B4
	str r5, [r4]
	ldrb r0, [r4, #8]
	adds r0, #1
	strb r0, [r4, #8]
_080ADB62:
	ldr r0, [r4]
	cmp r0, #0
	bne _080ADB76
	ldr r0, [r4, #0x10]
	bl sub_8023734
	str r0, [r4]
	ldr r0, [r4, #0x10]
	bl sub_80239A8
_080ADB76:
	ldr r0, [r4]
	cmp r0, #1
	bne _080ADB84
	str r5, [r4]
	ldr r1, [r6]
	ldr r0, _080ADB9C @ =sub_80AE720
	str r0, [r1, #8]
_080ADB84:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080ADB8C: .4byte gCurTask
_080ADB90: .4byte gBldRegs
_080ADB94: .4byte gUnknown_080DBCF9
_080ADB98: .4byte 0x06012000
_080ADB9C: .4byte sub_80AE720

	thumb_func_start sub_80ADBA0
sub_80ADBA0: @ 0x080ADBA0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	ldr r1, _080ADC60 @ =gCurTask
	ldr r0, [r1]
	ldrh r4, [r0, #6]
	movs r2, #0xc0
	lsls r2, r2, #0x12
	mov r8, r2
	add r8, r4
	movs r0, #0x14
	bl VramMalloc
	adds r7, r0, #0
	movs r0, #0x23
	bl VramMalloc
	adds r1, r0, #0
	ldr r2, _080ADC64 @ =0x0300000C
	adds r0, r4, r2
	str r1, [r0]
	ldr r5, _080ADC68 @ =gUnknown_080DBCFC
	ldrh r1, [r5]
	movs r6, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r5, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	mov r2, r8
	ldr r1, [r2, #4]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r2, #8]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r1, #0x90
	lsls r1, r1, #3
	strh r1, [r0, #0x14]
	strh r6, [r0, #0xe]
	strh r6, [r0, #0x16]
	movs r2, #0x10
	mov sl, r2
	mov r1, sl
	strb r1, [r0, #0x1c]
	movs r2, #2
	mov sb, r2
	mov r1, sb
	strb r1, [r0, #0x1f]
	str r6, [r0, #8]
	bl UpdateSpriteAnimation
	ldr r2, _080ADC6C @ =0x0300003C
	adds r4, r4, r2
	str r7, [r4]
	ldrh r0, [r5, #0x10]
	strh r0, [r4, #0xc]
	ldrb r0, [r5, #0x12]
	strb r0, [r4, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r4, #0x1b]
	mov r1, r8
	ldr r0, [r1, #4]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r1, #8]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	movs r2, #0x90
	lsls r2, r2, #3
	strh r2, [r4, #0x14]
	strh r6, [r4, #0xe]
	strh r6, [r4, #0x16]
	mov r0, sl
	strb r0, [r4, #0x1c]
	mov r1, sb
	strb r1, [r4, #0x1f]
	str r6, [r4, #8]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	ldr r2, _080ADC60 @ =gCurTask
	ldr r1, [r2]
	ldr r0, _080ADC70 @ =sub_80ADC74
	str r0, [r1, #8]
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080ADC60: .4byte gCurTask
_080ADC64: .4byte 0x0300000C
_080ADC68: .4byte gUnknown_080DBCFC
_080ADC6C: .4byte 0x0300003C
_080ADC70: .4byte sub_80ADC74

	thumb_func_start sub_80ADC74
sub_80ADC74: @ 0x080ADC74
	push {r4, lr}
	ldr r0, _080ADC9C @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldrb r0, [r4]
	cmp r0, #0
	bne _080ADCA0
	adds r0, r4, #0
	bl sub_80AE850
	adds r0, r4, #0
	bl sub_80AE814
	cmp r0, #1
	bne _080ADCB0
	b _080ADCAA
	.align 2, 0
_080ADC9C: .4byte gCurTask
_080ADCA0:
	adds r0, r4, #0
	bl sub_80AE850
	cmp r0, #0
	bne _080ADCB0
_080ADCAA:
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
_080ADCB0:
	ldrb r0, [r4]
	cmp r0, #1
	beq _080ADCBC
	cmp r0, #3
	beq _080ADCDC
	b _080ADCEA
_080ADCBC:
	adds r1, r4, #0
	adds r1, #0xc
	ldr r2, _080ADCD8 @ =gUnknown_080DBCFC
	ldrh r0, [r2, #8]
	strh r0, [r1, #0xc]
	ldrb r0, [r2, #0xa]
	strb r0, [r1, #0x1a]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	b _080ADCEA
	.align 2, 0
_080ADCD8: .4byte gUnknown_080DBCFC
_080ADCDC:
	ldr r0, [r4, #0xc]
	bl VramFree
	ldr r0, _080ADCF0 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080ADCF4 @ =sub_80AE7C4
	str r0, [r1, #8]
_080ADCEA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080ADCF0: .4byte gCurTask
_080ADCF4: .4byte sub_80AE7C4

	thumb_func_start sub_80ADCF8
sub_80ADCF8: @ 0x080ADCF8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	ldr r1, _080ADDFC @ =gCurTask
	ldr r0, [r1]
	ldrh r4, [r0, #6]
	movs r6, #0xc0
	lsls r6, r6, #0x12
	adds r6, r4, r6
	movs r0, #0x14
	bl VramMalloc
	mov sl, r0
	movs r0, #9
	bl VramMalloc
	adds r7, r0, #0
	movs r0, #0x24
	bl VramMalloc
	adds r1, r0, #0
	ldr r2, _080ADE00 @ =0x0300003C
	adds r0, r4, r2
	str r1, [r0]
	ldr r1, _080ADE04 @ =gUnknown_080DBD1C
	mov r8, r1
	ldrh r1, [r1]
	movs r5, #0
	strh r1, [r0, #0xc]
	mov r2, r8
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r6, #4]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r6, #8]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r1, #0x90
	lsls r1, r1, #3
	strh r1, [r0, #0x14]
	strh r5, [r0, #0xe]
	strh r5, [r0, #0x16]
	movs r2, #0x10
	mov sb, r2
	mov r1, sb
	strb r1, [r0, #0x1c]
	movs r2, #2
	strb r2, [r0, #0x1f]
	str r5, [r0, #8]
	bl UpdateSpriteAnimation
	ldr r1, _080ADE08 @ =0x0300000C
	adds r0, r4, r1
	str r7, [r0]
	ldr r2, _080ADE0C @ =gUnknown_080DBD34
	ldrh r1, [r2]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r6, #4]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r6, #8]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r1, #0x88
	lsls r1, r1, #3
	strh r1, [r0, #0x14]
	strh r5, [r0, #0xe]
	strh r5, [r0, #0x16]
	mov r2, sb
	strb r2, [r0, #0x1c]
	movs r1, #0
	strb r1, [r0, #0x1f]
	movs r1, #0x80
	lsls r1, r1, #3
	str r1, [r0, #8]
	bl UpdateSpriteAnimation
	ldr r2, _080ADE10 @ =0x0300006C
	adds r4, r4, r2
	mov r0, sl
	str r0, [r4]
	mov r1, r8
	ldrh r0, [r1, #0x10]
	strh r0, [r4, #0xc]
	ldrb r0, [r1, #0x12]
	strb r0, [r4, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r4, #0x1b]
	ldr r0, [r6, #4]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r6, #8]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	movs r2, #0x90
	lsls r2, r2, #3
	strh r2, [r4, #0x14]
	strh r5, [r4, #0xe]
	strh r5, [r4, #0x16]
	mov r0, sb
	strb r0, [r4, #0x1c]
	movs r1, #2
	strb r1, [r4, #0x1f]
	str r5, [r4, #8]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	ldr r2, _080ADDFC @ =gCurTask
	ldr r1, [r2]
	ldr r0, _080ADE14 @ =sub_80ADE18
	str r0, [r1, #8]
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080ADDFC: .4byte gCurTask
_080ADE00: .4byte 0x0300003C
_080ADE04: .4byte gUnknown_080DBD1C
_080ADE08: .4byte 0x0300000C
_080ADE0C: .4byte gUnknown_080DBD34
_080ADE10: .4byte 0x0300006C
_080ADE14: .4byte sub_80ADE18

	thumb_func_start sub_80ADE18
sub_80ADE18: @ 0x080ADE18
	push {r4, r5, lr}
	ldr r0, _080ADE5C @ =gCurTask
	ldr r0, [r0]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	ldrb r0, [r4]
	cmp r0, #1
	bne _080ADE32
	ldrh r0, [r4, #2]
	adds r0, #1
	strh r0, [r4, #2]
_080ADE32:
	adds r0, r4, #0
	bl sub_80AE8D4
	cmp r0, #1
	bne _080ADE68
	ldrb r0, [r4]
	cmp r0, #0
	bne _080ADE68
	ldr r0, _080ADE60 @ =0x0300003C
	adds r1, r5, r0
	ldr r2, _080ADE64 @ =gUnknown_080DBD1C
	ldrh r0, [r2, #8]
	strh r0, [r1, #0xc]
	ldrb r0, [r2, #0xa]
	strb r0, [r1, #0x1a]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	b _080ADE94
	.align 2, 0
_080ADE5C: .4byte gCurTask
_080ADE60: .4byte 0x0300003C
_080ADE64: .4byte gUnknown_080DBD1C
_080ADE68:
	movs r1, #2
	ldrsh r0, [r4, r1]
	cmp r0, #0xd
	bne _080ADE94
	ldr r0, [r4, #0x3c]
	bl VramFree
	ldrb r0, [r4]
	adds r0, #1
	movs r1, #0
	strb r0, [r4]
	strh r1, [r4, #2]
	ldr r0, _080ADE8C @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080ADE90 @ =sub_80AE884
	str r0, [r1, #8]
	b _080ADE9A
	.align 2, 0
_080ADE8C: .4byte gCurTask
_080ADE90: .4byte sub_80AE884
_080ADE94:
	adds r0, r4, #0
	bl sub_80ADEA0
_080ADE9A:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_80ADEA0
sub_80ADEA0: @ 0x080ADEA0
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r6, r4, #0
	adds r6, #0xc
	ldrb r0, [r4]
	adds r5, r4, #0
	adds r5, #0x6c
	cmp r0, #1
	bhi _080ADEB4
	subs r5, #0x30
_080ADEB4:
	ldr r0, [r4, #4]
	asrs r0, r0, #8
	strh r0, [r5, #0x10]
	ldr r0, [r4, #8]
	asrs r0, r0, #8
	strh r0, [r5, #0x12]
	adds r0, r5, #0
	bl UpdateSpriteAnimation
	adds r7, r0, #0
	adds r0, r5, #0
	bl DisplaySprite
	ldr r0, [r4, #4]
	asrs r0, r0, #8
	subs r0, #0x12
	strh r0, [r6, #0x10]
	ldr r0, [r4, #8]
	asrs r0, r0, #8
	subs r0, #5
	strh r0, [r6, #0x12]
	ldrb r0, [r4]
	cmp r0, #1
	bhi _080ADEEE
	ldr r0, [r6, #8]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	b _080ADEF4
_080ADEEE:
	ldr r0, [r6, #8]
	ldr r1, _080ADF0C @ =0xFFFFFBFF
	ands r0, r1
_080ADEF4:
	str r0, [r6, #8]
	adds r0, r6, #0
	bl UpdateSpriteAnimation
	adds r0, r6, #0
	bl DisplaySprite
	adds r0, r7, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080ADF0C: .4byte 0xFFFFFBFF

	thumb_func_start sub_80ADF10
sub_80ADF10: @ 0x080ADF10
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	ldr r1, _080AE018 @ =gCurTask
	ldr r0, [r1]
	ldrh r4, [r0, #6]
	movs r5, #0xc0
	lsls r5, r5, #0x12
	adds r5, r4, r5
	movs r0, #0x14
	bl VramMalloc
	adds r7, r0, #0
	movs r0, #0x4f
	bl VramMalloc
	adds r2, r0, #0
	ldr r3, _080AE01C @ =0x0300003C
	adds r0, r4, r3
	str r2, [r0]
	movs r1, #0x80
	lsls r1, r1, #4
	adds r2, r2, r1
	ldr r3, _080AE020 @ =gUnknown_080DBD3C
	mov r8, r3
	ldrh r1, [r3]
	movs r6, #0
	strh r1, [r0, #0xc]
	ldrb r1, [r3, #2]
	strb r1, [r0, #0x1a]
	movs r1, #0xff
	strb r1, [r0, #0x1b]
	ldr r1, [r5, #4]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r5, #8]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r1, #0x90
	lsls r1, r1, #3
	strh r1, [r0, #0x14]
	strh r6, [r0, #0xe]
	strh r6, [r0, #0x16]
	movs r3, #0x10
	mov sb, r3
	mov r1, sb
	strb r1, [r0, #0x1c]
	movs r3, #2
	strb r3, [r0, #0x1f]
	movs r1, #0x80
	lsls r1, r1, #3
	mov sl, r1
	str r1, [r0, #8]
	str r2, [sp]
	bl UpdateSpriteAnimation
	ldr r3, _080AE024 @ =0x0300000C
	adds r0, r4, r3
	ldr r2, [sp]
	str r2, [r0]
	ldr r2, _080AE028 @ =gUnknown_080DBD54
	ldrh r1, [r2]
	strh r1, [r0, #0xc]
	ldrb r1, [r2, #2]
	strb r1, [r0, #0x1a]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #0x1b]
	ldr r1, [r5, #4]
	asrs r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, [r5, #8]
	asrs r1, r1, #8
	strh r1, [r0, #0x12]
	movs r1, #0x88
	lsls r1, r1, #3
	strh r1, [r0, #0x14]
	strh r6, [r0, #0xe]
	strh r6, [r0, #0x16]
	mov r1, sb
	strb r1, [r0, #0x1c]
	movs r3, #0
	strb r3, [r0, #0x1f]
	mov r1, sl
	str r1, [r0, #8]
	bl UpdateSpriteAnimation
	ldr r3, _080AE02C @ =0x0300006C
	adds r4, r4, r3
	str r7, [r4]
	mov r1, r8
	ldrh r0, [r1, #0x10]
	strh r0, [r4, #0xc]
	ldrb r0, [r1, #0x12]
	strb r0, [r4, #0x1a]
	movs r0, #1
	rsbs r0, r0, #0
	strb r0, [r4, #0x1b]
	ldr r0, [r5, #4]
	asrs r0, r0, #8
	strh r0, [r4, #0x10]
	ldr r0, [r5, #8]
	asrs r0, r0, #8
	strh r0, [r4, #0x12]
	movs r3, #0x90
	lsls r3, r3, #3
	strh r3, [r4, #0x14]
	strh r6, [r4, #0xe]
	strh r6, [r4, #0x16]
	mov r0, sb
	strb r0, [r4, #0x1c]
	movs r1, #2
	strb r1, [r4, #0x1f]
	str r6, [r4, #8]
	adds r0, r4, #0
	bl UpdateSpriteAnimation
	ldr r3, _080AE018 @ =gCurTask
	ldr r1, [r3]
	ldr r0, _080AE030 @ =sub_80AE034
	str r0, [r1, #8]
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AE018: .4byte gCurTask
_080AE01C: .4byte 0x0300003C
_080AE020: .4byte gUnknown_080DBD3C
_080AE024: .4byte 0x0300000C
_080AE028: .4byte gUnknown_080DBD54
_080AE02C: .4byte 0x0300006C
_080AE030: .4byte sub_80AE034

	thumb_func_start sub_80AE034
sub_80AE034: @ 0x080AE034
	push {r4, r5, lr}
	ldr r5, _080AE080 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldrb r0, [r4]
	cmp r0, #1
	bne _080AE060
	ldr r0, _080AE084 @ =0x0300003C
	adds r1, r1, r0
	ldr r2, _080AE088 @ =gUnknown_080DBD3C
	ldrh r0, [r2, #8]
	strh r0, [r1, #0xc]
	ldrb r0, [r2, #0xa]
	strb r0, [r1, #0x1a]
	movs r0, #0xff
	strb r0, [r1, #0x1b]
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
_080AE060:
	adds r0, r4, #0
	bl sub_80AE09C
	cmp r0, #1
	bne _080AE090
	ldr r0, [r4, #0x3c]
	bl VramFree
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	ldr r1, [r5]
	ldr r0, _080AE08C @ =sub_80AE90C
	str r0, [r1, #8]
	b _080AE096
	.align 2, 0
_080AE080: .4byte gCurTask
_080AE084: .4byte 0x0300003C
_080AE088: .4byte gUnknown_080DBD3C
_080AE08C: .4byte sub_80AE90C
_080AE090:
	adds r0, r4, #0
	bl sub_80AE110
_080AE096:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_80AE09C
sub_80AE09C: @ 0x080AE09C
	push {lr}
	adds r2, r0, #0
	ldr r3, [r2, #4]
	ldr r0, _080AE0EC @ =0x0000BDFF
	cmp r3, r0
	bgt _080AE100
	ldr r1, _080AE0F0 @ =gUnknown_080DBD5C
	ldrb r0, [r2]
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #8
	adds r1, r3, r0
	str r1, [r2, #4]
	ldr r0, _080AE0F4 @ =0x000063FF
	cmp r1, r0
	ble _080AE0C2
	ldrb r0, [r2]
	cmp r0, #0
	beq _080AE0DC
_080AE0C2:
	ldr r0, _080AE0F8 @ =0x000081FF
	ldr r1, [r2, #4]
	cmp r1, r0
	ble _080AE0D0
	ldrb r0, [r2]
	cmp r0, #2
	beq _080AE0DC
_080AE0D0:
	ldr r0, _080AE0FC @ =0x00009FFF
	cmp r1, r0
	ble _080AE0E0
	ldrb r0, [r2]
	cmp r0, #3
	bne _080AE0E0
_080AE0DC:
	adds r0, #1
	strb r0, [r2]
_080AE0E0:
	ldr r0, _080AE0EC @ =0x0000BDFF
	cmp r1, r0
	ble _080AE10A
	adds r0, #1
	b _080AE104
	.align 2, 0
_080AE0EC: .4byte 0x0000BDFF
_080AE0F0: .4byte gUnknown_080DBD5C
_080AE0F4: .4byte 0x000063FF
_080AE0F8: .4byte 0x000081FF
_080AE0FC: .4byte 0x00009FFF
_080AE100:
	movs r0, #0xbe
	lsls r0, r0, #8
_080AE104:
	str r0, [r2, #4]
	movs r0, #1
	b _080AE10C
_080AE10A:
	movs r0, #0
_080AE10C:
	pop {r1}
	bx r1

	thumb_func_start sub_80AE110
sub_80AE110: @ 0x080AE110
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r6, r4, #0
	adds r6, #0xc
	ldrb r0, [r4]
	adds r5, r4, #0
	adds r5, #0x6c
	cmp r0, #4
	bhi _080AE124
	subs r5, #0x30
_080AE124:
	ldr r0, [r4, #4]
	asrs r0, r0, #8
	strh r0, [r5, #0x10]
	ldr r0, [r4, #8]
	asrs r0, r0, #8
	strh r0, [r5, #0x12]
	adds r0, r5, #0
	bl UpdateSpriteAnimation
	adds r7, r0, #0
	adds r0, r5, #0
	bl DisplaySprite
	ldrb r0, [r4]
	subs r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #3
	bhi _080AE16C
	ldr r0, [r4, #4]
	asrs r0, r0, #8
	strh r0, [r6, #0x10]
	ldr r0, [r4, #8]
	asrs r0, r0, #8
	adds r0, #0x10
	strh r0, [r6, #0x12]
	adds r0, r6, #0
	bl UpdateSpriteAnimation
	cmp r0, #0
	bne _080AE166
	movs r0, #0xff
	strb r0, [r6, #0x1b]
_080AE166:
	adds r0, r6, #0
	bl DisplaySprite
_080AE16C:
	adds r0, r7, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_80AE174
sub_80AE174: @ 0x080AE174
	push {lr}
	sub sp, #4
	ldr r0, _080AE1A8 @ =sub_80ADF10
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r1, _080AE1AC @ =sub_80AE1B4
	str r1, [sp]
	movs r1, #0x9c
	movs r3, #0
	bl TaskCreate
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r1, r1, r0
	movs r0, #0
	strb r0, [r1]
	strh r0, [r1, #2]
	ldr r0, _080AE1B0 @ =0xFFFFD800
	str r0, [r1, #4]
	movs r0, #0xf2
	lsls r0, r0, #7
	str r0, [r1, #8]
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_080AE1A8: .4byte sub_80ADF10
_080AE1AC: .4byte sub_80AE1B4
_080AE1B0: .4byte 0xFFFFD800

	thumb_func_start sub_80AE1B4
sub_80AE1B4: @ 0x080AE1B4
	push {lr}
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	ldr r0, [r0, #0x6c]
	bl VramFree
	pop {r0}
	bx r0

	thumb_func_start sub_80AE1C8
sub_80AE1C8: @ 0x080AE1C8
	push {lr}
	sub sp, #4
	ldr r0, _080AE1FC @ =sub_80ADCF8
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r1, _080AE200 @ =sub_80AE208
	str r1, [sp]
	movs r1, #0x9c
	movs r3, #0
	bl TaskCreate
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r1, r1, r0
	movs r0, #0
	strb r0, [r1]
	strh r0, [r1, #2]
	movs r0, #0xbe
	lsls r0, r0, #8
	str r0, [r1, #4]
	ldr r0, _080AE204 @ =0xFFFFD800
	str r0, [r1, #8]
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_080AE1FC: .4byte sub_80ADCF8
_080AE200: .4byte sub_80AE208
_080AE204: .4byte 0xFFFFD800

	thumb_func_start sub_80AE208
sub_80AE208: @ 0x080AE208
	push {r4, lr}
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	ldr r0, [r4, #0x6c]
	bl VramFree
	ldr r0, [r4, #0xc]
	bl VramFree
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_80AE224
sub_80AE224: @ 0x080AE224
	push {r4, lr}
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r0, r4, r0
	ldr r0, [r0, #0x5c]
	bl VramFree
	ldr r0, _080AE244 @ =0x030000B4
	adds r4, r4, r0
	ldr r0, [r4]
	bl EwramFree
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AE244: .4byte 0x030000B4

	thumb_func_start sub_80AE248
sub_80AE248: @ 0x080AE248
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	ldr r6, _080AE274 @ =gCurTask
	ldr r0, [r6]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	ldrb r0, [r4, #0x10]
	cmp r0, #0
	bne _080AE280
	ldr r1, _080AE278 @ =0x0300001A
	adds r0, r5, r1
	ldr r2, _080AE27C @ =0x03000028
	adds r1, r5, r2
	bl sub_80AD0B0
	ldrb r0, [r4, #0x10]
	adds r0, #1
	strb r0, [r4, #0x10]
	b _080AE2AC
	.align 2, 0
_080AE274: .4byte gCurTask
_080AE278: .4byte 0x0300001A
_080AE27C: .4byte 0x03000028
_080AE280:
	movs r0, #0
	strb r0, [r4, #0x10]
	ldrb r0, [r4, #0x18]
	ldr r3, _080AE2B4 @ =0x030000B4
	adds r1, r5, r3
	ldr r1, [r1]
	adds r1, #0x24
	ldr r4, _080AE2B8 @ =0x03000008
	adds r2, r5, r4
	ldr r7, _080AE2BC @ =0x03000010
	adds r3, r5, r7
	adds r7, #0x4c
	adds r4, r5, r7
	str r4, [sp]
	adds r7, #0x28
	adds r4, r5, r7
	str r4, [sp, #4]
	bl sub_80AE300
	ldr r1, [r6]
	ldr r0, _080AE2C0 @ =sub_80ACDB8
	str r0, [r1, #8]
_080AE2AC:
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AE2B4: .4byte 0x030000B4
_080AE2B8: .4byte 0x03000008
_080AE2BC: .4byte 0x03000010
_080AE2C0: .4byte sub_80ACDB8

	thumb_func_start sub_80AE2C4
sub_80AE2C4: @ 0x080AE2C4
	push {lr}
	adds r1, r0, #0
	ldr r0, [r1, #0x20]
	cmp r0, #0
	bge _080AE2DA
	movs r2, #0xa0
	lsls r2, r2, #3
	adds r0, r0, r2
	str r0, [r1, #0x20]
	cmp r0, #0
	ble _080AE2E2
_080AE2DA:
	movs r0, #0
	str r0, [r1, #0x20]
	movs r0, #1
	b _080AE2E4
_080AE2E2:
	movs r0, #0
_080AE2E4:
	pop {r1}
	bx r1

	thumb_func_start sub_80AE2E8
sub_80AE2E8: @ 0x080AE2E8
	ldr r1, [r0, #0x20]
	movs r2, #0x80
	lsls r2, r2, #6
	adds r1, r1, r2
	str r1, [r0, #0x28]
	ldr r1, [r0, #0x24]
	movs r2, #0xb0
	lsls r2, r2, #6
	adds r1, r1, r2
	str r1, [r0, #0x2c]
	movs r0, #0
	bx lr

	thumb_func_start sub_80AE300
sub_80AE300: @ 0x080AE300
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r5, r0, #0
	mov sl, r1
	mov sb, r2
	mov r8, r3
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	movs r7, #0
	ldr r0, _080AE3B4 @ =sub_80AE53C
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r1, _080AE3B8 @ =sub_80AE524
	str r1, [sp]
	movs r1, #0xb8
	movs r3, #0
	bl TaskCreate
	ldrh r4, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r1, r4, r1
	movs r6, #0
	strb r7, [r1, #0x10]
	mov r0, r8
	str r0, [r1, #0x14]
	strb r5, [r1, #0x18]
	strb r7, [r1, #0x1a]
	movs r0, #1
	str r0, [r1]
	mov r2, sb
	str r2, [r1, #0xc]
	movs r0, #0x12
	strb r0, [r1, #0x19]
	movs r2, #0xe1
	lsls r2, r2, #9
	str r2, [r1, #0x20]
	movs r0, #0xc4
	lsls r0, r0, #7
	str r0, [r1, #0x24]
	str r2, [r1, #0x28]
	movs r0, #0x92
	lsls r0, r0, #8
	str r0, [r1, #0x2c]
	ldr r2, _080AE3BC @ =0x030000AC
	adds r0, r4, r2
	ldr r2, [sp, #0x28]
	str r2, [r0]
	ldr r2, _080AE3C0 @ =0x030000B0
	adds r0, r4, r2
	ldr r2, [sp, #0x2c]
	str r2, [r0]
	mov r0, sl
	str r0, [r1, #0x30]
	ldr r7, _080AE3C4 @ =0x00000CAC
	adds r0, r7, #0
	bl EwramMalloc
	ldr r1, _080AE3C8 @ =0x030000B4
	adds r4, r4, r1
	str r0, [r4]
	strb r6, [r0, #6]
	ldr r0, [r4]
	str r6, [r0]
	ldr r1, [r4]
	ldr r0, _080AE3CC @ =0x06012F00
	str r0, [r1, #0x28]
	str r6, [sp, #4]
	ldr r0, [r4]
	ldr r1, [r0, #0x28]
	ldr r2, _080AE3D0 @ =0x010003C0
	add r0, sp, #4
	bl CpuFastSet
	ldr r1, [r4]
	ldr r0, [r1, #0x28]
	str r0, [r1, #0x24]
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AE3B4: .4byte sub_80AE53C
_080AE3B8: .4byte sub_80AE524
_080AE3BC: .4byte 0x030000AC
_080AE3C0: .4byte 0x030000B0
_080AE3C4: .4byte 0x00000CAC
_080AE3C8: .4byte 0x030000B4
_080AE3CC: .4byte 0x06012F00
_080AE3D0: .4byte 0x010003C0

	thumb_func_start sub_80AE3D4
sub_80AE3D4: @ 0x080AE3D4
	push {lr}
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	ldr r0, [r0, #0x14]
	bl VramFree
	pop {r0}
	bx r0

	thumb_func_start sub_80AE3E8
sub_80AE3E8: @ 0x080AE3E8
	push {r4, r5, lr}
	ldr r5, _080AE420 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_80AD190
	ldr r0, [r4]
	ldrb r0, [r0]
	cmp r0, #0xff
	bne _080AE40A
	adds r0, r4, #0
	bl sub_80AE428
_080AE40A:
	ldr r0, _080AE424 @ =gBldRegs
	ldrh r0, [r0, #4]
	cmp r0, #0x10
	bne _080AE418
	ldr r0, [r5]
	bl TaskDestroy
_080AE418:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AE420: .4byte gCurTask
_080AE424: .4byte gBldRegs

	thumb_func_start sub_80AE428
sub_80AE428: @ 0x080AE428
	push {lr}
	adds r2, r0, #0
	ldr r1, [r2, #0xc]
	ldr r0, _080AE440 @ =0xFFFFBA00
	cmp r1, r0
	ble _080AE43A
	ldr r3, _080AE444 @ =0xFFFFFF00
	adds r0, r1, r3
	str r0, [r2, #0xc]
_080AE43A:
	pop {r0}
	bx r0
	.align 2, 0
_080AE440: .4byte 0xFFFFBA00
_080AE444: .4byte 0xFFFFFF00

	thumb_func_start sub_80AE448
sub_80AE448: @ 0x080AE448
	push {lr}
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	ldr r0, [r0, #0x1c]
	bl VramFree
	pop {r0}
	bx r0

	thumb_func_start sub_80AE45C
sub_80AE45C: @ 0x080AE45C
	push {r4, r5, lr}
	ldr r5, _080AE480 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_80AD408
	ldr r0, _080AE484 @ =gBldRegs
	ldrh r0, [r0, #4]
	cmp r0, #0x10
	bne _080AE488
	ldr r0, [r5]
	bl TaskDestroy
	b _080AE4BC
	.align 2, 0
_080AE480: .4byte gCurTask
_080AE484: .4byte gBldRegs
_080AE488:
	ldrb r0, [r4]
	cmp r0, #0
	bne _080AE4BC
	ldr r0, [r4, #4]
	ldrb r0, [r0]
	cmp r0, #2
	bne _080AE4BC
	adds r0, r4, #0
	bl sub_80AE4F8
	cmp r0, #0
	bne _080AE4A8
	adds r0, r4, #0
	bl sub_80AE4C4
	b _080AE4BC
_080AE4A8:
	ldrh r0, [r4, #8]
	adds r0, #1
	strh r0, [r4, #8]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x3b
	bhi _080AE4BC
	adds r0, r4, #0
	bl sub_80AE4C4
_080AE4BC:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80AE4C4
sub_80AE4C4: @ 0x080AE4C4
	push {r4, lr}
	movs r1, #0x86
	lsls r1, r1, #1
	adds r4, r0, r1
	ldr r1, [r0, #0xc]
	ldr r2, [r1]
	asrs r2, r2, #8
	strh r2, [r4, #0x10]
	ldr r1, [r0, #0x10]
	ldr r3, [r1]
	asrs r3, r3, #8
	strh r3, [r4, #0x12]
	ldr r1, [r0, #0x14]
	asrs r1, r1, #8
	adds r2, r2, r1
	strh r2, [r4, #0x10]
	ldr r0, [r0, #0x18]
	asrs r0, r0, #8
	adds r3, r3, r0
	strh r3, [r4, #0x12]
	adds r0, r4, #0
	bl DisplaySprite
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_80AE4F8
sub_80AE4F8: @ 0x080AE4F8
	push {lr}
	adds r1, r0, #0
	movs r0, #0xa0
	lsls r0, r0, #5
	str r0, [r1, #0x14]
	ldr r0, [r1, #0x18]
	ldr r2, _080AE518 @ =0xFFFFE800
	cmp r0, r2
	bge _080AE512
	adds r0, #0x40
	str r0, [r1, #0x18]
	cmp r0, r2
	ble _080AE51C
_080AE512:
	str r2, [r1, #0x18]
	movs r0, #1
	b _080AE51E
	.align 2, 0
_080AE518: .4byte 0xFFFFE800
_080AE51C:
	movs r0, #0
_080AE51E:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80AE524
sub_80AE524: @ 0x080AE524
	push {lr}
	ldrh r0, [r0, #6]
	ldr r1, _080AE538 @ =0x030000B4
	adds r0, r0, r1
	ldr r0, [r0]
	bl EwramFree
	pop {r0}
	bx r0
	.align 2, 0
_080AE538: .4byte 0x030000B4

	thumb_func_start sub_80AE53C
sub_80AE53C: @ 0x080AE53C
	push {r4, lr}
	ldr r2, _080AE568 @ =gCurTask
	ldr r0, [r2]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldrb r0, [r4, #0x10]
	cmp r0, #0
	bne _080AE570
	ldr r2, _080AE56C @ =0x0300001A
	adds r0, r1, r2
	adds r2, #0xe
	adds r1, r1, r2
	ldrb r2, [r4, #0x18]
	bl sub_80AD234
	ldrb r0, [r4, #0x10]
	adds r0, #1
	strb r0, [r4, #0x10]
	b _080AE57A
	.align 2, 0
_080AE568: .4byte gCurTask
_080AE56C: .4byte 0x0300001A
_080AE570:
	movs r0, #0
	strb r0, [r4, #0x10]
	ldr r1, [r2]
	ldr r0, _080AE580 @ =sub_80AD634
	str r0, [r1, #8]
_080AE57A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AE580: .4byte sub_80AD634

	thumb_func_start sub_80AE584
sub_80AE584: @ 0x080AE584
	push {r4, r5, lr}
	ldr r5, _080AE5B8 @ =gCurTask
	ldr r0, [r5]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r0, r4, r0
	movs r1, #0
	str r1, [r0, #8]
	bl sub_80AD72C
	ldr r0, _080AE5BC @ =0x030000B4
	adds r4, r4, r0
	ldr r0, [r4]
	bl sub_80239A8
	ldr r0, _080AE5C0 @ =gBldRegs
	ldrh r0, [r0, #4]
	cmp r0, #0x10
	bne _080AE5B2
	ldr r0, [r5]
	bl TaskDestroy
_080AE5B2:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AE5B8: .4byte gCurTask
_080AE5BC: .4byte 0x030000B4
_080AE5C0: .4byte gBldRegs

	thumb_func_start sub_80AE5C4
sub_80AE5C4: @ 0x080AE5C4
	push {r4, r5, r6, lr}
	ldr r6, _080AE5F4 @ =gCurTask
	ldr r0, [r6]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r5, r0
	adds r0, r4, #0
	bl sub_80AD72C
	ldr r0, [r4]
	cmp r0, #0
	bne _080AE5E8
	ldr r1, _080AE5F8 @ =0x030000B4
	adds r0, r5, r1
	ldr r0, [r0]
	bl sub_80239A8
_080AE5E8:
	ldrh r0, [r4, #0x1e]
	cmp r0, #0
	beq _080AE5FC
	subs r0, #1
	strh r0, [r4, #0x1e]
	b _080AE630
	.align 2, 0
_080AE5F4: .4byte gCurTask
_080AE5F8: .4byte 0x030000B4
_080AE5FC:
	ldr r0, [r4, #0xc]
	ldr r3, [r0]
	cmp r3, #1
	bne _080AE630
	ldr r2, _080AE620 @ =gUnknown_080DBCBE
	ldrb r1, [r4, #0x18]
	lsls r0, r1, #3
	adds r0, r0, r1
	ldrb r1, [r4, #0x10]
	adds r0, r0, r1
	adds r0, r0, r2
	ldrb r0, [r0]
	cmp r0, #0xff
	bne _080AE628
	ldr r1, [r6]
	ldr r0, _080AE624 @ =sub_80AE584
	b _080AE62E
	.align 2, 0
_080AE620: .4byte gUnknown_080DBCBE
_080AE624: .4byte sub_80AE584
_080AE628:
	str r3, [r4]
	ldr r1, [r6]
	ldr r0, _080AE638 @ =sub_80AD634
_080AE62E:
	str r0, [r1, #8]
_080AE630:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080AE638: .4byte sub_80AD634

	thumb_func_start sub_80AE63C
sub_80AE63C: @ 0x080AE63C
	push {lr}
	adds r2, r0, #0
	ldr r1, [r2, #0x20]
	movs r3, #0xf0
	lsls r3, r3, #8
	cmp r1, r3
	ble _080AE656
	ldr r0, _080AE65C @ =0xFFFFFB00
	adds r1, r1, r0
	str r1, [r2, #0x20]
	ldr r0, _080AE660 @ =0x0000EFFF
	cmp r1, r0
	bgt _080AE664
_080AE656:
	str r3, [r2, #0x20]
	movs r0, #1
	b _080AE666
	.align 2, 0
_080AE65C: .4byte 0xFFFFFB00
_080AE660: .4byte 0x0000EFFF
_080AE664:
	movs r0, #0
_080AE666:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80AE66C
sub_80AE66C: @ 0x080AE66C
	ldr r1, [r0, #0x20]
	ldr r2, _080AE684 @ =0xFFFFE000
	adds r1, r1, r2
	str r1, [r0, #0x28]
	ldr r1, [r0, #0x24]
	movs r2, #0xb0
	lsls r2, r2, #6
	adds r1, r1, r2
	str r1, [r0, #0x2c]
	movs r0, #0
	bx lr
	.align 2, 0
_080AE684: .4byte 0xFFFFE000

	thumb_func_start sub_80AE688
sub_80AE688: @ 0x080AE688
	push {lr}
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	ldr r0, [r0, #0x10]
	bl EwramFree
	pop {r0}
	bx r0

	thumb_func_start sub_80AE69C
sub_80AE69C: @ 0x080AE69C
	push {lr}
	ldr r0, _080AE6BC @ =gCurTask
	ldr r2, [r0]
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r3, r1, r0
	ldr r1, _080AE6C0 @ =gUnknown_080DBCF4
	ldrb r0, [r3, #8]
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r0, #0xff
	bne _080AE6C8
	ldr r0, _080AE6C4 @ =sub_80AE6D8
	b _080AE6CE
	.align 2, 0
_080AE6BC: .4byte gCurTask
_080AE6C0: .4byte gUnknown_080DBCF4
_080AE6C4: .4byte sub_80AE6D8
_080AE6C8:
	movs r0, #1
	str r0, [r3]
	ldr r0, _080AE6D4 @ =sub_80AD968
_080AE6CE:
	str r0, [r2, #8]
	pop {r0}
	bx r0
	.align 2, 0
_080AE6D4: .4byte sub_80AD968

	thumb_func_start sub_80AE6D8
sub_80AE6D8: @ 0x080AE6D8
	push {lr}
	ldr r1, _080AE704 @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _080AE708 @ =gBackgroundsCopyQueueCursor
	ldr r0, _080AE70C @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r1, _080AE710 @ =gUnknown_03006840
	movs r0, #0
	strb r0, [r1]
	ldr r1, _080AE714 @ =gVramGraphicsCopyCursor
	ldr r0, _080AE718 @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	movs r0, #0
	bl sub_80A209C
	pop {r0}
	bx r0
	.align 2, 0
_080AE704: .4byte 0x0000FFFF
_080AE708: .4byte gBackgroundsCopyQueueCursor
_080AE70C: .4byte gBackgroundsCopyQueueIndex
_080AE710: .4byte gUnknown_03006840
_080AE714: .4byte gVramGraphicsCopyCursor
_080AE718: .4byte gVramGraphicsCopyQueueIndex

	thumb_func_start sub_80AE71C
sub_80AE71C: @ 0x080AE71C
	bx lr
	.align 2, 0

	thumb_func_start sub_80AE720
sub_80AE720: @ 0x080AE720
	push {r4, r5, lr}
	ldr r5, _080AE758 @ =gCurTask
	ldr r0, [r5]
	ldrh r4, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r4, r0
	ldr r0, [r4, #0x10]
	bl sub_80239A8
	ldrh r0, [r4, #0xc]
	adds r0, #1
	strh r0, [r4, #0xc]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x3b
	bls _080AE750
	bl sub_8000804
	bl sub_8001E58
	ldr r1, [r5]
	ldr r0, _080AE75C @ =sub_80AE760
	str r0, [r1, #8]
_080AE750:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AE758: .4byte gCurTask
_080AE75C: .4byte sub_80AE760

	thumb_func_start sub_80AE760
sub_80AE760: @ 0x080AE760
	push {lr}
	bl sub_80C621C
	movs r0, #1
	bl sub_808ADF0
	pop {r0}
	bx r0

	thumb_func_start sub_80AE770
sub_80AE770: @ 0x080AE770
	push {lr}
	sub sp, #4
	ldr r0, _080AE7A4 @ =sub_80ADBA0
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r1, _080AE7A8 @ =sub_80AE7B0
	str r1, [sp]
	movs r1, #0x6c
	movs r3, #0
	bl TaskCreate
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r1, r1, r0
	movs r0, #0
	strb r0, [r1]
	strh r0, [r1, #2]
	movs r0, #0xbe
	lsls r0, r0, #8
	str r0, [r1, #4]
	ldr r0, _080AE7AC @ =0xFFFFD800
	str r0, [r1, #8]
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_080AE7A4: .4byte sub_80ADBA0
_080AE7A8: .4byte sub_80AE7B0
_080AE7AC: .4byte 0xFFFFD800

	thumb_func_start sub_80AE7B0
sub_80AE7B0: @ 0x080AE7B0
	push {lr}
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	ldr r0, [r0, #0x3c]
	bl VramFree
	pop {r0}
	bx r0

	thumb_func_start sub_80AE7C4
sub_80AE7C4: @ 0x080AE7C4
	push {r4, lr}
	ldr r0, _080AE80C @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_80AE850
	ldrh r1, [r4, #2]
	movs r2, #2
	ldrsh r0, [r4, r2]
	cmp r0, #0xd2
	bgt _080AE7F4
	adds r0, r1, #1
	strh r0, [r4, #2]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xd2
	bne _080AE7F4
	movs r0, #0
	bl sub_80ACC40
_080AE7F4:
	ldr r0, _080AE810 @ =gBldRegs
	ldrh r0, [r0, #4]
	cmp r0, #0x10
	bne _080AE804
	ldr r0, _080AE80C @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
_080AE804:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AE80C: .4byte gCurTask
_080AE810: .4byte gBldRegs

	thumb_func_start sub_80AE814
sub_80AE814: @ 0x080AE814
	push {lr}
	adds r1, r0, #0
	movs r0, #0xbe
	lsls r0, r0, #8
	str r0, [r1, #4]
	ldr r2, [r1, #8]
	ldr r0, _080AE83C @ =0x000079FF
	cmp r2, r0
	bgt _080AE840
	movs r3, #0xc0
	lsls r3, r3, #2
	adds r0, r2, r3
	str r0, [r1, #8]
	movs r2, #0xf4
	lsls r2, r2, #7
	cmp r0, r2
	ble _080AE84A
	str r2, [r1, #8]
	movs r0, #1
	b _080AE84C
	.align 2, 0
_080AE83C: .4byte 0x000079FF
_080AE840:
	movs r0, #0xf4
	lsls r0, r0, #7
	str r0, [r1, #8]
	movs r0, #1
	b _080AE84C
_080AE84A:
	movs r0, #0
_080AE84C:
	pop {r1}
	bx r1

	thumb_func_start sub_80AE850
sub_80AE850: @ 0x080AE850
	push {r4, r5, lr}
	adds r1, r0, #0
	ldrb r0, [r1]
	adds r5, r1, #0
	adds r5, #0x3c
	cmp r0, #2
	bhi _080AE860
	subs r5, #0x30
_080AE860:
	ldr r0, [r1, #4]
	asrs r0, r0, #8
	strh r0, [r5, #0x10]
	ldr r0, [r1, #8]
	asrs r0, r0, #8
	strh r0, [r5, #0x12]
	adds r0, r5, #0
	bl UpdateSpriteAnimation
	adds r4, r0, #0
	adds r0, r5, #0
	bl DisplaySprite
	adds r0, r4, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80AE884
sub_80AE884: @ 0x080AE884
	push {r4, lr}
	ldr r0, _080AE8CC @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_80ADEA0
	ldrh r1, [r4, #2]
	movs r2, #2
	ldrsh r0, [r4, r2]
	cmp r0, #0x78
	bgt _080AE8B4
	adds r0, r1, #1
	strh r0, [r4, #2]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x78
	bne _080AE8B4
	movs r0, #1
	bl sub_80ACC40
_080AE8B4:
	ldr r0, _080AE8D0 @ =gBldRegs
	ldrh r0, [r0, #4]
	cmp r0, #0x10
	bne _080AE8C4
	ldr r0, _080AE8CC @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
_080AE8C4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AE8CC: .4byte gCurTask
_080AE8D0: .4byte gBldRegs

	thumb_func_start sub_80AE8D4
sub_80AE8D4: @ 0x080AE8D4
	push {lr}
	adds r1, r0, #0
	ldr r2, [r1, #8]
	ldr r0, _080AE8F8 @ =0x000079FF
	cmp r2, r0
	bgt _080AE8FC
	movs r3, #0x80
	lsls r3, r3, #1
	adds r0, r2, r3
	str r0, [r1, #8]
	movs r2, #0xf4
	lsls r2, r2, #7
	cmp r0, r2
	ble _080AE906
	str r2, [r1, #8]
	movs r0, #1
	b _080AE908
	.align 2, 0
_080AE8F8: .4byte 0x000079FF
_080AE8FC:
	movs r0, #0xf4
	lsls r0, r0, #7
	str r0, [r1, #8]
	movs r0, #1
	b _080AE908
_080AE906:
	movs r0, #0
_080AE908:
	pop {r1}
	bx r1

	thumb_func_start sub_80AE90C
sub_80AE90C: @ 0x080AE90C
	push {r4, lr}
	ldr r0, _080AE954 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	adds r0, r4, #0
	bl sub_80AE110
	ldrh r1, [r4, #2]
	movs r2, #2
	ldrsh r0, [r4, r2]
	cmp r0, #0x78
	bgt _080AE93C
	adds r0, r1, #1
	strh r0, [r4, #2]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x78
	bne _080AE93C
	movs r0, #2
	bl sub_80ACC40
_080AE93C:
	ldr r0, _080AE958 @ =gBldRegs
	ldrh r0, [r0, #4]
	cmp r0, #0x10
	bne _080AE94C
	ldr r0, _080AE954 @ =gCurTask
	ldr r0, [r0]
	bl TaskDestroy
_080AE94C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AE954: .4byte gCurTask
_080AE958: .4byte gBldRegs

	thumb_func_start sub_80AE95C
sub_80AE95C: @ 0x080AE95C
	push {r4, r5, lr}
	sub sp, #8
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r1, _080AEA10 @ =gDispCnt
	ldr r2, _080AEA14 @ =0x00001041
	adds r0, r2, #0
	strh r0, [r1]
	ldr r0, _080AEA18 @ =sub_80AEA44
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r1, _080AEA1C @ =sub_80AED7C
	str r1, [sp]
	movs r1, #0xa4
	movs r3, #0
	bl TaskCreate
	ldrh r3, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r3, r3, r0
	ldr r0, _080AEA20 @ =gSaveGame
	ldr r1, _080AEA24 @ =0x00000366
	adds r0, r0, r1
	ldrb r0, [r0]
	movs r1, #0
	strb r0, [r3]
	strb r4, [r3, #1]
	movs r0, #0x1b
	strb r0, [r3, #2]
	strb r1, [r3, #3]
	movs r5, #0
	strh r1, [r3, #4]
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r3, #0xc]
	ldr r0, _080AEA28 @ =gUnknown_080DBD88
	lsls r4, r4, #1
	adds r4, r4, r0
	ldrh r0, [r4]
	lsls r0, r0, #8
	str r0, [r3, #0x10]
	str r1, [r3, #0x14]
	str r1, [r3, #0x18]
	str r1, [r3, #0x1c]
	str r1, [r3, #0x20]
	str r1, [sp, #4]
	ldr r2, _080AEA2C @ =0x040000D4
	add r0, sp, #4
	str r0, [r2]
	ldr r0, _080AEA30 @ =gBgCntRegs
	ldrh r1, [r0, #4]
	movs r0, #0xc
	ands r0, r1
	lsls r0, r0, #0xc
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r0, r0, r1
	str r0, [r2, #4]
	ldr r0, _080AEA34 @ =0x85000010
	str r0, [r2, #8]
	ldr r0, [r2, #8]
	ldr r4, _080AEA38 @ =gUnknown_03006230
	strb r5, [r4, #2]
	ldr r0, _080AEA3C @ =gUnknown_03003590
	strb r5, [r0, #8]
	strb r5, [r0, #9]
	movs r1, #0xff
	strb r1, [r0, #0xa]
	movs r2, #0x40
	strb r2, [r0, #0xb]
	strb r5, [r4, #1]
	strb r5, [r0, #4]
	strb r5, [r0, #5]
	movs r1, #1
	rsbs r1, r1, #0
	strb r1, [r0, #6]
	strb r2, [r0, #7]
	strb r5, [r4]
	strb r5, [r0]
	strb r5, [r0, #1]
	strb r1, [r0, #2]
	strb r2, [r0, #3]
	ldr r0, _080AEA40 @ =0x06010000
	str r0, [r3, #8]
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AEA10: .4byte gDispCnt
_080AEA14: .4byte 0x00001041
_080AEA18: .4byte sub_80AEA44
_080AEA1C: .4byte sub_80AED7C
_080AEA20: .4byte gSaveGame
_080AEA24: .4byte 0x00000366
_080AEA28: .4byte gUnknown_080DBD88
_080AEA2C: .4byte 0x040000D4
_080AEA30: .4byte gBgCntRegs
_080AEA34: .4byte 0x85000010
_080AEA38: .4byte gUnknown_03006230
_080AEA3C: .4byte gUnknown_03003590
_080AEA40: .4byte 0x06010000

	thumb_func_start sub_80AEA44
sub_80AEA44: @ 0x080AEA44
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	ldr r0, _080AEB40 @ =gCurTask
	ldr r0, [r0]
	ldrh r5, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r7, r5, r0
	ldr r1, _080AEB44 @ =0x03000024
	adds r0, r5, r1
	ldr r2, _080AEB48 @ =gDispCnt
	mov sb, r2
	ldrh r1, [r2]
	movs r3, #0x80
	lsls r3, r3, #1
	adds r2, r3, #0
	orrs r1, r2
	mov r2, sb
	strh r1, [r2]
	ldr r3, _080AEB4C @ =gBgCntRegs
	mov sl, r3
	movs r4, #0
	movs r1, #0xc0
	lsls r1, r1, #3
	strh r1, [r3]
	ldr r1, _080AEB50 @ =gBgScrollRegs
	mov r8, r1
	ldr r1, _080AEB54 @ =0x0000FFFC
	mov r2, r8
	strh r1, [r2]
	subs r1, #8
	strh r1, [r2, #2]
	movs r1, #0xc0
	lsls r1, r1, #0x13
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _080AEB58 @ =0x06003000
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	ldr r6, _080AEB5C @ =gUnknown_080DBD64
	ldrb r2, [r7]
	lsls r2, r2, #1
	ldrb r3, [r7, #1]
	lsls r1, r3, #1
	adds r1, r1, r3
	lsls r1, r1, #2
	adds r2, r2, r1
	adds r2, r2, r6
	ldrh r1, [r2]
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	movs r6, #0x20
	strh r6, [r0, #0x26]
	strh r6, [r0, #0x28]
	ldr r3, _080AEB60 @ =0x0300004E
	adds r1, r5, r3
	movs r2, #0
	strb r2, [r1]
	strh r4, [r0, #0x2e]
	bl DrawBackground
	ldr r3, _080AEB64 @ =0x03000064
	adds r0, r5, r3
	mov r2, sb
	ldrh r1, [r2]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r2, r3, #0
	orrs r1, r2
	mov r2, sb
	strh r1, [r2]
	ldr r1, _080AEB68 @ =0x00001608
	mov r3, sl
	strh r1, [r3, #2]
	mov r1, r8
	strh r4, [r1, #4]
	strh r4, [r1, #6]
	ldr r1, _080AEB6C @ =0x06008000
	str r1, [r0, #4]
	strh r4, [r0, #0xa]
	ldr r1, _080AEB70 @ =0x0600B000
	str r1, [r0, #0xc]
	strh r4, [r0, #0x18]
	strh r4, [r0, #0x1a]
	movs r1, #0xab
	lsls r1, r1, #1
	strh r1, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	strh r4, [r0, #0x20]
	strh r4, [r0, #0x22]
	strh r4, [r0, #0x24]
	strh r6, [r0, #0x26]
	strh r6, [r0, #0x28]
	ldr r2, _080AEB74 @ =0x0300008E
	adds r5, r5, r2
	movs r3, #0
	strb r3, [r5]
	strh r4, [r0, #0x2e]
	bl DrawBackground
	ldr r4, _080AEB78 @ =gFlags
	ldr r3, [r4]
	movs r0, #0x80
	lsls r0, r0, #9
	ands r0, r3
	cmp r0, #0
	beq _080AEB80
	ldr r0, _080AEB7C @ =gUnknown_08E2EF64
	ldrb r1, [r7, #1]
	lsls r1, r1, #2
	adds r1, r1, r0
	ldr r0, [r1]
	movs r1, #0x10
	movs r2, #0x20
	bl sub_80C460C
	b _080AEB9E
	.align 2, 0
_080AEB40: .4byte gCurTask
_080AEB44: .4byte 0x03000024
_080AEB48: .4byte gDispCnt
_080AEB4C: .4byte gBgCntRegs
_080AEB50: .4byte gBgScrollRegs
_080AEB54: .4byte 0x0000FFFC
_080AEB58: .4byte 0x06003000
_080AEB5C: .4byte gUnknown_080DBD64
_080AEB60: .4byte 0x0300004E
_080AEB64: .4byte 0x03000064
_080AEB68: .4byte 0x00001608
_080AEB6C: .4byte 0x06008000
_080AEB70: .4byte 0x0600B000
_080AEB74: .4byte 0x0300008E
_080AEB78: .4byte gFlags
_080AEB7C: .4byte gUnknown_08E2EF64
_080AEB80:
	ldr r1, _080AEBD4 @ =0x040000D4
	ldr r2, _080AEBD8 @ =gUnknown_08E2EF64
	ldrb r0, [r7, #1]
	lsls r0, r0, #2
	adds r0, r0, r2
	ldr r0, [r0]
	str r0, [r1]
	ldr r0, _080AEBDC @ =gUnknown_03003D50
	str r0, [r1, #4]
	ldr r0, _080AEBE0 @ =0x80000020
	str r0, [r1, #8]
	ldr r0, [r1, #8]
	movs r0, #1
	orrs r3, r0
	str r3, [r4]
_080AEB9E:
	ldr r1, _080AEBE4 @ =gUnknown_080DBE50
	ldrb r0, [r7, #1]
	adds r0, r0, r1
	ldrb r0, [r0]
	strb r0, [r7, #1]
	adds r0, r7, #1
	adds r1, r7, #2
	adds r2, r7, #0
	adds r2, #0xc
	adds r3, r7, #0
	adds r3, #0x10
	ldr r4, [r7, #8]
	str r4, [sp]
	bl sub_809BF3C
	ldr r0, _080AEBE8 @ =gCurTask
	ldr r1, [r0]
	ldr r0, _080AEBEC @ =sub_80AEBF0
	str r0, [r1, #8]
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AEBD4: .4byte 0x040000D4
_080AEBD8: .4byte gUnknown_08E2EF64
_080AEBDC: .4byte gUnknown_03003D50
_080AEBE0: .4byte 0x80000020
_080AEBE4: .4byte gUnknown_080DBE50
_080AEBE8: .4byte gCurTask
_080AEBEC: .4byte sub_80AEBF0

	thumb_func_start sub_80AEBF0
sub_80AEBF0: @ 0x080AEBF0
	push {r4, r5, lr}
	ldr r5, _080AEC60 @ =gCurTask
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r4, r1, r0
	ldrb r0, [r4, #3]
	cmp r0, #0
	beq _080AEC40
	ldr r2, _080AEC64 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080AEC68 @ =gWinRegs
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	ldrh r2, [r1, #8]
	movs r0, #0x3f
	orrs r0, r2
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	movs r3, #0
	orrs r0, r2
	strh r0, [r1, #0xa]
	ldr r1, _080AEC6C @ =gBldRegs
	ldr r0, _080AEC70 @ =0x00003FFF
	strh r0, [r1]
	movs r0, #0x10
	strh r0, [r1, #4]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r4, #4]
	strb r3, [r4, #3]
_080AEC40:
	adds r0, r4, #0
	bl sub_80AEDB8
	ldr r1, _080AEC6C @ =gBldRegs
	ldrh r0, [r1, #4]
	cmp r0, #0
	beq _080AEC78
	ldrh r0, [r4, #4]
	lsrs r0, r0, #8
	strh r0, [r1, #4]
	ldr r1, _080AEC74 @ =0xFFFFFF00
	adds r0, r1, #0
	ldrh r3, [r4, #4]
	adds r0, r0, r3
	strh r0, [r4, #4]
	b _080AEC8A
	.align 2, 0
_080AEC60: .4byte gCurTask
_080AEC64: .4byte gDispCnt
_080AEC68: .4byte gWinRegs
_080AEC6C: .4byte gBldRegs
_080AEC70: .4byte 0x00003FFF
_080AEC74: .4byte 0xFFFFFF00
_080AEC78:
	strh r0, [r1, #4]
	bl m4aMPlayAllStop
	movs r0, #0x63
	bl m4aSongNumStart
	ldr r1, [r5]
	ldr r0, _080AEC90 @ =sub_80AED80
	str r0, [r1, #8]
_080AEC8A:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AEC90: .4byte sub_80AED80

	thumb_func_start sub_80AEC94
sub_80AEC94: @ 0x080AEC94
	push {r4, r5, lr}
	ldr r0, _080AED00 @ =gCurTask
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0xc0
	lsls r0, r0, #0x12
	adds r5, r1, r0
	ldrb r0, [r5, #3]
	cmp r0, #0
	beq _080AECDE
	ldr r2, _080AED04 @ =gDispCnt
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080AED08 @ =gWinRegs
	movs r4, #0
	movs r0, #0xf0
	strh r0, [r1]
	movs r0, #0xa0
	strh r0, [r1, #4]
	ldrh r2, [r1, #8]
	movs r0, #0x3f
	orrs r0, r2
	strh r0, [r1, #8]
	ldrh r2, [r1, #0xa]
	movs r0, #0x1f
	movs r3, #0
	orrs r0, r2
	strh r0, [r1, #0xa]
	ldr r1, _080AED0C @ =gBldRegs
	ldr r0, _080AED10 @ =0x00003FFF
	strh r0, [r1]
	strh r4, [r5, #4]
	strb r3, [r5, #3]
_080AECDE:
	adds r0, r5, #0
	bl sub_80AEDB8
	ldr r1, _080AED0C @ =gBldRegs
	ldrh r0, [r1, #4]
	cmp r0, #0xf
	bhi _080AED14
	ldrh r0, [r5, #4]
	lsrs r0, r0, #8
	strh r0, [r1, #4]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r1, #0
	ldrh r3, [r5, #4]
	adds r0, r0, r3
	strh r0, [r5, #4]
	b _080AED5A
	.align 2, 0
_080AED00: .4byte gCurTask
_080AED04: .4byte gDispCnt
_080AED08: .4byte gWinRegs
_080AED0C: .4byte gBldRegs
_080AED10: .4byte 0x00003FFF
_080AED14:
	movs r0, #0x9b
	lsls r0, r0, #9
	str r0, [r5, #0xc]
	movs r0, #0x1d
	strb r0, [r5, #2]
	movs r4, #0
	movs r0, #0x10
	strh r0, [r1, #4]
	ldr r1, _080AED60 @ =0x0000FFFF
	movs r0, #0
	bl TasksDestroyInPriorityRange
	ldr r1, _080AED64 @ =gBackgroundsCopyQueueCursor
	ldr r0, _080AED68 @ =gBackgroundsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r0, _080AED6C @ =gUnknown_03006840
	strb r4, [r0]
	ldr r1, _080AED70 @ =gVramGraphicsCopyCursor
	ldr r0, _080AED74 @ =gVramGraphicsCopyQueueIndex
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r2, _080AED78 @ =gStageData
	ldrb r1, [r2, #9]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #0x11
	movs r1, #0x80
	lsls r1, r1, #0xa
	adds r0, r0, r1
	asrs r0, r0, #0x10
	ldrb r1, [r2, #0xa]
	subs r1, #2
	bl sub_8002210
_080AED5A:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AED60: .4byte 0x0000FFFF
_080AED64: .4byte gBackgroundsCopyQueueCursor
_080AED68: .4byte gBackgroundsCopyQueueIndex
_080AED6C: .4byte gUnknown_03006840
_080AED70: .4byte gVramGraphicsCopyCursor
_080AED74: .4byte gVramGraphicsCopyQueueIndex
_080AED78: .4byte gStageData

	thumb_func_start sub_80AED7C
sub_80AED7C: @ 0x080AED7C
	bx lr
	.align 2, 0

	thumb_func_start sub_80AED80
sub_80AED80: @ 0x080AED80
	push {r4, lr}
	ldr r4, _080AEDAC @ =gCurTask
	ldr r0, [r4]
	ldrh r0, [r0, #6]
	movs r1, #0xc0
	lsls r1, r1, #0x12
	adds r0, r0, r1
	bl sub_80AEDB8
	ldr r0, _080AEDB0 @ =gPressedKeys
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080AEDA4
	ldr r1, [r4]
	ldr r0, _080AEDB4 @ =sub_80AEC94
	str r0, [r1, #8]
_080AEDA4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AEDAC: .4byte gCurTask
_080AEDB0: .4byte gPressedKeys
_080AEDB4: .4byte sub_80AEC94

	thumb_func_start sub_80AEDB8
sub_80AEDB8: @ 0x080AEDB8
	ldr r2, [r0, #0x1c]
	adds r2, #0xc0
	str r2, [r0, #0x1c]
	ldr r1, [r0, #0x20]
	subs r1, #0xc0
	str r1, [r0, #0x20]
	ldr r0, _080AEDD0 @ =gBgScrollRegs
	asrs r2, r2, #8
	strh r2, [r0, #4]
	asrs r1, r1, #8
	strh r1, [r0, #6]
	bx lr
	.align 2, 0
_080AEDD0: .4byte gBgScrollRegs
